
UART_Transmit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000053a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000206  00800060  000053a6  0000543a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800266  00800266  00005640  2**0
                  ALLOC
  3 .stab         00006504  00000000  00000000  00005640  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003d89  00000000  00000000  0000bb44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000f8cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000fa8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000fca1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  000122b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00013781  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00014a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00014c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00014f73  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001598d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <__vector_1>
       8:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <__vector_2>
       c:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <__vector_10>
      2c:	0c 94 0f 10 	jmp	0x201e	; 0x201e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 a2 1a 	jmp	0x3544	; 0x3544 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ea       	ldi	r30, 0xA6	; 166
      68:	f3 e5       	ldi	r31, 0x53	; 83
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 38       	cpi	r26, 0x86	; 134
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <main>
      8a:	0c 94 d1 29 	jmp	0x53a2	; 0x53a2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9a 29 	jmp	0x5334	; 0x5334 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e6       	ldi	r26, 0x6C	; 108
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b6 29 	jmp	0x536c	; 0x536c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a6 29 	jmp	0x534c	; 0x534c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c2 29 	jmp	0x5384	; 0x5384 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a6 29 	jmp	0x534c	; 0x534c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c2 29 	jmp	0x5384	; 0x5384 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9a 29 	jmp	0x5334	; 0x5334 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e6       	ldi	r24, 0x6C	; 108
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b6 29 	jmp	0x536c	; 0x536c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a2 29 	jmp	0x5344	; 0x5344 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e6       	ldi	r22, 0x6C	; 108
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 be 29 	jmp	0x537c	; 0x537c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a6 29 	jmp	0x534c	; 0x534c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c2 29 	jmp	0x5384	; 0x5384 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a6 29 	jmp	0x534c	; 0x534c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c2 29 	jmp	0x5384	; 0x5384 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a6 29 	jmp	0x534c	; 0x534c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c2 29 	jmp	0x5384	; 0x5384 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a3 29 	jmp	0x5346	; 0x5346 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 bf 29 	jmp	0x537e	; 0x537e <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 aa 29 	jmp	0x5354	; 0x5354 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 c6 29 	jmp	0x538c	; 0x538c <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 a2 29 	jmp	0x5344	; 0x5344 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 be 29 	jmp	0x537c	; 0x537c <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ec 58       	subi	r30, 0x8C	; 140
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <UART_Init>:
#include"USART_Types.h"
#include"USART_Init.h"
#include<util/delay.h>

void UART_Init(UART_CONFIG *Ptr_Copy_UART)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	2b 97       	sbiw	r28, 0x0b	; 11
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	9b 83       	std	Y+3, r25	; 0x03
     f00:	8a 83       	std	Y+2, r24	; 0x02
	/*u8 variable to carry the values of UCSRC Register*/
	u8 Local_UCSRC=0;
     f02:	19 82       	std	Y+1, r1	; 0x01

	/*Select Asynchronous mode*/
	Local_UCSRC &= UCSRC_UMSEL_ASYNCH_MASK_Clear;
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	8f 7b       	andi	r24, 0xBF	; 191
     f08:	89 83       	std	Y+1, r24	; 0x01
	/*Clear UCPOL bit in UCSRC*/
	Local_UCSRC &= UCSRC_UCPOL_CLEAR_MASK;
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	8e 7f       	andi	r24, 0xFE	; 254
     f0e:	89 83       	std	Y+1, r24	; 0x01
	switch(Ptr_Copy_UART->Baud_NO)
     f10:	ea 81       	ldd	r30, Y+2	; 0x02
     f12:	fb 81       	ldd	r31, Y+3	; 0x03
     f14:	20 81       	ld	r18, Z
     f16:	31 81       	ldd	r19, Z+1	; 0x01
     f18:	3b 87       	std	Y+11, r19	; 0x0b
     f1a:	2a 87       	std	Y+10, r18	; 0x0a
     f1c:	8a 85       	ldd	r24, Y+10	; 0x0a
     f1e:	9b 85       	ldd	r25, Y+11	; 0x0b
     f20:	8f 3c       	cpi	r24, 0xCF	; 207
     f22:	91 05       	cpc	r25, r1
     f24:	89 f0       	breq	.+34     	; 0xf48 <UART_Init+0x5e>
     f26:	2a 85       	ldd	r18, Y+10	; 0x0a
     f28:	3b 85       	ldd	r19, Y+11	; 0x0b
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	20 3a       	cpi	r18, 0xA0	; 160
     f2e:	38 07       	cpc	r19, r24
     f30:	31 f0       	breq	.+12     	; 0xf3e <UART_Init+0x54>
     f32:	2a 85       	ldd	r18, Y+10	; 0x0a
     f34:	3b 85       	ldd	r19, Y+11	; 0x0b
     f36:	27 36       	cpi	r18, 0x67	; 103
     f38:	31 05       	cpc	r19, r1
     f3a:	59 f0       	breq	.+22     	; 0xf52 <UART_Init+0x68>
     f3c:	0e c0       	rjmp	.+28     	; 0xf5a <UART_Init+0x70>
	{
	case Baud_16MHz_2400:
		UBBRL=Baud_16MHz_2400;
     f3e:	e9 e2       	ldi	r30, 0x29	; 41
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 ea       	ldi	r24, 0xA0	; 160
     f44:	80 83       	st	Z, r24
     f46:	09 c0       	rjmp	.+18     	; 0xf5a <UART_Init+0x70>
		break;
	case Baud_16MHz_4800:
		UBBRL= Baud_16MHz_4800;
     f48:	e9 e2       	ldi	r30, 0x29	; 41
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	8f ec       	ldi	r24, 0xCF	; 207
     f4e:	80 83       	st	Z, r24
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <UART_Init+0x70>
		break;
	case Baud_16MHz_9600:
		UBBRL=Baud_16MHz_9600;
     f52:	e9 e2       	ldi	r30, 0x29	; 41
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	87 e6       	ldi	r24, 0x67	; 103
     f58:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
	switch(Ptr_Copy_UART->Word_size)
     f5a:	ea 81       	ldd	r30, Y+2	; 0x02
     f5c:	fb 81       	ldd	r31, Y+3	; 0x03
     f5e:	82 81       	ldd	r24, Z+2	; 0x02
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	39 87       	std	Y+9, r19	; 0x09
     f66:	28 87       	std	Y+8, r18	; 0x08
     f68:	88 85       	ldd	r24, Y+8	; 0x08
     f6a:	99 85       	ldd	r25, Y+9	; 0x09
     f6c:	82 30       	cpi	r24, 0x02	; 2
     f6e:	91 05       	cpc	r25, r1
     f70:	b1 f1       	breq	.+108    	; 0xfde <UART_Init+0xf4>
     f72:	28 85       	ldd	r18, Y+8	; 0x08
     f74:	39 85       	ldd	r19, Y+9	; 0x09
     f76:	23 30       	cpi	r18, 0x03	; 3
     f78:	31 05       	cpc	r19, r1
     f7a:	54 f4       	brge	.+20     	; 0xf90 <UART_Init+0xa6>
     f7c:	88 85       	ldd	r24, Y+8	; 0x08
     f7e:	99 85       	ldd	r25, Y+9	; 0x09
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	89 f0       	breq	.+34     	; 0xfa6 <UART_Init+0xbc>
     f84:	28 85       	ldd	r18, Y+8	; 0x08
     f86:	39 85       	ldd	r19, Y+9	; 0x09
     f88:	21 30       	cpi	r18, 0x01	; 1
     f8a:	31 05       	cpc	r19, r1
     f8c:	d1 f0       	breq	.+52     	; 0xfc2 <UART_Init+0xd8>
     f8e:	50 c0       	rjmp	.+160    	; 0x1030 <UART_Init+0x146>
     f90:	88 85       	ldd	r24, Y+8	; 0x08
     f92:	99 85       	ldd	r25, Y+9	; 0x09
     f94:	83 30       	cpi	r24, 0x03	; 3
     f96:	91 05       	cpc	r25, r1
     f98:	81 f1       	breq	.+96     	; 0xffa <UART_Init+0x110>
     f9a:	28 85       	ldd	r18, Y+8	; 0x08
     f9c:	39 85       	ldd	r19, Y+9	; 0x09
     f9e:	24 30       	cpi	r18, 0x04	; 4
     fa0:	31 05       	cpc	r19, r1
     fa2:	c9 f1       	breq	.+114    	; 0x1016 <UART_Init+0x12c>
     fa4:	45 c0       	rjmp	.+138    	; 0x1030 <UART_Init+0x146>
	{
	case Word_Size_5:
		CLR_BIT(Local_UCSRC,UCSRC_UCSZ0);
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	8d 7f       	andi	r24, 0xFD	; 253
     faa:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(Local_UCSRC,UCSRC_UCSZ1);
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	8b 7f       	andi	r24, 0xFB	; 251
     fb0:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(UCSRB,UCSRB_UCSZ2);
     fb2:	aa e2       	ldi	r26, 0x2A	; 42
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	ea e2       	ldi	r30, 0x2A	; 42
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	8b 7f       	andi	r24, 0xFB	; 251
     fbe:	8c 93       	st	X, r24
     fc0:	37 c0       	rjmp	.+110    	; 0x1030 <UART_Init+0x146>
		break;
	case Word_Size_6:
		SET_BIT(Local_UCSRC,UCSRC_UCSZ0);
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	82 60       	ori	r24, 0x02	; 2
     fc6:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(Local_UCSRC,UCSRC_UCSZ1);
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	8b 7f       	andi	r24, 0xFB	; 251
     fcc:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(UCSRB,UCSRB_UCSZ2);
     fce:	aa e2       	ldi	r26, 0x2A	; 42
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	ea e2       	ldi	r30, 0x2A	; 42
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	8b 7f       	andi	r24, 0xFB	; 251
     fda:	8c 93       	st	X, r24
     fdc:	29 c0       	rjmp	.+82     	; 0x1030 <UART_Init+0x146>
		break;
	case Word_Size_7:
		CLR_BIT(Local_UCSRC,UCSRC_UCSZ0);
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	8d 7f       	andi	r24, 0xFD	; 253
     fe2:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Local_UCSRC,UCSRC_UCSZ1);
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	84 60       	ori	r24, 0x04	; 4
     fe8:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(UCSRB,UCSRB_UCSZ2);
     fea:	aa e2       	ldi	r26, 0x2A	; 42
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	ea e2       	ldi	r30, 0x2A	; 42
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	8b 7f       	andi	r24, 0xFB	; 251
     ff6:	8c 93       	st	X, r24
     ff8:	1b c0       	rjmp	.+54     	; 0x1030 <UART_Init+0x146>
		break;
	case Word_Size_8:
		SET_BIT(Local_UCSRC,UCSRC_UCSZ0);
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	82 60       	ori	r24, 0x02	; 2
     ffe:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Local_UCSRC,UCSRC_UCSZ1);
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	84 60       	ori	r24, 0x04	; 4
    1004:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(UCSRB,UCSRB_UCSZ2);
    1006:	aa e2       	ldi	r26, 0x2A	; 42
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	ea e2       	ldi	r30, 0x2A	; 42
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	8b 7f       	andi	r24, 0xFB	; 251
    1012:	8c 93       	st	X, r24
    1014:	0d c0       	rjmp	.+26     	; 0x1030 <UART_Init+0x146>
		break;
	case Word_Size_9:
		SET_BIT(Local_UCSRC,UCSRC_UCSZ0);
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	82 60       	ori	r24, 0x02	; 2
    101a:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Local_UCSRC,UCSRC_UCSZ1);
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	84 60       	ori	r24, 0x04	; 4
    1020:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(UCSRB,UCSRB_UCSZ2);
    1022:	aa e2       	ldi	r26, 0x2A	; 42
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	ea e2       	ldi	r30, 0x2A	; 42
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	84 60       	ori	r24, 0x04	; 4
    102e:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
	switch(Ptr_Copy_UART->Parity_type)
    1030:	ea 81       	ldd	r30, Y+2	; 0x02
    1032:	fb 81       	ldd	r31, Y+3	; 0x03
    1034:	83 81       	ldd	r24, Z+3	; 0x03
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	3f 83       	std	Y+7, r19	; 0x07
    103c:	2e 83       	std	Y+6, r18	; 0x06
    103e:	8e 81       	ldd	r24, Y+6	; 0x06
    1040:	9f 81       	ldd	r25, Y+7	; 0x07
    1042:	81 30       	cpi	r24, 0x01	; 1
    1044:	91 05       	cpc	r25, r1
    1046:	69 f0       	breq	.+26     	; 0x1062 <UART_Init+0x178>
    1048:	2e 81       	ldd	r18, Y+6	; 0x06
    104a:	3f 81       	ldd	r19, Y+7	; 0x07
    104c:	22 30       	cpi	r18, 0x02	; 2
    104e:	31 05       	cpc	r19, r1
    1050:	79 f0       	breq	.+30     	; 0x1070 <UART_Init+0x186>
    1052:	8e 81       	ldd	r24, Y+6	; 0x06
    1054:	9f 81       	ldd	r25, Y+7	; 0x07
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	89 f4       	brne	.+34     	; 0x107c <UART_Init+0x192>
	{
	case Disabled:
		Local_UCSRC &= PARITYBITS_MASK_CLEAR;
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	8f 7c       	andi	r24, 0xCF	; 207
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	0d c0       	rjmp	.+26     	; 0x107c <UART_Init+0x192>
		break;
	case Enabled_Even_Parity:
		Local_UCSRC &= PARITYBITS_MASK_CLEAR;
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	8f 7c       	andi	r24, 0xCF	; 207
    1066:	89 83       	std	Y+1, r24	; 0x01
		Local_UCSRC |= PARITYBITS_EVEN_MASK_SET;
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	80 62       	ori	r24, 0x20	; 32
    106c:	89 83       	std	Y+1, r24	; 0x01
    106e:	06 c0       	rjmp	.+12     	; 0x107c <UART_Init+0x192>
		break;
	case Enabled_Odd_Parity:
		Local_UCSRC &= PARITYBITS_MASK_CLEAR;
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	8f 7c       	andi	r24, 0xCF	; 207
    1074:	89 83       	std	Y+1, r24	; 0x01
		Local_UCSRC |= PARITYBITS_ODD_MASK_SET;
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	80 63       	ori	r24, 0x30	; 48
    107a:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	switch(Ptr_Copy_UART->Stop_bits_no)
    107c:	ea 81       	ldd	r30, Y+2	; 0x02
    107e:	fb 81       	ldd	r31, Y+3	; 0x03
    1080:	84 81       	ldd	r24, Z+4	; 0x04
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	3d 83       	std	Y+5, r19	; 0x05
    1088:	2c 83       	std	Y+4, r18	; 0x04
    108a:	8c 81       	ldd	r24, Y+4	; 0x04
    108c:	9d 81       	ldd	r25, Y+5	; 0x05
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	31 f0       	breq	.+12     	; 0x109e <UART_Init+0x1b4>
    1092:	2c 81       	ldd	r18, Y+4	; 0x04
    1094:	3d 81       	ldd	r19, Y+5	; 0x05
    1096:	21 30       	cpi	r18, 0x01	; 1
    1098:	31 05       	cpc	r19, r1
    109a:	29 f0       	breq	.+10     	; 0x10a6 <UART_Init+0x1bc>
    109c:	0a c0       	rjmp	.+20     	; 0x10b2 <UART_Init+0x1c8>
	{
	case One_Stop_bit:
		Local_UCSRC &= STOP_BIT_CLEAR_1bit_MASK;
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	87 7f       	andi	r24, 0xF7	; 247
    10a2:	89 83       	std	Y+1, r24	; 0x01
    10a4:	06 c0       	rjmp	.+12     	; 0x10b2 <UART_Init+0x1c8>
		break;
	case Two_Stop_Bit:
		Local_UCSRC &= STOP_BIT_CLEAR_1bit_MASK;
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	87 7f       	andi	r24, 0xF7	; 247
    10aa:	89 83       	std	Y+1, r24	; 0x01
		Local_UCSRC |= STOP_BIT_2bit_SET_MASK;
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	88 60       	ori	r24, 0x08	; 8
    10b0:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	/*Set the selection bit to select UCSRC Register*/
	Local_UCSRC &= UCSRC_URSEL_REGSELECT_CLEAR;
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	8f 77       	andi	r24, 0x7F	; 127
    10b6:	89 83       	std	Y+1, r24	; 0x01
	Local_UCSRC |= UCSRC_URSEL_REGSELECT_SET;
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	80 68       	ori	r24, 0x80	; 128
    10bc:	89 83       	std	Y+1, r24	; 0x01
	/*Set the UCSRC Register with the Local register*/
	UCSRC = Local_UCSRC;
    10be:	e0 e4       	ldi	r30, 0x40	; 64
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	80 83       	st	Z, r24
	//UBBRL = 51;
	//	UBBRH = Ptr_Copy_UART->Baud_NO >>8;


	/*Enable Transmitter*/
	SET_BIT(UCSRB,UCSRB_TXEN);
    10c6:	aa e2       	ldi	r26, 0x2A	; 42
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	ea e2       	ldi	r30, 0x2A	; 42
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	88 60       	ori	r24, 0x08	; 8
    10d2:	8c 93       	st	X, r24
}
    10d4:	2b 96       	adiw	r28, 0x0b	; 11
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	de bf       	out	0x3e, r29	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	08 95       	ret

000010e6 <UART_SendByte>:


void UART_SendByte(u8 Copy_UART)
{
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	00 d0       	rcall	.+0      	; 0x10ec <UART_SendByte+0x6>
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
    10f0:	8a 83       	std	Y+2, r24	; 0x02

	u8 counter=0;
    10f2:	19 82       	std	Y+1, r1	; 0x01
	/*WAIT until transmit buffer is empty*/
	while((GET_BIT(UCSRA,UCSRA_UDRE))==0);
    10f4:	eb e2       	ldi	r30, 0x2B	; 43
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	82 95       	swap	r24
    10fc:	86 95       	lsr	r24
    10fe:	87 70       	andi	r24, 0x07	; 7
    1100:	88 2f       	mov	r24, r24
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	81 70       	andi	r24, 0x01	; 1
    1106:	90 70       	andi	r25, 0x00	; 0
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	a1 f3       	breq	.-24     	; 0x10f4 <UART_SendByte+0xe>
	UDR= Copy_UART;
    110c:	ec e2       	ldi	r30, 0x2C	; 44
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	80 83       	st	Z, r24

}
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	cf 91       	pop	r28
    111a:	df 91       	pop	r29
    111c:	08 95       	ret

0000111e <UART_SendString>:


void UART_SendString(u8 *Ptr_To_String)
{
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	61 97       	sbiw	r28, 0x11	; 17
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	99 8b       	std	Y+17, r25	; 0x11
    1134:	88 8b       	std	Y+16, r24	; 0x10
	u8 i=0;
    1136:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;Ptr_To_String[i] != '\0';i++)
    1138:	1f 86       	std	Y+15, r1	; 0x0f
    113a:	80 c0       	rjmp	.+256    	; 0x123c <UART_SendString+0x11e>
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	aa ef       	ldi	r26, 0xFA	; 250
    1142:	b3 e4       	ldi	r27, 0x43	; 67
    1144:	8b 87       	std	Y+11, r24	; 0x0b
    1146:	9c 87       	std	Y+12, r25	; 0x0c
    1148:	ad 87       	std	Y+13, r26	; 0x0d
    114a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    114c:	6b 85       	ldd	r22, Y+11	; 0x0b
    114e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1150:	8d 85       	ldd	r24, Y+13	; 0x0d
    1152:	9e 85       	ldd	r25, Y+14	; 0x0e
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	4a e7       	ldi	r20, 0x7A	; 122
    115a:	55 e4       	ldi	r21, 0x45	; 69
    115c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	8f 83       	std	Y+7, r24	; 0x07
    1166:	98 87       	std	Y+8, r25	; 0x08
    1168:	a9 87       	std	Y+9, r26	; 0x09
    116a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    116c:	6f 81       	ldd	r22, Y+7	; 0x07
    116e:	78 85       	ldd	r23, Y+8	; 0x08
    1170:	89 85       	ldd	r24, Y+9	; 0x09
    1172:	9a 85       	ldd	r25, Y+10	; 0x0a
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	40 e8       	ldi	r20, 0x80	; 128
    117a:	5f e3       	ldi	r21, 0x3F	; 63
    117c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1180:	88 23       	and	r24, r24
    1182:	2c f4       	brge	.+10     	; 0x118e <UART_SendString+0x70>
		__ticks = 1;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	9e 83       	std	Y+6, r25	; 0x06
    118a:	8d 83       	std	Y+5, r24	; 0x05
    118c:	3f c0       	rjmp	.+126    	; 0x120c <UART_SendString+0xee>
	else if (__tmp > 65535)
    118e:	6f 81       	ldd	r22, Y+7	; 0x07
    1190:	78 85       	ldd	r23, Y+8	; 0x08
    1192:	89 85       	ldd	r24, Y+9	; 0x09
    1194:	9a 85       	ldd	r25, Y+10	; 0x0a
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	3f ef       	ldi	r19, 0xFF	; 255
    119a:	4f e7       	ldi	r20, 0x7F	; 127
    119c:	57 e4       	ldi	r21, 0x47	; 71
    119e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11a2:	18 16       	cp	r1, r24
    11a4:	4c f5       	brge	.+82     	; 0x11f8 <UART_SendString+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    11a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    11aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	40 e2       	ldi	r20, 0x20	; 32
    11b4:	51 e4       	ldi	r21, 0x41	; 65
    11b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	bc 01       	movw	r22, r24
    11c0:	cd 01       	movw	r24, r26
    11c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	9e 83       	std	Y+6, r25	; 0x06
    11cc:	8d 83       	std	Y+5, r24	; 0x05
    11ce:	0f c0       	rjmp	.+30     	; 0x11ee <UART_SendString+0xd0>
    11d0:	80 e9       	ldi	r24, 0x90	; 144
    11d2:	91 e0       	ldi	r25, 0x01	; 1
    11d4:	9c 83       	std	Y+4, r25	; 0x04
    11d6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	9c 81       	ldd	r25, Y+4	; 0x04
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	f1 f7       	brne	.-4      	; 0x11dc <UART_SendString+0xbe>
    11e0:	9c 83       	std	Y+4, r25	; 0x04
    11e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e4:	8d 81       	ldd	r24, Y+5	; 0x05
    11e6:	9e 81       	ldd	r25, Y+6	; 0x06
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	9e 83       	std	Y+6, r25	; 0x06
    11ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ee:	8d 81       	ldd	r24, Y+5	; 0x05
    11f0:	9e 81       	ldd	r25, Y+6	; 0x06
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	69 f7       	brne	.-38     	; 0x11d0 <UART_SendString+0xb2>
    11f6:	14 c0       	rjmp	.+40     	; 0x1220 <UART_SendString+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f8:	6f 81       	ldd	r22, Y+7	; 0x07
    11fa:	78 85       	ldd	r23, Y+8	; 0x08
    11fc:	89 85       	ldd	r24, Y+9	; 0x09
    11fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	9e 83       	std	Y+6, r25	; 0x06
    120a:	8d 83       	std	Y+5, r24	; 0x05
    120c:	8d 81       	ldd	r24, Y+5	; 0x05
    120e:	9e 81       	ldd	r25, Y+6	; 0x06
    1210:	9a 83       	std	Y+2, r25	; 0x02
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	9a 81       	ldd	r25, Y+2	; 0x02
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	f1 f7       	brne	.-4      	; 0x1218 <UART_SendString+0xfa>
    121c:	9a 83       	std	Y+2, r25	; 0x02
    121e:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(500);
		UART_SendByte(Ptr_To_String[i]);
    1220:	8f 85       	ldd	r24, Y+15	; 0x0f
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	88 89       	ldd	r24, Y+16	; 0x10
    1228:	99 89       	ldd	r25, Y+17	; 0x11
    122a:	fc 01       	movw	r30, r24
    122c:	e2 0f       	add	r30, r18
    122e:	f3 1f       	adc	r31, r19
    1230:	80 81       	ld	r24, Z
    1232:	0e 94 73 08 	call	0x10e6	; 0x10e6 <UART_SendByte>


void UART_SendString(u8 *Ptr_To_String)
{
	u8 i=0;
	for(i=0;Ptr_To_String[i] != '\0';i++)
    1236:	8f 85       	ldd	r24, Y+15	; 0x0f
    1238:	8f 5f       	subi	r24, 0xFF	; 255
    123a:	8f 87       	std	Y+15, r24	; 0x0f
    123c:	8f 85       	ldd	r24, Y+15	; 0x0f
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	88 89       	ldd	r24, Y+16	; 0x10
    1244:	99 89       	ldd	r25, Y+17	; 0x11
    1246:	fc 01       	movw	r30, r24
    1248:	e2 0f       	add	r30, r18
    124a:	f3 1f       	adc	r31, r19
    124c:	80 81       	ld	r24, Z
    124e:	88 23       	and	r24, r24
    1250:	09 f0       	breq	.+2      	; 0x1254 <UART_SendString+0x136>
    1252:	74 cf       	rjmp	.-280    	; 0x113c <UART_SendString+0x1e>
	{
		_delay_ms(500);
		UART_SendByte(Ptr_To_String[i]);
	}

}
    1254:	61 96       	adiw	r28, 0x11	; 17
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <UART_RecieveByteSynchNonBlocking>:
u8 UART_RecieveByteSynchNonBlocking(void)
{
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	0f 92       	push	r0
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62

	u8 counter=0;
    1270:	19 82       	std	Y+1, r1	; 0x01
	/*wait until receive is complete*/
	while((GET_BIT(UCSRA,UCSRA_RXC))==0 && counter <MAX_DELAY)
    1272:	eb e2       	ldi	r30, 0x2B	; 43
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	88 23       	and	r24, r24
    127a:	24 f0       	brlt	.+8      	; 0x1284 <UART_RecieveByteSynchNonBlocking+0x1e>
	{
		counter++;
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	8f 5f       	subi	r24, 0xFF	; 255
    1280:	89 83       	std	Y+1, r24	; 0x01
    1282:	f7 cf       	rjmp	.-18     	; 0x1272 <UART_RecieveByteSynchNonBlocking+0xc>
	}
	return UDR;
    1284:	ec e2       	ldi	r30, 0x2C	; 44
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
}
    128a:	0f 90       	pop	r0
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	08 95       	ret

00001292 <UART_RecieveByteASynchCallback>:
void UART_RecieveByteASynchCallback(void)
{
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62

}
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <M_TIMER1_void_Init>:

void (*ICU_CallBackFun)(void) = NULL ;


void M_TIMER1_void_Init(TIMER_1_MD Local_Mode,TIMER_1_WG Local_WG)
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <M_TIMER1_void_Init+0x6>
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	89 83       	std	Y+1, r24	; 0x01
    12ac:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_Mode == TIMER_1_NM)
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	88 23       	and	r24, r24
    12b2:	99 f5       	brne	.+102    	; 0x131a <M_TIMER1_void_Init+0x7a>
	{
		/*Select normal mode*/
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    12b4:	af e4       	ldi	r26, 0x4F	; 79
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	ef e4       	ldi	r30, 0x4F	; 79
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	8e 7f       	andi	r24, 0xFE	; 254
    12c0:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    12c2:	af e4       	ldi	r26, 0x4F	; 79
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	ef e4       	ldi	r30, 0x4F	; 79
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	8d 7f       	andi	r24, 0xFD	; 253
    12ce:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    12d0:	ae e4       	ldi	r26, 0x4E	; 78
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	ee e4       	ldi	r30, 0x4E	; 78
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	91 81       	ldd	r25, Z+1	; 0x01
    12dc:	87 7f       	andi	r24, 0xF7	; 247
    12de:	11 96       	adiw	r26, 0x01	; 1
    12e0:	9c 93       	st	X, r25
    12e2:	8e 93       	st	-X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    12e4:	ae e4       	ldi	r26, 0x4E	; 78
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	ee e4       	ldi	r30, 0x4E	; 78
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	91 81       	ldd	r25, Z+1	; 0x01
    12f0:	8f 7e       	andi	r24, 0xEF	; 239
    12f2:	11 96       	adiw	r26, 0x01	; 1
    12f4:	9c 93       	st	X, r25
    12f6:	8e 93       	st	-X, r24
		if(Local_WG == TIMER_1_NWG)
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	88 23       	and	r24, r24
    12fc:	71 f4       	brne	.+28     	; 0x131a <M_TIMER1_void_Init+0x7a>
		{
			/*Select compare output mode*/
			CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    12fe:	af e4       	ldi	r26, 0x4F	; 79
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	ef e4       	ldi	r30, 0x4F	; 79
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	8f 7b       	andi	r24, 0xBF	; 191
    130a:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    130c:	af e4       	ldi	r26, 0x4F	; 79
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	ef e4       	ldi	r30, 0x4F	; 79
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	8f 77       	andi	r24, 0x7F	; 127
    1318:	8c 93       	st	X, r24
		}
	}
}
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <M_TIMER1_void_Start>:

void M_TIMER1_void_Start(TIMER1_PRESCALER Local_Prescaller)
{
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	0f 92       	push	r0
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	89 83       	std	Y+1, r24	; 0x01
	if(Local_Prescaller== TIMER1_CLK_8)
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	82 30       	cpi	r24, 0x02	; 2
    1334:	f1 f4       	brne	.+60     	; 0x1372 <M_TIMER1_void_Start+0x4e>
	{
		CLR_BIT(TCCR1B,TCCR1B_CS10);
    1336:	ae e4       	ldi	r26, 0x4E	; 78
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	ee e4       	ldi	r30, 0x4E	; 78
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	91 81       	ldd	r25, Z+1	; 0x01
    1342:	8e 7f       	andi	r24, 0xFE	; 254
    1344:	11 96       	adiw	r26, 0x01	; 1
    1346:	9c 93       	st	X, r25
    1348:	8e 93       	st	-X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    134a:	ae e4       	ldi	r26, 0x4E	; 78
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	ee e4       	ldi	r30, 0x4E	; 78
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	91 81       	ldd	r25, Z+1	; 0x01
    1356:	82 60       	ori	r24, 0x02	; 2
    1358:	11 96       	adiw	r26, 0x01	; 1
    135a:	9c 93       	st	X, r25
    135c:	8e 93       	st	-X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);
    135e:	ae e4       	ldi	r26, 0x4E	; 78
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	ee e4       	ldi	r30, 0x4E	; 78
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	91 81       	ldd	r25, Z+1	; 0x01
    136a:	8b 7f       	andi	r24, 0xFB	; 251
    136c:	11 96       	adiw	r26, 0x01	; 1
    136e:	9c 93       	st	X, r25
    1370:	8e 93       	st	-X, r24
	}
}
    1372:	0f 90       	pop	r0
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <M_TIMER1_void_Stop>:
void M_TIMER1_void_Stop(void)
{
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    1382:	ae e4       	ldi	r26, 0x4E	; 78
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	ee e4       	ldi	r30, 0x4E	; 78
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	91 81       	ldd	r25, Z+1	; 0x01
    138e:	8e 7f       	andi	r24, 0xFE	; 254
    1390:	11 96       	adiw	r26, 0x01	; 1
    1392:	9c 93       	st	X, r25
    1394:	8e 93       	st	-X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS11);
    1396:	ae e4       	ldi	r26, 0x4E	; 78
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	ee e4       	ldi	r30, 0x4E	; 78
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	91 81       	ldd	r25, Z+1	; 0x01
    13a2:	8d 7f       	andi	r24, 0xFD	; 253
    13a4:	11 96       	adiw	r26, 0x01	; 1
    13a6:	9c 93       	st	X, r25
    13a8:	8e 93       	st	-X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    13aa:	ae e4       	ldi	r26, 0x4E	; 78
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	ee e4       	ldi	r30, 0x4E	; 78
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	91 81       	ldd	r25, Z+1	; 0x01
    13b6:	8b 7f       	andi	r24, 0xFB	; 251
    13b8:	11 96       	adiw	r26, 0x01	; 1
    13ba:	9c 93       	st	X, r25
    13bc:	8e 93       	st	-X, r24

}
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <M_TIMER1_void_ICU_Enable>:

void M_TIMER1_void_ICU_Enable(void)
{
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
	/*Enable ICU Interrupt*/
	SET_BIT(TIMSK,TIMSK_TICIE1);
    13cc:	a9 e5       	ldi	r26, 0x59	; 89
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e9 e5       	ldi	r30, 0x59	; 89
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	80 62       	ori	r24, 0x20	; 32
    13d8:	8c 93       	st	X, r24
	/*Set trigger to rising edge*/
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    13da:	ae e4       	ldi	r26, 0x4E	; 78
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	ee e4       	ldi	r30, 0x4E	; 78
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	91 81       	ldd	r25, Z+1	; 0x01
    13e6:	80 64       	ori	r24, 0x40	; 64
    13e8:	11 96       	adiw	r26, 0x01	; 1
    13ea:	9c 93       	st	X, r25
    13ec:	8e 93       	st	-X, r24

}
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret

000013f4 <M_TIMER1_void_ICU_TriggerSelect>:


void M_TIMER1_void_ICU_TriggerSelect(ICU_Trigger Local_Trigger)
{
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	0f 92       	push	r0
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
    13fe:	89 83       	std	Y+1, r24	; 0x01
	if(Local_Trigger == ICU_FALLING)
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	88 23       	and	r24, r24
    1404:	59 f4       	brne	.+22     	; 0x141c <M_TIMER1_void_ICU_TriggerSelect+0x28>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    1406:	ae e4       	ldi	r26, 0x4E	; 78
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	ee e4       	ldi	r30, 0x4E	; 78
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	91 81       	ldd	r25, Z+1	; 0x01
    1412:	8f 7b       	andi	r24, 0xBF	; 191
    1414:	11 96       	adiw	r26, 0x01	; 1
    1416:	9c 93       	st	X, r25
    1418:	8e 93       	st	-X, r24
    141a:	0d c0       	rjmp	.+26     	; 0x1436 <M_TIMER1_void_ICU_TriggerSelect+0x42>

	}
	else if(Local_Trigger == ICU_RISING)
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	81 30       	cpi	r24, 0x01	; 1
    1420:	51 f4       	brne	.+20     	; 0x1436 <M_TIMER1_void_ICU_TriggerSelect+0x42>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    1422:	ae e4       	ldi	r26, 0x4E	; 78
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	ee e4       	ldi	r30, 0x4E	; 78
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	91 81       	ldd	r25, Z+1	; 0x01
    142e:	80 64       	ori	r24, 0x40	; 64
    1430:	11 96       	adiw	r26, 0x01	; 1
    1432:	9c 93       	st	X, r25
    1434:	8e 93       	st	-X, r24

	}
}
    1436:	0f 90       	pop	r0
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	08 95       	ret

0000143e <M_TIMER1_void_ICU_INTERRUPTDIS>:

void M_TIMER1_void_ICU_INTERRUPTDIS(void)
{
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
	/*Enable ICU Interrupt*/
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    1446:	a9 e5       	ldi	r26, 0x59	; 89
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e9 e5       	ldi	r30, 0x59	; 89
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	8f 7d       	andi	r24, 0xDF	; 223
    1452:	8c 93       	st	X, r24
}
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	08 95       	ret

0000145a <M_TIMER1_void_ICU_Reading>:

u16 M_TIMER1_void_ICU_Reading(void)
{
    145a:	df 93       	push	r29
    145c:	cf 93       	push	r28
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1462:	e6 e4       	ldi	r30, 0x46	; 70
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	91 81       	ldd	r25, Z+1	; 0x01
}
    146a:	cf 91       	pop	r28
    146c:	df 91       	pop	r29
    146e:	08 95       	ret

00001470 <M_TIMER1_void_ICU_SetCallBack>:

void M_TIMER1_void_ICU_SetCallBack(void)
{
    1470:	df 93       	push	r29
    1472:	cf 93       	push	r28
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62

}
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <M_TIMER1_u8_Reset_flag>:

u8 M_TIMER1_u8_Reset_flag(TIMER1_INTERRUPT_TYPE Local_type)
{
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	0f 92       	push	r0
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	89 83       	std	Y+1, r24	; 0x01
	if(Local_type == TIMER1_ICU)
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	88 23       	and	r24, r24
    148e:	41 f4       	brne	.+16     	; 0x14a0 <M_TIMER1_u8_Reset_flag+0x22>
	{
		SET_BIT(TIFR,TIFR_ICF1);
    1490:	a8 e5       	ldi	r26, 0x58	; 88
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e8 e5       	ldi	r30, 0x58	; 88
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	80 62       	ori	r24, 0x20	; 32
    149c:	8c 93       	st	X, r24
    149e:	0a c0       	rjmp	.+20     	; 0x14b4 <M_TIMER1_u8_Reset_flag+0x36>
	}
	else if(Local_type == TIMER1_OVF)
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	83 30       	cpi	r24, 0x03	; 3
    14a4:	39 f4       	brne	.+14     	; 0x14b4 <M_TIMER1_u8_Reset_flag+0x36>
	{
		SET_BIT(TIFR,TIFR_TOV1);
    14a6:	a8 e5       	ldi	r26, 0x58	; 88
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e8 e5       	ldi	r30, 0x58	; 88
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	84 60       	ori	r24, 0x04	; 4
    14b2:	8c 93       	st	X, r24
	}
	return 0;
    14b4:	80 e0       	ldi	r24, 0x00	; 0
}
    14b6:	0f 90       	pop	r0
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	08 95       	ret

000014be <M_void_Timer_Init>:
static u32 No_of_over_flows=0;
static u8 No_of_Remaning=0;
static u32 Global_No_of_overflows=0;

void M_void_Timer_Init(Timer_Mode T_MODE, Comp_Output_Mode WG_M)
{
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	2c 97       	sbiw	r28, 0x0c	; 12
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	89 83       	std	Y+1, r24	; 0x01
    14d4:	6a 83       	std	Y+2, r22	; 0x02
	switch(T_MODE)
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	3c 87       	std	Y+12, r19	; 0x0c
    14de:	2b 87       	std	Y+11, r18	; 0x0b
    14e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    14e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    14e4:	81 30       	cpi	r24, 0x01	; 1
    14e6:	91 05       	cpc	r25, r1
    14e8:	09 f4       	brne	.+2      	; 0x14ec <M_void_Timer_Init+0x2e>
    14ea:	7e c0       	rjmp	.+252    	; 0x15e8 <M_void_Timer_Init+0x12a>
    14ec:	2b 85       	ldd	r18, Y+11	; 0x0b
    14ee:	3c 85       	ldd	r19, Y+12	; 0x0c
    14f0:	22 30       	cpi	r18, 0x02	; 2
    14f2:	31 05       	cpc	r19, r1
    14f4:	2c f4       	brge	.+10     	; 0x1500 <M_void_Timer_Init+0x42>
    14f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    14f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	71 f0       	breq	.+28     	; 0x151a <M_void_Timer_Init+0x5c>
    14fe:	76 c1       	rjmp	.+748    	; 0x17ec <M_void_Timer_Init+0x32e>
    1500:	2b 85       	ldd	r18, Y+11	; 0x0b
    1502:	3c 85       	ldd	r19, Y+12	; 0x0c
    1504:	22 30       	cpi	r18, 0x02	; 2
    1506:	31 05       	cpc	r19, r1
    1508:	09 f4       	brne	.+2      	; 0x150c <M_void_Timer_Init+0x4e>
    150a:	d6 c0       	rjmp	.+428    	; 0x16b8 <M_void_Timer_Init+0x1fa>
    150c:	8b 85       	ldd	r24, Y+11	; 0x0b
    150e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1510:	83 30       	cpi	r24, 0x03	; 3
    1512:	91 05       	cpc	r25, r1
    1514:	09 f4       	brne	.+2      	; 0x1518 <M_void_Timer_Init+0x5a>
    1516:	1e c1       	rjmp	.+572    	; 0x1754 <M_void_Timer_Init+0x296>
    1518:	69 c1       	rjmp	.+722    	; 0x17ec <M_void_Timer_Init+0x32e>
	{
	case Normal_Mode:
		TCCR0 &= CLEAR_TIMER_MODE_REG;
    151a:	a3 e5       	ldi	r26, 0x53	; 83
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e3 e5       	ldi	r30, 0x53	; 83
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	87 7d       	andi	r24, 0xD7	; 215
    1526:	8c 93       	st	X, r24
		TCCR0 |=SET_NORMAL_MODE_MASK;
    1528:	a3 e5       	ldi	r26, 0x53	; 83
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e3 e5       	ldi	r30, 0x53	; 83
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	8c 93       	st	X, r24
		switch(WG_M)
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	3a 87       	std	Y+10, r19	; 0x0a
    153c:	29 87       	std	Y+9, r18	; 0x09
    153e:	89 85       	ldd	r24, Y+9	; 0x09
    1540:	9a 85       	ldd	r25, Y+10	; 0x0a
    1542:	81 30       	cpi	r24, 0x01	; 1
    1544:	91 05       	cpc	r25, r1
    1546:	19 f1       	breq	.+70     	; 0x158e <M_void_Timer_Init+0xd0>
    1548:	29 85       	ldd	r18, Y+9	; 0x09
    154a:	3a 85       	ldd	r19, Y+10	; 0x0a
    154c:	22 30       	cpi	r18, 0x02	; 2
    154e:	31 05       	cpc	r19, r1
    1550:	2c f4       	brge	.+10     	; 0x155c <M_void_Timer_Init+0x9e>
    1552:	89 85       	ldd	r24, Y+9	; 0x09
    1554:	9a 85       	ldd	r25, Y+10	; 0x0a
    1556:	00 97       	sbiw	r24, 0x00	; 0
    1558:	61 f0       	breq	.+24     	; 0x1572 <M_void_Timer_Init+0xb4>
    155a:	48 c1       	rjmp	.+656    	; 0x17ec <M_void_Timer_Init+0x32e>
    155c:	29 85       	ldd	r18, Y+9	; 0x09
    155e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1560:	22 30       	cpi	r18, 0x02	; 2
    1562:	31 05       	cpc	r19, r1
    1564:	19 f1       	breq	.+70     	; 0x15ac <M_void_Timer_Init+0xee>
    1566:	89 85       	ldd	r24, Y+9	; 0x09
    1568:	9a 85       	ldd	r25, Y+10	; 0x0a
    156a:	83 30       	cpi	r24, 0x03	; 3
    156c:	91 05       	cpc	r25, r1
    156e:	69 f1       	breq	.+90     	; 0x15ca <M_void_Timer_Init+0x10c>
    1570:	3d c1       	rjmp	.+634    	; 0x17ec <M_void_Timer_Init+0x32e>
		{
		case Normal_Port:
			TCCR0 &= CLEAR_TIMER_MODE_REG;
    1572:	a3 e5       	ldi	r26, 0x53	; 83
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	e3 e5       	ldi	r30, 0x53	; 83
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	87 7d       	andi	r24, 0xD7	; 215
    157e:	8c 93       	st	X, r24
			TCCR0 |= NORMAL_PORT_MASK;
    1580:	a3 e5       	ldi	r26, 0x53	; 83
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e3 e5       	ldi	r30, 0x53	; 83
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	8c 93       	st	X, r24
    158c:	2f c1       	rjmp	.+606    	; 0x17ec <M_void_Timer_Init+0x32e>
			break;
		case Toggle_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    158e:	a3 e5       	ldi	r26, 0x53	; 83
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e3 e5       	ldi	r30, 0x53	; 83
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	8f 7c       	andi	r24, 0xCF	; 207
    159a:	8c 93       	st	X, r24
			TCCR0 |= TOGGLE_PORT_MASK;
    159c:	a3 e5       	ldi	r26, 0x53	; 83
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e3 e5       	ldi	r30, 0x53	; 83
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	80 61       	ori	r24, 0x10	; 16
    15a8:	8c 93       	st	X, r24
    15aa:	20 c1       	rjmp	.+576    	; 0x17ec <M_void_Timer_Init+0x32e>
			break;
		case Clear_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    15ac:	a3 e5       	ldi	r26, 0x53	; 83
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e3 e5       	ldi	r30, 0x53	; 83
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	8f 7c       	andi	r24, 0xCF	; 207
    15b8:	8c 93       	st	X, r24
			TCCR0 |= CLEAR_PORT_MASK;
    15ba:	a3 e5       	ldi	r26, 0x53	; 83
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e3 e5       	ldi	r30, 0x53	; 83
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	80 62       	ori	r24, 0x20	; 32
    15c6:	8c 93       	st	X, r24
    15c8:	11 c1       	rjmp	.+546    	; 0x17ec <M_void_Timer_Init+0x32e>
			break;
		case Set_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    15ca:	a3 e5       	ldi	r26, 0x53	; 83
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e3 e5       	ldi	r30, 0x53	; 83
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	8f 7c       	andi	r24, 0xCF	; 207
    15d6:	8c 93       	st	X, r24
			TCCR0 |= SET_PORT_MASK;
    15d8:	a3 e5       	ldi	r26, 0x53	; 83
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e3 e5       	ldi	r30, 0x53	; 83
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	80 63       	ori	r24, 0x30	; 48
    15e4:	8c 93       	st	X, r24
    15e6:	02 c1       	rjmp	.+516    	; 0x17ec <M_void_Timer_Init+0x32e>
		default:
			break;
		}
		break;
	case CTC_Mode:
		TCCR0 &= CLEAR_TIMER_MODE_REG;
    15e8:	a3 e5       	ldi	r26, 0x53	; 83
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e3 e5       	ldi	r30, 0x53	; 83
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	87 7d       	andi	r24, 0xD7	; 215
    15f4:	8c 93       	st	X, r24
		TCCR0 |=SET_CTC_MODE_MASK;
    15f6:	a3 e5       	ldi	r26, 0x53	; 83
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e3 e5       	ldi	r30, 0x53	; 83
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	88 60       	ori	r24, 0x08	; 8
    1602:	8c 93       	st	X, r24
		switch(WG_M)
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	38 87       	std	Y+8, r19	; 0x08
    160c:	2f 83       	std	Y+7, r18	; 0x07
    160e:	8f 81       	ldd	r24, Y+7	; 0x07
    1610:	98 85       	ldd	r25, Y+8	; 0x08
    1612:	81 30       	cpi	r24, 0x01	; 1
    1614:	91 05       	cpc	r25, r1
    1616:	19 f1       	breq	.+70     	; 0x165e <M_void_Timer_Init+0x1a0>
    1618:	2f 81       	ldd	r18, Y+7	; 0x07
    161a:	38 85       	ldd	r19, Y+8	; 0x08
    161c:	22 30       	cpi	r18, 0x02	; 2
    161e:	31 05       	cpc	r19, r1
    1620:	2c f4       	brge	.+10     	; 0x162c <M_void_Timer_Init+0x16e>
    1622:	8f 81       	ldd	r24, Y+7	; 0x07
    1624:	98 85       	ldd	r25, Y+8	; 0x08
    1626:	00 97       	sbiw	r24, 0x00	; 0
    1628:	61 f0       	breq	.+24     	; 0x1642 <M_void_Timer_Init+0x184>
    162a:	e0 c0       	rjmp	.+448    	; 0x17ec <M_void_Timer_Init+0x32e>
    162c:	2f 81       	ldd	r18, Y+7	; 0x07
    162e:	38 85       	ldd	r19, Y+8	; 0x08
    1630:	22 30       	cpi	r18, 0x02	; 2
    1632:	31 05       	cpc	r19, r1
    1634:	19 f1       	breq	.+70     	; 0x167c <M_void_Timer_Init+0x1be>
    1636:	8f 81       	ldd	r24, Y+7	; 0x07
    1638:	98 85       	ldd	r25, Y+8	; 0x08
    163a:	83 30       	cpi	r24, 0x03	; 3
    163c:	91 05       	cpc	r25, r1
    163e:	69 f1       	breq	.+90     	; 0x169a <M_void_Timer_Init+0x1dc>
    1640:	d5 c0       	rjmp	.+426    	; 0x17ec <M_void_Timer_Init+0x32e>
		{
		case Normal_Port:
			TCCR0 &= CLEAR_TIMER_MODE_REG;
    1642:	a3 e5       	ldi	r26, 0x53	; 83
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e3 e5       	ldi	r30, 0x53	; 83
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	87 7d       	andi	r24, 0xD7	; 215
    164e:	8c 93       	st	X, r24
			TCCR0 |= NORMAL_PORT_MASK;
    1650:	a3 e5       	ldi	r26, 0x53	; 83
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e3 e5       	ldi	r30, 0x53	; 83
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	8c 93       	st	X, r24
    165c:	c7 c0       	rjmp	.+398    	; 0x17ec <M_void_Timer_Init+0x32e>
			break;
		case Toggle_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    165e:	a3 e5       	ldi	r26, 0x53	; 83
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	e3 e5       	ldi	r30, 0x53	; 83
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	8f 7c       	andi	r24, 0xCF	; 207
    166a:	8c 93       	st	X, r24
			TCCR0 |= TOGGLE_PORT_MASK;
    166c:	a3 e5       	ldi	r26, 0x53	; 83
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	e3 e5       	ldi	r30, 0x53	; 83
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	80 61       	ori	r24, 0x10	; 16
    1678:	8c 93       	st	X, r24
    167a:	b8 c0       	rjmp	.+368    	; 0x17ec <M_void_Timer_Init+0x32e>
			break;
		case Clear_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    167c:	a3 e5       	ldi	r26, 0x53	; 83
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e3 e5       	ldi	r30, 0x53	; 83
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	8f 7c       	andi	r24, 0xCF	; 207
    1688:	8c 93       	st	X, r24
			TCCR0 |= CLEAR_PORT_MASK;
    168a:	a3 e5       	ldi	r26, 0x53	; 83
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e3 e5       	ldi	r30, 0x53	; 83
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	80 62       	ori	r24, 0x20	; 32
    1696:	8c 93       	st	X, r24
    1698:	a9 c0       	rjmp	.+338    	; 0x17ec <M_void_Timer_Init+0x32e>
			break;
		case Set_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    169a:	a3 e5       	ldi	r26, 0x53	; 83
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e3 e5       	ldi	r30, 0x53	; 83
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	8f 7c       	andi	r24, 0xCF	; 207
    16a6:	8c 93       	st	X, r24
			TCCR0 |= SET_PORT_MASK;
    16a8:	a3 e5       	ldi	r26, 0x53	; 83
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	e3 e5       	ldi	r30, 0x53	; 83
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	80 63       	ori	r24, 0x30	; 48
    16b4:	8c 93       	st	X, r24
    16b6:	9a c0       	rjmp	.+308    	; 0x17ec <M_void_Timer_Init+0x32e>
		default:
			break;
		}
		break;
	case Fast_PWM:
		TCCR0 &= CLEAR_TIMER_MODE_REG;
    16b8:	a3 e5       	ldi	r26, 0x53	; 83
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e3 e5       	ldi	r30, 0x53	; 83
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	87 7d       	andi	r24, 0xD7	; 215
    16c4:	8c 93       	st	X, r24
		TCCR0 |=SET_FAST_MODE_MASK;
    16c6:	a3 e5       	ldi	r26, 0x53	; 83
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e3 e5       	ldi	r30, 0x53	; 83
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	88 64       	ori	r24, 0x48	; 72
    16d2:	8c 93       	st	X, r24
		switch(WG_M)
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	3e 83       	std	Y+6, r19	; 0x06
    16dc:	2d 83       	std	Y+5, r18	; 0x05
    16de:	8d 81       	ldd	r24, Y+5	; 0x05
    16e0:	9e 81       	ldd	r25, Y+6	; 0x06
    16e2:	84 30       	cpi	r24, 0x04	; 4
    16e4:	91 05       	cpc	r25, r1
    16e6:	c1 f0       	breq	.+48     	; 0x1718 <M_void_Timer_Init+0x25a>
    16e8:	2d 81       	ldd	r18, Y+5	; 0x05
    16ea:	3e 81       	ldd	r19, Y+6	; 0x06
    16ec:	25 30       	cpi	r18, 0x05	; 5
    16ee:	31 05       	cpc	r19, r1
    16f0:	11 f1       	breq	.+68     	; 0x1736 <M_void_Timer_Init+0x278>
    16f2:	8d 81       	ldd	r24, Y+5	; 0x05
    16f4:	9e 81       	ldd	r25, Y+6	; 0x06
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	09 f0       	breq	.+2      	; 0x16fc <M_void_Timer_Init+0x23e>
    16fa:	78 c0       	rjmp	.+240    	; 0x17ec <M_void_Timer_Init+0x32e>
		{
		case Normal_Port:
			TCCR0 &= CLEAR_TIMER_MODE_REG;
    16fc:	a3 e5       	ldi	r26, 0x53	; 83
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e3 e5       	ldi	r30, 0x53	; 83
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	87 7d       	andi	r24, 0xD7	; 215
    1708:	8c 93       	st	X, r24
			TCCR0 |= NORMAL_PORT_MASK;
    170a:	a3 e5       	ldi	r26, 0x53	; 83
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e3 e5       	ldi	r30, 0x53	; 83
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	8c 93       	st	X, r24
    1716:	6a c0       	rjmp	.+212    	; 0x17ec <M_void_Timer_Init+0x32e>
			break;
		case Inverting_Mode:
			TCCR0 &= CLEAR_WAVEG_MASK;
    1718:	a3 e5       	ldi	r26, 0x53	; 83
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e3 e5       	ldi	r30, 0x53	; 83
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	8f 7c       	andi	r24, 0xCF	; 207
    1724:	8c 93       	st	X, r24
			TCCR0 |= INVERTING_FAST_MASK;
    1726:	a3 e5       	ldi	r26, 0x53	; 83
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e3 e5       	ldi	r30, 0x53	; 83
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	80 63       	ori	r24, 0x30	; 48
    1732:	8c 93       	st	X, r24
    1734:	5b c0       	rjmp	.+182    	; 0x17ec <M_void_Timer_Init+0x32e>
			break;
		case Non_Invering_Mode:
			TCCR0 &= CLEAR_WAVEG_MASK;
    1736:	a3 e5       	ldi	r26, 0x53	; 83
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e3 e5       	ldi	r30, 0x53	; 83
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	8f 7c       	andi	r24, 0xCF	; 207
    1742:	8c 93       	st	X, r24
			TCCR0 |= NON_INVERTING_FAST_MASK;
    1744:	a3 e5       	ldi	r26, 0x53	; 83
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e3 e5       	ldi	r30, 0x53	; 83
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	80 62       	ori	r24, 0x20	; 32
    1750:	8c 93       	st	X, r24
    1752:	4c c0       	rjmp	.+152    	; 0x17ec <M_void_Timer_Init+0x32e>
		default:
			break;
		}
		break;
	case Phase_Correct_PWM:
		TCCR0 &= CLEAR_TIMER_MODE_REG;
    1754:	a3 e5       	ldi	r26, 0x53	; 83
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e3 e5       	ldi	r30, 0x53	; 83
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	87 7d       	andi	r24, 0xD7	; 215
    1760:	8c 93       	st	X, r24
		TCCR0 |=SET_PWM_PHASE_MODE_MASK;
    1762:	a3 e5       	ldi	r26, 0x53	; 83
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e3 e5       	ldi	r30, 0x53	; 83
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	80 64       	ori	r24, 0x40	; 64
    176e:	8c 93       	st	X, r24
		switch(WG_M)
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	28 2f       	mov	r18, r24
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	3c 83       	std	Y+4, r19	; 0x04
    1778:	2b 83       	std	Y+3, r18	; 0x03
    177a:	8b 81       	ldd	r24, Y+3	; 0x03
    177c:	9c 81       	ldd	r25, Y+4	; 0x04
    177e:	84 30       	cpi	r24, 0x04	; 4
    1780:	91 05       	cpc	r25, r1
    1782:	b9 f0       	breq	.+46     	; 0x17b2 <M_void_Timer_Init+0x2f4>
    1784:	2b 81       	ldd	r18, Y+3	; 0x03
    1786:	3c 81       	ldd	r19, Y+4	; 0x04
    1788:	25 30       	cpi	r18, 0x05	; 5
    178a:	31 05       	cpc	r19, r1
    178c:	09 f1       	breq	.+66     	; 0x17d0 <M_void_Timer_Init+0x312>
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	9c 81       	ldd	r25, Y+4	; 0x04
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	59 f5       	brne	.+86     	; 0x17ec <M_void_Timer_Init+0x32e>
		{
		case Normal_Port:
			TCCR0 &= CLEAR_TIMER_MODE_REG;
    1796:	a3 e5       	ldi	r26, 0x53	; 83
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e3 e5       	ldi	r30, 0x53	; 83
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	87 7d       	andi	r24, 0xD7	; 215
    17a2:	8c 93       	st	X, r24
			TCCR0 |= NORMAL_PORT_MASK;
    17a4:	a3 e5       	ldi	r26, 0x53	; 83
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	e3 e5       	ldi	r30, 0x53	; 83
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	8c 93       	st	X, r24
    17b0:	1d c0       	rjmp	.+58     	; 0x17ec <M_void_Timer_Init+0x32e>
			break;
		case Inverting_Mode:
			TCCR0 &= CLEAR_WAVEG_MASK;
    17b2:	a3 e5       	ldi	r26, 0x53	; 83
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e3 e5       	ldi	r30, 0x53	; 83
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	8f 7c       	andi	r24, 0xCF	; 207
    17be:	8c 93       	st	X, r24
			TCCR0 |= INVERTING_PHASE_MASK;
    17c0:	a3 e5       	ldi	r26, 0x53	; 83
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e3 e5       	ldi	r30, 0x53	; 83
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	80 63       	ori	r24, 0x30	; 48
    17cc:	8c 93       	st	X, r24
    17ce:	0e c0       	rjmp	.+28     	; 0x17ec <M_void_Timer_Init+0x32e>
			break;
		case Non_Invering_Mode:
			TCCR0 &= CLEAR_WAVEG_MASK;
    17d0:	a3 e5       	ldi	r26, 0x53	; 83
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e3 e5       	ldi	r30, 0x53	; 83
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	8f 7c       	andi	r24, 0xCF	; 207
    17dc:	8c 93       	st	X, r24
			TCCR0 |= NON_INVERTING_PHASE_MASK;
    17de:	a3 e5       	ldi	r26, 0x53	; 83
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e3 e5       	ldi	r30, 0x53	; 83
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	80 62       	ori	r24, 0x20	; 32
    17ea:	8c 93       	st	X, r24
		default:
			break;
		}
		break;
	}
}
    17ec:	2c 96       	adiw	r28, 0x0c	; 12
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	f8 94       	cli
    17f2:	de bf       	out	0x3e, r29	; 62
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	cd bf       	out	0x3d, r28	; 61
    17f8:	cf 91       	pop	r28
    17fa:	df 91       	pop	r29
    17fc:	08 95       	ret

000017fe <M_void_Timer_start>:
void M_void_Timer_start(PRE_SCALLER Pre_scaller_select)
{
    17fe:	df 93       	push	r29
    1800:	cf 93       	push	r28
    1802:	00 d0       	rcall	.+0      	; 0x1804 <M_void_Timer_start+0x6>
    1804:	0f 92       	push	r0
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	89 83       	std	Y+1, r24	; 0x01
	switch(Pre_scaller_select)
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	3b 83       	std	Y+3, r19	; 0x03
    1814:	2a 83       	std	Y+2, r18	; 0x02
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	9b 81       	ldd	r25, Y+3	; 0x03
    181a:	82 30       	cpi	r24, 0x02	; 2
    181c:	91 05       	cpc	r25, r1
    181e:	09 f4       	brne	.+2      	; 0x1822 <M_void_Timer_start+0x24>
    1820:	3e c0       	rjmp	.+124    	; 0x189e <M_void_Timer_start+0xa0>
    1822:	2a 81       	ldd	r18, Y+2	; 0x02
    1824:	3b 81       	ldd	r19, Y+3	; 0x03
    1826:	23 30       	cpi	r18, 0x03	; 3
    1828:	31 05       	cpc	r19, r1
    182a:	54 f4       	brge	.+20     	; 0x1840 <M_void_Timer_start+0x42>
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	9b 81       	ldd	r25, Y+3	; 0x03
    1830:	00 97       	sbiw	r24, 0x00	; 0
    1832:	c1 f0       	breq	.+48     	; 0x1864 <M_void_Timer_start+0x66>
    1834:	2a 81       	ldd	r18, Y+2	; 0x02
    1836:	3b 81       	ldd	r19, Y+3	; 0x03
    1838:	21 30       	cpi	r18, 0x01	; 1
    183a:	31 05       	cpc	r19, r1
    183c:	09 f1       	breq	.+66     	; 0x1880 <M_void_Timer_start+0x82>
    183e:	6a c0       	rjmp	.+212    	; 0x1914 <M_void_Timer_start+0x116>
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	9b 81       	ldd	r25, Y+3	; 0x03
    1844:	84 30       	cpi	r24, 0x04	; 4
    1846:	91 05       	cpc	r25, r1
    1848:	09 f4       	brne	.+2      	; 0x184c <M_void_Timer_start+0x4e>
    184a:	47 c0       	rjmp	.+142    	; 0x18da <M_void_Timer_start+0xdc>
    184c:	2a 81       	ldd	r18, Y+2	; 0x02
    184e:	3b 81       	ldd	r19, Y+3	; 0x03
    1850:	24 30       	cpi	r18, 0x04	; 4
    1852:	31 05       	cpc	r19, r1
    1854:	9c f1       	brlt	.+102    	; 0x18bc <M_void_Timer_start+0xbe>
    1856:	8a 81       	ldd	r24, Y+2	; 0x02
    1858:	9b 81       	ldd	r25, Y+3	; 0x03
    185a:	85 30       	cpi	r24, 0x05	; 5
    185c:	91 05       	cpc	r25, r1
    185e:	09 f4       	brne	.+2      	; 0x1862 <M_void_Timer_start+0x64>
    1860:	4b c0       	rjmp	.+150    	; 0x18f8 <M_void_Timer_start+0xfa>
    1862:	58 c0       	rjmp	.+176    	; 0x1914 <M_void_Timer_start+0x116>
	{
	case No_CLK:
		TCCR0 &= CLEAR_PRESCALLER_MASK;
    1864:	a3 e5       	ldi	r26, 0x53	; 83
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	e3 e5       	ldi	r30, 0x53	; 83
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	88 7f       	andi	r24, 0xF8	; 248
    1870:	8c 93       	st	X, r24
		TCCR0 |= NO_CLK_SOURCE;
    1872:	a3 e5       	ldi	r26, 0x53	; 83
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e3 e5       	ldi	r30, 0x53	; 83
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	8c 93       	st	X, r24
    187e:	4a c0       	rjmp	.+148    	; 0x1914 <M_void_Timer_start+0x116>
		break;
	case NO_PRESCALLING:
		TCCR0 &= CLEAR_PRESCALLER_MASK;
    1880:	a3 e5       	ldi	r26, 0x53	; 83
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e3 e5       	ldi	r30, 0x53	; 83
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	88 7f       	andi	r24, 0xF8	; 248
    188c:	8c 93       	st	X, r24
		TCCR0 |= NO_CLK_PRESCALLER;
    188e:	a3 e5       	ldi	r26, 0x53	; 83
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	e3 e5       	ldi	r30, 0x53	; 83
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	81 60       	ori	r24, 0x01	; 1
    189a:	8c 93       	st	X, r24
    189c:	3b c0       	rjmp	.+118    	; 0x1914 <M_void_Timer_start+0x116>
		break;
	case CLK_8:
		TCCR0 &= CLEAR_PRESCALLER_MASK;
    189e:	a3 e5       	ldi	r26, 0x53	; 83
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	e3 e5       	ldi	r30, 0x53	; 83
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	88 7f       	andi	r24, 0xF8	; 248
    18aa:	8c 93       	st	X, r24
		TCCR0 |= CLK_8_PRESCALLER;
    18ac:	a3 e5       	ldi	r26, 0x53	; 83
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e3 e5       	ldi	r30, 0x53	; 83
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	82 60       	ori	r24, 0x02	; 2
    18b8:	8c 93       	st	X, r24
    18ba:	2c c0       	rjmp	.+88     	; 0x1914 <M_void_Timer_start+0x116>
		break;
	case CLK_64:
		TCCR0 &= CLEAR_PRESCALLER_MASK;
    18bc:	a3 e5       	ldi	r26, 0x53	; 83
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	e3 e5       	ldi	r30, 0x53	; 83
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	88 7f       	andi	r24, 0xF8	; 248
    18c8:	8c 93       	st	X, r24
		TCCR0 |= CLK_64_PRESCALLER;
    18ca:	a3 e5       	ldi	r26, 0x53	; 83
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	e3 e5       	ldi	r30, 0x53	; 83
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	83 60       	ori	r24, 0x03	; 3
    18d6:	8c 93       	st	X, r24
    18d8:	1d c0       	rjmp	.+58     	; 0x1914 <M_void_Timer_start+0x116>
		break;
	case CLK_256:
		TCCR0 &= CLEAR_PRESCALLER_MASK;
    18da:	a3 e5       	ldi	r26, 0x53	; 83
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e3 e5       	ldi	r30, 0x53	; 83
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	88 7f       	andi	r24, 0xF8	; 248
    18e6:	8c 93       	st	X, r24
		TCCR0 |= CLK_256_PRESCALLER;
    18e8:	a3 e5       	ldi	r26, 0x53	; 83
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	e3 e5       	ldi	r30, 0x53	; 83
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	84 60       	ori	r24, 0x04	; 4
    18f4:	8c 93       	st	X, r24
    18f6:	0e c0       	rjmp	.+28     	; 0x1914 <M_void_Timer_start+0x116>
		break;
	case CLK_1024:
		TCCR0 &= CLEAR_PRESCALLER_MASK;
    18f8:	a3 e5       	ldi	r26, 0x53	; 83
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	e3 e5       	ldi	r30, 0x53	; 83
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	88 7f       	andi	r24, 0xF8	; 248
    1904:	8c 93       	st	X, r24
		TCCR0 |= CLK_1024_PRESCALLER;
    1906:	a3 e5       	ldi	r26, 0x53	; 83
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	e3 e5       	ldi	r30, 0x53	; 83
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	85 60       	ori	r24, 0x05	; 5
    1912:	8c 93       	st	X, r24
		break;
	default:
		break;
	}

}
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	08 95       	ret

00001920 <M_void_Timer_stop>:
void M_void_Timer_stop(void)
{
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= CLEAR_PRESCALLER_MASK;
    1928:	a3 e5       	ldi	r26, 0x53	; 83
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e3 e5       	ldi	r30, 0x53	; 83
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	88 7f       	andi	r24, 0xF8	; 248
    1934:	8c 93       	st	X, r24
	TCCR0 |= NO_CLK_SOURCE;
    1936:	a3 e5       	ldi	r26, 0x53	; 83
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	e3 e5       	ldi	r30, 0x53	; 83
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	8c 93       	st	X, r24
}
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <Timer_u8__GetCounts>:

u8 Timer_u8__GetCounts(void)
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    1950:	e2 e5       	ldi	r30, 0x52	; 82
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
}
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	08 95       	ret

0000195c <M_void_Timer_Set_Preload>:
void M_void_Timer_Set_Preload(u8 Pre_load)
{
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	0f 92       	push	r0
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    1966:	89 83       	std	Y+1, r24	; 0x01
	TCNT0= Pre_load;
    1968:	e2 e5       	ldi	r30, 0x52	; 82
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	80 83       	st	Z, r24
}
    1970:	0f 90       	pop	r0
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	08 95       	ret

00001978 <M_TIMER0_setDelayTimeMilliSec>:

void M_TIMER0_setDelayTimeMilliSec(u32 Local_DelayTime, Timer_Mode Local_Mode, PRE_SCALLER Local_Prescaller)
{
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	ac 97       	sbiw	r28, 0x2c	; 44
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	6a a3       	std	Y+34, r22	; 0x22
    198e:	7b a3       	std	Y+35, r23	; 0x23
    1990:	8c a3       	std	Y+36, r24	; 0x24
    1992:	9d a3       	std	Y+37, r25	; 0x25
    1994:	4e a3       	std	Y+38, r20	; 0x26
    1996:	2f a3       	std	Y+39, r18	; 0x27

	u32 Pre_scallers[5]={1,8,64,256,1024};
    1998:	ce 01       	movw	r24, r28
    199a:	0e 96       	adiw	r24, 0x0e	; 14
    199c:	99 a7       	std	Y+41, r25	; 0x29
    199e:	88 a7       	std	Y+40, r24	; 0x28
    19a0:	e5 ec       	ldi	r30, 0xC5	; 197
    19a2:	f1 e0       	ldi	r31, 0x01	; 1
    19a4:	fb a7       	std	Y+43, r31	; 0x2b
    19a6:	ea a7       	std	Y+42, r30	; 0x2a
    19a8:	f4 e1       	ldi	r31, 0x14	; 20
    19aa:	fc a7       	std	Y+44, r31	; 0x2c
    19ac:	ea a5       	ldd	r30, Y+42	; 0x2a
    19ae:	fb a5       	ldd	r31, Y+43	; 0x2b
    19b0:	00 80       	ld	r0, Z
    19b2:	8a a5       	ldd	r24, Y+42	; 0x2a
    19b4:	9b a5       	ldd	r25, Y+43	; 0x2b
    19b6:	01 96       	adiw	r24, 0x01	; 1
    19b8:	9b a7       	std	Y+43, r25	; 0x2b
    19ba:	8a a7       	std	Y+42, r24	; 0x2a
    19bc:	e8 a5       	ldd	r30, Y+40	; 0x28
    19be:	f9 a5       	ldd	r31, Y+41	; 0x29
    19c0:	00 82       	st	Z, r0
    19c2:	88 a5       	ldd	r24, Y+40	; 0x28
    19c4:	99 a5       	ldd	r25, Y+41	; 0x29
    19c6:	01 96       	adiw	r24, 0x01	; 1
    19c8:	99 a7       	std	Y+41, r25	; 0x29
    19ca:	88 a7       	std	Y+40, r24	; 0x28
    19cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    19ce:	91 50       	subi	r25, 0x01	; 1
    19d0:	9c a7       	std	Y+44, r25	; 0x2c
    19d2:	ec a5       	ldd	r30, Y+44	; 0x2c
    19d4:	ee 23       	and	r30, r30
    19d6:	51 f7       	brne	.-44     	; 0x19ac <M_TIMER0_setDelayTimeMilliSec+0x34>
	f32 TickTime = (f32)Pre_scallers[1]/16;
    19d8:	8a 89       	ldd	r24, Y+18	; 0x12
    19da:	9b 89       	ldd	r25, Y+19	; 0x13
    19dc:	ac 89       	ldd	r26, Y+20	; 0x14
    19de:	bd 89       	ldd	r27, Y+21	; 0x15
    19e0:	bc 01       	movw	r22, r24
    19e2:	cd 01       	movw	r24, r26
    19e4:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	bc 01       	movw	r22, r24
    19ee:	cd 01       	movw	r24, r26
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e8       	ldi	r20, 0x80	; 128
    19f6:	51 e4       	ldi	r21, 0x41	; 65
    19f8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	8a 87       	std	Y+10, r24	; 0x0a
    1a02:	9b 87       	std	Y+11, r25	; 0x0b
    1a04:	ac 87       	std	Y+12, r26	; 0x0c
    1a06:	bd 87       	std	Y+13, r27	; 0x0d

	u32 DesiredTickS = 0;
    1a08:	1e 82       	std	Y+6, r1	; 0x06
    1a0a:	1f 82       	std	Y+7, r1	; 0x07
    1a0c:	18 86       	std	Y+8, r1	; 0x08
    1a0e:	19 86       	std	Y+9, r1	; 0x09
	u32 CTC_Value = 0 ;
    1a10:	1a 82       	std	Y+2, r1	; 0x02
    1a12:	1b 82       	std	Y+3, r1	; 0x03
    1a14:	1c 82       	std	Y+4, r1	; 0x04
    1a16:	1d 82       	std	Y+5, r1	; 0x05
	/* Calculate the desired Tick*/
	 DesiredTickS = (f32)Local_DelayTime*1000/ (TickTime) ;
    1a18:	6a a1       	ldd	r22, Y+34	; 0x22
    1a1a:	7b a1       	ldd	r23, Y+35	; 0x23
    1a1c:	8c a1       	ldd	r24, Y+36	; 0x24
    1a1e:	9d a1       	ldd	r25, Y+37	; 0x25
    1a20:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	bc 01       	movw	r22, r24
    1a2a:	cd 01       	movw	r24, r26
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	4a e7       	ldi	r20, 0x7A	; 122
    1a32:	54 e4       	ldi	r21, 0x44	; 68
    1a34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	bc 01       	movw	r22, r24
    1a3e:	cd 01       	movw	r24, r26
    1a40:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a42:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a44:	4c 85       	ldd	r20, Y+12	; 0x0c
    1a46:	5d 85       	ldd	r21, Y+13	; 0x0d
    1a48:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	bc 01       	movw	r22, r24
    1a52:	cd 01       	movw	r24, r26
    1a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	8e 83       	std	Y+6, r24	; 0x06
    1a5e:	9f 83       	std	Y+7, r25	; 0x07
    1a60:	a8 87       	std	Y+8, r26	; 0x08
    1a62:	b9 87       	std	Y+9, r27	; 0x09
	if(Local_Mode == Normal_Mode)
    1a64:	8e a1       	ldd	r24, Y+38	; 0x26
    1a66:	88 23       	and	r24, r24
    1a68:	c9 f5       	brne	.+114    	; 0x1adc <M_TIMER0_setDelayTimeMilliSec+0x164>
	{
		 /*Store the numbers of over flow */
		 No_of_over_flows = DesiredTickS/ 256 ;
    1a6a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a6c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a6e:	a8 85       	ldd	r26, Y+8	; 0x08
    1a70:	b9 85       	ldd	r27, Y+9	; 0x09
    1a72:	89 2f       	mov	r24, r25
    1a74:	9a 2f       	mov	r25, r26
    1a76:	ab 2f       	mov	r26, r27
    1a78:	bb 27       	eor	r27, r27
    1a7a:	80 93 6c 02 	sts	0x026C, r24
    1a7e:	90 93 6d 02 	sts	0x026D, r25
    1a82:	a0 93 6e 02 	sts	0x026E, r26
    1a86:	b0 93 6f 02 	sts	0x026F, r27
		 /* Store the Number of remaining if found */
		 No_of_Remaning = DesiredTickS % 256;
    1a8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a8c:	80 93 70 02 	sts	0x0270, r24
		 /*if there is remaining then start from it */
		 if(DesiredTickS % 256 != 0)
    1a90:	8e 81       	ldd	r24, Y+6	; 0x06
    1a92:	9f 81       	ldd	r25, Y+7	; 0x07
    1a94:	a8 85       	ldd	r26, Y+8	; 0x08
    1a96:	b9 85       	ldd	r27, Y+9	; 0x09
    1a98:	90 70       	andi	r25, 0x00	; 0
    1a9a:	a0 70       	andi	r26, 0x00	; 0
    1a9c:	b0 70       	andi	r27, 0x00	; 0
    1a9e:	00 97       	sbiw	r24, 0x00	; 0
    1aa0:	a1 05       	cpc	r26, r1
    1aa2:	b1 05       	cpc	r27, r1
    1aa4:	09 f4       	brne	.+2      	; 0x1aa8 <M_TIMER0_setDelayTimeMilliSec+0x130>
    1aa6:	57 c0       	rjmp	.+174    	; 0x1b56 <M_TIMER0_setDelayTimeMilliSec+0x1de>
		 {
			 TCNT0 = 256 - No_of_Remaning ;
    1aa8:	e2 e5       	ldi	r30, 0x52	; 82
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 91 70 02 	lds	r24, 0x0270
    1ab0:	81 95       	neg	r24
    1ab2:	80 83       	st	Z, r24
			 No_of_over_flows ++ ;
    1ab4:	80 91 6c 02 	lds	r24, 0x026C
    1ab8:	90 91 6d 02 	lds	r25, 0x026D
    1abc:	a0 91 6e 02 	lds	r26, 0x026E
    1ac0:	b0 91 6f 02 	lds	r27, 0x026F
    1ac4:	01 96       	adiw	r24, 0x01	; 1
    1ac6:	a1 1d       	adc	r26, r1
    1ac8:	b1 1d       	adc	r27, r1
    1aca:	80 93 6c 02 	sts	0x026C, r24
    1ace:	90 93 6d 02 	sts	0x026D, r25
    1ad2:	a0 93 6e 02 	sts	0x026E, r26
    1ad6:	b0 93 6f 02 	sts	0x026F, r27
    1ada:	3d c0       	rjmp	.+122    	; 0x1b56 <M_TIMER0_setDelayTimeMilliSec+0x1de>
		 }

		 //H_LCD_void_gotoXY(2,10);
		// H_LCD_void_sendIntNum(No_of_Remaning);
	}
	else if(Local_Mode == CTC_Mode)
    1adc:	8e a1       	ldd	r24, Y+38	; 0x26
    1ade:	81 30       	cpi	r24, 0x01	; 1
    1ae0:	d1 f5       	brne	.+116    	; 0x1b56 <M_TIMER0_setDelayTimeMilliSec+0x1de>
	{
		CTC_Value = 255 ;
    1ae2:	8f ef       	ldi	r24, 0xFF	; 255
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	a0 e0       	ldi	r26, 0x00	; 0
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	8a 83       	std	Y+2, r24	; 0x02
    1aec:	9b 83       	std	Y+3, r25	; 0x03
    1aee:	ac 83       	std	Y+4, r26	; 0x04
    1af0:	bd 83       	std	Y+5, r27	; 0x05
		u8 NoOfCompMatch = 0;
    1af2:	19 82       	std	Y+1, r1	; 0x01
    1af4:	0b c0       	rjmp	.+22     	; 0x1b0c <M_TIMER0_setDelayTimeMilliSec+0x194>

		while(DesiredTickS % CTC_Value)
		{
			CTC_Value -- ;
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	9b 81       	ldd	r25, Y+3	; 0x03
    1afa:	ac 81       	ldd	r26, Y+4	; 0x04
    1afc:	bd 81       	ldd	r27, Y+5	; 0x05
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	a1 09       	sbc	r26, r1
    1b02:	b1 09       	sbc	r27, r1
    1b04:	8a 83       	std	Y+2, r24	; 0x02
    1b06:	9b 83       	std	Y+3, r25	; 0x03
    1b08:	ac 83       	std	Y+4, r26	; 0x04
    1b0a:	bd 83       	std	Y+5, r27	; 0x05
	else if(Local_Mode == CTC_Mode)
	{
		CTC_Value = 255 ;
		u8 NoOfCompMatch = 0;

		while(DesiredTickS % CTC_Value)
    1b0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b10:	a8 85       	ldd	r26, Y+8	; 0x08
    1b12:	b9 85       	ldd	r27, Y+9	; 0x09
    1b14:	2a 81       	ldd	r18, Y+2	; 0x02
    1b16:	3b 81       	ldd	r19, Y+3	; 0x03
    1b18:	4c 81       	ldd	r20, Y+4	; 0x04
    1b1a:	5d 81       	ldd	r21, Y+5	; 0x05
    1b1c:	bc 01       	movw	r22, r24
    1b1e:	cd 01       	movw	r24, r26
    1b20:	0e 94 5d 29 	call	0x52ba	; 0x52ba <__udivmodsi4>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	a1 05       	cpc	r26, r1
    1b2c:	b1 05       	cpc	r27, r1
    1b2e:	19 f7       	brne	.-58     	; 0x1af6 <M_TIMER0_setDelayTimeMilliSec+0x17e>
		{
			CTC_Value -- ;
		}
		NoOfCompMatch = DesiredTickS % CTC_Value ;
    1b30:	8e 81       	ldd	r24, Y+6	; 0x06
    1b32:	9f 81       	ldd	r25, Y+7	; 0x07
    1b34:	a8 85       	ldd	r26, Y+8	; 0x08
    1b36:	b9 85       	ldd	r27, Y+9	; 0x09
    1b38:	2a 81       	ldd	r18, Y+2	; 0x02
    1b3a:	3b 81       	ldd	r19, Y+3	; 0x03
    1b3c:	4c 81       	ldd	r20, Y+4	; 0x04
    1b3e:	5d 81       	ldd	r21, Y+5	; 0x05
    1b40:	bc 01       	movw	r22, r24
    1b42:	cd 01       	movw	r24, r26
    1b44:	0e 94 5d 29 	call	0x52ba	; 0x52ba <__udivmodsi4>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	89 83       	std	Y+1, r24	; 0x01
		OCR0 = NoOfCompMatch;
    1b4e:	ec e5       	ldi	r30, 0x5C	; 92
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	80 83       	st	Z, r24
	}
	M_void_Timer_start(Local_Prescaller);
    1b56:	8f a1       	ldd	r24, Y+39	; 0x27
    1b58:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <M_void_Timer_start>
}
    1b5c:	ac 96       	adiw	r28, 0x2c	; 44
    1b5e:	0f b6       	in	r0, 0x3f	; 63
    1b60:	f8 94       	cli
    1b62:	de bf       	out	0x3e, r29	; 62
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	cd bf       	out	0x3d, r28	; 61
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	08 95       	ret

00001b6e <M_void_EnableTIMERInt>:

void M_void_EnableTIMERInt(Timer_Mode T_MODE)
{
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	00 d0       	rcall	.+0      	; 0x1b74 <M_void_EnableTIMERInt+0x6>
    1b74:	0f 92       	push	r0
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
    1b7a:	89 83       	std	Y+1, r24	; 0x01
	switch(T_MODE)
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	28 2f       	mov	r18, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	3b 83       	std	Y+3, r19	; 0x03
    1b84:	2a 83       	std	Y+2, r18	; 0x02
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8a:	00 97       	sbiw	r24, 0x00	; 0
    1b8c:	31 f0       	breq	.+12     	; 0x1b9a <M_void_EnableTIMERInt+0x2c>
    1b8e:	2a 81       	ldd	r18, Y+2	; 0x02
    1b90:	3b 81       	ldd	r19, Y+3	; 0x03
    1b92:	21 30       	cpi	r18, 0x01	; 1
    1b94:	31 05       	cpc	r19, r1
    1b96:	81 f0       	breq	.+32     	; 0x1bb8 <M_void_EnableTIMERInt+0x4a>
    1b98:	1d c0       	rjmp	.+58     	; 0x1bd4 <M_void_EnableTIMERInt+0x66>
	{
	case Normal_Mode:
		TIMSK &= NORMAL_MODE_INTERRUPT_CLEAR;
    1b9a:	a9 e5       	ldi	r26, 0x59	; 89
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	e9 e5       	ldi	r30, 0x59	; 89
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	8e 7f       	andi	r24, 0xFE	; 254
    1ba6:	8c 93       	st	X, r24
		TIMSK |= NORMAL_MODE_INTERRUPT_SET;
    1ba8:	a9 e5       	ldi	r26, 0x59	; 89
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e9 e5       	ldi	r30, 0x59	; 89
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	81 60       	ori	r24, 0x01	; 1
    1bb4:	8c 93       	st	X, r24
    1bb6:	0e c0       	rjmp	.+28     	; 0x1bd4 <M_void_EnableTIMERInt+0x66>
		break;
	case CTC_Mode:
		TIMSK &= CTC_MODE_INTERRUPT_CLEAR;
    1bb8:	a9 e5       	ldi	r26, 0x59	; 89
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	e9 e5       	ldi	r30, 0x59	; 89
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	8d 7f       	andi	r24, 0xFD	; 253
    1bc4:	8c 93       	st	X, r24
		TIMSK |= CTC_MODE_INTERRUPT_SET;
    1bc6:	a9 e5       	ldi	r26, 0x59	; 89
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e9 e5       	ldi	r30, 0x59	; 89
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	82 60       	ori	r24, 0x02	; 2
    1bd2:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	08 95       	ret

00001be0 <M_void_DisableTIMERInt>:
void M_void_DisableTIMERInt(Timer_Mode T_MODE)
{
    1be0:	df 93       	push	r29
    1be2:	cf 93       	push	r28
    1be4:	00 d0       	rcall	.+0      	; 0x1be6 <M_void_DisableTIMERInt+0x6>
    1be6:	0f 92       	push	r0
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	89 83       	std	Y+1, r24	; 0x01
	switch(T_MODE)
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	28 2f       	mov	r18, r24
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	3b 83       	std	Y+3, r19	; 0x03
    1bf6:	2a 83       	std	Y+2, r18	; 0x02
    1bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfa:	9b 81       	ldd	r25, Y+3	; 0x03
    1bfc:	00 97       	sbiw	r24, 0x00	; 0
    1bfe:	31 f0       	breq	.+12     	; 0x1c0c <M_void_DisableTIMERInt+0x2c>
    1c00:	2a 81       	ldd	r18, Y+2	; 0x02
    1c02:	3b 81       	ldd	r19, Y+3	; 0x03
    1c04:	21 30       	cpi	r18, 0x01	; 1
    1c06:	31 05       	cpc	r19, r1
    1c08:	79 f0       	breq	.+30     	; 0x1c28 <M_void_DisableTIMERInt+0x48>
    1c0a:	1b c0       	rjmp	.+54     	; 0x1c42 <M_void_DisableTIMERInt+0x62>
	{
	case Normal_Mode:
		TIMSK &= NORMAL_MODE_INTERRUPT_CLEAR;
    1c0c:	a9 e5       	ldi	r26, 0x59	; 89
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e9 e5       	ldi	r30, 0x59	; 89
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	8e 7f       	andi	r24, 0xFE	; 254
    1c18:	8c 93       	st	X, r24
		TIMSK |= NORMAL_MODE_INTERRUPT_RESET;
    1c1a:	a9 e5       	ldi	r26, 0x59	; 89
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e9 e5       	ldi	r30, 0x59	; 89
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	8c 93       	st	X, r24
    1c26:	0d c0       	rjmp	.+26     	; 0x1c42 <M_void_DisableTIMERInt+0x62>
		break;
	case CTC_Mode:
		TIMSK &= CTC_MODE_INTERRUPT_CLEAR;
    1c28:	a9 e5       	ldi	r26, 0x59	; 89
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	e9 e5       	ldi	r30, 0x59	; 89
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	8d 7f       	andi	r24, 0xFD	; 253
    1c34:	8c 93       	st	X, r24
		TIMSK |= CTC_MODE_INTERRUPT_RESET;
    1c36:	a9 e5       	ldi	r26, 0x59	; 89
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	e9 e5       	ldi	r30, 0x59	; 89
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	08 95       	ret

00001c4e <M_void_setCallBack>:

void M_void_setCallBack(Timer_Mode T_MODE,void (*Copy_pvINTFunc)(void))
{
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <M_void_setCallBack+0x6>
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <M_void_setCallBack+0x8>
    1c56:	0f 92       	push	r0
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	89 83       	std	Y+1, r24	; 0x01
    1c5e:	7b 83       	std	Y+3, r23	; 0x03
    1c60:	6a 83       	std	Y+2, r22	; 0x02
	//u8 Local_u8ErrorStatus=NO_ERROR;
//	u8 Local_u8counter;
	switch(T_MODE)
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	3d 83       	std	Y+5, r19	; 0x05
    1c6a:	2c 83       	std	Y+4, r18	; 0x04
    1c6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	31 f0       	breq	.+12     	; 0x1c80 <M_void_setCallBack+0x32>
    1c74:	2c 81       	ldd	r18, Y+4	; 0x04
    1c76:	3d 81       	ldd	r19, Y+5	; 0x05
    1c78:	21 30       	cpi	r18, 0x01	; 1
    1c7a:	31 05       	cpc	r19, r1
    1c7c:	61 f0       	breq	.+24     	; 0x1c96 <M_void_setCallBack+0x48>
    1c7e:	15 c0       	rjmp	.+42     	; 0x1caa <M_void_setCallBack+0x5c>
	{
	case Normal_Mode:
		if(Copy_pvINTFunc!= NULL)
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	9b 81       	ldd	r25, Y+3	; 0x03
    1c84:	00 97       	sbiw	r24, 0x00	; 0
    1c86:	89 f0       	breq	.+34     	; 0x1caa <M_void_setCallBack+0x5c>
		{
			EXTI_ARRCALLBACK2FUNC[0]=Copy_pvINTFunc;
    1c88:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c8c:	90 93 69 02 	sts	0x0269, r25
    1c90:	80 93 68 02 	sts	0x0268, r24
    1c94:	0a c0       	rjmp	.+20     	; 0x1caa <M_void_setCallBack+0x5c>
		}
		break;
	case CTC_Mode:
		if(Copy_pvINTFunc!= NULL)
    1c96:	8a 81       	ldd	r24, Y+2	; 0x02
    1c98:	9b 81       	ldd	r25, Y+3	; 0x03
    1c9a:	00 97       	sbiw	r24, 0x00	; 0
    1c9c:	31 f0       	breq	.+12     	; 0x1caa <M_void_setCallBack+0x5c>
		{
			EXTI_ARRCALLBACK2FUNC[1]=Copy_pvINTFunc;
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca2:	90 93 6b 02 	sts	0x026B, r25
    1ca6:	80 93 6a 02 	sts	0x026A, r24
		}
		break;
	default:
		break;
	}
}
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	08 95       	ret

00001cba <M_TIMER0_PHASE_PWM_SET>:

void M_TIMER0_PHASE_PWM_SET(Comp_Output_Mode PWM_TYPE,u32 PWM_FREQ, u8 Duty_Cycle)
{
    1cba:	df 93       	push	r29
    1cbc:	cf 93       	push	r28
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
    1cc2:	28 97       	sbiw	r28, 0x08	; 8
    1cc4:	0f b6       	in	r0, 0x3f	; 63
    1cc6:	f8 94       	cli
    1cc8:	de bf       	out	0x3e, r29	; 62
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	cd bf       	out	0x3d, r28	; 61
    1cce:	89 83       	std	Y+1, r24	; 0x01
    1cd0:	4a 83       	std	Y+2, r20	; 0x02
    1cd2:	5b 83       	std	Y+3, r21	; 0x03
    1cd4:	6c 83       	std	Y+4, r22	; 0x04
    1cd6:	7d 83       	std	Y+5, r23	; 0x05
    1cd8:	2e 83       	std	Y+6, r18	; 0x06
	/*Set duty cycle to OCR0*/
	switch(PWM_TYPE)
    1cda:	89 81       	ldd	r24, Y+1	; 0x01
    1cdc:	28 2f       	mov	r18, r24
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	38 87       	std	Y+8, r19	; 0x08
    1ce2:	2f 83       	std	Y+7, r18	; 0x07
    1ce4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ce6:	98 85       	ldd	r25, Y+8	; 0x08
    1ce8:	84 30       	cpi	r24, 0x04	; 4
    1cea:	91 05       	cpc	r25, r1
    1cec:	31 f0       	breq	.+12     	; 0x1cfa <M_TIMER0_PHASE_PWM_SET+0x40>
    1cee:	2f 81       	ldd	r18, Y+7	; 0x07
    1cf0:	38 85       	ldd	r19, Y+8	; 0x08
    1cf2:	25 30       	cpi	r18, 0x05	; 5
    1cf4:	31 05       	cpc	r19, r1
    1cf6:	89 f0       	breq	.+34     	; 0x1d1a <M_TIMER0_PHASE_PWM_SET+0x60>
    1cf8:	1b c0       	rjmp	.+54     	; 0x1d30 <M_TIMER0_PHASE_PWM_SET+0x76>
	{
	case Inverting_Mode:
		OCR0=(255-(3*Duty_Cycle));
    1cfa:	ec e5       	ldi	r30, 0x5C	; 92
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	8e 81       	ldd	r24, Y+6	; 0x06
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	c9 01       	movw	r24, r18
    1d06:	88 0f       	add	r24, r24
    1d08:	99 1f       	adc	r25, r25
    1d0a:	82 0f       	add	r24, r18
    1d0c:	93 1f       	adc	r25, r19
    1d0e:	90 95       	com	r25
    1d10:	81 95       	neg	r24
    1d12:	9f 4f       	sbci	r25, 0xFF	; 255
    1d14:	81 50       	subi	r24, 0x01	; 1
    1d16:	80 83       	st	Z, r24
    1d18:	0b c0       	rjmp	.+22     	; 0x1d30 <M_TIMER0_PHASE_PWM_SET+0x76>
		break;
	case Non_Invering_Mode:
		OCR0=(3*Duty_Cycle);
    1d1a:	ec e5       	ldi	r30, 0x5C	; 92
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d20:	28 2f       	mov	r18, r24
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	c9 01       	movw	r24, r18
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	82 0f       	add	r24, r18
    1d2c:	93 1f       	adc	r25, r19
    1d2e:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
	/*Select PRE_SCALLER according to the giver frequency*/
	if((PWM_FREQ>31000))
    1d30:	8a 81       	ldd	r24, Y+2	; 0x02
    1d32:	9b 81       	ldd	r25, Y+3	; 0x03
    1d34:	ac 81       	ldd	r26, Y+4	; 0x04
    1d36:	bd 81       	ldd	r27, Y+5	; 0x05
    1d38:	89 31       	cpi	r24, 0x19	; 25
    1d3a:	39 e7       	ldi	r19, 0x79	; 121
    1d3c:	93 07       	cpc	r25, r19
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	a3 07       	cpc	r26, r19
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	b3 07       	cpc	r27, r19
    1d46:	20 f0       	brcs	.+8      	; 0x1d50 <M_TIMER0_PHASE_PWM_SET+0x96>
	{
		M_void_Timer_start(NO_PRESCALLING);
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <M_void_Timer_start>
    1d4e:	7b c0       	rjmp	.+246    	; 0x1e46 <M_TIMER0_PHASE_PWM_SET+0x18c>
	}
	else if((PWM_FREQ<=31000) && (PWM_FREQ>3900))
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	9b 81       	ldd	r25, Y+3	; 0x03
    1d54:	ac 81       	ldd	r26, Y+4	; 0x04
    1d56:	bd 81       	ldd	r27, Y+5	; 0x05
    1d58:	89 31       	cpi	r24, 0x19	; 25
    1d5a:	29 e7       	ldi	r18, 0x79	; 121
    1d5c:	92 07       	cpc	r25, r18
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	a2 07       	cpc	r26, r18
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	b2 07       	cpc	r27, r18
    1d66:	80 f4       	brcc	.+32     	; 0x1d88 <M_TIMER0_PHASE_PWM_SET+0xce>
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d6c:	ac 81       	ldd	r26, Y+4	; 0x04
    1d6e:	bd 81       	ldd	r27, Y+5	; 0x05
    1d70:	8d 33       	cpi	r24, 0x3D	; 61
    1d72:	3f e0       	ldi	r19, 0x0F	; 15
    1d74:	93 07       	cpc	r25, r19
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	a3 07       	cpc	r26, r19
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	b3 07       	cpc	r27, r19
    1d7e:	20 f0       	brcs	.+8      	; 0x1d88 <M_TIMER0_PHASE_PWM_SET+0xce>
	{
		M_void_Timer_start(CLK_8);
    1d80:	82 e0       	ldi	r24, 0x02	; 2
    1d82:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <M_void_Timer_start>
    1d86:	5f c0       	rjmp	.+190    	; 0x1e46 <M_TIMER0_PHASE_PWM_SET+0x18c>

	}
	else if((PWM_FREQ <= 3900) && (PWM_FREQ > 400))
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d8c:	ac 81       	ldd	r26, Y+4	; 0x04
    1d8e:	bd 81       	ldd	r27, Y+5	; 0x05
    1d90:	8d 33       	cpi	r24, 0x3D	; 61
    1d92:	2f e0       	ldi	r18, 0x0F	; 15
    1d94:	92 07       	cpc	r25, r18
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	a2 07       	cpc	r26, r18
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	b2 07       	cpc	r27, r18
    1d9e:	80 f4       	brcc	.+32     	; 0x1dc0 <M_TIMER0_PHASE_PWM_SET+0x106>
    1da0:	8a 81       	ldd	r24, Y+2	; 0x02
    1da2:	9b 81       	ldd	r25, Y+3	; 0x03
    1da4:	ac 81       	ldd	r26, Y+4	; 0x04
    1da6:	bd 81       	ldd	r27, Y+5	; 0x05
    1da8:	81 39       	cpi	r24, 0x91	; 145
    1daa:	31 e0       	ldi	r19, 0x01	; 1
    1dac:	93 07       	cpc	r25, r19
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	a3 07       	cpc	r26, r19
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	b3 07       	cpc	r27, r19
    1db6:	20 f0       	brcs	.+8      	; 0x1dc0 <M_TIMER0_PHASE_PWM_SET+0x106>
	{
		M_void_Timer_start(CLK_64);
    1db8:	83 e0       	ldi	r24, 0x03	; 3
    1dba:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <M_void_Timer_start>
    1dbe:	43 c0       	rjmp	.+134    	; 0x1e46 <M_TIMER0_PHASE_PWM_SET+0x18c>

	}
	else if((PWM_FREQ <= 400) && (PWM_FREQ >100))
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc4:	ac 81       	ldd	r26, Y+4	; 0x04
    1dc6:	bd 81       	ldd	r27, Y+5	; 0x05
    1dc8:	81 39       	cpi	r24, 0x91	; 145
    1dca:	21 e0       	ldi	r18, 0x01	; 1
    1dcc:	92 07       	cpc	r25, r18
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	a2 07       	cpc	r26, r18
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	b2 07       	cpc	r27, r18
    1dd6:	68 f4       	brcc	.+26     	; 0x1df2 <M_TIMER0_PHASE_PWM_SET+0x138>
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	9b 81       	ldd	r25, Y+3	; 0x03
    1ddc:	ac 81       	ldd	r26, Y+4	; 0x04
    1dde:	bd 81       	ldd	r27, Y+5	; 0x05
    1de0:	85 36       	cpi	r24, 0x65	; 101
    1de2:	91 05       	cpc	r25, r1
    1de4:	a1 05       	cpc	r26, r1
    1de6:	b1 05       	cpc	r27, r1
    1de8:	20 f0       	brcs	.+8      	; 0x1df2 <M_TIMER0_PHASE_PWM_SET+0x138>
	{
		M_void_Timer_start(CLK_256);
    1dea:	84 e0       	ldi	r24, 0x04	; 4
    1dec:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <M_void_Timer_start>
    1df0:	2a c0       	rjmp	.+84     	; 0x1e46 <M_TIMER0_PHASE_PWM_SET+0x18c>

	}
	else if((PWM_FREQ <=100) &&(PWM_FREQ >=30))
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	9b 81       	ldd	r25, Y+3	; 0x03
    1df6:	ac 81       	ldd	r26, Y+4	; 0x04
    1df8:	bd 81       	ldd	r27, Y+5	; 0x05
    1dfa:	85 36       	cpi	r24, 0x65	; 101
    1dfc:	91 05       	cpc	r25, r1
    1dfe:	a1 05       	cpc	r26, r1
    1e00:	b1 05       	cpc	r27, r1
    1e02:	68 f4       	brcc	.+26     	; 0x1e1e <M_TIMER0_PHASE_PWM_SET+0x164>
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	9b 81       	ldd	r25, Y+3	; 0x03
    1e08:	ac 81       	ldd	r26, Y+4	; 0x04
    1e0a:	bd 81       	ldd	r27, Y+5	; 0x05
    1e0c:	8e 31       	cpi	r24, 0x1E	; 30
    1e0e:	91 05       	cpc	r25, r1
    1e10:	a1 05       	cpc	r26, r1
    1e12:	b1 05       	cpc	r27, r1
    1e14:	20 f0       	brcs	.+8      	; 0x1e1e <M_TIMER0_PHASE_PWM_SET+0x164>
	{
		M_void_Timer_start(CLK_1024);
    1e16:	85 e0       	ldi	r24, 0x05	; 5
    1e18:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <M_void_Timer_start>
    1e1c:	14 c0       	rjmp	.+40     	; 0x1e46 <M_TIMER0_PHASE_PWM_SET+0x18c>
	}
	else if((PWM_FREQ<30) && (PWM_FREQ >=0))
    1e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e20:	9b 81       	ldd	r25, Y+3	; 0x03
    1e22:	ac 81       	ldd	r26, Y+4	; 0x04
    1e24:	bd 81       	ldd	r27, Y+5	; 0x05
    1e26:	8e 31       	cpi	r24, 0x1E	; 30
    1e28:	91 05       	cpc	r25, r1
    1e2a:	a1 05       	cpc	r26, r1
    1e2c:	b1 05       	cpc	r27, r1
    1e2e:	58 f4       	brcc	.+22     	; 0x1e46 <M_TIMER0_PHASE_PWM_SET+0x18c>
	{
		M_void_Timer_Init(Phase_Correct_PWM,Normal_Port);
    1e30:	83 e0       	ldi	r24, 0x03	; 3
    1e32:	60 e0       	ldi	r22, 0x00	; 0
    1e34:	0e 94 5f 0a 	call	0x14be	; 0x14be <M_void_Timer_Init>
		M_void_Timer_start(No_CLK);
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <M_void_Timer_start>
		M_Dio_void_setPinValue(DIO_PB3,DIO_LOW);
    1e3e:	87 e1       	ldi	r24, 0x17	; 23
    1e40:	60 e0       	ldi	r22, 0x00	; 0
    1e42:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
		break;
	default:
		break;
	}
	*/
}
    1e46:	28 96       	adiw	r28, 0x08	; 8
    1e48:	0f b6       	in	r0, 0x3f	; 63
    1e4a:	f8 94       	cli
    1e4c:	de bf       	out	0x3e, r29	; 62
    1e4e:	0f be       	out	0x3f, r0	; 63
    1e50:	cd bf       	out	0x3d, r28	; 61
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	08 95       	ret

00001e58 <M_TIMER0_FAST_PWM_SET>:

void M_TIMER0_FAST_PWM_SET(Comp_Output_Mode PWM_TYPE,u32 PWM_FREQ,u8 Duty_Cycle)
{
    1e58:	0f 93       	push	r16
    1e5a:	1f 93       	push	r17
    1e5c:	df 93       	push	r29
    1e5e:	cf 93       	push	r28
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	2c 97       	sbiw	r28, 0x0c	; 12
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	f8 94       	cli
    1e6a:	de bf       	out	0x3e, r29	; 62
    1e6c:	0f be       	out	0x3f, r0	; 63
    1e6e:	cd bf       	out	0x3d, r28	; 61
    1e70:	89 83       	std	Y+1, r24	; 0x01
    1e72:	4a 83       	std	Y+2, r20	; 0x02
    1e74:	5b 83       	std	Y+3, r21	; 0x03
    1e76:	6c 83       	std	Y+4, r22	; 0x04
    1e78:	7d 83       	std	Y+5, r23	; 0x05
    1e7a:	2e 83       	std	Y+6, r18	; 0x06
	/*Set duty cycle to OCR0*/
	switch(PWM_TYPE)
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	28 2f       	mov	r18, r24
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	38 87       	std	Y+8, r19	; 0x08
    1e84:	2f 83       	std	Y+7, r18	; 0x07
    1e86:	8f 81       	ldd	r24, Y+7	; 0x07
    1e88:	98 85       	ldd	r25, Y+8	; 0x08
    1e8a:	84 30       	cpi	r24, 0x04	; 4
    1e8c:	91 05       	cpc	r25, r1
    1e8e:	31 f0       	breq	.+12     	; 0x1e9c <M_TIMER0_FAST_PWM_SET+0x44>
    1e90:	af 81       	ldd	r26, Y+7	; 0x07
    1e92:	b8 85       	ldd	r27, Y+8	; 0x08
    1e94:	a5 30       	cpi	r26, 0x05	; 5
    1e96:	b1 05       	cpc	r27, r1
    1e98:	69 f1       	breq	.+90     	; 0x1ef4 <M_TIMER0_FAST_PWM_SET+0x9c>
    1e9a:	57 c0       	rjmp	.+174    	; 0x1f4a <M_TIMER0_FAST_PWM_SET+0xf2>
	{
	case Inverting_Mode:
		OCR0=(255-(f32)(2.56*Duty_Cycle));
    1e9c:	0c e5       	ldi	r16, 0x5C	; 92
    1e9e:	10 e0       	ldi	r17, 0x00	; 0
    1ea0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea2:	88 2f       	mov	r24, r24
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	aa 27       	eor	r26, r26
    1ea8:	97 fd       	sbrc	r25, 7
    1eaa:	a0 95       	com	r26
    1eac:	ba 2f       	mov	r27, r26
    1eae:	bc 01       	movw	r22, r24
    1eb0:	cd 01       	movw	r24, r26
    1eb2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	bc 01       	movw	r22, r24
    1ebc:	cd 01       	movw	r24, r26
    1ebe:	2a e0       	ldi	r18, 0x0A	; 10
    1ec0:	37 ed       	ldi	r19, 0xD7	; 215
    1ec2:	43 e2       	ldi	r20, 0x23	; 35
    1ec4:	50 ec       	ldi	r21, 0xC0	; 192
    1ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	bc 01       	movw	r22, r24
    1ed0:	cd 01       	movw	r24, r26
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	4f e7       	ldi	r20, 0x7F	; 127
    1ed8:	53 e4       	ldi	r21, 0x43	; 67
    1eda:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	bc 01       	movw	r22, r24
    1ee4:	cd 01       	movw	r24, r26
    1ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	f8 01       	movw	r30, r16
    1ef0:	80 83       	st	Z, r24
    1ef2:	2b c0       	rjmp	.+86     	; 0x1f4a <M_TIMER0_FAST_PWM_SET+0xf2>
		break;
	case Non_Invering_Mode:
		OCR0=(((f32)2.56*Duty_Cycle)-1);
    1ef4:	0c e5       	ldi	r16, 0x5C	; 92
    1ef6:	10 e0       	ldi	r17, 0x00	; 0
    1ef8:	8e 81       	ldd	r24, Y+6	; 0x06
    1efa:	88 2f       	mov	r24, r24
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	aa 27       	eor	r26, r26
    1f00:	97 fd       	sbrc	r25, 7
    1f02:	a0 95       	com	r26
    1f04:	ba 2f       	mov	r27, r26
    1f06:	bc 01       	movw	r22, r24
    1f08:	cd 01       	movw	r24, r26
    1f0a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	bc 01       	movw	r22, r24
    1f14:	cd 01       	movw	r24, r26
    1f16:	2a e0       	ldi	r18, 0x0A	; 10
    1f18:	37 ed       	ldi	r19, 0xD7	; 215
    1f1a:	43 e2       	ldi	r20, 0x23	; 35
    1f1c:	50 e4       	ldi	r21, 0x40	; 64
    1f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	bc 01       	movw	r22, r24
    1f28:	cd 01       	movw	r24, r26
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	40 e8       	ldi	r20, 0x80	; 128
    1f30:	5f e3       	ldi	r21, 0x3F	; 63
    1f32:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	bc 01       	movw	r22, r24
    1f3c:	cd 01       	movw	r24, r26
    1f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	d8 01       	movw	r26, r16
    1f48:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
	/*Select PRE_SCALLER according to the giver frequency*/
	switch(PWM_FREQ)
    1f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4e:	ac 81       	ldd	r26, Y+4	; 0x04
    1f50:	bd 81       	ldd	r27, Y+5	; 0x05
    1f52:	89 87       	std	Y+9, r24	; 0x09
    1f54:	9a 87       	std	Y+10, r25	; 0x0a
    1f56:	ab 87       	std	Y+11, r26	; 0x0b
    1f58:	bc 87       	std	Y+12, r27	; 0x0c
    1f5a:	89 85       	ldd	r24, Y+9	; 0x09
    1f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1f60:	bc 85       	ldd	r27, Y+12	; 0x0c
    1f62:	81 3d       	cpi	r24, 0xD1	; 209
    1f64:	e3 e0       	ldi	r30, 0x03	; 3
    1f66:	9e 07       	cpc	r25, r30
    1f68:	e0 e0       	ldi	r30, 0x00	; 0
    1f6a:	ae 07       	cpc	r26, r30
    1f6c:	e0 e0       	ldi	r30, 0x00	; 0
    1f6e:	be 07       	cpc	r27, r30
    1f70:	09 f4       	brne	.+2      	; 0x1f74 <M_TIMER0_FAST_PWM_SET+0x11c>
    1f72:	3f c0       	rjmp	.+126    	; 0x1ff2 <M_TIMER0_FAST_PWM_SET+0x19a>
    1f74:	89 85       	ldd	r24, Y+9	; 0x09
    1f76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f78:	ab 85       	ldd	r26, Y+11	; 0x0b
    1f7a:	bc 85       	ldd	r27, Y+12	; 0x0c
    1f7c:	82 3d       	cpi	r24, 0xD2	; 210
    1f7e:	e3 e0       	ldi	r30, 0x03	; 3
    1f80:	9e 07       	cpc	r25, r30
    1f82:	e0 e0       	ldi	r30, 0x00	; 0
    1f84:	ae 07       	cpc	r26, r30
    1f86:	e0 e0       	ldi	r30, 0x00	; 0
    1f88:	be 07       	cpc	r27, r30
    1f8a:	98 f4       	brcc	.+38     	; 0x1fb2 <M_TIMER0_FAST_PWM_SET+0x15a>
    1f8c:	89 85       	ldd	r24, Y+9	; 0x09
    1f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f90:	ab 85       	ldd	r26, Y+11	; 0x0b
    1f92:	bc 85       	ldd	r27, Y+12	; 0x0c
    1f94:	8d 33       	cpi	r24, 0x3D	; 61
    1f96:	91 05       	cpc	r25, r1
    1f98:	a1 05       	cpc	r26, r1
    1f9a:	b1 05       	cpc	r27, r1
    1f9c:	91 f1       	breq	.+100    	; 0x2002 <M_TIMER0_FAST_PWM_SET+0x1aa>
    1f9e:	89 85       	ldd	r24, Y+9	; 0x09
    1fa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa2:	ab 85       	ldd	r26, Y+11	; 0x0b
    1fa4:	bc 85       	ldd	r27, Y+12	; 0x0c
    1fa6:	84 3f       	cpi	r24, 0xF4	; 244
    1fa8:	91 05       	cpc	r25, r1
    1faa:	a1 05       	cpc	r26, r1
    1fac:	b1 05       	cpc	r27, r1
    1fae:	29 f1       	breq	.+74     	; 0x1ffa <M_TIMER0_FAST_PWM_SET+0x1a2>
    1fb0:	2b c0       	rjmp	.+86     	; 0x2008 <M_TIMER0_FAST_PWM_SET+0x1b0>
    1fb2:	89 85       	ldd	r24, Y+9	; 0x09
    1fb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb6:	ab 85       	ldd	r26, Y+11	; 0x0b
    1fb8:	bc 85       	ldd	r27, Y+12	; 0x0c
    1fba:	85 38       	cpi	r24, 0x85	; 133
    1fbc:	ee e1       	ldi	r30, 0x1E	; 30
    1fbe:	9e 07       	cpc	r25, r30
    1fc0:	e0 e0       	ldi	r30, 0x00	; 0
    1fc2:	ae 07       	cpc	r26, r30
    1fc4:	e0 e0       	ldi	r30, 0x00	; 0
    1fc6:	be 07       	cpc	r27, r30
    1fc8:	81 f0       	breq	.+32     	; 0x1fea <M_TIMER0_FAST_PWM_SET+0x192>
    1fca:	89 85       	ldd	r24, Y+9	; 0x09
    1fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fce:	ab 85       	ldd	r26, Y+11	; 0x0b
    1fd0:	bc 85       	ldd	r27, Y+12	; 0x0c
    1fd2:	84 32       	cpi	r24, 0x24	; 36
    1fd4:	e4 ef       	ldi	r30, 0xF4	; 244
    1fd6:	9e 07       	cpc	r25, r30
    1fd8:	e0 e0       	ldi	r30, 0x00	; 0
    1fda:	ae 07       	cpc	r26, r30
    1fdc:	e0 e0       	ldi	r30, 0x00	; 0
    1fde:	be 07       	cpc	r27, r30
    1fe0:	99 f4       	brne	.+38     	; 0x2008 <M_TIMER0_FAST_PWM_SET+0x1b0>
	{
	case FAST_PWM_NO_PRESC:
		M_void_Timer_start(NO_PRESCALLING);
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <M_void_Timer_start>
    1fe8:	0f c0       	rjmp	.+30     	; 0x2008 <M_TIMER0_FAST_PWM_SET+0x1b0>
		break;
	case FAST_PWM_8_CLK:
		M_void_Timer_start(CLK_8);
    1fea:	82 e0       	ldi	r24, 0x02	; 2
    1fec:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <M_void_Timer_start>
    1ff0:	0b c0       	rjmp	.+22     	; 0x2008 <M_TIMER0_FAST_PWM_SET+0x1b0>
		break;
	case FAST_PWM_64_CLK:
		M_void_Timer_start(CLK_64);
    1ff2:	83 e0       	ldi	r24, 0x03	; 3
    1ff4:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <M_void_Timer_start>
    1ff8:	07 c0       	rjmp	.+14     	; 0x2008 <M_TIMER0_FAST_PWM_SET+0x1b0>
		break;
	case FAST_PWM_256_CLK:
		M_void_Timer_start(CLK_256);
    1ffa:	84 e0       	ldi	r24, 0x04	; 4
    1ffc:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <M_void_Timer_start>
    2000:	03 c0       	rjmp	.+6      	; 0x2008 <M_TIMER0_FAST_PWM_SET+0x1b0>
		break;
	case FAST_PWM_1024_CLK:
		M_void_Timer_start(CLK_1024);
    2002:	85 e0       	ldi	r24, 0x05	; 5
    2004:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <M_void_Timer_start>
		break;
	default:
		break;
	}
}
    2008:	2c 96       	adiw	r28, 0x0c	; 12
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	f8 94       	cli
    200e:	de bf       	out	0x3e, r29	; 62
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	cd bf       	out	0x3d, r28	; 61
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	1f 91       	pop	r17
    201a:	0f 91       	pop	r16
    201c:	08 95       	ret

0000201e <__vector_11>:



ISR(TIMER0_OVF_vect)
{
    201e:	1f 92       	push	r1
    2020:	0f 92       	push	r0
    2022:	0f b6       	in	r0, 0x3f	; 63
    2024:	0f 92       	push	r0
    2026:	11 24       	eor	r1, r1
    2028:	2f 93       	push	r18
    202a:	3f 93       	push	r19
    202c:	4f 93       	push	r20
    202e:	5f 93       	push	r21
    2030:	6f 93       	push	r22
    2032:	7f 93       	push	r23
    2034:	8f 93       	push	r24
    2036:	9f 93       	push	r25
    2038:	af 93       	push	r26
    203a:	bf 93       	push	r27
    203c:	ef 93       	push	r30
    203e:	ff 93       	push	r31
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
	Global_No_of_overflows++;
    2048:	80 91 71 02 	lds	r24, 0x0271
    204c:	90 91 72 02 	lds	r25, 0x0272
    2050:	a0 91 73 02 	lds	r26, 0x0273
    2054:	b0 91 74 02 	lds	r27, 0x0274
    2058:	01 96       	adiw	r24, 0x01	; 1
    205a:	a1 1d       	adc	r26, r1
    205c:	b1 1d       	adc	r27, r1
    205e:	80 93 71 02 	sts	0x0271, r24
    2062:	90 93 72 02 	sts	0x0272, r25
    2066:	a0 93 73 02 	sts	0x0273, r26
    206a:	b0 93 74 02 	sts	0x0274, r27
	if(EXTI_ARRCALLBACK2FUNC[0]!=NULL)
    206e:	80 91 68 02 	lds	r24, 0x0268
    2072:	90 91 69 02 	lds	r25, 0x0269
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	41 f1       	breq	.+80     	; 0x20ca <__vector_11+0xac>
	{
		if(Global_No_of_overflows==No_of_over_flows)
    207a:	20 91 71 02 	lds	r18, 0x0271
    207e:	30 91 72 02 	lds	r19, 0x0272
    2082:	40 91 73 02 	lds	r20, 0x0273
    2086:	50 91 74 02 	lds	r21, 0x0274
    208a:	80 91 6c 02 	lds	r24, 0x026C
    208e:	90 91 6d 02 	lds	r25, 0x026D
    2092:	a0 91 6e 02 	lds	r26, 0x026E
    2096:	b0 91 6f 02 	lds	r27, 0x026F
    209a:	28 17       	cp	r18, r24
    209c:	39 07       	cpc	r19, r25
    209e:	4a 07       	cpc	r20, r26
    20a0:	5b 07       	cpc	r21, r27
    20a2:	99 f4       	brne	.+38     	; 0x20ca <__vector_11+0xac>
		{
			EXTI_ARRCALLBACK2FUNC[0]();
    20a4:	e0 91 68 02 	lds	r30, 0x0268
    20a8:	f0 91 69 02 	lds	r31, 0x0269
    20ac:	09 95       	icall
			Global_No_of_overflows=0;
    20ae:	10 92 71 02 	sts	0x0271, r1
    20b2:	10 92 72 02 	sts	0x0272, r1
    20b6:	10 92 73 02 	sts	0x0273, r1
    20ba:	10 92 74 02 	sts	0x0274, r1
			TCNT0 = 256 - No_of_Remaning;
    20be:	e2 e5       	ldi	r30, 0x52	; 82
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 91 70 02 	lds	r24, 0x0270
    20c6:	81 95       	neg	r24
    20c8:	80 83       	st	Z, r24
		}
	}

}
    20ca:	cf 91       	pop	r28
    20cc:	df 91       	pop	r29
    20ce:	ff 91       	pop	r31
    20d0:	ef 91       	pop	r30
    20d2:	bf 91       	pop	r27
    20d4:	af 91       	pop	r26
    20d6:	9f 91       	pop	r25
    20d8:	8f 91       	pop	r24
    20da:	7f 91       	pop	r23
    20dc:	6f 91       	pop	r22
    20de:	5f 91       	pop	r21
    20e0:	4f 91       	pop	r20
    20e2:	3f 91       	pop	r19
    20e4:	2f 91       	pop	r18
    20e6:	0f 90       	pop	r0
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	0f 90       	pop	r0
    20ec:	1f 90       	pop	r1
    20ee:	18 95       	reti

000020f0 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
    20f0:	1f 92       	push	r1
    20f2:	0f 92       	push	r0
    20f4:	0f b6       	in	r0, 0x3f	; 63
    20f6:	0f 92       	push	r0
    20f8:	11 24       	eor	r1, r1
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62

}
    2102:	cf 91       	pop	r28
    2104:	df 91       	pop	r29
    2106:	0f 90       	pop	r0
    2108:	0f be       	out	0x3f, r0	; 63
    210a:	0f 90       	pop	r0
    210c:	1f 90       	pop	r1
    210e:	18 95       	reti

00002110 <Port_Init>:
  parameters (in)  :
  parameters (out) : none
  Return Value     : void
******************************************/
void Port_Init(const Port_ConfigType * ConfigPtr)
{
    2110:	df 93       	push	r29
    2112:	cf 93       	push	r28
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
    2118:	2b 97       	sbiw	r28, 0x0b	; 11
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	f8 94       	cli
    211e:	de bf       	out	0x3e, r29	; 62
    2120:	0f be       	out	0x3f, r0	; 63
    2122:	cd bf       	out	0x3d, r28	; 61
    2124:	9d 83       	std	Y+5, r25	; 0x05
    2126:	8c 83       	std	Y+4, r24	; 0x04

	if(ConfigPtr == NULL)
    2128:	8c 81       	ldd	r24, Y+4	; 0x04
    212a:	9d 81       	ldd	r25, Y+5	; 0x05
    212c:	00 97       	sbiw	r24, 0x00	; 0
    212e:	09 f4       	brne	.+2      	; 0x2132 <Port_Init+0x22>
    2130:	51 c2       	rjmp	.+1186   	; 0x25d4 <Port_Init+0x4c4>
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<PORT_PINS_CONFIG_ARR_SIZE;i++)
    2132:	1b 82       	std	Y+3, r1	; 0x03
    2134:	4b c2       	rjmp	.+1174   	; 0x25cc <Port_Init+0x4bc>
			{
				Local_pin =(ConfigPtr[i].Port_PinNumber)%10 ;
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	88 2f       	mov	r24, r24
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	9c 01       	movw	r18, r24
    213e:	22 0f       	add	r18, r18
    2140:	33 1f       	adc	r19, r19
    2142:	22 0f       	add	r18, r18
    2144:	33 1f       	adc	r19, r19
    2146:	8c 81       	ldd	r24, Y+4	; 0x04
    2148:	9d 81       	ldd	r25, Y+5	; 0x05
    214a:	fc 01       	movw	r30, r24
    214c:	e2 0f       	add	r30, r18
    214e:	f3 1f       	adc	r31, r19
    2150:	80 81       	ld	r24, Z
    2152:	9a e0       	ldi	r25, 0x0A	; 10
    2154:	69 2f       	mov	r22, r25
    2156:	0e 94 3d 29 	call	0x527a	; 0x527a <__udivmodqi4>
    215a:	89 2f       	mov	r24, r25
    215c:	8a 83       	std	Y+2, r24	; 0x02
				Local_port =(ConfigPtr[i].Port_PinNumber)/10 ;
    215e:	8b 81       	ldd	r24, Y+3	; 0x03
    2160:	88 2f       	mov	r24, r24
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	9c 01       	movw	r18, r24
    2166:	22 0f       	add	r18, r18
    2168:	33 1f       	adc	r19, r19
    216a:	22 0f       	add	r18, r18
    216c:	33 1f       	adc	r19, r19
    216e:	8c 81       	ldd	r24, Y+4	; 0x04
    2170:	9d 81       	ldd	r25, Y+5	; 0x05
    2172:	fc 01       	movw	r30, r24
    2174:	e2 0f       	add	r30, r18
    2176:	f3 1f       	adc	r31, r19
    2178:	80 81       	ld	r24, Z
    217a:	9a e0       	ldi	r25, 0x0A	; 10
    217c:	69 2f       	mov	r22, r25
    217e:	0e 94 3d 29 	call	0x527a	; 0x527a <__udivmodqi4>
    2182:	89 83       	std	Y+1, r24	; 0x01
				// step1 : set direction
				if(ConfigPtr[i].Port_PinDirection == PORT_PINDIR_INPUT || ConfigPtr[i].Port_PinDirection ==PORT_PINDIR_OUTPUT)
    2184:	8b 81       	ldd	r24, Y+3	; 0x03
    2186:	88 2f       	mov	r24, r24
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	9c 01       	movw	r18, r24
    218c:	22 0f       	add	r18, r18
    218e:	33 1f       	adc	r19, r19
    2190:	22 0f       	add	r18, r18
    2192:	33 1f       	adc	r19, r19
    2194:	8c 81       	ldd	r24, Y+4	; 0x04
    2196:	9d 81       	ldd	r25, Y+5	; 0x05
    2198:	fc 01       	movw	r30, r24
    219a:	e2 0f       	add	r30, r18
    219c:	f3 1f       	adc	r31, r19
    219e:	82 81       	ldd	r24, Z+2	; 0x02
    21a0:	88 23       	and	r24, r24
    21a2:	89 f0       	breq	.+34     	; 0x21c6 <Port_Init+0xb6>
    21a4:	8b 81       	ldd	r24, Y+3	; 0x03
    21a6:	88 2f       	mov	r24, r24
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	9c 01       	movw	r18, r24
    21ac:	22 0f       	add	r18, r18
    21ae:	33 1f       	adc	r19, r19
    21b0:	22 0f       	add	r18, r18
    21b2:	33 1f       	adc	r19, r19
    21b4:	8c 81       	ldd	r24, Y+4	; 0x04
    21b6:	9d 81       	ldd	r25, Y+5	; 0x05
    21b8:	fc 01       	movw	r30, r24
    21ba:	e2 0f       	add	r30, r18
    21bc:	f3 1f       	adc	r31, r19
    21be:	82 81       	ldd	r24, Z+2	; 0x02
    21c0:	81 30       	cpi	r24, 0x01	; 1
    21c2:	09 f0       	breq	.+2      	; 0x21c6 <Port_Init+0xb6>
    21c4:	00 c2       	rjmp	.+1024   	; 0x25c6 <Port_Init+0x4b6>
				{
					switch(Local_port)
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
    21c8:	28 2f       	mov	r18, r24
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	3b 87       	std	Y+11, r19	; 0x0b
    21ce:	2a 87       	std	Y+10, r18	; 0x0a
    21d0:	6a 85       	ldd	r22, Y+10	; 0x0a
    21d2:	7b 85       	ldd	r23, Y+11	; 0x0b
    21d4:	62 30       	cpi	r22, 0x02	; 2
    21d6:	71 05       	cpc	r23, r1
    21d8:	d1 f1       	breq	.+116    	; 0x224e <Port_Init+0x13e>
    21da:	8a 85       	ldd	r24, Y+10	; 0x0a
    21dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    21de:	83 30       	cpi	r24, 0x03	; 3
    21e0:	91 05       	cpc	r25, r1
    21e2:	34 f4       	brge	.+12     	; 0x21f0 <Port_Init+0xe0>
    21e4:	2a 85       	ldd	r18, Y+10	; 0x0a
    21e6:	3b 85       	ldd	r19, Y+11	; 0x0b
    21e8:	21 30       	cpi	r18, 0x01	; 1
    21ea:	31 05       	cpc	r19, r1
    21ec:	71 f0       	breq	.+28     	; 0x220a <Port_Init+0xfa>
    21ee:	94 c0       	rjmp	.+296    	; 0x2318 <Port_Init+0x208>
    21f0:	6a 85       	ldd	r22, Y+10	; 0x0a
    21f2:	7b 85       	ldd	r23, Y+11	; 0x0b
    21f4:	63 30       	cpi	r22, 0x03	; 3
    21f6:	71 05       	cpc	r23, r1
    21f8:	09 f4       	brne	.+2      	; 0x21fc <Port_Init+0xec>
    21fa:	4b c0       	rjmp	.+150    	; 0x2292 <Port_Init+0x182>
    21fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    21fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2200:	84 30       	cpi	r24, 0x04	; 4
    2202:	91 05       	cpc	r25, r1
    2204:	09 f4       	brne	.+2      	; 0x2208 <Port_Init+0xf8>
    2206:	67 c0       	rjmp	.+206    	; 0x22d6 <Port_Init+0x1c6>
    2208:	87 c0       	rjmp	.+270    	; 0x2318 <Port_Init+0x208>
					{
					case PORT_PORTA:DDRA_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    220a:	aa e3       	ldi	r26, 0x3A	; 58
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	ea e3       	ldi	r30, 0x3A	; 58
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	40 81       	ld	r20, Z
    2214:	8b 81       	ldd	r24, Y+3	; 0x03
    2216:	88 2f       	mov	r24, r24
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	9c 01       	movw	r18, r24
    221c:	22 0f       	add	r18, r18
    221e:	33 1f       	adc	r19, r19
    2220:	22 0f       	add	r18, r18
    2222:	33 1f       	adc	r19, r19
    2224:	8c 81       	ldd	r24, Y+4	; 0x04
    2226:	9d 81       	ldd	r25, Y+5	; 0x05
    2228:	fc 01       	movw	r30, r24
    222a:	e2 0f       	add	r30, r18
    222c:	f3 1f       	adc	r31, r19
    222e:	82 81       	ldd	r24, Z+2	; 0x02
    2230:	28 2f       	mov	r18, r24
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	8a 81       	ldd	r24, Y+2	; 0x02
    2236:	88 2f       	mov	r24, r24
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	b9 01       	movw	r22, r18
    223c:	02 c0       	rjmp	.+4      	; 0x2242 <Port_Init+0x132>
    223e:	66 0f       	add	r22, r22
    2240:	77 1f       	adc	r23, r23
    2242:	8a 95       	dec	r24
    2244:	e2 f7       	brpl	.-8      	; 0x223e <Port_Init+0x12e>
    2246:	cb 01       	movw	r24, r22
    2248:	84 2b       	or	r24, r20
    224a:	8c 93       	st	X, r24
    224c:	65 c0       	rjmp	.+202    	; 0x2318 <Port_Init+0x208>
					case PORT_PORTB:DDRB_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    224e:	a7 e3       	ldi	r26, 0x37	; 55
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	e7 e3       	ldi	r30, 0x37	; 55
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	40 81       	ld	r20, Z
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	88 2f       	mov	r24, r24
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	9c 01       	movw	r18, r24
    2260:	22 0f       	add	r18, r18
    2262:	33 1f       	adc	r19, r19
    2264:	22 0f       	add	r18, r18
    2266:	33 1f       	adc	r19, r19
    2268:	8c 81       	ldd	r24, Y+4	; 0x04
    226a:	9d 81       	ldd	r25, Y+5	; 0x05
    226c:	fc 01       	movw	r30, r24
    226e:	e2 0f       	add	r30, r18
    2270:	f3 1f       	adc	r31, r19
    2272:	82 81       	ldd	r24, Z+2	; 0x02
    2274:	28 2f       	mov	r18, r24
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	8a 81       	ldd	r24, Y+2	; 0x02
    227a:	88 2f       	mov	r24, r24
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	b9 01       	movw	r22, r18
    2280:	02 c0       	rjmp	.+4      	; 0x2286 <Port_Init+0x176>
    2282:	66 0f       	add	r22, r22
    2284:	77 1f       	adc	r23, r23
    2286:	8a 95       	dec	r24
    2288:	e2 f7       	brpl	.-8      	; 0x2282 <Port_Init+0x172>
    228a:	cb 01       	movw	r24, r22
    228c:	84 2b       	or	r24, r20
    228e:	8c 93       	st	X, r24
    2290:	43 c0       	rjmp	.+134    	; 0x2318 <Port_Init+0x208>
					case PORT_PORTC:DDRC_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    2292:	a4 e3       	ldi	r26, 0x34	; 52
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	e4 e3       	ldi	r30, 0x34	; 52
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	40 81       	ld	r20, Z
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	88 2f       	mov	r24, r24
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	9c 01       	movw	r18, r24
    22a4:	22 0f       	add	r18, r18
    22a6:	33 1f       	adc	r19, r19
    22a8:	22 0f       	add	r18, r18
    22aa:	33 1f       	adc	r19, r19
    22ac:	8c 81       	ldd	r24, Y+4	; 0x04
    22ae:	9d 81       	ldd	r25, Y+5	; 0x05
    22b0:	fc 01       	movw	r30, r24
    22b2:	e2 0f       	add	r30, r18
    22b4:	f3 1f       	adc	r31, r19
    22b6:	82 81       	ldd	r24, Z+2	; 0x02
    22b8:	28 2f       	mov	r18, r24
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	8a 81       	ldd	r24, Y+2	; 0x02
    22be:	88 2f       	mov	r24, r24
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	b9 01       	movw	r22, r18
    22c4:	02 c0       	rjmp	.+4      	; 0x22ca <Port_Init+0x1ba>
    22c6:	66 0f       	add	r22, r22
    22c8:	77 1f       	adc	r23, r23
    22ca:	8a 95       	dec	r24
    22cc:	e2 f7       	brpl	.-8      	; 0x22c6 <Port_Init+0x1b6>
    22ce:	cb 01       	movw	r24, r22
    22d0:	84 2b       	or	r24, r20
    22d2:	8c 93       	st	X, r24
    22d4:	21 c0       	rjmp	.+66     	; 0x2318 <Port_Init+0x208>
					case PORT_PORTD:DDRD_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    22d6:	a1 e3       	ldi	r26, 0x31	; 49
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	e1 e3       	ldi	r30, 0x31	; 49
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	40 81       	ld	r20, Z
    22e0:	8b 81       	ldd	r24, Y+3	; 0x03
    22e2:	88 2f       	mov	r24, r24
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	9c 01       	movw	r18, r24
    22e8:	22 0f       	add	r18, r18
    22ea:	33 1f       	adc	r19, r19
    22ec:	22 0f       	add	r18, r18
    22ee:	33 1f       	adc	r19, r19
    22f0:	8c 81       	ldd	r24, Y+4	; 0x04
    22f2:	9d 81       	ldd	r25, Y+5	; 0x05
    22f4:	fc 01       	movw	r30, r24
    22f6:	e2 0f       	add	r30, r18
    22f8:	f3 1f       	adc	r31, r19
    22fa:	82 81       	ldd	r24, Z+2	; 0x02
    22fc:	28 2f       	mov	r18, r24
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	8a 81       	ldd	r24, Y+2	; 0x02
    2302:	88 2f       	mov	r24, r24
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	b9 01       	movw	r22, r18
    2308:	02 c0       	rjmp	.+4      	; 0x230e <Port_Init+0x1fe>
    230a:	66 0f       	add	r22, r22
    230c:	77 1f       	adc	r23, r23
    230e:	8a 95       	dec	r24
    2310:	e2 f7       	brpl	.-8      	; 0x230a <Port_Init+0x1fa>
    2312:	cb 01       	movw	r24, r22
    2314:	84 2b       	or	r24, r20
    2316:	8c 93       	st	X, r24

					}
					// step 2 : config initial pin value
					if(ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_LOW || ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_HIGH)
    2318:	8b 81       	ldd	r24, Y+3	; 0x03
    231a:	88 2f       	mov	r24, r24
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	9c 01       	movw	r18, r24
    2320:	22 0f       	add	r18, r18
    2322:	33 1f       	adc	r19, r19
    2324:	22 0f       	add	r18, r18
    2326:	33 1f       	adc	r19, r19
    2328:	8c 81       	ldd	r24, Y+4	; 0x04
    232a:	9d 81       	ldd	r25, Y+5	; 0x05
    232c:	fc 01       	movw	r30, r24
    232e:	e2 0f       	add	r30, r18
    2330:	f3 1f       	adc	r31, r19
    2332:	81 81       	ldd	r24, Z+1	; 0x01
    2334:	88 23       	and	r24, r24
    2336:	89 f0       	breq	.+34     	; 0x235a <Port_Init+0x24a>
    2338:	8b 81       	ldd	r24, Y+3	; 0x03
    233a:	88 2f       	mov	r24, r24
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	9c 01       	movw	r18, r24
    2340:	22 0f       	add	r18, r18
    2342:	33 1f       	adc	r19, r19
    2344:	22 0f       	add	r18, r18
    2346:	33 1f       	adc	r19, r19
    2348:	8c 81       	ldd	r24, Y+4	; 0x04
    234a:	9d 81       	ldd	r25, Y+5	; 0x05
    234c:	fc 01       	movw	r30, r24
    234e:	e2 0f       	add	r30, r18
    2350:	f3 1f       	adc	r31, r19
    2352:	81 81       	ldd	r24, Z+1	; 0x01
    2354:	81 30       	cpi	r24, 0x01	; 1
    2356:	09 f0       	breq	.+2      	; 0x235a <Port_Init+0x24a>
    2358:	36 c1       	rjmp	.+620    	; 0x25c6 <Port_Init+0x4b6>
					{
						switch(Local_port)
    235a:	89 81       	ldd	r24, Y+1	; 0x01
    235c:	28 2f       	mov	r18, r24
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	39 87       	std	Y+9, r19	; 0x09
    2362:	28 87       	std	Y+8, r18	; 0x08
    2364:	68 85       	ldd	r22, Y+8	; 0x08
    2366:	79 85       	ldd	r23, Y+9	; 0x09
    2368:	62 30       	cpi	r22, 0x02	; 2
    236a:	71 05       	cpc	r23, r1
    236c:	d1 f1       	breq	.+116    	; 0x23e2 <Port_Init+0x2d2>
    236e:	88 85       	ldd	r24, Y+8	; 0x08
    2370:	99 85       	ldd	r25, Y+9	; 0x09
    2372:	83 30       	cpi	r24, 0x03	; 3
    2374:	91 05       	cpc	r25, r1
    2376:	34 f4       	brge	.+12     	; 0x2384 <Port_Init+0x274>
    2378:	28 85       	ldd	r18, Y+8	; 0x08
    237a:	39 85       	ldd	r19, Y+9	; 0x09
    237c:	21 30       	cpi	r18, 0x01	; 1
    237e:	31 05       	cpc	r19, r1
    2380:	71 f0       	breq	.+28     	; 0x239e <Port_Init+0x28e>
    2382:	94 c0       	rjmp	.+296    	; 0x24ac <Port_Init+0x39c>
    2384:	68 85       	ldd	r22, Y+8	; 0x08
    2386:	79 85       	ldd	r23, Y+9	; 0x09
    2388:	63 30       	cpi	r22, 0x03	; 3
    238a:	71 05       	cpc	r23, r1
    238c:	09 f4       	brne	.+2      	; 0x2390 <Port_Init+0x280>
    238e:	4b c0       	rjmp	.+150    	; 0x2426 <Port_Init+0x316>
    2390:	88 85       	ldd	r24, Y+8	; 0x08
    2392:	99 85       	ldd	r25, Y+9	; 0x09
    2394:	84 30       	cpi	r24, 0x04	; 4
    2396:	91 05       	cpc	r25, r1
    2398:	09 f4       	brne	.+2      	; 0x239c <Port_Init+0x28c>
    239a:	67 c0       	rjmp	.+206    	; 0x246a <Port_Init+0x35a>
    239c:	87 c0       	rjmp	.+270    	; 0x24ac <Port_Init+0x39c>
						{
						case PORT_PORTA:  PORTA_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    239e:	ab e3       	ldi	r26, 0x3B	; 59
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	eb e3       	ldi	r30, 0x3B	; 59
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	40 81       	ld	r20, Z
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	88 2f       	mov	r24, r24
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	9c 01       	movw	r18, r24
    23b0:	22 0f       	add	r18, r18
    23b2:	33 1f       	adc	r19, r19
    23b4:	22 0f       	add	r18, r18
    23b6:	33 1f       	adc	r19, r19
    23b8:	8c 81       	ldd	r24, Y+4	; 0x04
    23ba:	9d 81       	ldd	r25, Y+5	; 0x05
    23bc:	fc 01       	movw	r30, r24
    23be:	e2 0f       	add	r30, r18
    23c0:	f3 1f       	adc	r31, r19
    23c2:	81 81       	ldd	r24, Z+1	; 0x01
    23c4:	28 2f       	mov	r18, r24
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ca:	88 2f       	mov	r24, r24
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	b9 01       	movw	r22, r18
    23d0:	02 c0       	rjmp	.+4      	; 0x23d6 <Port_Init+0x2c6>
    23d2:	66 0f       	add	r22, r22
    23d4:	77 1f       	adc	r23, r23
    23d6:	8a 95       	dec	r24
    23d8:	e2 f7       	brpl	.-8      	; 0x23d2 <Port_Init+0x2c2>
    23da:	cb 01       	movw	r24, r22
    23dc:	84 2b       	or	r24, r20
    23de:	8c 93       	st	X, r24
    23e0:	65 c0       	rjmp	.+202    	; 0x24ac <Port_Init+0x39c>
						case PORT_PORTB:  PORTB_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    23e2:	a8 e3       	ldi	r26, 0x38	; 56
    23e4:	b0 e0       	ldi	r27, 0x00	; 0
    23e6:	e8 e3       	ldi	r30, 0x38	; 56
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	40 81       	ld	r20, Z
    23ec:	8b 81       	ldd	r24, Y+3	; 0x03
    23ee:	88 2f       	mov	r24, r24
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	9c 01       	movw	r18, r24
    23f4:	22 0f       	add	r18, r18
    23f6:	33 1f       	adc	r19, r19
    23f8:	22 0f       	add	r18, r18
    23fa:	33 1f       	adc	r19, r19
    23fc:	8c 81       	ldd	r24, Y+4	; 0x04
    23fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2400:	fc 01       	movw	r30, r24
    2402:	e2 0f       	add	r30, r18
    2404:	f3 1f       	adc	r31, r19
    2406:	81 81       	ldd	r24, Z+1	; 0x01
    2408:	28 2f       	mov	r18, r24
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	8a 81       	ldd	r24, Y+2	; 0x02
    240e:	88 2f       	mov	r24, r24
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	b9 01       	movw	r22, r18
    2414:	02 c0       	rjmp	.+4      	; 0x241a <Port_Init+0x30a>
    2416:	66 0f       	add	r22, r22
    2418:	77 1f       	adc	r23, r23
    241a:	8a 95       	dec	r24
    241c:	e2 f7       	brpl	.-8      	; 0x2416 <Port_Init+0x306>
    241e:	cb 01       	movw	r24, r22
    2420:	84 2b       	or	r24, r20
    2422:	8c 93       	st	X, r24
    2424:	43 c0       	rjmp	.+134    	; 0x24ac <Port_Init+0x39c>
						case PORT_PORTC:  PORTC_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    2426:	a5 e3       	ldi	r26, 0x35	; 53
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	e5 e3       	ldi	r30, 0x35	; 53
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	40 81       	ld	r20, Z
    2430:	8b 81       	ldd	r24, Y+3	; 0x03
    2432:	88 2f       	mov	r24, r24
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	9c 01       	movw	r18, r24
    2438:	22 0f       	add	r18, r18
    243a:	33 1f       	adc	r19, r19
    243c:	22 0f       	add	r18, r18
    243e:	33 1f       	adc	r19, r19
    2440:	8c 81       	ldd	r24, Y+4	; 0x04
    2442:	9d 81       	ldd	r25, Y+5	; 0x05
    2444:	fc 01       	movw	r30, r24
    2446:	e2 0f       	add	r30, r18
    2448:	f3 1f       	adc	r31, r19
    244a:	81 81       	ldd	r24, Z+1	; 0x01
    244c:	28 2f       	mov	r18, r24
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	8a 81       	ldd	r24, Y+2	; 0x02
    2452:	88 2f       	mov	r24, r24
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	b9 01       	movw	r22, r18
    2458:	02 c0       	rjmp	.+4      	; 0x245e <Port_Init+0x34e>
    245a:	66 0f       	add	r22, r22
    245c:	77 1f       	adc	r23, r23
    245e:	8a 95       	dec	r24
    2460:	e2 f7       	brpl	.-8      	; 0x245a <Port_Init+0x34a>
    2462:	cb 01       	movw	r24, r22
    2464:	84 2b       	or	r24, r20
    2466:	8c 93       	st	X, r24
    2468:	21 c0       	rjmp	.+66     	; 0x24ac <Port_Init+0x39c>
						case PORT_PORTD:  PORTD_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    246a:	a2 e3       	ldi	r26, 0x32	; 50
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	e2 e3       	ldi	r30, 0x32	; 50
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	40 81       	ld	r20, Z
    2474:	8b 81       	ldd	r24, Y+3	; 0x03
    2476:	88 2f       	mov	r24, r24
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	9c 01       	movw	r18, r24
    247c:	22 0f       	add	r18, r18
    247e:	33 1f       	adc	r19, r19
    2480:	22 0f       	add	r18, r18
    2482:	33 1f       	adc	r19, r19
    2484:	8c 81       	ldd	r24, Y+4	; 0x04
    2486:	9d 81       	ldd	r25, Y+5	; 0x05
    2488:	fc 01       	movw	r30, r24
    248a:	e2 0f       	add	r30, r18
    248c:	f3 1f       	adc	r31, r19
    248e:	81 81       	ldd	r24, Z+1	; 0x01
    2490:	28 2f       	mov	r18, r24
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	8a 81       	ldd	r24, Y+2	; 0x02
    2496:	88 2f       	mov	r24, r24
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	b9 01       	movw	r22, r18
    249c:	02 c0       	rjmp	.+4      	; 0x24a2 <Port_Init+0x392>
    249e:	66 0f       	add	r22, r22
    24a0:	77 1f       	adc	r23, r23
    24a2:	8a 95       	dec	r24
    24a4:	e2 f7       	brpl	.-8      	; 0x249e <Port_Init+0x38e>
    24a6:	cb 01       	movw	r24, r22
    24a8:	84 2b       	or	r24, r20
    24aa:	8c 93       	st	X, r24

						}
						// step 3 : config Pin Internal Attach
						if(ConfigPtr[i].Port_PinDirection==PORT_PINDIR_OUTPUT && ConfigPtr[i].Port_PinInternalAttach == PORT_PIN_IN_ATTATCH_PULLUP)
    24ac:	8b 81       	ldd	r24, Y+3	; 0x03
    24ae:	88 2f       	mov	r24, r24
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	9c 01       	movw	r18, r24
    24b4:	22 0f       	add	r18, r18
    24b6:	33 1f       	adc	r19, r19
    24b8:	22 0f       	add	r18, r18
    24ba:	33 1f       	adc	r19, r19
    24bc:	8c 81       	ldd	r24, Y+4	; 0x04
    24be:	9d 81       	ldd	r25, Y+5	; 0x05
    24c0:	fc 01       	movw	r30, r24
    24c2:	e2 0f       	add	r30, r18
    24c4:	f3 1f       	adc	r31, r19
    24c6:	82 81       	ldd	r24, Z+2	; 0x02
    24c8:	81 30       	cpi	r24, 0x01	; 1
    24ca:	09 f0       	breq	.+2      	; 0x24ce <Port_Init+0x3be>
    24cc:	7c c0       	rjmp	.+248    	; 0x25c6 <Port_Init+0x4b6>
    24ce:	8b 81       	ldd	r24, Y+3	; 0x03
    24d0:	88 2f       	mov	r24, r24
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	9c 01       	movw	r18, r24
    24d6:	22 0f       	add	r18, r18
    24d8:	33 1f       	adc	r19, r19
    24da:	22 0f       	add	r18, r18
    24dc:	33 1f       	adc	r19, r19
    24de:	8c 81       	ldd	r24, Y+4	; 0x04
    24e0:	9d 81       	ldd	r25, Y+5	; 0x05
    24e2:	fc 01       	movw	r30, r24
    24e4:	e2 0f       	add	r30, r18
    24e6:	f3 1f       	adc	r31, r19
    24e8:	83 81       	ldd	r24, Z+3	; 0x03
    24ea:	88 23       	and	r24, r24
    24ec:	09 f0       	breq	.+2      	; 0x24f0 <Port_Init+0x3e0>
    24ee:	6b c0       	rjmp	.+214    	; 0x25c6 <Port_Init+0x4b6>
						{
							switch(Local_port)
    24f0:	89 81       	ldd	r24, Y+1	; 0x01
    24f2:	28 2f       	mov	r18, r24
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	3f 83       	std	Y+7, r19	; 0x07
    24f8:	2e 83       	std	Y+6, r18	; 0x06
    24fa:	6e 81       	ldd	r22, Y+6	; 0x06
    24fc:	7f 81       	ldd	r23, Y+7	; 0x07
    24fe:	62 30       	cpi	r22, 0x02	; 2
    2500:	71 05       	cpc	r23, r1
    2502:	49 f1       	breq	.+82     	; 0x2556 <Port_Init+0x446>
    2504:	8e 81       	ldd	r24, Y+6	; 0x06
    2506:	9f 81       	ldd	r25, Y+7	; 0x07
    2508:	83 30       	cpi	r24, 0x03	; 3
    250a:	91 05       	cpc	r25, r1
    250c:	34 f4       	brge	.+12     	; 0x251a <Port_Init+0x40a>
    250e:	2e 81       	ldd	r18, Y+6	; 0x06
    2510:	3f 81       	ldd	r19, Y+7	; 0x07
    2512:	21 30       	cpi	r18, 0x01	; 1
    2514:	31 05       	cpc	r19, r1
    2516:	61 f0       	breq	.+24     	; 0x2530 <Port_Init+0x420>
    2518:	56 c0       	rjmp	.+172    	; 0x25c6 <Port_Init+0x4b6>
    251a:	6e 81       	ldd	r22, Y+6	; 0x06
    251c:	7f 81       	ldd	r23, Y+7	; 0x07
    251e:	63 30       	cpi	r22, 0x03	; 3
    2520:	71 05       	cpc	r23, r1
    2522:	61 f1       	breq	.+88     	; 0x257c <Port_Init+0x46c>
    2524:	8e 81       	ldd	r24, Y+6	; 0x06
    2526:	9f 81       	ldd	r25, Y+7	; 0x07
    2528:	84 30       	cpi	r24, 0x04	; 4
    252a:	91 05       	cpc	r25, r1
    252c:	d1 f1       	breq	.+116    	; 0x25a2 <Port_Init+0x492>
    252e:	4b c0       	rjmp	.+150    	; 0x25c6 <Port_Init+0x4b6>
							{
							case PORT_PORTA:PORTA_REG |= (u8)(1<< Local_pin);break;
    2530:	ab e3       	ldi	r26, 0x3B	; 59
    2532:	b0 e0       	ldi	r27, 0x00	; 0
    2534:	eb e3       	ldi	r30, 0x3B	; 59
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	40 81       	ld	r20, Z
    253a:	8a 81       	ldd	r24, Y+2	; 0x02
    253c:	28 2f       	mov	r18, r24
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	02 2e       	mov	r0, r18
    2546:	02 c0       	rjmp	.+4      	; 0x254c <Port_Init+0x43c>
    2548:	88 0f       	add	r24, r24
    254a:	99 1f       	adc	r25, r25
    254c:	0a 94       	dec	r0
    254e:	e2 f7       	brpl	.-8      	; 0x2548 <Port_Init+0x438>
    2550:	84 2b       	or	r24, r20
    2552:	8c 93       	st	X, r24
    2554:	38 c0       	rjmp	.+112    	; 0x25c6 <Port_Init+0x4b6>
							case PORT_PORTB:PORTB_REG |= (u8)(1<< Local_pin);break;
    2556:	a8 e3       	ldi	r26, 0x38	; 56
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	e8 e3       	ldi	r30, 0x38	; 56
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	40 81       	ld	r20, Z
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	28 2f       	mov	r18, r24
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	02 2e       	mov	r0, r18
    256c:	02 c0       	rjmp	.+4      	; 0x2572 <Port_Init+0x462>
    256e:	88 0f       	add	r24, r24
    2570:	99 1f       	adc	r25, r25
    2572:	0a 94       	dec	r0
    2574:	e2 f7       	brpl	.-8      	; 0x256e <Port_Init+0x45e>
    2576:	84 2b       	or	r24, r20
    2578:	8c 93       	st	X, r24
    257a:	25 c0       	rjmp	.+74     	; 0x25c6 <Port_Init+0x4b6>
							case PORT_PORTC:PORTC_REG |= (u8)(1<< Local_pin);break;
    257c:	a5 e3       	ldi	r26, 0x35	; 53
    257e:	b0 e0       	ldi	r27, 0x00	; 0
    2580:	e5 e3       	ldi	r30, 0x35	; 53
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	40 81       	ld	r20, Z
    2586:	8a 81       	ldd	r24, Y+2	; 0x02
    2588:	28 2f       	mov	r18, r24
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	02 2e       	mov	r0, r18
    2592:	02 c0       	rjmp	.+4      	; 0x2598 <Port_Init+0x488>
    2594:	88 0f       	add	r24, r24
    2596:	99 1f       	adc	r25, r25
    2598:	0a 94       	dec	r0
    259a:	e2 f7       	brpl	.-8      	; 0x2594 <Port_Init+0x484>
    259c:	84 2b       	or	r24, r20
    259e:	8c 93       	st	X, r24
    25a0:	12 c0       	rjmp	.+36     	; 0x25c6 <Port_Init+0x4b6>
							case PORT_PORTD:PORTD_REG |= (u8)(1<< Local_pin);break;
    25a2:	a2 e3       	ldi	r26, 0x32	; 50
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	e2 e3       	ldi	r30, 0x32	; 50
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	40 81       	ld	r20, Z
    25ac:	8a 81       	ldd	r24, Y+2	; 0x02
    25ae:	28 2f       	mov	r18, r24
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	02 2e       	mov	r0, r18
    25b8:	02 c0       	rjmp	.+4      	; 0x25be <Port_Init+0x4ae>
    25ba:	88 0f       	add	r24, r24
    25bc:	99 1f       	adc	r25, r25
    25be:	0a 94       	dec	r0
    25c0:	e2 f7       	brpl	.-8      	; 0x25ba <Port_Init+0x4aa>
    25c2:	84 2b       	or	r24, r20
    25c4:	8c 93       	st	X, r24
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<PORT_PINS_CONFIG_ARR_SIZE;i++)
    25c6:	8b 81       	ldd	r24, Y+3	; 0x03
    25c8:	8f 5f       	subi	r24, 0xFF	; 255
    25ca:	8b 83       	std	Y+3, r24	; 0x03
    25cc:	8b 81       	ldd	r24, Y+3	; 0x03
    25ce:	80 32       	cpi	r24, 0x20	; 32
    25d0:	08 f4       	brcc	.+2      	; 0x25d4 <Port_Init+0x4c4>
    25d2:	b1 cd       	rjmp	.-1182   	; 0x2136 <Port_Init+0x26>
					//report error
				}

		    }//for
		}//else
}
    25d4:	2b 96       	adiw	r28, 0x0b	; 11
    25d6:	0f b6       	in	r0, 0x3f	; 63
    25d8:	f8 94       	cli
    25da:	de bf       	out	0x3e, r29	; 62
    25dc:	0f be       	out	0x3f, r0	; 63
    25de:	cd bf       	out	0x3d, r28	; 61
    25e0:	cf 91       	pop	r28
    25e2:	df 91       	pop	r29
    25e4:	08 95       	ret

000025e6 <GIE_voidEnable>:
#include"STD_TYPES.h"
#include"BIT_MATH.h"
#include"../Mcu_HW.h"

void GIE_voidEnable(void)
{
    25e6:	df 93       	push	r29
    25e8:	cf 93       	push	r28
    25ea:	cd b7       	in	r28, 0x3d	; 61
    25ec:	de b7       	in	r29, 0x3e	; 62
	//Enable GIE for External interrupt
	SET_BIT(SREG,SREG_I);
    25ee:	af e5       	ldi	r26, 0x5F	; 95
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	ef e5       	ldi	r30, 0x5F	; 95
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	80 81       	ld	r24, Z
    25f8:	80 68       	ori	r24, 0x80	; 128
    25fa:	8c 93       	st	X, r24
}
    25fc:	cf 91       	pop	r28
    25fe:	df 91       	pop	r29
    2600:	08 95       	ret

00002602 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    2602:	df 93       	push	r29
    2604:	cf 93       	push	r28
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62
	//Disable GIE for external Interrupt
	CLR_BIT(SREG,SREG_I);
    260a:	af e5       	ldi	r26, 0x5F	; 95
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	ef e5       	ldi	r30, 0x5F	; 95
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	8f 77       	andi	r24, 0x7F	; 127
    2616:	8c 93       	st	X, r24
}
    2618:	cf 91       	pop	r28
    261a:	df 91       	pop	r29
    261c:	08 95       	ret

0000261e <Enable_Int>:
 */
static void (*EXTI_ARRCALLBACK2FUNC[3])(void) ={NULL_POINTER,NULL_POINTER,NULL_POINTER};


void Enable_Int(const EXT_I * ConfigArr)
{
    261e:	df 93       	push	r29
    2620:	cf 93       	push	r28
    2622:	cd b7       	in	r28, 0x3d	; 61
    2624:	de b7       	in	r29, 0x3e	; 62
    2626:	2b 97       	sbiw	r28, 0x0b	; 11
    2628:	0f b6       	in	r0, 0x3f	; 63
    262a:	f8 94       	cli
    262c:	de bf       	out	0x3e, r29	; 62
    262e:	0f be       	out	0x3f, r0	; 63
    2630:	cd bf       	out	0x3d, r28	; 61
    2632:	9b 83       	std	Y+3, r25	; 0x03
    2634:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter;
	for(Local_u8Counter=0;Local_u8Counter<3;Local_u8Counter++)
    2636:	19 82       	std	Y+1, r1	; 0x01
    2638:	0e c1       	rjmp	.+540    	; 0x2856 <Enable_Int+0x238>
	{
		switch(ConfigArr[Local_u8Counter].Interrupt_ID)
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	88 2f       	mov	r24, r24
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	9c 01       	movw	r18, r24
    2642:	22 0f       	add	r18, r18
    2644:	33 1f       	adc	r19, r19
    2646:	8a 81       	ldd	r24, Y+2	; 0x02
    2648:	9b 81       	ldd	r25, Y+3	; 0x03
    264a:	fc 01       	movw	r30, r24
    264c:	e2 0f       	add	r30, r18
    264e:	f3 1f       	adc	r31, r19
    2650:	80 81       	ld	r24, Z
    2652:	28 2f       	mov	r18, r24
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	3b 87       	std	Y+11, r19	; 0x0b
    2658:	2a 87       	std	Y+10, r18	; 0x0a
    265a:	8a 85       	ldd	r24, Y+10	; 0x0a
    265c:	9b 85       	ldd	r25, Y+11	; 0x0b
    265e:	81 30       	cpi	r24, 0x01	; 1
    2660:	91 05       	cpc	r25, r1
    2662:	09 f4       	brne	.+2      	; 0x2666 <Enable_Int+0x48>
    2664:	4a c0       	rjmp	.+148    	; 0x26fa <Enable_Int+0xdc>
    2666:	2a 85       	ldd	r18, Y+10	; 0x0a
    2668:	3b 85       	ldd	r19, Y+11	; 0x0b
    266a:	22 30       	cpi	r18, 0x02	; 2
    266c:	31 05       	cpc	r19, r1
    266e:	09 f4       	brne	.+2      	; 0x2672 <Enable_Int+0x54>
    2670:	b1 c0       	rjmp	.+354    	; 0x27d4 <Enable_Int+0x1b6>
    2672:	8a 85       	ldd	r24, Y+10	; 0x0a
    2674:	9b 85       	ldd	r25, Y+11	; 0x0b
    2676:	00 97       	sbiw	r24, 0x00	; 0
    2678:	09 f0       	breq	.+2      	; 0x267c <Enable_Int+0x5e>
    267a:	ea c0       	rjmp	.+468    	; 0x2850 <Enable_Int+0x232>
		{
		case EXTI0:
			switch(ConfigArr[Local_u8Counter].Trigger_value)
    267c:	89 81       	ldd	r24, Y+1	; 0x01
    267e:	88 2f       	mov	r24, r24
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	9c 01       	movw	r18, r24
    2684:	22 0f       	add	r18, r18
    2686:	33 1f       	adc	r19, r19
    2688:	8a 81       	ldd	r24, Y+2	; 0x02
    268a:	9b 81       	ldd	r25, Y+3	; 0x03
    268c:	fc 01       	movw	r30, r24
    268e:	e2 0f       	add	r30, r18
    2690:	f3 1f       	adc	r31, r19
    2692:	81 81       	ldd	r24, Z+1	; 0x01
    2694:	28 2f       	mov	r18, r24
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	39 87       	std	Y+9, r19	; 0x09
    269a:	28 87       	std	Y+8, r18	; 0x08
    269c:	88 85       	ldd	r24, Y+8	; 0x08
    269e:	99 85       	ldd	r25, Y+9	; 0x09
    26a0:	00 97       	sbiw	r24, 0x00	; 0
    26a2:	31 f0       	breq	.+12     	; 0x26b0 <Enable_Int+0x92>
    26a4:	28 85       	ldd	r18, Y+8	; 0x08
    26a6:	39 85       	ldd	r19, Y+9	; 0x09
    26a8:	21 30       	cpi	r18, 0x01	; 1
    26aa:	31 05       	cpc	r19, r1
    26ac:	81 f0       	breq	.+32     	; 0x26ce <Enable_Int+0xb0>
    26ae:	1d c0       	rjmp	.+58     	; 0x26ea <Enable_Int+0xcc>
			{
			case Low_level:
				/*set sense control for INT0 To Low level*/
				CLR_BIT(MCUCR,MCUCR_ISC01);
    26b0:	a5 e5       	ldi	r26, 0x55	; 85
    26b2:	b0 e0       	ldi	r27, 0x00	; 0
    26b4:	e5 e5       	ldi	r30, 0x55	; 85
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	80 81       	ld	r24, Z
    26ba:	8d 7f       	andi	r24, 0xFD	; 253
    26bc:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC00);
    26be:	a5 e5       	ldi	r26, 0x55	; 85
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	e5 e5       	ldi	r30, 0x55	; 85
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	80 81       	ld	r24, Z
    26c8:	8e 7f       	andi	r24, 0xFE	; 254
    26ca:	8c 93       	st	X, r24
    26cc:	0e c0       	rjmp	.+28     	; 0x26ea <Enable_Int+0xcc>
				break;
			case On_change:
				/*set sense control for INT0 To On change*/
				CLR_BIT(MCUCR,MCUCR_ISC01);
    26ce:	a5 e5       	ldi	r26, 0x55	; 85
    26d0:	b0 e0       	ldi	r27, 0x00	; 0
    26d2:	e5 e5       	ldi	r30, 0x55	; 85
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	80 81       	ld	r24, Z
    26d8:	8d 7f       	andi	r24, 0xFD	; 253
    26da:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC00);
    26dc:	a5 e5       	ldi	r26, 0x55	; 85
    26de:	b0 e0       	ldi	r27, 0x00	; 0
    26e0:	e5 e5       	ldi	r30, 0x55	; 85
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	81 60       	ori	r24, 0x01	; 1
    26e8:	8c 93       	st	X, r24
				break;
			default:
				break;
			}
			/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER ENABLE BIT6*/
			SET_BIT(GICR,GICR_INT0);
    26ea:	ab e5       	ldi	r26, 0x5B	; 91
    26ec:	b0 e0       	ldi	r27, 0x00	; 0
    26ee:	eb e5       	ldi	r30, 0x5B	; 91
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	80 81       	ld	r24, Z
    26f4:	80 64       	ori	r24, 0x40	; 64
    26f6:	8c 93       	st	X, r24
    26f8:	ab c0       	rjmp	.+342    	; 0x2850 <Enable_Int+0x232>
			break;
			case EXTI1:
				switch(ConfigArr[Local_u8Counter].Trigger_value)
    26fa:	89 81       	ldd	r24, Y+1	; 0x01
    26fc:	88 2f       	mov	r24, r24
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	9c 01       	movw	r18, r24
    2702:	22 0f       	add	r18, r18
    2704:	33 1f       	adc	r19, r19
    2706:	8a 81       	ldd	r24, Y+2	; 0x02
    2708:	9b 81       	ldd	r25, Y+3	; 0x03
    270a:	fc 01       	movw	r30, r24
    270c:	e2 0f       	add	r30, r18
    270e:	f3 1f       	adc	r31, r19
    2710:	81 81       	ldd	r24, Z+1	; 0x01
    2712:	28 2f       	mov	r18, r24
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	3f 83       	std	Y+7, r19	; 0x07
    2718:	2e 83       	std	Y+6, r18	; 0x06
    271a:	8e 81       	ldd	r24, Y+6	; 0x06
    271c:	9f 81       	ldd	r25, Y+7	; 0x07
    271e:	81 30       	cpi	r24, 0x01	; 1
    2720:	91 05       	cpc	r25, r1
    2722:	21 f1       	breq	.+72     	; 0x276c <Enable_Int+0x14e>
    2724:	2e 81       	ldd	r18, Y+6	; 0x06
    2726:	3f 81       	ldd	r19, Y+7	; 0x07
    2728:	22 30       	cpi	r18, 0x02	; 2
    272a:	31 05       	cpc	r19, r1
    272c:	2c f4       	brge	.+10     	; 0x2738 <Enable_Int+0x11a>
    272e:	8e 81       	ldd	r24, Y+6	; 0x06
    2730:	9f 81       	ldd	r25, Y+7	; 0x07
    2732:	00 97       	sbiw	r24, 0x00	; 0
    2734:	61 f0       	breq	.+24     	; 0x274e <Enable_Int+0x130>
    2736:	46 c0       	rjmp	.+140    	; 0x27c4 <Enable_Int+0x1a6>
    2738:	2e 81       	ldd	r18, Y+6	; 0x06
    273a:	3f 81       	ldd	r19, Y+7	; 0x07
    273c:	22 30       	cpi	r18, 0x02	; 2
    273e:	31 05       	cpc	r19, r1
    2740:	21 f1       	breq	.+72     	; 0x278a <Enable_Int+0x16c>
    2742:	8e 81       	ldd	r24, Y+6	; 0x06
    2744:	9f 81       	ldd	r25, Y+7	; 0x07
    2746:	83 30       	cpi	r24, 0x03	; 3
    2748:	91 05       	cpc	r25, r1
    274a:	71 f1       	breq	.+92     	; 0x27a8 <Enable_Int+0x18a>
    274c:	3b c0       	rjmp	.+118    	; 0x27c4 <Enable_Int+0x1a6>
				{
				case Low_level:
					/*set sense control for INT0 To falling edge*/
					SET_BIT(MCUCR,MCUCR_ISC01);
    274e:	a5 e5       	ldi	r26, 0x55	; 85
    2750:	b0 e0       	ldi	r27, 0x00	; 0
    2752:	e5 e5       	ldi	r30, 0x55	; 85
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	80 81       	ld	r24, Z
    2758:	82 60       	ori	r24, 0x02	; 2
    275a:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,MCUCR_ISC00);
    275c:	a5 e5       	ldi	r26, 0x55	; 85
    275e:	b0 e0       	ldi	r27, 0x00	; 0
    2760:	e5 e5       	ldi	r30, 0x55	; 85
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	80 81       	ld	r24, Z
    2766:	8e 7f       	andi	r24, 0xFE	; 254
    2768:	8c 93       	st	X, r24
    276a:	2c c0       	rjmp	.+88     	; 0x27c4 <Enable_Int+0x1a6>
					break;
				case On_change:
					/*set sense control for INT0 To On change*/
					CLR_BIT(MCUCR,MCUCR_ISC01);
    276c:	a5 e5       	ldi	r26, 0x55	; 85
    276e:	b0 e0       	ldi	r27, 0x00	; 0
    2770:	e5 e5       	ldi	r30, 0x55	; 85
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	80 81       	ld	r24, Z
    2776:	8d 7f       	andi	r24, 0xFD	; 253
    2778:	8c 93       	st	X, r24
					SET_BIT(MCUCR,MCUCR_ISC00);
    277a:	a5 e5       	ldi	r26, 0x55	; 85
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	e5 e5       	ldi	r30, 0x55	; 85
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	80 81       	ld	r24, Z
    2784:	81 60       	ori	r24, 0x01	; 1
    2786:	8c 93       	st	X, r24
    2788:	1d c0       	rjmp	.+58     	; 0x27c4 <Enable_Int+0x1a6>
					break;
				case Falling_edge:
					/*set sense control for INT0 To falling edge*/
					SET_BIT(MCUCR,MCUCR_ISC01);
    278a:	a5 e5       	ldi	r26, 0x55	; 85
    278c:	b0 e0       	ldi	r27, 0x00	; 0
    278e:	e5 e5       	ldi	r30, 0x55	; 85
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	80 81       	ld	r24, Z
    2794:	82 60       	ori	r24, 0x02	; 2
    2796:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,MCUCR_ISC00);
    2798:	a5 e5       	ldi	r26, 0x55	; 85
    279a:	b0 e0       	ldi	r27, 0x00	; 0
    279c:	e5 e5       	ldi	r30, 0x55	; 85
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	80 81       	ld	r24, Z
    27a2:	8e 7f       	andi	r24, 0xFE	; 254
    27a4:	8c 93       	st	X, r24
    27a6:	0e c0       	rjmp	.+28     	; 0x27c4 <Enable_Int+0x1a6>
					break;
				case Rising_edge:
					/*set sense control for INT0 To Rising edge*/
					SET_BIT(MCUCR,MCUCR_ISC01);
    27a8:	a5 e5       	ldi	r26, 0x55	; 85
    27aa:	b0 e0       	ldi	r27, 0x00	; 0
    27ac:	e5 e5       	ldi	r30, 0x55	; 85
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	80 81       	ld	r24, Z
    27b2:	82 60       	ori	r24, 0x02	; 2
    27b4:	8c 93       	st	X, r24
					SET_BIT(MCUCR,MCUCR_ISC00);
    27b6:	a5 e5       	ldi	r26, 0x55	; 85
    27b8:	b0 e0       	ldi	r27, 0x00	; 0
    27ba:	e5 e5       	ldi	r30, 0x55	; 85
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	80 81       	ld	r24, Z
    27c0:	81 60       	ori	r24, 0x01	; 1
    27c2:	8c 93       	st	X, r24
					break;
				default:
					break;
				}
				/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER ENABLE BIT7*/
				SET_BIT(GICR,GICR_INT1);
    27c4:	ab e5       	ldi	r26, 0x5B	; 91
    27c6:	b0 e0       	ldi	r27, 0x00	; 0
    27c8:	eb e5       	ldi	r30, 0x5B	; 91
    27ca:	f0 e0       	ldi	r31, 0x00	; 0
    27cc:	80 81       	ld	r24, Z
    27ce:	80 68       	ori	r24, 0x80	; 128
    27d0:	8c 93       	st	X, r24
    27d2:	3e c0       	rjmp	.+124    	; 0x2850 <Enable_Int+0x232>
				break;
				case EXTI2:
					switch(ConfigArr[Local_u8Counter].Trigger_value)
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	88 2f       	mov	r24, r24
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	9c 01       	movw	r18, r24
    27dc:	22 0f       	add	r18, r18
    27de:	33 1f       	adc	r19, r19
    27e0:	8a 81       	ldd	r24, Y+2	; 0x02
    27e2:	9b 81       	ldd	r25, Y+3	; 0x03
    27e4:	fc 01       	movw	r30, r24
    27e6:	e2 0f       	add	r30, r18
    27e8:	f3 1f       	adc	r31, r19
    27ea:	81 81       	ldd	r24, Z+1	; 0x01
    27ec:	28 2f       	mov	r18, r24
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	3d 83       	std	Y+5, r19	; 0x05
    27f2:	2c 83       	std	Y+4, r18	; 0x04
    27f4:	8c 81       	ldd	r24, Y+4	; 0x04
    27f6:	9d 81       	ldd	r25, Y+5	; 0x05
    27f8:	00 97       	sbiw	r24, 0x00	; 0
    27fa:	31 f0       	breq	.+12     	; 0x2808 <Enable_Int+0x1ea>
    27fc:	2c 81       	ldd	r18, Y+4	; 0x04
    27fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2800:	21 30       	cpi	r18, 0x01	; 1
    2802:	31 05       	cpc	r19, r1
    2804:	81 f0       	breq	.+32     	; 0x2826 <Enable_Int+0x208>
    2806:	1d c0       	rjmp	.+58     	; 0x2842 <Enable_Int+0x224>
					{
					case Low_level:
						/*set sense control for INT0 To falling edge*/
						SET_BIT(MCUCR,MCUCR_ISC01);
    2808:	a5 e5       	ldi	r26, 0x55	; 85
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	e5 e5       	ldi	r30, 0x55	; 85
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	80 81       	ld	r24, Z
    2812:	82 60       	ori	r24, 0x02	; 2
    2814:	8c 93       	st	X, r24
						CLR_BIT(MCUCR,MCUCR_ISC00);
    2816:	a5 e5       	ldi	r26, 0x55	; 85
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	e5 e5       	ldi	r30, 0x55	; 85
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	8e 7f       	andi	r24, 0xFE	; 254
    2822:	8c 93       	st	X, r24
    2824:	0e c0       	rjmp	.+28     	; 0x2842 <Enable_Int+0x224>
						break;
					case On_change:
						/*set sense control for INT0 To On change*/
						CLR_BIT(MCUCR,MCUCR_ISC01);
    2826:	a5 e5       	ldi	r26, 0x55	; 85
    2828:	b0 e0       	ldi	r27, 0x00	; 0
    282a:	e5 e5       	ldi	r30, 0x55	; 85
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	80 81       	ld	r24, Z
    2830:	8d 7f       	andi	r24, 0xFD	; 253
    2832:	8c 93       	st	X, r24
						SET_BIT(MCUCR,MCUCR_ISC00);
    2834:	a5 e5       	ldi	r26, 0x55	; 85
    2836:	b0 e0       	ldi	r27, 0x00	; 0
    2838:	e5 e5       	ldi	r30, 0x55	; 85
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	80 81       	ld	r24, Z
    283e:	81 60       	ori	r24, 0x01	; 1
    2840:	8c 93       	st	X, r24
						break;
					default:
						break;
					}
					/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER ENABLE BIT5*/
					SET_BIT(GICR,GICR_INT2);
    2842:	ab e5       	ldi	r26, 0x5B	; 91
    2844:	b0 e0       	ldi	r27, 0x00	; 0
    2846:	eb e5       	ldi	r30, 0x5B	; 91
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	80 81       	ld	r24, Z
    284c:	80 62       	ori	r24, 0x20	; 32
    284e:	8c 93       	st	X, r24


void Enable_Int(const EXT_I * ConfigArr)
{
	u8 Local_u8Counter;
	for(Local_u8Counter=0;Local_u8Counter<3;Local_u8Counter++)
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	8f 5f       	subi	r24, 0xFF	; 255
    2854:	89 83       	std	Y+1, r24	; 0x01
    2856:	89 81       	ldd	r24, Y+1	; 0x01
    2858:	83 30       	cpi	r24, 0x03	; 3
    285a:	08 f4       	brcc	.+2      	; 0x285e <Enable_Int+0x240>
    285c:	ee ce       	rjmp	.-548    	; 0x263a <Enable_Int+0x1c>
					SET_BIT(GICR,GICR_INT2);
					break;
		}
	}

}
    285e:	2b 96       	adiw	r28, 0x0b	; 11
    2860:	0f b6       	in	r0, 0x3f	; 63
    2862:	f8 94       	cli
    2864:	de bf       	out	0x3e, r29	; 62
    2866:	0f be       	out	0x3f, r0	; 63
    2868:	cd bf       	out	0x3d, r28	; 61
    286a:	cf 91       	pop	r28
    286c:	df 91       	pop	r29
    286e:	08 95       	ret

00002870 <Disable_Int>:

void Disable_Int(const EXT_I * ConfigArr)
{
    2870:	df 93       	push	r29
    2872:	cf 93       	push	r28
    2874:	00 d0       	rcall	.+0      	; 0x2876 <Disable_Int+0x6>
    2876:	00 d0       	rcall	.+0      	; 0x2878 <Disable_Int+0x8>
    2878:	cd b7       	in	r28, 0x3d	; 61
    287a:	de b7       	in	r29, 0x3e	; 62
    287c:	9a 83       	std	Y+2, r25	; 0x02
    287e:	89 83       	std	Y+1, r24	; 0x01
	switch(ConfigArr->Interrupt_ID)
    2880:	e9 81       	ldd	r30, Y+1	; 0x01
    2882:	fa 81       	ldd	r31, Y+2	; 0x02
    2884:	80 81       	ld	r24, Z
    2886:	28 2f       	mov	r18, r24
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	3c 83       	std	Y+4, r19	; 0x04
    288c:	2b 83       	std	Y+3, r18	; 0x03
    288e:	8b 81       	ldd	r24, Y+3	; 0x03
    2890:	9c 81       	ldd	r25, Y+4	; 0x04
    2892:	81 30       	cpi	r24, 0x01	; 1
    2894:	91 05       	cpc	r25, r1
    2896:	89 f0       	breq	.+34     	; 0x28ba <Disable_Int+0x4a>
    2898:	2b 81       	ldd	r18, Y+3	; 0x03
    289a:	3c 81       	ldd	r19, Y+4	; 0x04
    289c:	22 30       	cpi	r18, 0x02	; 2
    289e:	31 05       	cpc	r19, r1
    28a0:	a1 f0       	breq	.+40     	; 0x28ca <Disable_Int+0x5a>
    28a2:	8b 81       	ldd	r24, Y+3	; 0x03
    28a4:	9c 81       	ldd	r25, Y+4	; 0x04
    28a6:	00 97       	sbiw	r24, 0x00	; 0
    28a8:	b9 f4       	brne	.+46     	; 0x28d8 <Disable_Int+0x68>
	{
	case EXTI0:
		/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER DISABLE BIT6*/
		CLR_BIT(GICR,GICR_INT0);
    28aa:	ab e5       	ldi	r26, 0x5B	; 91
    28ac:	b0 e0       	ldi	r27, 0x00	; 0
    28ae:	eb e5       	ldi	r30, 0x5B	; 91
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	80 81       	ld	r24, Z
    28b4:	8f 7b       	andi	r24, 0xBF	; 191
    28b6:	8c 93       	st	X, r24
    28b8:	0f c0       	rjmp	.+30     	; 0x28d8 <Disable_Int+0x68>
		break;
	case EXTI1:
		/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER DISABLE BIT7*/
		CLR_BIT(GICR,GICR_INT1);
    28ba:	ab e5       	ldi	r26, 0x5B	; 91
    28bc:	b0 e0       	ldi	r27, 0x00	; 0
    28be:	eb e5       	ldi	r30, 0x5B	; 91
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	80 81       	ld	r24, Z
    28c4:	8f 77       	andi	r24, 0x7F	; 127
    28c6:	8c 93       	st	X, r24
    28c8:	07 c0       	rjmp	.+14     	; 0x28d8 <Disable_Int+0x68>
		break;
	case EXTI2:
		/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER DISABLE BIT5*/
		CLR_BIT(GICR,GICR_INT2);
    28ca:	ab e5       	ldi	r26, 0x5B	; 91
    28cc:	b0 e0       	ldi	r27, 0x00	; 0
    28ce:	eb e5       	ldi	r30, 0x5B	; 91
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	80 81       	ld	r24, Z
    28d4:	8f 7d       	andi	r24, 0xDF	; 223
    28d6:	8c 93       	st	X, r24
		break;
	}
}
    28d8:	0f 90       	pop	r0
    28da:	0f 90       	pop	r0
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
    28e0:	cf 91       	pop	r28
    28e2:	df 91       	pop	r29
    28e4:	08 95       	ret

000028e6 <EXTI_u8INTSetCallBack>:
u8 EXTI_u8INTSetCallBack(const EXT_I * ConfigArr,void (*Copy_pvINTFunc)(void))
{
    28e6:	df 93       	push	r29
    28e8:	cf 93       	push	r28
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
    28ee:	28 97       	sbiw	r28, 0x08	; 8
    28f0:	0f b6       	in	r0, 0x3f	; 63
    28f2:	f8 94       	cli
    28f4:	de bf       	out	0x3e, r29	; 62
    28f6:	0f be       	out	0x3f, r0	; 63
    28f8:	cd bf       	out	0x3d, r28	; 61
    28fa:	9c 83       	std	Y+4, r25	; 0x04
    28fc:	8b 83       	std	Y+3, r24	; 0x03
    28fe:	7e 83       	std	Y+6, r23	; 0x06
    2900:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8ErrorStatus=NO_ERROR;
    2902:	82 e0       	ldi	r24, 0x02	; 2
    2904:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8counter;
	for(Local_u8counter=0;Local_u8counter<3;Local_u8counter++)
    2906:	19 82       	std	Y+1, r1	; 0x01
    2908:	59 c0       	rjmp	.+178    	; 0x29bc <EXTI_u8INTSetCallBack+0xd6>
	{
		switch(ConfigArr[Local_u8counter].Interrupt_ID)
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	88 2f       	mov	r24, r24
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	9c 01       	movw	r18, r24
    2912:	22 0f       	add	r18, r18
    2914:	33 1f       	adc	r19, r19
    2916:	8b 81       	ldd	r24, Y+3	; 0x03
    2918:	9c 81       	ldd	r25, Y+4	; 0x04
    291a:	fc 01       	movw	r30, r24
    291c:	e2 0f       	add	r30, r18
    291e:	f3 1f       	adc	r31, r19
    2920:	80 81       	ld	r24, Z
    2922:	28 2f       	mov	r18, r24
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	38 87       	std	Y+8, r19	; 0x08
    2928:	2f 83       	std	Y+7, r18	; 0x07
    292a:	8f 81       	ldd	r24, Y+7	; 0x07
    292c:	98 85       	ldd	r25, Y+8	; 0x08
    292e:	81 30       	cpi	r24, 0x01	; 1
    2930:	91 05       	cpc	r25, r1
    2932:	e1 f0       	breq	.+56     	; 0x296c <EXTI_u8INTSetCallBack+0x86>
    2934:	2f 81       	ldd	r18, Y+7	; 0x07
    2936:	38 85       	ldd	r19, Y+8	; 0x08
    2938:	22 30       	cpi	r18, 0x02	; 2
    293a:	31 05       	cpc	r19, r1
    293c:	51 f1       	breq	.+84     	; 0x2992 <EXTI_u8INTSetCallBack+0xac>
    293e:	8f 81       	ldd	r24, Y+7	; 0x07
    2940:	98 85       	ldd	r25, Y+8	; 0x08
    2942:	00 97       	sbiw	r24, 0x00	; 0
    2944:	c1 f5       	brne	.+112    	; 0x29b6 <EXTI_u8INTSetCallBack+0xd0>
		{
		case EXTI0:
			if(Copy_pvINTFunc != NULL)
    2946:	8d 81       	ldd	r24, Y+5	; 0x05
    2948:	9e 81       	ldd	r25, Y+6	; 0x06
    294a:	00 97       	sbiw	r24, 0x00	; 0
    294c:	69 f0       	breq	.+26     	; 0x2968 <EXTI_u8INTSetCallBack+0x82>
			{
				EXTI_ARRCALLBACK2FUNC[Local_u8counter]=Copy_pvINTFunc;
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	88 2f       	mov	r24, r24
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	88 0f       	add	r24, r24
    2956:	99 1f       	adc	r25, r25
    2958:	fc 01       	movw	r30, r24
    295a:	eb 58       	subi	r30, 0x8B	; 139
    295c:	fd 4f       	sbci	r31, 0xFD	; 253
    295e:	8d 81       	ldd	r24, Y+5	; 0x05
    2960:	9e 81       	ldd	r25, Y+6	; 0x06
    2962:	91 83       	std	Z+1, r25	; 0x01
    2964:	80 83       	st	Z, r24
    2966:	27 c0       	rjmp	.+78     	; 0x29b6 <EXTI_u8INTSetCallBack+0xd0>
			}
			else
			{
				Local_u8ErrorStatus = NULL_POINTER;
    2968:	1a 82       	std	Y+2, r1	; 0x02
    296a:	25 c0       	rjmp	.+74     	; 0x29b6 <EXTI_u8INTSetCallBack+0xd0>
			}
			break;
		case EXTI1:
			if(Copy_pvINTFunc != NULL)
    296c:	8d 81       	ldd	r24, Y+5	; 0x05
    296e:	9e 81       	ldd	r25, Y+6	; 0x06
    2970:	00 97       	sbiw	r24, 0x00	; 0
    2972:	69 f0       	breq	.+26     	; 0x298e <EXTI_u8INTSetCallBack+0xa8>
			{
				EXTI_ARRCALLBACK2FUNC[Local_u8counter]=Copy_pvINTFunc;
    2974:	89 81       	ldd	r24, Y+1	; 0x01
    2976:	88 2f       	mov	r24, r24
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	88 0f       	add	r24, r24
    297c:	99 1f       	adc	r25, r25
    297e:	fc 01       	movw	r30, r24
    2980:	eb 58       	subi	r30, 0x8B	; 139
    2982:	fd 4f       	sbci	r31, 0xFD	; 253
    2984:	8d 81       	ldd	r24, Y+5	; 0x05
    2986:	9e 81       	ldd	r25, Y+6	; 0x06
    2988:	91 83       	std	Z+1, r25	; 0x01
    298a:	80 83       	st	Z, r24
    298c:	14 c0       	rjmp	.+40     	; 0x29b6 <EXTI_u8INTSetCallBack+0xd0>
			}
			else
			{
				Local_u8ErrorStatus = NULL_POINTER;
    298e:	1a 82       	std	Y+2, r1	; 0x02
    2990:	12 c0       	rjmp	.+36     	; 0x29b6 <EXTI_u8INTSetCallBack+0xd0>
			}
			break;
		case EXTI2:
			if(Copy_pvINTFunc != NULL)
    2992:	8d 81       	ldd	r24, Y+5	; 0x05
    2994:	9e 81       	ldd	r25, Y+6	; 0x06
    2996:	00 97       	sbiw	r24, 0x00	; 0
    2998:	69 f0       	breq	.+26     	; 0x29b4 <EXTI_u8INTSetCallBack+0xce>
			{
				EXTI_ARRCALLBACK2FUNC[Local_u8counter]=Copy_pvINTFunc;
    299a:	89 81       	ldd	r24, Y+1	; 0x01
    299c:	88 2f       	mov	r24, r24
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	88 0f       	add	r24, r24
    29a2:	99 1f       	adc	r25, r25
    29a4:	fc 01       	movw	r30, r24
    29a6:	eb 58       	subi	r30, 0x8B	; 139
    29a8:	fd 4f       	sbci	r31, 0xFD	; 253
    29aa:	8d 81       	ldd	r24, Y+5	; 0x05
    29ac:	9e 81       	ldd	r25, Y+6	; 0x06
    29ae:	91 83       	std	Z+1, r25	; 0x01
    29b0:	80 83       	st	Z, r24
    29b2:	01 c0       	rjmp	.+2      	; 0x29b6 <EXTI_u8INTSetCallBack+0xd0>
			}
			else
			{
				Local_u8ErrorStatus = NULL_POINTER;
    29b4:	1a 82       	std	Y+2, r1	; 0x02
}
u8 EXTI_u8INTSetCallBack(const EXT_I * ConfigArr,void (*Copy_pvINTFunc)(void))
{
	u8 Local_u8ErrorStatus=NO_ERROR;
	u8 Local_u8counter;
	for(Local_u8counter=0;Local_u8counter<3;Local_u8counter++)
    29b6:	89 81       	ldd	r24, Y+1	; 0x01
    29b8:	8f 5f       	subi	r24, 0xFF	; 255
    29ba:	89 83       	std	Y+1, r24	; 0x01
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
    29be:	83 30       	cpi	r24, 0x03	; 3
    29c0:	08 f4       	brcc	.+2      	; 0x29c4 <EXTI_u8INTSetCallBack+0xde>
    29c2:	a3 cf       	rjmp	.-186    	; 0x290a <EXTI_u8INTSetCallBack+0x24>
			}
			break;
		}
	}

	return Local_u8ErrorStatus;
    29c4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    29c6:	28 96       	adiw	r28, 0x08	; 8
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	f8 94       	cli
    29cc:	de bf       	out	0x3e, r29	; 62
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	cd bf       	out	0x3d, r28	; 61
    29d2:	cf 91       	pop	r28
    29d4:	df 91       	pop	r29
    29d6:	08 95       	ret

000029d8 <__vector_1>:

ISR(INT0_vect)
{
    29d8:	1f 92       	push	r1
    29da:	0f 92       	push	r0
    29dc:	0f b6       	in	r0, 0x3f	; 63
    29de:	0f 92       	push	r0
    29e0:	11 24       	eor	r1, r1
    29e2:	2f 93       	push	r18
    29e4:	3f 93       	push	r19
    29e6:	4f 93       	push	r20
    29e8:	5f 93       	push	r21
    29ea:	6f 93       	push	r22
    29ec:	7f 93       	push	r23
    29ee:	8f 93       	push	r24
    29f0:	9f 93       	push	r25
    29f2:	af 93       	push	r26
    29f4:	bf 93       	push	r27
    29f6:	ef 93       	push	r30
    29f8:	ff 93       	push	r31
    29fa:	df 93       	push	r29
    29fc:	cf 93       	push	r28
    29fe:	cd b7       	in	r28, 0x3d	; 61
    2a00:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ARRCALLBACK2FUNC[0] != NULL)
    2a02:	80 91 75 02 	lds	r24, 0x0275
    2a06:	90 91 76 02 	lds	r25, 0x0276
    2a0a:	00 97       	sbiw	r24, 0x00	; 0
    2a0c:	29 f0       	breq	.+10     	; 0x2a18 <__vector_1+0x40>
		{
		EXTI_ARRCALLBACK2FUNC[0]();
    2a0e:	e0 91 75 02 	lds	r30, 0x0275
    2a12:	f0 91 76 02 	lds	r31, 0x0276
    2a16:	09 95       	icall
		}
		else
		{
			/*Stop*/
		}
}
    2a18:	cf 91       	pop	r28
    2a1a:	df 91       	pop	r29
    2a1c:	ff 91       	pop	r31
    2a1e:	ef 91       	pop	r30
    2a20:	bf 91       	pop	r27
    2a22:	af 91       	pop	r26
    2a24:	9f 91       	pop	r25
    2a26:	8f 91       	pop	r24
    2a28:	7f 91       	pop	r23
    2a2a:	6f 91       	pop	r22
    2a2c:	5f 91       	pop	r21
    2a2e:	4f 91       	pop	r20
    2a30:	3f 91       	pop	r19
    2a32:	2f 91       	pop	r18
    2a34:	0f 90       	pop	r0
    2a36:	0f be       	out	0x3f, r0	; 63
    2a38:	0f 90       	pop	r0
    2a3a:	1f 90       	pop	r1
    2a3c:	18 95       	reti

00002a3e <__vector_2>:
ISR(INT1_vect)
{
    2a3e:	1f 92       	push	r1
    2a40:	0f 92       	push	r0
    2a42:	0f b6       	in	r0, 0x3f	; 63
    2a44:	0f 92       	push	r0
    2a46:	11 24       	eor	r1, r1
    2a48:	df 93       	push	r29
    2a4a:	cf 93       	push	r28
    2a4c:	cd b7       	in	r28, 0x3d	; 61
    2a4e:	de b7       	in	r29, 0x3e	; 62

}
    2a50:	cf 91       	pop	r28
    2a52:	df 91       	pop	r29
    2a54:	0f 90       	pop	r0
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	0f 90       	pop	r0
    2a5a:	1f 90       	pop	r1
    2a5c:	18 95       	reti

00002a5e <__vector_3>:
ISR(INT2_vect)
{
    2a5e:	1f 92       	push	r1
    2a60:	0f 92       	push	r0
    2a62:	0f b6       	in	r0, 0x3f	; 63
    2a64:	0f 92       	push	r0
    2a66:	11 24       	eor	r1, r1
    2a68:	df 93       	push	r29
    2a6a:	cf 93       	push	r28
    2a6c:	cd b7       	in	r28, 0x3d	; 61
    2a6e:	de b7       	in	r29, 0x3e	; 62

}
    2a70:	cf 91       	pop	r28
    2a72:	df 91       	pop	r29
    2a74:	0f 90       	pop	r0
    2a76:	0f be       	out	0x3f, r0	; 63
    2a78:	0f 90       	pop	r0
    2a7a:	1f 90       	pop	r1
    2a7c:	18 95       	reti

00002a7e <M_Dio_en_getPinValue>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : Dio_HIGH or DIO_LOW
******************************************/
Dio_LevelType  M_Dio_en_getPinValue(Dio_ChannelType ChannelId)
{
    2a7e:	df 93       	push	r29
    2a80:	cf 93       	push	r28
    2a82:	00 d0       	rcall	.+0      	; 0x2a84 <M_Dio_en_getPinValue+0x6>
    2a84:	00 d0       	rcall	.+0      	; 0x2a86 <M_Dio_en_getPinValue+0x8>
    2a86:	00 d0       	rcall	.+0      	; 0x2a88 <M_Dio_en_getPinValue+0xa>
    2a88:	cd b7       	in	r28, 0x3d	; 61
    2a8a:	de b7       	in	r29, 0x3e	; 62
    2a8c:	8c 83       	std	Y+4, r24	; 0x04
	u8 pin = ChannelId % 10;
    2a8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a90:	9a e0       	ldi	r25, 0x0A	; 10
    2a92:	69 2f       	mov	r22, r25
    2a94:	0e 94 3d 29 	call	0x527a	; 0x527a <__udivmodqi4>
    2a98:	89 2f       	mov	r24, r25
    2a9a:	8b 83       	std	Y+3, r24	; 0x03
	u8 port = ChannelId / 10;
    2a9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a9e:	9a e0       	ldi	r25, 0x0A	; 10
    2aa0:	69 2f       	mov	r22, r25
    2aa2:	0e 94 3d 29 	call	0x527a	; 0x527a <__udivmodqi4>
    2aa6:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType Local_levelType;
	switch(port)
    2aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aaa:	28 2f       	mov	r18, r24
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	3e 83       	std	Y+6, r19	; 0x06
    2ab0:	2d 83       	std	Y+5, r18	; 0x05
    2ab2:	4d 81       	ldd	r20, Y+5	; 0x05
    2ab4:	5e 81       	ldd	r21, Y+6	; 0x06
    2ab6:	42 30       	cpi	r20, 0x02	; 2
    2ab8:	51 05       	cpc	r21, r1
    2aba:	41 f1       	breq	.+80     	; 0x2b0c <M_Dio_en_getPinValue+0x8e>
    2abc:	8d 81       	ldd	r24, Y+5	; 0x05
    2abe:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac0:	83 30       	cpi	r24, 0x03	; 3
    2ac2:	91 05       	cpc	r25, r1
    2ac4:	34 f4       	brge	.+12     	; 0x2ad2 <M_Dio_en_getPinValue+0x54>
    2ac6:	2d 81       	ldd	r18, Y+5	; 0x05
    2ac8:	3e 81       	ldd	r19, Y+6	; 0x06
    2aca:	21 30       	cpi	r18, 0x01	; 1
    2acc:	31 05       	cpc	r19, r1
    2ace:	61 f0       	breq	.+24     	; 0x2ae8 <M_Dio_en_getPinValue+0x6a>
    2ad0:	52 c0       	rjmp	.+164    	; 0x2b76 <M_Dio_en_getPinValue+0xf8>
    2ad2:	4d 81       	ldd	r20, Y+5	; 0x05
    2ad4:	5e 81       	ldd	r21, Y+6	; 0x06
    2ad6:	43 30       	cpi	r20, 0x03	; 3
    2ad8:	51 05       	cpc	r21, r1
    2ada:	51 f1       	breq	.+84     	; 0x2b30 <M_Dio_en_getPinValue+0xb2>
    2adc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ade:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae0:	84 30       	cpi	r24, 0x04	; 4
    2ae2:	91 05       	cpc	r25, r1
    2ae4:	b9 f1       	breq	.+110    	; 0x2b54 <M_Dio_en_getPinValue+0xd6>
    2ae6:	47 c0       	rjmp	.+142    	; 0x2b76 <M_Dio_en_getPinValue+0xf8>
	{
	case DIO_PORTA :Local_levelType = GET_BIT( PINA_REG,pin);break;
    2ae8:	e9 e3       	ldi	r30, 0x39	; 57
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	80 81       	ld	r24, Z
    2aee:	28 2f       	mov	r18, r24
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	8b 81       	ldd	r24, Y+3	; 0x03
    2af4:	88 2f       	mov	r24, r24
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	a9 01       	movw	r20, r18
    2afa:	02 c0       	rjmp	.+4      	; 0x2b00 <M_Dio_en_getPinValue+0x82>
    2afc:	55 95       	asr	r21
    2afe:	47 95       	ror	r20
    2b00:	8a 95       	dec	r24
    2b02:	e2 f7       	brpl	.-8      	; 0x2afc <M_Dio_en_getPinValue+0x7e>
    2b04:	ca 01       	movw	r24, r20
    2b06:	81 70       	andi	r24, 0x01	; 1
    2b08:	89 83       	std	Y+1, r24	; 0x01
    2b0a:	35 c0       	rjmp	.+106    	; 0x2b76 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTB :Local_levelType = GET_BIT( PINB_REG,pin);break;
    2b0c:	e6 e3       	ldi	r30, 0x36	; 54
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	80 81       	ld	r24, Z
    2b12:	28 2f       	mov	r18, r24
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	8b 81       	ldd	r24, Y+3	; 0x03
    2b18:	88 2f       	mov	r24, r24
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	a9 01       	movw	r20, r18
    2b1e:	02 c0       	rjmp	.+4      	; 0x2b24 <M_Dio_en_getPinValue+0xa6>
    2b20:	55 95       	asr	r21
    2b22:	47 95       	ror	r20
    2b24:	8a 95       	dec	r24
    2b26:	e2 f7       	brpl	.-8      	; 0x2b20 <M_Dio_en_getPinValue+0xa2>
    2b28:	ca 01       	movw	r24, r20
    2b2a:	81 70       	andi	r24, 0x01	; 1
    2b2c:	89 83       	std	Y+1, r24	; 0x01
    2b2e:	23 c0       	rjmp	.+70     	; 0x2b76 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTC :Local_levelType = GET_BIT( PINC_REG,pin);break;
    2b30:	e3 e3       	ldi	r30, 0x33	; 51
    2b32:	f0 e0       	ldi	r31, 0x00	; 0
    2b34:	80 81       	ld	r24, Z
    2b36:	28 2f       	mov	r18, r24
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3c:	88 2f       	mov	r24, r24
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	a9 01       	movw	r20, r18
    2b42:	02 c0       	rjmp	.+4      	; 0x2b48 <M_Dio_en_getPinValue+0xca>
    2b44:	55 95       	asr	r21
    2b46:	47 95       	ror	r20
    2b48:	8a 95       	dec	r24
    2b4a:	e2 f7       	brpl	.-8      	; 0x2b44 <M_Dio_en_getPinValue+0xc6>
    2b4c:	ca 01       	movw	r24, r20
    2b4e:	81 70       	andi	r24, 0x01	; 1
    2b50:	89 83       	std	Y+1, r24	; 0x01
    2b52:	11 c0       	rjmp	.+34     	; 0x2b76 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTD :Local_levelType = GET_BIT( PIND_REG,pin);break;
    2b54:	e0 e3       	ldi	r30, 0x30	; 48
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	80 81       	ld	r24, Z
    2b5a:	28 2f       	mov	r18, r24
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b60:	88 2f       	mov	r24, r24
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	a9 01       	movw	r20, r18
    2b66:	02 c0       	rjmp	.+4      	; 0x2b6c <M_Dio_en_getPinValue+0xee>
    2b68:	55 95       	asr	r21
    2b6a:	47 95       	ror	r20
    2b6c:	8a 95       	dec	r24
    2b6e:	e2 f7       	brpl	.-8      	; 0x2b68 <M_Dio_en_getPinValue+0xea>
    2b70:	ca 01       	movw	r24, r20
    2b72:	81 70       	andi	r24, 0x01	; 1
    2b74:	89 83       	std	Y+1, r24	; 0x01
	}
    return Local_levelType ;
    2b76:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b78:	26 96       	adiw	r28, 0x06	; 6
    2b7a:	0f b6       	in	r0, 0x3f	; 63
    2b7c:	f8 94       	cli
    2b7e:	de bf       	out	0x3e, r29	; 62
    2b80:	0f be       	out	0x3f, r0	; 63
    2b82:	cd bf       	out	0x3d, r28	; 61
    2b84:	cf 91       	pop	r28
    2b86:	df 91       	pop	r29
    2b88:	08 95       	ret

00002b8a <M_Dio_void_setPinValue>:
  parameters (in)  :  channelId (pin) ,Level (Dio_HIGH or Dio_LOW)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPinValue(Dio_ChannelType ChannelId,Dio_LevelType Level)
{
    2b8a:	df 93       	push	r29
    2b8c:	cf 93       	push	r28
    2b8e:	cd b7       	in	r28, 0x3d	; 61
    2b90:	de b7       	in	r29, 0x3e	; 62
    2b92:	28 97       	sbiw	r28, 0x08	; 8
    2b94:	0f b6       	in	r0, 0x3f	; 63
    2b96:	f8 94       	cli
    2b98:	de bf       	out	0x3e, r29	; 62
    2b9a:	0f be       	out	0x3f, r0	; 63
    2b9c:	cd bf       	out	0x3d, r28	; 61
    2b9e:	8b 83       	std	Y+3, r24	; 0x03
    2ba0:	6c 83       	std	Y+4, r22	; 0x04
	u8 pin = ChannelId % 10;
    2ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba4:	9a e0       	ldi	r25, 0x0A	; 10
    2ba6:	69 2f       	mov	r22, r25
    2ba8:	0e 94 3d 29 	call	0x527a	; 0x527a <__udivmodqi4>
    2bac:	89 2f       	mov	r24, r25
    2bae:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = ChannelId / 10;
    2bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb2:	9a e0       	ldi	r25, 0x0A	; 10
    2bb4:	69 2f       	mov	r22, r25
    2bb6:	0e 94 3d 29 	call	0x527a	; 0x527a <__udivmodqi4>
    2bba:	89 83       	std	Y+1, r24	; 0x01

	if(Level == DIO_HIGH)
    2bbc:	8c 81       	ldd	r24, Y+4	; 0x04
    2bbe:	81 30       	cpi	r24, 0x01	; 1
    2bc0:	09 f0       	breq	.+2      	; 0x2bc4 <M_Dio_void_setPinValue+0x3a>
    2bc2:	70 c0       	rjmp	.+224    	; 0x2ca4 <M_Dio_void_setPinValue+0x11a>
	{
		switch(port)
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	28 2f       	mov	r18, r24
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	38 87       	std	Y+8, r19	; 0x08
    2bcc:	2f 83       	std	Y+7, r18	; 0x07
    2bce:	8f 81       	ldd	r24, Y+7	; 0x07
    2bd0:	98 85       	ldd	r25, Y+8	; 0x08
    2bd2:	82 30       	cpi	r24, 0x02	; 2
    2bd4:	91 05       	cpc	r25, r1
    2bd6:	51 f1       	breq	.+84     	; 0x2c2c <M_Dio_void_setPinValue+0xa2>
    2bd8:	2f 81       	ldd	r18, Y+7	; 0x07
    2bda:	38 85       	ldd	r19, Y+8	; 0x08
    2bdc:	23 30       	cpi	r18, 0x03	; 3
    2bde:	31 05       	cpc	r19, r1
    2be0:	34 f4       	brge	.+12     	; 0x2bee <M_Dio_void_setPinValue+0x64>
    2be2:	8f 81       	ldd	r24, Y+7	; 0x07
    2be4:	98 85       	ldd	r25, Y+8	; 0x08
    2be6:	81 30       	cpi	r24, 0x01	; 1
    2be8:	91 05       	cpc	r25, r1
    2bea:	61 f0       	breq	.+24     	; 0x2c04 <M_Dio_void_setPinValue+0x7a>
    2bec:	d3 c0       	rjmp	.+422    	; 0x2d94 <M_Dio_void_setPinValue+0x20a>
    2bee:	2f 81       	ldd	r18, Y+7	; 0x07
    2bf0:	38 85       	ldd	r19, Y+8	; 0x08
    2bf2:	23 30       	cpi	r18, 0x03	; 3
    2bf4:	31 05       	cpc	r19, r1
    2bf6:	71 f1       	breq	.+92     	; 0x2c54 <M_Dio_void_setPinValue+0xca>
    2bf8:	8f 81       	ldd	r24, Y+7	; 0x07
    2bfa:	98 85       	ldd	r25, Y+8	; 0x08
    2bfc:	84 30       	cpi	r24, 0x04	; 4
    2bfe:	91 05       	cpc	r25, r1
    2c00:	e9 f1       	breq	.+122    	; 0x2c7c <M_Dio_void_setPinValue+0xf2>
    2c02:	c8 c0       	rjmp	.+400    	; 0x2d94 <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : SET_BIT( PORTA_REG,pin);break;
    2c04:	ab e3       	ldi	r26, 0x3B	; 59
    2c06:	b0 e0       	ldi	r27, 0x00	; 0
    2c08:	eb e3       	ldi	r30, 0x3B	; 59
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	80 81       	ld	r24, Z
    2c0e:	48 2f       	mov	r20, r24
    2c10:	8a 81       	ldd	r24, Y+2	; 0x02
    2c12:	28 2f       	mov	r18, r24
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	02 2e       	mov	r0, r18
    2c1c:	02 c0       	rjmp	.+4      	; 0x2c22 <M_Dio_void_setPinValue+0x98>
    2c1e:	88 0f       	add	r24, r24
    2c20:	99 1f       	adc	r25, r25
    2c22:	0a 94       	dec	r0
    2c24:	e2 f7       	brpl	.-8      	; 0x2c1e <M_Dio_void_setPinValue+0x94>
    2c26:	84 2b       	or	r24, r20
    2c28:	8c 93       	st	X, r24
    2c2a:	b4 c0       	rjmp	.+360    	; 0x2d94 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : SET_BIT( PORTB_REG,pin);break;
    2c2c:	a8 e3       	ldi	r26, 0x38	; 56
    2c2e:	b0 e0       	ldi	r27, 0x00	; 0
    2c30:	e8 e3       	ldi	r30, 0x38	; 56
    2c32:	f0 e0       	ldi	r31, 0x00	; 0
    2c34:	80 81       	ld	r24, Z
    2c36:	48 2f       	mov	r20, r24
    2c38:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3a:	28 2f       	mov	r18, r24
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	02 2e       	mov	r0, r18
    2c44:	02 c0       	rjmp	.+4      	; 0x2c4a <M_Dio_void_setPinValue+0xc0>
    2c46:	88 0f       	add	r24, r24
    2c48:	99 1f       	adc	r25, r25
    2c4a:	0a 94       	dec	r0
    2c4c:	e2 f7       	brpl	.-8      	; 0x2c46 <M_Dio_void_setPinValue+0xbc>
    2c4e:	84 2b       	or	r24, r20
    2c50:	8c 93       	st	X, r24
    2c52:	a0 c0       	rjmp	.+320    	; 0x2d94 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : SET_BIT( PORTC_REG,pin);break;
    2c54:	a5 e3       	ldi	r26, 0x35	; 53
    2c56:	b0 e0       	ldi	r27, 0x00	; 0
    2c58:	e5 e3       	ldi	r30, 0x35	; 53
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	80 81       	ld	r24, Z
    2c5e:	48 2f       	mov	r20, r24
    2c60:	8a 81       	ldd	r24, Y+2	; 0x02
    2c62:	28 2f       	mov	r18, r24
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	02 2e       	mov	r0, r18
    2c6c:	02 c0       	rjmp	.+4      	; 0x2c72 <M_Dio_void_setPinValue+0xe8>
    2c6e:	88 0f       	add	r24, r24
    2c70:	99 1f       	adc	r25, r25
    2c72:	0a 94       	dec	r0
    2c74:	e2 f7       	brpl	.-8      	; 0x2c6e <M_Dio_void_setPinValue+0xe4>
    2c76:	84 2b       	or	r24, r20
    2c78:	8c 93       	st	X, r24
    2c7a:	8c c0       	rjmp	.+280    	; 0x2d94 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : SET_BIT( PORTD_REG,pin);break;
    2c7c:	a2 e3       	ldi	r26, 0x32	; 50
    2c7e:	b0 e0       	ldi	r27, 0x00	; 0
    2c80:	e2 e3       	ldi	r30, 0x32	; 50
    2c82:	f0 e0       	ldi	r31, 0x00	; 0
    2c84:	80 81       	ld	r24, Z
    2c86:	48 2f       	mov	r20, r24
    2c88:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8a:	28 2f       	mov	r18, r24
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	81 e0       	ldi	r24, 0x01	; 1
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	02 2e       	mov	r0, r18
    2c94:	02 c0       	rjmp	.+4      	; 0x2c9a <M_Dio_void_setPinValue+0x110>
    2c96:	88 0f       	add	r24, r24
    2c98:	99 1f       	adc	r25, r25
    2c9a:	0a 94       	dec	r0
    2c9c:	e2 f7       	brpl	.-8      	; 0x2c96 <M_Dio_void_setPinValue+0x10c>
    2c9e:	84 2b       	or	r24, r20
    2ca0:	8c 93       	st	X, r24
    2ca2:	78 c0       	rjmp	.+240    	; 0x2d94 <M_Dio_void_setPinValue+0x20a>
		}

	}
	else if (Level == DIO_LOW)
    2ca4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca6:	88 23       	and	r24, r24
    2ca8:	09 f0       	breq	.+2      	; 0x2cac <M_Dio_void_setPinValue+0x122>
    2caa:	74 c0       	rjmp	.+232    	; 0x2d94 <M_Dio_void_setPinValue+0x20a>
	{
		switch(port)
    2cac:	89 81       	ldd	r24, Y+1	; 0x01
    2cae:	28 2f       	mov	r18, r24
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	3e 83       	std	Y+6, r19	; 0x06
    2cb4:	2d 83       	std	Y+5, r18	; 0x05
    2cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cba:	82 30       	cpi	r24, 0x02	; 2
    2cbc:	91 05       	cpc	r25, r1
    2cbe:	61 f1       	breq	.+88     	; 0x2d18 <M_Dio_void_setPinValue+0x18e>
    2cc0:	2d 81       	ldd	r18, Y+5	; 0x05
    2cc2:	3e 81       	ldd	r19, Y+6	; 0x06
    2cc4:	23 30       	cpi	r18, 0x03	; 3
    2cc6:	31 05       	cpc	r19, r1
    2cc8:	34 f4       	brge	.+12     	; 0x2cd6 <M_Dio_void_setPinValue+0x14c>
    2cca:	8d 81       	ldd	r24, Y+5	; 0x05
    2ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cce:	81 30       	cpi	r24, 0x01	; 1
    2cd0:	91 05       	cpc	r25, r1
    2cd2:	69 f0       	breq	.+26     	; 0x2cee <M_Dio_void_setPinValue+0x164>
    2cd4:	5f c0       	rjmp	.+190    	; 0x2d94 <M_Dio_void_setPinValue+0x20a>
    2cd6:	2d 81       	ldd	r18, Y+5	; 0x05
    2cd8:	3e 81       	ldd	r19, Y+6	; 0x06
    2cda:	23 30       	cpi	r18, 0x03	; 3
    2cdc:	31 05       	cpc	r19, r1
    2cde:	89 f1       	breq	.+98     	; 0x2d42 <M_Dio_void_setPinValue+0x1b8>
    2ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce4:	84 30       	cpi	r24, 0x04	; 4
    2ce6:	91 05       	cpc	r25, r1
    2ce8:	09 f4       	brne	.+2      	; 0x2cec <M_Dio_void_setPinValue+0x162>
    2cea:	40 c0       	rjmp	.+128    	; 0x2d6c <M_Dio_void_setPinValue+0x1e2>
    2cec:	53 c0       	rjmp	.+166    	; 0x2d94 <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : CLR_BIT( PORTA_REG,pin);break;
    2cee:	ab e3       	ldi	r26, 0x3B	; 59
    2cf0:	b0 e0       	ldi	r27, 0x00	; 0
    2cf2:	eb e3       	ldi	r30, 0x3B	; 59
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	80 81       	ld	r24, Z
    2cf8:	48 2f       	mov	r20, r24
    2cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfc:	28 2f       	mov	r18, r24
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	02 2e       	mov	r0, r18
    2d06:	02 c0       	rjmp	.+4      	; 0x2d0c <M_Dio_void_setPinValue+0x182>
    2d08:	88 0f       	add	r24, r24
    2d0a:	99 1f       	adc	r25, r25
    2d0c:	0a 94       	dec	r0
    2d0e:	e2 f7       	brpl	.-8      	; 0x2d08 <M_Dio_void_setPinValue+0x17e>
    2d10:	80 95       	com	r24
    2d12:	84 23       	and	r24, r20
    2d14:	8c 93       	st	X, r24
    2d16:	3e c0       	rjmp	.+124    	; 0x2d94 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : CLR_BIT( PORTB_REG,pin);break;
    2d18:	a8 e3       	ldi	r26, 0x38	; 56
    2d1a:	b0 e0       	ldi	r27, 0x00	; 0
    2d1c:	e8 e3       	ldi	r30, 0x38	; 56
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	80 81       	ld	r24, Z
    2d22:	48 2f       	mov	r20, r24
    2d24:	8a 81       	ldd	r24, Y+2	; 0x02
    2d26:	28 2f       	mov	r18, r24
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	02 2e       	mov	r0, r18
    2d30:	02 c0       	rjmp	.+4      	; 0x2d36 <M_Dio_void_setPinValue+0x1ac>
    2d32:	88 0f       	add	r24, r24
    2d34:	99 1f       	adc	r25, r25
    2d36:	0a 94       	dec	r0
    2d38:	e2 f7       	brpl	.-8      	; 0x2d32 <M_Dio_void_setPinValue+0x1a8>
    2d3a:	80 95       	com	r24
    2d3c:	84 23       	and	r24, r20
    2d3e:	8c 93       	st	X, r24
    2d40:	29 c0       	rjmp	.+82     	; 0x2d94 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : CLR_BIT( PORTC_REG,pin);break;
    2d42:	a5 e3       	ldi	r26, 0x35	; 53
    2d44:	b0 e0       	ldi	r27, 0x00	; 0
    2d46:	e5 e3       	ldi	r30, 0x35	; 53
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	80 81       	ld	r24, Z
    2d4c:	48 2f       	mov	r20, r24
    2d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d50:	28 2f       	mov	r18, r24
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	02 2e       	mov	r0, r18
    2d5a:	02 c0       	rjmp	.+4      	; 0x2d60 <M_Dio_void_setPinValue+0x1d6>
    2d5c:	88 0f       	add	r24, r24
    2d5e:	99 1f       	adc	r25, r25
    2d60:	0a 94       	dec	r0
    2d62:	e2 f7       	brpl	.-8      	; 0x2d5c <M_Dio_void_setPinValue+0x1d2>
    2d64:	80 95       	com	r24
    2d66:	84 23       	and	r24, r20
    2d68:	8c 93       	st	X, r24
    2d6a:	14 c0       	rjmp	.+40     	; 0x2d94 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : CLR_BIT( PORTD_REG,pin);break;
    2d6c:	a2 e3       	ldi	r26, 0x32	; 50
    2d6e:	b0 e0       	ldi	r27, 0x00	; 0
    2d70:	e2 e3       	ldi	r30, 0x32	; 50
    2d72:	f0 e0       	ldi	r31, 0x00	; 0
    2d74:	80 81       	ld	r24, Z
    2d76:	48 2f       	mov	r20, r24
    2d78:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7a:	28 2f       	mov	r18, r24
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	02 2e       	mov	r0, r18
    2d84:	02 c0       	rjmp	.+4      	; 0x2d8a <M_Dio_void_setPinValue+0x200>
    2d86:	88 0f       	add	r24, r24
    2d88:	99 1f       	adc	r25, r25
    2d8a:	0a 94       	dec	r0
    2d8c:	e2 f7       	brpl	.-8      	; 0x2d86 <M_Dio_void_setPinValue+0x1fc>
    2d8e:	80 95       	com	r24
    2d90:	84 23       	and	r24, r20
    2d92:	8c 93       	st	X, r24
		}

	}

}
    2d94:	28 96       	adiw	r28, 0x08	; 8
    2d96:	0f b6       	in	r0, 0x3f	; 63
    2d98:	f8 94       	cli
    2d9a:	de bf       	out	0x3e, r29	; 62
    2d9c:	0f be       	out	0x3f, r0	; 63
    2d9e:	cd bf       	out	0x3d, r28	; 61
    2da0:	cf 91       	pop	r28
    2da2:	df 91       	pop	r29
    2da4:	08 95       	ret

00002da6 <M_Dio_en_getPortValue>:
  parameters (in)  :  PortId
  parameters (out) :  Non
  Return Value     : Dio_PortLevelType
******************************************/
Dio_PortLevelType M_Dio_en_getPortValue(Dio_PortType PortId)
{
    2da6:	df 93       	push	r29
    2da8:	cf 93       	push	r28
    2daa:	00 d0       	rcall	.+0      	; 0x2dac <M_Dio_en_getPortValue+0x6>
    2dac:	00 d0       	rcall	.+0      	; 0x2dae <M_Dio_en_getPortValue+0x8>
    2dae:	cd b7       	in	r28, 0x3d	; 61
    2db0:	de b7       	in	r29, 0x3e	; 62
    2db2:	8a 83       	std	Y+2, r24	; 0x02
	Dio_PortLevelType Local_Reading;

	switch( PortId)
    2db4:	8a 81       	ldd	r24, Y+2	; 0x02
    2db6:	28 2f       	mov	r18, r24
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	3c 83       	std	Y+4, r19	; 0x04
    2dbc:	2b 83       	std	Y+3, r18	; 0x03
    2dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc2:	82 30       	cpi	r24, 0x02	; 2
    2dc4:	91 05       	cpc	r25, r1
    2dc6:	d9 f0       	breq	.+54     	; 0x2dfe <M_Dio_en_getPortValue+0x58>
    2dc8:	2b 81       	ldd	r18, Y+3	; 0x03
    2dca:	3c 81       	ldd	r19, Y+4	; 0x04
    2dcc:	23 30       	cpi	r18, 0x03	; 3
    2dce:	31 05       	cpc	r19, r1
    2dd0:	34 f4       	brge	.+12     	; 0x2dde <M_Dio_en_getPortValue+0x38>
    2dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd6:	81 30       	cpi	r24, 0x01	; 1
    2dd8:	91 05       	cpc	r25, r1
    2dda:	61 f0       	breq	.+24     	; 0x2df4 <M_Dio_en_getPortValue+0x4e>
    2ddc:	1e c0       	rjmp	.+60     	; 0x2e1a <M_Dio_en_getPortValue+0x74>
    2dde:	2b 81       	ldd	r18, Y+3	; 0x03
    2de0:	3c 81       	ldd	r19, Y+4	; 0x04
    2de2:	23 30       	cpi	r18, 0x03	; 3
    2de4:	31 05       	cpc	r19, r1
    2de6:	81 f0       	breq	.+32     	; 0x2e08 <M_Dio_en_getPortValue+0x62>
    2de8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dea:	9c 81       	ldd	r25, Y+4	; 0x04
    2dec:	84 30       	cpi	r24, 0x04	; 4
    2dee:	91 05       	cpc	r25, r1
    2df0:	81 f0       	breq	.+32     	; 0x2e12 <M_Dio_en_getPortValue+0x6c>
    2df2:	13 c0       	rjmp	.+38     	; 0x2e1a <M_Dio_en_getPortValue+0x74>
	{
	case DIO_PORTA :Local_Reading =  PORTA_REG;break;
    2df4:	eb e3       	ldi	r30, 0x3B	; 59
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	80 81       	ld	r24, Z
    2dfa:	89 83       	std	Y+1, r24	; 0x01
    2dfc:	0e c0       	rjmp	.+28     	; 0x2e1a <M_Dio_en_getPortValue+0x74>
	case DIO_PORTB :Local_Reading =  PORTB_REG;break;
    2dfe:	e8 e3       	ldi	r30, 0x38	; 56
    2e00:	f0 e0       	ldi	r31, 0x00	; 0
    2e02:	80 81       	ld	r24, Z
    2e04:	89 83       	std	Y+1, r24	; 0x01
    2e06:	09 c0       	rjmp	.+18     	; 0x2e1a <M_Dio_en_getPortValue+0x74>
	case DIO_PORTC :Local_Reading =  PORTC_REG;break;
    2e08:	e5 e3       	ldi	r30, 0x35	; 53
    2e0a:	f0 e0       	ldi	r31, 0x00	; 0
    2e0c:	80 81       	ld	r24, Z
    2e0e:	89 83       	std	Y+1, r24	; 0x01
    2e10:	04 c0       	rjmp	.+8      	; 0x2e1a <M_Dio_en_getPortValue+0x74>
	case DIO_PORTD :Local_Reading =  PORTD_REG;break;
    2e12:	e2 e3       	ldi	r30, 0x32	; 50
    2e14:	f0 e0       	ldi	r31, 0x00	; 0
    2e16:	80 81       	ld	r24, Z
    2e18:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_Reading;
    2e1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e1c:	0f 90       	pop	r0
    2e1e:	0f 90       	pop	r0
    2e20:	0f 90       	pop	r0
    2e22:	0f 90       	pop	r0
    2e24:	cf 91       	pop	r28
    2e26:	df 91       	pop	r29
    2e28:	08 95       	ret

00002e2a <M_Dio_void_setPortValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPortValue(Dio_PortType PortId,Dio_PortLevelType Level)
{
    2e2a:	df 93       	push	r29
    2e2c:	cf 93       	push	r28
    2e2e:	00 d0       	rcall	.+0      	; 0x2e30 <M_Dio_void_setPortValue+0x6>
    2e30:	00 d0       	rcall	.+0      	; 0x2e32 <M_Dio_void_setPortValue+0x8>
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
    2e36:	89 83       	std	Y+1, r24	; 0x01
    2e38:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortId)
    2e3a:	89 81       	ldd	r24, Y+1	; 0x01
    2e3c:	28 2f       	mov	r18, r24
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	3c 83       	std	Y+4, r19	; 0x04
    2e42:	2b 83       	std	Y+3, r18	; 0x03
    2e44:	8b 81       	ldd	r24, Y+3	; 0x03
    2e46:	9c 81       	ldd	r25, Y+4	; 0x04
    2e48:	82 30       	cpi	r24, 0x02	; 2
    2e4a:	91 05       	cpc	r25, r1
    2e4c:	d9 f0       	breq	.+54     	; 0x2e84 <M_Dio_void_setPortValue+0x5a>
    2e4e:	2b 81       	ldd	r18, Y+3	; 0x03
    2e50:	3c 81       	ldd	r19, Y+4	; 0x04
    2e52:	23 30       	cpi	r18, 0x03	; 3
    2e54:	31 05       	cpc	r19, r1
    2e56:	34 f4       	brge	.+12     	; 0x2e64 <M_Dio_void_setPortValue+0x3a>
    2e58:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e5c:	81 30       	cpi	r24, 0x01	; 1
    2e5e:	91 05       	cpc	r25, r1
    2e60:	61 f0       	breq	.+24     	; 0x2e7a <M_Dio_void_setPortValue+0x50>
    2e62:	1e c0       	rjmp	.+60     	; 0x2ea0 <M_Dio_void_setPortValue+0x76>
    2e64:	2b 81       	ldd	r18, Y+3	; 0x03
    2e66:	3c 81       	ldd	r19, Y+4	; 0x04
    2e68:	23 30       	cpi	r18, 0x03	; 3
    2e6a:	31 05       	cpc	r19, r1
    2e6c:	81 f0       	breq	.+32     	; 0x2e8e <M_Dio_void_setPortValue+0x64>
    2e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e70:	9c 81       	ldd	r25, Y+4	; 0x04
    2e72:	84 30       	cpi	r24, 0x04	; 4
    2e74:	91 05       	cpc	r25, r1
    2e76:	81 f0       	breq	.+32     	; 0x2e98 <M_Dio_void_setPortValue+0x6e>
    2e78:	13 c0       	rjmp	.+38     	; 0x2ea0 <M_Dio_void_setPortValue+0x76>
	{
    	case DIO_PORTA : PORTA_REG = Level;break;
    2e7a:	eb e3       	ldi	r30, 0x3B	; 59
    2e7c:	f0 e0       	ldi	r31, 0x00	; 0
    2e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e80:	80 83       	st	Z, r24
    2e82:	0e c0       	rjmp	.+28     	; 0x2ea0 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTB : PORTB_REG = Level;break;
    2e84:	e8 e3       	ldi	r30, 0x38	; 56
    2e86:	f0 e0       	ldi	r31, 0x00	; 0
    2e88:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8a:	80 83       	st	Z, r24
    2e8c:	09 c0       	rjmp	.+18     	; 0x2ea0 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTC : PORTC_REG = Level;break;
    2e8e:	e5 e3       	ldi	r30, 0x35	; 53
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	8a 81       	ldd	r24, Y+2	; 0x02
    2e94:	80 83       	st	Z, r24
    2e96:	04 c0       	rjmp	.+8      	; 0x2ea0 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTD : PORTD_REG = Level;break;
    2e98:	e2 e3       	ldi	r30, 0x32	; 50
    2e9a:	f0 e0       	ldi	r31, 0x00	; 0
    2e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9e:	80 83       	st	Z, r24
	}
}
    2ea0:	0f 90       	pop	r0
    2ea2:	0f 90       	pop	r0
    2ea4:	0f 90       	pop	r0
    2ea6:	0f 90       	pop	r0
    2ea8:	cf 91       	pop	r28
    2eaa:	df 91       	pop	r29
    2eac:	08 95       	ret

00002eae <M_Dio_void_togglePinValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_togglePinValue(Dio_ChannelType channelId)
{
    2eae:	df 93       	push	r29
    2eb0:	cf 93       	push	r28
    2eb2:	00 d0       	rcall	.+0      	; 0x2eb4 <M_Dio_void_togglePinValue+0x6>
    2eb4:	00 d0       	rcall	.+0      	; 0x2eb6 <M_Dio_void_togglePinValue+0x8>
    2eb6:	0f 92       	push	r0
    2eb8:	cd b7       	in	r28, 0x3d	; 61
    2eba:	de b7       	in	r29, 0x3e	; 62
    2ebc:	8b 83       	std	Y+3, r24	; 0x03
	u8 pin = channelId % 10;
    2ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec0:	9a e0       	ldi	r25, 0x0A	; 10
    2ec2:	69 2f       	mov	r22, r25
    2ec4:	0e 94 3d 29 	call	0x527a	; 0x527a <__udivmodqi4>
    2ec8:	89 2f       	mov	r24, r25
    2eca:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = channelId/ 10;
    2ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ece:	9a e0       	ldi	r25, 0x0A	; 10
    2ed0:	69 2f       	mov	r22, r25
    2ed2:	0e 94 3d 29 	call	0x527a	; 0x527a <__udivmodqi4>
    2ed6:	89 83       	std	Y+1, r24	; 0x01

	switch(port)
    2ed8:	89 81       	ldd	r24, Y+1	; 0x01
    2eda:	28 2f       	mov	r18, r24
    2edc:	30 e0       	ldi	r19, 0x00	; 0
    2ede:	3d 83       	std	Y+5, r19	; 0x05
    2ee0:	2c 83       	std	Y+4, r18	; 0x04
    2ee2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ee4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ee6:	82 30       	cpi	r24, 0x02	; 2
    2ee8:	91 05       	cpc	r25, r1
    2eea:	51 f1       	breq	.+84     	; 0x2f40 <M_Dio_void_togglePinValue+0x92>
    2eec:	2c 81       	ldd	r18, Y+4	; 0x04
    2eee:	3d 81       	ldd	r19, Y+5	; 0x05
    2ef0:	23 30       	cpi	r18, 0x03	; 3
    2ef2:	31 05       	cpc	r19, r1
    2ef4:	34 f4       	brge	.+12     	; 0x2f02 <M_Dio_void_togglePinValue+0x54>
    2ef6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ef8:	9d 81       	ldd	r25, Y+5	; 0x05
    2efa:	81 30       	cpi	r24, 0x01	; 1
    2efc:	91 05       	cpc	r25, r1
    2efe:	61 f0       	breq	.+24     	; 0x2f18 <M_Dio_void_togglePinValue+0x6a>
    2f00:	5a c0       	rjmp	.+180    	; 0x2fb6 <M_Dio_void_togglePinValue+0x108>
    2f02:	2c 81       	ldd	r18, Y+4	; 0x04
    2f04:	3d 81       	ldd	r19, Y+5	; 0x05
    2f06:	23 30       	cpi	r18, 0x03	; 3
    2f08:	31 05       	cpc	r19, r1
    2f0a:	71 f1       	breq	.+92     	; 0x2f68 <M_Dio_void_togglePinValue+0xba>
    2f0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f0e:	9d 81       	ldd	r25, Y+5	; 0x05
    2f10:	84 30       	cpi	r24, 0x04	; 4
    2f12:	91 05       	cpc	r25, r1
    2f14:	e9 f1       	breq	.+122    	; 0x2f90 <M_Dio_void_togglePinValue+0xe2>
    2f16:	4f c0       	rjmp	.+158    	; 0x2fb6 <M_Dio_void_togglePinValue+0x108>
	{
	case DIO_PORTA :TOG_BIT( PORTA_REG,pin);break;
    2f18:	ab e3       	ldi	r26, 0x3B	; 59
    2f1a:	b0 e0       	ldi	r27, 0x00	; 0
    2f1c:	eb e3       	ldi	r30, 0x3B	; 59
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	80 81       	ld	r24, Z
    2f22:	48 2f       	mov	r20, r24
    2f24:	8a 81       	ldd	r24, Y+2	; 0x02
    2f26:	28 2f       	mov	r18, r24
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	02 2e       	mov	r0, r18
    2f30:	02 c0       	rjmp	.+4      	; 0x2f36 <M_Dio_void_togglePinValue+0x88>
    2f32:	88 0f       	add	r24, r24
    2f34:	99 1f       	adc	r25, r25
    2f36:	0a 94       	dec	r0
    2f38:	e2 f7       	brpl	.-8      	; 0x2f32 <M_Dio_void_togglePinValue+0x84>
    2f3a:	84 27       	eor	r24, r20
    2f3c:	8c 93       	st	X, r24
    2f3e:	3b c0       	rjmp	.+118    	; 0x2fb6 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTB :TOG_BIT( PORTB_REG,pin);break;
    2f40:	a8 e3       	ldi	r26, 0x38	; 56
    2f42:	b0 e0       	ldi	r27, 0x00	; 0
    2f44:	e8 e3       	ldi	r30, 0x38	; 56
    2f46:	f0 e0       	ldi	r31, 0x00	; 0
    2f48:	80 81       	ld	r24, Z
    2f4a:	48 2f       	mov	r20, r24
    2f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4e:	28 2f       	mov	r18, r24
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	02 2e       	mov	r0, r18
    2f58:	02 c0       	rjmp	.+4      	; 0x2f5e <M_Dio_void_togglePinValue+0xb0>
    2f5a:	88 0f       	add	r24, r24
    2f5c:	99 1f       	adc	r25, r25
    2f5e:	0a 94       	dec	r0
    2f60:	e2 f7       	brpl	.-8      	; 0x2f5a <M_Dio_void_togglePinValue+0xac>
    2f62:	84 27       	eor	r24, r20
    2f64:	8c 93       	st	X, r24
    2f66:	27 c0       	rjmp	.+78     	; 0x2fb6 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTC :TOG_BIT( PORTC_REG,pin);break;
    2f68:	a5 e3       	ldi	r26, 0x35	; 53
    2f6a:	b0 e0       	ldi	r27, 0x00	; 0
    2f6c:	e5 e3       	ldi	r30, 0x35	; 53
    2f6e:	f0 e0       	ldi	r31, 0x00	; 0
    2f70:	80 81       	ld	r24, Z
    2f72:	48 2f       	mov	r20, r24
    2f74:	8a 81       	ldd	r24, Y+2	; 0x02
    2f76:	28 2f       	mov	r18, r24
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	02 2e       	mov	r0, r18
    2f80:	02 c0       	rjmp	.+4      	; 0x2f86 <M_Dio_void_togglePinValue+0xd8>
    2f82:	88 0f       	add	r24, r24
    2f84:	99 1f       	adc	r25, r25
    2f86:	0a 94       	dec	r0
    2f88:	e2 f7       	brpl	.-8      	; 0x2f82 <M_Dio_void_togglePinValue+0xd4>
    2f8a:	84 27       	eor	r24, r20
    2f8c:	8c 93       	st	X, r24
    2f8e:	13 c0       	rjmp	.+38     	; 0x2fb6 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTD :TOG_BIT( PORTD_REG,pin);break;
    2f90:	a2 e3       	ldi	r26, 0x32	; 50
    2f92:	b0 e0       	ldi	r27, 0x00	; 0
    2f94:	e2 e3       	ldi	r30, 0x32	; 50
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	80 81       	ld	r24, Z
    2f9a:	48 2f       	mov	r20, r24
    2f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9e:	28 2f       	mov	r18, r24
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	81 e0       	ldi	r24, 0x01	; 1
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	02 2e       	mov	r0, r18
    2fa8:	02 c0       	rjmp	.+4      	; 0x2fae <M_Dio_void_togglePinValue+0x100>
    2faa:	88 0f       	add	r24, r24
    2fac:	99 1f       	adc	r25, r25
    2fae:	0a 94       	dec	r0
    2fb0:	e2 f7       	brpl	.-8      	; 0x2faa <M_Dio_void_togglePinValue+0xfc>
    2fb2:	84 27       	eor	r24, r20
    2fb4:	8c 93       	st	X, r24
	}

}
    2fb6:	0f 90       	pop	r0
    2fb8:	0f 90       	pop	r0
    2fba:	0f 90       	pop	r0
    2fbc:	0f 90       	pop	r0
    2fbe:	0f 90       	pop	r0
    2fc0:	cf 91       	pop	r28
    2fc2:	df 91       	pop	r29
    2fc4:	08 95       	ret

00002fc6 <ADC_Init>:
#include"CLCD/CLCD_Init.h"

static void (*ADC_ptr_FUNC)(void)=NULL;

void ADC_Init(ADC_ConfigType *Ptr_to_ADC)
{
    2fc6:	df 93       	push	r29
    2fc8:	cf 93       	push	r28
    2fca:	cd b7       	in	r28, 0x3d	; 61
    2fcc:	de b7       	in	r29, 0x3e	; 62
    2fce:	2a 97       	sbiw	r28, 0x0a	; 10
    2fd0:	0f b6       	in	r0, 0x3f	; 63
    2fd2:	f8 94       	cli
    2fd4:	de bf       	out	0x3e, r29	; 62
    2fd6:	0f be       	out	0x3f, r0	; 63
    2fd8:	cd bf       	out	0x3d, r28	; 61
    2fda:	9a 83       	std	Y+2, r25	; 0x02
    2fdc:	89 83       	std	Y+1, r24	; 0x01
	/*Select VCC*/
	switch(Ptr_to_ADC->Voltage_Ref_Value)
    2fde:	e9 81       	ldd	r30, Y+1	; 0x01
    2fe0:	fa 81       	ldd	r31, Y+2	; 0x02
    2fe2:	80 81       	ld	r24, Z
    2fe4:	28 2f       	mov	r18, r24
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	3a 87       	std	Y+10, r19	; 0x0a
    2fea:	29 87       	std	Y+9, r18	; 0x09
    2fec:	89 85       	ldd	r24, Y+9	; 0x09
    2fee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff0:	80 34       	cpi	r24, 0x40	; 64
    2ff2:	91 05       	cpc	r25, r1
    2ff4:	31 f0       	breq	.+12     	; 0x3002 <ADC_Init+0x3c>
    2ff6:	29 85       	ldd	r18, Y+9	; 0x09
    2ff8:	3a 85       	ldd	r19, Y+10	; 0x0a
    2ffa:	20 3c       	cpi	r18, 0xC0	; 192
    2ffc:	31 05       	cpc	r19, r1
    2ffe:	81 f0       	breq	.+32     	; 0x3020 <ADC_Init+0x5a>
    3000:	1d c0       	rjmp	.+58     	; 0x303c <ADC_Init+0x76>
	{
	case VCC_5V:
		CLR_BIT(ADMUX,ADMUX_REFS1);
    3002:	a7 e2       	ldi	r26, 0x27	; 39
    3004:	b0 e0       	ldi	r27, 0x00	; 0
    3006:	e7 e2       	ldi	r30, 0x27	; 39
    3008:	f0 e0       	ldi	r31, 0x00	; 0
    300a:	80 81       	ld	r24, Z
    300c:	8f 77       	andi	r24, 0x7F	; 127
    300e:	8c 93       	st	X, r24
		SET_BIT(ADMUX,ADMUX_REFS0);
    3010:	a7 e2       	ldi	r26, 0x27	; 39
    3012:	b0 e0       	ldi	r27, 0x00	; 0
    3014:	e7 e2       	ldi	r30, 0x27	; 39
    3016:	f0 e0       	ldi	r31, 0x00	; 0
    3018:	80 81       	ld	r24, Z
    301a:	80 64       	ori	r24, 0x40	; 64
    301c:	8c 93       	st	X, r24
    301e:	0e c0       	rjmp	.+28     	; 0x303c <ADC_Init+0x76>
		break;
	case VREF_2_5_V:
		SET_BIT(ADMUX,ADMUX_REFS1);
    3020:	a7 e2       	ldi	r26, 0x27	; 39
    3022:	b0 e0       	ldi	r27, 0x00	; 0
    3024:	e7 e2       	ldi	r30, 0x27	; 39
    3026:	f0 e0       	ldi	r31, 0x00	; 0
    3028:	80 81       	ld	r24, Z
    302a:	80 68       	ori	r24, 0x80	; 128
    302c:	8c 93       	st	X, r24
		SET_BIT(ADMUX,ADMUX_REFS0);
    302e:	a7 e2       	ldi	r26, 0x27	; 39
    3030:	b0 e0       	ldi	r27, 0x00	; 0
    3032:	e7 e2       	ldi	r30, 0x27	; 39
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	80 81       	ld	r24, Z
    3038:	80 64       	ori	r24, 0x40	; 64
    303a:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
	/*Select adjust type*/
	switch(Ptr_to_ADC->AdjustType)
    303c:	e9 81       	ldd	r30, Y+1	; 0x01
    303e:	fa 81       	ldd	r31, Y+2	; 0x02
    3040:	82 81       	ldd	r24, Z+2	; 0x02
    3042:	28 2f       	mov	r18, r24
    3044:	30 e0       	ldi	r19, 0x00	; 0
    3046:	38 87       	std	Y+8, r19	; 0x08
    3048:	2f 83       	std	Y+7, r18	; 0x07
    304a:	8f 81       	ldd	r24, Y+7	; 0x07
    304c:	98 85       	ldd	r25, Y+8	; 0x08
    304e:	00 97       	sbiw	r24, 0x00	; 0
    3050:	31 f0       	breq	.+12     	; 0x305e <ADC_Init+0x98>
    3052:	2f 81       	ldd	r18, Y+7	; 0x07
    3054:	38 85       	ldd	r19, Y+8	; 0x08
    3056:	20 32       	cpi	r18, 0x20	; 32
    3058:	31 05       	cpc	r19, r1
    305a:	49 f0       	breq	.+18     	; 0x306e <ADC_Init+0xa8>
    305c:	0f c0       	rjmp	.+30     	; 0x307c <ADC_Init+0xb6>
	{
	case Right_Adjust:
		CLR_BIT(ADMUX,ADMUX_ADLAR);
    305e:	a7 e2       	ldi	r26, 0x27	; 39
    3060:	b0 e0       	ldi	r27, 0x00	; 0
    3062:	e7 e2       	ldi	r30, 0x27	; 39
    3064:	f0 e0       	ldi	r31, 0x00	; 0
    3066:	80 81       	ld	r24, Z
    3068:	8f 7d       	andi	r24, 0xDF	; 223
    306a:	8c 93       	st	X, r24
    306c:	07 c0       	rjmp	.+14     	; 0x307c <ADC_Init+0xb6>
		break;
	case Left_Adjust:
		SET_BIT(ADMUX,ADMUX_ADLAR);
    306e:	a7 e2       	ldi	r26, 0x27	; 39
    3070:	b0 e0       	ldi	r27, 0x00	; 0
    3072:	e7 e2       	ldi	r30, 0x27	; 39
    3074:	f0 e0       	ldi	r31, 0x00	; 0
    3076:	80 81       	ld	r24, Z
    3078:	80 62       	ori	r24, 0x20	; 32
    307a:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
	/*Select PRESCALLER*/
	switch(Ptr_to_ADC->Pre_Scaller)
    307c:	e9 81       	ldd	r30, Y+1	; 0x01
    307e:	fa 81       	ldd	r31, Y+2	; 0x02
    3080:	81 81       	ldd	r24, Z+1	; 0x01
    3082:	28 2f       	mov	r18, r24
    3084:	30 e0       	ldi	r19, 0x00	; 0
    3086:	3e 83       	std	Y+6, r19	; 0x06
    3088:	2d 83       	std	Y+5, r18	; 0x05
    308a:	8d 81       	ldd	r24, Y+5	; 0x05
    308c:	9e 81       	ldd	r25, Y+6	; 0x06
    308e:	83 30       	cpi	r24, 0x03	; 3
    3090:	91 05       	cpc	r25, r1
    3092:	09 f4       	brne	.+2      	; 0x3096 <ADC_Init+0xd0>
    3094:	70 c0       	rjmp	.+224    	; 0x3176 <ADC_Init+0x1b0>
    3096:	2d 81       	ldd	r18, Y+5	; 0x05
    3098:	3e 81       	ldd	r19, Y+6	; 0x06
    309a:	24 30       	cpi	r18, 0x04	; 4
    309c:	31 05       	cpc	r19, r1
    309e:	84 f4       	brge	.+32     	; 0x30c0 <ADC_Init+0xfa>
    30a0:	8d 81       	ldd	r24, Y+5	; 0x05
    30a2:	9e 81       	ldd	r25, Y+6	; 0x06
    30a4:	81 30       	cpi	r24, 0x01	; 1
    30a6:	91 05       	cpc	r25, r1
    30a8:	d1 f1       	breq	.+116    	; 0x311e <ADC_Init+0x158>
    30aa:	2d 81       	ldd	r18, Y+5	; 0x05
    30ac:	3e 81       	ldd	r19, Y+6	; 0x06
    30ae:	22 30       	cpi	r18, 0x02	; 2
    30b0:	31 05       	cpc	r19, r1
    30b2:	0c f0       	brlt	.+2      	; 0x30b6 <ADC_Init+0xf0>
    30b4:	4a c0       	rjmp	.+148    	; 0x314a <ADC_Init+0x184>
    30b6:	8d 81       	ldd	r24, Y+5	; 0x05
    30b8:	9e 81       	ldd	r25, Y+6	; 0x06
    30ba:	00 97       	sbiw	r24, 0x00	; 0
    30bc:	d1 f0       	breq	.+52     	; 0x30f2 <ADC_Init+0x12c>
    30be:	c8 c0       	rjmp	.+400    	; 0x3250 <ADC_Init+0x28a>
    30c0:	2d 81       	ldd	r18, Y+5	; 0x05
    30c2:	3e 81       	ldd	r19, Y+6	; 0x06
    30c4:	25 30       	cpi	r18, 0x05	; 5
    30c6:	31 05       	cpc	r19, r1
    30c8:	09 f4       	brne	.+2      	; 0x30cc <ADC_Init+0x106>
    30ca:	81 c0       	rjmp	.+258    	; 0x31ce <ADC_Init+0x208>
    30cc:	8d 81       	ldd	r24, Y+5	; 0x05
    30ce:	9e 81       	ldd	r25, Y+6	; 0x06
    30d0:	85 30       	cpi	r24, 0x05	; 5
    30d2:	91 05       	cpc	r25, r1
    30d4:	0c f4       	brge	.+2      	; 0x30d8 <ADC_Init+0x112>
    30d6:	65 c0       	rjmp	.+202    	; 0x31a2 <ADC_Init+0x1dc>
    30d8:	2d 81       	ldd	r18, Y+5	; 0x05
    30da:	3e 81       	ldd	r19, Y+6	; 0x06
    30dc:	26 30       	cpi	r18, 0x06	; 6
    30de:	31 05       	cpc	r19, r1
    30e0:	09 f4       	brne	.+2      	; 0x30e4 <ADC_Init+0x11e>
    30e2:	8b c0       	rjmp	.+278    	; 0x31fa <ADC_Init+0x234>
    30e4:	8d 81       	ldd	r24, Y+5	; 0x05
    30e6:	9e 81       	ldd	r25, Y+6	; 0x06
    30e8:	87 30       	cpi	r24, 0x07	; 7
    30ea:	91 05       	cpc	r25, r1
    30ec:	09 f4       	brne	.+2      	; 0x30f0 <ADC_Init+0x12a>
    30ee:	9b c0       	rjmp	.+310    	; 0x3226 <ADC_Init+0x260>
    30f0:	af c0       	rjmp	.+350    	; 0x3250 <ADC_Init+0x28a>
	{
	case DIV_BY_2_0:
		CLR_BIT(ADCSRA,ADCSRA_ADPS0);
    30f2:	a6 e2       	ldi	r26, 0x26	; 38
    30f4:	b0 e0       	ldi	r27, 0x00	; 0
    30f6:	e6 e2       	ldi	r30, 0x26	; 38
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
    30fa:	80 81       	ld	r24, Z
    30fc:	8e 7f       	andi	r24, 0xFE	; 254
    30fe:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADCSRA_ADPS1);
    3100:	a6 e2       	ldi	r26, 0x26	; 38
    3102:	b0 e0       	ldi	r27, 0x00	; 0
    3104:	e6 e2       	ldi	r30, 0x26	; 38
    3106:	f0 e0       	ldi	r31, 0x00	; 0
    3108:	80 81       	ld	r24, Z
    310a:	8d 7f       	andi	r24, 0xFD	; 253
    310c:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADCSRA_ADPS2);
    310e:	a6 e2       	ldi	r26, 0x26	; 38
    3110:	b0 e0       	ldi	r27, 0x00	; 0
    3112:	e6 e2       	ldi	r30, 0x26	; 38
    3114:	f0 e0       	ldi	r31, 0x00	; 0
    3116:	80 81       	ld	r24, Z
    3118:	8b 7f       	andi	r24, 0xFB	; 251
    311a:	8c 93       	st	X, r24
    311c:	99 c0       	rjmp	.+306    	; 0x3250 <ADC_Init+0x28a>
		break;
	case DIV_BY_2:
		SET_BIT(ADCSRA,ADCSRA_ADPS0);
    311e:	a6 e2       	ldi	r26, 0x26	; 38
    3120:	b0 e0       	ldi	r27, 0x00	; 0
    3122:	e6 e2       	ldi	r30, 0x26	; 38
    3124:	f0 e0       	ldi	r31, 0x00	; 0
    3126:	80 81       	ld	r24, Z
    3128:	81 60       	ori	r24, 0x01	; 1
    312a:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADCSRA_ADPS1);
    312c:	a6 e2       	ldi	r26, 0x26	; 38
    312e:	b0 e0       	ldi	r27, 0x00	; 0
    3130:	e6 e2       	ldi	r30, 0x26	; 38
    3132:	f0 e0       	ldi	r31, 0x00	; 0
    3134:	80 81       	ld	r24, Z
    3136:	8d 7f       	andi	r24, 0xFD	; 253
    3138:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADCSRA_ADPS2);
    313a:	a6 e2       	ldi	r26, 0x26	; 38
    313c:	b0 e0       	ldi	r27, 0x00	; 0
    313e:	e6 e2       	ldi	r30, 0x26	; 38
    3140:	f0 e0       	ldi	r31, 0x00	; 0
    3142:	80 81       	ld	r24, Z
    3144:	8b 7f       	andi	r24, 0xFB	; 251
    3146:	8c 93       	st	X, r24
    3148:	83 c0       	rjmp	.+262    	; 0x3250 <ADC_Init+0x28a>
		break;
	case DIV_BY_4:
		CLR_BIT(ADCSRA,ADCSRA_ADPS0);
    314a:	a6 e2       	ldi	r26, 0x26	; 38
    314c:	b0 e0       	ldi	r27, 0x00	; 0
    314e:	e6 e2       	ldi	r30, 0x26	; 38
    3150:	f0 e0       	ldi	r31, 0x00	; 0
    3152:	80 81       	ld	r24, Z
    3154:	8e 7f       	andi	r24, 0xFE	; 254
    3156:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS1);
    3158:	a6 e2       	ldi	r26, 0x26	; 38
    315a:	b0 e0       	ldi	r27, 0x00	; 0
    315c:	e6 e2       	ldi	r30, 0x26	; 38
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	80 81       	ld	r24, Z
    3162:	82 60       	ori	r24, 0x02	; 2
    3164:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADCSRA_ADPS2);
    3166:	a6 e2       	ldi	r26, 0x26	; 38
    3168:	b0 e0       	ldi	r27, 0x00	; 0
    316a:	e6 e2       	ldi	r30, 0x26	; 38
    316c:	f0 e0       	ldi	r31, 0x00	; 0
    316e:	80 81       	ld	r24, Z
    3170:	8b 7f       	andi	r24, 0xFB	; 251
    3172:	8c 93       	st	X, r24
    3174:	6d c0       	rjmp	.+218    	; 0x3250 <ADC_Init+0x28a>
		break;
	case DIV_BY_8:
		SET_BIT(ADCSRA,ADCSRA_ADPS0);
    3176:	a6 e2       	ldi	r26, 0x26	; 38
    3178:	b0 e0       	ldi	r27, 0x00	; 0
    317a:	e6 e2       	ldi	r30, 0x26	; 38
    317c:	f0 e0       	ldi	r31, 0x00	; 0
    317e:	80 81       	ld	r24, Z
    3180:	81 60       	ori	r24, 0x01	; 1
    3182:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS1);
    3184:	a6 e2       	ldi	r26, 0x26	; 38
    3186:	b0 e0       	ldi	r27, 0x00	; 0
    3188:	e6 e2       	ldi	r30, 0x26	; 38
    318a:	f0 e0       	ldi	r31, 0x00	; 0
    318c:	80 81       	ld	r24, Z
    318e:	82 60       	ori	r24, 0x02	; 2
    3190:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADCSRA_ADPS2);
    3192:	a6 e2       	ldi	r26, 0x26	; 38
    3194:	b0 e0       	ldi	r27, 0x00	; 0
    3196:	e6 e2       	ldi	r30, 0x26	; 38
    3198:	f0 e0       	ldi	r31, 0x00	; 0
    319a:	80 81       	ld	r24, Z
    319c:	8b 7f       	andi	r24, 0xFB	; 251
    319e:	8c 93       	st	X, r24
    31a0:	57 c0       	rjmp	.+174    	; 0x3250 <ADC_Init+0x28a>
		break;
	case DIV_BY_16:
		CLR_BIT(ADCSRA,ADCSRA_ADPS0);
    31a2:	a6 e2       	ldi	r26, 0x26	; 38
    31a4:	b0 e0       	ldi	r27, 0x00	; 0
    31a6:	e6 e2       	ldi	r30, 0x26	; 38
    31a8:	f0 e0       	ldi	r31, 0x00	; 0
    31aa:	80 81       	ld	r24, Z
    31ac:	8e 7f       	andi	r24, 0xFE	; 254
    31ae:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADCSRA_ADPS1);
    31b0:	a6 e2       	ldi	r26, 0x26	; 38
    31b2:	b0 e0       	ldi	r27, 0x00	; 0
    31b4:	e6 e2       	ldi	r30, 0x26	; 38
    31b6:	f0 e0       	ldi	r31, 0x00	; 0
    31b8:	80 81       	ld	r24, Z
    31ba:	8d 7f       	andi	r24, 0xFD	; 253
    31bc:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS2);
    31be:	a6 e2       	ldi	r26, 0x26	; 38
    31c0:	b0 e0       	ldi	r27, 0x00	; 0
    31c2:	e6 e2       	ldi	r30, 0x26	; 38
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	80 81       	ld	r24, Z
    31c8:	84 60       	ori	r24, 0x04	; 4
    31ca:	8c 93       	st	X, r24
    31cc:	41 c0       	rjmp	.+130    	; 0x3250 <ADC_Init+0x28a>
		break;
	case DIV_BY_32:
		SET_BIT(ADCSRA,ADCSRA_ADPS0);
    31ce:	a6 e2       	ldi	r26, 0x26	; 38
    31d0:	b0 e0       	ldi	r27, 0x00	; 0
    31d2:	e6 e2       	ldi	r30, 0x26	; 38
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	80 81       	ld	r24, Z
    31d8:	81 60       	ori	r24, 0x01	; 1
    31da:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADCSRA_ADPS1);
    31dc:	a6 e2       	ldi	r26, 0x26	; 38
    31de:	b0 e0       	ldi	r27, 0x00	; 0
    31e0:	e6 e2       	ldi	r30, 0x26	; 38
    31e2:	f0 e0       	ldi	r31, 0x00	; 0
    31e4:	80 81       	ld	r24, Z
    31e6:	8d 7f       	andi	r24, 0xFD	; 253
    31e8:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS2);
    31ea:	a6 e2       	ldi	r26, 0x26	; 38
    31ec:	b0 e0       	ldi	r27, 0x00	; 0
    31ee:	e6 e2       	ldi	r30, 0x26	; 38
    31f0:	f0 e0       	ldi	r31, 0x00	; 0
    31f2:	80 81       	ld	r24, Z
    31f4:	84 60       	ori	r24, 0x04	; 4
    31f6:	8c 93       	st	X, r24
    31f8:	2b c0       	rjmp	.+86     	; 0x3250 <ADC_Init+0x28a>
		break;
	case DIV_BY_64:
		CLR_BIT(ADCSRA,ADCSRA_ADPS0);
    31fa:	a6 e2       	ldi	r26, 0x26	; 38
    31fc:	b0 e0       	ldi	r27, 0x00	; 0
    31fe:	e6 e2       	ldi	r30, 0x26	; 38
    3200:	f0 e0       	ldi	r31, 0x00	; 0
    3202:	80 81       	ld	r24, Z
    3204:	8e 7f       	andi	r24, 0xFE	; 254
    3206:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS1);
    3208:	a6 e2       	ldi	r26, 0x26	; 38
    320a:	b0 e0       	ldi	r27, 0x00	; 0
    320c:	e6 e2       	ldi	r30, 0x26	; 38
    320e:	f0 e0       	ldi	r31, 0x00	; 0
    3210:	80 81       	ld	r24, Z
    3212:	82 60       	ori	r24, 0x02	; 2
    3214:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS2);
    3216:	a6 e2       	ldi	r26, 0x26	; 38
    3218:	b0 e0       	ldi	r27, 0x00	; 0
    321a:	e6 e2       	ldi	r30, 0x26	; 38
    321c:	f0 e0       	ldi	r31, 0x00	; 0
    321e:	80 81       	ld	r24, Z
    3220:	84 60       	ori	r24, 0x04	; 4
    3222:	8c 93       	st	X, r24
    3224:	15 c0       	rjmp	.+42     	; 0x3250 <ADC_Init+0x28a>
		break;
	case DIV_BY_128:
		SET_BIT(ADCSRA,ADCSRA_ADPS0);
    3226:	a6 e2       	ldi	r26, 0x26	; 38
    3228:	b0 e0       	ldi	r27, 0x00	; 0
    322a:	e6 e2       	ldi	r30, 0x26	; 38
    322c:	f0 e0       	ldi	r31, 0x00	; 0
    322e:	80 81       	ld	r24, Z
    3230:	81 60       	ori	r24, 0x01	; 1
    3232:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS1);
    3234:	a6 e2       	ldi	r26, 0x26	; 38
    3236:	b0 e0       	ldi	r27, 0x00	; 0
    3238:	e6 e2       	ldi	r30, 0x26	; 38
    323a:	f0 e0       	ldi	r31, 0x00	; 0
    323c:	80 81       	ld	r24, Z
    323e:	82 60       	ori	r24, 0x02	; 2
    3240:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS2);
    3242:	a6 e2       	ldi	r26, 0x26	; 38
    3244:	b0 e0       	ldi	r27, 0x00	; 0
    3246:	e6 e2       	ldi	r30, 0x26	; 38
    3248:	f0 e0       	ldi	r31, 0x00	; 0
    324a:	80 81       	ld	r24, Z
    324c:	84 60       	ori	r24, 0x04	; 4
    324e:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
	/*Enable or Disable Auto trigger*/
	switch(Ptr_to_ADC->Trigger)
    3250:	e9 81       	ldd	r30, Y+1	; 0x01
    3252:	fa 81       	ldd	r31, Y+2	; 0x02
    3254:	84 81       	ldd	r24, Z+4	; 0x04
    3256:	28 2f       	mov	r18, r24
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	3c 83       	std	Y+4, r19	; 0x04
    325c:	2b 83       	std	Y+3, r18	; 0x03
    325e:	8b 81       	ldd	r24, Y+3	; 0x03
    3260:	9c 81       	ldd	r25, Y+4	; 0x04
    3262:	00 97       	sbiw	r24, 0x00	; 0
    3264:	31 f0       	breq	.+12     	; 0x3272 <ADC_Init+0x2ac>
    3266:	2b 81       	ldd	r18, Y+3	; 0x03
    3268:	3c 81       	ldd	r19, Y+4	; 0x04
    326a:	21 30       	cpi	r18, 0x01	; 1
    326c:	31 05       	cpc	r19, r1
    326e:	49 f0       	breq	.+18     	; 0x3282 <ADC_Init+0x2bc>
    3270:	0f c0       	rjmp	.+30     	; 0x3290 <ADC_Init+0x2ca>
	{
	case AUTO_Trigger_Enable:
		SET_BIT(ADCSRA,ADCSRA_ADATE);
    3272:	a6 e2       	ldi	r26, 0x26	; 38
    3274:	b0 e0       	ldi	r27, 0x00	; 0
    3276:	e6 e2       	ldi	r30, 0x26	; 38
    3278:	f0 e0       	ldi	r31, 0x00	; 0
    327a:	80 81       	ld	r24, Z
    327c:	80 62       	ori	r24, 0x20	; 32
    327e:	8c 93       	st	X, r24
    3280:	07 c0       	rjmp	.+14     	; 0x3290 <ADC_Init+0x2ca>
		break;
	case AUTO_Trigger_Disable:
		CLR_BIT(ADCSRA,ADCSRA_ADATE);
    3282:	a6 e2       	ldi	r26, 0x26	; 38
    3284:	b0 e0       	ldi	r27, 0x00	; 0
    3286:	e6 e2       	ldi	r30, 0x26	; 38
    3288:	f0 e0       	ldi	r31, 0x00	; 0
    328a:	80 81       	ld	r24, Z
    328c:	8f 7d       	andi	r24, 0xDF	; 223
    328e:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
	/*Trigger type*/
	switch(Ptr_to_ADC->Trigger_Type)
    3290:	e9 81       	ldd	r30, Y+1	; 0x01
    3292:	fa 81       	ldd	r31, Y+2	; 0x02
    3294:	85 81       	ldd	r24, Z+5	; 0x05
    3296:	88 2f       	mov	r24, r24
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	00 97       	sbiw	r24, 0x00	; 0
    329c:	69 f4       	brne	.+26     	; 0x32b8 <ADC_Init+0x2f2>
	{
	case Free_Runnin_Mode:
		SFIOR &= SFIOR_ADC_FREE_RUNNING_MODE_CLEAR;
    329e:	a0 e5       	ldi	r26, 0x50	; 80
    32a0:	b0 e0       	ldi	r27, 0x00	; 0
    32a2:	e0 e5       	ldi	r30, 0x50	; 80
    32a4:	f0 e0       	ldi	r31, 0x00	; 0
    32a6:	80 81       	ld	r24, Z
    32a8:	8f 71       	andi	r24, 0x1F	; 31
    32aa:	8c 93       	st	X, r24
		SFIOR |= SFIOR_ADC_FREE_RUNNING_MODE_SET;
    32ac:	a0 e5       	ldi	r26, 0x50	; 80
    32ae:	b0 e0       	ldi	r27, 0x00	; 0
    32b0:	e0 e5       	ldi	r30, 0x50	; 80
    32b2:	f0 e0       	ldi	r31, 0x00	; 0
    32b4:	80 81       	ld	r24, Z
    32b6:	8c 93       	st	X, r24
	default:
		break;
	}

	/*ADC_ENABLE*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    32b8:	a6 e2       	ldi	r26, 0x26	; 38
    32ba:	b0 e0       	ldi	r27, 0x00	; 0
    32bc:	e6 e2       	ldi	r30, 0x26	; 38
    32be:	f0 e0       	ldi	r31, 0x00	; 0
    32c0:	80 81       	ld	r24, Z
    32c2:	80 68       	ori	r24, 0x80	; 128
    32c4:	8c 93       	st	X, r24
}
    32c6:	2a 96       	adiw	r28, 0x0a	; 10
    32c8:	0f b6       	in	r0, 0x3f	; 63
    32ca:	f8 94       	cli
    32cc:	de bf       	out	0x3e, r29	; 62
    32ce:	0f be       	out	0x3f, r0	; 63
    32d0:	cd bf       	out	0x3d, r28	; 61
    32d2:	cf 91       	pop	r28
    32d4:	df 91       	pop	r29
    32d6:	08 95       	ret

000032d8 <ADC_getDigitalValueSynchNonBlocking>:


u16 ADC_getDigitalValueSynchNonBlocking(Analog_Channel_Select Channel,ADC_Start ADC_Status)
{
    32d8:	df 93       	push	r29
    32da:	cf 93       	push	r28
    32dc:	cd b7       	in	r28, 0x3d	; 61
    32de:	de b7       	in	r29, 0x3e	; 62
    32e0:	2a 97       	sbiw	r28, 0x0a	; 10
    32e2:	0f b6       	in	r0, 0x3f	; 63
    32e4:	f8 94       	cli
    32e6:	de bf       	out	0x3e, r29	; 62
    32e8:	0f be       	out	0x3f, r0	; 63
    32ea:	cd bf       	out	0x3d, r28	; 61
    32ec:	8d 83       	std	Y+5, r24	; 0x05
    32ee:	6e 83       	std	Y+6, r22	; 0x06
	u16 Reading_value=0;
    32f0:	1c 82       	std	Y+4, r1	; 0x04
    32f2:	1b 82       	std	Y+3, r1	; 0x03
	u16 Counter=0;
    32f4:	1a 82       	std	Y+2, r1	; 0x02
    32f6:	19 82       	std	Y+1, r1	; 0x01

	/*Select ADC Port*/
	ADMUX &= ADMUX_MUX_CLEAR;
    32f8:	a7 e2       	ldi	r26, 0x27	; 39
    32fa:	b0 e0       	ldi	r27, 0x00	; 0
    32fc:	e7 e2       	ldi	r30, 0x27	; 39
    32fe:	f0 e0       	ldi	r31, 0x00	; 0
    3300:	80 81       	ld	r24, Z
    3302:	80 7e       	andi	r24, 0xE0	; 224
    3304:	8c 93       	st	X, r24
	ADMUX |= Channel;
    3306:	a7 e2       	ldi	r26, 0x27	; 39
    3308:	b0 e0       	ldi	r27, 0x00	; 0
    330a:	e7 e2       	ldi	r30, 0x27	; 39
    330c:	f0 e0       	ldi	r31, 0x00	; 0
    330e:	90 81       	ld	r25, Z
    3310:	8d 81       	ldd	r24, Y+5	; 0x05
    3312:	89 2b       	or	r24, r25
    3314:	8c 93       	st	X, r24
	/*Enable ADC*/
	switch(ADC_Status)
    3316:	8e 81       	ldd	r24, Y+6	; 0x06
    3318:	28 2f       	mov	r18, r24
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	3a 87       	std	Y+10, r19	; 0x0a
    331e:	29 87       	std	Y+9, r18	; 0x09
    3320:	89 85       	ldd	r24, Y+9	; 0x09
    3322:	9a 85       	ldd	r25, Y+10	; 0x0a
    3324:	00 97       	sbiw	r24, 0x00	; 0
    3326:	69 f0       	breq	.+26     	; 0x3342 <ADC_getDigitalValueSynchNonBlocking+0x6a>
    3328:	29 85       	ldd	r18, Y+9	; 0x09
    332a:	3a 85       	ldd	r19, Y+10	; 0x0a
    332c:	21 30       	cpi	r18, 0x01	; 1
    332e:	31 05       	cpc	r19, r1
    3330:	79 f4       	brne	.+30     	; 0x3350 <ADC_getDigitalValueSynchNonBlocking+0x78>
	{
	case ENABLE:
		SET_BIT(ADCSRA,ADCSRA_ADEN);
    3332:	a6 e2       	ldi	r26, 0x26	; 38
    3334:	b0 e0       	ldi	r27, 0x00	; 0
    3336:	e6 e2       	ldi	r30, 0x26	; 38
    3338:	f0 e0       	ldi	r31, 0x00	; 0
    333a:	80 81       	ld	r24, Z
    333c:	80 68       	ori	r24, 0x80	; 128
    333e:	8c 93       	st	X, r24
    3340:	07 c0       	rjmp	.+14     	; 0x3350 <ADC_getDigitalValueSynchNonBlocking+0x78>
		break;
	case DISABLE:
		CLR_BIT(ADCSRA,ADCSRA_ADEN);
    3342:	a6 e2       	ldi	r26, 0x26	; 38
    3344:	b0 e0       	ldi	r27, 0x00	; 0
    3346:	e6 e2       	ldi	r30, 0x26	; 38
    3348:	f0 e0       	ldi	r31, 0x00	; 0
    334a:	80 81       	ld	r24, Z
    334c:	8f 77       	andi	r24, 0x7F	; 127
    334e:	8c 93       	st	X, r24
		break;
	}
	/*Start Conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    3350:	a6 e2       	ldi	r26, 0x26	; 38
    3352:	b0 e0       	ldi	r27, 0x00	; 0
    3354:	e6 e2       	ldi	r30, 0x26	; 38
    3356:	f0 e0       	ldi	r31, 0x00	; 0
    3358:	80 81       	ld	r24, Z
    335a:	80 64       	ori	r24, 0x40	; 64
    335c:	8c 93       	st	X, r24
    335e:	05 c0       	rjmp	.+10     	; 0x336a <ADC_getDigitalValueSynchNonBlocking+0x92>
	/*loop for the conversion to end*/
	while((GET_BIT(ADCSRA,ADCSRA_ADSC))==1 || Counter<MAX_DELAY)
	{
		Counter++;
    3360:	89 81       	ldd	r24, Y+1	; 0x01
    3362:	9a 81       	ldd	r25, Y+2	; 0x02
    3364:	01 96       	adiw	r24, 0x01	; 1
    3366:	9a 83       	std	Y+2, r25	; 0x02
    3368:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/*Start Conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
	/*loop for the conversion to end*/
	while((GET_BIT(ADCSRA,ADCSRA_ADSC))==1 || Counter<MAX_DELAY)
    336a:	e6 e2       	ldi	r30, 0x26	; 38
    336c:	f0 e0       	ldi	r31, 0x00	; 0
    336e:	80 81       	ld	r24, Z
    3370:	82 95       	swap	r24
    3372:	86 95       	lsr	r24
    3374:	86 95       	lsr	r24
    3376:	83 70       	andi	r24, 0x03	; 3
    3378:	88 2f       	mov	r24, r24
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	81 70       	andi	r24, 0x01	; 1
    337e:	90 70       	andi	r25, 0x00	; 0
    3380:	88 23       	and	r24, r24
    3382:	71 f7       	brne	.-36     	; 0x3360 <ADC_getDigitalValueSynchNonBlocking+0x88>
    3384:	89 81       	ldd	r24, Y+1	; 0x01
    3386:	9a 81       	ldd	r25, Y+2	; 0x02
    3388:	33 ec       	ldi	r19, 0xC3	; 195
    338a:	80 35       	cpi	r24, 0x50	; 80
    338c:	93 07       	cpc	r25, r19
    338e:	40 f3       	brcs	.-48     	; 0x3360 <ADC_getDigitalValueSynchNonBlocking+0x88>
	{
		Counter++;
	}
	if((GET_BIT(ADCSRA,ADCSRA_ADSC))==0)
    3390:	e6 e2       	ldi	r30, 0x26	; 38
    3392:	f0 e0       	ldi	r31, 0x00	; 0
    3394:	80 81       	ld	r24, Z
    3396:	82 95       	swap	r24
    3398:	86 95       	lsr	r24
    339a:	86 95       	lsr	r24
    339c:	83 70       	andi	r24, 0x03	; 3
    339e:	88 2f       	mov	r24, r24
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	81 70       	andi	r24, 0x01	; 1
    33a4:	90 70       	andi	r25, 0x00	; 0
    33a6:	00 97       	sbiw	r24, 0x00	; 0
    33a8:	39 f4       	brne	.+14     	; 0x33b8 <ADC_getDigitalValueSynchNonBlocking+0xe0>
	{

		return ADCL_L;
    33aa:	e4 e2       	ldi	r30, 0x24	; 36
    33ac:	f0 e0       	ldi	r31, 0x00	; 0
    33ae:	80 81       	ld	r24, Z
    33b0:	91 81       	ldd	r25, Z+1	; 0x01
    33b2:	98 87       	std	Y+8, r25	; 0x08
    33b4:	8f 83       	std	Y+7, r24	; 0x07
    33b6:	02 c0       	rjmp	.+4      	; 0x33bc <ADC_getDigitalValueSynchNonBlocking+0xe4>
	}
	else
	{
		return 0;
    33b8:	18 86       	std	Y+8, r1	; 0x08
    33ba:	1f 82       	std	Y+7, r1	; 0x07
    33bc:	8f 81       	ldd	r24, Y+7	; 0x07
    33be:	98 85       	ldd	r25, Y+8	; 0x08
	}
}
    33c0:	2a 96       	adiw	r28, 0x0a	; 10
    33c2:	0f b6       	in	r0, 0x3f	; 63
    33c4:	f8 94       	cli
    33c6:	de bf       	out	0x3e, r29	; 62
    33c8:	0f be       	out	0x3f, r0	; 63
    33ca:	cd bf       	out	0x3d, r28	; 61
    33cc:	cf 91       	pop	r28
    33ce:	df 91       	pop	r29
    33d0:	08 95       	ret

000033d2 <ADC_getDigitalValueAsynchCallBack>:


void ADC_getDigitalValueAsynchCallBack(Analog_Channel_Select Channel,ADC_Start ADC_Status,Interrupt_Status Interrupt_status)
{
    33d2:	df 93       	push	r29
    33d4:	cf 93       	push	r28
    33d6:	cd b7       	in	r28, 0x3d	; 61
    33d8:	de b7       	in	r29, 0x3e	; 62
    33da:	27 97       	sbiw	r28, 0x07	; 7
    33dc:	0f b6       	in	r0, 0x3f	; 63
    33de:	f8 94       	cli
    33e0:	de bf       	out	0x3e, r29	; 62
    33e2:	0f be       	out	0x3f, r0	; 63
    33e4:	cd bf       	out	0x3d, r28	; 61
    33e6:	89 83       	std	Y+1, r24	; 0x01
    33e8:	6a 83       	std	Y+2, r22	; 0x02
    33ea:	4b 83       	std	Y+3, r20	; 0x03

	/*Select ADC Port*/
	ADMUX &= ADMUX_MUX_CLEAR;
    33ec:	a7 e2       	ldi	r26, 0x27	; 39
    33ee:	b0 e0       	ldi	r27, 0x00	; 0
    33f0:	e7 e2       	ldi	r30, 0x27	; 39
    33f2:	f0 e0       	ldi	r31, 0x00	; 0
    33f4:	80 81       	ld	r24, Z
    33f6:	80 7e       	andi	r24, 0xE0	; 224
    33f8:	8c 93       	st	X, r24
	ADMUX |= Channel;
    33fa:	a7 e2       	ldi	r26, 0x27	; 39
    33fc:	b0 e0       	ldi	r27, 0x00	; 0
    33fe:	e7 e2       	ldi	r30, 0x27	; 39
    3400:	f0 e0       	ldi	r31, 0x00	; 0
    3402:	90 81       	ld	r25, Z
    3404:	89 81       	ldd	r24, Y+1	; 0x01
    3406:	89 2b       	or	r24, r25
    3408:	8c 93       	st	X, r24
	/*Enable ADC*/
	switch(ADC_Status)
    340a:	8a 81       	ldd	r24, Y+2	; 0x02
    340c:	28 2f       	mov	r18, r24
    340e:	30 e0       	ldi	r19, 0x00	; 0
    3410:	3f 83       	std	Y+7, r19	; 0x07
    3412:	2e 83       	std	Y+6, r18	; 0x06
    3414:	8e 81       	ldd	r24, Y+6	; 0x06
    3416:	9f 81       	ldd	r25, Y+7	; 0x07
    3418:	00 97       	sbiw	r24, 0x00	; 0
    341a:	a1 f0       	breq	.+40     	; 0x3444 <ADC_getDigitalValueAsynchCallBack+0x72>
    341c:	2e 81       	ldd	r18, Y+6	; 0x06
    341e:	3f 81       	ldd	r19, Y+7	; 0x07
    3420:	21 30       	cpi	r18, 0x01	; 1
    3422:	31 05       	cpc	r19, r1
    3424:	b1 f4       	brne	.+44     	; 0x3452 <ADC_getDigitalValueAsynchCallBack+0x80>
	{
	case ENABLE:
		ADCSRA &= ADCSRA_ADC_ENABLE_MASK_CLEAR;
    3426:	a6 e2       	ldi	r26, 0x26	; 38
    3428:	b0 e0       	ldi	r27, 0x00	; 0
    342a:	e6 e2       	ldi	r30, 0x26	; 38
    342c:	f0 e0       	ldi	r31, 0x00	; 0
    342e:	80 81       	ld	r24, Z
    3430:	8f 77       	andi	r24, 0x7F	; 127
    3432:	8c 93       	st	X, r24
		ADCSRA |= ADCSRA_ADC_ENABLE_MASK_SET;
    3434:	a6 e2       	ldi	r26, 0x26	; 38
    3436:	b0 e0       	ldi	r27, 0x00	; 0
    3438:	e6 e2       	ldi	r30, 0x26	; 38
    343a:	f0 e0       	ldi	r31, 0x00	; 0
    343c:	80 81       	ld	r24, Z
    343e:	80 68       	ori	r24, 0x80	; 128
    3440:	8c 93       	st	X, r24
    3442:	07 c0       	rjmp	.+14     	; 0x3452 <ADC_getDigitalValueAsynchCallBack+0x80>
		break;
	case DISABLE:
		ADCSRA &= ADCSRA_ADC_ENABLE_MASK_CLEAR;
    3444:	a6 e2       	ldi	r26, 0x26	; 38
    3446:	b0 e0       	ldi	r27, 0x00	; 0
    3448:	e6 e2       	ldi	r30, 0x26	; 38
    344a:	f0 e0       	ldi	r31, 0x00	; 0
    344c:	80 81       	ld	r24, Z
    344e:	8f 77       	andi	r24, 0x7F	; 127
    3450:	8c 93       	st	X, r24
		break;
	}


	/*Enable Interrupt*/
	switch(Interrupt_status)
    3452:	8b 81       	ldd	r24, Y+3	; 0x03
    3454:	28 2f       	mov	r18, r24
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	3d 83       	std	Y+5, r19	; 0x05
    345a:	2c 83       	std	Y+4, r18	; 0x04
    345c:	8c 81       	ldd	r24, Y+4	; 0x04
    345e:	9d 81       	ldd	r25, Y+5	; 0x05
    3460:	00 97       	sbiw	r24, 0x00	; 0
    3462:	31 f0       	breq	.+12     	; 0x3470 <ADC_getDigitalValueAsynchCallBack+0x9e>
    3464:	2c 81       	ldd	r18, Y+4	; 0x04
    3466:	3d 81       	ldd	r19, Y+5	; 0x05
    3468:	21 30       	cpi	r18, 0x01	; 1
    346a:	31 05       	cpc	r19, r1
    346c:	81 f0       	breq	.+32     	; 0x348e <ADC_getDigitalValueAsynchCallBack+0xbc>
    346e:	16 c0       	rjmp	.+44     	; 0x349c <ADC_getDigitalValueAsynchCallBack+0xca>
	{
	case Interrupt_Enable:
		ADCSRA &= ADC_Interrupt_Clear_Mask;
    3470:	a6 e2       	ldi	r26, 0x26	; 38
    3472:	b0 e0       	ldi	r27, 0x00	; 0
    3474:	e6 e2       	ldi	r30, 0x26	; 38
    3476:	f0 e0       	ldi	r31, 0x00	; 0
    3478:	80 81       	ld	r24, Z
    347a:	87 7f       	andi	r24, 0xF7	; 247
    347c:	8c 93       	st	X, r24
		ADCSRA |= ADC_Interrupt_Set_Mask;
    347e:	a6 e2       	ldi	r26, 0x26	; 38
    3480:	b0 e0       	ldi	r27, 0x00	; 0
    3482:	e6 e2       	ldi	r30, 0x26	; 38
    3484:	f0 e0       	ldi	r31, 0x00	; 0
    3486:	80 81       	ld	r24, Z
    3488:	88 60       	ori	r24, 0x08	; 8
    348a:	8c 93       	st	X, r24
    348c:	07 c0       	rjmp	.+14     	; 0x349c <ADC_getDigitalValueAsynchCallBack+0xca>
		break;
	case Interrupt_Disable:
		ADCSRA &= ADC_Interrupt_Clear_Mask;
    348e:	a6 e2       	ldi	r26, 0x26	; 38
    3490:	b0 e0       	ldi	r27, 0x00	; 0
    3492:	e6 e2       	ldi	r30, 0x26	; 38
    3494:	f0 e0       	ldi	r31, 0x00	; 0
    3496:	80 81       	ld	r24, Z
    3498:	87 7f       	andi	r24, 0xF7	; 247
    349a:	8c 93       	st	X, r24
	default:
		break;
	}
	//SET_BIT(ADCSRA,ADCSRA_ADIE);
	/*Start Conversion*/
	ADCSRA &= ADCSRA_ADC_START_CONV_CLEAR;
    349c:	a6 e2       	ldi	r26, 0x26	; 38
    349e:	b0 e0       	ldi	r27, 0x00	; 0
    34a0:	e6 e2       	ldi	r30, 0x26	; 38
    34a2:	f0 e0       	ldi	r31, 0x00	; 0
    34a4:	80 81       	ld	r24, Z
    34a6:	8f 7b       	andi	r24, 0xBF	; 191
    34a8:	8c 93       	st	X, r24
	ADCSRA |= ADCSRA_ADC_START_CONV_SET;
    34aa:	a6 e2       	ldi	r26, 0x26	; 38
    34ac:	b0 e0       	ldi	r27, 0x00	; 0
    34ae:	e6 e2       	ldi	r30, 0x26	; 38
    34b0:	f0 e0       	ldi	r31, 0x00	; 0
    34b2:	80 81       	ld	r24, Z
    34b4:	80 64       	ori	r24, 0x40	; 64
    34b6:	8c 93       	st	X, r24

}
    34b8:	27 96       	adiw	r28, 0x07	; 7
    34ba:	0f b6       	in	r0, 0x3f	; 63
    34bc:	f8 94       	cli
    34be:	de bf       	out	0x3e, r29	; 62
    34c0:	0f be       	out	0x3f, r0	; 63
    34c2:	cd bf       	out	0x3d, r28	; 61
    34c4:	cf 91       	pop	r28
    34c6:	df 91       	pop	r29
    34c8:	08 95       	ret

000034ca <ADC_Get_Value_Reading>:

u16 ADC_Get_Value_Reading(void)
{
    34ca:	df 93       	push	r29
    34cc:	cf 93       	push	r28
    34ce:	cd b7       	in	r28, 0x3d	; 61
    34d0:	de b7       	in	r29, 0x3e	; 62
	return ADCL_L;
    34d2:	e4 e2       	ldi	r30, 0x24	; 36
    34d4:	f0 e0       	ldi	r31, 0x00	; 0
    34d6:	80 81       	ld	r24, Z
    34d8:	91 81       	ldd	r25, Z+1	; 0x01
}
    34da:	cf 91       	pop	r28
    34dc:	df 91       	pop	r29
    34de:	08 95       	ret

000034e0 <ADC_Interrupt_Enable>:
void ADC_Interrupt_Enable(void)
{
    34e0:	df 93       	push	r29
    34e2:	cf 93       	push	r28
    34e4:	cd b7       	in	r28, 0x3d	; 61
    34e6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADCSRA_ADIE);
    34e8:	a6 e2       	ldi	r26, 0x26	; 38
    34ea:	b0 e0       	ldi	r27, 0x00	; 0
    34ec:	e6 e2       	ldi	r30, 0x26	; 38
    34ee:	f0 e0       	ldi	r31, 0x00	; 0
    34f0:	80 81       	ld	r24, Z
    34f2:	88 60       	ori	r24, 0x08	; 8
    34f4:	8c 93       	st	X, r24

}
    34f6:	cf 91       	pop	r28
    34f8:	df 91       	pop	r29
    34fa:	08 95       	ret

000034fc <ADC_Interrupt_Disable>:
void ADC_Interrupt_Disable(void)
{
    34fc:	df 93       	push	r29
    34fe:	cf 93       	push	r28
    3500:	cd b7       	in	r28, 0x3d	; 61
    3502:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
    3504:	a6 e2       	ldi	r26, 0x26	; 38
    3506:	b0 e0       	ldi	r27, 0x00	; 0
    3508:	e6 e2       	ldi	r30, 0x26	; 38
    350a:	f0 e0       	ldi	r31, 0x00	; 0
    350c:	80 81       	ld	r24, Z
    350e:	87 7f       	andi	r24, 0xF7	; 247
    3510:	8c 93       	st	X, r24

}
    3512:	cf 91       	pop	r28
    3514:	df 91       	pop	r29
    3516:	08 95       	ret

00003518 <ADC_u8INTSetCallBack>:
void ADC_u8INTSetCallBack(void (*Copy_pvINTFunc)(void))
{
    3518:	df 93       	push	r29
    351a:	cf 93       	push	r28
    351c:	00 d0       	rcall	.+0      	; 0x351e <ADC_u8INTSetCallBack+0x6>
    351e:	cd b7       	in	r28, 0x3d	; 61
    3520:	de b7       	in	r29, 0x3e	; 62
    3522:	9a 83       	std	Y+2, r25	; 0x02
    3524:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvINTFunc != NULL)
    3526:	89 81       	ldd	r24, Y+1	; 0x01
    3528:	9a 81       	ldd	r25, Y+2	; 0x02
    352a:	00 97       	sbiw	r24, 0x00	; 0
    352c:	31 f0       	breq	.+12     	; 0x353a <ADC_u8INTSetCallBack+0x22>
	{
		ADC_ptr_FUNC=Copy_pvINTFunc;
    352e:	89 81       	ldd	r24, Y+1	; 0x01
    3530:	9a 81       	ldd	r25, Y+2	; 0x02
    3532:	90 93 7c 02 	sts	0x027C, r25
    3536:	80 93 7b 02 	sts	0x027B, r24
	}
}
    353a:	0f 90       	pop	r0
    353c:	0f 90       	pop	r0
    353e:	cf 91       	pop	r28
    3540:	df 91       	pop	r29
    3542:	08 95       	ret

00003544 <__vector_16>:
void __vector_16 (void)  __attribute__((signal));
void __vector_16 (void)
{
    3544:	1f 92       	push	r1
    3546:	0f 92       	push	r0
    3548:	0f b6       	in	r0, 0x3f	; 63
    354a:	0f 92       	push	r0
    354c:	11 24       	eor	r1, r1
    354e:	2f 93       	push	r18
    3550:	3f 93       	push	r19
    3552:	4f 93       	push	r20
    3554:	5f 93       	push	r21
    3556:	6f 93       	push	r22
    3558:	7f 93       	push	r23
    355a:	8f 93       	push	r24
    355c:	9f 93       	push	r25
    355e:	af 93       	push	r26
    3560:	bf 93       	push	r27
    3562:	ef 93       	push	r30
    3564:	ff 93       	push	r31
    3566:	df 93       	push	r29
    3568:	cf 93       	push	r28
    356a:	cd b7       	in	r28, 0x3d	; 61
    356c:	de b7       	in	r29, 0x3e	; 62
	if(ADC_ptr_FUNC != NULL)
    356e:	80 91 7b 02 	lds	r24, 0x027B
    3572:	90 91 7c 02 	lds	r25, 0x027C
    3576:	00 97       	sbiw	r24, 0x00	; 0
    3578:	29 f0       	breq	.+10     	; 0x3584 <__vector_16+0x40>
	{
		ADC_ptr_FUNC();
    357a:	e0 91 7b 02 	lds	r30, 0x027B
    357e:	f0 91 7c 02 	lds	r31, 0x027C
    3582:	09 95       	icall
	}
	else
	{
		/*Stop*/
	}
}
    3584:	cf 91       	pop	r28
    3586:	df 91       	pop	r29
    3588:	ff 91       	pop	r31
    358a:	ef 91       	pop	r30
    358c:	bf 91       	pop	r27
    358e:	af 91       	pop	r26
    3590:	9f 91       	pop	r25
    3592:	8f 91       	pop	r24
    3594:	7f 91       	pop	r23
    3596:	6f 91       	pop	r22
    3598:	5f 91       	pop	r21
    359a:	4f 91       	pop	r20
    359c:	3f 91       	pop	r19
    359e:	2f 91       	pop	r18
    35a0:	0f 90       	pop	r0
    35a2:	0f be       	out	0x3f, r0	; 63
    35a4:	0f 90       	pop	r0
    35a6:	1f 90       	pop	r1
    35a8:	18 95       	reti

000035aa <H_UltraSonic_Void_Init>:
static volatile u16 Reading_3=0;
static volatile u16 Distance=0;
static volatile u8 No_of_overflows=0;

void H_UltraSonic_Void_Init()
{
    35aa:	df 93       	push	r29
    35ac:	cf 93       	push	r28
    35ae:	cd b7       	in	r28, 0x3d	; 61
    35b0:	de b7       	in	r29, 0x3e	; 62
    35b2:	68 97       	sbiw	r28, 0x18	; 24
    35b4:	0f b6       	in	r0, 0x3f	; 63
    35b6:	f8 94       	cli
    35b8:	de bf       	out	0x3e, r29	; 62
    35ba:	0f be       	out	0x3f, r0	; 63
    35bc:	cd bf       	out	0x3d, r28	; 61
	H_LCD_void_Init();
    35be:	0e 94 03 25 	call	0x4a06	; 0x4a06 <H_LCD_void_Init>

	M_TIMER1_void_Init(TIMER_1_NM,TIMER_1_NWG);
    35c2:	80 e0       	ldi	r24, 0x00	; 0
    35c4:	60 e0       	ldi	r22, 0x00	; 0
    35c6:	0e 94 50 09 	call	0x12a0	; 0x12a0 <M_TIMER1_void_Init>
	M_TIMER1_void_Start(TIMER1_CLK_8);
    35ca:	82 e0       	ldi	r24, 0x02	; 2
    35cc:	0e 94 92 09 	call	0x1324	; 0x1324 <M_TIMER1_void_Start>
	/*Trigger the ULTRA SONIC*/
	M_Dio_void_setPinValue(TRIGGER_PIN_OUT,DIO_HIGH);
    35d0:	88 e2       	ldi	r24, 0x28	; 40
    35d2:	61 e0       	ldi	r22, 0x01	; 1
    35d4:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
    35d8:	80 e0       	ldi	r24, 0x00	; 0
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	a0 e2       	ldi	r26, 0x20	; 32
    35de:	b1 e4       	ldi	r27, 0x41	; 65
    35e0:	8d 8b       	std	Y+21, r24	; 0x15
    35e2:	9e 8b       	std	Y+22, r25	; 0x16
    35e4:	af 8b       	std	Y+23, r26	; 0x17
    35e6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    35e8:	6d 89       	ldd	r22, Y+21	; 0x15
    35ea:	7e 89       	ldd	r23, Y+22	; 0x16
    35ec:	8f 89       	ldd	r24, Y+23	; 0x17
    35ee:	98 8d       	ldd	r25, Y+24	; 0x18
    35f0:	2b ea       	ldi	r18, 0xAB	; 171
    35f2:	3a ea       	ldi	r19, 0xAA	; 170
    35f4:	4a ea       	ldi	r20, 0xAA	; 170
    35f6:	50 e4       	ldi	r21, 0x40	; 64
    35f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35fc:	dc 01       	movw	r26, r24
    35fe:	cb 01       	movw	r24, r22
    3600:	89 8b       	std	Y+17, r24	; 0x11
    3602:	9a 8b       	std	Y+18, r25	; 0x12
    3604:	ab 8b       	std	Y+19, r26	; 0x13
    3606:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3608:	69 89       	ldd	r22, Y+17	; 0x11
    360a:	7a 89       	ldd	r23, Y+18	; 0x12
    360c:	8b 89       	ldd	r24, Y+19	; 0x13
    360e:	9c 89       	ldd	r25, Y+20	; 0x14
    3610:	20 e0       	ldi	r18, 0x00	; 0
    3612:	30 e0       	ldi	r19, 0x00	; 0
    3614:	40 e8       	ldi	r20, 0x80	; 128
    3616:	5f e3       	ldi	r21, 0x3F	; 63
    3618:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    361c:	88 23       	and	r24, r24
    361e:	1c f4       	brge	.+6      	; 0x3626 <H_UltraSonic_Void_Init+0x7c>
		__ticks = 1;
    3620:	81 e0       	ldi	r24, 0x01	; 1
    3622:	88 8b       	std	Y+16, r24	; 0x10
    3624:	91 c0       	rjmp	.+290    	; 0x3748 <H_UltraSonic_Void_Init+0x19e>
	else if (__tmp > 255)
    3626:	69 89       	ldd	r22, Y+17	; 0x11
    3628:	7a 89       	ldd	r23, Y+18	; 0x12
    362a:	8b 89       	ldd	r24, Y+19	; 0x13
    362c:	9c 89       	ldd	r25, Y+20	; 0x14
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	4f e7       	ldi	r20, 0x7F	; 127
    3634:	53 e4       	ldi	r21, 0x43	; 67
    3636:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    363a:	18 16       	cp	r1, r24
    363c:	0c f0       	brlt	.+2      	; 0x3640 <H_UltraSonic_Void_Init+0x96>
    363e:	7b c0       	rjmp	.+246    	; 0x3736 <H_UltraSonic_Void_Init+0x18c>
	{
		_delay_ms(__us / 1000.0);
    3640:	6d 89       	ldd	r22, Y+21	; 0x15
    3642:	7e 89       	ldd	r23, Y+22	; 0x16
    3644:	8f 89       	ldd	r24, Y+23	; 0x17
    3646:	98 8d       	ldd	r25, Y+24	; 0x18
    3648:	20 e0       	ldi	r18, 0x00	; 0
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	4a e7       	ldi	r20, 0x7A	; 122
    364e:	54 e4       	ldi	r21, 0x44	; 68
    3650:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3654:	dc 01       	movw	r26, r24
    3656:	cb 01       	movw	r24, r22
    3658:	8c 87       	std	Y+12, r24	; 0x0c
    365a:	9d 87       	std	Y+13, r25	; 0x0d
    365c:	ae 87       	std	Y+14, r26	; 0x0e
    365e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3660:	6c 85       	ldd	r22, Y+12	; 0x0c
    3662:	7d 85       	ldd	r23, Y+13	; 0x0d
    3664:	8e 85       	ldd	r24, Y+14	; 0x0e
    3666:	9f 85       	ldd	r25, Y+15	; 0x0f
    3668:	20 e0       	ldi	r18, 0x00	; 0
    366a:	30 e0       	ldi	r19, 0x00	; 0
    366c:	4a e7       	ldi	r20, 0x7A	; 122
    366e:	55 e4       	ldi	r21, 0x45	; 69
    3670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3674:	dc 01       	movw	r26, r24
    3676:	cb 01       	movw	r24, r22
    3678:	88 87       	std	Y+8, r24	; 0x08
    367a:	99 87       	std	Y+9, r25	; 0x09
    367c:	aa 87       	std	Y+10, r26	; 0x0a
    367e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3680:	68 85       	ldd	r22, Y+8	; 0x08
    3682:	79 85       	ldd	r23, Y+9	; 0x09
    3684:	8a 85       	ldd	r24, Y+10	; 0x0a
    3686:	9b 85       	ldd	r25, Y+11	; 0x0b
    3688:	20 e0       	ldi	r18, 0x00	; 0
    368a:	30 e0       	ldi	r19, 0x00	; 0
    368c:	40 e8       	ldi	r20, 0x80	; 128
    368e:	5f e3       	ldi	r21, 0x3F	; 63
    3690:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3694:	88 23       	and	r24, r24
    3696:	2c f4       	brge	.+10     	; 0x36a2 <H_UltraSonic_Void_Init+0xf8>
		__ticks = 1;
    3698:	81 e0       	ldi	r24, 0x01	; 1
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	9f 83       	std	Y+7, r25	; 0x07
    369e:	8e 83       	std	Y+6, r24	; 0x06
    36a0:	3f c0       	rjmp	.+126    	; 0x3720 <H_UltraSonic_Void_Init+0x176>
	else if (__tmp > 65535)
    36a2:	68 85       	ldd	r22, Y+8	; 0x08
    36a4:	79 85       	ldd	r23, Y+9	; 0x09
    36a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    36a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    36aa:	20 e0       	ldi	r18, 0x00	; 0
    36ac:	3f ef       	ldi	r19, 0xFF	; 255
    36ae:	4f e7       	ldi	r20, 0x7F	; 127
    36b0:	57 e4       	ldi	r21, 0x47	; 71
    36b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36b6:	18 16       	cp	r1, r24
    36b8:	4c f5       	brge	.+82     	; 0x370c <H_UltraSonic_Void_Init+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36ba:	6c 85       	ldd	r22, Y+12	; 0x0c
    36bc:	7d 85       	ldd	r23, Y+13	; 0x0d
    36be:	8e 85       	ldd	r24, Y+14	; 0x0e
    36c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    36c2:	20 e0       	ldi	r18, 0x00	; 0
    36c4:	30 e0       	ldi	r19, 0x00	; 0
    36c6:	40 e2       	ldi	r20, 0x20	; 32
    36c8:	51 e4       	ldi	r21, 0x41	; 65
    36ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ce:	dc 01       	movw	r26, r24
    36d0:	cb 01       	movw	r24, r22
    36d2:	bc 01       	movw	r22, r24
    36d4:	cd 01       	movw	r24, r26
    36d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36da:	dc 01       	movw	r26, r24
    36dc:	cb 01       	movw	r24, r22
    36de:	9f 83       	std	Y+7, r25	; 0x07
    36e0:	8e 83       	std	Y+6, r24	; 0x06
    36e2:	0f c0       	rjmp	.+30     	; 0x3702 <H_UltraSonic_Void_Init+0x158>
    36e4:	80 e9       	ldi	r24, 0x90	; 144
    36e6:	91 e0       	ldi	r25, 0x01	; 1
    36e8:	9d 83       	std	Y+5, r25	; 0x05
    36ea:	8c 83       	std	Y+4, r24	; 0x04
    36ec:	8c 81       	ldd	r24, Y+4	; 0x04
    36ee:	9d 81       	ldd	r25, Y+5	; 0x05
    36f0:	01 97       	sbiw	r24, 0x01	; 1
    36f2:	f1 f7       	brne	.-4      	; 0x36f0 <H_UltraSonic_Void_Init+0x146>
    36f4:	9d 83       	std	Y+5, r25	; 0x05
    36f6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36f8:	8e 81       	ldd	r24, Y+6	; 0x06
    36fa:	9f 81       	ldd	r25, Y+7	; 0x07
    36fc:	01 97       	sbiw	r24, 0x01	; 1
    36fe:	9f 83       	std	Y+7, r25	; 0x07
    3700:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3702:	8e 81       	ldd	r24, Y+6	; 0x06
    3704:	9f 81       	ldd	r25, Y+7	; 0x07
    3706:	00 97       	sbiw	r24, 0x00	; 0
    3708:	69 f7       	brne	.-38     	; 0x36e4 <H_UltraSonic_Void_Init+0x13a>
    370a:	24 c0       	rjmp	.+72     	; 0x3754 <H_UltraSonic_Void_Init+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    370c:	68 85       	ldd	r22, Y+8	; 0x08
    370e:	79 85       	ldd	r23, Y+9	; 0x09
    3710:	8a 85       	ldd	r24, Y+10	; 0x0a
    3712:	9b 85       	ldd	r25, Y+11	; 0x0b
    3714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3718:	dc 01       	movw	r26, r24
    371a:	cb 01       	movw	r24, r22
    371c:	9f 83       	std	Y+7, r25	; 0x07
    371e:	8e 83       	std	Y+6, r24	; 0x06
    3720:	8e 81       	ldd	r24, Y+6	; 0x06
    3722:	9f 81       	ldd	r25, Y+7	; 0x07
    3724:	9b 83       	std	Y+3, r25	; 0x03
    3726:	8a 83       	std	Y+2, r24	; 0x02
    3728:	8a 81       	ldd	r24, Y+2	; 0x02
    372a:	9b 81       	ldd	r25, Y+3	; 0x03
    372c:	01 97       	sbiw	r24, 0x01	; 1
    372e:	f1 f7       	brne	.-4      	; 0x372c <H_UltraSonic_Void_Init+0x182>
    3730:	9b 83       	std	Y+3, r25	; 0x03
    3732:	8a 83       	std	Y+2, r24	; 0x02
    3734:	0f c0       	rjmp	.+30     	; 0x3754 <H_UltraSonic_Void_Init+0x1aa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3736:	69 89       	ldd	r22, Y+17	; 0x11
    3738:	7a 89       	ldd	r23, Y+18	; 0x12
    373a:	8b 89       	ldd	r24, Y+19	; 0x13
    373c:	9c 89       	ldd	r25, Y+20	; 0x14
    373e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3742:	dc 01       	movw	r26, r24
    3744:	cb 01       	movw	r24, r22
    3746:	88 8b       	std	Y+16, r24	; 0x10
    3748:	88 89       	ldd	r24, Y+16	; 0x10
    374a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    374c:	89 81       	ldd	r24, Y+1	; 0x01
    374e:	8a 95       	dec	r24
    3750:	f1 f7       	brne	.-4      	; 0x374e <H_UltraSonic_Void_Init+0x1a4>
    3752:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	M_Dio_void_setPinValue(TRIGGER_PIN_OUT,DIO_LOW);
    3754:	88 e2       	ldi	r24, 0x28	; 40
    3756:	60 e0       	ldi	r22, 0x00	; 0
    3758:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>

}
    375c:	68 96       	adiw	r28, 0x18	; 24
    375e:	0f b6       	in	r0, 0x3f	; 63
    3760:	f8 94       	cli
    3762:	de bf       	out	0x3e, r29	; 62
    3764:	0f be       	out	0x3f, r0	; 63
    3766:	cd bf       	out	0x3d, r28	; 61
    3768:	cf 91       	pop	r28
    376a:	df 91       	pop	r29
    376c:	08 95       	ret

0000376e <H_ULTRASONIC_Get_Readings>:
void H_ULTRASONIC_Get_Readings(void)
{
    376e:	df 93       	push	r29
    3770:	cf 93       	push	r28
    3772:	cd b7       	in	r28, 0x3d	; 61
    3774:	de b7       	in	r29, 0x3e	; 62
	M_TIMER1_void_ICU_Enable();
    3776:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <M_TIMER1_void_ICU_Enable>
	while((GET_BIT(TIFR,TIFR_ICF1))==0);
    377a:	e8 e5       	ldi	r30, 0x58	; 88
    377c:	f0 e0       	ldi	r31, 0x00	; 0
    377e:	80 81       	ld	r24, Z
    3780:	82 95       	swap	r24
    3782:	86 95       	lsr	r24
    3784:	87 70       	andi	r24, 0x07	; 7
    3786:	88 2f       	mov	r24, r24
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	81 70       	andi	r24, 0x01	; 1
    378c:	90 70       	andi	r25, 0x00	; 0
    378e:	00 97       	sbiw	r24, 0x00	; 0
    3790:	a1 f3       	breq	.-24     	; 0x377a <H_ULTRASONIC_Get_Readings+0xc>
	M_TIMER1_u8_Reset_flag(TIMER1_ICU);
    3792:	80 e0       	ldi	r24, 0x00	; 0
    3794:	0e 94 3f 0a 	call	0x147e	; 0x147e <M_TIMER1_u8_Reset_flag>
	Reading_1 = M_TIMER1_void_ICU_Reading();
    3798:	0e 94 2d 0a 	call	0x145a	; 0x145a <M_TIMER1_void_ICU_Reading>
    379c:	90 93 7e 02 	sts	0x027E, r25
    37a0:	80 93 7d 02 	sts	0x027D, r24
	M_TIMER1_void_ICU_TriggerSelect(ICU_FALLING);
    37a4:	80 e0       	ldi	r24, 0x00	; 0
    37a6:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <M_TIMER1_void_ICU_TriggerSelect>
    37aa:	08 c0       	rjmp	.+16     	; 0x37bc <H_ULTRASONIC_Get_Readings+0x4e>

	while((GET_BIT(TIFR,TIFR_TOV1))==1)
	{
		No_of_overflows++;
    37ac:	80 91 85 02 	lds	r24, 0x0285
    37b0:	8f 5f       	subi	r24, 0xFF	; 255
    37b2:	80 93 85 02 	sts	0x0285, r24
		M_TIMER1_u8_Reset_flag(TIMER1_OVF);
    37b6:	83 e0       	ldi	r24, 0x03	; 3
    37b8:	0e 94 3f 0a 	call	0x147e	; 0x147e <M_TIMER1_u8_Reset_flag>
	while((GET_BIT(TIFR,TIFR_ICF1))==0);
	M_TIMER1_u8_Reset_flag(TIMER1_ICU);
	Reading_1 = M_TIMER1_void_ICU_Reading();
	M_TIMER1_void_ICU_TriggerSelect(ICU_FALLING);

	while((GET_BIT(TIFR,TIFR_TOV1))==1)
    37bc:	e8 e5       	ldi	r30, 0x58	; 88
    37be:	f0 e0       	ldi	r31, 0x00	; 0
    37c0:	80 81       	ld	r24, Z
    37c2:	86 95       	lsr	r24
    37c4:	86 95       	lsr	r24
    37c6:	88 2f       	mov	r24, r24
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	81 70       	andi	r24, 0x01	; 1
    37cc:	90 70       	andi	r25, 0x00	; 0
    37ce:	88 23       	and	r24, r24
    37d0:	69 f7       	brne	.-38     	; 0x37ac <H_ULTRASONIC_Get_Readings+0x3e>
	{
		No_of_overflows++;
		M_TIMER1_u8_Reset_flag(TIMER1_OVF);
	}
	while((GET_BIT(TIFR,TIFR_ICF1))==0);
    37d2:	e8 e5       	ldi	r30, 0x58	; 88
    37d4:	f0 e0       	ldi	r31, 0x00	; 0
    37d6:	80 81       	ld	r24, Z
    37d8:	82 95       	swap	r24
    37da:	86 95       	lsr	r24
    37dc:	87 70       	andi	r24, 0x07	; 7
    37de:	88 2f       	mov	r24, r24
    37e0:	90 e0       	ldi	r25, 0x00	; 0
    37e2:	81 70       	andi	r24, 0x01	; 1
    37e4:	90 70       	andi	r25, 0x00	; 0
    37e6:	00 97       	sbiw	r24, 0x00	; 0
    37e8:	a1 f3       	breq	.-24     	; 0x37d2 <H_ULTRASONIC_Get_Readings+0x64>
	M_TIMER1_u8_Reset_flag(TIMER1_ICU);
    37ea:	80 e0       	ldi	r24, 0x00	; 0
    37ec:	0e 94 3f 0a 	call	0x147e	; 0x147e <M_TIMER1_u8_Reset_flag>
	Reading_2= M_TIMER1_void_ICU_Reading();
    37f0:	0e 94 2d 0a 	call	0x145a	; 0x145a <M_TIMER1_void_ICU_Reading>
    37f4:	90 93 80 02 	sts	0x0280, r25
    37f8:	80 93 7f 02 	sts	0x027F, r24
	M_TIMER1_void_ICU_TriggerSelect(ICU_RISING);
    37fc:	81 e0       	ldi	r24, 0x01	; 1
    37fe:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <M_TIMER1_void_ICU_TriggerSelect>



}
    3802:	cf 91       	pop	r28
    3804:	df 91       	pop	r29
    3806:	08 95       	ret

00003808 <H_UltraSonic_U16_ReadDistance>:
u16 H_UltraSonic_U16_ReadDistance()
{
    3808:	df 93       	push	r29
    380a:	cf 93       	push	r28
    380c:	00 d0       	rcall	.+0      	; 0x380e <H_UltraSonic_U16_ReadDistance+0x6>
    380e:	00 d0       	rcall	.+0      	; 0x3810 <H_UltraSonic_U16_ReadDistance+0x8>
    3810:	cd b7       	in	r28, 0x3d	; 61
    3812:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_gotoXY(1,0);
    3814:	81 e0       	ldi	r24, 0x01	; 1
    3816:	60 e0       	ldi	r22, 0x00	; 0
    3818:	0e 94 63 28 	call	0x50c6	; 0x50c6 <H_LCD_void_gotoXY>
	H_LCD_void_sendIntNum(No_of_overflows);
    381c:	80 91 85 02 	lds	r24, 0x0285
    3820:	88 2f       	mov	r24, r24
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	a0 e0       	ldi	r26, 0x00	; 0
    3826:	b0 e0       	ldi	r27, 0x00	; 0
    3828:	bc 01       	movw	r22, r24
    382a:	cd 01       	movw	r24, r26
    382c:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <H_LCD_void_sendIntNum>
	H_LCD_void_gotoXY(1,6);
    3830:	81 e0       	ldi	r24, 0x01	; 1
    3832:	66 e0       	ldi	r22, 0x06	; 6
    3834:	0e 94 63 28 	call	0x50c6	; 0x50c6 <H_LCD_void_gotoXY>
	H_LCD_void_sendIntNum(Reading_1);
    3838:	80 91 7d 02 	lds	r24, 0x027D
    383c:	90 91 7e 02 	lds	r25, 0x027E
    3840:	cc 01       	movw	r24, r24
    3842:	a0 e0       	ldi	r26, 0x00	; 0
    3844:	b0 e0       	ldi	r27, 0x00	; 0
    3846:	bc 01       	movw	r22, r24
    3848:	cd 01       	movw	r24, r26
    384a:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <H_LCD_void_sendIntNum>
	H_LCD_void_gotoXY(2,0);
    384e:	82 e0       	ldi	r24, 0x02	; 2
    3850:	60 e0       	ldi	r22, 0x00	; 0
    3852:	0e 94 63 28 	call	0x50c6	; 0x50c6 <H_LCD_void_gotoXY>
	H_LCD_void_sendIntNum(Reading_2);
    3856:	80 91 7f 02 	lds	r24, 0x027F
    385a:	90 91 80 02 	lds	r25, 0x0280
    385e:	cc 01       	movw	r24, r24
    3860:	a0 e0       	ldi	r26, 0x00	; 0
    3862:	b0 e0       	ldi	r27, 0x00	; 0
    3864:	bc 01       	movw	r22, r24
    3866:	cd 01       	movw	r24, r26
    3868:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <H_LCD_void_sendIntNum>

	u32 time=0;
    386c:	19 82       	std	Y+1, r1	; 0x01
    386e:	1a 82       	std	Y+2, r1	; 0x02
    3870:	1b 82       	std	Y+3, r1	; 0x03
    3872:	1c 82       	std	Y+4, r1	; 0x04
	if(No_of_overflows>0)
    3874:	80 91 85 02 	lds	r24, 0x0285
    3878:	88 23       	and	r24, r24
    387a:	09 f4       	brne	.+2      	; 0x387e <H_UltraSonic_U16_ReadDistance+0x76>
    387c:	48 c0       	rjmp	.+144    	; 0x390e <H_UltraSonic_U16_ReadDistance+0x106>
	{
		time = (65535-Reading_1);
    387e:	80 91 7d 02 	lds	r24, 0x027D
    3882:	90 91 7e 02 	lds	r25, 0x027E
    3886:	9c 01       	movw	r18, r24
    3888:	40 e0       	ldi	r20, 0x00	; 0
    388a:	50 e0       	ldi	r21, 0x00	; 0
    388c:	8f ef       	ldi	r24, 0xFF	; 255
    388e:	9f ef       	ldi	r25, 0xFF	; 255
    3890:	a0 e0       	ldi	r26, 0x00	; 0
    3892:	b0 e0       	ldi	r27, 0x00	; 0
    3894:	82 1b       	sub	r24, r18
    3896:	93 0b       	sbc	r25, r19
    3898:	a4 0b       	sbc	r26, r20
    389a:	b5 0b       	sbc	r27, r21
    389c:	89 83       	std	Y+1, r24	; 0x01
    389e:	9a 83       	std	Y+2, r25	; 0x02
    38a0:	ab 83       	std	Y+3, r26	; 0x03
    38a2:	bc 83       	std	Y+4, r27	; 0x04
		No_of_overflows--;
    38a4:	80 91 85 02 	lds	r24, 0x0285
    38a8:	81 50       	subi	r24, 0x01	; 1
    38aa:	80 93 85 02 	sts	0x0285, r24
		time += ((u32)No_of_overflows*65535);
    38ae:	80 91 85 02 	lds	r24, 0x0285
    38b2:	88 2f       	mov	r24, r24
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	a0 e0       	ldi	r26, 0x00	; 0
    38b8:	b0 e0       	ldi	r27, 0x00	; 0
    38ba:	2f ef       	ldi	r18, 0xFF	; 255
    38bc:	3f ef       	ldi	r19, 0xFF	; 255
    38be:	40 e0       	ldi	r20, 0x00	; 0
    38c0:	50 e0       	ldi	r21, 0x00	; 0
    38c2:	bc 01       	movw	r22, r24
    38c4:	cd 01       	movw	r24, r26
    38c6:	0e 94 1e 29 	call	0x523c	; 0x523c <__mulsi3>
    38ca:	9b 01       	movw	r18, r22
    38cc:	ac 01       	movw	r20, r24
    38ce:	89 81       	ldd	r24, Y+1	; 0x01
    38d0:	9a 81       	ldd	r25, Y+2	; 0x02
    38d2:	ab 81       	ldd	r26, Y+3	; 0x03
    38d4:	bc 81       	ldd	r27, Y+4	; 0x04
    38d6:	82 0f       	add	r24, r18
    38d8:	93 1f       	adc	r25, r19
    38da:	a4 1f       	adc	r26, r20
    38dc:	b5 1f       	adc	r27, r21
    38de:	89 83       	std	Y+1, r24	; 0x01
    38e0:	9a 83       	std	Y+2, r25	; 0x02
    38e2:	ab 83       	std	Y+3, r26	; 0x03
    38e4:	bc 83       	std	Y+4, r27	; 0x04
		time += Reading_2;
    38e6:	80 91 7f 02 	lds	r24, 0x027F
    38ea:	90 91 80 02 	lds	r25, 0x0280
    38ee:	9c 01       	movw	r18, r24
    38f0:	40 e0       	ldi	r20, 0x00	; 0
    38f2:	50 e0       	ldi	r21, 0x00	; 0
    38f4:	89 81       	ldd	r24, Y+1	; 0x01
    38f6:	9a 81       	ldd	r25, Y+2	; 0x02
    38f8:	ab 81       	ldd	r26, Y+3	; 0x03
    38fa:	bc 81       	ldd	r27, Y+4	; 0x04
    38fc:	82 0f       	add	r24, r18
    38fe:	93 1f       	adc	r25, r19
    3900:	a4 1f       	adc	r26, r20
    3902:	b5 1f       	adc	r27, r21
    3904:	89 83       	std	Y+1, r24	; 0x01
    3906:	9a 83       	std	Y+2, r25	; 0x02
    3908:	ab 83       	std	Y+3, r26	; 0x03
    390a:	bc 83       	std	Y+4, r27	; 0x04
    390c:	13 c0       	rjmp	.+38     	; 0x3934 <H_UltraSonic_U16_ReadDistance+0x12c>
	}
	else
	{
		time = Reading_2-Reading_1;
    390e:	20 91 7f 02 	lds	r18, 0x027F
    3912:	30 91 80 02 	lds	r19, 0x0280
    3916:	80 91 7d 02 	lds	r24, 0x027D
    391a:	90 91 7e 02 	lds	r25, 0x027E
    391e:	a9 01       	movw	r20, r18
    3920:	48 1b       	sub	r20, r24
    3922:	59 0b       	sbc	r21, r25
    3924:	ca 01       	movw	r24, r20
    3926:	cc 01       	movw	r24, r24
    3928:	a0 e0       	ldi	r26, 0x00	; 0
    392a:	b0 e0       	ldi	r27, 0x00	; 0
    392c:	89 83       	std	Y+1, r24	; 0x01
    392e:	9a 83       	std	Y+2, r25	; 0x02
    3930:	ab 83       	std	Y+3, r26	; 0x03
    3932:	bc 83       	std	Y+4, r27	; 0x04
	}
	Reading_3= time /2;
    3934:	89 81       	ldd	r24, Y+1	; 0x01
    3936:	9a 81       	ldd	r25, Y+2	; 0x02
    3938:	ab 81       	ldd	r26, Y+3	; 0x03
    393a:	bc 81       	ldd	r27, Y+4	; 0x04
    393c:	b6 95       	lsr	r27
    393e:	a7 95       	ror	r26
    3940:	97 95       	ror	r25
    3942:	87 95       	ror	r24
    3944:	90 93 82 02 	sts	0x0282, r25
    3948:	80 93 81 02 	sts	0x0281, r24
	Distance = ((f32)SPEED_OF_SOUND/1000000)*(Reading_3);
    394c:	80 91 81 02 	lds	r24, 0x0281
    3950:	90 91 82 02 	lds	r25, 0x0282
    3954:	cc 01       	movw	r24, r24
    3956:	a0 e0       	ldi	r26, 0x00	; 0
    3958:	b0 e0       	ldi	r27, 0x00	; 0
    395a:	bc 01       	movw	r22, r24
    395c:	cd 01       	movw	r24, r26
    395e:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3962:	dc 01       	movw	r26, r24
    3964:	cb 01       	movw	r24, r22
    3966:	bc 01       	movw	r22, r24
    3968:	cd 01       	movw	r24, r26
    396a:	28 e2       	ldi	r18, 0x28	; 40
    396c:	3e e7       	ldi	r19, 0x7E	; 126
    396e:	4c e0       	ldi	r20, 0x0C	; 12
    3970:	5d e3       	ldi	r21, 0x3D	; 61
    3972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3976:	dc 01       	movw	r26, r24
    3978:	cb 01       	movw	r24, r22
    397a:	bc 01       	movw	r22, r24
    397c:	cd 01       	movw	r24, r26
    397e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3982:	dc 01       	movw	r26, r24
    3984:	cb 01       	movw	r24, r22
    3986:	90 93 84 02 	sts	0x0284, r25
    398a:	80 93 83 02 	sts	0x0283, r24
	H_LCD_void_gotoXY(2,6);
    398e:	82 e0       	ldi	r24, 0x02	; 2
    3990:	66 e0       	ldi	r22, 0x06	; 6
    3992:	0e 94 63 28 	call	0x50c6	; 0x50c6 <H_LCD_void_gotoXY>
	H_LCD_void_sendIntNum(Distance);
    3996:	80 91 83 02 	lds	r24, 0x0283
    399a:	90 91 84 02 	lds	r25, 0x0284
    399e:	cc 01       	movw	r24, r24
    39a0:	a0 e0       	ldi	r26, 0x00	; 0
    39a2:	b0 e0       	ldi	r27, 0x00	; 0
    39a4:	bc 01       	movw	r22, r24
    39a6:	cd 01       	movw	r24, r26
    39a8:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <H_LCD_void_sendIntNum>
	M_TIMER1_void_Stop();
    39ac:	0e 94 bd 09 	call	0x137a	; 0x137a <M_TIMER1_void_Stop>

	return Distance;
    39b0:	80 91 83 02 	lds	r24, 0x0283
    39b4:	90 91 84 02 	lds	r25, 0x0284
}
    39b8:	0f 90       	pop	r0
    39ba:	0f 90       	pop	r0
    39bc:	0f 90       	pop	r0
    39be:	0f 90       	pop	r0
    39c0:	cf 91       	pop	r28
    39c2:	df 91       	pop	r29
    39c4:	08 95       	ret

000039c6 <H_SSD_void_displayIntNumber>:
#include"SSD_CFG.h"
#include"SSD_int.h"
#include<util/delay.h>

void H_SSD_void_displayIntNumber(u16 Copy_number)
{
    39c6:	0f 93       	push	r16
    39c8:	1f 93       	push	r17
    39ca:	df 93       	push	r29
    39cc:	cf 93       	push	r28
    39ce:	cd b7       	in	r28, 0x3d	; 61
    39d0:	de b7       	in	r29, 0x3e	; 62
    39d2:	c0 54       	subi	r28, 0x40	; 64
    39d4:	d0 40       	sbci	r29, 0x00	; 0
    39d6:	0f b6       	in	r0, 0x3f	; 63
    39d8:	f8 94       	cli
    39da:	de bf       	out	0x3e, r29	; 62
    39dc:	0f be       	out	0x3f, r0	; 63
    39de:	cd bf       	out	0x3d, r28	; 61
    39e0:	fe 01       	movw	r30, r28
    39e2:	ff 96       	adiw	r30, 0x3f	; 63
    39e4:	91 83       	std	Z+1, r25	; 0x01
    39e6:	80 83       	st	Z, r24
	u8 arr[4]={0};
    39e8:	1b ae       	std	Y+59, r1	; 0x3b
    39ea:	1c ae       	std	Y+60, r1	; 0x3c
    39ec:	1d ae       	std	Y+61, r1	; 0x3d
    39ee:	1e ae       	std	Y+62, r1	; 0x3e
	u8 i=0;
    39f0:	1a ae       	std	Y+58, r1	; 0x3a
    39f2:	24 c0       	rjmp	.+72     	; 0x3a3c <H_SSD_void_displayIntNumber+0x76>
	while(Copy_number >0 && i<4)
	{
		arr[i]= Copy_number %10;
    39f4:	8a ad       	ldd	r24, Y+58	; 0x3a
    39f6:	08 2f       	mov	r16, r24
    39f8:	10 e0       	ldi	r17, 0x00	; 0
    39fa:	fe 01       	movw	r30, r28
    39fc:	ff 96       	adiw	r30, 0x3f	; 63
    39fe:	80 81       	ld	r24, Z
    3a00:	91 81       	ldd	r25, Z+1	; 0x01
    3a02:	2a e0       	ldi	r18, 0x0A	; 10
    3a04:	30 e0       	ldi	r19, 0x00	; 0
    3a06:	b9 01       	movw	r22, r18
    3a08:	0e 94 49 29 	call	0x5292	; 0x5292 <__udivmodhi4>
    3a0c:	28 2f       	mov	r18, r24
    3a0e:	ce 01       	movw	r24, r28
    3a10:	cb 96       	adiw	r24, 0x3b	; 59
    3a12:	fc 01       	movw	r30, r24
    3a14:	e0 0f       	add	r30, r16
    3a16:	f1 1f       	adc	r31, r17
    3a18:	20 83       	st	Z, r18
		Copy_number /= 10;
    3a1a:	fe 01       	movw	r30, r28
    3a1c:	ff 96       	adiw	r30, 0x3f	; 63
    3a1e:	80 81       	ld	r24, Z
    3a20:	91 81       	ldd	r25, Z+1	; 0x01
    3a22:	2a e0       	ldi	r18, 0x0A	; 10
    3a24:	30 e0       	ldi	r19, 0x00	; 0
    3a26:	b9 01       	movw	r22, r18
    3a28:	0e 94 49 29 	call	0x5292	; 0x5292 <__udivmodhi4>
    3a2c:	cb 01       	movw	r24, r22
    3a2e:	fe 01       	movw	r30, r28
    3a30:	ff 96       	adiw	r30, 0x3f	; 63
    3a32:	91 83       	std	Z+1, r25	; 0x01
    3a34:	80 83       	st	Z, r24
		i++;
    3a36:	8a ad       	ldd	r24, Y+58	; 0x3a
    3a38:	8f 5f       	subi	r24, 0xFF	; 255
    3a3a:	8a af       	std	Y+58, r24	; 0x3a

void H_SSD_void_displayIntNumber(u16 Copy_number)
{
	u8 arr[4]={0};
	u8 i=0;
	while(Copy_number >0 && i<4)
    3a3c:	fe 01       	movw	r30, r28
    3a3e:	ff 96       	adiw	r30, 0x3f	; 63
    3a40:	80 81       	ld	r24, Z
    3a42:	91 81       	ldd	r25, Z+1	; 0x01
    3a44:	00 97       	sbiw	r24, 0x00	; 0
    3a46:	19 f0       	breq	.+6      	; 0x3a4e <H_SSD_void_displayIntNumber+0x88>
    3a48:	8a ad       	ldd	r24, Y+58	; 0x3a
    3a4a:	84 30       	cpi	r24, 0x04	; 4
    3a4c:	98 f2       	brcs	.-90     	; 0x39f4 <H_SSD_void_displayIntNumber+0x2e>
		arr[i]= Copy_number %10;
		Copy_number /= 10;
		i++;
	}
	/*prepare units to be send to BCD(4bits)*/
	for(u8 j=0;j<SSD_DISPLAY_TIME*4;j++)
    3a4e:	19 ae       	std	Y+57, r1	; 0x39
	{
		/*prepare units to be send to BCD*/
		i=0;
    3a50:	1a ae       	std	Y+58, r1	; 0x3a
		M_Dio_void_setPinValue(SSD_A_PIN,(arr[i]>>0)&1);
    3a52:	8a ad       	ldd	r24, Y+58	; 0x3a
    3a54:	28 2f       	mov	r18, r24
    3a56:	30 e0       	ldi	r19, 0x00	; 0
    3a58:	ce 01       	movw	r24, r28
    3a5a:	cb 96       	adiw	r24, 0x3b	; 59
    3a5c:	fc 01       	movw	r30, r24
    3a5e:	e2 0f       	add	r30, r18
    3a60:	f3 1f       	adc	r31, r19
    3a62:	80 81       	ld	r24, Z
    3a64:	98 2f       	mov	r25, r24
    3a66:	91 70       	andi	r25, 0x01	; 1
    3a68:	84 e1       	ldi	r24, 0x14	; 20
    3a6a:	69 2f       	mov	r22, r25
    3a6c:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_B_PIN,(arr[i]>>1)&1);
    3a70:	8a ad       	ldd	r24, Y+58	; 0x3a
    3a72:	28 2f       	mov	r18, r24
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	ce 01       	movw	r24, r28
    3a78:	cb 96       	adiw	r24, 0x3b	; 59
    3a7a:	fc 01       	movw	r30, r24
    3a7c:	e2 0f       	add	r30, r18
    3a7e:	f3 1f       	adc	r31, r19
    3a80:	80 81       	ld	r24, Z
    3a82:	86 95       	lsr	r24
    3a84:	98 2f       	mov	r25, r24
    3a86:	91 70       	andi	r25, 0x01	; 1
    3a88:	85 e1       	ldi	r24, 0x15	; 21
    3a8a:	69 2f       	mov	r22, r25
    3a8c:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_C_PIN,(arr[i]>>2)&1);
    3a90:	8a ad       	ldd	r24, Y+58	; 0x3a
    3a92:	28 2f       	mov	r18, r24
    3a94:	30 e0       	ldi	r19, 0x00	; 0
    3a96:	ce 01       	movw	r24, r28
    3a98:	cb 96       	adiw	r24, 0x3b	; 59
    3a9a:	fc 01       	movw	r30, r24
    3a9c:	e2 0f       	add	r30, r18
    3a9e:	f3 1f       	adc	r31, r19
    3aa0:	80 81       	ld	r24, Z
    3aa2:	86 95       	lsr	r24
    3aa4:	86 95       	lsr	r24
    3aa6:	98 2f       	mov	r25, r24
    3aa8:	91 70       	andi	r25, 0x01	; 1
    3aaa:	86 e1       	ldi	r24, 0x16	; 22
    3aac:	69 2f       	mov	r22, r25
    3aae:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_D_PIN,(arr[i]>>3)&1);
    3ab2:	8a ad       	ldd	r24, Y+58	; 0x3a
    3ab4:	28 2f       	mov	r18, r24
    3ab6:	30 e0       	ldi	r19, 0x00	; 0
    3ab8:	ce 01       	movw	r24, r28
    3aba:	cb 96       	adiw	r24, 0x3b	; 59
    3abc:	fc 01       	movw	r30, r24
    3abe:	e2 0f       	add	r30, r18
    3ac0:	f3 1f       	adc	r31, r19
    3ac2:	80 81       	ld	r24, Z
    3ac4:	86 95       	lsr	r24
    3ac6:	86 95       	lsr	r24
    3ac8:	86 95       	lsr	r24
    3aca:	98 2f       	mov	r25, r24
    3acc:	91 70       	andi	r25, 0x01	; 1
    3ace:	88 e1       	ldi	r24, 0x18	; 24
    3ad0:	69 2f       	mov	r22, r25
    3ad2:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
		/*Enable digit 1 (remember it is pnp - active low*/
		M_Dio_void_setPinValue(SSD_DIG1_EN,DIO_LOW);
    3ad6:	8d e0       	ldi	r24, 0x0D	; 13
    3ad8:	60 e0       	ldi	r22, 0x00	; 0
    3ada:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
    3ade:	80 e0       	ldi	r24, 0x00	; 0
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	a0 e8       	ldi	r26, 0x80	; 128
    3ae4:	bf e3       	ldi	r27, 0x3F	; 63
    3ae6:	8d ab       	std	Y+53, r24	; 0x35
    3ae8:	9e ab       	std	Y+54, r25	; 0x36
    3aea:	af ab       	std	Y+55, r26	; 0x37
    3aec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aee:	6d a9       	ldd	r22, Y+53	; 0x35
    3af0:	7e a9       	ldd	r23, Y+54	; 0x36
    3af2:	8f a9       	ldd	r24, Y+55	; 0x37
    3af4:	98 ad       	ldd	r25, Y+56	; 0x38
    3af6:	20 e0       	ldi	r18, 0x00	; 0
    3af8:	30 e0       	ldi	r19, 0x00	; 0
    3afa:	4a e7       	ldi	r20, 0x7A	; 122
    3afc:	55 e4       	ldi	r21, 0x45	; 69
    3afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b02:	dc 01       	movw	r26, r24
    3b04:	cb 01       	movw	r24, r22
    3b06:	89 ab       	std	Y+49, r24	; 0x31
    3b08:	9a ab       	std	Y+50, r25	; 0x32
    3b0a:	ab ab       	std	Y+51, r26	; 0x33
    3b0c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3b0e:	69 a9       	ldd	r22, Y+49	; 0x31
    3b10:	7a a9       	ldd	r23, Y+50	; 0x32
    3b12:	8b a9       	ldd	r24, Y+51	; 0x33
    3b14:	9c a9       	ldd	r25, Y+52	; 0x34
    3b16:	20 e0       	ldi	r18, 0x00	; 0
    3b18:	30 e0       	ldi	r19, 0x00	; 0
    3b1a:	40 e8       	ldi	r20, 0x80	; 128
    3b1c:	5f e3       	ldi	r21, 0x3F	; 63
    3b1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b22:	88 23       	and	r24, r24
    3b24:	2c f4       	brge	.+10     	; 0x3b30 <H_SSD_void_displayIntNumber+0x16a>
		__ticks = 1;
    3b26:	81 e0       	ldi	r24, 0x01	; 1
    3b28:	90 e0       	ldi	r25, 0x00	; 0
    3b2a:	98 ab       	std	Y+48, r25	; 0x30
    3b2c:	8f a7       	std	Y+47, r24	; 0x2f
    3b2e:	3f c0       	rjmp	.+126    	; 0x3bae <H_SSD_void_displayIntNumber+0x1e8>
	else if (__tmp > 65535)
    3b30:	69 a9       	ldd	r22, Y+49	; 0x31
    3b32:	7a a9       	ldd	r23, Y+50	; 0x32
    3b34:	8b a9       	ldd	r24, Y+51	; 0x33
    3b36:	9c a9       	ldd	r25, Y+52	; 0x34
    3b38:	20 e0       	ldi	r18, 0x00	; 0
    3b3a:	3f ef       	ldi	r19, 0xFF	; 255
    3b3c:	4f e7       	ldi	r20, 0x7F	; 127
    3b3e:	57 e4       	ldi	r21, 0x47	; 71
    3b40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b44:	18 16       	cp	r1, r24
    3b46:	4c f5       	brge	.+82     	; 0x3b9a <H_SSD_void_displayIntNumber+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b48:	6d a9       	ldd	r22, Y+53	; 0x35
    3b4a:	7e a9       	ldd	r23, Y+54	; 0x36
    3b4c:	8f a9       	ldd	r24, Y+55	; 0x37
    3b4e:	98 ad       	ldd	r25, Y+56	; 0x38
    3b50:	20 e0       	ldi	r18, 0x00	; 0
    3b52:	30 e0       	ldi	r19, 0x00	; 0
    3b54:	40 e2       	ldi	r20, 0x20	; 32
    3b56:	51 e4       	ldi	r21, 0x41	; 65
    3b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b5c:	dc 01       	movw	r26, r24
    3b5e:	cb 01       	movw	r24, r22
    3b60:	bc 01       	movw	r22, r24
    3b62:	cd 01       	movw	r24, r26
    3b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b68:	dc 01       	movw	r26, r24
    3b6a:	cb 01       	movw	r24, r22
    3b6c:	98 ab       	std	Y+48, r25	; 0x30
    3b6e:	8f a7       	std	Y+47, r24	; 0x2f
    3b70:	0f c0       	rjmp	.+30     	; 0x3b90 <H_SSD_void_displayIntNumber+0x1ca>
    3b72:	80 e9       	ldi	r24, 0x90	; 144
    3b74:	91 e0       	ldi	r25, 0x01	; 1
    3b76:	9e a7       	std	Y+46, r25	; 0x2e
    3b78:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b7a:	8d a5       	ldd	r24, Y+45	; 0x2d
    3b7c:	9e a5       	ldd	r25, Y+46	; 0x2e
    3b7e:	01 97       	sbiw	r24, 0x01	; 1
    3b80:	f1 f7       	brne	.-4      	; 0x3b7e <H_SSD_void_displayIntNumber+0x1b8>
    3b82:	9e a7       	std	Y+46, r25	; 0x2e
    3b84:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b86:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b88:	98 a9       	ldd	r25, Y+48	; 0x30
    3b8a:	01 97       	sbiw	r24, 0x01	; 1
    3b8c:	98 ab       	std	Y+48, r25	; 0x30
    3b8e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b90:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b92:	98 a9       	ldd	r25, Y+48	; 0x30
    3b94:	00 97       	sbiw	r24, 0x00	; 0
    3b96:	69 f7       	brne	.-38     	; 0x3b72 <H_SSD_void_displayIntNumber+0x1ac>
    3b98:	14 c0       	rjmp	.+40     	; 0x3bc2 <H_SSD_void_displayIntNumber+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b9a:	69 a9       	ldd	r22, Y+49	; 0x31
    3b9c:	7a a9       	ldd	r23, Y+50	; 0x32
    3b9e:	8b a9       	ldd	r24, Y+51	; 0x33
    3ba0:	9c a9       	ldd	r25, Y+52	; 0x34
    3ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ba6:	dc 01       	movw	r26, r24
    3ba8:	cb 01       	movw	r24, r22
    3baa:	98 ab       	std	Y+48, r25	; 0x30
    3bac:	8f a7       	std	Y+47, r24	; 0x2f
    3bae:	8f a5       	ldd	r24, Y+47	; 0x2f
    3bb0:	98 a9       	ldd	r25, Y+48	; 0x30
    3bb2:	9c a7       	std	Y+44, r25	; 0x2c
    3bb4:	8b a7       	std	Y+43, r24	; 0x2b
    3bb6:	8b a5       	ldd	r24, Y+43	; 0x2b
    3bb8:	9c a5       	ldd	r25, Y+44	; 0x2c
    3bba:	01 97       	sbiw	r24, 0x01	; 1
    3bbc:	f1 f7       	brne	.-4      	; 0x3bba <H_SSD_void_displayIntNumber+0x1f4>
    3bbe:	9c a7       	std	Y+44, r25	; 0x2c
    3bc0:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		M_Dio_void_setPinValue(SSD_DIG1_EN,DIO_HIGH);
    3bc2:	8d e0       	ldi	r24, 0x0D	; 13
    3bc4:	61 e0       	ldi	r22, 0x01	; 1
    3bc6:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
		/*prepare Tens to be send to BCD(4bits)*/
		i=1;
    3bca:	81 e0       	ldi	r24, 0x01	; 1
    3bcc:	8a af       	std	Y+58, r24	; 0x3a
		M_Dio_void_setPinValue(SSD_A_PIN,(arr[i]>>0)&1);
    3bce:	8a ad       	ldd	r24, Y+58	; 0x3a
    3bd0:	28 2f       	mov	r18, r24
    3bd2:	30 e0       	ldi	r19, 0x00	; 0
    3bd4:	ce 01       	movw	r24, r28
    3bd6:	cb 96       	adiw	r24, 0x3b	; 59
    3bd8:	fc 01       	movw	r30, r24
    3bda:	e2 0f       	add	r30, r18
    3bdc:	f3 1f       	adc	r31, r19
    3bde:	80 81       	ld	r24, Z
    3be0:	98 2f       	mov	r25, r24
    3be2:	91 70       	andi	r25, 0x01	; 1
    3be4:	84 e1       	ldi	r24, 0x14	; 20
    3be6:	69 2f       	mov	r22, r25
    3be8:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_B_PIN,(arr[i]>>1)&1);
    3bec:	8a ad       	ldd	r24, Y+58	; 0x3a
    3bee:	28 2f       	mov	r18, r24
    3bf0:	30 e0       	ldi	r19, 0x00	; 0
    3bf2:	ce 01       	movw	r24, r28
    3bf4:	cb 96       	adiw	r24, 0x3b	; 59
    3bf6:	fc 01       	movw	r30, r24
    3bf8:	e2 0f       	add	r30, r18
    3bfa:	f3 1f       	adc	r31, r19
    3bfc:	80 81       	ld	r24, Z
    3bfe:	86 95       	lsr	r24
    3c00:	98 2f       	mov	r25, r24
    3c02:	91 70       	andi	r25, 0x01	; 1
    3c04:	85 e1       	ldi	r24, 0x15	; 21
    3c06:	69 2f       	mov	r22, r25
    3c08:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_C_PIN,(arr[i]>>2)&1);
    3c0c:	8a ad       	ldd	r24, Y+58	; 0x3a
    3c0e:	28 2f       	mov	r18, r24
    3c10:	30 e0       	ldi	r19, 0x00	; 0
    3c12:	ce 01       	movw	r24, r28
    3c14:	cb 96       	adiw	r24, 0x3b	; 59
    3c16:	fc 01       	movw	r30, r24
    3c18:	e2 0f       	add	r30, r18
    3c1a:	f3 1f       	adc	r31, r19
    3c1c:	80 81       	ld	r24, Z
    3c1e:	86 95       	lsr	r24
    3c20:	86 95       	lsr	r24
    3c22:	98 2f       	mov	r25, r24
    3c24:	91 70       	andi	r25, 0x01	; 1
    3c26:	86 e1       	ldi	r24, 0x16	; 22
    3c28:	69 2f       	mov	r22, r25
    3c2a:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_D_PIN,(arr[i]>>3)&1);
    3c2e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3c30:	28 2f       	mov	r18, r24
    3c32:	30 e0       	ldi	r19, 0x00	; 0
    3c34:	ce 01       	movw	r24, r28
    3c36:	cb 96       	adiw	r24, 0x3b	; 59
    3c38:	fc 01       	movw	r30, r24
    3c3a:	e2 0f       	add	r30, r18
    3c3c:	f3 1f       	adc	r31, r19
    3c3e:	80 81       	ld	r24, Z
    3c40:	86 95       	lsr	r24
    3c42:	86 95       	lsr	r24
    3c44:	86 95       	lsr	r24
    3c46:	98 2f       	mov	r25, r24
    3c48:	91 70       	andi	r25, 0x01	; 1
    3c4a:	88 e1       	ldi	r24, 0x18	; 24
    3c4c:	69 2f       	mov	r22, r25
    3c4e:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
		/*Enable digit 2 (remember it is pnp - active low*/
		M_Dio_void_setPinValue(SSD_DIG2_EN,DIO_LOW);
    3c52:	8c e0       	ldi	r24, 0x0C	; 12
    3c54:	60 e0       	ldi	r22, 0x00	; 0
    3c56:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
    3c5a:	80 e0       	ldi	r24, 0x00	; 0
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	a0 e8       	ldi	r26, 0x80	; 128
    3c60:	bf e3       	ldi	r27, 0x3F	; 63
    3c62:	8f a3       	std	Y+39, r24	; 0x27
    3c64:	98 a7       	std	Y+40, r25	; 0x28
    3c66:	a9 a7       	std	Y+41, r26	; 0x29
    3c68:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c6a:	6f a1       	ldd	r22, Y+39	; 0x27
    3c6c:	78 a5       	ldd	r23, Y+40	; 0x28
    3c6e:	89 a5       	ldd	r24, Y+41	; 0x29
    3c70:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c72:	20 e0       	ldi	r18, 0x00	; 0
    3c74:	30 e0       	ldi	r19, 0x00	; 0
    3c76:	4a e7       	ldi	r20, 0x7A	; 122
    3c78:	55 e4       	ldi	r21, 0x45	; 69
    3c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c7e:	dc 01       	movw	r26, r24
    3c80:	cb 01       	movw	r24, r22
    3c82:	8b a3       	std	Y+35, r24	; 0x23
    3c84:	9c a3       	std	Y+36, r25	; 0x24
    3c86:	ad a3       	std	Y+37, r26	; 0x25
    3c88:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3c8a:	6b a1       	ldd	r22, Y+35	; 0x23
    3c8c:	7c a1       	ldd	r23, Y+36	; 0x24
    3c8e:	8d a1       	ldd	r24, Y+37	; 0x25
    3c90:	9e a1       	ldd	r25, Y+38	; 0x26
    3c92:	20 e0       	ldi	r18, 0x00	; 0
    3c94:	30 e0       	ldi	r19, 0x00	; 0
    3c96:	40 e8       	ldi	r20, 0x80	; 128
    3c98:	5f e3       	ldi	r21, 0x3F	; 63
    3c9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c9e:	88 23       	and	r24, r24
    3ca0:	2c f4       	brge	.+10     	; 0x3cac <H_SSD_void_displayIntNumber+0x2e6>
		__ticks = 1;
    3ca2:	81 e0       	ldi	r24, 0x01	; 1
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	9a a3       	std	Y+34, r25	; 0x22
    3ca8:	89 a3       	std	Y+33, r24	; 0x21
    3caa:	3f c0       	rjmp	.+126    	; 0x3d2a <H_SSD_void_displayIntNumber+0x364>
	else if (__tmp > 65535)
    3cac:	6b a1       	ldd	r22, Y+35	; 0x23
    3cae:	7c a1       	ldd	r23, Y+36	; 0x24
    3cb0:	8d a1       	ldd	r24, Y+37	; 0x25
    3cb2:	9e a1       	ldd	r25, Y+38	; 0x26
    3cb4:	20 e0       	ldi	r18, 0x00	; 0
    3cb6:	3f ef       	ldi	r19, 0xFF	; 255
    3cb8:	4f e7       	ldi	r20, 0x7F	; 127
    3cba:	57 e4       	ldi	r21, 0x47	; 71
    3cbc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cc0:	18 16       	cp	r1, r24
    3cc2:	4c f5       	brge	.+82     	; 0x3d16 <H_SSD_void_displayIntNumber+0x350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cc4:	6f a1       	ldd	r22, Y+39	; 0x27
    3cc6:	78 a5       	ldd	r23, Y+40	; 0x28
    3cc8:	89 a5       	ldd	r24, Y+41	; 0x29
    3cca:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ccc:	20 e0       	ldi	r18, 0x00	; 0
    3cce:	30 e0       	ldi	r19, 0x00	; 0
    3cd0:	40 e2       	ldi	r20, 0x20	; 32
    3cd2:	51 e4       	ldi	r21, 0x41	; 65
    3cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cd8:	dc 01       	movw	r26, r24
    3cda:	cb 01       	movw	r24, r22
    3cdc:	bc 01       	movw	r22, r24
    3cde:	cd 01       	movw	r24, r26
    3ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ce4:	dc 01       	movw	r26, r24
    3ce6:	cb 01       	movw	r24, r22
    3ce8:	9a a3       	std	Y+34, r25	; 0x22
    3cea:	89 a3       	std	Y+33, r24	; 0x21
    3cec:	0f c0       	rjmp	.+30     	; 0x3d0c <H_SSD_void_displayIntNumber+0x346>
    3cee:	80 e9       	ldi	r24, 0x90	; 144
    3cf0:	91 e0       	ldi	r25, 0x01	; 1
    3cf2:	98 a3       	std	Y+32, r25	; 0x20
    3cf4:	8f 8f       	std	Y+31, r24	; 0x1f
    3cf6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3cf8:	98 a1       	ldd	r25, Y+32	; 0x20
    3cfa:	01 97       	sbiw	r24, 0x01	; 1
    3cfc:	f1 f7       	brne	.-4      	; 0x3cfa <H_SSD_void_displayIntNumber+0x334>
    3cfe:	98 a3       	std	Y+32, r25	; 0x20
    3d00:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d02:	89 a1       	ldd	r24, Y+33	; 0x21
    3d04:	9a a1       	ldd	r25, Y+34	; 0x22
    3d06:	01 97       	sbiw	r24, 0x01	; 1
    3d08:	9a a3       	std	Y+34, r25	; 0x22
    3d0a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d0c:	89 a1       	ldd	r24, Y+33	; 0x21
    3d0e:	9a a1       	ldd	r25, Y+34	; 0x22
    3d10:	00 97       	sbiw	r24, 0x00	; 0
    3d12:	69 f7       	brne	.-38     	; 0x3cee <H_SSD_void_displayIntNumber+0x328>
    3d14:	14 c0       	rjmp	.+40     	; 0x3d3e <H_SSD_void_displayIntNumber+0x378>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d16:	6b a1       	ldd	r22, Y+35	; 0x23
    3d18:	7c a1       	ldd	r23, Y+36	; 0x24
    3d1a:	8d a1       	ldd	r24, Y+37	; 0x25
    3d1c:	9e a1       	ldd	r25, Y+38	; 0x26
    3d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d22:	dc 01       	movw	r26, r24
    3d24:	cb 01       	movw	r24, r22
    3d26:	9a a3       	std	Y+34, r25	; 0x22
    3d28:	89 a3       	std	Y+33, r24	; 0x21
    3d2a:	89 a1       	ldd	r24, Y+33	; 0x21
    3d2c:	9a a1       	ldd	r25, Y+34	; 0x22
    3d2e:	9e 8f       	std	Y+30, r25	; 0x1e
    3d30:	8d 8f       	std	Y+29, r24	; 0x1d
    3d32:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d34:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3d36:	01 97       	sbiw	r24, 0x01	; 1
    3d38:	f1 f7       	brne	.-4      	; 0x3d36 <H_SSD_void_displayIntNumber+0x370>
    3d3a:	9e 8f       	std	Y+30, r25	; 0x1e
    3d3c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		M_Dio_void_setPinValue(SSD_DIG2_EN,DIO_HIGH);
    3d3e:	8c e0       	ldi	r24, 0x0C	; 12
    3d40:	61 e0       	ldi	r22, 0x01	; 1
    3d42:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
		/*prepare hundreds to be send to BCD*/
		i=2;
    3d46:	82 e0       	ldi	r24, 0x02	; 2
    3d48:	8a af       	std	Y+58, r24	; 0x3a
		M_Dio_void_setPinValue(SSD_A_PIN,(arr[i]>>0)&1);
    3d4a:	8a ad       	ldd	r24, Y+58	; 0x3a
    3d4c:	28 2f       	mov	r18, r24
    3d4e:	30 e0       	ldi	r19, 0x00	; 0
    3d50:	ce 01       	movw	r24, r28
    3d52:	cb 96       	adiw	r24, 0x3b	; 59
    3d54:	fc 01       	movw	r30, r24
    3d56:	e2 0f       	add	r30, r18
    3d58:	f3 1f       	adc	r31, r19
    3d5a:	80 81       	ld	r24, Z
    3d5c:	98 2f       	mov	r25, r24
    3d5e:	91 70       	andi	r25, 0x01	; 1
    3d60:	84 e1       	ldi	r24, 0x14	; 20
    3d62:	69 2f       	mov	r22, r25
    3d64:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_B_PIN,(arr[i]>>1)&1);
    3d68:	8a ad       	ldd	r24, Y+58	; 0x3a
    3d6a:	28 2f       	mov	r18, r24
    3d6c:	30 e0       	ldi	r19, 0x00	; 0
    3d6e:	ce 01       	movw	r24, r28
    3d70:	cb 96       	adiw	r24, 0x3b	; 59
    3d72:	fc 01       	movw	r30, r24
    3d74:	e2 0f       	add	r30, r18
    3d76:	f3 1f       	adc	r31, r19
    3d78:	80 81       	ld	r24, Z
    3d7a:	86 95       	lsr	r24
    3d7c:	98 2f       	mov	r25, r24
    3d7e:	91 70       	andi	r25, 0x01	; 1
    3d80:	85 e1       	ldi	r24, 0x15	; 21
    3d82:	69 2f       	mov	r22, r25
    3d84:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_C_PIN,(arr[i]>>2)&1);
    3d88:	8a ad       	ldd	r24, Y+58	; 0x3a
    3d8a:	28 2f       	mov	r18, r24
    3d8c:	30 e0       	ldi	r19, 0x00	; 0
    3d8e:	ce 01       	movw	r24, r28
    3d90:	cb 96       	adiw	r24, 0x3b	; 59
    3d92:	fc 01       	movw	r30, r24
    3d94:	e2 0f       	add	r30, r18
    3d96:	f3 1f       	adc	r31, r19
    3d98:	80 81       	ld	r24, Z
    3d9a:	86 95       	lsr	r24
    3d9c:	86 95       	lsr	r24
    3d9e:	98 2f       	mov	r25, r24
    3da0:	91 70       	andi	r25, 0x01	; 1
    3da2:	86 e1       	ldi	r24, 0x16	; 22
    3da4:	69 2f       	mov	r22, r25
    3da6:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_D_PIN,(arr[i]>>3)&1);
    3daa:	8a ad       	ldd	r24, Y+58	; 0x3a
    3dac:	28 2f       	mov	r18, r24
    3dae:	30 e0       	ldi	r19, 0x00	; 0
    3db0:	ce 01       	movw	r24, r28
    3db2:	cb 96       	adiw	r24, 0x3b	; 59
    3db4:	fc 01       	movw	r30, r24
    3db6:	e2 0f       	add	r30, r18
    3db8:	f3 1f       	adc	r31, r19
    3dba:	80 81       	ld	r24, Z
    3dbc:	86 95       	lsr	r24
    3dbe:	86 95       	lsr	r24
    3dc0:	86 95       	lsr	r24
    3dc2:	98 2f       	mov	r25, r24
    3dc4:	91 70       	andi	r25, 0x01	; 1
    3dc6:	88 e1       	ldi	r24, 0x18	; 24
    3dc8:	69 2f       	mov	r22, r25
    3dca:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
		/*Enable digit 2 (remember it is pnp - active low*/
		M_Dio_void_setPinValue(SSD_DIG3_EN,DIO_LOW);
    3dce:	89 e1       	ldi	r24, 0x19	; 25
    3dd0:	60 e0       	ldi	r22, 0x00	; 0
    3dd2:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
    3dd6:	80 e0       	ldi	r24, 0x00	; 0
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	a0 e8       	ldi	r26, 0x80	; 128
    3ddc:	bf e3       	ldi	r27, 0x3F	; 63
    3dde:	89 8f       	std	Y+25, r24	; 0x19
    3de0:	9a 8f       	std	Y+26, r25	; 0x1a
    3de2:	ab 8f       	std	Y+27, r26	; 0x1b
    3de4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3de6:	69 8d       	ldd	r22, Y+25	; 0x19
    3de8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3dea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3dec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3dee:	20 e0       	ldi	r18, 0x00	; 0
    3df0:	30 e0       	ldi	r19, 0x00	; 0
    3df2:	4a e7       	ldi	r20, 0x7A	; 122
    3df4:	55 e4       	ldi	r21, 0x45	; 69
    3df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dfa:	dc 01       	movw	r26, r24
    3dfc:	cb 01       	movw	r24, r22
    3dfe:	8d 8b       	std	Y+21, r24	; 0x15
    3e00:	9e 8b       	std	Y+22, r25	; 0x16
    3e02:	af 8b       	std	Y+23, r26	; 0x17
    3e04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3e06:	6d 89       	ldd	r22, Y+21	; 0x15
    3e08:	7e 89       	ldd	r23, Y+22	; 0x16
    3e0a:	8f 89       	ldd	r24, Y+23	; 0x17
    3e0c:	98 8d       	ldd	r25, Y+24	; 0x18
    3e0e:	20 e0       	ldi	r18, 0x00	; 0
    3e10:	30 e0       	ldi	r19, 0x00	; 0
    3e12:	40 e8       	ldi	r20, 0x80	; 128
    3e14:	5f e3       	ldi	r21, 0x3F	; 63
    3e16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e1a:	88 23       	and	r24, r24
    3e1c:	2c f4       	brge	.+10     	; 0x3e28 <H_SSD_void_displayIntNumber+0x462>
		__ticks = 1;
    3e1e:	81 e0       	ldi	r24, 0x01	; 1
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	9c 8b       	std	Y+20, r25	; 0x14
    3e24:	8b 8b       	std	Y+19, r24	; 0x13
    3e26:	3f c0       	rjmp	.+126    	; 0x3ea6 <H_SSD_void_displayIntNumber+0x4e0>
	else if (__tmp > 65535)
    3e28:	6d 89       	ldd	r22, Y+21	; 0x15
    3e2a:	7e 89       	ldd	r23, Y+22	; 0x16
    3e2c:	8f 89       	ldd	r24, Y+23	; 0x17
    3e2e:	98 8d       	ldd	r25, Y+24	; 0x18
    3e30:	20 e0       	ldi	r18, 0x00	; 0
    3e32:	3f ef       	ldi	r19, 0xFF	; 255
    3e34:	4f e7       	ldi	r20, 0x7F	; 127
    3e36:	57 e4       	ldi	r21, 0x47	; 71
    3e38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e3c:	18 16       	cp	r1, r24
    3e3e:	4c f5       	brge	.+82     	; 0x3e92 <H_SSD_void_displayIntNumber+0x4cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e40:	69 8d       	ldd	r22, Y+25	; 0x19
    3e42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e48:	20 e0       	ldi	r18, 0x00	; 0
    3e4a:	30 e0       	ldi	r19, 0x00	; 0
    3e4c:	40 e2       	ldi	r20, 0x20	; 32
    3e4e:	51 e4       	ldi	r21, 0x41	; 65
    3e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e54:	dc 01       	movw	r26, r24
    3e56:	cb 01       	movw	r24, r22
    3e58:	bc 01       	movw	r22, r24
    3e5a:	cd 01       	movw	r24, r26
    3e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e60:	dc 01       	movw	r26, r24
    3e62:	cb 01       	movw	r24, r22
    3e64:	9c 8b       	std	Y+20, r25	; 0x14
    3e66:	8b 8b       	std	Y+19, r24	; 0x13
    3e68:	0f c0       	rjmp	.+30     	; 0x3e88 <H_SSD_void_displayIntNumber+0x4c2>
    3e6a:	80 e9       	ldi	r24, 0x90	; 144
    3e6c:	91 e0       	ldi	r25, 0x01	; 1
    3e6e:	9a 8b       	std	Y+18, r25	; 0x12
    3e70:	89 8b       	std	Y+17, r24	; 0x11
    3e72:	89 89       	ldd	r24, Y+17	; 0x11
    3e74:	9a 89       	ldd	r25, Y+18	; 0x12
    3e76:	01 97       	sbiw	r24, 0x01	; 1
    3e78:	f1 f7       	brne	.-4      	; 0x3e76 <H_SSD_void_displayIntNumber+0x4b0>
    3e7a:	9a 8b       	std	Y+18, r25	; 0x12
    3e7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e7e:	8b 89       	ldd	r24, Y+19	; 0x13
    3e80:	9c 89       	ldd	r25, Y+20	; 0x14
    3e82:	01 97       	sbiw	r24, 0x01	; 1
    3e84:	9c 8b       	std	Y+20, r25	; 0x14
    3e86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e88:	8b 89       	ldd	r24, Y+19	; 0x13
    3e8a:	9c 89       	ldd	r25, Y+20	; 0x14
    3e8c:	00 97       	sbiw	r24, 0x00	; 0
    3e8e:	69 f7       	brne	.-38     	; 0x3e6a <H_SSD_void_displayIntNumber+0x4a4>
    3e90:	14 c0       	rjmp	.+40     	; 0x3eba <H_SSD_void_displayIntNumber+0x4f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e92:	6d 89       	ldd	r22, Y+21	; 0x15
    3e94:	7e 89       	ldd	r23, Y+22	; 0x16
    3e96:	8f 89       	ldd	r24, Y+23	; 0x17
    3e98:	98 8d       	ldd	r25, Y+24	; 0x18
    3e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e9e:	dc 01       	movw	r26, r24
    3ea0:	cb 01       	movw	r24, r22
    3ea2:	9c 8b       	std	Y+20, r25	; 0x14
    3ea4:	8b 8b       	std	Y+19, r24	; 0x13
    3ea6:	8b 89       	ldd	r24, Y+19	; 0x13
    3ea8:	9c 89       	ldd	r25, Y+20	; 0x14
    3eaa:	98 8b       	std	Y+16, r25	; 0x10
    3eac:	8f 87       	std	Y+15, r24	; 0x0f
    3eae:	8f 85       	ldd	r24, Y+15	; 0x0f
    3eb0:	98 89       	ldd	r25, Y+16	; 0x10
    3eb2:	01 97       	sbiw	r24, 0x01	; 1
    3eb4:	f1 f7       	brne	.-4      	; 0x3eb2 <H_SSD_void_displayIntNumber+0x4ec>
    3eb6:	98 8b       	std	Y+16, r25	; 0x10
    3eb8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		M_Dio_void_setPinValue(SSD_DIG3_EN,DIO_HIGH);
    3eba:	89 e1       	ldi	r24, 0x19	; 25
    3ebc:	61 e0       	ldi	r22, 0x01	; 1
    3ebe:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
		/*prepare hundreds to be send to BCD*/
		i=3;
    3ec2:	83 e0       	ldi	r24, 0x03	; 3
    3ec4:	8a af       	std	Y+58, r24	; 0x3a
		M_Dio_void_setPinValue(SSD_A_PIN,(arr[i]>>0)&1);
    3ec6:	8a ad       	ldd	r24, Y+58	; 0x3a
    3ec8:	28 2f       	mov	r18, r24
    3eca:	30 e0       	ldi	r19, 0x00	; 0
    3ecc:	ce 01       	movw	r24, r28
    3ece:	cb 96       	adiw	r24, 0x3b	; 59
    3ed0:	fc 01       	movw	r30, r24
    3ed2:	e2 0f       	add	r30, r18
    3ed4:	f3 1f       	adc	r31, r19
    3ed6:	80 81       	ld	r24, Z
    3ed8:	98 2f       	mov	r25, r24
    3eda:	91 70       	andi	r25, 0x01	; 1
    3edc:	84 e1       	ldi	r24, 0x14	; 20
    3ede:	69 2f       	mov	r22, r25
    3ee0:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_B_PIN,(arr[i]>>1)&1);
    3ee4:	8a ad       	ldd	r24, Y+58	; 0x3a
    3ee6:	28 2f       	mov	r18, r24
    3ee8:	30 e0       	ldi	r19, 0x00	; 0
    3eea:	ce 01       	movw	r24, r28
    3eec:	cb 96       	adiw	r24, 0x3b	; 59
    3eee:	fc 01       	movw	r30, r24
    3ef0:	e2 0f       	add	r30, r18
    3ef2:	f3 1f       	adc	r31, r19
    3ef4:	80 81       	ld	r24, Z
    3ef6:	86 95       	lsr	r24
    3ef8:	98 2f       	mov	r25, r24
    3efa:	91 70       	andi	r25, 0x01	; 1
    3efc:	85 e1       	ldi	r24, 0x15	; 21
    3efe:	69 2f       	mov	r22, r25
    3f00:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_C_PIN,(arr[i]>>2)&1);
    3f04:	8a ad       	ldd	r24, Y+58	; 0x3a
    3f06:	28 2f       	mov	r18, r24
    3f08:	30 e0       	ldi	r19, 0x00	; 0
    3f0a:	ce 01       	movw	r24, r28
    3f0c:	cb 96       	adiw	r24, 0x3b	; 59
    3f0e:	fc 01       	movw	r30, r24
    3f10:	e2 0f       	add	r30, r18
    3f12:	f3 1f       	adc	r31, r19
    3f14:	80 81       	ld	r24, Z
    3f16:	86 95       	lsr	r24
    3f18:	86 95       	lsr	r24
    3f1a:	98 2f       	mov	r25, r24
    3f1c:	91 70       	andi	r25, 0x01	; 1
    3f1e:	86 e1       	ldi	r24, 0x16	; 22
    3f20:	69 2f       	mov	r22, r25
    3f22:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_D_PIN,(arr[i]>>3)&1);
    3f26:	8a ad       	ldd	r24, Y+58	; 0x3a
    3f28:	28 2f       	mov	r18, r24
    3f2a:	30 e0       	ldi	r19, 0x00	; 0
    3f2c:	ce 01       	movw	r24, r28
    3f2e:	cb 96       	adiw	r24, 0x3b	; 59
    3f30:	fc 01       	movw	r30, r24
    3f32:	e2 0f       	add	r30, r18
    3f34:	f3 1f       	adc	r31, r19
    3f36:	80 81       	ld	r24, Z
    3f38:	86 95       	lsr	r24
    3f3a:	86 95       	lsr	r24
    3f3c:	86 95       	lsr	r24
    3f3e:	98 2f       	mov	r25, r24
    3f40:	91 70       	andi	r25, 0x01	; 1
    3f42:	88 e1       	ldi	r24, 0x18	; 24
    3f44:	69 2f       	mov	r22, r25
    3f46:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
		/*Enable digit 2 (remember it is pnp - active low*/
		M_Dio_void_setPinValue(SSD_DIG4_EN,DIO_LOW);
    3f4a:	8a e1       	ldi	r24, 0x1A	; 26
    3f4c:	60 e0       	ldi	r22, 0x00	; 0
    3f4e:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
    3f52:	80 e0       	ldi	r24, 0x00	; 0
    3f54:	90 e0       	ldi	r25, 0x00	; 0
    3f56:	a0 e8       	ldi	r26, 0x80	; 128
    3f58:	bf e3       	ldi	r27, 0x3F	; 63
    3f5a:	8b 87       	std	Y+11, r24	; 0x0b
    3f5c:	9c 87       	std	Y+12, r25	; 0x0c
    3f5e:	ad 87       	std	Y+13, r26	; 0x0d
    3f60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f62:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f64:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f66:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f68:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f6a:	20 e0       	ldi	r18, 0x00	; 0
    3f6c:	30 e0       	ldi	r19, 0x00	; 0
    3f6e:	4a e7       	ldi	r20, 0x7A	; 122
    3f70:	55 e4       	ldi	r21, 0x45	; 69
    3f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f76:	dc 01       	movw	r26, r24
    3f78:	cb 01       	movw	r24, r22
    3f7a:	8f 83       	std	Y+7, r24	; 0x07
    3f7c:	98 87       	std	Y+8, r25	; 0x08
    3f7e:	a9 87       	std	Y+9, r26	; 0x09
    3f80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f82:	6f 81       	ldd	r22, Y+7	; 0x07
    3f84:	78 85       	ldd	r23, Y+8	; 0x08
    3f86:	89 85       	ldd	r24, Y+9	; 0x09
    3f88:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f8a:	20 e0       	ldi	r18, 0x00	; 0
    3f8c:	30 e0       	ldi	r19, 0x00	; 0
    3f8e:	40 e8       	ldi	r20, 0x80	; 128
    3f90:	5f e3       	ldi	r21, 0x3F	; 63
    3f92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f96:	88 23       	and	r24, r24
    3f98:	2c f4       	brge	.+10     	; 0x3fa4 <H_SSD_void_displayIntNumber+0x5de>
		__ticks = 1;
    3f9a:	81 e0       	ldi	r24, 0x01	; 1
    3f9c:	90 e0       	ldi	r25, 0x00	; 0
    3f9e:	9e 83       	std	Y+6, r25	; 0x06
    3fa0:	8d 83       	std	Y+5, r24	; 0x05
    3fa2:	3f c0       	rjmp	.+126    	; 0x4022 <H_SSD_void_displayIntNumber+0x65c>
	else if (__tmp > 65535)
    3fa4:	6f 81       	ldd	r22, Y+7	; 0x07
    3fa6:	78 85       	ldd	r23, Y+8	; 0x08
    3fa8:	89 85       	ldd	r24, Y+9	; 0x09
    3faa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fac:	20 e0       	ldi	r18, 0x00	; 0
    3fae:	3f ef       	ldi	r19, 0xFF	; 255
    3fb0:	4f e7       	ldi	r20, 0x7F	; 127
    3fb2:	57 e4       	ldi	r21, 0x47	; 71
    3fb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fb8:	18 16       	cp	r1, r24
    3fba:	4c f5       	brge	.+82     	; 0x400e <H_SSD_void_displayIntNumber+0x648>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fc4:	20 e0       	ldi	r18, 0x00	; 0
    3fc6:	30 e0       	ldi	r19, 0x00	; 0
    3fc8:	40 e2       	ldi	r20, 0x20	; 32
    3fca:	51 e4       	ldi	r21, 0x41	; 65
    3fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fd0:	dc 01       	movw	r26, r24
    3fd2:	cb 01       	movw	r24, r22
    3fd4:	bc 01       	movw	r22, r24
    3fd6:	cd 01       	movw	r24, r26
    3fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fdc:	dc 01       	movw	r26, r24
    3fde:	cb 01       	movw	r24, r22
    3fe0:	9e 83       	std	Y+6, r25	; 0x06
    3fe2:	8d 83       	std	Y+5, r24	; 0x05
    3fe4:	0f c0       	rjmp	.+30     	; 0x4004 <H_SSD_void_displayIntNumber+0x63e>
    3fe6:	80 e9       	ldi	r24, 0x90	; 144
    3fe8:	91 e0       	ldi	r25, 0x01	; 1
    3fea:	9c 83       	std	Y+4, r25	; 0x04
    3fec:	8b 83       	std	Y+3, r24	; 0x03
    3fee:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ff2:	01 97       	sbiw	r24, 0x01	; 1
    3ff4:	f1 f7       	brne	.-4      	; 0x3ff2 <H_SSD_void_displayIntNumber+0x62c>
    3ff6:	9c 83       	std	Y+4, r25	; 0x04
    3ff8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ffa:	8d 81       	ldd	r24, Y+5	; 0x05
    3ffc:	9e 81       	ldd	r25, Y+6	; 0x06
    3ffe:	01 97       	sbiw	r24, 0x01	; 1
    4000:	9e 83       	std	Y+6, r25	; 0x06
    4002:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4004:	8d 81       	ldd	r24, Y+5	; 0x05
    4006:	9e 81       	ldd	r25, Y+6	; 0x06
    4008:	00 97       	sbiw	r24, 0x00	; 0
    400a:	69 f7       	brne	.-38     	; 0x3fe6 <H_SSD_void_displayIntNumber+0x620>
    400c:	14 c0       	rjmp	.+40     	; 0x4036 <H_SSD_void_displayIntNumber+0x670>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    400e:	6f 81       	ldd	r22, Y+7	; 0x07
    4010:	78 85       	ldd	r23, Y+8	; 0x08
    4012:	89 85       	ldd	r24, Y+9	; 0x09
    4014:	9a 85       	ldd	r25, Y+10	; 0x0a
    4016:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    401a:	dc 01       	movw	r26, r24
    401c:	cb 01       	movw	r24, r22
    401e:	9e 83       	std	Y+6, r25	; 0x06
    4020:	8d 83       	std	Y+5, r24	; 0x05
    4022:	8d 81       	ldd	r24, Y+5	; 0x05
    4024:	9e 81       	ldd	r25, Y+6	; 0x06
    4026:	9a 83       	std	Y+2, r25	; 0x02
    4028:	89 83       	std	Y+1, r24	; 0x01
    402a:	89 81       	ldd	r24, Y+1	; 0x01
    402c:	9a 81       	ldd	r25, Y+2	; 0x02
    402e:	01 97       	sbiw	r24, 0x01	; 1
    4030:	f1 f7       	brne	.-4      	; 0x402e <H_SSD_void_displayIntNumber+0x668>
    4032:	9a 83       	std	Y+2, r25	; 0x02
    4034:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		M_Dio_void_setPinValue(SSD_DIG4_EN,DIO_HIGH);
    4036:	8a e1       	ldi	r24, 0x1A	; 26
    4038:	61 e0       	ldi	r22, 0x01	; 1
    403a:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
		arr[i]= Copy_number %10;
		Copy_number /= 10;
		i++;
	}
	/*prepare units to be send to BCD(4bits)*/
	for(u8 j=0;j<SSD_DISPLAY_TIME*4;j++)
    403e:	89 ad       	ldd	r24, Y+57	; 0x39
    4040:	8f 5f       	subi	r24, 0xFF	; 255
    4042:	89 af       	std	Y+57, r24	; 0x39
    4044:	05 cd       	rjmp	.-1526   	; 0x3a50 <H_SSD_void_displayIntNumber+0x8a>

00004046 <H_readPB>:
#include"PB_Types.h"
#include"PB_CFG.h"
#include"PB_Init.h"

PB_State H_readPB(PB_ID PushBID,PB_ActiveType Mode)
{
    4046:	df 93       	push	r29
    4048:	cf 93       	push	r28
    404a:	cd b7       	in	r28, 0x3d	; 61
    404c:	de b7       	in	r29, 0x3e	; 62
    404e:	64 97       	sbiw	r28, 0x14	; 20
    4050:	0f b6       	in	r0, 0x3f	; 63
    4052:	f8 94       	cli
    4054:	de bf       	out	0x3e, r29	; 62
    4056:	0f be       	out	0x3f, r0	; 63
    4058:	cd bf       	out	0x3d, r28	; 61
    405a:	89 8b       	std	Y+17, r24	; 0x11
    405c:	6a 8b       	std	Y+18, r22	; 0x12
	PB_State Button_state=PB_RELEASED;
    405e:	81 e0       	ldi	r24, 0x01	; 1
    4060:	88 8b       	std	Y+16, r24	; 0x10
	Dio_LevelType Local_pin_value;
	switch(PushBID)
    4062:	89 89       	ldd	r24, Y+17	; 0x11
    4064:	28 2f       	mov	r18, r24
    4066:	30 e0       	ldi	r19, 0x00	; 0
    4068:	3c 8b       	std	Y+20, r19	; 0x14
    406a:	2b 8b       	std	Y+19, r18	; 0x13
    406c:	8b 89       	ldd	r24, Y+19	; 0x13
    406e:	9c 89       	ldd	r25, Y+20	; 0x14
    4070:	81 30       	cpi	r24, 0x01	; 1
    4072:	91 05       	cpc	r25, r1
    4074:	09 f4       	brne	.+2      	; 0x4078 <H_readPB+0x32>
    4076:	9b c0       	rjmp	.+310    	; 0x41ae <H_readPB+0x168>
    4078:	2b 89       	ldd	r18, Y+19	; 0x13
    407a:	3c 89       	ldd	r19, Y+20	; 0x14
    407c:	22 30       	cpi	r18, 0x02	; 2
    407e:	31 05       	cpc	r19, r1
    4080:	2c f4       	brge	.+10     	; 0x408c <H_readPB+0x46>
    4082:	8b 89       	ldd	r24, Y+19	; 0x13
    4084:	9c 89       	ldd	r25, Y+20	; 0x14
    4086:	00 97       	sbiw	r24, 0x00	; 0
    4088:	71 f0       	breq	.+28     	; 0x40a6 <H_readPB+0x60>
    408a:	c3 c0       	rjmp	.+390    	; 0x4212 <H_readPB+0x1cc>
    408c:	2b 89       	ldd	r18, Y+19	; 0x13
    408e:	3c 89       	ldd	r19, Y+20	; 0x14
    4090:	22 30       	cpi	r18, 0x02	; 2
    4092:	31 05       	cpc	r19, r1
    4094:	09 f4       	brne	.+2      	; 0x4098 <H_readPB+0x52>
    4096:	9c c0       	rjmp	.+312    	; 0x41d0 <H_readPB+0x18a>
    4098:	8b 89       	ldd	r24, Y+19	; 0x13
    409a:	9c 89       	ldd	r25, Y+20	; 0x14
    409c:	83 30       	cpi	r24, 0x03	; 3
    409e:	91 05       	cpc	r25, r1
    40a0:	09 f4       	brne	.+2      	; 0x40a4 <H_readPB+0x5e>
    40a2:	a7 c0       	rjmp	.+334    	; 0x41f2 <H_readPB+0x1ac>
    40a4:	b6 c0       	rjmp	.+364    	; 0x4212 <H_readPB+0x1cc>
	{
	case PB_ID1:
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW1);
    40a6:	8f e2       	ldi	r24, 0x2F	; 47
    40a8:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <M_Dio_en_getPinValue>
    40ac:	8f 87       	std	Y+15, r24	; 0x0f
		if(Local_pin_value==PB_PRESSED_ACTL)
    40ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    40b0:	88 23       	and	r24, r24
    40b2:	09 f0       	breq	.+2      	; 0x40b6 <H_readPB+0x70>
    40b4:	ae c0       	rjmp	.+348    	; 0x4212 <H_readPB+0x1cc>
    40b6:	80 e0       	ldi	r24, 0x00	; 0
    40b8:	90 e0       	ldi	r25, 0x00	; 0
    40ba:	a8 e4       	ldi	r26, 0x48	; 72
    40bc:	b2 e4       	ldi	r27, 0x42	; 66
    40be:	8b 87       	std	Y+11, r24	; 0x0b
    40c0:	9c 87       	std	Y+12, r25	; 0x0c
    40c2:	ad 87       	std	Y+13, r26	; 0x0d
    40c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    40c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    40ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    40cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    40ce:	20 e0       	ldi	r18, 0x00	; 0
    40d0:	30 e0       	ldi	r19, 0x00	; 0
    40d2:	4a e7       	ldi	r20, 0x7A	; 122
    40d4:	55 e4       	ldi	r21, 0x45	; 69
    40d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40da:	dc 01       	movw	r26, r24
    40dc:	cb 01       	movw	r24, r22
    40de:	8f 83       	std	Y+7, r24	; 0x07
    40e0:	98 87       	std	Y+8, r25	; 0x08
    40e2:	a9 87       	std	Y+9, r26	; 0x09
    40e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40e6:	6f 81       	ldd	r22, Y+7	; 0x07
    40e8:	78 85       	ldd	r23, Y+8	; 0x08
    40ea:	89 85       	ldd	r24, Y+9	; 0x09
    40ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    40ee:	20 e0       	ldi	r18, 0x00	; 0
    40f0:	30 e0       	ldi	r19, 0x00	; 0
    40f2:	40 e8       	ldi	r20, 0x80	; 128
    40f4:	5f e3       	ldi	r21, 0x3F	; 63
    40f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40fa:	88 23       	and	r24, r24
    40fc:	2c f4       	brge	.+10     	; 0x4108 <H_readPB+0xc2>
		__ticks = 1;
    40fe:	81 e0       	ldi	r24, 0x01	; 1
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	9e 83       	std	Y+6, r25	; 0x06
    4104:	8d 83       	std	Y+5, r24	; 0x05
    4106:	3f c0       	rjmp	.+126    	; 0x4186 <H_readPB+0x140>
	else if (__tmp > 65535)
    4108:	6f 81       	ldd	r22, Y+7	; 0x07
    410a:	78 85       	ldd	r23, Y+8	; 0x08
    410c:	89 85       	ldd	r24, Y+9	; 0x09
    410e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4110:	20 e0       	ldi	r18, 0x00	; 0
    4112:	3f ef       	ldi	r19, 0xFF	; 255
    4114:	4f e7       	ldi	r20, 0x7F	; 127
    4116:	57 e4       	ldi	r21, 0x47	; 71
    4118:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    411c:	18 16       	cp	r1, r24
    411e:	4c f5       	brge	.+82     	; 0x4172 <H_readPB+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4120:	6b 85       	ldd	r22, Y+11	; 0x0b
    4122:	7c 85       	ldd	r23, Y+12	; 0x0c
    4124:	8d 85       	ldd	r24, Y+13	; 0x0d
    4126:	9e 85       	ldd	r25, Y+14	; 0x0e
    4128:	20 e0       	ldi	r18, 0x00	; 0
    412a:	30 e0       	ldi	r19, 0x00	; 0
    412c:	40 e2       	ldi	r20, 0x20	; 32
    412e:	51 e4       	ldi	r21, 0x41	; 65
    4130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4134:	dc 01       	movw	r26, r24
    4136:	cb 01       	movw	r24, r22
    4138:	bc 01       	movw	r22, r24
    413a:	cd 01       	movw	r24, r26
    413c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4140:	dc 01       	movw	r26, r24
    4142:	cb 01       	movw	r24, r22
    4144:	9e 83       	std	Y+6, r25	; 0x06
    4146:	8d 83       	std	Y+5, r24	; 0x05
    4148:	0f c0       	rjmp	.+30     	; 0x4168 <H_readPB+0x122>
    414a:	80 e9       	ldi	r24, 0x90	; 144
    414c:	91 e0       	ldi	r25, 0x01	; 1
    414e:	9c 83       	std	Y+4, r25	; 0x04
    4150:	8b 83       	std	Y+3, r24	; 0x03
    4152:	8b 81       	ldd	r24, Y+3	; 0x03
    4154:	9c 81       	ldd	r25, Y+4	; 0x04
    4156:	01 97       	sbiw	r24, 0x01	; 1
    4158:	f1 f7       	brne	.-4      	; 0x4156 <H_readPB+0x110>
    415a:	9c 83       	std	Y+4, r25	; 0x04
    415c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    415e:	8d 81       	ldd	r24, Y+5	; 0x05
    4160:	9e 81       	ldd	r25, Y+6	; 0x06
    4162:	01 97       	sbiw	r24, 0x01	; 1
    4164:	9e 83       	std	Y+6, r25	; 0x06
    4166:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4168:	8d 81       	ldd	r24, Y+5	; 0x05
    416a:	9e 81       	ldd	r25, Y+6	; 0x06
    416c:	00 97       	sbiw	r24, 0x00	; 0
    416e:	69 f7       	brne	.-38     	; 0x414a <H_readPB+0x104>
    4170:	19 c0       	rjmp	.+50     	; 0x41a4 <H_readPB+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4172:	6f 81       	ldd	r22, Y+7	; 0x07
    4174:	78 85       	ldd	r23, Y+8	; 0x08
    4176:	89 85       	ldd	r24, Y+9	; 0x09
    4178:	9a 85       	ldd	r25, Y+10	; 0x0a
    417a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    417e:	dc 01       	movw	r26, r24
    4180:	cb 01       	movw	r24, r22
    4182:	9e 83       	std	Y+6, r25	; 0x06
    4184:	8d 83       	std	Y+5, r24	; 0x05
    4186:	8d 81       	ldd	r24, Y+5	; 0x05
    4188:	9e 81       	ldd	r25, Y+6	; 0x06
    418a:	9a 83       	std	Y+2, r25	; 0x02
    418c:	89 83       	std	Y+1, r24	; 0x01
    418e:	89 81       	ldd	r24, Y+1	; 0x01
    4190:	9a 81       	ldd	r25, Y+2	; 0x02
    4192:	01 97       	sbiw	r24, 0x01	; 1
    4194:	f1 f7       	brne	.-4      	; 0x4192 <H_readPB+0x14c>
    4196:	9a 83       	std	Y+2, r25	; 0x02
    4198:	89 83       	std	Y+1, r24	; 0x01
    419a:	04 c0       	rjmp	.+8      	; 0x41a4 <H_readPB+0x15e>
		{
			_delay_ms(50);
			while(Local_pin_value==PB_PRESSED_ACTL)
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW1);
    419c:	8f e2       	ldi	r24, 0x2F	; 47
    419e:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <M_Dio_en_getPinValue>
    41a2:	8f 87       	std	Y+15, r24	; 0x0f
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW1);
		if(Local_pin_value==PB_PRESSED_ACTL)
		{
			_delay_ms(50);
			while(Local_pin_value==PB_PRESSED_ACTL)
    41a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    41a6:	88 23       	and	r24, r24
    41a8:	c9 f3       	breq	.-14     	; 0x419c <H_readPB+0x156>
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW1);
			}
			Button_state=PB_PRESSED;
    41aa:	18 8a       	std	Y+16, r1	; 0x10
    41ac:	32 c0       	rjmp	.+100    	; 0x4212 <H_readPB+0x1cc>
#error("Wrong Activation Mode")
#endif
	break;
	case PB_ID2:
#if(Mode == PB_ACTIVE_LOW)
			Local_pin_value=M_Dio_en_getPinValue(PB_SW2);
    41ae:	8e e2       	ldi	r24, 0x2E	; 46
    41b0:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <M_Dio_en_getPinValue>
    41b4:	8f 87       	std	Y+15, r24	; 0x0f
			if(Local_pin_value==PB_PRESSED_ACTL)
    41b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    41b8:	88 23       	and	r24, r24
    41ba:	59 f5       	brne	.+86     	; 0x4212 <H_readPB+0x1cc>
    41bc:	04 c0       	rjmp	.+8      	; 0x41c6 <H_readPB+0x180>
			{
				while(Local_pin_value==PB_PRESSED_ACTL)
				{
					Local_pin_value=M_Dio_en_getPinValue(PB_SW2);
    41be:	8e e2       	ldi	r24, 0x2E	; 46
    41c0:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <M_Dio_en_getPinValue>
    41c4:	8f 87       	std	Y+15, r24	; 0x0f
	case PB_ID2:
#if(Mode == PB_ACTIVE_LOW)
			Local_pin_value=M_Dio_en_getPinValue(PB_SW2);
			if(Local_pin_value==PB_PRESSED_ACTL)
			{
				while(Local_pin_value==PB_PRESSED_ACTL)
    41c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    41c8:	88 23       	and	r24, r24
    41ca:	c9 f3       	breq	.-14     	; 0x41be <H_readPB+0x178>
				{
					Local_pin_value=M_Dio_en_getPinValue(PB_SW2);
				}
				Button_state=PB_PRESSED;
    41cc:	18 8a       	std	Y+16, r1	; 0x10
    41ce:	21 c0       	rjmp	.+66     	; 0x4212 <H_readPB+0x1cc>
#error("Wrong Activation Mode")
#endif
		break;
		case PB_ID3:
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW3);
    41d0:	8d e2       	ldi	r24, 0x2D	; 45
    41d2:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <M_Dio_en_getPinValue>
    41d6:	8f 87       	std	Y+15, r24	; 0x0f
		if(Local_pin_value==PB_PRESSED_ACTL)
    41d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    41da:	88 23       	and	r24, r24
    41dc:	d1 f4       	brne	.+52     	; 0x4212 <H_readPB+0x1cc>
    41de:	04 c0       	rjmp	.+8      	; 0x41e8 <H_readPB+0x1a2>
		{
			while(Local_pin_value==PB_PRESSED_ACTL)
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW3);
    41e0:	8d e2       	ldi	r24, 0x2D	; 45
    41e2:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <M_Dio_en_getPinValue>
    41e6:	8f 87       	std	Y+15, r24	; 0x0f
		case PB_ID3:
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW3);
		if(Local_pin_value==PB_PRESSED_ACTL)
		{
			while(Local_pin_value==PB_PRESSED_ACTL)
    41e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    41ea:	88 23       	and	r24, r24
    41ec:	c9 f3       	breq	.-14     	; 0x41e0 <H_readPB+0x19a>
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW3);
			}
			Button_state=PB_PRESSED;
    41ee:	18 8a       	std	Y+16, r1	; 0x10
    41f0:	10 c0       	rjmp	.+32     	; 0x4212 <H_readPB+0x1cc>
#error("Wrong Activation Mode")
#endif
	break;
	case PB_ID4:
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW4);
    41f2:	8b e2       	ldi	r24, 0x2B	; 43
    41f4:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <M_Dio_en_getPinValue>
    41f8:	8f 87       	std	Y+15, r24	; 0x0f
		if(Local_pin_value==PB_PRESSED_ACTL)
    41fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    41fc:	88 23       	and	r24, r24
    41fe:	49 f4       	brne	.+18     	; 0x4212 <H_readPB+0x1cc>
    4200:	04 c0       	rjmp	.+8      	; 0x420a <H_readPB+0x1c4>
		{
			while(Local_pin_value==PB_PRESSED_ACTL)
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW4);
    4202:	8b e2       	ldi	r24, 0x2B	; 43
    4204:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <M_Dio_en_getPinValue>
    4208:	8f 87       	std	Y+15, r24	; 0x0f
	case PB_ID4:
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW4);
		if(Local_pin_value==PB_PRESSED_ACTL)
		{
			while(Local_pin_value==PB_PRESSED_ACTL)
    420a:	8f 85       	ldd	r24, Y+15	; 0x0f
    420c:	88 23       	and	r24, r24
    420e:	c9 f3       	breq	.-14     	; 0x4202 <H_readPB+0x1bc>
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW4);
			}
			Button_state=PB_PRESSED;
    4210:	18 8a       	std	Y+16, r1	; 0x10
#else
#error("Wrong Activation Mode")
#endif
	break;
	}
	return Button_state;
    4212:	88 89       	ldd	r24, Y+16	; 0x10
}
    4214:	64 96       	adiw	r28, 0x14	; 20
    4216:	0f b6       	in	r0, 0x3f	; 63
    4218:	f8 94       	cli
    421a:	de bf       	out	0x3e, r29	; 62
    421c:	0f be       	out	0x3f, r0	; 63
    421e:	cd bf       	out	0x3d, r28	; 61
    4220:	cf 91       	pop	r28
    4222:	df 91       	pop	r29
    4224:	08 95       	ret

00004226 <H_Temprature_void_Init>:



ADC_ConfigType ADC_OBJECT={VCC_5V,DIV_BY_8,Right_Adjust,ADC0,AUTO_Trigger_Enable,Free_Runnin_Mode};
void H_Temprature_void_Init(void)
{
    4226:	df 93       	push	r29
    4228:	cf 93       	push	r28
    422a:	cd b7       	in	r28, 0x3d	; 61
    422c:	de b7       	in	r29, 0x3e	; 62
	ADC_Init(&ADC_OBJECT);
    422e:	84 e7       	ldi	r24, 0x74	; 116
    4230:	91 e0       	ldi	r25, 0x01	; 1
    4232:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <ADC_Init>


}
    4236:	cf 91       	pop	r28
    4238:	df 91       	pop	r29
    423a:	08 95       	ret

0000423c <H_Temprature_u16_Read>:
u16 H_Temprature_u16_Read(void)
{
    423c:	df 93       	push	r29
    423e:	cf 93       	push	r28
    4240:	00 d0       	rcall	.+0      	; 0x4242 <H_Temprature_u16_Read+0x6>
    4242:	00 d0       	rcall	.+0      	; 0x4244 <H_Temprature_u16_Read+0x8>
    4244:	cd b7       	in	r28, 0x3d	; 61
    4246:	de b7       	in	r29, 0x3e	; 62
	u16 Return_value=0;
    4248:	1c 82       	std	Y+4, r1	; 0x04
    424a:	1b 82       	std	Y+3, r1	; 0x03
	u16 Temp_value=0;
    424c:	1a 82       	std	Y+2, r1	; 0x02
    424e:	19 82       	std	Y+1, r1	; 0x01
	Return_value=ADC_getDigitalValueSynchNonBlocking(ADC0,ENABLE);
    4250:	80 e0       	ldi	r24, 0x00	; 0
    4252:	61 e0       	ldi	r22, 0x01	; 1
    4254:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <ADC_getDigitalValueSynchNonBlocking>
    4258:	9c 83       	std	Y+4, r25	; 0x04
    425a:	8b 83       	std	Y+3, r24	; 0x03
	Temp_value=(((Return_value*5)/10)-1);
    425c:	2b 81       	ldd	r18, Y+3	; 0x03
    425e:	3c 81       	ldd	r19, Y+4	; 0x04
    4260:	c9 01       	movw	r24, r18
    4262:	88 0f       	add	r24, r24
    4264:	99 1f       	adc	r25, r25
    4266:	88 0f       	add	r24, r24
    4268:	99 1f       	adc	r25, r25
    426a:	82 0f       	add	r24, r18
    426c:	93 1f       	adc	r25, r19
    426e:	2a e0       	ldi	r18, 0x0A	; 10
    4270:	30 e0       	ldi	r19, 0x00	; 0
    4272:	b9 01       	movw	r22, r18
    4274:	0e 94 49 29 	call	0x5292	; 0x5292 <__udivmodhi4>
    4278:	cb 01       	movw	r24, r22
    427a:	01 97       	sbiw	r24, 0x01	; 1
    427c:	9a 83       	std	Y+2, r25	; 0x02
    427e:	89 83       	std	Y+1, r24	; 0x01
	return Temp_value;
    4280:	89 81       	ldd	r24, Y+1	; 0x01
    4282:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4284:	0f 90       	pop	r0
    4286:	0f 90       	pop	r0
    4288:	0f 90       	pop	r0
    428a:	0f 90       	pop	r0
    428c:	cf 91       	pop	r28
    428e:	df 91       	pop	r29
    4290:	08 95       	ret

00004292 <H_LED_void_Turn_on>:
#include"LED_CFG.h"
#include"LED_Init.h"


void H_LED_void_Turn_on(u8 ledID)
{
    4292:	df 93       	push	r29
    4294:	cf 93       	push	r28
    4296:	00 d0       	rcall	.+0      	; 0x4298 <H_LED_void_Turn_on+0x6>
    4298:	0f 92       	push	r0
    429a:	cd b7       	in	r28, 0x3d	; 61
    429c:	de b7       	in	r29, 0x3e	; 62
    429e:	89 83       	std	Y+1, r24	; 0x01
	switch(ledID)
    42a0:	89 81       	ldd	r24, Y+1	; 0x01
    42a2:	28 2f       	mov	r18, r24
    42a4:	30 e0       	ldi	r19, 0x00	; 0
    42a6:	3b 83       	std	Y+3, r19	; 0x03
    42a8:	2a 83       	std	Y+2, r18	; 0x02
    42aa:	8a 81       	ldd	r24, Y+2	; 0x02
    42ac:	9b 81       	ldd	r25, Y+3	; 0x03
    42ae:	81 30       	cpi	r24, 0x01	; 1
    42b0:	91 05       	cpc	r25, r1
    42b2:	f9 f0       	breq	.+62     	; 0x42f2 <H_LED_void_Turn_on+0x60>
    42b4:	2a 81       	ldd	r18, Y+2	; 0x02
    42b6:	3b 81       	ldd	r19, Y+3	; 0x03
    42b8:	22 30       	cpi	r18, 0x02	; 2
    42ba:	31 05       	cpc	r19, r1
    42bc:	2c f4       	brge	.+10     	; 0x42c8 <H_LED_void_Turn_on+0x36>
    42be:	8a 81       	ldd	r24, Y+2	; 0x02
    42c0:	9b 81       	ldd	r25, Y+3	; 0x03
    42c2:	00 97       	sbiw	r24, 0x00	; 0
    42c4:	61 f0       	breq	.+24     	; 0x42de <H_LED_void_Turn_on+0x4c>
    42c6:	1e c0       	rjmp	.+60     	; 0x4304 <H_LED_void_Turn_on+0x72>
    42c8:	2a 81       	ldd	r18, Y+2	; 0x02
    42ca:	3b 81       	ldd	r19, Y+3	; 0x03
    42cc:	22 30       	cpi	r18, 0x02	; 2
    42ce:	31 05       	cpc	r19, r1
    42d0:	59 f0       	breq	.+22     	; 0x42e8 <H_LED_void_Turn_on+0x56>
    42d2:	8a 81       	ldd	r24, Y+2	; 0x02
    42d4:	9b 81       	ldd	r25, Y+3	; 0x03
    42d6:	83 30       	cpi	r24, 0x03	; 3
    42d8:	91 05       	cpc	r25, r1
    42da:	81 f0       	breq	.+32     	; 0x42fc <H_LED_void_Turn_on+0x6a>
    42dc:	13 c0       	rjmp	.+38     	; 0x4304 <H_LED_void_Turn_on+0x72>
	{
	case LED_RED:
#if(LED_RED_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_RED_PIN,DIO_HIGH);
    42de:	8b e1       	ldi	r24, 0x1B	; 27
    42e0:	61 e0       	ldi	r22, 0x01	; 1
    42e2:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
    42e6:	0e c0       	rjmp	.+28     	; 0x4304 <H_LED_void_Turn_on+0x72>
#error("Wrong Led direction")
#endif
		break;
	case LED_GREEN:
#if(LED_GREEN_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_GREEN_PIN,DIO_HIGH);
    42e8:	8e e0       	ldi	r24, 0x0E	; 14
    42ea:	61 e0       	ldi	r22, 0x01	; 1
    42ec:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
    42f0:	09 c0       	rjmp	.+18     	; 0x4304 <H_LED_void_Turn_on+0x72>
#error("Wrong Led direction")
#endif
		break;
	case LED_BLUE:
#if(LED_BLUE_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_BLUE_PIN,DIO_HIGH);
    42f2:	8f e0       	ldi	r24, 0x0F	; 15
    42f4:	61 e0       	ldi	r22, 0x01	; 1
    42f6:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
    42fa:	04 c0       	rjmp	.+8      	; 0x4304 <H_LED_void_Turn_on+0x72>
#error("Wrong Led direction")
#endif
		break;
	case LED_YELLOW:
#if(LED_YELLOW_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_YELLOW_PIN,DIO_HIGH);
    42fc:	80 e1       	ldi	r24, 0x10	; 16
    42fe:	61 e0       	ldi	r22, 0x01	; 1
    4300:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
#error("Wrong Led direction")
#endif
		break;

	}
}
    4304:	0f 90       	pop	r0
    4306:	0f 90       	pop	r0
    4308:	0f 90       	pop	r0
    430a:	cf 91       	pop	r28
    430c:	df 91       	pop	r29
    430e:	08 95       	ret

00004310 <H_LED_void_Turn_off>:
void H_LED_void_Turn_off(u8 ledID)
{
    4310:	df 93       	push	r29
    4312:	cf 93       	push	r28
    4314:	00 d0       	rcall	.+0      	; 0x4316 <H_LED_void_Turn_off+0x6>
    4316:	0f 92       	push	r0
    4318:	cd b7       	in	r28, 0x3d	; 61
    431a:	de b7       	in	r29, 0x3e	; 62
    431c:	89 83       	std	Y+1, r24	; 0x01
	switch(ledID)
    431e:	89 81       	ldd	r24, Y+1	; 0x01
    4320:	28 2f       	mov	r18, r24
    4322:	30 e0       	ldi	r19, 0x00	; 0
    4324:	3b 83       	std	Y+3, r19	; 0x03
    4326:	2a 83       	std	Y+2, r18	; 0x02
    4328:	8a 81       	ldd	r24, Y+2	; 0x02
    432a:	9b 81       	ldd	r25, Y+3	; 0x03
    432c:	81 30       	cpi	r24, 0x01	; 1
    432e:	91 05       	cpc	r25, r1
    4330:	f9 f0       	breq	.+62     	; 0x4370 <H_LED_void_Turn_off+0x60>
    4332:	2a 81       	ldd	r18, Y+2	; 0x02
    4334:	3b 81       	ldd	r19, Y+3	; 0x03
    4336:	22 30       	cpi	r18, 0x02	; 2
    4338:	31 05       	cpc	r19, r1
    433a:	2c f4       	brge	.+10     	; 0x4346 <H_LED_void_Turn_off+0x36>
    433c:	8a 81       	ldd	r24, Y+2	; 0x02
    433e:	9b 81       	ldd	r25, Y+3	; 0x03
    4340:	00 97       	sbiw	r24, 0x00	; 0
    4342:	61 f0       	breq	.+24     	; 0x435c <H_LED_void_Turn_off+0x4c>
    4344:	1e c0       	rjmp	.+60     	; 0x4382 <H_LED_void_Turn_off+0x72>
    4346:	2a 81       	ldd	r18, Y+2	; 0x02
    4348:	3b 81       	ldd	r19, Y+3	; 0x03
    434a:	22 30       	cpi	r18, 0x02	; 2
    434c:	31 05       	cpc	r19, r1
    434e:	59 f0       	breq	.+22     	; 0x4366 <H_LED_void_Turn_off+0x56>
    4350:	8a 81       	ldd	r24, Y+2	; 0x02
    4352:	9b 81       	ldd	r25, Y+3	; 0x03
    4354:	83 30       	cpi	r24, 0x03	; 3
    4356:	91 05       	cpc	r25, r1
    4358:	81 f0       	breq	.+32     	; 0x437a <H_LED_void_Turn_off+0x6a>
    435a:	13 c0       	rjmp	.+38     	; 0x4382 <H_LED_void_Turn_off+0x72>
		{
		case LED_RED:
#if(LED_RED_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_RED_PIN,DIO_LOW);
    435c:	8b e1       	ldi	r24, 0x1B	; 27
    435e:	60 e0       	ldi	r22, 0x00	; 0
    4360:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
    4364:	0e c0       	rjmp	.+28     	; 0x4382 <H_LED_void_Turn_off+0x72>
#error("Wrong Led direction")
#endif
		break;
		case LED_GREEN:
#if(LED_GREEN_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_GREEN_PIN,DIO_LOW);
    4366:	8e e0       	ldi	r24, 0x0E	; 14
    4368:	60 e0       	ldi	r22, 0x00	; 0
    436a:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
    436e:	09 c0       	rjmp	.+18     	; 0x4382 <H_LED_void_Turn_off+0x72>
#error("Wrong Led direction")
#endif
		break;
		case LED_BLUE:
#if(LED_BLUE_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_BLUE_PIN,DIO_LOW);
    4370:	8f e0       	ldi	r24, 0x0F	; 15
    4372:	60 e0       	ldi	r22, 0x00	; 0
    4374:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
    4378:	04 c0       	rjmp	.+8      	; 0x4382 <H_LED_void_Turn_off+0x72>
#error("Wrong Led direction")
#endif
		break;
		case LED_YELLOW:
#if(LED_YELLOW_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_YELLOW_PIN,DIO_LOW);
    437a:	80 e1       	ldi	r24, 0x10	; 16
    437c:	60 e0       	ldi	r22, 0x00	; 0
    437e:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
#error("Wrong Led direction")
#endif
		break;

		}
}
    4382:	0f 90       	pop	r0
    4384:	0f 90       	pop	r0
    4386:	0f 90       	pop	r0
    4388:	cf 91       	pop	r28
    438a:	df 91       	pop	r29
    438c:	08 95       	ret

0000438e <H_LED_void_Toggle>:

void H_LED_void_Toggle(u8 ledID)
{
    438e:	df 93       	push	r29
    4390:	cf 93       	push	r28
    4392:	00 d0       	rcall	.+0      	; 0x4394 <H_LED_void_Toggle+0x6>
    4394:	0f 92       	push	r0
    4396:	cd b7       	in	r28, 0x3d	; 61
    4398:	de b7       	in	r29, 0x3e	; 62
    439a:	89 83       	std	Y+1, r24	; 0x01
	switch(ledID)
    439c:	89 81       	ldd	r24, Y+1	; 0x01
    439e:	28 2f       	mov	r18, r24
    43a0:	30 e0       	ldi	r19, 0x00	; 0
    43a2:	3b 83       	std	Y+3, r19	; 0x03
    43a4:	2a 83       	std	Y+2, r18	; 0x02
    43a6:	8a 81       	ldd	r24, Y+2	; 0x02
    43a8:	9b 81       	ldd	r25, Y+3	; 0x03
    43aa:	81 30       	cpi	r24, 0x01	; 1
    43ac:	91 05       	cpc	r25, r1
    43ae:	e9 f0       	breq	.+58     	; 0x43ea <H_LED_void_Toggle+0x5c>
    43b0:	2a 81       	ldd	r18, Y+2	; 0x02
    43b2:	3b 81       	ldd	r19, Y+3	; 0x03
    43b4:	22 30       	cpi	r18, 0x02	; 2
    43b6:	31 05       	cpc	r19, r1
    43b8:	2c f4       	brge	.+10     	; 0x43c4 <H_LED_void_Toggle+0x36>
    43ba:	8a 81       	ldd	r24, Y+2	; 0x02
    43bc:	9b 81       	ldd	r25, Y+3	; 0x03
    43be:	00 97       	sbiw	r24, 0x00	; 0
    43c0:	61 f0       	breq	.+24     	; 0x43da <H_LED_void_Toggle+0x4c>
    43c2:	1a c0       	rjmp	.+52     	; 0x43f8 <H_LED_void_Toggle+0x6a>
    43c4:	2a 81       	ldd	r18, Y+2	; 0x02
    43c6:	3b 81       	ldd	r19, Y+3	; 0x03
    43c8:	22 30       	cpi	r18, 0x02	; 2
    43ca:	31 05       	cpc	r19, r1
    43cc:	51 f0       	breq	.+20     	; 0x43e2 <H_LED_void_Toggle+0x54>
    43ce:	8a 81       	ldd	r24, Y+2	; 0x02
    43d0:	9b 81       	ldd	r25, Y+3	; 0x03
    43d2:	83 30       	cpi	r24, 0x03	; 3
    43d4:	91 05       	cpc	r25, r1
    43d6:	69 f0       	breq	.+26     	; 0x43f2 <H_LED_void_Toggle+0x64>
    43d8:	0f c0       	rjmp	.+30     	; 0x43f8 <H_LED_void_Toggle+0x6a>
	{
		case LED_RED:
			M_Dio_void_togglePinValue(LED_RED_PIN);
    43da:	8b e1       	ldi	r24, 0x1B	; 27
    43dc:	0e 94 57 17 	call	0x2eae	; 0x2eae <M_Dio_void_togglePinValue>
    43e0:	0b c0       	rjmp	.+22     	; 0x43f8 <H_LED_void_Toggle+0x6a>
		break;
		case LED_GREEN:
			M_Dio_void_togglePinValue(LED_GREEN_PIN);
    43e2:	8e e0       	ldi	r24, 0x0E	; 14
    43e4:	0e 94 57 17 	call	0x2eae	; 0x2eae <M_Dio_void_togglePinValue>
    43e8:	07 c0       	rjmp	.+14     	; 0x43f8 <H_LED_void_Toggle+0x6a>
		break;
		case LED_BLUE:
			M_Dio_void_togglePinValue(LED_BLUE_PIN);
    43ea:	8f e0       	ldi	r24, 0x0F	; 15
    43ec:	0e 94 57 17 	call	0x2eae	; 0x2eae <M_Dio_void_togglePinValue>
    43f0:	03 c0       	rjmp	.+6      	; 0x43f8 <H_LED_void_Toggle+0x6a>
		break;
		case LED_YELLOW:
			M_Dio_void_togglePinValue(LED_YELLOW_PIN);
    43f2:	80 e1       	ldi	r24, 0x10	; 16
    43f4:	0e 94 57 17 	call	0x2eae	; 0x2eae <M_Dio_void_togglePinValue>
		break;

	}
}
    43f8:	0f 90       	pop	r0
    43fa:	0f 90       	pop	r0
    43fc:	0f 90       	pop	r0
    43fe:	cf 91       	pop	r28
    4400:	df 91       	pop	r29
    4402:	08 95       	ret

00004404 <H_KEYPAD_u8_getPressedKey>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
u8 H_KEYPAD_u8_getPressedKey(void)
{
    4404:	df 93       	push	r29
    4406:	cf 93       	push	r28
    4408:	cd b7       	in	r28, 0x3d	; 61
    440a:	de b7       	in	r29, 0x3e	; 62
    440c:	62 97       	sbiw	r28, 0x12	; 18
    440e:	0f b6       	in	r0, 0x3f	; 63
    4410:	f8 94       	cli
    4412:	de bf       	out	0x3e, r29	; 62
    4414:	0f be       	out	0x3f, r0	; 63
    4416:	cd bf       	out	0x3d, r28	; 61
	u8 Local_Pressed_key=NO_PRESSED_KEY;
    4418:	19 8a       	std	Y+17, r1	; 0x11
	u8 ROW_Index;
	u8 COL_Index;
	for(ROW_Index=0;ROW_Index<4;ROW_Index++)
    441a:	18 8a       	std	Y+16, r1	; 0x10
    441c:	c8 c0       	rjmp	.+400    	; 0x45ae <H_KEYPAD_u8_getPressedKey+0x1aa>
	{
		M_Dio_void_setPinValue(ROWS_ARR[0], DIO_HIGH);
    441e:	80 91 8a 01 	lds	r24, 0x018A
    4422:	61 e0       	ldi	r22, 0x01	; 1
    4424:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(ROWS_ARR[1], DIO_HIGH);
    4428:	80 91 8b 01 	lds	r24, 0x018B
    442c:	61 e0       	ldi	r22, 0x01	; 1
    442e:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(ROWS_ARR[2], DIO_HIGH);
    4432:	80 91 8c 01 	lds	r24, 0x018C
    4436:	61 e0       	ldi	r22, 0x01	; 1
    4438:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(ROWS_ARR[3], DIO_HIGH);
    443c:	80 91 8d 01 	lds	r24, 0x018D
    4440:	61 e0       	ldi	r22, 0x01	; 1
    4442:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>

		M_Dio_void_setPinValue(ROWS_ARR[ROW_Index],DIO_LOW);
    4446:	88 89       	ldd	r24, Y+16	; 0x10
    4448:	88 2f       	mov	r24, r24
    444a:	90 e0       	ldi	r25, 0x00	; 0
    444c:	fc 01       	movw	r30, r24
    444e:	e6 57       	subi	r30, 0x76	; 118
    4450:	fe 4f       	sbci	r31, 0xFE	; 254
    4452:	80 81       	ld	r24, Z
    4454:	60 e0       	ldi	r22, 0x00	; 0
    4456:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
		for(COL_Index=0;COL_Index<4;COL_Index++)
    445a:	1f 86       	std	Y+15, r1	; 0x0f
    445c:	a1 c0       	rjmp	.+322    	; 0x45a0 <H_KEYPAD_u8_getPressedKey+0x19c>
		{
			if((M_Dio_en_getPinValue(COLS_ARR[COL_Index]))==DIO_LOW)
    445e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4460:	88 2f       	mov	r24, r24
    4462:	90 e0       	ldi	r25, 0x00	; 0
    4464:	fc 01       	movw	r30, r24
    4466:	e2 57       	subi	r30, 0x72	; 114
    4468:	fe 4f       	sbci	r31, 0xFE	; 254
    446a:	80 81       	ld	r24, Z
    446c:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <M_Dio_en_getPinValue>
    4470:	88 23       	and	r24, r24
    4472:	09 f0       	breq	.+2      	; 0x4476 <H_KEYPAD_u8_getPressedKey+0x72>
    4474:	92 c0       	rjmp	.+292    	; 0x459a <H_KEYPAD_u8_getPressedKey+0x196>
    4476:	80 e0       	ldi	r24, 0x00	; 0
    4478:	90 e0       	ldi	r25, 0x00	; 0
    447a:	a8 e4       	ldi	r26, 0x48	; 72
    447c:	b2 e4       	ldi	r27, 0x42	; 66
    447e:	8b 87       	std	Y+11, r24	; 0x0b
    4480:	9c 87       	std	Y+12, r25	; 0x0c
    4482:	ad 87       	std	Y+13, r26	; 0x0d
    4484:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4486:	6b 85       	ldd	r22, Y+11	; 0x0b
    4488:	7c 85       	ldd	r23, Y+12	; 0x0c
    448a:	8d 85       	ldd	r24, Y+13	; 0x0d
    448c:	9e 85       	ldd	r25, Y+14	; 0x0e
    448e:	20 e0       	ldi	r18, 0x00	; 0
    4490:	30 e0       	ldi	r19, 0x00	; 0
    4492:	4a e7       	ldi	r20, 0x7A	; 122
    4494:	55 e4       	ldi	r21, 0x45	; 69
    4496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    449a:	dc 01       	movw	r26, r24
    449c:	cb 01       	movw	r24, r22
    449e:	8f 83       	std	Y+7, r24	; 0x07
    44a0:	98 87       	std	Y+8, r25	; 0x08
    44a2:	a9 87       	std	Y+9, r26	; 0x09
    44a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44a6:	6f 81       	ldd	r22, Y+7	; 0x07
    44a8:	78 85       	ldd	r23, Y+8	; 0x08
    44aa:	89 85       	ldd	r24, Y+9	; 0x09
    44ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    44ae:	20 e0       	ldi	r18, 0x00	; 0
    44b0:	30 e0       	ldi	r19, 0x00	; 0
    44b2:	40 e8       	ldi	r20, 0x80	; 128
    44b4:	5f e3       	ldi	r21, 0x3F	; 63
    44b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44ba:	88 23       	and	r24, r24
    44bc:	2c f4       	brge	.+10     	; 0x44c8 <H_KEYPAD_u8_getPressedKey+0xc4>
		__ticks = 1;
    44be:	81 e0       	ldi	r24, 0x01	; 1
    44c0:	90 e0       	ldi	r25, 0x00	; 0
    44c2:	9e 83       	std	Y+6, r25	; 0x06
    44c4:	8d 83       	std	Y+5, r24	; 0x05
    44c6:	3f c0       	rjmp	.+126    	; 0x4546 <H_KEYPAD_u8_getPressedKey+0x142>
	else if (__tmp > 65535)
    44c8:	6f 81       	ldd	r22, Y+7	; 0x07
    44ca:	78 85       	ldd	r23, Y+8	; 0x08
    44cc:	89 85       	ldd	r24, Y+9	; 0x09
    44ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    44d0:	20 e0       	ldi	r18, 0x00	; 0
    44d2:	3f ef       	ldi	r19, 0xFF	; 255
    44d4:	4f e7       	ldi	r20, 0x7F	; 127
    44d6:	57 e4       	ldi	r21, 0x47	; 71
    44d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44dc:	18 16       	cp	r1, r24
    44de:	4c f5       	brge	.+82     	; 0x4532 <H_KEYPAD_u8_getPressedKey+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    44e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    44e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    44e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    44e8:	20 e0       	ldi	r18, 0x00	; 0
    44ea:	30 e0       	ldi	r19, 0x00	; 0
    44ec:	40 e2       	ldi	r20, 0x20	; 32
    44ee:	51 e4       	ldi	r21, 0x41	; 65
    44f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44f4:	dc 01       	movw	r26, r24
    44f6:	cb 01       	movw	r24, r22
    44f8:	bc 01       	movw	r22, r24
    44fa:	cd 01       	movw	r24, r26
    44fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4500:	dc 01       	movw	r26, r24
    4502:	cb 01       	movw	r24, r22
    4504:	9e 83       	std	Y+6, r25	; 0x06
    4506:	8d 83       	std	Y+5, r24	; 0x05
    4508:	0f c0       	rjmp	.+30     	; 0x4528 <H_KEYPAD_u8_getPressedKey+0x124>
    450a:	80 e9       	ldi	r24, 0x90	; 144
    450c:	91 e0       	ldi	r25, 0x01	; 1
    450e:	9c 83       	std	Y+4, r25	; 0x04
    4510:	8b 83       	std	Y+3, r24	; 0x03
    4512:	8b 81       	ldd	r24, Y+3	; 0x03
    4514:	9c 81       	ldd	r25, Y+4	; 0x04
    4516:	01 97       	sbiw	r24, 0x01	; 1
    4518:	f1 f7       	brne	.-4      	; 0x4516 <H_KEYPAD_u8_getPressedKey+0x112>
    451a:	9c 83       	std	Y+4, r25	; 0x04
    451c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    451e:	8d 81       	ldd	r24, Y+5	; 0x05
    4520:	9e 81       	ldd	r25, Y+6	; 0x06
    4522:	01 97       	sbiw	r24, 0x01	; 1
    4524:	9e 83       	std	Y+6, r25	; 0x06
    4526:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4528:	8d 81       	ldd	r24, Y+5	; 0x05
    452a:	9e 81       	ldd	r25, Y+6	; 0x06
    452c:	00 97       	sbiw	r24, 0x00	; 0
    452e:	69 f7       	brne	.-38     	; 0x450a <H_KEYPAD_u8_getPressedKey+0x106>
    4530:	14 c0       	rjmp	.+40     	; 0x455a <H_KEYPAD_u8_getPressedKey+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4532:	6f 81       	ldd	r22, Y+7	; 0x07
    4534:	78 85       	ldd	r23, Y+8	; 0x08
    4536:	89 85       	ldd	r24, Y+9	; 0x09
    4538:	9a 85       	ldd	r25, Y+10	; 0x0a
    453a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    453e:	dc 01       	movw	r26, r24
    4540:	cb 01       	movw	r24, r22
    4542:	9e 83       	std	Y+6, r25	; 0x06
    4544:	8d 83       	std	Y+5, r24	; 0x05
    4546:	8d 81       	ldd	r24, Y+5	; 0x05
    4548:	9e 81       	ldd	r25, Y+6	; 0x06
    454a:	9a 83       	std	Y+2, r25	; 0x02
    454c:	89 83       	std	Y+1, r24	; 0x01
    454e:	89 81       	ldd	r24, Y+1	; 0x01
    4550:	9a 81       	ldd	r25, Y+2	; 0x02
    4552:	01 97       	sbiw	r24, 0x01	; 1
    4554:	f1 f7       	brne	.-4      	; 0x4552 <H_KEYPAD_u8_getPressedKey+0x14e>
    4556:	9a 83       	std	Y+2, r25	; 0x02
    4558:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(50);
				while(M_Dio_en_getPinValue(COLS_ARR[COL_Index])==DIO_LOW);
    455a:	8f 85       	ldd	r24, Y+15	; 0x0f
    455c:	88 2f       	mov	r24, r24
    455e:	90 e0       	ldi	r25, 0x00	; 0
    4560:	fc 01       	movw	r30, r24
    4562:	e2 57       	subi	r30, 0x72	; 114
    4564:	fe 4f       	sbci	r31, 0xFE	; 254
    4566:	80 81       	ld	r24, Z
    4568:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <M_Dio_en_getPinValue>
    456c:	88 23       	and	r24, r24
    456e:	a9 f3       	breq	.-22     	; 0x455a <H_KEYPAD_u8_getPressedKey+0x156>
				Local_Pressed_key= KPD_KEYS_CALC[ROW_Index][COL_Index];
    4570:	88 89       	ldd	r24, Y+16	; 0x10
    4572:	48 2f       	mov	r20, r24
    4574:	50 e0       	ldi	r21, 0x00	; 0
    4576:	8f 85       	ldd	r24, Y+15	; 0x0f
    4578:	28 2f       	mov	r18, r24
    457a:	30 e0       	ldi	r19, 0x00	; 0
    457c:	ca 01       	movw	r24, r20
    457e:	88 0f       	add	r24, r24
    4580:	99 1f       	adc	r25, r25
    4582:	88 0f       	add	r24, r24
    4584:	99 1f       	adc	r25, r25
    4586:	82 0f       	add	r24, r18
    4588:	93 1f       	adc	r25, r19
    458a:	fc 01       	movw	r30, r24
    458c:	e6 58       	subi	r30, 0x86	; 134
    458e:	fe 4f       	sbci	r31, 0xFE	; 254
    4590:	80 81       	ld	r24, Z
    4592:	89 8b       	std	Y+17, r24	; 0x11
				//M_Dio_void_setPinValue(DIO_PB7,DIO_HIGH);
				//_delay_ms(50);
				//M_Dio_void_setPinValue(DIO_PB7,DIO_LOW);
				return Local_Pressed_key;
    4594:	89 89       	ldd	r24, Y+17	; 0x11
    4596:	8a 8b       	std	Y+18, r24	; 0x12
    4598:	10 c0       	rjmp	.+32     	; 0x45ba <H_KEYPAD_u8_getPressedKey+0x1b6>
		M_Dio_void_setPinValue(ROWS_ARR[1], DIO_HIGH);
		M_Dio_void_setPinValue(ROWS_ARR[2], DIO_HIGH);
		M_Dio_void_setPinValue(ROWS_ARR[3], DIO_HIGH);

		M_Dio_void_setPinValue(ROWS_ARR[ROW_Index],DIO_LOW);
		for(COL_Index=0;COL_Index<4;COL_Index++)
    459a:	8f 85       	ldd	r24, Y+15	; 0x0f
    459c:	8f 5f       	subi	r24, 0xFF	; 255
    459e:	8f 87       	std	Y+15, r24	; 0x0f
    45a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    45a2:	84 30       	cpi	r24, 0x04	; 4
    45a4:	08 f4       	brcc	.+2      	; 0x45a8 <H_KEYPAD_u8_getPressedKey+0x1a4>
    45a6:	5b cf       	rjmp	.-330    	; 0x445e <H_KEYPAD_u8_getPressedKey+0x5a>
u8 H_KEYPAD_u8_getPressedKey(void)
{
	u8 Local_Pressed_key=NO_PRESSED_KEY;
	u8 ROW_Index;
	u8 COL_Index;
	for(ROW_Index=0;ROW_Index<4;ROW_Index++)
    45a8:	88 89       	ldd	r24, Y+16	; 0x10
    45aa:	8f 5f       	subi	r24, 0xFF	; 255
    45ac:	88 8b       	std	Y+16, r24	; 0x10
    45ae:	88 89       	ldd	r24, Y+16	; 0x10
    45b0:	84 30       	cpi	r24, 0x04	; 4
    45b2:	08 f4       	brcc	.+2      	; 0x45b6 <H_KEYPAD_u8_getPressedKey+0x1b2>
    45b4:	34 cf       	rjmp	.-408    	; 0x441e <H_KEYPAD_u8_getPressedKey+0x1a>
				//M_Dio_void_setPinValue(DIO_PB7,DIO_LOW);
				return Local_Pressed_key;
			}
		}
	}
	return Local_Pressed_key;
    45b6:	89 89       	ldd	r24, Y+17	; 0x11
    45b8:	8a 8b       	std	Y+18, r24	; 0x12
    45ba:	8a 89       	ldd	r24, Y+18	; 0x12
}
    45bc:	62 96       	adiw	r28, 0x12	; 18
    45be:	0f b6       	in	r0, 0x3f	; 63
    45c0:	f8 94       	cli
    45c2:	de bf       	out	0x3e, r29	; 62
    45c4:	0f be       	out	0x3f, r0	; 63
    45c6:	cd bf       	out	0x3d, r28	; 61
    45c8:	cf 91       	pop	r28
    45ca:	df 91       	pop	r29
    45cc:	08 95       	ret

000045ce <H_DC_MOTOR_START>:
#include"DC_MOTOR_Private.h"
#include"DC_MOTOR_Types.h"
#include"DC_MOTOR_Init.h"

void H_DC_MOTOR_START(u32 PWM_FREQ,u8 DUTY_CYCLE,DC_M_DIR MOTOR_DIRECTION)
{
    45ce:	df 93       	push	r29
    45d0:	cf 93       	push	r28
    45d2:	cd b7       	in	r28, 0x3d	; 61
    45d4:	de b7       	in	r29, 0x3e	; 62
    45d6:	28 97       	sbiw	r28, 0x08	; 8
    45d8:	0f b6       	in	r0, 0x3f	; 63
    45da:	f8 94       	cli
    45dc:	de bf       	out	0x3e, r29	; 62
    45de:	0f be       	out	0x3f, r0	; 63
    45e0:	cd bf       	out	0x3d, r28	; 61
    45e2:	69 83       	std	Y+1, r22	; 0x01
    45e4:	7a 83       	std	Y+2, r23	; 0x02
    45e6:	8b 83       	std	Y+3, r24	; 0x03
    45e8:	9c 83       	std	Y+4, r25	; 0x04
    45ea:	4d 83       	std	Y+5, r20	; 0x05
    45ec:	2e 83       	std	Y+6, r18	; 0x06
	M_void_Timer_Init(Phase_Correct_PWM,Non_Invering_Mode);
    45ee:	83 e0       	ldi	r24, 0x03	; 3
    45f0:	65 e0       	ldi	r22, 0x05	; 5
    45f2:	0e 94 5f 0a 	call	0x14be	; 0x14be <M_void_Timer_Init>

	M_TIMER0_PHASE_PWM_SET(Non_Invering_Mode,PWM_FREQ,DUTY_CYCLE);
    45f6:	29 81       	ldd	r18, Y+1	; 0x01
    45f8:	3a 81       	ldd	r19, Y+2	; 0x02
    45fa:	4b 81       	ldd	r20, Y+3	; 0x03
    45fc:	5c 81       	ldd	r21, Y+4	; 0x04
    45fe:	85 e0       	ldi	r24, 0x05	; 5
    4600:	ba 01       	movw	r22, r20
    4602:	a9 01       	movw	r20, r18
    4604:	2d 81       	ldd	r18, Y+5	; 0x05
    4606:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <M_TIMER0_PHASE_PWM_SET>
	switch(MOTOR_DIRECTION)
    460a:	8e 81       	ldd	r24, Y+6	; 0x06
    460c:	28 2f       	mov	r18, r24
    460e:	30 e0       	ldi	r19, 0x00	; 0
    4610:	38 87       	std	Y+8, r19	; 0x08
    4612:	2f 83       	std	Y+7, r18	; 0x07
    4614:	8f 81       	ldd	r24, Y+7	; 0x07
    4616:	98 85       	ldd	r25, Y+8	; 0x08
    4618:	81 30       	cpi	r24, 0x01	; 1
    461a:	91 05       	cpc	r25, r1
    461c:	31 f0       	breq	.+12     	; 0x462a <H_DC_MOTOR_START+0x5c>
    461e:	2f 81       	ldd	r18, Y+7	; 0x07
    4620:	38 85       	ldd	r19, Y+8	; 0x08
    4622:	22 30       	cpi	r18, 0x02	; 2
    4624:	31 05       	cpc	r19, r1
    4626:	51 f0       	breq	.+20     	; 0x463c <H_DC_MOTOR_START+0x6e>
    4628:	11 c0       	rjmp	.+34     	; 0x464c <H_DC_MOTOR_START+0x7e>
	{
	case FORWARD_DIRECTION:
		M_Dio_void_setPinValue(DIO_PD0,DIO_HIGH);
    462a:	88 e2       	ldi	r24, 0x28	; 40
    462c:	61 e0       	ldi	r22, 0x01	; 1
    462e:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(DIO_PD1,DIO_LOW);
    4632:	89 e2       	ldi	r24, 0x29	; 41
    4634:	60 e0       	ldi	r22, 0x00	; 0
    4636:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
    463a:	08 c0       	rjmp	.+16     	; 0x464c <H_DC_MOTOR_START+0x7e>
		break;
	case BACKWARD_DIRECTION:
		M_Dio_void_setPinValue(DIO_PD0,DIO_LOW);
    463c:	88 e2       	ldi	r24, 0x28	; 40
    463e:	60 e0       	ldi	r22, 0x00	; 0
    4640:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(DIO_PD1,DIO_HIGH);
    4644:	89 e2       	ldi	r24, 0x29	; 41
    4646:	61 e0       	ldi	r22, 0x01	; 1
    4648:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
		break;
	default:
		break;
	}
}
    464c:	28 96       	adiw	r28, 0x08	; 8
    464e:	0f b6       	in	r0, 0x3f	; 63
    4650:	f8 94       	cli
    4652:	de bf       	out	0x3e, r29	; 62
    4654:	0f be       	out	0x3f, r0	; 63
    4656:	cd bf       	out	0x3d, r28	; 61
    4658:	cf 91       	pop	r28
    465a:	df 91       	pop	r29
    465c:	08 95       	ret

0000465e <H_DC_MOTOR_STOP>:
void H_DC_MOTOR_STOP(void)
{
    465e:	df 93       	push	r29
    4660:	cf 93       	push	r28
    4662:	cd b7       	in	r28, 0x3d	; 61
    4664:	de b7       	in	r29, 0x3e	; 62
	M_void_Timer_Init(Phase_Correct_PWM,Normal_Port);
    4666:	83 e0       	ldi	r24, 0x03	; 3
    4668:	60 e0       	ldi	r22, 0x00	; 0
    466a:	0e 94 5f 0a 	call	0x14be	; 0x14be <M_void_Timer_Init>
	M_void_Timer_stop();
    466e:	0e 94 90 0c 	call	0x1920	; 0x1920 <M_void_Timer_stop>
}
    4672:	cf 91       	pop	r28
    4674:	df 91       	pop	r29
    4676:	08 95       	ret

00004678 <H_LCD_void_latchByte>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
    4678:	df 93       	push	r29
    467a:	cf 93       	push	r28
    467c:	cd b7       	in	r28, 0x3d	; 61
    467e:	de b7       	in	r29, 0x3e	; 62
    4680:	ab 97       	sbiw	r28, 0x2b	; 43
    4682:	0f b6       	in	r0, 0x3f	; 63
    4684:	f8 94       	cli
    4686:	de bf       	out	0x3e, r29	; 62
    4688:	0f be       	out	0x3f, r0	; 63
    468a:	cd bf       	out	0x3d, r28	; 61
    468c:	8b a7       	std	Y+43, r24	; 0x2b
#if(LCD_MODE == _4_BIT_MODE)
	//enable = zero
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
    468e:	8c e0       	ldi	r24, 0x0C	; 12
    4690:	60 e0       	ldi	r22, 0x00	; 0
    4692:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_D4,GET_BIT(copy_u8Byte,4));
    4696:	8b a5       	ldd	r24, Y+43	; 0x2b
    4698:	82 95       	swap	r24
    469a:	8f 70       	andi	r24, 0x0F	; 15
    469c:	98 2f       	mov	r25, r24
    469e:	91 70       	andi	r25, 0x01	; 1
    46a0:	84 e1       	ldi	r24, 0x14	; 20
    46a2:	69 2f       	mov	r22, r25
    46a4:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D5,GET_BIT(copy_u8Byte,5));
    46a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    46aa:	82 95       	swap	r24
    46ac:	86 95       	lsr	r24
    46ae:	87 70       	andi	r24, 0x07	; 7
    46b0:	98 2f       	mov	r25, r24
    46b2:	91 70       	andi	r25, 0x01	; 1
    46b4:	85 e1       	ldi	r24, 0x15	; 21
    46b6:	69 2f       	mov	r22, r25
    46b8:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D6,GET_BIT(copy_u8Byte,6));
    46bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    46be:	82 95       	swap	r24
    46c0:	86 95       	lsr	r24
    46c2:	86 95       	lsr	r24
    46c4:	83 70       	andi	r24, 0x03	; 3
    46c6:	98 2f       	mov	r25, r24
    46c8:	91 70       	andi	r25, 0x01	; 1
    46ca:	86 e1       	ldi	r24, 0x16	; 22
    46cc:	69 2f       	mov	r22, r25
    46ce:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D7,GET_BIT(copy_u8Byte,7));
    46d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    46d4:	98 2f       	mov	r25, r24
    46d6:	99 1f       	adc	r25, r25
    46d8:	99 27       	eor	r25, r25
    46da:	99 1f       	adc	r25, r25
    46dc:	88 e1       	ldi	r24, 0x18	; 24
    46de:	69 2f       	mov	r22, r25
    46e0:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_HIGH);
    46e4:	8c e0       	ldi	r24, 0x0C	; 12
    46e6:	61 e0       	ldi	r22, 0x01	; 1
    46e8:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
    46ec:	80 e0       	ldi	r24, 0x00	; 0
    46ee:	90 e0       	ldi	r25, 0x00	; 0
    46f0:	a0 e8       	ldi	r26, 0x80	; 128
    46f2:	bf e3       	ldi	r27, 0x3F	; 63
    46f4:	8f a3       	std	Y+39, r24	; 0x27
    46f6:	98 a7       	std	Y+40, r25	; 0x28
    46f8:	a9 a7       	std	Y+41, r26	; 0x29
    46fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46fc:	6f a1       	ldd	r22, Y+39	; 0x27
    46fe:	78 a5       	ldd	r23, Y+40	; 0x28
    4700:	89 a5       	ldd	r24, Y+41	; 0x29
    4702:	9a a5       	ldd	r25, Y+42	; 0x2a
    4704:	20 e0       	ldi	r18, 0x00	; 0
    4706:	30 e0       	ldi	r19, 0x00	; 0
    4708:	4a e7       	ldi	r20, 0x7A	; 122
    470a:	55 e4       	ldi	r21, 0x45	; 69
    470c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4710:	dc 01       	movw	r26, r24
    4712:	cb 01       	movw	r24, r22
    4714:	8b a3       	std	Y+35, r24	; 0x23
    4716:	9c a3       	std	Y+36, r25	; 0x24
    4718:	ad a3       	std	Y+37, r26	; 0x25
    471a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    471c:	6b a1       	ldd	r22, Y+35	; 0x23
    471e:	7c a1       	ldd	r23, Y+36	; 0x24
    4720:	8d a1       	ldd	r24, Y+37	; 0x25
    4722:	9e a1       	ldd	r25, Y+38	; 0x26
    4724:	20 e0       	ldi	r18, 0x00	; 0
    4726:	30 e0       	ldi	r19, 0x00	; 0
    4728:	40 e8       	ldi	r20, 0x80	; 128
    472a:	5f e3       	ldi	r21, 0x3F	; 63
    472c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4730:	88 23       	and	r24, r24
    4732:	2c f4       	brge	.+10     	; 0x473e <H_LCD_void_latchByte+0xc6>
		__ticks = 1;
    4734:	81 e0       	ldi	r24, 0x01	; 1
    4736:	90 e0       	ldi	r25, 0x00	; 0
    4738:	9a a3       	std	Y+34, r25	; 0x22
    473a:	89 a3       	std	Y+33, r24	; 0x21
    473c:	3f c0       	rjmp	.+126    	; 0x47bc <H_LCD_void_latchByte+0x144>
	else if (__tmp > 65535)
    473e:	6b a1       	ldd	r22, Y+35	; 0x23
    4740:	7c a1       	ldd	r23, Y+36	; 0x24
    4742:	8d a1       	ldd	r24, Y+37	; 0x25
    4744:	9e a1       	ldd	r25, Y+38	; 0x26
    4746:	20 e0       	ldi	r18, 0x00	; 0
    4748:	3f ef       	ldi	r19, 0xFF	; 255
    474a:	4f e7       	ldi	r20, 0x7F	; 127
    474c:	57 e4       	ldi	r21, 0x47	; 71
    474e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4752:	18 16       	cp	r1, r24
    4754:	4c f5       	brge	.+82     	; 0x47a8 <H_LCD_void_latchByte+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4756:	6f a1       	ldd	r22, Y+39	; 0x27
    4758:	78 a5       	ldd	r23, Y+40	; 0x28
    475a:	89 a5       	ldd	r24, Y+41	; 0x29
    475c:	9a a5       	ldd	r25, Y+42	; 0x2a
    475e:	20 e0       	ldi	r18, 0x00	; 0
    4760:	30 e0       	ldi	r19, 0x00	; 0
    4762:	40 e2       	ldi	r20, 0x20	; 32
    4764:	51 e4       	ldi	r21, 0x41	; 65
    4766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    476a:	dc 01       	movw	r26, r24
    476c:	cb 01       	movw	r24, r22
    476e:	bc 01       	movw	r22, r24
    4770:	cd 01       	movw	r24, r26
    4772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4776:	dc 01       	movw	r26, r24
    4778:	cb 01       	movw	r24, r22
    477a:	9a a3       	std	Y+34, r25	; 0x22
    477c:	89 a3       	std	Y+33, r24	; 0x21
    477e:	0f c0       	rjmp	.+30     	; 0x479e <H_LCD_void_latchByte+0x126>
    4780:	80 e9       	ldi	r24, 0x90	; 144
    4782:	91 e0       	ldi	r25, 0x01	; 1
    4784:	98 a3       	std	Y+32, r25	; 0x20
    4786:	8f 8f       	std	Y+31, r24	; 0x1f
    4788:	8f 8d       	ldd	r24, Y+31	; 0x1f
    478a:	98 a1       	ldd	r25, Y+32	; 0x20
    478c:	01 97       	sbiw	r24, 0x01	; 1
    478e:	f1 f7       	brne	.-4      	; 0x478c <H_LCD_void_latchByte+0x114>
    4790:	98 a3       	std	Y+32, r25	; 0x20
    4792:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4794:	89 a1       	ldd	r24, Y+33	; 0x21
    4796:	9a a1       	ldd	r25, Y+34	; 0x22
    4798:	01 97       	sbiw	r24, 0x01	; 1
    479a:	9a a3       	std	Y+34, r25	; 0x22
    479c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    479e:	89 a1       	ldd	r24, Y+33	; 0x21
    47a0:	9a a1       	ldd	r25, Y+34	; 0x22
    47a2:	00 97       	sbiw	r24, 0x00	; 0
    47a4:	69 f7       	brne	.-38     	; 0x4780 <H_LCD_void_latchByte+0x108>
    47a6:	14 c0       	rjmp	.+40     	; 0x47d0 <H_LCD_void_latchByte+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47a8:	6b a1       	ldd	r22, Y+35	; 0x23
    47aa:	7c a1       	ldd	r23, Y+36	; 0x24
    47ac:	8d a1       	ldd	r24, Y+37	; 0x25
    47ae:	9e a1       	ldd	r25, Y+38	; 0x26
    47b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47b4:	dc 01       	movw	r26, r24
    47b6:	cb 01       	movw	r24, r22
    47b8:	9a a3       	std	Y+34, r25	; 0x22
    47ba:	89 a3       	std	Y+33, r24	; 0x21
    47bc:	89 a1       	ldd	r24, Y+33	; 0x21
    47be:	9a a1       	ldd	r25, Y+34	; 0x22
    47c0:	9e 8f       	std	Y+30, r25	; 0x1e
    47c2:	8d 8f       	std	Y+29, r24	; 0x1d
    47c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    47c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    47c8:	01 97       	sbiw	r24, 0x01	; 1
    47ca:	f1 f7       	brne	.-4      	; 0x47c8 <H_LCD_void_latchByte+0x150>
    47cc:	9e 8f       	std	Y+30, r25	; 0x1e
    47ce:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
    47d0:	8c e0       	ldi	r24, 0x0C	; 12
    47d2:	60 e0       	ldi	r22, 0x00	; 0
    47d4:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_D4,GET_BIT(copy_u8Byte,0));
    47d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    47da:	98 2f       	mov	r25, r24
    47dc:	91 70       	andi	r25, 0x01	; 1
    47de:	84 e1       	ldi	r24, 0x14	; 20
    47e0:	69 2f       	mov	r22, r25
    47e2:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D5,GET_BIT(copy_u8Byte,1));
    47e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    47e8:	86 95       	lsr	r24
    47ea:	98 2f       	mov	r25, r24
    47ec:	91 70       	andi	r25, 0x01	; 1
    47ee:	85 e1       	ldi	r24, 0x15	; 21
    47f0:	69 2f       	mov	r22, r25
    47f2:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D6,GET_BIT(copy_u8Byte,2));
    47f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    47f8:	86 95       	lsr	r24
    47fa:	86 95       	lsr	r24
    47fc:	98 2f       	mov	r25, r24
    47fe:	91 70       	andi	r25, 0x01	; 1
    4800:	86 e1       	ldi	r24, 0x16	; 22
    4802:	69 2f       	mov	r22, r25
    4804:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D7,GET_BIT(copy_u8Byte,3));
    4808:	8b a5       	ldd	r24, Y+43	; 0x2b
    480a:	86 95       	lsr	r24
    480c:	86 95       	lsr	r24
    480e:	86 95       	lsr	r24
    4810:	98 2f       	mov	r25, r24
    4812:	91 70       	andi	r25, 0x01	; 1
    4814:	88 e1       	ldi	r24, 0x18	; 24
    4816:	69 2f       	mov	r22, r25
    4818:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_HIGH);
    481c:	8c e0       	ldi	r24, 0x0C	; 12
    481e:	61 e0       	ldi	r22, 0x01	; 1
    4820:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
    4824:	80 e0       	ldi	r24, 0x00	; 0
    4826:	90 e0       	ldi	r25, 0x00	; 0
    4828:	a0 e8       	ldi	r26, 0x80	; 128
    482a:	bf e3       	ldi	r27, 0x3F	; 63
    482c:	89 8f       	std	Y+25, r24	; 0x19
    482e:	9a 8f       	std	Y+26, r25	; 0x1a
    4830:	ab 8f       	std	Y+27, r26	; 0x1b
    4832:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4834:	69 8d       	ldd	r22, Y+25	; 0x19
    4836:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4838:	8b 8d       	ldd	r24, Y+27	; 0x1b
    483a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    483c:	20 e0       	ldi	r18, 0x00	; 0
    483e:	30 e0       	ldi	r19, 0x00	; 0
    4840:	4a e7       	ldi	r20, 0x7A	; 122
    4842:	55 e4       	ldi	r21, 0x45	; 69
    4844:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4848:	dc 01       	movw	r26, r24
    484a:	cb 01       	movw	r24, r22
    484c:	8d 8b       	std	Y+21, r24	; 0x15
    484e:	9e 8b       	std	Y+22, r25	; 0x16
    4850:	af 8b       	std	Y+23, r26	; 0x17
    4852:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4854:	6d 89       	ldd	r22, Y+21	; 0x15
    4856:	7e 89       	ldd	r23, Y+22	; 0x16
    4858:	8f 89       	ldd	r24, Y+23	; 0x17
    485a:	98 8d       	ldd	r25, Y+24	; 0x18
    485c:	20 e0       	ldi	r18, 0x00	; 0
    485e:	30 e0       	ldi	r19, 0x00	; 0
    4860:	40 e8       	ldi	r20, 0x80	; 128
    4862:	5f e3       	ldi	r21, 0x3F	; 63
    4864:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4868:	88 23       	and	r24, r24
    486a:	2c f4       	brge	.+10     	; 0x4876 <H_LCD_void_latchByte+0x1fe>
		__ticks = 1;
    486c:	81 e0       	ldi	r24, 0x01	; 1
    486e:	90 e0       	ldi	r25, 0x00	; 0
    4870:	9c 8b       	std	Y+20, r25	; 0x14
    4872:	8b 8b       	std	Y+19, r24	; 0x13
    4874:	3f c0       	rjmp	.+126    	; 0x48f4 <H_LCD_void_latchByte+0x27c>
	else if (__tmp > 65535)
    4876:	6d 89       	ldd	r22, Y+21	; 0x15
    4878:	7e 89       	ldd	r23, Y+22	; 0x16
    487a:	8f 89       	ldd	r24, Y+23	; 0x17
    487c:	98 8d       	ldd	r25, Y+24	; 0x18
    487e:	20 e0       	ldi	r18, 0x00	; 0
    4880:	3f ef       	ldi	r19, 0xFF	; 255
    4882:	4f e7       	ldi	r20, 0x7F	; 127
    4884:	57 e4       	ldi	r21, 0x47	; 71
    4886:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    488a:	18 16       	cp	r1, r24
    488c:	4c f5       	brge	.+82     	; 0x48e0 <H_LCD_void_latchByte+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    488e:	69 8d       	ldd	r22, Y+25	; 0x19
    4890:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4892:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4894:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4896:	20 e0       	ldi	r18, 0x00	; 0
    4898:	30 e0       	ldi	r19, 0x00	; 0
    489a:	40 e2       	ldi	r20, 0x20	; 32
    489c:	51 e4       	ldi	r21, 0x41	; 65
    489e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48a2:	dc 01       	movw	r26, r24
    48a4:	cb 01       	movw	r24, r22
    48a6:	bc 01       	movw	r22, r24
    48a8:	cd 01       	movw	r24, r26
    48aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48ae:	dc 01       	movw	r26, r24
    48b0:	cb 01       	movw	r24, r22
    48b2:	9c 8b       	std	Y+20, r25	; 0x14
    48b4:	8b 8b       	std	Y+19, r24	; 0x13
    48b6:	0f c0       	rjmp	.+30     	; 0x48d6 <H_LCD_void_latchByte+0x25e>
    48b8:	80 e9       	ldi	r24, 0x90	; 144
    48ba:	91 e0       	ldi	r25, 0x01	; 1
    48bc:	9a 8b       	std	Y+18, r25	; 0x12
    48be:	89 8b       	std	Y+17, r24	; 0x11
    48c0:	89 89       	ldd	r24, Y+17	; 0x11
    48c2:	9a 89       	ldd	r25, Y+18	; 0x12
    48c4:	01 97       	sbiw	r24, 0x01	; 1
    48c6:	f1 f7       	brne	.-4      	; 0x48c4 <H_LCD_void_latchByte+0x24c>
    48c8:	9a 8b       	std	Y+18, r25	; 0x12
    48ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48cc:	8b 89       	ldd	r24, Y+19	; 0x13
    48ce:	9c 89       	ldd	r25, Y+20	; 0x14
    48d0:	01 97       	sbiw	r24, 0x01	; 1
    48d2:	9c 8b       	std	Y+20, r25	; 0x14
    48d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48d6:	8b 89       	ldd	r24, Y+19	; 0x13
    48d8:	9c 89       	ldd	r25, Y+20	; 0x14
    48da:	00 97       	sbiw	r24, 0x00	; 0
    48dc:	69 f7       	brne	.-38     	; 0x48b8 <H_LCD_void_latchByte+0x240>
    48de:	14 c0       	rjmp	.+40     	; 0x4908 <H_LCD_void_latchByte+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48e0:	6d 89       	ldd	r22, Y+21	; 0x15
    48e2:	7e 89       	ldd	r23, Y+22	; 0x16
    48e4:	8f 89       	ldd	r24, Y+23	; 0x17
    48e6:	98 8d       	ldd	r25, Y+24	; 0x18
    48e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48ec:	dc 01       	movw	r26, r24
    48ee:	cb 01       	movw	r24, r22
    48f0:	9c 8b       	std	Y+20, r25	; 0x14
    48f2:	8b 8b       	std	Y+19, r24	; 0x13
    48f4:	8b 89       	ldd	r24, Y+19	; 0x13
    48f6:	9c 89       	ldd	r25, Y+20	; 0x14
    48f8:	98 8b       	std	Y+16, r25	; 0x10
    48fa:	8f 87       	std	Y+15, r24	; 0x0f
    48fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    48fe:	98 89       	ldd	r25, Y+16	; 0x10
    4900:	01 97       	sbiw	r24, 0x01	; 1
    4902:	f1 f7       	brne	.-4      	; 0x4900 <H_LCD_void_latchByte+0x288>
    4904:	98 8b       	std	Y+16, r25	; 0x10
    4906:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
    4908:	8c e0       	ldi	r24, 0x0C	; 12
    490a:	60 e0       	ldi	r22, 0x00	; 0
    490c:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
    4910:	80 e0       	ldi	r24, 0x00	; 0
    4912:	90 e0       	ldi	r25, 0x00	; 0
    4914:	a0 ef       	ldi	r26, 0xF0	; 240
    4916:	b1 e4       	ldi	r27, 0x41	; 65
    4918:	8b 87       	std	Y+11, r24	; 0x0b
    491a:	9c 87       	std	Y+12, r25	; 0x0c
    491c:	ad 87       	std	Y+13, r26	; 0x0d
    491e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4920:	6b 85       	ldd	r22, Y+11	; 0x0b
    4922:	7c 85       	ldd	r23, Y+12	; 0x0c
    4924:	8d 85       	ldd	r24, Y+13	; 0x0d
    4926:	9e 85       	ldd	r25, Y+14	; 0x0e
    4928:	20 e0       	ldi	r18, 0x00	; 0
    492a:	30 e0       	ldi	r19, 0x00	; 0
    492c:	4a e7       	ldi	r20, 0x7A	; 122
    492e:	55 e4       	ldi	r21, 0x45	; 69
    4930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4934:	dc 01       	movw	r26, r24
    4936:	cb 01       	movw	r24, r22
    4938:	8f 83       	std	Y+7, r24	; 0x07
    493a:	98 87       	std	Y+8, r25	; 0x08
    493c:	a9 87       	std	Y+9, r26	; 0x09
    493e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4940:	6f 81       	ldd	r22, Y+7	; 0x07
    4942:	78 85       	ldd	r23, Y+8	; 0x08
    4944:	89 85       	ldd	r24, Y+9	; 0x09
    4946:	9a 85       	ldd	r25, Y+10	; 0x0a
    4948:	20 e0       	ldi	r18, 0x00	; 0
    494a:	30 e0       	ldi	r19, 0x00	; 0
    494c:	40 e8       	ldi	r20, 0x80	; 128
    494e:	5f e3       	ldi	r21, 0x3F	; 63
    4950:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4954:	88 23       	and	r24, r24
    4956:	2c f4       	brge	.+10     	; 0x4962 <H_LCD_void_latchByte+0x2ea>
		__ticks = 1;
    4958:	81 e0       	ldi	r24, 0x01	; 1
    495a:	90 e0       	ldi	r25, 0x00	; 0
    495c:	9e 83       	std	Y+6, r25	; 0x06
    495e:	8d 83       	std	Y+5, r24	; 0x05
    4960:	3f c0       	rjmp	.+126    	; 0x49e0 <H_LCD_void_latchByte+0x368>
	else if (__tmp > 65535)
    4962:	6f 81       	ldd	r22, Y+7	; 0x07
    4964:	78 85       	ldd	r23, Y+8	; 0x08
    4966:	89 85       	ldd	r24, Y+9	; 0x09
    4968:	9a 85       	ldd	r25, Y+10	; 0x0a
    496a:	20 e0       	ldi	r18, 0x00	; 0
    496c:	3f ef       	ldi	r19, 0xFF	; 255
    496e:	4f e7       	ldi	r20, 0x7F	; 127
    4970:	57 e4       	ldi	r21, 0x47	; 71
    4972:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4976:	18 16       	cp	r1, r24
    4978:	4c f5       	brge	.+82     	; 0x49cc <H_LCD_void_latchByte+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    497a:	6b 85       	ldd	r22, Y+11	; 0x0b
    497c:	7c 85       	ldd	r23, Y+12	; 0x0c
    497e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4980:	9e 85       	ldd	r25, Y+14	; 0x0e
    4982:	20 e0       	ldi	r18, 0x00	; 0
    4984:	30 e0       	ldi	r19, 0x00	; 0
    4986:	40 e2       	ldi	r20, 0x20	; 32
    4988:	51 e4       	ldi	r21, 0x41	; 65
    498a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    498e:	dc 01       	movw	r26, r24
    4990:	cb 01       	movw	r24, r22
    4992:	bc 01       	movw	r22, r24
    4994:	cd 01       	movw	r24, r26
    4996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    499a:	dc 01       	movw	r26, r24
    499c:	cb 01       	movw	r24, r22
    499e:	9e 83       	std	Y+6, r25	; 0x06
    49a0:	8d 83       	std	Y+5, r24	; 0x05
    49a2:	0f c0       	rjmp	.+30     	; 0x49c2 <H_LCD_void_latchByte+0x34a>
    49a4:	80 e9       	ldi	r24, 0x90	; 144
    49a6:	91 e0       	ldi	r25, 0x01	; 1
    49a8:	9c 83       	std	Y+4, r25	; 0x04
    49aa:	8b 83       	std	Y+3, r24	; 0x03
    49ac:	8b 81       	ldd	r24, Y+3	; 0x03
    49ae:	9c 81       	ldd	r25, Y+4	; 0x04
    49b0:	01 97       	sbiw	r24, 0x01	; 1
    49b2:	f1 f7       	brne	.-4      	; 0x49b0 <H_LCD_void_latchByte+0x338>
    49b4:	9c 83       	std	Y+4, r25	; 0x04
    49b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49b8:	8d 81       	ldd	r24, Y+5	; 0x05
    49ba:	9e 81       	ldd	r25, Y+6	; 0x06
    49bc:	01 97       	sbiw	r24, 0x01	; 1
    49be:	9e 83       	std	Y+6, r25	; 0x06
    49c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49c2:	8d 81       	ldd	r24, Y+5	; 0x05
    49c4:	9e 81       	ldd	r25, Y+6	; 0x06
    49c6:	00 97       	sbiw	r24, 0x00	; 0
    49c8:	69 f7       	brne	.-38     	; 0x49a4 <H_LCD_void_latchByte+0x32c>
    49ca:	14 c0       	rjmp	.+40     	; 0x49f4 <H_LCD_void_latchByte+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49cc:	6f 81       	ldd	r22, Y+7	; 0x07
    49ce:	78 85       	ldd	r23, Y+8	; 0x08
    49d0:	89 85       	ldd	r24, Y+9	; 0x09
    49d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    49d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49d8:	dc 01       	movw	r26, r24
    49da:	cb 01       	movw	r24, r22
    49dc:	9e 83       	std	Y+6, r25	; 0x06
    49de:	8d 83       	std	Y+5, r24	; 0x05
    49e0:	8d 81       	ldd	r24, Y+5	; 0x05
    49e2:	9e 81       	ldd	r25, Y+6	; 0x06
    49e4:	9a 83       	std	Y+2, r25	; 0x02
    49e6:	89 83       	std	Y+1, r24	; 0x01
    49e8:	89 81       	ldd	r24, Y+1	; 0x01
    49ea:	9a 81       	ldd	r25, Y+2	; 0x02
    49ec:	01 97       	sbiw	r24, 0x01	; 1
    49ee:	f1 f7       	brne	.-4      	; 0x49ec <H_LCD_void_latchByte+0x374>
    49f0:	9a 83       	std	Y+2, r25	; 0x02
    49f2:	89 83       	std	Y+1, r24	; 0x01
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
	_delay_ms(30);

#endif

}
    49f4:	ab 96       	adiw	r28, 0x2b	; 43
    49f6:	0f b6       	in	r0, 0x3f	; 63
    49f8:	f8 94       	cli
    49fa:	de bf       	out	0x3e, r29	; 62
    49fc:	0f be       	out	0x3f, r0	; 63
    49fe:	cd bf       	out	0x3d, r28	; 61
    4a00:	cf 91       	pop	r28
    4a02:	df 91       	pop	r29
    4a04:	08 95       	ret

00004a06 <H_LCD_void_Init>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_Init(void)
{
    4a06:	0f 93       	push	r16
    4a08:	1f 93       	push	r17
    4a0a:	df 93       	push	r29
    4a0c:	cf 93       	push	r28
    4a0e:	cd b7       	in	r28, 0x3d	; 61
    4a10:	de b7       	in	r29, 0x3e	; 62
    4a12:	c6 54       	subi	r28, 0x46	; 70
    4a14:	d0 40       	sbci	r29, 0x00	; 0
    4a16:	0f b6       	in	r0, 0x3f	; 63
    4a18:	f8 94       	cli
    4a1a:	de bf       	out	0x3e, r29	; 62
    4a1c:	0f be       	out	0x3f, r0	; 63
    4a1e:	cd bf       	out	0x3d, r28	; 61
    4a20:	fe 01       	movw	r30, r28
    4a22:	ed 5b       	subi	r30, 0xBD	; 189
    4a24:	ff 4f       	sbci	r31, 0xFF	; 255
    4a26:	80 e0       	ldi	r24, 0x00	; 0
    4a28:	90 e0       	ldi	r25, 0x00	; 0
    4a2a:	a6 e1       	ldi	r26, 0x16	; 22
    4a2c:	b3 e4       	ldi	r27, 0x43	; 67
    4a2e:	80 83       	st	Z, r24
    4a30:	91 83       	std	Z+1, r25	; 0x01
    4a32:	a2 83       	std	Z+2, r26	; 0x02
    4a34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a36:	8e 01       	movw	r16, r28
    4a38:	01 5c       	subi	r16, 0xC1	; 193
    4a3a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a3c:	fe 01       	movw	r30, r28
    4a3e:	ed 5b       	subi	r30, 0xBD	; 189
    4a40:	ff 4f       	sbci	r31, 0xFF	; 255
    4a42:	60 81       	ld	r22, Z
    4a44:	71 81       	ldd	r23, Z+1	; 0x01
    4a46:	82 81       	ldd	r24, Z+2	; 0x02
    4a48:	93 81       	ldd	r25, Z+3	; 0x03
    4a4a:	20 e0       	ldi	r18, 0x00	; 0
    4a4c:	30 e0       	ldi	r19, 0x00	; 0
    4a4e:	4a e7       	ldi	r20, 0x7A	; 122
    4a50:	55 e4       	ldi	r21, 0x45	; 69
    4a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a56:	dc 01       	movw	r26, r24
    4a58:	cb 01       	movw	r24, r22
    4a5a:	f8 01       	movw	r30, r16
    4a5c:	80 83       	st	Z, r24
    4a5e:	91 83       	std	Z+1, r25	; 0x01
    4a60:	a2 83       	std	Z+2, r26	; 0x02
    4a62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a64:	fe 01       	movw	r30, r28
    4a66:	ff 96       	adiw	r30, 0x3f	; 63
    4a68:	60 81       	ld	r22, Z
    4a6a:	71 81       	ldd	r23, Z+1	; 0x01
    4a6c:	82 81       	ldd	r24, Z+2	; 0x02
    4a6e:	93 81       	ldd	r25, Z+3	; 0x03
    4a70:	20 e0       	ldi	r18, 0x00	; 0
    4a72:	30 e0       	ldi	r19, 0x00	; 0
    4a74:	40 e8       	ldi	r20, 0x80	; 128
    4a76:	5f e3       	ldi	r21, 0x3F	; 63
    4a78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a7c:	88 23       	and	r24, r24
    4a7e:	2c f4       	brge	.+10     	; 0x4a8a <H_LCD_void_Init+0x84>
		__ticks = 1;
    4a80:	81 e0       	ldi	r24, 0x01	; 1
    4a82:	90 e0       	ldi	r25, 0x00	; 0
    4a84:	9e af       	std	Y+62, r25	; 0x3e
    4a86:	8d af       	std	Y+61, r24	; 0x3d
    4a88:	46 c0       	rjmp	.+140    	; 0x4b16 <H_LCD_void_Init+0x110>
	else if (__tmp > 65535)
    4a8a:	fe 01       	movw	r30, r28
    4a8c:	ff 96       	adiw	r30, 0x3f	; 63
    4a8e:	60 81       	ld	r22, Z
    4a90:	71 81       	ldd	r23, Z+1	; 0x01
    4a92:	82 81       	ldd	r24, Z+2	; 0x02
    4a94:	93 81       	ldd	r25, Z+3	; 0x03
    4a96:	20 e0       	ldi	r18, 0x00	; 0
    4a98:	3f ef       	ldi	r19, 0xFF	; 255
    4a9a:	4f e7       	ldi	r20, 0x7F	; 127
    4a9c:	57 e4       	ldi	r21, 0x47	; 71
    4a9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4aa2:	18 16       	cp	r1, r24
    4aa4:	64 f5       	brge	.+88     	; 0x4afe <H_LCD_void_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4aa6:	fe 01       	movw	r30, r28
    4aa8:	ed 5b       	subi	r30, 0xBD	; 189
    4aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    4aac:	60 81       	ld	r22, Z
    4aae:	71 81       	ldd	r23, Z+1	; 0x01
    4ab0:	82 81       	ldd	r24, Z+2	; 0x02
    4ab2:	93 81       	ldd	r25, Z+3	; 0x03
    4ab4:	20 e0       	ldi	r18, 0x00	; 0
    4ab6:	30 e0       	ldi	r19, 0x00	; 0
    4ab8:	40 e2       	ldi	r20, 0x20	; 32
    4aba:	51 e4       	ldi	r21, 0x41	; 65
    4abc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ac0:	dc 01       	movw	r26, r24
    4ac2:	cb 01       	movw	r24, r22
    4ac4:	bc 01       	movw	r22, r24
    4ac6:	cd 01       	movw	r24, r26
    4ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4acc:	dc 01       	movw	r26, r24
    4ace:	cb 01       	movw	r24, r22
    4ad0:	9e af       	std	Y+62, r25	; 0x3e
    4ad2:	8d af       	std	Y+61, r24	; 0x3d
    4ad4:	0f c0       	rjmp	.+30     	; 0x4af4 <H_LCD_void_Init+0xee>
    4ad6:	80 e9       	ldi	r24, 0x90	; 144
    4ad8:	91 e0       	ldi	r25, 0x01	; 1
    4ada:	9c af       	std	Y+60, r25	; 0x3c
    4adc:	8b af       	std	Y+59, r24	; 0x3b
    4ade:	8b ad       	ldd	r24, Y+59	; 0x3b
    4ae0:	9c ad       	ldd	r25, Y+60	; 0x3c
    4ae2:	01 97       	sbiw	r24, 0x01	; 1
    4ae4:	f1 f7       	brne	.-4      	; 0x4ae2 <H_LCD_void_Init+0xdc>
    4ae6:	9c af       	std	Y+60, r25	; 0x3c
    4ae8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4aea:	8d ad       	ldd	r24, Y+61	; 0x3d
    4aec:	9e ad       	ldd	r25, Y+62	; 0x3e
    4aee:	01 97       	sbiw	r24, 0x01	; 1
    4af0:	9e af       	std	Y+62, r25	; 0x3e
    4af2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4af4:	8d ad       	ldd	r24, Y+61	; 0x3d
    4af6:	9e ad       	ldd	r25, Y+62	; 0x3e
    4af8:	00 97       	sbiw	r24, 0x00	; 0
    4afa:	69 f7       	brne	.-38     	; 0x4ad6 <H_LCD_void_Init+0xd0>
    4afc:	16 c0       	rjmp	.+44     	; 0x4b2a <H_LCD_void_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4afe:	fe 01       	movw	r30, r28
    4b00:	ff 96       	adiw	r30, 0x3f	; 63
    4b02:	60 81       	ld	r22, Z
    4b04:	71 81       	ldd	r23, Z+1	; 0x01
    4b06:	82 81       	ldd	r24, Z+2	; 0x02
    4b08:	93 81       	ldd	r25, Z+3	; 0x03
    4b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b0e:	dc 01       	movw	r26, r24
    4b10:	cb 01       	movw	r24, r22
    4b12:	9e af       	std	Y+62, r25	; 0x3e
    4b14:	8d af       	std	Y+61, r24	; 0x3d
    4b16:	8d ad       	ldd	r24, Y+61	; 0x3d
    4b18:	9e ad       	ldd	r25, Y+62	; 0x3e
    4b1a:	9a af       	std	Y+58, r25	; 0x3a
    4b1c:	89 af       	std	Y+57, r24	; 0x39
    4b1e:	89 ad       	ldd	r24, Y+57	; 0x39
    4b20:	9a ad       	ldd	r25, Y+58	; 0x3a
    4b22:	01 97       	sbiw	r24, 0x01	; 1
    4b24:	f1 f7       	brne	.-4      	; 0x4b22 <H_LCD_void_Init+0x11c>
    4b26:	9a af       	std	Y+58, r25	; 0x3a
    4b28:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(150);
	M_Dio_void_setPinValue(CLCD_RS_PIN,DIO_LOW);
    4b2a:	8d e0       	ldi	r24, 0x0D	; 13
    4b2c:	60 e0       	ldi	r22, 0x00	; 0
    4b2e:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
	/*Function set*/
#if(LCD_MODE == _4_BIT_MODE)
	H_LCD_void_sendCommand(CLCD_FUNCTION_SET_1);
    4b32:	82 e0       	ldi	r24, 0x02	; 2
    4b34:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <H_LCD_void_sendCommand>
    4b38:	80 e0       	ldi	r24, 0x00	; 0
    4b3a:	90 e0       	ldi	r25, 0x00	; 0
    4b3c:	a0 ea       	ldi	r26, 0xA0	; 160
    4b3e:	b0 e4       	ldi	r27, 0x40	; 64
    4b40:	8d ab       	std	Y+53, r24	; 0x35
    4b42:	9e ab       	std	Y+54, r25	; 0x36
    4b44:	af ab       	std	Y+55, r26	; 0x37
    4b46:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b48:	6d a9       	ldd	r22, Y+53	; 0x35
    4b4a:	7e a9       	ldd	r23, Y+54	; 0x36
    4b4c:	8f a9       	ldd	r24, Y+55	; 0x37
    4b4e:	98 ad       	ldd	r25, Y+56	; 0x38
    4b50:	20 e0       	ldi	r18, 0x00	; 0
    4b52:	30 e0       	ldi	r19, 0x00	; 0
    4b54:	4a e7       	ldi	r20, 0x7A	; 122
    4b56:	55 e4       	ldi	r21, 0x45	; 69
    4b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b5c:	dc 01       	movw	r26, r24
    4b5e:	cb 01       	movw	r24, r22
    4b60:	89 ab       	std	Y+49, r24	; 0x31
    4b62:	9a ab       	std	Y+50, r25	; 0x32
    4b64:	ab ab       	std	Y+51, r26	; 0x33
    4b66:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4b68:	69 a9       	ldd	r22, Y+49	; 0x31
    4b6a:	7a a9       	ldd	r23, Y+50	; 0x32
    4b6c:	8b a9       	ldd	r24, Y+51	; 0x33
    4b6e:	9c a9       	ldd	r25, Y+52	; 0x34
    4b70:	20 e0       	ldi	r18, 0x00	; 0
    4b72:	30 e0       	ldi	r19, 0x00	; 0
    4b74:	40 e8       	ldi	r20, 0x80	; 128
    4b76:	5f e3       	ldi	r21, 0x3F	; 63
    4b78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b7c:	88 23       	and	r24, r24
    4b7e:	2c f4       	brge	.+10     	; 0x4b8a <H_LCD_void_Init+0x184>
		__ticks = 1;
    4b80:	81 e0       	ldi	r24, 0x01	; 1
    4b82:	90 e0       	ldi	r25, 0x00	; 0
    4b84:	98 ab       	std	Y+48, r25	; 0x30
    4b86:	8f a7       	std	Y+47, r24	; 0x2f
    4b88:	3f c0       	rjmp	.+126    	; 0x4c08 <H_LCD_void_Init+0x202>
	else if (__tmp > 65535)
    4b8a:	69 a9       	ldd	r22, Y+49	; 0x31
    4b8c:	7a a9       	ldd	r23, Y+50	; 0x32
    4b8e:	8b a9       	ldd	r24, Y+51	; 0x33
    4b90:	9c a9       	ldd	r25, Y+52	; 0x34
    4b92:	20 e0       	ldi	r18, 0x00	; 0
    4b94:	3f ef       	ldi	r19, 0xFF	; 255
    4b96:	4f e7       	ldi	r20, 0x7F	; 127
    4b98:	57 e4       	ldi	r21, 0x47	; 71
    4b9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b9e:	18 16       	cp	r1, r24
    4ba0:	4c f5       	brge	.+82     	; 0x4bf4 <H_LCD_void_Init+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ba2:	6d a9       	ldd	r22, Y+53	; 0x35
    4ba4:	7e a9       	ldd	r23, Y+54	; 0x36
    4ba6:	8f a9       	ldd	r24, Y+55	; 0x37
    4ba8:	98 ad       	ldd	r25, Y+56	; 0x38
    4baa:	20 e0       	ldi	r18, 0x00	; 0
    4bac:	30 e0       	ldi	r19, 0x00	; 0
    4bae:	40 e2       	ldi	r20, 0x20	; 32
    4bb0:	51 e4       	ldi	r21, 0x41	; 65
    4bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bb6:	dc 01       	movw	r26, r24
    4bb8:	cb 01       	movw	r24, r22
    4bba:	bc 01       	movw	r22, r24
    4bbc:	cd 01       	movw	r24, r26
    4bbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bc2:	dc 01       	movw	r26, r24
    4bc4:	cb 01       	movw	r24, r22
    4bc6:	98 ab       	std	Y+48, r25	; 0x30
    4bc8:	8f a7       	std	Y+47, r24	; 0x2f
    4bca:	0f c0       	rjmp	.+30     	; 0x4bea <H_LCD_void_Init+0x1e4>
    4bcc:	80 e9       	ldi	r24, 0x90	; 144
    4bce:	91 e0       	ldi	r25, 0x01	; 1
    4bd0:	9e a7       	std	Y+46, r25	; 0x2e
    4bd2:	8d a7       	std	Y+45, r24	; 0x2d
    4bd4:	8d a5       	ldd	r24, Y+45	; 0x2d
    4bd6:	9e a5       	ldd	r25, Y+46	; 0x2e
    4bd8:	01 97       	sbiw	r24, 0x01	; 1
    4bda:	f1 f7       	brne	.-4      	; 0x4bd8 <H_LCD_void_Init+0x1d2>
    4bdc:	9e a7       	std	Y+46, r25	; 0x2e
    4bde:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4be0:	8f a5       	ldd	r24, Y+47	; 0x2f
    4be2:	98 a9       	ldd	r25, Y+48	; 0x30
    4be4:	01 97       	sbiw	r24, 0x01	; 1
    4be6:	98 ab       	std	Y+48, r25	; 0x30
    4be8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bea:	8f a5       	ldd	r24, Y+47	; 0x2f
    4bec:	98 a9       	ldd	r25, Y+48	; 0x30
    4bee:	00 97       	sbiw	r24, 0x00	; 0
    4bf0:	69 f7       	brne	.-38     	; 0x4bcc <H_LCD_void_Init+0x1c6>
    4bf2:	14 c0       	rjmp	.+40     	; 0x4c1c <H_LCD_void_Init+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bf4:	69 a9       	ldd	r22, Y+49	; 0x31
    4bf6:	7a a9       	ldd	r23, Y+50	; 0x32
    4bf8:	8b a9       	ldd	r24, Y+51	; 0x33
    4bfa:	9c a9       	ldd	r25, Y+52	; 0x34
    4bfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c00:	dc 01       	movw	r26, r24
    4c02:	cb 01       	movw	r24, r22
    4c04:	98 ab       	std	Y+48, r25	; 0x30
    4c06:	8f a7       	std	Y+47, r24	; 0x2f
    4c08:	8f a5       	ldd	r24, Y+47	; 0x2f
    4c0a:	98 a9       	ldd	r25, Y+48	; 0x30
    4c0c:	9c a7       	std	Y+44, r25	; 0x2c
    4c0e:	8b a7       	std	Y+43, r24	; 0x2b
    4c10:	8b a5       	ldd	r24, Y+43	; 0x2b
    4c12:	9c a5       	ldd	r25, Y+44	; 0x2c
    4c14:	01 97       	sbiw	r24, 0x01	; 1
    4c16:	f1 f7       	brne	.-4      	; 0x4c14 <H_LCD_void_Init+0x20e>
    4c18:	9c a7       	std	Y+44, r25	; 0x2c
    4c1a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	H_LCD_void_sendCommand(CLCD_FUNCTION_SET_2);
    4c1c:	88 e2       	ldi	r24, 0x28	; 40
    4c1e:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <H_LCD_void_sendCommand>
    4c22:	80 e0       	ldi	r24, 0x00	; 0
    4c24:	90 e0       	ldi	r25, 0x00	; 0
    4c26:	a0 ea       	ldi	r26, 0xA0	; 160
    4c28:	b0 e4       	ldi	r27, 0x40	; 64
    4c2a:	8f a3       	std	Y+39, r24	; 0x27
    4c2c:	98 a7       	std	Y+40, r25	; 0x28
    4c2e:	a9 a7       	std	Y+41, r26	; 0x29
    4c30:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c32:	6f a1       	ldd	r22, Y+39	; 0x27
    4c34:	78 a5       	ldd	r23, Y+40	; 0x28
    4c36:	89 a5       	ldd	r24, Y+41	; 0x29
    4c38:	9a a5       	ldd	r25, Y+42	; 0x2a
    4c3a:	20 e0       	ldi	r18, 0x00	; 0
    4c3c:	30 e0       	ldi	r19, 0x00	; 0
    4c3e:	4a e7       	ldi	r20, 0x7A	; 122
    4c40:	55 e4       	ldi	r21, 0x45	; 69
    4c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c46:	dc 01       	movw	r26, r24
    4c48:	cb 01       	movw	r24, r22
    4c4a:	8b a3       	std	Y+35, r24	; 0x23
    4c4c:	9c a3       	std	Y+36, r25	; 0x24
    4c4e:	ad a3       	std	Y+37, r26	; 0x25
    4c50:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4c52:	6b a1       	ldd	r22, Y+35	; 0x23
    4c54:	7c a1       	ldd	r23, Y+36	; 0x24
    4c56:	8d a1       	ldd	r24, Y+37	; 0x25
    4c58:	9e a1       	ldd	r25, Y+38	; 0x26
    4c5a:	20 e0       	ldi	r18, 0x00	; 0
    4c5c:	30 e0       	ldi	r19, 0x00	; 0
    4c5e:	40 e8       	ldi	r20, 0x80	; 128
    4c60:	5f e3       	ldi	r21, 0x3F	; 63
    4c62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c66:	88 23       	and	r24, r24
    4c68:	2c f4       	brge	.+10     	; 0x4c74 <H_LCD_void_Init+0x26e>
		__ticks = 1;
    4c6a:	81 e0       	ldi	r24, 0x01	; 1
    4c6c:	90 e0       	ldi	r25, 0x00	; 0
    4c6e:	9a a3       	std	Y+34, r25	; 0x22
    4c70:	89 a3       	std	Y+33, r24	; 0x21
    4c72:	3f c0       	rjmp	.+126    	; 0x4cf2 <H_LCD_void_Init+0x2ec>
	else if (__tmp > 65535)
    4c74:	6b a1       	ldd	r22, Y+35	; 0x23
    4c76:	7c a1       	ldd	r23, Y+36	; 0x24
    4c78:	8d a1       	ldd	r24, Y+37	; 0x25
    4c7a:	9e a1       	ldd	r25, Y+38	; 0x26
    4c7c:	20 e0       	ldi	r18, 0x00	; 0
    4c7e:	3f ef       	ldi	r19, 0xFF	; 255
    4c80:	4f e7       	ldi	r20, 0x7F	; 127
    4c82:	57 e4       	ldi	r21, 0x47	; 71
    4c84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c88:	18 16       	cp	r1, r24
    4c8a:	4c f5       	brge	.+82     	; 0x4cde <H_LCD_void_Init+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c8c:	6f a1       	ldd	r22, Y+39	; 0x27
    4c8e:	78 a5       	ldd	r23, Y+40	; 0x28
    4c90:	89 a5       	ldd	r24, Y+41	; 0x29
    4c92:	9a a5       	ldd	r25, Y+42	; 0x2a
    4c94:	20 e0       	ldi	r18, 0x00	; 0
    4c96:	30 e0       	ldi	r19, 0x00	; 0
    4c98:	40 e2       	ldi	r20, 0x20	; 32
    4c9a:	51 e4       	ldi	r21, 0x41	; 65
    4c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ca0:	dc 01       	movw	r26, r24
    4ca2:	cb 01       	movw	r24, r22
    4ca4:	bc 01       	movw	r22, r24
    4ca6:	cd 01       	movw	r24, r26
    4ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cac:	dc 01       	movw	r26, r24
    4cae:	cb 01       	movw	r24, r22
    4cb0:	9a a3       	std	Y+34, r25	; 0x22
    4cb2:	89 a3       	std	Y+33, r24	; 0x21
    4cb4:	0f c0       	rjmp	.+30     	; 0x4cd4 <H_LCD_void_Init+0x2ce>
    4cb6:	80 e9       	ldi	r24, 0x90	; 144
    4cb8:	91 e0       	ldi	r25, 0x01	; 1
    4cba:	98 a3       	std	Y+32, r25	; 0x20
    4cbc:	8f 8f       	std	Y+31, r24	; 0x1f
    4cbe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4cc0:	98 a1       	ldd	r25, Y+32	; 0x20
    4cc2:	01 97       	sbiw	r24, 0x01	; 1
    4cc4:	f1 f7       	brne	.-4      	; 0x4cc2 <H_LCD_void_Init+0x2bc>
    4cc6:	98 a3       	std	Y+32, r25	; 0x20
    4cc8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cca:	89 a1       	ldd	r24, Y+33	; 0x21
    4ccc:	9a a1       	ldd	r25, Y+34	; 0x22
    4cce:	01 97       	sbiw	r24, 0x01	; 1
    4cd0:	9a a3       	std	Y+34, r25	; 0x22
    4cd2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cd4:	89 a1       	ldd	r24, Y+33	; 0x21
    4cd6:	9a a1       	ldd	r25, Y+34	; 0x22
    4cd8:	00 97       	sbiw	r24, 0x00	; 0
    4cda:	69 f7       	brne	.-38     	; 0x4cb6 <H_LCD_void_Init+0x2b0>
    4cdc:	14 c0       	rjmp	.+40     	; 0x4d06 <H_LCD_void_Init+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cde:	6b a1       	ldd	r22, Y+35	; 0x23
    4ce0:	7c a1       	ldd	r23, Y+36	; 0x24
    4ce2:	8d a1       	ldd	r24, Y+37	; 0x25
    4ce4:	9e a1       	ldd	r25, Y+38	; 0x26
    4ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cea:	dc 01       	movw	r26, r24
    4cec:	cb 01       	movw	r24, r22
    4cee:	9a a3       	std	Y+34, r25	; 0x22
    4cf0:	89 a3       	std	Y+33, r24	; 0x21
    4cf2:	89 a1       	ldd	r24, Y+33	; 0x21
    4cf4:	9a a1       	ldd	r25, Y+34	; 0x22
    4cf6:	9e 8f       	std	Y+30, r25	; 0x1e
    4cf8:	8d 8f       	std	Y+29, r24	; 0x1d
    4cfa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4cfc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4cfe:	01 97       	sbiw	r24, 0x01	; 1
    4d00:	f1 f7       	brne	.-4      	; 0x4cfe <H_LCD_void_Init+0x2f8>
    4d02:	9e 8f       	std	Y+30, r25	; 0x1e
    4d04:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	/*Display ON/OFF*/
	H_LCD_void_sendCommand(CLCD_DISPLAY);
    4d06:	8c e0       	ldi	r24, 0x0C	; 12
    4d08:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <H_LCD_void_sendCommand>
    4d0c:	80 e0       	ldi	r24, 0x00	; 0
    4d0e:	90 e0       	ldi	r25, 0x00	; 0
    4d10:	a0 ea       	ldi	r26, 0xA0	; 160
    4d12:	b0 e4       	ldi	r27, 0x40	; 64
    4d14:	89 8f       	std	Y+25, r24	; 0x19
    4d16:	9a 8f       	std	Y+26, r25	; 0x1a
    4d18:	ab 8f       	std	Y+27, r26	; 0x1b
    4d1a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d1c:	69 8d       	ldd	r22, Y+25	; 0x19
    4d1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d24:	20 e0       	ldi	r18, 0x00	; 0
    4d26:	30 e0       	ldi	r19, 0x00	; 0
    4d28:	4a e7       	ldi	r20, 0x7A	; 122
    4d2a:	55 e4       	ldi	r21, 0x45	; 69
    4d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d30:	dc 01       	movw	r26, r24
    4d32:	cb 01       	movw	r24, r22
    4d34:	8d 8b       	std	Y+21, r24	; 0x15
    4d36:	9e 8b       	std	Y+22, r25	; 0x16
    4d38:	af 8b       	std	Y+23, r26	; 0x17
    4d3a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4d3c:	6d 89       	ldd	r22, Y+21	; 0x15
    4d3e:	7e 89       	ldd	r23, Y+22	; 0x16
    4d40:	8f 89       	ldd	r24, Y+23	; 0x17
    4d42:	98 8d       	ldd	r25, Y+24	; 0x18
    4d44:	20 e0       	ldi	r18, 0x00	; 0
    4d46:	30 e0       	ldi	r19, 0x00	; 0
    4d48:	40 e8       	ldi	r20, 0x80	; 128
    4d4a:	5f e3       	ldi	r21, 0x3F	; 63
    4d4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d50:	88 23       	and	r24, r24
    4d52:	2c f4       	brge	.+10     	; 0x4d5e <H_LCD_void_Init+0x358>
		__ticks = 1;
    4d54:	81 e0       	ldi	r24, 0x01	; 1
    4d56:	90 e0       	ldi	r25, 0x00	; 0
    4d58:	9c 8b       	std	Y+20, r25	; 0x14
    4d5a:	8b 8b       	std	Y+19, r24	; 0x13
    4d5c:	3f c0       	rjmp	.+126    	; 0x4ddc <H_LCD_void_Init+0x3d6>
	else if (__tmp > 65535)
    4d5e:	6d 89       	ldd	r22, Y+21	; 0x15
    4d60:	7e 89       	ldd	r23, Y+22	; 0x16
    4d62:	8f 89       	ldd	r24, Y+23	; 0x17
    4d64:	98 8d       	ldd	r25, Y+24	; 0x18
    4d66:	20 e0       	ldi	r18, 0x00	; 0
    4d68:	3f ef       	ldi	r19, 0xFF	; 255
    4d6a:	4f e7       	ldi	r20, 0x7F	; 127
    4d6c:	57 e4       	ldi	r21, 0x47	; 71
    4d6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d72:	18 16       	cp	r1, r24
    4d74:	4c f5       	brge	.+82     	; 0x4dc8 <H_LCD_void_Init+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d76:	69 8d       	ldd	r22, Y+25	; 0x19
    4d78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d7e:	20 e0       	ldi	r18, 0x00	; 0
    4d80:	30 e0       	ldi	r19, 0x00	; 0
    4d82:	40 e2       	ldi	r20, 0x20	; 32
    4d84:	51 e4       	ldi	r21, 0x41	; 65
    4d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d8a:	dc 01       	movw	r26, r24
    4d8c:	cb 01       	movw	r24, r22
    4d8e:	bc 01       	movw	r22, r24
    4d90:	cd 01       	movw	r24, r26
    4d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d96:	dc 01       	movw	r26, r24
    4d98:	cb 01       	movw	r24, r22
    4d9a:	9c 8b       	std	Y+20, r25	; 0x14
    4d9c:	8b 8b       	std	Y+19, r24	; 0x13
    4d9e:	0f c0       	rjmp	.+30     	; 0x4dbe <H_LCD_void_Init+0x3b8>
    4da0:	80 e9       	ldi	r24, 0x90	; 144
    4da2:	91 e0       	ldi	r25, 0x01	; 1
    4da4:	9a 8b       	std	Y+18, r25	; 0x12
    4da6:	89 8b       	std	Y+17, r24	; 0x11
    4da8:	89 89       	ldd	r24, Y+17	; 0x11
    4daa:	9a 89       	ldd	r25, Y+18	; 0x12
    4dac:	01 97       	sbiw	r24, 0x01	; 1
    4dae:	f1 f7       	brne	.-4      	; 0x4dac <H_LCD_void_Init+0x3a6>
    4db0:	9a 8b       	std	Y+18, r25	; 0x12
    4db2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4db4:	8b 89       	ldd	r24, Y+19	; 0x13
    4db6:	9c 89       	ldd	r25, Y+20	; 0x14
    4db8:	01 97       	sbiw	r24, 0x01	; 1
    4dba:	9c 8b       	std	Y+20, r25	; 0x14
    4dbc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dbe:	8b 89       	ldd	r24, Y+19	; 0x13
    4dc0:	9c 89       	ldd	r25, Y+20	; 0x14
    4dc2:	00 97       	sbiw	r24, 0x00	; 0
    4dc4:	69 f7       	brne	.-38     	; 0x4da0 <H_LCD_void_Init+0x39a>
    4dc6:	14 c0       	rjmp	.+40     	; 0x4df0 <H_LCD_void_Init+0x3ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dc8:	6d 89       	ldd	r22, Y+21	; 0x15
    4dca:	7e 89       	ldd	r23, Y+22	; 0x16
    4dcc:	8f 89       	ldd	r24, Y+23	; 0x17
    4dce:	98 8d       	ldd	r25, Y+24	; 0x18
    4dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dd4:	dc 01       	movw	r26, r24
    4dd6:	cb 01       	movw	r24, r22
    4dd8:	9c 8b       	std	Y+20, r25	; 0x14
    4dda:	8b 8b       	std	Y+19, r24	; 0x13
    4ddc:	8b 89       	ldd	r24, Y+19	; 0x13
    4dde:	9c 89       	ldd	r25, Y+20	; 0x14
    4de0:	98 8b       	std	Y+16, r25	; 0x10
    4de2:	8f 87       	std	Y+15, r24	; 0x0f
    4de4:	8f 85       	ldd	r24, Y+15	; 0x0f
    4de6:	98 89       	ldd	r25, Y+16	; 0x10
    4de8:	01 97       	sbiw	r24, 0x01	; 1
    4dea:	f1 f7       	brne	.-4      	; 0x4de8 <H_LCD_void_Init+0x3e2>
    4dec:	98 8b       	std	Y+16, r25	; 0x10
    4dee:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	/*Display clear*/
	H_LCD_void_sendCommand(CLCD_CLEAR);
    4df0:	81 e0       	ldi	r24, 0x01	; 1
    4df2:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <H_LCD_void_sendCommand>
    4df6:	80 e0       	ldi	r24, 0x00	; 0
    4df8:	90 e0       	ldi	r25, 0x00	; 0
    4dfa:	a0 ea       	ldi	r26, 0xA0	; 160
    4dfc:	b0 e4       	ldi	r27, 0x40	; 64
    4dfe:	8b 87       	std	Y+11, r24	; 0x0b
    4e00:	9c 87       	std	Y+12, r25	; 0x0c
    4e02:	ad 87       	std	Y+13, r26	; 0x0d
    4e04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e06:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e08:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e0e:	20 e0       	ldi	r18, 0x00	; 0
    4e10:	30 e0       	ldi	r19, 0x00	; 0
    4e12:	4a e7       	ldi	r20, 0x7A	; 122
    4e14:	55 e4       	ldi	r21, 0x45	; 69
    4e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e1a:	dc 01       	movw	r26, r24
    4e1c:	cb 01       	movw	r24, r22
    4e1e:	8f 83       	std	Y+7, r24	; 0x07
    4e20:	98 87       	std	Y+8, r25	; 0x08
    4e22:	a9 87       	std	Y+9, r26	; 0x09
    4e24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e26:	6f 81       	ldd	r22, Y+7	; 0x07
    4e28:	78 85       	ldd	r23, Y+8	; 0x08
    4e2a:	89 85       	ldd	r24, Y+9	; 0x09
    4e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e2e:	20 e0       	ldi	r18, 0x00	; 0
    4e30:	30 e0       	ldi	r19, 0x00	; 0
    4e32:	40 e8       	ldi	r20, 0x80	; 128
    4e34:	5f e3       	ldi	r21, 0x3F	; 63
    4e36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e3a:	88 23       	and	r24, r24
    4e3c:	2c f4       	brge	.+10     	; 0x4e48 <H_LCD_void_Init+0x442>
		__ticks = 1;
    4e3e:	81 e0       	ldi	r24, 0x01	; 1
    4e40:	90 e0       	ldi	r25, 0x00	; 0
    4e42:	9e 83       	std	Y+6, r25	; 0x06
    4e44:	8d 83       	std	Y+5, r24	; 0x05
    4e46:	3f c0       	rjmp	.+126    	; 0x4ec6 <H_LCD_void_Init+0x4c0>
	else if (__tmp > 65535)
    4e48:	6f 81       	ldd	r22, Y+7	; 0x07
    4e4a:	78 85       	ldd	r23, Y+8	; 0x08
    4e4c:	89 85       	ldd	r24, Y+9	; 0x09
    4e4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e50:	20 e0       	ldi	r18, 0x00	; 0
    4e52:	3f ef       	ldi	r19, 0xFF	; 255
    4e54:	4f e7       	ldi	r20, 0x7F	; 127
    4e56:	57 e4       	ldi	r21, 0x47	; 71
    4e58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e5c:	18 16       	cp	r1, r24
    4e5e:	4c f5       	brge	.+82     	; 0x4eb2 <H_LCD_void_Init+0x4ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e60:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e62:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e64:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e66:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e68:	20 e0       	ldi	r18, 0x00	; 0
    4e6a:	30 e0       	ldi	r19, 0x00	; 0
    4e6c:	40 e2       	ldi	r20, 0x20	; 32
    4e6e:	51 e4       	ldi	r21, 0x41	; 65
    4e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e74:	dc 01       	movw	r26, r24
    4e76:	cb 01       	movw	r24, r22
    4e78:	bc 01       	movw	r22, r24
    4e7a:	cd 01       	movw	r24, r26
    4e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e80:	dc 01       	movw	r26, r24
    4e82:	cb 01       	movw	r24, r22
    4e84:	9e 83       	std	Y+6, r25	; 0x06
    4e86:	8d 83       	std	Y+5, r24	; 0x05
    4e88:	0f c0       	rjmp	.+30     	; 0x4ea8 <H_LCD_void_Init+0x4a2>
    4e8a:	80 e9       	ldi	r24, 0x90	; 144
    4e8c:	91 e0       	ldi	r25, 0x01	; 1
    4e8e:	9c 83       	std	Y+4, r25	; 0x04
    4e90:	8b 83       	std	Y+3, r24	; 0x03
    4e92:	8b 81       	ldd	r24, Y+3	; 0x03
    4e94:	9c 81       	ldd	r25, Y+4	; 0x04
    4e96:	01 97       	sbiw	r24, 0x01	; 1
    4e98:	f1 f7       	brne	.-4      	; 0x4e96 <H_LCD_void_Init+0x490>
    4e9a:	9c 83       	std	Y+4, r25	; 0x04
    4e9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    4ea0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ea2:	01 97       	sbiw	r24, 0x01	; 1
    4ea4:	9e 83       	std	Y+6, r25	; 0x06
    4ea6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    4eaa:	9e 81       	ldd	r25, Y+6	; 0x06
    4eac:	00 97       	sbiw	r24, 0x00	; 0
    4eae:	69 f7       	brne	.-38     	; 0x4e8a <H_LCD_void_Init+0x484>
    4eb0:	14 c0       	rjmp	.+40     	; 0x4eda <H_LCD_void_Init+0x4d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4eb2:	6f 81       	ldd	r22, Y+7	; 0x07
    4eb4:	78 85       	ldd	r23, Y+8	; 0x08
    4eb6:	89 85       	ldd	r24, Y+9	; 0x09
    4eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ebe:	dc 01       	movw	r26, r24
    4ec0:	cb 01       	movw	r24, r22
    4ec2:	9e 83       	std	Y+6, r25	; 0x06
    4ec4:	8d 83       	std	Y+5, r24	; 0x05
    4ec6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ec8:	9e 81       	ldd	r25, Y+6	; 0x06
    4eca:	9a 83       	std	Y+2, r25	; 0x02
    4ecc:	89 83       	std	Y+1, r24	; 0x01
    4ece:	89 81       	ldd	r24, Y+1	; 0x01
    4ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ed2:	01 97       	sbiw	r24, 0x01	; 1
    4ed4:	f1 f7       	brne	.-4      	; 0x4ed2 <H_LCD_void_Init+0x4cc>
    4ed6:	9a 83       	std	Y+2, r25	; 0x02
    4ed8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	H_LCD_void_sendCommand(CLCD_ENTRY_MODE_SET);
    4eda:	86 e0       	ldi	r24, 0x06	; 6
    4edc:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <H_LCD_void_sendCommand>
	/*clear display*/
	H_LCD_void_sendCommand(0b00000001);

#endif

}
    4ee0:	ca 5b       	subi	r28, 0xBA	; 186
    4ee2:	df 4f       	sbci	r29, 0xFF	; 255
    4ee4:	0f b6       	in	r0, 0x3f	; 63
    4ee6:	f8 94       	cli
    4ee8:	de bf       	out	0x3e, r29	; 62
    4eea:	0f be       	out	0x3f, r0	; 63
    4eec:	cd bf       	out	0x3d, r28	; 61
    4eee:	cf 91       	pop	r28
    4ef0:	df 91       	pop	r29
    4ef2:	1f 91       	pop	r17
    4ef4:	0f 91       	pop	r16
    4ef6:	08 95       	ret

00004ef8 <H_LCD_void_sendData>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_sendData(u8 copy_u8data )
{
    4ef8:	df 93       	push	r29
    4efa:	cf 93       	push	r28
    4efc:	0f 92       	push	r0
    4efe:	cd b7       	in	r28, 0x3d	; 61
    4f00:	de b7       	in	r29, 0x3e	; 62
    4f02:	89 83       	std	Y+1, r24	; 0x01
	/*SET RS TO ZERO*/
	M_Dio_void_setPinValue(CLCD_RS_PIN,DIO_HIGH);
    4f04:	8d e0       	ldi	r24, 0x0D	; 13
    4f06:	61 e0       	ldi	r22, 0x01	; 1
    4f08:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
	/*Write command*/
	H_LCD_void_latchByte(copy_u8data);
    4f0c:	89 81       	ldd	r24, Y+1	; 0x01
    4f0e:	0e 94 3c 23 	call	0x4678	; 0x4678 <H_LCD_void_latchByte>

}
    4f12:	0f 90       	pop	r0
    4f14:	cf 91       	pop	r28
    4f16:	df 91       	pop	r29
    4f18:	08 95       	ret

00004f1a <H_LCD_void_sendCommand>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_sendCommand(u8 copy_u8command)
{
    4f1a:	df 93       	push	r29
    4f1c:	cf 93       	push	r28
    4f1e:	0f 92       	push	r0
    4f20:	cd b7       	in	r28, 0x3d	; 61
    4f22:	de b7       	in	r29, 0x3e	; 62
    4f24:	89 83       	std	Y+1, r24	; 0x01
	/*SET RS TO ZERO*/
	M_Dio_void_setPinValue(CLCD_RS_PIN,DIO_LOW);
    4f26:	8d e0       	ldi	r24, 0x0D	; 13
    4f28:	60 e0       	ldi	r22, 0x00	; 0
    4f2a:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <M_Dio_void_setPinValue>
	/*Write command*/
	H_LCD_void_latchByte(copy_u8command);
    4f2e:	89 81       	ldd	r24, Y+1	; 0x01
    4f30:	0e 94 3c 23 	call	0x4678	; 0x4678 <H_LCD_void_latchByte>

}
    4f34:	0f 90       	pop	r0
    4f36:	cf 91       	pop	r28
    4f38:	df 91       	pop	r29
    4f3a:	08 95       	ret

00004f3c <H_LCD_void_sendString>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_sendString(const s8 * pstr)
{
    4f3c:	df 93       	push	r29
    4f3e:	cf 93       	push	r28
    4f40:	00 d0       	rcall	.+0      	; 0x4f42 <H_LCD_void_sendString+0x6>
    4f42:	0f 92       	push	r0
    4f44:	cd b7       	in	r28, 0x3d	; 61
    4f46:	de b7       	in	r29, 0x3e	; 62
    4f48:	9b 83       	std	Y+3, r25	; 0x03
    4f4a:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter;
	for(counter=0;pstr[counter]!=0;counter++)
    4f4c:	19 82       	std	Y+1, r1	; 0x01
    4f4e:	0e c0       	rjmp	.+28     	; 0x4f6c <H_LCD_void_sendString+0x30>
	{
		H_LCD_void_sendData(pstr[counter]);
    4f50:	89 81       	ldd	r24, Y+1	; 0x01
    4f52:	28 2f       	mov	r18, r24
    4f54:	30 e0       	ldi	r19, 0x00	; 0
    4f56:	8a 81       	ldd	r24, Y+2	; 0x02
    4f58:	9b 81       	ldd	r25, Y+3	; 0x03
    4f5a:	fc 01       	movw	r30, r24
    4f5c:	e2 0f       	add	r30, r18
    4f5e:	f3 1f       	adc	r31, r19
    4f60:	80 81       	ld	r24, Z
    4f62:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <H_LCD_void_sendData>
  Return Value     : void
******************************************/
void H_LCD_void_sendString(const s8 * pstr)
{
	u8 counter;
	for(counter=0;pstr[counter]!=0;counter++)
    4f66:	89 81       	ldd	r24, Y+1	; 0x01
    4f68:	8f 5f       	subi	r24, 0xFF	; 255
    4f6a:	89 83       	std	Y+1, r24	; 0x01
    4f6c:	89 81       	ldd	r24, Y+1	; 0x01
    4f6e:	28 2f       	mov	r18, r24
    4f70:	30 e0       	ldi	r19, 0x00	; 0
    4f72:	8a 81       	ldd	r24, Y+2	; 0x02
    4f74:	9b 81       	ldd	r25, Y+3	; 0x03
    4f76:	fc 01       	movw	r30, r24
    4f78:	e2 0f       	add	r30, r18
    4f7a:	f3 1f       	adc	r31, r19
    4f7c:	80 81       	ld	r24, Z
    4f7e:	88 23       	and	r24, r24
    4f80:	39 f7       	brne	.-50     	; 0x4f50 <H_LCD_void_sendString+0x14>
	{
		H_LCD_void_sendData(pstr[counter]);
	}
}
    4f82:	0f 90       	pop	r0
    4f84:	0f 90       	pop	r0
    4f86:	0f 90       	pop	r0
    4f88:	cf 91       	pop	r28
    4f8a:	df 91       	pop	r29
    4f8c:	08 95       	ret

00004f8e <H_LCD_void_sendIntNum>:
	//H_LCD_void_sendData(copy_s32Num+'0');

}
*/
void H_LCD_void_sendIntNum(s32 copy_s32Num)
{
    4f8e:	0f 93       	push	r16
    4f90:	1f 93       	push	r17
    4f92:	df 93       	push	r29
    4f94:	cf 93       	push	r28
    4f96:	cd b7       	in	r28, 0x3d	; 61
    4f98:	de b7       	in	r29, 0x3e	; 62
    4f9a:	a5 97       	sbiw	r28, 0x25	; 37
    4f9c:	0f b6       	in	r0, 0x3f	; 63
    4f9e:	f8 94       	cli
    4fa0:	de bf       	out	0x3e, r29	; 62
    4fa2:	0f be       	out	0x3f, r0	; 63
    4fa4:	cd bf       	out	0x3d, r28	; 61
    4fa6:	6a a3       	std	Y+34, r22	; 0x22
    4fa8:	7b a3       	std	Y+35, r23	; 0x23
    4faa:	8c a3       	std	Y+36, r24	; 0x24
    4fac:	9d a3       	std	Y+37, r25	; 0x25
	/* Local Variable to save the numbers digits*/
	s32 Local_Variable[8] = {0} ;
    4fae:	80 e2       	ldi	r24, 0x20	; 32
    4fb0:	fe 01       	movw	r30, r28
    4fb2:	32 96       	adiw	r30, 0x02	; 2
    4fb4:	df 01       	movw	r26, r30
    4fb6:	98 2f       	mov	r25, r24
    4fb8:	1d 92       	st	X+, r1
    4fba:	9a 95       	dec	r25
    4fbc:	e9 f7       	brne	.-6      	; 0x4fb8 <H_LCD_void_sendIntNum+0x2a>
	u8 Local_Counter = 0 ;
    4fbe:	19 82       	std	Y+1, r1	; 0x01

	/* Check if the number is negative */
	if (copy_s32Num < 0)
    4fc0:	8a a1       	ldd	r24, Y+34	; 0x22
    4fc2:	9b a1       	ldd	r25, Y+35	; 0x23
    4fc4:	ac a1       	ldd	r26, Y+36	; 0x24
    4fc6:	bd a1       	ldd	r27, Y+37	; 0x25
    4fc8:	bb 23       	and	r27, r27
    4fca:	0c f0       	brlt	.+2      	; 0x4fce <H_LCD_void_sendIntNum+0x40>
    4fcc:	4a c0       	rjmp	.+148    	; 0x5062 <H_LCD_void_sendIntNum+0xd4>
	{
	/*Remove Negative Sign from number*/
	copy_s32Num = copy_s32Num * -1 ;
    4fce:	8a a1       	ldd	r24, Y+34	; 0x22
    4fd0:	9b a1       	ldd	r25, Y+35	; 0x23
    4fd2:	ac a1       	ldd	r26, Y+36	; 0x24
    4fd4:	bd a1       	ldd	r27, Y+37	; 0x25
    4fd6:	b0 95       	com	r27
    4fd8:	a0 95       	com	r26
    4fda:	90 95       	com	r25
    4fdc:	81 95       	neg	r24
    4fde:	9f 4f       	sbci	r25, 0xFF	; 255
    4fe0:	af 4f       	sbci	r26, 0xFF	; 255
    4fe2:	bf 4f       	sbci	r27, 0xFF	; 255
    4fe4:	8a a3       	std	Y+34, r24	; 0x22
    4fe6:	9b a3       	std	Y+35, r25	; 0x23
    4fe8:	ac a3       	std	Y+36, r26	; 0x24
    4fea:	bd a3       	std	Y+37, r27	; 0x25
	/*Send Negative Sign */
	H_LCD_void_sendData('-');
    4fec:	8d e2       	ldi	r24, 0x2D	; 45
    4fee:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <H_LCD_void_sendData>
    4ff2:	37 c0       	rjmp	.+110    	; 0x5062 <H_LCD_void_sendIntNum+0xd4>
	}
	/* While loop to split the Numbers and save it in Local_Variable*/
	while (copy_s32Num != 0)
	{
	Local_Variable[Local_Counter] = copy_s32Num % 10 ;
    4ff4:	89 81       	ldd	r24, Y+1	; 0x01
    4ff6:	08 2f       	mov	r16, r24
    4ff8:	10 e0       	ldi	r17, 0x00	; 0
    4ffa:	8a a1       	ldd	r24, Y+34	; 0x22
    4ffc:	9b a1       	ldd	r25, Y+35	; 0x23
    4ffe:	ac a1       	ldd	r26, Y+36	; 0x24
    5000:	bd a1       	ldd	r27, Y+37	; 0x25
    5002:	2a e0       	ldi	r18, 0x0A	; 10
    5004:	30 e0       	ldi	r19, 0x00	; 0
    5006:	40 e0       	ldi	r20, 0x00	; 0
    5008:	50 e0       	ldi	r21, 0x00	; 0
    500a:	bc 01       	movw	r22, r24
    500c:	cd 01       	movw	r24, r26
    500e:	0e 94 7f 29 	call	0x52fe	; 0x52fe <__divmodsi4>
    5012:	dc 01       	movw	r26, r24
    5014:	cb 01       	movw	r24, r22
    5016:	ac 01       	movw	r20, r24
    5018:	bd 01       	movw	r22, r26
    501a:	98 01       	movw	r18, r16
    501c:	22 0f       	add	r18, r18
    501e:	33 1f       	adc	r19, r19
    5020:	22 0f       	add	r18, r18
    5022:	33 1f       	adc	r19, r19
    5024:	ce 01       	movw	r24, r28
    5026:	01 96       	adiw	r24, 0x01	; 1
    5028:	82 0f       	add	r24, r18
    502a:	93 1f       	adc	r25, r19
    502c:	fc 01       	movw	r30, r24
    502e:	31 96       	adiw	r30, 0x01	; 1
    5030:	40 83       	st	Z, r20
    5032:	51 83       	std	Z+1, r21	; 0x01
    5034:	62 83       	std	Z+2, r22	; 0x02
    5036:	73 83       	std	Z+3, r23	; 0x03
	copy_s32Num = copy_s32Num / 10 ;
    5038:	8a a1       	ldd	r24, Y+34	; 0x22
    503a:	9b a1       	ldd	r25, Y+35	; 0x23
    503c:	ac a1       	ldd	r26, Y+36	; 0x24
    503e:	bd a1       	ldd	r27, Y+37	; 0x25
    5040:	2a e0       	ldi	r18, 0x0A	; 10
    5042:	30 e0       	ldi	r19, 0x00	; 0
    5044:	40 e0       	ldi	r20, 0x00	; 0
    5046:	50 e0       	ldi	r21, 0x00	; 0
    5048:	bc 01       	movw	r22, r24
    504a:	cd 01       	movw	r24, r26
    504c:	0e 94 7f 29 	call	0x52fe	; 0x52fe <__divmodsi4>
    5050:	da 01       	movw	r26, r20
    5052:	c9 01       	movw	r24, r18
    5054:	8a a3       	std	Y+34, r24	; 0x22
    5056:	9b a3       	std	Y+35, r25	; 0x23
    5058:	ac a3       	std	Y+36, r26	; 0x24
    505a:	bd a3       	std	Y+37, r27	; 0x25
	Local_Counter ++ ;
    505c:	89 81       	ldd	r24, Y+1	; 0x01
    505e:	8f 5f       	subi	r24, 0xFF	; 255
    5060:	89 83       	std	Y+1, r24	; 0x01
	copy_s32Num = copy_s32Num * -1 ;
	/*Send Negative Sign */
	H_LCD_void_sendData('-');
	}
	/* While loop to split the Numbers and save it in Local_Variable*/
	while (copy_s32Num != 0)
    5062:	8a a1       	ldd	r24, Y+34	; 0x22
    5064:	9b a1       	ldd	r25, Y+35	; 0x23
    5066:	ac a1       	ldd	r26, Y+36	; 0x24
    5068:	bd a1       	ldd	r27, Y+37	; 0x25
    506a:	00 97       	sbiw	r24, 0x00	; 0
    506c:	a1 05       	cpc	r26, r1
    506e:	b1 05       	cpc	r27, r1
    5070:	09 f6       	brne	.-126    	; 0x4ff4 <H_LCD_void_sendIntNum+0x66>
	copy_s32Num = copy_s32Num / 10 ;
	Local_Counter ++ ;

	}
	/* For loop to send the numbers using SendData*/
	for (Local_Counter --; Local_Counter < '0' ; Local_Counter--)
    5072:	89 81       	ldd	r24, Y+1	; 0x01
    5074:	81 50       	subi	r24, 0x01	; 1
    5076:	89 83       	std	Y+1, r24	; 0x01
    5078:	18 c0       	rjmp	.+48     	; 0x50aa <H_LCD_void_sendIntNum+0x11c>
	{
		 H_LCD_void_sendData('0' + Local_Variable[Local_Counter]);
    507a:	89 81       	ldd	r24, Y+1	; 0x01
    507c:	88 2f       	mov	r24, r24
    507e:	90 e0       	ldi	r25, 0x00	; 0
    5080:	9c 01       	movw	r18, r24
    5082:	22 0f       	add	r18, r18
    5084:	33 1f       	adc	r19, r19
    5086:	22 0f       	add	r18, r18
    5088:	33 1f       	adc	r19, r19
    508a:	ce 01       	movw	r24, r28
    508c:	01 96       	adiw	r24, 0x01	; 1
    508e:	82 0f       	add	r24, r18
    5090:	93 1f       	adc	r25, r19
    5092:	fc 01       	movw	r30, r24
    5094:	31 96       	adiw	r30, 0x01	; 1
    5096:	80 81       	ld	r24, Z
    5098:	91 81       	ldd	r25, Z+1	; 0x01
    509a:	a2 81       	ldd	r26, Z+2	; 0x02
    509c:	b3 81       	ldd	r27, Z+3	; 0x03
    509e:	80 5d       	subi	r24, 0xD0	; 208
    50a0:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <H_LCD_void_sendData>
	copy_s32Num = copy_s32Num / 10 ;
	Local_Counter ++ ;

	}
	/* For loop to send the numbers using SendData*/
	for (Local_Counter --; Local_Counter < '0' ; Local_Counter--)
    50a4:	89 81       	ldd	r24, Y+1	; 0x01
    50a6:	81 50       	subi	r24, 0x01	; 1
    50a8:	89 83       	std	Y+1, r24	; 0x01
    50aa:	89 81       	ldd	r24, Y+1	; 0x01
    50ac:	80 33       	cpi	r24, 0x30	; 48
    50ae:	28 f3       	brcs	.-54     	; 0x507a <H_LCD_void_sendIntNum+0xec>
	{
		 H_LCD_void_sendData('0' + Local_Variable[Local_Counter]);
	}
}
    50b0:	a5 96       	adiw	r28, 0x25	; 37
    50b2:	0f b6       	in	r0, 0x3f	; 63
    50b4:	f8 94       	cli
    50b6:	de bf       	out	0x3e, r29	; 62
    50b8:	0f be       	out	0x3f, r0	; 63
    50ba:	cd bf       	out	0x3d, r28	; 61
    50bc:	cf 91       	pop	r28
    50be:	df 91       	pop	r29
    50c0:	1f 91       	pop	r17
    50c2:	0f 91       	pop	r16
    50c4:	08 95       	ret

000050c6 <H_LCD_void_gotoXY>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col)
{
    50c6:	df 93       	push	r29
    50c8:	cf 93       	push	r28
    50ca:	00 d0       	rcall	.+0      	; 0x50cc <H_LCD_void_gotoXY+0x6>
    50cc:	0f 92       	push	r0
    50ce:	cd b7       	in	r28, 0x3d	; 61
    50d0:	de b7       	in	r29, 0x3e	; 62
    50d2:	8a 83       	std	Y+2, r24	; 0x02
    50d4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(copy_u8Row == 1)
    50d6:	8a 81       	ldd	r24, Y+2	; 0x02
    50d8:	81 30       	cpi	r24, 0x01	; 1
    50da:	19 f4       	brne	.+6      	; 0x50e2 <H_LCD_void_gotoXY+0x1c>
	{
		Local_u8Address = copy_u8Col;
    50dc:	8b 81       	ldd	r24, Y+3	; 0x03
    50de:	89 83       	std	Y+1, r24	; 0x01
    50e0:	14 c0       	rjmp	.+40     	; 0x510a <H_LCD_void_gotoXY+0x44>
	}
	else if(copy_u8Row == 2)
    50e2:	8a 81       	ldd	r24, Y+2	; 0x02
    50e4:	82 30       	cpi	r24, 0x02	; 2
    50e6:	21 f4       	brne	.+8      	; 0x50f0 <H_LCD_void_gotoXY+0x2a>
	{
		Local_u8Address = copy_u8Col + 0x40;
    50e8:	8b 81       	ldd	r24, Y+3	; 0x03
    50ea:	80 5c       	subi	r24, 0xC0	; 192
    50ec:	89 83       	std	Y+1, r24	; 0x01
    50ee:	0d c0       	rjmp	.+26     	; 0x510a <H_LCD_void_gotoXY+0x44>
	}
	else if(copy_u8Row == 3)
    50f0:	8a 81       	ldd	r24, Y+2	; 0x02
    50f2:	83 30       	cpi	r24, 0x03	; 3
    50f4:	21 f4       	brne	.+8      	; 0x50fe <H_LCD_void_gotoXY+0x38>
	{
		Local_u8Address = copy_u8Col + 0x14;
    50f6:	8b 81       	ldd	r24, Y+3	; 0x03
    50f8:	8c 5e       	subi	r24, 0xEC	; 236
    50fa:	89 83       	std	Y+1, r24	; 0x01
    50fc:	06 c0       	rjmp	.+12     	; 0x510a <H_LCD_void_gotoXY+0x44>
	}
	else if(copy_u8Row == 4)
    50fe:	8a 81       	ldd	r24, Y+2	; 0x02
    5100:	84 30       	cpi	r24, 0x04	; 4
    5102:	19 f4       	brne	.+6      	; 0x510a <H_LCD_void_gotoXY+0x44>
	{
		Local_u8Address = copy_u8Col + 0x54;
    5104:	8b 81       	ldd	r24, Y+3	; 0x03
    5106:	8c 5a       	subi	r24, 0xAC	; 172
    5108:	89 83       	std	Y+1, r24	; 0x01
	else
	{

	}
	//128 Is added to the address to set the most significant bit by 1 according to DDRAM address instruction
	H_LCD_void_sendCommand(Local_u8Address+128);
    510a:	89 81       	ldd	r24, Y+1	; 0x01
    510c:	80 58       	subi	r24, 0x80	; 128
    510e:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <H_LCD_void_sendCommand>
}
    5112:	0f 90       	pop	r0
    5114:	0f 90       	pop	r0
    5116:	0f 90       	pop	r0
    5118:	cf 91       	pop	r28
    511a:	df 91       	pop	r29
    511c:	08 95       	ret

0000511e <H_LCD_void_creatCustomChar>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_creatCustomChar (const u8 * ArrPattern,u8 copy_u8charCode)
{
    511e:	df 93       	push	r29
    5120:	cf 93       	push	r28
    5122:	00 d0       	rcall	.+0      	; 0x5124 <H_LCD_void_creatCustomChar+0x6>
    5124:	00 d0       	rcall	.+0      	; 0x5126 <H_LCD_void_creatCustomChar+0x8>
    5126:	0f 92       	push	r0
    5128:	cd b7       	in	r28, 0x3d	; 61
    512a:	de b7       	in	r29, 0x3e	; 62
    512c:	9c 83       	std	Y+4, r25	; 0x04
    512e:	8b 83       	std	Y+3, r24	; 0x03
    5130:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_counter=0;
    5132:	1a 82       	std	Y+2, r1	; 0x02
	/*first calculate CGRAM address since each block of address is 8bytes*/
	u8 Local_u8CGramaddress=0;
    5134:	19 82       	std	Y+1, r1	; 0x01
	Local_u8CGramaddress = copy_u8charCode*8;
    5136:	8d 81       	ldd	r24, Y+5	; 0x05
    5138:	88 2f       	mov	r24, r24
    513a:	90 e0       	ldi	r25, 0x00	; 0
    513c:	88 0f       	add	r24, r24
    513e:	99 1f       	adc	r25, r25
    5140:	88 0f       	add	r24, r24
    5142:	99 1f       	adc	r25, r25
    5144:	88 0f       	add	r24, r24
    5146:	99 1f       	adc	r25, r25
    5148:	89 83       	std	Y+1, r24	; 0x01
	/*Access CGRAM block using function Send command by setting bit 6 and clearing bit7*/
	H_LCD_void_sendCommand(Local_u8CGramaddress+64);
    514a:	89 81       	ldd	r24, Y+1	; 0x01
    514c:	80 5c       	subi	r24, 0xC0	; 192
    514e:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <H_LCD_void_sendCommand>
	/*write the pattern to the CG ram */
	for(Local_counter=0;Local_counter<8;Local_counter++) /*<8 since there are 8 memory locations only for cgram (64bytes)*/
    5152:	1a 82       	std	Y+2, r1	; 0x02
    5154:	0e c0       	rjmp	.+28     	; 0x5172 <H_LCD_void_creatCustomChar+0x54>
	{
		H_LCD_void_sendData(ArrPattern[Local_counter]);
    5156:	8a 81       	ldd	r24, Y+2	; 0x02
    5158:	28 2f       	mov	r18, r24
    515a:	30 e0       	ldi	r19, 0x00	; 0
    515c:	8b 81       	ldd	r24, Y+3	; 0x03
    515e:	9c 81       	ldd	r25, Y+4	; 0x04
    5160:	fc 01       	movw	r30, r24
    5162:	e2 0f       	add	r30, r18
    5164:	f3 1f       	adc	r31, r19
    5166:	80 81       	ld	r24, Z
    5168:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <H_LCD_void_sendData>
	u8 Local_u8CGramaddress=0;
	Local_u8CGramaddress = copy_u8charCode*8;
	/*Access CGRAM block using function Send command by setting bit 6 and clearing bit7*/
	H_LCD_void_sendCommand(Local_u8CGramaddress+64);
	/*write the pattern to the CG ram */
	for(Local_counter=0;Local_counter<8;Local_counter++) /*<8 since there are 8 memory locations only for cgram (64bytes)*/
    516c:	8a 81       	ldd	r24, Y+2	; 0x02
    516e:	8f 5f       	subi	r24, 0xFF	; 255
    5170:	8a 83       	std	Y+2, r24	; 0x02
    5172:	8a 81       	ldd	r24, Y+2	; 0x02
    5174:	88 30       	cpi	r24, 0x08	; 8
    5176:	78 f3       	brcs	.-34     	; 0x5156 <H_LCD_void_creatCustomChar+0x38>
	{
		H_LCD_void_sendData(ArrPattern[Local_counter]);
	}
	H_LCD_void_gotoXY(1,0);
    5178:	81 e0       	ldi	r24, 0x01	; 1
    517a:	60 e0       	ldi	r22, 0x00	; 0
    517c:	0e 94 63 28 	call	0x50c6	; 0x50c6 <H_LCD_void_gotoXY>
	H_LCD_void_sendData(copy_u8charCode);
    5180:	8d 81       	ldd	r24, Y+5	; 0x05
    5182:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <H_LCD_void_sendData>

}
    5186:	0f 90       	pop	r0
    5188:	0f 90       	pop	r0
    518a:	0f 90       	pop	r0
    518c:	0f 90       	pop	r0
    518e:	0f 90       	pop	r0
    5190:	cf 91       	pop	r28
    5192:	df 91       	pop	r29
    5194:	08 95       	ret

00005196 <H_LCD_void_displayCustomChar>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_displayCustomChar (u8 copy_u8charCode)
{
    5196:	df 93       	push	r29
    5198:	cf 93       	push	r28
    519a:	0f 92       	push	r0
    519c:	cd b7       	in	r28, 0x3d	; 61
    519e:	de b7       	in	r29, 0x3e	; 62
    51a0:	89 83       	std	Y+1, r24	; 0x01
	/*give the custom char number to send data*/
	H_LCD_void_sendData(copy_u8charCode);
    51a2:	89 81       	ldd	r24, Y+1	; 0x01
    51a4:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <H_LCD_void_sendData>
}
    51a8:	0f 90       	pop	r0
    51aa:	cf 91       	pop	r28
    51ac:	df 91       	pop	r29
    51ae:	08 95       	ret

000051b0 <H_LCD_void_ClearDisplay>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_ClearDisplay(void)
{
    51b0:	df 93       	push	r29
    51b2:	cf 93       	push	r28
    51b4:	cd b7       	in	r28, 0x3d	; 61
    51b6:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_sendCommand(CLCD_CLEAR);
    51b8:	81 e0       	ldi	r24, 0x01	; 1
    51ba:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <H_LCD_void_sendCommand>
}
    51be:	cf 91       	pop	r28
    51c0:	df 91       	pop	r29
    51c2:	08 95       	ret

000051c4 <main>:
extern const Port_ConfigType PORT_Config_Arr[PORT_PINS_CONFIG_ARR_SIZE];
UART_CONFIG ARR_UART_CFG_3={Baud_16MHz_9600,Word_Size_8,Disabled,One_Stop_bit};


int main(void)
{
    51c4:	df 93       	push	r29
    51c6:	cf 93       	push	r28
    51c8:	cd b7       	in	r28, 0x3d	; 61
    51ca:	de b7       	in	r29, 0x3e	; 62
    51cc:	63 97       	sbiw	r28, 0x13	; 19
    51ce:	0f b6       	in	r0, 0x3f	; 63
    51d0:	f8 94       	cli
    51d2:	de bf       	out	0x3e, r29	; 62
    51d4:	0f be       	out	0x3f, r0	; 63
    51d6:	cd bf       	out	0x3d, r28	; 61
	u8 Local_variable='8';
    51d8:	88 e3       	ldi	r24, 0x38	; 56
    51da:	8a 83       	std	Y+2, r24	; 0x02
	char str[]="HI From MC1";
    51dc:	ce 01       	movw	r24, r28
    51de:	03 96       	adiw	r24, 0x03	; 3
    51e0:	98 8b       	std	Y+16, r25	; 0x10
    51e2:	8f 87       	std	Y+15, r24	; 0x0f
    51e4:	e0 e6       	ldi	r30, 0x60	; 96
    51e6:	f0 e0       	ldi	r31, 0x00	; 0
    51e8:	fa 8b       	std	Y+18, r31	; 0x12
    51ea:	e9 8b       	std	Y+17, r30	; 0x11
    51ec:	fc e0       	ldi	r31, 0x0C	; 12
    51ee:	fb 8b       	std	Y+19, r31	; 0x13
    51f0:	e9 89       	ldd	r30, Y+17	; 0x11
    51f2:	fa 89       	ldd	r31, Y+18	; 0x12
    51f4:	00 80       	ld	r0, Z
    51f6:	89 89       	ldd	r24, Y+17	; 0x11
    51f8:	9a 89       	ldd	r25, Y+18	; 0x12
    51fa:	01 96       	adiw	r24, 0x01	; 1
    51fc:	9a 8b       	std	Y+18, r25	; 0x12
    51fe:	89 8b       	std	Y+17, r24	; 0x11
    5200:	ef 85       	ldd	r30, Y+15	; 0x0f
    5202:	f8 89       	ldd	r31, Y+16	; 0x10
    5204:	00 82       	st	Z, r0
    5206:	8f 85       	ldd	r24, Y+15	; 0x0f
    5208:	98 89       	ldd	r25, Y+16	; 0x10
    520a:	01 96       	adiw	r24, 0x01	; 1
    520c:	98 8b       	std	Y+16, r25	; 0x10
    520e:	8f 87       	std	Y+15, r24	; 0x0f
    5210:	9b 89       	ldd	r25, Y+19	; 0x13
    5212:	91 50       	subi	r25, 0x01	; 1
    5214:	9b 8b       	std	Y+19, r25	; 0x13
    5216:	eb 89       	ldd	r30, Y+19	; 0x13
    5218:	ee 23       	and	r30, r30
    521a:	51 f7       	brne	.-44     	; 0x51f0 <main+0x2c>
	u8 Clear='\0';
    521c:	19 82       	std	Y+1, r1	; 0x01
	Port_Init(PORT_Config_Arr);
    521e:	85 ee       	ldi	r24, 0xE5	; 229
    5220:	91 e0       	ldi	r25, 0x01	; 1
    5222:	0e 94 88 10 	call	0x2110	; 0x2110 <Port_Init>
	UART_Init(&ARR_UART_CFG_3);
    5226:	80 ec       	ldi	r24, 0xC0	; 192
    5228:	91 e0       	ldi	r25, 0x01	; 1
    522a:	0e 94 75 07 	call	0xeea	; 0xeea <UART_Init>
	//UART_SendString(str);
	//_delay_ms(1000);
	//UART_SendByte(Clear);
	while(1)
	{
		Local_variable=H_KEYPAD_u8_getPressedKey();
    522e:	0e 94 02 22 	call	0x4404	; 0x4404 <H_KEYPAD_u8_getPressedKey>
    5232:	8a 83       	std	Y+2, r24	; 0x02
		UART_SendByte(Local_variable);
    5234:	8a 81       	ldd	r24, Y+2	; 0x02
    5236:	0e 94 73 08 	call	0x10e6	; 0x10e6 <UART_SendByte>
    523a:	f9 cf       	rjmp	.-14     	; 0x522e <main+0x6a>

0000523c <__mulsi3>:
    523c:	62 9f       	mul	r22, r18
    523e:	d0 01       	movw	r26, r0
    5240:	73 9f       	mul	r23, r19
    5242:	f0 01       	movw	r30, r0
    5244:	82 9f       	mul	r24, r18
    5246:	e0 0d       	add	r30, r0
    5248:	f1 1d       	adc	r31, r1
    524a:	64 9f       	mul	r22, r20
    524c:	e0 0d       	add	r30, r0
    524e:	f1 1d       	adc	r31, r1
    5250:	92 9f       	mul	r25, r18
    5252:	f0 0d       	add	r31, r0
    5254:	83 9f       	mul	r24, r19
    5256:	f0 0d       	add	r31, r0
    5258:	74 9f       	mul	r23, r20
    525a:	f0 0d       	add	r31, r0
    525c:	65 9f       	mul	r22, r21
    525e:	f0 0d       	add	r31, r0
    5260:	99 27       	eor	r25, r25
    5262:	72 9f       	mul	r23, r18
    5264:	b0 0d       	add	r27, r0
    5266:	e1 1d       	adc	r30, r1
    5268:	f9 1f       	adc	r31, r25
    526a:	63 9f       	mul	r22, r19
    526c:	b0 0d       	add	r27, r0
    526e:	e1 1d       	adc	r30, r1
    5270:	f9 1f       	adc	r31, r25
    5272:	bd 01       	movw	r22, r26
    5274:	cf 01       	movw	r24, r30
    5276:	11 24       	eor	r1, r1
    5278:	08 95       	ret

0000527a <__udivmodqi4>:
    527a:	99 1b       	sub	r25, r25
    527c:	79 e0       	ldi	r23, 0x09	; 9
    527e:	04 c0       	rjmp	.+8      	; 0x5288 <__udivmodqi4_ep>

00005280 <__udivmodqi4_loop>:
    5280:	99 1f       	adc	r25, r25
    5282:	96 17       	cp	r25, r22
    5284:	08 f0       	brcs	.+2      	; 0x5288 <__udivmodqi4_ep>
    5286:	96 1b       	sub	r25, r22

00005288 <__udivmodqi4_ep>:
    5288:	88 1f       	adc	r24, r24
    528a:	7a 95       	dec	r23
    528c:	c9 f7       	brne	.-14     	; 0x5280 <__udivmodqi4_loop>
    528e:	80 95       	com	r24
    5290:	08 95       	ret

00005292 <__udivmodhi4>:
    5292:	aa 1b       	sub	r26, r26
    5294:	bb 1b       	sub	r27, r27
    5296:	51 e1       	ldi	r21, 0x11	; 17
    5298:	07 c0       	rjmp	.+14     	; 0x52a8 <__udivmodhi4_ep>

0000529a <__udivmodhi4_loop>:
    529a:	aa 1f       	adc	r26, r26
    529c:	bb 1f       	adc	r27, r27
    529e:	a6 17       	cp	r26, r22
    52a0:	b7 07       	cpc	r27, r23
    52a2:	10 f0       	brcs	.+4      	; 0x52a8 <__udivmodhi4_ep>
    52a4:	a6 1b       	sub	r26, r22
    52a6:	b7 0b       	sbc	r27, r23

000052a8 <__udivmodhi4_ep>:
    52a8:	88 1f       	adc	r24, r24
    52aa:	99 1f       	adc	r25, r25
    52ac:	5a 95       	dec	r21
    52ae:	a9 f7       	brne	.-22     	; 0x529a <__udivmodhi4_loop>
    52b0:	80 95       	com	r24
    52b2:	90 95       	com	r25
    52b4:	bc 01       	movw	r22, r24
    52b6:	cd 01       	movw	r24, r26
    52b8:	08 95       	ret

000052ba <__udivmodsi4>:
    52ba:	a1 e2       	ldi	r26, 0x21	; 33
    52bc:	1a 2e       	mov	r1, r26
    52be:	aa 1b       	sub	r26, r26
    52c0:	bb 1b       	sub	r27, r27
    52c2:	fd 01       	movw	r30, r26
    52c4:	0d c0       	rjmp	.+26     	; 0x52e0 <__udivmodsi4_ep>

000052c6 <__udivmodsi4_loop>:
    52c6:	aa 1f       	adc	r26, r26
    52c8:	bb 1f       	adc	r27, r27
    52ca:	ee 1f       	adc	r30, r30
    52cc:	ff 1f       	adc	r31, r31
    52ce:	a2 17       	cp	r26, r18
    52d0:	b3 07       	cpc	r27, r19
    52d2:	e4 07       	cpc	r30, r20
    52d4:	f5 07       	cpc	r31, r21
    52d6:	20 f0       	brcs	.+8      	; 0x52e0 <__udivmodsi4_ep>
    52d8:	a2 1b       	sub	r26, r18
    52da:	b3 0b       	sbc	r27, r19
    52dc:	e4 0b       	sbc	r30, r20
    52de:	f5 0b       	sbc	r31, r21

000052e0 <__udivmodsi4_ep>:
    52e0:	66 1f       	adc	r22, r22
    52e2:	77 1f       	adc	r23, r23
    52e4:	88 1f       	adc	r24, r24
    52e6:	99 1f       	adc	r25, r25
    52e8:	1a 94       	dec	r1
    52ea:	69 f7       	brne	.-38     	; 0x52c6 <__udivmodsi4_loop>
    52ec:	60 95       	com	r22
    52ee:	70 95       	com	r23
    52f0:	80 95       	com	r24
    52f2:	90 95       	com	r25
    52f4:	9b 01       	movw	r18, r22
    52f6:	ac 01       	movw	r20, r24
    52f8:	bd 01       	movw	r22, r26
    52fa:	cf 01       	movw	r24, r30
    52fc:	08 95       	ret

000052fe <__divmodsi4>:
    52fe:	97 fb       	bst	r25, 7
    5300:	09 2e       	mov	r0, r25
    5302:	05 26       	eor	r0, r21
    5304:	0e d0       	rcall	.+28     	; 0x5322 <__divmodsi4_neg1>
    5306:	57 fd       	sbrc	r21, 7
    5308:	04 d0       	rcall	.+8      	; 0x5312 <__divmodsi4_neg2>
    530a:	d7 df       	rcall	.-82     	; 0x52ba <__udivmodsi4>
    530c:	0a d0       	rcall	.+20     	; 0x5322 <__divmodsi4_neg1>
    530e:	00 1c       	adc	r0, r0
    5310:	38 f4       	brcc	.+14     	; 0x5320 <__divmodsi4_exit>

00005312 <__divmodsi4_neg2>:
    5312:	50 95       	com	r21
    5314:	40 95       	com	r20
    5316:	30 95       	com	r19
    5318:	21 95       	neg	r18
    531a:	3f 4f       	sbci	r19, 0xFF	; 255
    531c:	4f 4f       	sbci	r20, 0xFF	; 255
    531e:	5f 4f       	sbci	r21, 0xFF	; 255

00005320 <__divmodsi4_exit>:
    5320:	08 95       	ret

00005322 <__divmodsi4_neg1>:
    5322:	f6 f7       	brtc	.-4      	; 0x5320 <__divmodsi4_exit>
    5324:	90 95       	com	r25
    5326:	80 95       	com	r24
    5328:	70 95       	com	r23
    532a:	61 95       	neg	r22
    532c:	7f 4f       	sbci	r23, 0xFF	; 255
    532e:	8f 4f       	sbci	r24, 0xFF	; 255
    5330:	9f 4f       	sbci	r25, 0xFF	; 255
    5332:	08 95       	ret

00005334 <__prologue_saves__>:
    5334:	2f 92       	push	r2
    5336:	3f 92       	push	r3
    5338:	4f 92       	push	r4
    533a:	5f 92       	push	r5
    533c:	6f 92       	push	r6
    533e:	7f 92       	push	r7
    5340:	8f 92       	push	r8
    5342:	9f 92       	push	r9
    5344:	af 92       	push	r10
    5346:	bf 92       	push	r11
    5348:	cf 92       	push	r12
    534a:	df 92       	push	r13
    534c:	ef 92       	push	r14
    534e:	ff 92       	push	r15
    5350:	0f 93       	push	r16
    5352:	1f 93       	push	r17
    5354:	cf 93       	push	r28
    5356:	df 93       	push	r29
    5358:	cd b7       	in	r28, 0x3d	; 61
    535a:	de b7       	in	r29, 0x3e	; 62
    535c:	ca 1b       	sub	r28, r26
    535e:	db 0b       	sbc	r29, r27
    5360:	0f b6       	in	r0, 0x3f	; 63
    5362:	f8 94       	cli
    5364:	de bf       	out	0x3e, r29	; 62
    5366:	0f be       	out	0x3f, r0	; 63
    5368:	cd bf       	out	0x3d, r28	; 61
    536a:	09 94       	ijmp

0000536c <__epilogue_restores__>:
    536c:	2a 88       	ldd	r2, Y+18	; 0x12
    536e:	39 88       	ldd	r3, Y+17	; 0x11
    5370:	48 88       	ldd	r4, Y+16	; 0x10
    5372:	5f 84       	ldd	r5, Y+15	; 0x0f
    5374:	6e 84       	ldd	r6, Y+14	; 0x0e
    5376:	7d 84       	ldd	r7, Y+13	; 0x0d
    5378:	8c 84       	ldd	r8, Y+12	; 0x0c
    537a:	9b 84       	ldd	r9, Y+11	; 0x0b
    537c:	aa 84       	ldd	r10, Y+10	; 0x0a
    537e:	b9 84       	ldd	r11, Y+9	; 0x09
    5380:	c8 84       	ldd	r12, Y+8	; 0x08
    5382:	df 80       	ldd	r13, Y+7	; 0x07
    5384:	ee 80       	ldd	r14, Y+6	; 0x06
    5386:	fd 80       	ldd	r15, Y+5	; 0x05
    5388:	0c 81       	ldd	r16, Y+4	; 0x04
    538a:	1b 81       	ldd	r17, Y+3	; 0x03
    538c:	aa 81       	ldd	r26, Y+2	; 0x02
    538e:	b9 81       	ldd	r27, Y+1	; 0x01
    5390:	ce 0f       	add	r28, r30
    5392:	d1 1d       	adc	r29, r1
    5394:	0f b6       	in	r0, 0x3f	; 63
    5396:	f8 94       	cli
    5398:	de bf       	out	0x3e, r29	; 62
    539a:	0f be       	out	0x3f, r0	; 63
    539c:	cd bf       	out	0x3d, r28	; 61
    539e:	ed 01       	movw	r28, r26
    53a0:	08 95       	ret

000053a2 <_exit>:
    53a2:	f8 94       	cli

000053a4 <__stop_program>:
    53a4:	ff cf       	rjmp	.-2      	; 0x53a4 <__stop_program>
