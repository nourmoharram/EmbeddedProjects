
UART_Recieve_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003cea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001f0  00800060  00003cea  00003d7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800250  00800250  00003f6e  2**0
                  ALLOC
  3 .stab         00004b6c  00000000  00000000  00003f70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003654  00000000  00000000  00008adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000c130  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000c2d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000c4c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000e8cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000fc53  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00010e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00010fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  000112e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011c50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8e 12 	jmp	0x251c	; 0x251c <__vector_1>
       8:	0c 94 c1 12 	jmp	0x2582	; 0x2582 <__vector_2>
       c:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__vector_10>
      2c:	0c 94 b1 0d 	jmp	0x1b62	; 0x1b62 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 05 09 	jmp	0x120a	; 0x120a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ee       	ldi	r30, 0xEA	; 234
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 35       	cpi	r26, 0x50	; 80
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 e5       	ldi	r26, 0x50	; 80
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 36       	cpi	r26, 0x69	; 105
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <main>
      8a:	0c 94 73 1e 	jmp	0x3ce6	; 0x3ce6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 60 1e 	jmp	0x3cc0	; 0x3cc0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 68 1e 	jmp	0x3cd0	; 0x3cd0 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 60 1e 	jmp	0x3cc0	; 0x3cc0 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_Init>:
#include<util/delay.h>

static void (*USART_PTR_FUNC)(void) =NULL;

void UART_Init(UART_CONFIG *Ptr_Copy_UART)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	2b 97       	sbiw	r28, 0x0b	; 11
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	9b 83       	std	Y+3, r25	; 0x03
     e44:	8a 83       	std	Y+2, r24	; 0x02
	/*u8 variable to carry the values of UCSRC Register*/
	u8 Local_UCSRC=0;
     e46:	19 82       	std	Y+1, r1	; 0x01

	/*Select Asynchronous mode*/
	Local_UCSRC &= UCSRC_UMSEL_ASYNCH_MASK_Clear;
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	8f 7b       	andi	r24, 0xBF	; 191
     e4c:	89 83       	std	Y+1, r24	; 0x01
	/*Clear UCPOL bit in UCSRC*/
	Local_UCSRC &= UCSRC_UCPOL_CLEAR_MASK;
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	8e 7f       	andi	r24, 0xFE	; 254
     e52:	89 83       	std	Y+1, r24	; 0x01
	switch(Ptr_Copy_UART->Baud_NO)
     e54:	ea 81       	ldd	r30, Y+2	; 0x02
     e56:	fb 81       	ldd	r31, Y+3	; 0x03
     e58:	20 81       	ld	r18, Z
     e5a:	31 81       	ldd	r19, Z+1	; 0x01
     e5c:	3b 87       	std	Y+11, r19	; 0x0b
     e5e:	2a 87       	std	Y+10, r18	; 0x0a
     e60:	8a 85       	ldd	r24, Y+10	; 0x0a
     e62:	9b 85       	ldd	r25, Y+11	; 0x0b
     e64:	8f 3c       	cpi	r24, 0xCF	; 207
     e66:	91 05       	cpc	r25, r1
     e68:	89 f0       	breq	.+34     	; 0xe8c <UART_Init+0x5e>
     e6a:	2a 85       	ldd	r18, Y+10	; 0x0a
     e6c:	3b 85       	ldd	r19, Y+11	; 0x0b
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	20 3a       	cpi	r18, 0xA0	; 160
     e72:	38 07       	cpc	r19, r24
     e74:	31 f0       	breq	.+12     	; 0xe82 <UART_Init+0x54>
     e76:	2a 85       	ldd	r18, Y+10	; 0x0a
     e78:	3b 85       	ldd	r19, Y+11	; 0x0b
     e7a:	27 36       	cpi	r18, 0x67	; 103
     e7c:	31 05       	cpc	r19, r1
     e7e:	59 f0       	breq	.+22     	; 0xe96 <UART_Init+0x68>
     e80:	0e c0       	rjmp	.+28     	; 0xe9e <UART_Init+0x70>
	{
	case Baud_16MHz_2400:
		UBBRL=Baud_16MHz_2400;
     e82:	e9 e2       	ldi	r30, 0x29	; 41
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 ea       	ldi	r24, 0xA0	; 160
     e88:	80 83       	st	Z, r24
     e8a:	09 c0       	rjmp	.+18     	; 0xe9e <UART_Init+0x70>
		break;
	case Baud_16MHz_4800:
		UBBRL= Baud_16MHz_4800;
     e8c:	e9 e2       	ldi	r30, 0x29	; 41
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	8f ec       	ldi	r24, 0xCF	; 207
     e92:	80 83       	st	Z, r24
     e94:	04 c0       	rjmp	.+8      	; 0xe9e <UART_Init+0x70>
		break;
	case Baud_16MHz_9600:
		UBBRL=Baud_16MHz_9600;
     e96:	e9 e2       	ldi	r30, 0x29	; 41
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	87 e6       	ldi	r24, 0x67	; 103
     e9c:	80 83       	st	Z, r24
		break;
	defualt:
		break;
	}
	switch(Ptr_Copy_UART->Word_size)
     e9e:	ea 81       	ldd	r30, Y+2	; 0x02
     ea0:	fb 81       	ldd	r31, Y+3	; 0x03
     ea2:	82 81       	ldd	r24, Z+2	; 0x02
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	39 87       	std	Y+9, r19	; 0x09
     eaa:	28 87       	std	Y+8, r18	; 0x08
     eac:	88 85       	ldd	r24, Y+8	; 0x08
     eae:	99 85       	ldd	r25, Y+9	; 0x09
     eb0:	82 30       	cpi	r24, 0x02	; 2
     eb2:	91 05       	cpc	r25, r1
     eb4:	b1 f1       	breq	.+108    	; 0xf22 <UART_Init+0xf4>
     eb6:	28 85       	ldd	r18, Y+8	; 0x08
     eb8:	39 85       	ldd	r19, Y+9	; 0x09
     eba:	23 30       	cpi	r18, 0x03	; 3
     ebc:	31 05       	cpc	r19, r1
     ebe:	54 f4       	brge	.+20     	; 0xed4 <UART_Init+0xa6>
     ec0:	88 85       	ldd	r24, Y+8	; 0x08
     ec2:	99 85       	ldd	r25, Y+9	; 0x09
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	89 f0       	breq	.+34     	; 0xeea <UART_Init+0xbc>
     ec8:	28 85       	ldd	r18, Y+8	; 0x08
     eca:	39 85       	ldd	r19, Y+9	; 0x09
     ecc:	21 30       	cpi	r18, 0x01	; 1
     ece:	31 05       	cpc	r19, r1
     ed0:	d1 f0       	breq	.+52     	; 0xf06 <UART_Init+0xd8>
     ed2:	50 c0       	rjmp	.+160    	; 0xf74 <UART_Init+0x146>
     ed4:	88 85       	ldd	r24, Y+8	; 0x08
     ed6:	99 85       	ldd	r25, Y+9	; 0x09
     ed8:	83 30       	cpi	r24, 0x03	; 3
     eda:	91 05       	cpc	r25, r1
     edc:	81 f1       	breq	.+96     	; 0xf3e <UART_Init+0x110>
     ede:	28 85       	ldd	r18, Y+8	; 0x08
     ee0:	39 85       	ldd	r19, Y+9	; 0x09
     ee2:	24 30       	cpi	r18, 0x04	; 4
     ee4:	31 05       	cpc	r19, r1
     ee6:	c9 f1       	breq	.+114    	; 0xf5a <UART_Init+0x12c>
     ee8:	45 c0       	rjmp	.+138    	; 0xf74 <UART_Init+0x146>
	{
	case Word_Size_5:
		CLR_BIT(Local_UCSRC,UCSRC_UCSZ0);
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	8d 7f       	andi	r24, 0xFD	; 253
     eee:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(Local_UCSRC,UCSRC_UCSZ1);
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	8b 7f       	andi	r24, 0xFB	; 251
     ef4:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(UCSRB,UCSRB_UCSZ2);
     ef6:	aa e2       	ldi	r26, 0x2A	; 42
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	ea e2       	ldi	r30, 0x2A	; 42
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	8b 7f       	andi	r24, 0xFB	; 251
     f02:	8c 93       	st	X, r24
     f04:	37 c0       	rjmp	.+110    	; 0xf74 <UART_Init+0x146>
		break;
	case Word_Size_6:
		SET_BIT(Local_UCSRC,UCSRC_UCSZ0);
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	82 60       	ori	r24, 0x02	; 2
     f0a:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(Local_UCSRC,UCSRC_UCSZ1);
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	8b 7f       	andi	r24, 0xFB	; 251
     f10:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(UCSRB,UCSRB_UCSZ2);
     f12:	aa e2       	ldi	r26, 0x2A	; 42
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	ea e2       	ldi	r30, 0x2A	; 42
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	8b 7f       	andi	r24, 0xFB	; 251
     f1e:	8c 93       	st	X, r24
     f20:	29 c0       	rjmp	.+82     	; 0xf74 <UART_Init+0x146>
		break;
	case Word_Size_7:
		CLR_BIT(Local_UCSRC,UCSRC_UCSZ0);
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	8d 7f       	andi	r24, 0xFD	; 253
     f26:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Local_UCSRC,UCSRC_UCSZ1);
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	84 60       	ori	r24, 0x04	; 4
     f2c:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(UCSRB,UCSRB_UCSZ2);
     f2e:	aa e2       	ldi	r26, 0x2A	; 42
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	ea e2       	ldi	r30, 0x2A	; 42
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	8b 7f       	andi	r24, 0xFB	; 251
     f3a:	8c 93       	st	X, r24
     f3c:	1b c0       	rjmp	.+54     	; 0xf74 <UART_Init+0x146>
		break;
	case Word_Size_8:
		SET_BIT(Local_UCSRC,UCSRC_UCSZ0);
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	82 60       	ori	r24, 0x02	; 2
     f42:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Local_UCSRC,UCSRC_UCSZ1);
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	84 60       	ori	r24, 0x04	; 4
     f48:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(UCSRB,UCSRB_UCSZ2);
     f4a:	aa e2       	ldi	r26, 0x2A	; 42
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	ea e2       	ldi	r30, 0x2A	; 42
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	8b 7f       	andi	r24, 0xFB	; 251
     f56:	8c 93       	st	X, r24
     f58:	0d c0       	rjmp	.+26     	; 0xf74 <UART_Init+0x146>
		break;
	case Word_Size_9:
		SET_BIT(Local_UCSRC,UCSRC_UCSZ0);
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	82 60       	ori	r24, 0x02	; 2
     f5e:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Local_UCSRC,UCSRC_UCSZ1);
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	84 60       	ori	r24, 0x04	; 4
     f64:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(UCSRB,UCSRB_UCSZ2);
     f66:	aa e2       	ldi	r26, 0x2A	; 42
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	ea e2       	ldi	r30, 0x2A	; 42
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	84 60       	ori	r24, 0x04	; 4
     f72:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
	switch(Ptr_Copy_UART->Parity_type)
     f74:	ea 81       	ldd	r30, Y+2	; 0x02
     f76:	fb 81       	ldd	r31, Y+3	; 0x03
     f78:	83 81       	ldd	r24, Z+3	; 0x03
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	3f 83       	std	Y+7, r19	; 0x07
     f80:	2e 83       	std	Y+6, r18	; 0x06
     f82:	8e 81       	ldd	r24, Y+6	; 0x06
     f84:	9f 81       	ldd	r25, Y+7	; 0x07
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	91 05       	cpc	r25, r1
     f8a:	69 f0       	breq	.+26     	; 0xfa6 <UART_Init+0x178>
     f8c:	2e 81       	ldd	r18, Y+6	; 0x06
     f8e:	3f 81       	ldd	r19, Y+7	; 0x07
     f90:	22 30       	cpi	r18, 0x02	; 2
     f92:	31 05       	cpc	r19, r1
     f94:	79 f0       	breq	.+30     	; 0xfb4 <UART_Init+0x186>
     f96:	8e 81       	ldd	r24, Y+6	; 0x06
     f98:	9f 81       	ldd	r25, Y+7	; 0x07
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	89 f4       	brne	.+34     	; 0xfc0 <UART_Init+0x192>
	{
	case Disabled:
		Local_UCSRC &= PARITYBITS_MASK_CLEAR;
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	8f 7c       	andi	r24, 0xCF	; 207
     fa2:	89 83       	std	Y+1, r24	; 0x01
     fa4:	0d c0       	rjmp	.+26     	; 0xfc0 <UART_Init+0x192>
		break;
	case Enabled_Even_Parity:
		Local_UCSRC &= PARITYBITS_MASK_CLEAR;
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	8f 7c       	andi	r24, 0xCF	; 207
     faa:	89 83       	std	Y+1, r24	; 0x01
		Local_UCSRC |= PARITYBITS_EVEN_MASK_SET;
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	80 62       	ori	r24, 0x20	; 32
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	06 c0       	rjmp	.+12     	; 0xfc0 <UART_Init+0x192>
		break;
	case Enabled_Odd_Parity:
		Local_UCSRC &= PARITYBITS_MASK_CLEAR;
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	8f 7c       	andi	r24, 0xCF	; 207
     fb8:	89 83       	std	Y+1, r24	; 0x01
		Local_UCSRC |= PARITYBITS_ODD_MASK_SET;
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	80 63       	ori	r24, 0x30	; 48
     fbe:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	switch(Ptr_Copy_UART->Stop_bits_no)
     fc0:	ea 81       	ldd	r30, Y+2	; 0x02
     fc2:	fb 81       	ldd	r31, Y+3	; 0x03
     fc4:	84 81       	ldd	r24, Z+4	; 0x04
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	3d 83       	std	Y+5, r19	; 0x05
     fcc:	2c 83       	std	Y+4, r18	; 0x04
     fce:	8c 81       	ldd	r24, Y+4	; 0x04
     fd0:	9d 81       	ldd	r25, Y+5	; 0x05
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	31 f0       	breq	.+12     	; 0xfe2 <UART_Init+0x1b4>
     fd6:	2c 81       	ldd	r18, Y+4	; 0x04
     fd8:	3d 81       	ldd	r19, Y+5	; 0x05
     fda:	21 30       	cpi	r18, 0x01	; 1
     fdc:	31 05       	cpc	r19, r1
     fde:	29 f0       	breq	.+10     	; 0xfea <UART_Init+0x1bc>
     fe0:	0a c0       	rjmp	.+20     	; 0xff6 <UART_Init+0x1c8>
	{
	case One_Stop_bit:
		Local_UCSRC &= STOP_BIT_CLEAR_1bit_MASK;
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	87 7f       	andi	r24, 0xF7	; 247
     fe6:	89 83       	std	Y+1, r24	; 0x01
     fe8:	06 c0       	rjmp	.+12     	; 0xff6 <UART_Init+0x1c8>
		break;
	case Two_Stop_Bit:
		Local_UCSRC &= STOP_BIT_CLEAR_1bit_MASK;
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	87 7f       	andi	r24, 0xF7	; 247
     fee:	89 83       	std	Y+1, r24	; 0x01
		Local_UCSRC |= STOP_BIT_2bit_SET_MASK;
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	88 60       	ori	r24, 0x08	; 8
     ff4:	89 83       	std	Y+1, r24	; 0x01
	default:
		break;
	}

	/*Set the selection bit to select UCSRC Register*/
	Local_UCSRC &= UCSRC_URSEL_REGSELECT_CLEAR;
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	8f 77       	andi	r24, 0x7F	; 127
     ffa:	89 83       	std	Y+1, r24	; 0x01
	Local_UCSRC |= UCSRC_URSEL_REGSELECT_SET;
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	80 68       	ori	r24, 0x80	; 128
    1000:	89 83       	std	Y+1, r24	; 0x01
	/*Set the UCSRC Register with the Local register*/
	UCSRC = Local_UCSRC;
    1002:	e0 e4       	ldi	r30, 0x40	; 64
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	80 83       	st	Z, r24

	/*Enable Receive interrupt*/
	SET_BIT(UCSRB,UCSRB_RXCIE);
    100a:	aa e2       	ldi	r26, 0x2A	; 42
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	ea e2       	ldi	r30, 0x2A	; 42
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	80 68       	ori	r24, 0x80	; 128
    1016:	8c 93       	st	X, r24
	/*Enable receiver*/
	SET_BIT(UCSRB,UCSRB_RXEN);
    1018:	aa e2       	ldi	r26, 0x2A	; 42
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	ea e2       	ldi	r30, 0x2A	; 42
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	80 61       	ori	r24, 0x10	; 16
    1024:	8c 93       	st	X, r24

}
    1026:	2b 96       	adiw	r28, 0x0b	; 11
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	de bf       	out	0x3e, r29	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	cd bf       	out	0x3d, r28	; 61
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	08 95       	ret

00001038 <UART_SendByte>:


void UART_SendByte(u8 Copy_UART)
{
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	00 d0       	rcall	.+0      	; 0x103e <UART_SendByte+0x6>
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	89 83       	std	Y+1, r24	; 0x01

	/*WAIT until transmit buffer is empty*/
	while(GET_BIT(UCSRA,UCSRA_UDRE)==0);
    1044:	eb e2       	ldi	r30, 0x2B	; 43
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z

	UDR= Copy_UART;
    104a:	ec e2       	ldi	r30, 0x2C	; 44
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	80 83       	st	Z, r24
}
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <UART_SendString>:


void UART_SendString(u8 *Ptr_To_String)
{
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	61 97       	sbiw	r28, 0x11	; 17
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
    1070:	99 8b       	std	Y+17, r25	; 0x11
    1072:	88 8b       	std	Y+16, r24	; 0x10
	u8 i=0;
    1074:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;Ptr_To_String[i] != '\0';i++)
    1076:	1f 86       	std	Y+15, r1	; 0x0f
    1078:	80 c0       	rjmp	.+256    	; 0x117a <UART_SendString+0x11e>
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	aa ef       	ldi	r26, 0xFA	; 250
    1080:	b3 e4       	ldi	r27, 0x43	; 67
    1082:	8b 87       	std	Y+11, r24	; 0x0b
    1084:	9c 87       	std	Y+12, r25	; 0x0c
    1086:	ad 87       	std	Y+13, r26	; 0x0d
    1088:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    108a:	6b 85       	ldd	r22, Y+11	; 0x0b
    108c:	7c 85       	ldd	r23, Y+12	; 0x0c
    108e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1090:	9e 85       	ldd	r25, Y+14	; 0x0e
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	4a e7       	ldi	r20, 0x7A	; 122
    1098:	55 e4       	ldi	r21, 0x45	; 69
    109a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	8f 83       	std	Y+7, r24	; 0x07
    10a4:	98 87       	std	Y+8, r25	; 0x08
    10a6:	a9 87       	std	Y+9, r26	; 0x09
    10a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10aa:	6f 81       	ldd	r22, Y+7	; 0x07
    10ac:	78 85       	ldd	r23, Y+8	; 0x08
    10ae:	89 85       	ldd	r24, Y+9	; 0x09
    10b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e8       	ldi	r20, 0x80	; 128
    10b8:	5f e3       	ldi	r21, 0x3F	; 63
    10ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10be:	88 23       	and	r24, r24
    10c0:	2c f4       	brge	.+10     	; 0x10cc <UART_SendString+0x70>
		__ticks = 1;
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	9e 83       	std	Y+6, r25	; 0x06
    10c8:	8d 83       	std	Y+5, r24	; 0x05
    10ca:	3f c0       	rjmp	.+126    	; 0x114a <UART_SendString+0xee>
	else if (__tmp > 65535)
    10cc:	6f 81       	ldd	r22, Y+7	; 0x07
    10ce:	78 85       	ldd	r23, Y+8	; 0x08
    10d0:	89 85       	ldd	r24, Y+9	; 0x09
    10d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	3f ef       	ldi	r19, 0xFF	; 255
    10d8:	4f e7       	ldi	r20, 0x7F	; 127
    10da:	57 e4       	ldi	r21, 0x47	; 71
    10dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10e0:	18 16       	cp	r1, r24
    10e2:	4c f5       	brge	.+82     	; 0x1136 <UART_SendString+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e2       	ldi	r20, 0x20	; 32
    10f2:	51 e4       	ldi	r21, 0x41	; 65
    10f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	bc 01       	movw	r22, r24
    10fe:	cd 01       	movw	r24, r26
    1100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	9e 83       	std	Y+6, r25	; 0x06
    110a:	8d 83       	std	Y+5, r24	; 0x05
    110c:	0f c0       	rjmp	.+30     	; 0x112c <UART_SendString+0xd0>
    110e:	80 e9       	ldi	r24, 0x90	; 144
    1110:	91 e0       	ldi	r25, 0x01	; 1
    1112:	9c 83       	std	Y+4, r25	; 0x04
    1114:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	9c 81       	ldd	r25, Y+4	; 0x04
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	f1 f7       	brne	.-4      	; 0x111a <UART_SendString+0xbe>
    111e:	9c 83       	std	Y+4, r25	; 0x04
    1120:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1122:	8d 81       	ldd	r24, Y+5	; 0x05
    1124:	9e 81       	ldd	r25, Y+6	; 0x06
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	9e 83       	std	Y+6, r25	; 0x06
    112a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	9e 81       	ldd	r25, Y+6	; 0x06
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	69 f7       	brne	.-38     	; 0x110e <UART_SendString+0xb2>
    1134:	14 c0       	rjmp	.+40     	; 0x115e <UART_SendString+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1136:	6f 81       	ldd	r22, Y+7	; 0x07
    1138:	78 85       	ldd	r23, Y+8	; 0x08
    113a:	89 85       	ldd	r24, Y+9	; 0x09
    113c:	9a 85       	ldd	r25, Y+10	; 0x0a
    113e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1142:	dc 01       	movw	r26, r24
    1144:	cb 01       	movw	r24, r22
    1146:	9e 83       	std	Y+6, r25	; 0x06
    1148:	8d 83       	std	Y+5, r24	; 0x05
    114a:	8d 81       	ldd	r24, Y+5	; 0x05
    114c:	9e 81       	ldd	r25, Y+6	; 0x06
    114e:	9a 83       	std	Y+2, r25	; 0x02
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	9a 81       	ldd	r25, Y+2	; 0x02
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	f1 f7       	brne	.-4      	; 0x1156 <UART_SendString+0xfa>
    115a:	9a 83       	std	Y+2, r25	; 0x02
    115c:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(500);
		UART_SendByte(Ptr_To_String[i]);
    115e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	88 89       	ldd	r24, Y+16	; 0x10
    1166:	99 89       	ldd	r25, Y+17	; 0x11
    1168:	fc 01       	movw	r30, r24
    116a:	e2 0f       	add	r30, r18
    116c:	f3 1f       	adc	r31, r19
    116e:	80 81       	ld	r24, Z
    1170:	0e 94 1c 08 	call	0x1038	; 0x1038 <UART_SendByte>


void UART_SendString(u8 *Ptr_To_String)
{
	u8 i=0;
	for(i=0;Ptr_To_String[i] != '\0';i++)
    1174:	8f 85       	ldd	r24, Y+15	; 0x0f
    1176:	8f 5f       	subi	r24, 0xFF	; 255
    1178:	8f 87       	std	Y+15, r24	; 0x0f
    117a:	8f 85       	ldd	r24, Y+15	; 0x0f
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	88 89       	ldd	r24, Y+16	; 0x10
    1182:	99 89       	ldd	r25, Y+17	; 0x11
    1184:	fc 01       	movw	r30, r24
    1186:	e2 0f       	add	r30, r18
    1188:	f3 1f       	adc	r31, r19
    118a:	80 81       	ld	r24, Z
    118c:	88 23       	and	r24, r24
    118e:	09 f0       	breq	.+2      	; 0x1192 <UART_SendString+0x136>
    1190:	74 cf       	rjmp	.-280    	; 0x107a <UART_SendString+0x1e>
	{
		_delay_ms(500);
		UART_SendByte(Ptr_To_String[i]);
	}

}
    1192:	61 96       	adiw	r28, 0x11	; 17
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	cd bf       	out	0x3d, r28	; 61
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	08 95       	ret

000011a4 <UART_RecieveByteSynchNonBlocking>:
u8 UART_RecieveByteSynchNonBlocking(void)
{
    11a4:	df 93       	push	r29
    11a6:	cf 93       	push	r28
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
	/*wait until receive is complete*/
	while((GET_BIT(UCSRA,UCSRA_RXC))==0);
    11ac:	eb e2       	ldi	r30, 0x2B	; 43
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	88 23       	and	r24, r24
    11b4:	dc f7       	brge	.-10     	; 0x11ac <UART_RecieveByteSynchNonBlocking+0x8>
	return UDR;
    11b6:	ec e2       	ldi	r30, 0x2C	; 44
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z

}
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <UART_RecieveByteASynchCallback>:
u8 UART_RecieveByteASynchCallback(void)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
	return UDR;
    11ca:	ec e2       	ldi	r30, 0x2C	; 44
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z

}
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <UART_SetCallBack>:
u8 UART_SetCallBack(void (*Copy_pvINTFunc)(void))
{
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	00 d0       	rcall	.+0      	; 0x11dc <UART_SetCallBack+0x6>
    11dc:	0f 92       	push	r0
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	9b 83       	std	Y+3, r25	; 0x03
    11e4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    11e6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvINTFunc != NULL)
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	9b 81       	ldd	r25, Y+3	; 0x03
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	31 f0       	breq	.+12     	; 0x11fc <UART_SetCallBack+0x26>
	{
		USART_PTR_FUNC=Copy_pvINTFunc;
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	9b 81       	ldd	r25, Y+3	; 0x03
    11f4:	90 93 51 02 	sts	0x0251, r25
    11f8:	80 93 50 02 	sts	0x0250, r24
	}

	return Local_u8ErrorStatus;
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <__vector_13>:
void __vector_13 (void)  __attribute__((signal));
void __vector_13 (void)
{
    120a:	1f 92       	push	r1
    120c:	0f 92       	push	r0
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	0f 92       	push	r0
    1212:	11 24       	eor	r1, r1
    1214:	2f 93       	push	r18
    1216:	3f 93       	push	r19
    1218:	4f 93       	push	r20
    121a:	5f 93       	push	r21
    121c:	6f 93       	push	r22
    121e:	7f 93       	push	r23
    1220:	8f 93       	push	r24
    1222:	9f 93       	push	r25
    1224:	af 93       	push	r26
    1226:	bf 93       	push	r27
    1228:	ef 93       	push	r30
    122a:	ff 93       	push	r31
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62

	if(USART_PTR_FUNC != NULL)
    1234:	80 91 50 02 	lds	r24, 0x0250
    1238:	90 91 51 02 	lds	r25, 0x0251
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	29 f0       	breq	.+10     	; 0x124a <__vector_13+0x40>
	{
		USART_PTR_FUNC();
    1240:	e0 91 50 02 	lds	r30, 0x0250
    1244:	f0 91 51 02 	lds	r31, 0x0251
    1248:	09 95       	icall
	}
	else
	{
		/*Stop*/
	}
}
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	ff 91       	pop	r31
    1250:	ef 91       	pop	r30
    1252:	bf 91       	pop	r27
    1254:	af 91       	pop	r26
    1256:	9f 91       	pop	r25
    1258:	8f 91       	pop	r24
    125a:	7f 91       	pop	r23
    125c:	6f 91       	pop	r22
    125e:	5f 91       	pop	r21
    1260:	4f 91       	pop	r20
    1262:	3f 91       	pop	r19
    1264:	2f 91       	pop	r18
    1266:	0f 90       	pop	r0
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	0f 90       	pop	r0
    126c:	1f 90       	pop	r1
    126e:	18 95       	reti

00001270 <M_TIMER1_void_Init>:

void (*ICU_CallBackFun)(void) = NULL ;


void M_TIMER1_void_Init(TIMER_1_MD Local_Mode,TIMER_1_WG Local_WG)
{
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	00 d0       	rcall	.+0      	; 0x1276 <M_TIMER1_void_Init+0x6>
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
    127a:	89 83       	std	Y+1, r24	; 0x01
    127c:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_Mode == TIMER_1_NM)
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	88 23       	and	r24, r24
    1282:	99 f5       	brne	.+102    	; 0x12ea <M_TIMER1_void_Init+0x7a>
	{
		/*Select normal mode*/
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1284:	af e4       	ldi	r26, 0x4F	; 79
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	ef e4       	ldi	r30, 0x4F	; 79
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	8e 7f       	andi	r24, 0xFE	; 254
    1290:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1292:	af e4       	ldi	r26, 0x4F	; 79
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	ef e4       	ldi	r30, 0x4F	; 79
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	8d 7f       	andi	r24, 0xFD	; 253
    129e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    12a0:	ae e4       	ldi	r26, 0x4E	; 78
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	ee e4       	ldi	r30, 0x4E	; 78
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	91 81       	ldd	r25, Z+1	; 0x01
    12ac:	87 7f       	andi	r24, 0xF7	; 247
    12ae:	11 96       	adiw	r26, 0x01	; 1
    12b0:	9c 93       	st	X, r25
    12b2:	8e 93       	st	-X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    12b4:	ae e4       	ldi	r26, 0x4E	; 78
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	ee e4       	ldi	r30, 0x4E	; 78
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	91 81       	ldd	r25, Z+1	; 0x01
    12c0:	8f 7e       	andi	r24, 0xEF	; 239
    12c2:	11 96       	adiw	r26, 0x01	; 1
    12c4:	9c 93       	st	X, r25
    12c6:	8e 93       	st	-X, r24
		if(Local_WG == TIMER_1_NWG)
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	88 23       	and	r24, r24
    12cc:	71 f4       	brne	.+28     	; 0x12ea <M_TIMER1_void_Init+0x7a>
		{
			/*Select compare output mode*/
			CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    12ce:	af e4       	ldi	r26, 0x4F	; 79
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	ef e4       	ldi	r30, 0x4F	; 79
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	8f 7b       	andi	r24, 0xBF	; 191
    12da:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    12dc:	af e4       	ldi	r26, 0x4F	; 79
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	ef e4       	ldi	r30, 0x4F	; 79
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	8f 77       	andi	r24, 0x7F	; 127
    12e8:	8c 93       	st	X, r24
		}
	}
}
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <M_TIMER1_void_Start>:

void M_TIMER1_void_Start(TIMER1_PRESCALER Local_Prescaller)
{
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	0f 92       	push	r0
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	89 83       	std	Y+1, r24	; 0x01
	if(Local_Prescaller== TIMER1_CLK_8)
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	82 30       	cpi	r24, 0x02	; 2
    1304:	f1 f4       	brne	.+60     	; 0x1342 <M_TIMER1_void_Start+0x4e>
	{
		CLR_BIT(TCCR1B,TCCR1B_CS10);
    1306:	ae e4       	ldi	r26, 0x4E	; 78
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	ee e4       	ldi	r30, 0x4E	; 78
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	91 81       	ldd	r25, Z+1	; 0x01
    1312:	8e 7f       	andi	r24, 0xFE	; 254
    1314:	11 96       	adiw	r26, 0x01	; 1
    1316:	9c 93       	st	X, r25
    1318:	8e 93       	st	-X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    131a:	ae e4       	ldi	r26, 0x4E	; 78
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	ee e4       	ldi	r30, 0x4E	; 78
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	91 81       	ldd	r25, Z+1	; 0x01
    1326:	82 60       	ori	r24, 0x02	; 2
    1328:	11 96       	adiw	r26, 0x01	; 1
    132a:	9c 93       	st	X, r25
    132c:	8e 93       	st	-X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);
    132e:	ae e4       	ldi	r26, 0x4E	; 78
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	ee e4       	ldi	r30, 0x4E	; 78
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	91 81       	ldd	r25, Z+1	; 0x01
    133a:	8b 7f       	andi	r24, 0xFB	; 251
    133c:	11 96       	adiw	r26, 0x01	; 1
    133e:	9c 93       	st	X, r25
    1340:	8e 93       	st	-X, r24
	}
}
    1342:	0f 90       	pop	r0
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	08 95       	ret

0000134a <M_TIMER1_void_Stop>:
void M_TIMER1_void_Stop(void)
{
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    1352:	ae e4       	ldi	r26, 0x4E	; 78
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	ee e4       	ldi	r30, 0x4E	; 78
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	91 81       	ldd	r25, Z+1	; 0x01
    135e:	8e 7f       	andi	r24, 0xFE	; 254
    1360:	11 96       	adiw	r26, 0x01	; 1
    1362:	9c 93       	st	X, r25
    1364:	8e 93       	st	-X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS11);
    1366:	ae e4       	ldi	r26, 0x4E	; 78
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	ee e4       	ldi	r30, 0x4E	; 78
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	91 81       	ldd	r25, Z+1	; 0x01
    1372:	8d 7f       	andi	r24, 0xFD	; 253
    1374:	11 96       	adiw	r26, 0x01	; 1
    1376:	9c 93       	st	X, r25
    1378:	8e 93       	st	-X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    137a:	ae e4       	ldi	r26, 0x4E	; 78
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	ee e4       	ldi	r30, 0x4E	; 78
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	91 81       	ldd	r25, Z+1	; 0x01
    1386:	8b 7f       	andi	r24, 0xFB	; 251
    1388:	11 96       	adiw	r26, 0x01	; 1
    138a:	9c 93       	st	X, r25
    138c:	8e 93       	st	-X, r24

}
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <M_TIMER1_void_ICU_Enable>:

void M_TIMER1_void_ICU_Enable(void)
{
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
	/*Enable ICU Interrupt*/
	SET_BIT(TIMSK,TIMSK_TICIE1);
    139c:	a9 e5       	ldi	r26, 0x59	; 89
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e9 e5       	ldi	r30, 0x59	; 89
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	80 62       	ori	r24, 0x20	; 32
    13a8:	8c 93       	st	X, r24
	/*Set trigger to rising edge*/
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    13aa:	ae e4       	ldi	r26, 0x4E	; 78
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	ee e4       	ldi	r30, 0x4E	; 78
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	91 81       	ldd	r25, Z+1	; 0x01
    13b6:	80 64       	ori	r24, 0x40	; 64
    13b8:	11 96       	adiw	r26, 0x01	; 1
    13ba:	9c 93       	st	X, r25
    13bc:	8e 93       	st	-X, r24

}
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <M_TIMER1_void_ICU_TriggerSelect>:


void M_TIMER1_void_ICU_TriggerSelect(ICU_Trigger Local_Trigger)
{
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	0f 92       	push	r0
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	89 83       	std	Y+1, r24	; 0x01
	if(Local_Trigger == ICU_FALLING)
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	88 23       	and	r24, r24
    13d4:	59 f4       	brne	.+22     	; 0x13ec <M_TIMER1_void_ICU_TriggerSelect+0x28>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    13d6:	ae e4       	ldi	r26, 0x4E	; 78
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	ee e4       	ldi	r30, 0x4E	; 78
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	91 81       	ldd	r25, Z+1	; 0x01
    13e2:	8f 7b       	andi	r24, 0xBF	; 191
    13e4:	11 96       	adiw	r26, 0x01	; 1
    13e6:	9c 93       	st	X, r25
    13e8:	8e 93       	st	-X, r24
    13ea:	0d c0       	rjmp	.+26     	; 0x1406 <M_TIMER1_void_ICU_TriggerSelect+0x42>

	}
	else if(Local_Trigger == ICU_RISING)
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
    13ee:	81 30       	cpi	r24, 0x01	; 1
    13f0:	51 f4       	brne	.+20     	; 0x1406 <M_TIMER1_void_ICU_TriggerSelect+0x42>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    13f2:	ae e4       	ldi	r26, 0x4E	; 78
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	ee e4       	ldi	r30, 0x4E	; 78
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	91 81       	ldd	r25, Z+1	; 0x01
    13fe:	80 64       	ori	r24, 0x40	; 64
    1400:	11 96       	adiw	r26, 0x01	; 1
    1402:	9c 93       	st	X, r25
    1404:	8e 93       	st	-X, r24

	}
}
    1406:	0f 90       	pop	r0
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <M_TIMER1_void_ICU_INTERRUPTDIS>:

void M_TIMER1_void_ICU_INTERRUPTDIS(void)
{
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
	/*Enable ICU Interrupt*/
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    1416:	a9 e5       	ldi	r26, 0x59	; 89
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e9 e5       	ldi	r30, 0x59	; 89
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	8f 7d       	andi	r24, 0xDF	; 223
    1422:	8c 93       	st	X, r24
}
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <M_TIMER1_void_ICU_Reading>:

u16 M_TIMER1_void_ICU_Reading(void)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1432:	e6 e4       	ldi	r30, 0x46	; 70
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	91 81       	ldd	r25, Z+1	; 0x01
}
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	08 95       	ret

00001440 <M_TIMER1_void_ICU_SetCallBack>:

void M_TIMER1_void_ICU_SetCallBack(void)
{
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62

}
    1448:	cf 91       	pop	r28
    144a:	df 91       	pop	r29
    144c:	08 95       	ret

0000144e <M_TIMER1_u8_Reset_flag>:

u8 M_TIMER1_u8_Reset_flag(TIMER1_INTERRUPT_TYPE Local_type)
{
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	0f 92       	push	r0
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    1458:	89 83       	std	Y+1, r24	; 0x01
	if(Local_type == TIMER1_ICU)
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	88 23       	and	r24, r24
    145e:	41 f4       	brne	.+16     	; 0x1470 <M_TIMER1_u8_Reset_flag+0x22>
	{
		SET_BIT(TIFR,TIFR_ICF1);
    1460:	a8 e5       	ldi	r26, 0x58	; 88
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e8 e5       	ldi	r30, 0x58	; 88
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	80 62       	ori	r24, 0x20	; 32
    146c:	8c 93       	st	X, r24
    146e:	0a c0       	rjmp	.+20     	; 0x1484 <M_TIMER1_u8_Reset_flag+0x36>
	}
	else if(Local_type == TIMER1_OVF)
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	83 30       	cpi	r24, 0x03	; 3
    1474:	39 f4       	brne	.+14     	; 0x1484 <M_TIMER1_u8_Reset_flag+0x36>
	{
		SET_BIT(TIFR,TIFR_TOV1);
    1476:	a8 e5       	ldi	r26, 0x58	; 88
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e8 e5       	ldi	r30, 0x58	; 88
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	84 60       	ori	r24, 0x04	; 4
    1482:	8c 93       	st	X, r24
	}
	return 0;
    1484:	80 e0       	ldi	r24, 0x00	; 0
}
    1486:	0f 90       	pop	r0
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <M_void_Timer_Init>:
static u32 No_of_over_flows=0;
static u8 No_of_Remaning=0;
static u32 Global_No_of_overflows=0;

void M_void_Timer_Init(Timer_Mode T_MODE, Wave_Form_Generation WG_M)
{
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	2c 97       	sbiw	r28, 0x0c	; 12
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	de bf       	out	0x3e, r29	; 62
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	cd bf       	out	0x3d, r28	; 61
    14a2:	89 83       	std	Y+1, r24	; 0x01
    14a4:	6a 83       	std	Y+2, r22	; 0x02
	switch(T_MODE)
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	3c 87       	std	Y+12, r19	; 0x0c
    14ae:	2b 87       	std	Y+11, r18	; 0x0b
    14b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    14b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	91 05       	cpc	r25, r1
    14b8:	09 f4       	brne	.+2      	; 0x14bc <M_void_Timer_Init+0x2e>
    14ba:	66 c0       	rjmp	.+204    	; 0x1588 <M_void_Timer_Init+0xfa>
    14bc:	2b 85       	ldd	r18, Y+11	; 0x0b
    14be:	3c 85       	ldd	r19, Y+12	; 0x0c
    14c0:	22 30       	cpi	r18, 0x02	; 2
    14c2:	31 05       	cpc	r19, r1
    14c4:	2c f4       	brge	.+10     	; 0x14d0 <M_void_Timer_Init+0x42>
    14c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    14c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    14ca:	00 97       	sbiw	r24, 0x00	; 0
    14cc:	71 f0       	breq	.+28     	; 0x14ea <M_void_Timer_Init+0x5c>
    14ce:	23 c1       	rjmp	.+582    	; 0x1716 <M_void_Timer_Init+0x288>
    14d0:	2b 85       	ldd	r18, Y+11	; 0x0b
    14d2:	3c 85       	ldd	r19, Y+12	; 0x0c
    14d4:	22 30       	cpi	r18, 0x02	; 2
    14d6:	31 05       	cpc	r19, r1
    14d8:	09 f4       	brne	.+2      	; 0x14dc <M_void_Timer_Init+0x4e>
    14da:	a6 c0       	rjmp	.+332    	; 0x1628 <M_void_Timer_Init+0x19a>
    14dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    14de:	9c 85       	ldd	r25, Y+12	; 0x0c
    14e0:	83 30       	cpi	r24, 0x03	; 3
    14e2:	91 05       	cpc	r25, r1
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <M_void_Timer_Init+0x5a>
    14e6:	dc c0       	rjmp	.+440    	; 0x16a0 <M_void_Timer_Init+0x212>
    14e8:	16 c1       	rjmp	.+556    	; 0x1716 <M_void_Timer_Init+0x288>
	{
	case Normal_Mode:
		TCCR0 &= CLEAR_TIMER_MODE_REG;
    14ea:	a3 e5       	ldi	r26, 0x53	; 83
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e3 e5       	ldi	r30, 0x53	; 83
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	87 7d       	andi	r24, 0xD7	; 215
    14f6:	8c 93       	st	X, r24
		TCCR0 |=SET_NORMAL_MODE_MASK;
    14f8:	a3 e5       	ldi	r26, 0x53	; 83
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e3 e5       	ldi	r30, 0x53	; 83
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	8c 93       	st	X, r24
		switch(WG_M)
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	3a 87       	std	Y+10, r19	; 0x0a
    150c:	29 87       	std	Y+9, r18	; 0x09
    150e:	89 85       	ldd	r24, Y+9	; 0x09
    1510:	9a 85       	ldd	r25, Y+10	; 0x0a
    1512:	82 30       	cpi	r24, 0x02	; 2
    1514:	91 05       	cpc	r25, r1
    1516:	d1 f0       	breq	.+52     	; 0x154c <M_void_Timer_Init+0xbe>
    1518:	29 85       	ldd	r18, Y+9	; 0x09
    151a:	3a 85       	ldd	r19, Y+10	; 0x0a
    151c:	23 30       	cpi	r18, 0x03	; 3
    151e:	31 05       	cpc	r19, r1
    1520:	21 f1       	breq	.+72     	; 0x156a <M_void_Timer_Init+0xdc>
    1522:	89 85       	ldd	r24, Y+9	; 0x09
    1524:	9a 85       	ldd	r25, Y+10	; 0x0a
    1526:	81 30       	cpi	r24, 0x01	; 1
    1528:	91 05       	cpc	r25, r1
    152a:	09 f0       	breq	.+2      	; 0x152e <M_void_Timer_Init+0xa0>
    152c:	f4 c0       	rjmp	.+488    	; 0x1716 <M_void_Timer_Init+0x288>
		{
		case Toggle_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    152e:	a3 e5       	ldi	r26, 0x53	; 83
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	e3 e5       	ldi	r30, 0x53	; 83
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	8f 7c       	andi	r24, 0xCF	; 207
    153a:	8c 93       	st	X, r24
			TCCR0 |= TOGGLE_PORT_MASK;
    153c:	a3 e5       	ldi	r26, 0x53	; 83
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e3 e5       	ldi	r30, 0x53	; 83
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	80 61       	ori	r24, 0x10	; 16
    1548:	8c 93       	st	X, r24
    154a:	e5 c0       	rjmp	.+458    	; 0x1716 <M_void_Timer_Init+0x288>
			break;
		case Clear_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    154c:	a3 e5       	ldi	r26, 0x53	; 83
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e3 e5       	ldi	r30, 0x53	; 83
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	8f 7c       	andi	r24, 0xCF	; 207
    1558:	8c 93       	st	X, r24
			TCCR0 |= CLEAR_PORT_MASK;
    155a:	a3 e5       	ldi	r26, 0x53	; 83
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e3 e5       	ldi	r30, 0x53	; 83
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	80 62       	ori	r24, 0x20	; 32
    1566:	8c 93       	st	X, r24
    1568:	d6 c0       	rjmp	.+428    	; 0x1716 <M_void_Timer_Init+0x288>
			break;
		case Set_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    156a:	a3 e5       	ldi	r26, 0x53	; 83
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e3 e5       	ldi	r30, 0x53	; 83
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	8f 7c       	andi	r24, 0xCF	; 207
    1576:	8c 93       	st	X, r24
			TCCR0 |= SET_PORT_MASK;
    1578:	a3 e5       	ldi	r26, 0x53	; 83
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e3 e5       	ldi	r30, 0x53	; 83
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	80 63       	ori	r24, 0x30	; 48
    1584:	8c 93       	st	X, r24
    1586:	c7 c0       	rjmp	.+398    	; 0x1716 <M_void_Timer_Init+0x288>
		default:
			break;
		}
		break;
	case CTC_Mode:
		TCCR0 &= CLEAR_TIMER_MODE_REG;
    1588:	a3 e5       	ldi	r26, 0x53	; 83
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	e3 e5       	ldi	r30, 0x53	; 83
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	87 7d       	andi	r24, 0xD7	; 215
    1594:	8c 93       	st	X, r24
		TCCR0 |=SET_CTC_MODE_MASK;
    1596:	a3 e5       	ldi	r26, 0x53	; 83
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e3 e5       	ldi	r30, 0x53	; 83
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	88 60       	ori	r24, 0x08	; 8
    15a2:	8c 93       	st	X, r24
		switch(WG_M)
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	38 87       	std	Y+8, r19	; 0x08
    15ac:	2f 83       	std	Y+7, r18	; 0x07
    15ae:	8f 81       	ldd	r24, Y+7	; 0x07
    15b0:	98 85       	ldd	r25, Y+8	; 0x08
    15b2:	82 30       	cpi	r24, 0x02	; 2
    15b4:	91 05       	cpc	r25, r1
    15b6:	d1 f0       	breq	.+52     	; 0x15ec <M_void_Timer_Init+0x15e>
    15b8:	2f 81       	ldd	r18, Y+7	; 0x07
    15ba:	38 85       	ldd	r19, Y+8	; 0x08
    15bc:	23 30       	cpi	r18, 0x03	; 3
    15be:	31 05       	cpc	r19, r1
    15c0:	21 f1       	breq	.+72     	; 0x160a <M_void_Timer_Init+0x17c>
    15c2:	8f 81       	ldd	r24, Y+7	; 0x07
    15c4:	98 85       	ldd	r25, Y+8	; 0x08
    15c6:	81 30       	cpi	r24, 0x01	; 1
    15c8:	91 05       	cpc	r25, r1
    15ca:	09 f0       	breq	.+2      	; 0x15ce <M_void_Timer_Init+0x140>
    15cc:	a4 c0       	rjmp	.+328    	; 0x1716 <M_void_Timer_Init+0x288>
		{
		case Toggle_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    15ce:	a3 e5       	ldi	r26, 0x53	; 83
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e3 e5       	ldi	r30, 0x53	; 83
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	8f 7c       	andi	r24, 0xCF	; 207
    15da:	8c 93       	st	X, r24
			TCCR0 |= TOGGLE_PORT_MASK;
    15dc:	a3 e5       	ldi	r26, 0x53	; 83
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e3 e5       	ldi	r30, 0x53	; 83
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	80 61       	ori	r24, 0x10	; 16
    15e8:	8c 93       	st	X, r24
    15ea:	95 c0       	rjmp	.+298    	; 0x1716 <M_void_Timer_Init+0x288>
			break;
		case Clear_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    15ec:	a3 e5       	ldi	r26, 0x53	; 83
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	e3 e5       	ldi	r30, 0x53	; 83
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	8f 7c       	andi	r24, 0xCF	; 207
    15f8:	8c 93       	st	X, r24
			TCCR0 |= CLEAR_PORT_MASK;
    15fa:	a3 e5       	ldi	r26, 0x53	; 83
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e3 e5       	ldi	r30, 0x53	; 83
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	80 62       	ori	r24, 0x20	; 32
    1606:	8c 93       	st	X, r24
    1608:	86 c0       	rjmp	.+268    	; 0x1716 <M_void_Timer_Init+0x288>
			break;
		case Set_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    160a:	a3 e5       	ldi	r26, 0x53	; 83
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e3 e5       	ldi	r30, 0x53	; 83
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	8f 7c       	andi	r24, 0xCF	; 207
    1616:	8c 93       	st	X, r24
			TCCR0 |= SET_PORT_MASK;
    1618:	a3 e5       	ldi	r26, 0x53	; 83
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e3 e5       	ldi	r30, 0x53	; 83
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	80 63       	ori	r24, 0x30	; 48
    1624:	8c 93       	st	X, r24
    1626:	77 c0       	rjmp	.+238    	; 0x1716 <M_void_Timer_Init+0x288>
		default:
			break;
		}
		break;
	case Fast_PWM:
		TCCR0 &= CLEAR_TIMER_MODE_REG;
    1628:	a3 e5       	ldi	r26, 0x53	; 83
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e3 e5       	ldi	r30, 0x53	; 83
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	87 7d       	andi	r24, 0xD7	; 215
    1634:	8c 93       	st	X, r24
		TCCR0 |=SET_FAST_MODE_MASK;
    1636:	a3 e5       	ldi	r26, 0x53	; 83
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e3 e5       	ldi	r30, 0x53	; 83
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	88 64       	ori	r24, 0x48	; 72
    1642:	8c 93       	st	X, r24
		switch(WG_M)
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	3e 83       	std	Y+6, r19	; 0x06
    164c:	2d 83       	std	Y+5, r18	; 0x05
    164e:	8d 81       	ldd	r24, Y+5	; 0x05
    1650:	9e 81       	ldd	r25, Y+6	; 0x06
    1652:	84 30       	cpi	r24, 0x04	; 4
    1654:	91 05       	cpc	r25, r1
    1656:	31 f0       	breq	.+12     	; 0x1664 <M_void_Timer_Init+0x1d6>
    1658:	2d 81       	ldd	r18, Y+5	; 0x05
    165a:	3e 81       	ldd	r19, Y+6	; 0x06
    165c:	25 30       	cpi	r18, 0x05	; 5
    165e:	31 05       	cpc	r19, r1
    1660:	81 f0       	breq	.+32     	; 0x1682 <M_void_Timer_Init+0x1f4>
    1662:	59 c0       	rjmp	.+178    	; 0x1716 <M_void_Timer_Init+0x288>
		{
		case Inverting_Mode:
			TCCR0 &= CLEAR_WAVEG_MASK;
    1664:	a3 e5       	ldi	r26, 0x53	; 83
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e3 e5       	ldi	r30, 0x53	; 83
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	8f 7c       	andi	r24, 0xCF	; 207
    1670:	8c 93       	st	X, r24
			TCCR0 |= INVERTING_FAST_MASK;
    1672:	a3 e5       	ldi	r26, 0x53	; 83
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e3 e5       	ldi	r30, 0x53	; 83
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	80 63       	ori	r24, 0x30	; 48
    167e:	8c 93       	st	X, r24
    1680:	4a c0       	rjmp	.+148    	; 0x1716 <M_void_Timer_Init+0x288>
			break;
		case Non_Invering_Mode:
			TCCR0 &= CLEAR_WAVEG_MASK;
    1682:	a3 e5       	ldi	r26, 0x53	; 83
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e3 e5       	ldi	r30, 0x53	; 83
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	8f 7c       	andi	r24, 0xCF	; 207
    168e:	8c 93       	st	X, r24
			TCCR0 |= NON_INVERTING_FAST_MASK;
    1690:	a3 e5       	ldi	r26, 0x53	; 83
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e3 e5       	ldi	r30, 0x53	; 83
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	80 62       	ori	r24, 0x20	; 32
    169c:	8c 93       	st	X, r24
    169e:	3b c0       	rjmp	.+118    	; 0x1716 <M_void_Timer_Init+0x288>
		default:
			break;
		}
		break;
	case Phase_Correct_PWM:
		TCCR0 &= CLEAR_TIMER_MODE_REG;
    16a0:	a3 e5       	ldi	r26, 0x53	; 83
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e3 e5       	ldi	r30, 0x53	; 83
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	87 7d       	andi	r24, 0xD7	; 215
    16ac:	8c 93       	st	X, r24
		TCCR0 |=SET_PWM_PHASE_MODE_MASK;
    16ae:	a3 e5       	ldi	r26, 0x53	; 83
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e3 e5       	ldi	r30, 0x53	; 83
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	80 64       	ori	r24, 0x40	; 64
    16ba:	8c 93       	st	X, r24
		switch(WG_M)
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	3c 83       	std	Y+4, r19	; 0x04
    16c4:	2b 83       	std	Y+3, r18	; 0x03
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ca:	84 30       	cpi	r24, 0x04	; 4
    16cc:	91 05       	cpc	r25, r1
    16ce:	31 f0       	breq	.+12     	; 0x16dc <M_void_Timer_Init+0x24e>
    16d0:	2b 81       	ldd	r18, Y+3	; 0x03
    16d2:	3c 81       	ldd	r19, Y+4	; 0x04
    16d4:	25 30       	cpi	r18, 0x05	; 5
    16d6:	31 05       	cpc	r19, r1
    16d8:	81 f0       	breq	.+32     	; 0x16fa <M_void_Timer_Init+0x26c>
    16da:	1d c0       	rjmp	.+58     	; 0x1716 <M_void_Timer_Init+0x288>
		{
		case Inverting_Mode:
			TCCR0 &= CLEAR_WAVEG_MASK;
    16dc:	a3 e5       	ldi	r26, 0x53	; 83
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e3 e5       	ldi	r30, 0x53	; 83
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	8f 7c       	andi	r24, 0xCF	; 207
    16e8:	8c 93       	st	X, r24
			TCCR0 |= INVERTING_PHASE_MASK;
    16ea:	a3 e5       	ldi	r26, 0x53	; 83
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e3 e5       	ldi	r30, 0x53	; 83
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	80 63       	ori	r24, 0x30	; 48
    16f6:	8c 93       	st	X, r24
    16f8:	0e c0       	rjmp	.+28     	; 0x1716 <M_void_Timer_Init+0x288>
			break;
		case Non_Invering_Mode:
			TCCR0 &= CLEAR_WAVEG_MASK;
    16fa:	a3 e5       	ldi	r26, 0x53	; 83
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e3 e5       	ldi	r30, 0x53	; 83
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	8f 7c       	andi	r24, 0xCF	; 207
    1706:	8c 93       	st	X, r24
			TCCR0 |= NON_INVERTING_PHASE_MASK;
    1708:	a3 e5       	ldi	r26, 0x53	; 83
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e3 e5       	ldi	r30, 0x53	; 83
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	80 62       	ori	r24, 0x20	; 32
    1714:	8c 93       	st	X, r24
		default:
			break;
		}
		break;
	}
}
    1716:	2c 96       	adiw	r28, 0x0c	; 12
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	08 95       	ret

00001728 <M_void_Timer_start>:
void M_void_Timer_start(PRE_SCALLER Pre_scaller_select)
{
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	0f 92       	push	r0
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= CLEAR_PRESCALLER_MASK;
    1734:	a3 e5       	ldi	r26, 0x53	; 83
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e3 e5       	ldi	r30, 0x53	; 83
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	88 7f       	andi	r24, 0xF8	; 248
    1740:	8c 93       	st	X, r24
	TCCR0 |= Pre_scaller_select;
    1742:	a3 e5       	ldi	r26, 0x53	; 83
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e3 e5       	ldi	r30, 0x53	; 83
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	90 81       	ld	r25, Z
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	89 2b       	or	r24, r25
    1750:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
	*/
}
    1752:	0f 90       	pop	r0
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <M_void_Timer_stop>:
void M_void_Timer_stop(void)
{
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= CLEAR_PRESCALLER_MASK;
    1762:	a3 e5       	ldi	r26, 0x53	; 83
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e3 e5       	ldi	r30, 0x53	; 83
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	88 7f       	andi	r24, 0xF8	; 248
    176e:	8c 93       	st	X, r24
	TCCR0 |= NO_CLK_SOURCE;
    1770:	a3 e5       	ldi	r26, 0x53	; 83
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e3 e5       	ldi	r30, 0x53	; 83
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	8c 93       	st	X, r24
}
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <Timer_u8__GetCounts>:

u8 Timer_u8__GetCounts(void)
{
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    178a:	e2 e5       	ldi	r30, 0x52	; 82
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
}
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	08 95       	ret

00001796 <M_void_Timer_Set_Preload>:
void M_void_Timer_Set_Preload(u8 Pre_load)
{
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	0f 92       	push	r0
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
    17a0:	89 83       	std	Y+1, r24	; 0x01
	TCNT0= Pre_load;
    17a2:	e2 e5       	ldi	r30, 0x52	; 82
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	80 83       	st	Z, r24
}
    17aa:	0f 90       	pop	r0
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <M_TIMER0_setDelayTimeMilliSec>:

void M_TIMER0_setDelayTimeMilliSec(u32 Local_DelayTime, Timer_Mode Local_Mode, PRE_SCALLER Local_Prescaller)
{
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
    17ba:	ac 97       	sbiw	r28, 0x2c	; 44
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	de bf       	out	0x3e, r29	; 62
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	cd bf       	out	0x3d, r28	; 61
    17c6:	6a a3       	std	Y+34, r22	; 0x22
    17c8:	7b a3       	std	Y+35, r23	; 0x23
    17ca:	8c a3       	std	Y+36, r24	; 0x24
    17cc:	9d a3       	std	Y+37, r25	; 0x25
    17ce:	4e a3       	std	Y+38, r20	; 0x26
    17d0:	2f a3       	std	Y+39, r18	; 0x27
	/*		*/
	u32 Pre_scallers[5]={1,8,64,256,1024};
    17d2:	ce 01       	movw	r24, r28
    17d4:	0e 96       	adiw	r24, 0x0e	; 14
    17d6:	99 a7       	std	Y+41, r25	; 0x29
    17d8:	88 a7       	std	Y+40, r24	; 0x28
    17da:	e3 eb       	ldi	r30, 0xB3	; 179
    17dc:	f1 e0       	ldi	r31, 0x01	; 1
    17de:	fb a7       	std	Y+43, r31	; 0x2b
    17e0:	ea a7       	std	Y+42, r30	; 0x2a
    17e2:	f4 e1       	ldi	r31, 0x14	; 20
    17e4:	fc a7       	std	Y+44, r31	; 0x2c
    17e6:	ea a5       	ldd	r30, Y+42	; 0x2a
    17e8:	fb a5       	ldd	r31, Y+43	; 0x2b
    17ea:	00 80       	ld	r0, Z
    17ec:	8a a5       	ldd	r24, Y+42	; 0x2a
    17ee:	9b a5       	ldd	r25, Y+43	; 0x2b
    17f0:	01 96       	adiw	r24, 0x01	; 1
    17f2:	9b a7       	std	Y+43, r25	; 0x2b
    17f4:	8a a7       	std	Y+42, r24	; 0x2a
    17f6:	e8 a5       	ldd	r30, Y+40	; 0x28
    17f8:	f9 a5       	ldd	r31, Y+41	; 0x29
    17fa:	00 82       	st	Z, r0
    17fc:	88 a5       	ldd	r24, Y+40	; 0x28
    17fe:	99 a5       	ldd	r25, Y+41	; 0x29
    1800:	01 96       	adiw	r24, 0x01	; 1
    1802:	99 a7       	std	Y+41, r25	; 0x29
    1804:	88 a7       	std	Y+40, r24	; 0x28
    1806:	9c a5       	ldd	r25, Y+44	; 0x2c
    1808:	91 50       	subi	r25, 0x01	; 1
    180a:	9c a7       	std	Y+44, r25	; 0x2c
    180c:	ec a5       	ldd	r30, Y+44	; 0x2c
    180e:	ee 23       	and	r30, r30
    1810:	51 f7       	brne	.-44     	; 0x17e6 <M_TIMER0_setDelayTimeMilliSec+0x34>
	f32 TickTime = (f32)Pre_scallers[Local_Prescaller-1]/ F_CPU;
    1812:	8f a1       	ldd	r24, Y+39	; 0x27
    1814:	88 2f       	mov	r24, r24
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	9c 01       	movw	r18, r24
    181c:	22 0f       	add	r18, r18
    181e:	33 1f       	adc	r19, r19
    1820:	22 0f       	add	r18, r18
    1822:	33 1f       	adc	r19, r19
    1824:	ce 01       	movw	r24, r28
    1826:	01 96       	adiw	r24, 0x01	; 1
    1828:	82 0f       	add	r24, r18
    182a:	93 1f       	adc	r25, r19
    182c:	fc 01       	movw	r30, r24
    182e:	3d 96       	adiw	r30, 0x0d	; 13
    1830:	80 81       	ld	r24, Z
    1832:	91 81       	ldd	r25, Z+1	; 0x01
    1834:	a2 81       	ldd	r26, Z+2	; 0x02
    1836:	b3 81       	ldd	r27, Z+3	; 0x03
    1838:	bc 01       	movw	r22, r24
    183a:	cd 01       	movw	r24, r26
    183c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	bc 01       	movw	r22, r24
    1846:	cd 01       	movw	r24, r26
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	40 e8       	ldi	r20, 0x80	; 128
    184e:	51 e4       	ldi	r21, 0x41	; 65
    1850:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	8a 87       	std	Y+10, r24	; 0x0a
    185a:	9b 87       	std	Y+11, r25	; 0x0b
    185c:	ac 87       	std	Y+12, r26	; 0x0c
    185e:	bd 87       	std	Y+13, r27	; 0x0d
	u32 DesiredTickS = 0;
    1860:	1e 82       	std	Y+6, r1	; 0x06
    1862:	1f 82       	std	Y+7, r1	; 0x07
    1864:	18 86       	std	Y+8, r1	; 0x08
    1866:	19 86       	std	Y+9, r1	; 0x09
	u32 CTC_Value = 0 ;
    1868:	1a 82       	std	Y+2, r1	; 0x02
    186a:	1b 82       	std	Y+3, r1	; 0x03
    186c:	1c 82       	std	Y+4, r1	; 0x04
    186e:	1d 82       	std	Y+5, r1	; 0x05
	/* Calculate the desired Tick*/
	 //DesiredTickS = (f32)Local_DelayTime * 1000 / TickTime ;
	 DesiredTickS = (Local_DelayTime*1000000)/TickTime ;
    1870:	8a a1       	ldd	r24, Y+34	; 0x22
    1872:	9b a1       	ldd	r25, Y+35	; 0x23
    1874:	ac a1       	ldd	r26, Y+36	; 0x24
    1876:	bd a1       	ldd	r27, Y+37	; 0x25
    1878:	20 e4       	ldi	r18, 0x40	; 64
    187a:	32 e4       	ldi	r19, 0x42	; 66
    187c:	4f e0       	ldi	r20, 0x0F	; 15
    187e:	50 e0       	ldi	r21, 0x00	; 0
    1880:	bc 01       	movw	r22, r24
    1882:	cd 01       	movw	r24, r26
    1884:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__mulsi3>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	bc 01       	movw	r22, r24
    188e:	cd 01       	movw	r24, r26
    1890:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	bc 01       	movw	r22, r24
    189a:	cd 01       	movw	r24, r26
    189c:	2a 85       	ldd	r18, Y+10	; 0x0a
    189e:	3b 85       	ldd	r19, Y+11	; 0x0b
    18a0:	4c 85       	ldd	r20, Y+12	; 0x0c
    18a2:	5d 85       	ldd	r21, Y+13	; 0x0d
    18a4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	bc 01       	movw	r22, r24
    18ae:	cd 01       	movw	r24, r26
    18b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b4:	dc 01       	movw	r26, r24
    18b6:	cb 01       	movw	r24, r22
    18b8:	8e 83       	std	Y+6, r24	; 0x06
    18ba:	9f 83       	std	Y+7, r25	; 0x07
    18bc:	a8 87       	std	Y+8, r26	; 0x08
    18be:	b9 87       	std	Y+9, r27	; 0x09

	 H_LCD_void_sendIntNum(DesiredTickS);
    18c0:	8e 81       	ldd	r24, Y+6	; 0x06
    18c2:	9f 81       	ldd	r25, Y+7	; 0x07
    18c4:	a8 85       	ldd	r26, Y+8	; 0x08
    18c6:	b9 85       	ldd	r27, Y+9	; 0x09
    18c8:	bc 01       	movw	r22, r24
    18ca:	cd 01       	movw	r24, r26
    18cc:	0e 94 88 1c 	call	0x3910	; 0x3910 <H_LCD_void_sendIntNum>

	if(Local_Mode == Normal_Mode)
    18d0:	8e a1       	ldd	r24, Y+38	; 0x26
    18d2:	88 23       	and	r24, r24
    18d4:	09 f0       	breq	.+2      	; 0x18d8 <M_TIMER0_setDelayTimeMilliSec+0x126>
    18d6:	56 c0       	rjmp	.+172    	; 0x1984 <M_TIMER0_setDelayTimeMilliSec+0x1d2>
	{
		 /*Store the numbers of over flow */
		 No_of_over_flows = DesiredTickS/ 256 ;
    18d8:	8e 81       	ldd	r24, Y+6	; 0x06
    18da:	9f 81       	ldd	r25, Y+7	; 0x07
    18dc:	a8 85       	ldd	r26, Y+8	; 0x08
    18de:	b9 85       	ldd	r27, Y+9	; 0x09
    18e0:	89 2f       	mov	r24, r25
    18e2:	9a 2f       	mov	r25, r26
    18e4:	ab 2f       	mov	r26, r27
    18e6:	bb 27       	eor	r27, r27
    18e8:	80 93 58 02 	sts	0x0258, r24
    18ec:	90 93 59 02 	sts	0x0259, r25
    18f0:	a0 93 5a 02 	sts	0x025A, r26
    18f4:	b0 93 5b 02 	sts	0x025B, r27
		 /* Store the Number of remaining if found */
		 No_of_Remaning = DesiredTickS % 256;
    18f8:	8e 81       	ldd	r24, Y+6	; 0x06
    18fa:	80 93 5c 02 	sts	0x025C, r24
		 /*if there is remaining then start from it */
		 if(DesiredTickS % 256 != 0)
    18fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1900:	9f 81       	ldd	r25, Y+7	; 0x07
    1902:	a8 85       	ldd	r26, Y+8	; 0x08
    1904:	b9 85       	ldd	r27, Y+9	; 0x09
    1906:	90 70       	andi	r25, 0x00	; 0
    1908:	a0 70       	andi	r26, 0x00	; 0
    190a:	b0 70       	andi	r27, 0x00	; 0
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	a1 05       	cpc	r26, r1
    1910:	b1 05       	cpc	r27, r1
    1912:	59 f1       	breq	.+86     	; 0x196a <M_TIMER0_setDelayTimeMilliSec+0x1b8>
		 {
			 TCNT0 = 256 - No_of_Remaning ;
    1914:	e2 e5       	ldi	r30, 0x52	; 82
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 91 5c 02 	lds	r24, 0x025C
    191c:	81 95       	neg	r24
    191e:	80 83       	st	Z, r24
			 No_of_over_flows ++ ;
    1920:	80 91 58 02 	lds	r24, 0x0258
    1924:	90 91 59 02 	lds	r25, 0x0259
    1928:	a0 91 5a 02 	lds	r26, 0x025A
    192c:	b0 91 5b 02 	lds	r27, 0x025B
    1930:	01 96       	adiw	r24, 0x01	; 1
    1932:	a1 1d       	adc	r26, r1
    1934:	b1 1d       	adc	r27, r1
    1936:	80 93 58 02 	sts	0x0258, r24
    193a:	90 93 59 02 	sts	0x0259, r25
    193e:	a0 93 5a 02 	sts	0x025A, r26
    1942:	b0 93 5b 02 	sts	0x025B, r27
			 H_LCD_void_gotoXY(2,0);
    1946:	82 e0       	ldi	r24, 0x02	; 2
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	60 e0       	ldi	r22, 0x00	; 0
    194c:	70 e0       	ldi	r23, 0x00	; 0
    194e:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <H_LCD_void_gotoXY>
			 H_LCD_void_sendIntNum(No_of_over_flows);
    1952:	80 91 58 02 	lds	r24, 0x0258
    1956:	90 91 59 02 	lds	r25, 0x0259
    195a:	a0 91 5a 02 	lds	r26, 0x025A
    195e:	b0 91 5b 02 	lds	r27, 0x025B
    1962:	bc 01       	movw	r22, r24
    1964:	cd 01       	movw	r24, r26
    1966:	0e 94 88 1c 	call	0x3910	; 0x3910 <H_LCD_void_sendIntNum>
		 }

		 H_LCD_void_gotoXY(2,10);
    196a:	82 e0       	ldi	r24, 0x02	; 2
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	6a e0       	ldi	r22, 0x0A	; 10
    1970:	70 e0       	ldi	r23, 0x00	; 0
    1972:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <H_LCD_void_gotoXY>
		 H_LCD_void_sendIntNum(No_of_Remaning);
    1976:	80 91 5c 02 	lds	r24, 0x025C
    197a:	88 2f       	mov	r24, r24
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	0e 94 88 1c 	call	0x3910	; 0x3910 <H_LCD_void_sendIntNum>
    1982:	3d c0       	rjmp	.+122    	; 0x19fe <M_TIMER0_setDelayTimeMilliSec+0x24c>
	}
	else if(Local_Mode == CTC_Mode)
    1984:	8e a1       	ldd	r24, Y+38	; 0x26
    1986:	81 30       	cpi	r24, 0x01	; 1
    1988:	d1 f5       	brne	.+116    	; 0x19fe <M_TIMER0_setDelayTimeMilliSec+0x24c>
	{
		CTC_Value = 255 ;
    198a:	8f ef       	ldi	r24, 0xFF	; 255
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	a0 e0       	ldi	r26, 0x00	; 0
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	8a 83       	std	Y+2, r24	; 0x02
    1994:	9b 83       	std	Y+3, r25	; 0x03
    1996:	ac 83       	std	Y+4, r26	; 0x04
    1998:	bd 83       	std	Y+5, r27	; 0x05
		u8 NoOfCompMatch = 0;
    199a:	19 82       	std	Y+1, r1	; 0x01
    199c:	0b c0       	rjmp	.+22     	; 0x19b4 <M_TIMER0_setDelayTimeMilliSec+0x202>

		while(DesiredTickS % CTC_Value)
		{
			CTC_Value -- ;
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	9b 81       	ldd	r25, Y+3	; 0x03
    19a2:	ac 81       	ldd	r26, Y+4	; 0x04
    19a4:	bd 81       	ldd	r27, Y+5	; 0x05
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	a1 09       	sbc	r26, r1
    19aa:	b1 09       	sbc	r27, r1
    19ac:	8a 83       	std	Y+2, r24	; 0x02
    19ae:	9b 83       	std	Y+3, r25	; 0x03
    19b0:	ac 83       	std	Y+4, r26	; 0x04
    19b2:	bd 83       	std	Y+5, r27	; 0x05
	else if(Local_Mode == CTC_Mode)
	{
		CTC_Value = 255 ;
		u8 NoOfCompMatch = 0;

		while(DesiredTickS % CTC_Value)
    19b4:	8e 81       	ldd	r24, Y+6	; 0x06
    19b6:	9f 81       	ldd	r25, Y+7	; 0x07
    19b8:	a8 85       	ldd	r26, Y+8	; 0x08
    19ba:	b9 85       	ldd	r27, Y+9	; 0x09
    19bc:	2a 81       	ldd	r18, Y+2	; 0x02
    19be:	3b 81       	ldd	r19, Y+3	; 0x03
    19c0:	4c 81       	ldd	r20, Y+4	; 0x04
    19c2:	5d 81       	ldd	r21, Y+5	; 0x05
    19c4:	bc 01       	movw	r22, r24
    19c6:	cd 01       	movw	r24, r26
    19c8:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <__udivmodsi4>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	a1 05       	cpc	r26, r1
    19d4:	b1 05       	cpc	r27, r1
    19d6:	19 f7       	brne	.-58     	; 0x199e <M_TIMER0_setDelayTimeMilliSec+0x1ec>
		{
			CTC_Value -- ;
		}
		NoOfCompMatch = DesiredTickS % CTC_Value ;
    19d8:	8e 81       	ldd	r24, Y+6	; 0x06
    19da:	9f 81       	ldd	r25, Y+7	; 0x07
    19dc:	a8 85       	ldd	r26, Y+8	; 0x08
    19de:	b9 85       	ldd	r27, Y+9	; 0x09
    19e0:	2a 81       	ldd	r18, Y+2	; 0x02
    19e2:	3b 81       	ldd	r19, Y+3	; 0x03
    19e4:	4c 81       	ldd	r20, Y+4	; 0x04
    19e6:	5d 81       	ldd	r21, Y+5	; 0x05
    19e8:	bc 01       	movw	r22, r24
    19ea:	cd 01       	movw	r24, r26
    19ec:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <__udivmodsi4>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	89 83       	std	Y+1, r24	; 0x01
		OCR0 = NoOfCompMatch;
    19f6:	ec e5       	ldi	r30, 0x5C	; 92
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	80 83       	st	Z, r24
	}
	else if(Local_Mode == Fast_PWM)
	{

	}
	M_void_Timer_start(Local_Prescaller);
    19fe:	8f a1       	ldd	r24, Y+39	; 0x27
    1a00:	0e 94 94 0b 	call	0x1728	; 0x1728 <M_void_Timer_start>
}
    1a04:	ac 96       	adiw	r28, 0x2c	; 44
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	f8 94       	cli
    1a0a:	de bf       	out	0x3e, r29	; 62
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	cd bf       	out	0x3d, r28	; 61
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	08 95       	ret

00001a16 <M_void_EnableTIMERInt>:

void M_void_EnableTIMERInt(Timer_Mode T_MODE)
{
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	00 d0       	rcall	.+0      	; 0x1a1c <M_void_EnableTIMERInt+0x6>
    1a1c:	0f 92       	push	r0
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
    1a22:	89 83       	std	Y+1, r24	; 0x01
	switch(T_MODE)
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	3b 83       	std	Y+3, r19	; 0x03
    1a2c:	2a 83       	std	Y+2, r18	; 0x02
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	9b 81       	ldd	r25, Y+3	; 0x03
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	31 f0       	breq	.+12     	; 0x1a42 <M_void_EnableTIMERInt+0x2c>
    1a36:	2a 81       	ldd	r18, Y+2	; 0x02
    1a38:	3b 81       	ldd	r19, Y+3	; 0x03
    1a3a:	21 30       	cpi	r18, 0x01	; 1
    1a3c:	31 05       	cpc	r19, r1
    1a3e:	81 f0       	breq	.+32     	; 0x1a60 <M_void_EnableTIMERInt+0x4a>
    1a40:	1d c0       	rjmp	.+58     	; 0x1a7c <M_void_EnableTIMERInt+0x66>
	{
	case Normal_Mode:
		TIMSK &= NORMAL_MODE_INTERRUPT_CLEAR;
    1a42:	a9 e5       	ldi	r26, 0x59	; 89
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e9 e5       	ldi	r30, 0x59	; 89
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	8e 7f       	andi	r24, 0xFE	; 254
    1a4e:	8c 93       	st	X, r24
		TIMSK |= NORMAL_MODE_INTERRUPT_SET;
    1a50:	a9 e5       	ldi	r26, 0x59	; 89
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e9 e5       	ldi	r30, 0x59	; 89
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	81 60       	ori	r24, 0x01	; 1
    1a5c:	8c 93       	st	X, r24
    1a5e:	0e c0       	rjmp	.+28     	; 0x1a7c <M_void_EnableTIMERInt+0x66>
		break;
	case CTC_Mode:
		TIMSK &= CTC_MODE_INTERRUPT_CLEAR;
    1a60:	a9 e5       	ldi	r26, 0x59	; 89
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e9 e5       	ldi	r30, 0x59	; 89
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	8d 7f       	andi	r24, 0xFD	; 253
    1a6c:	8c 93       	st	X, r24
		TIMSK |= CTC_MODE_INTERRUPT_SET;
    1a6e:	a9 e5       	ldi	r26, 0x59	; 89
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	e9 e5       	ldi	r30, 0x59	; 89
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	82 60       	ori	r24, 0x02	; 2
    1a7a:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	cf 91       	pop	r28
    1a84:	df 91       	pop	r29
    1a86:	08 95       	ret

00001a88 <M_void_DisableTIMERInt>:
void M_void_DisableTIMERInt(Timer_Mode T_MODE)
{
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	00 d0       	rcall	.+0      	; 0x1a8e <M_void_DisableTIMERInt+0x6>
    1a8e:	0f 92       	push	r0
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	89 83       	std	Y+1, r24	; 0x01
	switch(T_MODE)
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	3b 83       	std	Y+3, r19	; 0x03
    1a9e:	2a 83       	std	Y+2, r18	; 0x02
    1aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa2:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa4:	00 97       	sbiw	r24, 0x00	; 0
    1aa6:	31 f0       	breq	.+12     	; 0x1ab4 <M_void_DisableTIMERInt+0x2c>
    1aa8:	2a 81       	ldd	r18, Y+2	; 0x02
    1aaa:	3b 81       	ldd	r19, Y+3	; 0x03
    1aac:	21 30       	cpi	r18, 0x01	; 1
    1aae:	31 05       	cpc	r19, r1
    1ab0:	79 f0       	breq	.+30     	; 0x1ad0 <M_void_DisableTIMERInt+0x48>
    1ab2:	1b c0       	rjmp	.+54     	; 0x1aea <M_void_DisableTIMERInt+0x62>
	{
	case Normal_Mode:
		TIMSK &= NORMAL_MODE_INTERRUPT_CLEAR;
    1ab4:	a9 e5       	ldi	r26, 0x59	; 89
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e9 e5       	ldi	r30, 0x59	; 89
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	8e 7f       	andi	r24, 0xFE	; 254
    1ac0:	8c 93       	st	X, r24
		TIMSK |= NORMAL_MODE_INTERRUPT_RESET;
    1ac2:	a9 e5       	ldi	r26, 0x59	; 89
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e9 e5       	ldi	r30, 0x59	; 89
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	8c 93       	st	X, r24
    1ace:	0d c0       	rjmp	.+26     	; 0x1aea <M_void_DisableTIMERInt+0x62>
		break;
	case CTC_Mode:
		TIMSK &= CTC_MODE_INTERRUPT_CLEAR;
    1ad0:	a9 e5       	ldi	r26, 0x59	; 89
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e9 e5       	ldi	r30, 0x59	; 89
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	8d 7f       	andi	r24, 0xFD	; 253
    1adc:	8c 93       	st	X, r24
		TIMSK |= CTC_MODE_INTERRUPT_RESET;
    1ade:	a9 e5       	ldi	r26, 0x59	; 89
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e9 e5       	ldi	r30, 0x59	; 89
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <M_void_setCallBack>:

void M_void_setCallBack(Timer_Mode T_MODE,void (*Copy_pvINTFunc)(void))
{
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	00 d0       	rcall	.+0      	; 0x1afc <M_void_setCallBack+0x6>
    1afc:	00 d0       	rcall	.+0      	; 0x1afe <M_void_setCallBack+0x8>
    1afe:	0f 92       	push	r0
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	89 83       	std	Y+1, r24	; 0x01
    1b06:	7b 83       	std	Y+3, r23	; 0x03
    1b08:	6a 83       	std	Y+2, r22	; 0x02
	//u8 Local_u8ErrorStatus=NO_ERROR;
//	u8 Local_u8counter;
	switch(T_MODE)
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	28 2f       	mov	r18, r24
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	3d 83       	std	Y+5, r19	; 0x05
    1b12:	2c 83       	std	Y+4, r18	; 0x04
    1b14:	8c 81       	ldd	r24, Y+4	; 0x04
    1b16:	9d 81       	ldd	r25, Y+5	; 0x05
    1b18:	00 97       	sbiw	r24, 0x00	; 0
    1b1a:	31 f0       	breq	.+12     	; 0x1b28 <M_void_setCallBack+0x32>
    1b1c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b1e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b20:	21 30       	cpi	r18, 0x01	; 1
    1b22:	31 05       	cpc	r19, r1
    1b24:	61 f0       	breq	.+24     	; 0x1b3e <M_void_setCallBack+0x48>
    1b26:	15 c0       	rjmp	.+42     	; 0x1b52 <M_void_setCallBack+0x5c>
	{
	case Normal_Mode:
		if(Copy_pvINTFunc!= NULL)
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b2c:	00 97       	sbiw	r24, 0x00	; 0
    1b2e:	89 f0       	breq	.+34     	; 0x1b52 <M_void_setCallBack+0x5c>
		{
			EXTI_ARRCALLBACK2FUNC[0]=Copy_pvINTFunc;
    1b30:	8a 81       	ldd	r24, Y+2	; 0x02
    1b32:	9b 81       	ldd	r25, Y+3	; 0x03
    1b34:	90 93 55 02 	sts	0x0255, r25
    1b38:	80 93 54 02 	sts	0x0254, r24
    1b3c:	0a c0       	rjmp	.+20     	; 0x1b52 <M_void_setCallBack+0x5c>
		}
		break;
	case CTC_Mode:
		if(Copy_pvINTFunc!= NULL)
    1b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b40:	9b 81       	ldd	r25, Y+3	; 0x03
    1b42:	00 97       	sbiw	r24, 0x00	; 0
    1b44:	31 f0       	breq	.+12     	; 0x1b52 <M_void_setCallBack+0x5c>
		{
			EXTI_ARRCALLBACK2FUNC[1]=Copy_pvINTFunc;
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	9b 81       	ldd	r25, Y+3	; 0x03
    1b4a:	90 93 57 02 	sts	0x0257, r25
    1b4e:	80 93 56 02 	sts	0x0256, r24
		}
		break;
	}
}
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	08 95       	ret

00001b62 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    1b62:	1f 92       	push	r1
    1b64:	0f 92       	push	r0
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	0f 92       	push	r0
    1b6a:	11 24       	eor	r1, r1
    1b6c:	2f 93       	push	r18
    1b6e:	3f 93       	push	r19
    1b70:	4f 93       	push	r20
    1b72:	5f 93       	push	r21
    1b74:	6f 93       	push	r22
    1b76:	7f 93       	push	r23
    1b78:	8f 93       	push	r24
    1b7a:	9f 93       	push	r25
    1b7c:	af 93       	push	r26
    1b7e:	bf 93       	push	r27
    1b80:	ef 93       	push	r30
    1b82:	ff 93       	push	r31
    1b84:	df 93       	push	r29
    1b86:	cf 93       	push	r28
    1b88:	cd b7       	in	r28, 0x3d	; 61
    1b8a:	de b7       	in	r29, 0x3e	; 62
	Global_No_of_overflows++;
    1b8c:	80 91 5d 02 	lds	r24, 0x025D
    1b90:	90 91 5e 02 	lds	r25, 0x025E
    1b94:	a0 91 5f 02 	lds	r26, 0x025F
    1b98:	b0 91 60 02 	lds	r27, 0x0260
    1b9c:	01 96       	adiw	r24, 0x01	; 1
    1b9e:	a1 1d       	adc	r26, r1
    1ba0:	b1 1d       	adc	r27, r1
    1ba2:	80 93 5d 02 	sts	0x025D, r24
    1ba6:	90 93 5e 02 	sts	0x025E, r25
    1baa:	a0 93 5f 02 	sts	0x025F, r26
    1bae:	b0 93 60 02 	sts	0x0260, r27
	if(EXTI_ARRCALLBACK2FUNC[0]!=NULL)
    1bb2:	80 91 54 02 	lds	r24, 0x0254
    1bb6:	90 91 55 02 	lds	r25, 0x0255
    1bba:	00 97       	sbiw	r24, 0x00	; 0
    1bbc:	41 f1       	breq	.+80     	; 0x1c0e <__vector_11+0xac>
	{
		if(Global_No_of_overflows==No_of_over_flows)
    1bbe:	20 91 5d 02 	lds	r18, 0x025D
    1bc2:	30 91 5e 02 	lds	r19, 0x025E
    1bc6:	40 91 5f 02 	lds	r20, 0x025F
    1bca:	50 91 60 02 	lds	r21, 0x0260
    1bce:	80 91 58 02 	lds	r24, 0x0258
    1bd2:	90 91 59 02 	lds	r25, 0x0259
    1bd6:	a0 91 5a 02 	lds	r26, 0x025A
    1bda:	b0 91 5b 02 	lds	r27, 0x025B
    1bde:	28 17       	cp	r18, r24
    1be0:	39 07       	cpc	r19, r25
    1be2:	4a 07       	cpc	r20, r26
    1be4:	5b 07       	cpc	r21, r27
    1be6:	99 f4       	brne	.+38     	; 0x1c0e <__vector_11+0xac>
		{
			EXTI_ARRCALLBACK2FUNC[0]();
    1be8:	e0 91 54 02 	lds	r30, 0x0254
    1bec:	f0 91 55 02 	lds	r31, 0x0255
    1bf0:	09 95       	icall
			Global_No_of_overflows=0;
    1bf2:	10 92 5d 02 	sts	0x025D, r1
    1bf6:	10 92 5e 02 	sts	0x025E, r1
    1bfa:	10 92 5f 02 	sts	0x025F, r1
    1bfe:	10 92 60 02 	sts	0x0260, r1
			TCNT0 = 256 - No_of_Remaning;
    1c02:	e2 e5       	ldi	r30, 0x52	; 82
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 91 5c 02 	lds	r24, 0x025C
    1c0a:	81 95       	neg	r24
    1c0c:	80 83       	st	Z, r24
		}
	}

}
    1c0e:	cf 91       	pop	r28
    1c10:	df 91       	pop	r29
    1c12:	ff 91       	pop	r31
    1c14:	ef 91       	pop	r30
    1c16:	bf 91       	pop	r27
    1c18:	af 91       	pop	r26
    1c1a:	9f 91       	pop	r25
    1c1c:	8f 91       	pop	r24
    1c1e:	7f 91       	pop	r23
    1c20:	6f 91       	pop	r22
    1c22:	5f 91       	pop	r21
    1c24:	4f 91       	pop	r20
    1c26:	3f 91       	pop	r19
    1c28:	2f 91       	pop	r18
    1c2a:	0f 90       	pop	r0
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	0f 90       	pop	r0
    1c30:	1f 90       	pop	r1
    1c32:	18 95       	reti

00001c34 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
    1c34:	1f 92       	push	r1
    1c36:	0f 92       	push	r0
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	0f 92       	push	r0
    1c3c:	11 24       	eor	r1, r1
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62

}
    1c46:	cf 91       	pop	r28
    1c48:	df 91       	pop	r29
    1c4a:	0f 90       	pop	r0
    1c4c:	0f be       	out	0x3f, r0	; 63
    1c4e:	0f 90       	pop	r0
    1c50:	1f 90       	pop	r1
    1c52:	18 95       	reti

00001c54 <Port_Init>:
  parameters (in)  :
  parameters (out) : none
  Return Value     : void
******************************************/
void Port_Init(const Port_ConfigType * ConfigPtr)
{
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	2b 97       	sbiw	r28, 0x0b	; 11
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	f8 94       	cli
    1c62:	de bf       	out	0x3e, r29	; 62
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	cd bf       	out	0x3d, r28	; 61
    1c68:	9d 83       	std	Y+5, r25	; 0x05
    1c6a:	8c 83       	std	Y+4, r24	; 0x04

	if(ConfigPtr == NULL)
    1c6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	09 f4       	brne	.+2      	; 0x1c76 <Port_Init+0x22>
    1c74:	51 c2       	rjmp	.+1186   	; 0x2118 <Port_Init+0x4c4>
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<PORT_PINS_CONFIG_ARR_SIZE;i++)
    1c76:	1b 82       	std	Y+3, r1	; 0x03
    1c78:	4b c2       	rjmp	.+1174   	; 0x2110 <Port_Init+0x4bc>
			{
				Local_pin =(ConfigPtr[i].Port_PinNumber)%10 ;
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	88 2f       	mov	r24, r24
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	9c 01       	movw	r18, r24
    1c82:	22 0f       	add	r18, r18
    1c84:	33 1f       	adc	r19, r19
    1c86:	22 0f       	add	r18, r18
    1c88:	33 1f       	adc	r19, r19
    1c8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c8e:	fc 01       	movw	r30, r24
    1c90:	e2 0f       	add	r30, r18
    1c92:	f3 1f       	adc	r31, r19
    1c94:	80 81       	ld	r24, Z
    1c96:	9a e0       	ldi	r25, 0x0A	; 10
    1c98:	69 2f       	mov	r22, r25
    1c9a:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <__udivmodqi4>
    1c9e:	89 2f       	mov	r24, r25
    1ca0:	8a 83       	std	Y+2, r24	; 0x02
				Local_port =(ConfigPtr[i].Port_PinNumber)/10 ;
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	88 2f       	mov	r24, r24
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	9c 01       	movw	r18, r24
    1caa:	22 0f       	add	r18, r18
    1cac:	33 1f       	adc	r19, r19
    1cae:	22 0f       	add	r18, r18
    1cb0:	33 1f       	adc	r19, r19
    1cb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	e2 0f       	add	r30, r18
    1cba:	f3 1f       	adc	r31, r19
    1cbc:	80 81       	ld	r24, Z
    1cbe:	9a e0       	ldi	r25, 0x0A	; 10
    1cc0:	69 2f       	mov	r22, r25
    1cc2:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <__udivmodqi4>
    1cc6:	89 83       	std	Y+1, r24	; 0x01
				// step1 : set direction
				if(ConfigPtr[i].Port_PinDirection == PORT_PINDIR_INPUT || ConfigPtr[i].Port_PinDirection ==PORT_PINDIR_OUTPUT)
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	88 2f       	mov	r24, r24
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	9c 01       	movw	r18, r24
    1cd0:	22 0f       	add	r18, r18
    1cd2:	33 1f       	adc	r19, r19
    1cd4:	22 0f       	add	r18, r18
    1cd6:	33 1f       	adc	r19, r19
    1cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cda:	9d 81       	ldd	r25, Y+5	; 0x05
    1cdc:	fc 01       	movw	r30, r24
    1cde:	e2 0f       	add	r30, r18
    1ce0:	f3 1f       	adc	r31, r19
    1ce2:	82 81       	ldd	r24, Z+2	; 0x02
    1ce4:	88 23       	and	r24, r24
    1ce6:	89 f0       	breq	.+34     	; 0x1d0a <Port_Init+0xb6>
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	88 2f       	mov	r24, r24
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	9c 01       	movw	r18, r24
    1cf0:	22 0f       	add	r18, r18
    1cf2:	33 1f       	adc	r19, r19
    1cf4:	22 0f       	add	r18, r18
    1cf6:	33 1f       	adc	r19, r19
    1cf8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfa:	9d 81       	ldd	r25, Y+5	; 0x05
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	e2 0f       	add	r30, r18
    1d00:	f3 1f       	adc	r31, r19
    1d02:	82 81       	ldd	r24, Z+2	; 0x02
    1d04:	81 30       	cpi	r24, 0x01	; 1
    1d06:	09 f0       	breq	.+2      	; 0x1d0a <Port_Init+0xb6>
    1d08:	00 c2       	rjmp	.+1024   	; 0x210a <Port_Init+0x4b6>
				{
					switch(Local_port)
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	3b 87       	std	Y+11, r19	; 0x0b
    1d12:	2a 87       	std	Y+10, r18	; 0x0a
    1d14:	6a 85       	ldd	r22, Y+10	; 0x0a
    1d16:	7b 85       	ldd	r23, Y+11	; 0x0b
    1d18:	62 30       	cpi	r22, 0x02	; 2
    1d1a:	71 05       	cpc	r23, r1
    1d1c:	d1 f1       	breq	.+116    	; 0x1d92 <Port_Init+0x13e>
    1d1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d20:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d22:	83 30       	cpi	r24, 0x03	; 3
    1d24:	91 05       	cpc	r25, r1
    1d26:	34 f4       	brge	.+12     	; 0x1d34 <Port_Init+0xe0>
    1d28:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d2a:	3b 85       	ldd	r19, Y+11	; 0x0b
    1d2c:	21 30       	cpi	r18, 0x01	; 1
    1d2e:	31 05       	cpc	r19, r1
    1d30:	71 f0       	breq	.+28     	; 0x1d4e <Port_Init+0xfa>
    1d32:	94 c0       	rjmp	.+296    	; 0x1e5c <Port_Init+0x208>
    1d34:	6a 85       	ldd	r22, Y+10	; 0x0a
    1d36:	7b 85       	ldd	r23, Y+11	; 0x0b
    1d38:	63 30       	cpi	r22, 0x03	; 3
    1d3a:	71 05       	cpc	r23, r1
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <Port_Init+0xec>
    1d3e:	4b c0       	rjmp	.+150    	; 0x1dd6 <Port_Init+0x182>
    1d40:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d42:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d44:	84 30       	cpi	r24, 0x04	; 4
    1d46:	91 05       	cpc	r25, r1
    1d48:	09 f4       	brne	.+2      	; 0x1d4c <Port_Init+0xf8>
    1d4a:	67 c0       	rjmp	.+206    	; 0x1e1a <Port_Init+0x1c6>
    1d4c:	87 c0       	rjmp	.+270    	; 0x1e5c <Port_Init+0x208>
					{
					case PORT_PORTA:DDRA_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1d4e:	aa e3       	ldi	r26, 0x3A	; 58
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	ea e3       	ldi	r30, 0x3A	; 58
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	40 81       	ld	r20, Z
    1d58:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5a:	88 2f       	mov	r24, r24
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	9c 01       	movw	r18, r24
    1d60:	22 0f       	add	r18, r18
    1d62:	33 1f       	adc	r19, r19
    1d64:	22 0f       	add	r18, r18
    1d66:	33 1f       	adc	r19, r19
    1d68:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	e2 0f       	add	r30, r18
    1d70:	f3 1f       	adc	r31, r19
    1d72:	82 81       	ldd	r24, Z+2	; 0x02
    1d74:	28 2f       	mov	r18, r24
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	88 2f       	mov	r24, r24
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	b9 01       	movw	r22, r18
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <Port_Init+0x132>
    1d82:	66 0f       	add	r22, r22
    1d84:	77 1f       	adc	r23, r23
    1d86:	8a 95       	dec	r24
    1d88:	e2 f7       	brpl	.-8      	; 0x1d82 <Port_Init+0x12e>
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	84 2b       	or	r24, r20
    1d8e:	8c 93       	st	X, r24
    1d90:	65 c0       	rjmp	.+202    	; 0x1e5c <Port_Init+0x208>
					case PORT_PORTB:DDRB_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1d92:	a7 e3       	ldi	r26, 0x37	; 55
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e7 e3       	ldi	r30, 0x37	; 55
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	40 81       	ld	r20, Z
    1d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9e:	88 2f       	mov	r24, r24
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	9c 01       	movw	r18, r24
    1da4:	22 0f       	add	r18, r18
    1da6:	33 1f       	adc	r19, r19
    1da8:	22 0f       	add	r18, r18
    1daa:	33 1f       	adc	r19, r19
    1dac:	8c 81       	ldd	r24, Y+4	; 0x04
    1dae:	9d 81       	ldd	r25, Y+5	; 0x05
    1db0:	fc 01       	movw	r30, r24
    1db2:	e2 0f       	add	r30, r18
    1db4:	f3 1f       	adc	r31, r19
    1db6:	82 81       	ldd	r24, Z+2	; 0x02
    1db8:	28 2f       	mov	r18, r24
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	88 2f       	mov	r24, r24
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	b9 01       	movw	r22, r18
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <Port_Init+0x176>
    1dc6:	66 0f       	add	r22, r22
    1dc8:	77 1f       	adc	r23, r23
    1dca:	8a 95       	dec	r24
    1dcc:	e2 f7       	brpl	.-8      	; 0x1dc6 <Port_Init+0x172>
    1dce:	cb 01       	movw	r24, r22
    1dd0:	84 2b       	or	r24, r20
    1dd2:	8c 93       	st	X, r24
    1dd4:	43 c0       	rjmp	.+134    	; 0x1e5c <Port_Init+0x208>
					case PORT_PORTC:DDRC_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1dd6:	a4 e3       	ldi	r26, 0x34	; 52
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e4 e3       	ldi	r30, 0x34	; 52
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	40 81       	ld	r20, Z
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	88 2f       	mov	r24, r24
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	9c 01       	movw	r18, r24
    1de8:	22 0f       	add	r18, r18
    1dea:	33 1f       	adc	r19, r19
    1dec:	22 0f       	add	r18, r18
    1dee:	33 1f       	adc	r19, r19
    1df0:	8c 81       	ldd	r24, Y+4	; 0x04
    1df2:	9d 81       	ldd	r25, Y+5	; 0x05
    1df4:	fc 01       	movw	r30, r24
    1df6:	e2 0f       	add	r30, r18
    1df8:	f3 1f       	adc	r31, r19
    1dfa:	82 81       	ldd	r24, Z+2	; 0x02
    1dfc:	28 2f       	mov	r18, r24
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	88 2f       	mov	r24, r24
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	b9 01       	movw	r22, r18
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <Port_Init+0x1ba>
    1e0a:	66 0f       	add	r22, r22
    1e0c:	77 1f       	adc	r23, r23
    1e0e:	8a 95       	dec	r24
    1e10:	e2 f7       	brpl	.-8      	; 0x1e0a <Port_Init+0x1b6>
    1e12:	cb 01       	movw	r24, r22
    1e14:	84 2b       	or	r24, r20
    1e16:	8c 93       	st	X, r24
    1e18:	21 c0       	rjmp	.+66     	; 0x1e5c <Port_Init+0x208>
					case PORT_PORTD:DDRD_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1e1a:	a1 e3       	ldi	r26, 0x31	; 49
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e1 e3       	ldi	r30, 0x31	; 49
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	40 81       	ld	r20, Z
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	88 2f       	mov	r24, r24
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	9c 01       	movw	r18, r24
    1e2c:	22 0f       	add	r18, r18
    1e2e:	33 1f       	adc	r19, r19
    1e30:	22 0f       	add	r18, r18
    1e32:	33 1f       	adc	r19, r19
    1e34:	8c 81       	ldd	r24, Y+4	; 0x04
    1e36:	9d 81       	ldd	r25, Y+5	; 0x05
    1e38:	fc 01       	movw	r30, r24
    1e3a:	e2 0f       	add	r30, r18
    1e3c:	f3 1f       	adc	r31, r19
    1e3e:	82 81       	ldd	r24, Z+2	; 0x02
    1e40:	28 2f       	mov	r18, r24
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	8a 81       	ldd	r24, Y+2	; 0x02
    1e46:	88 2f       	mov	r24, r24
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	b9 01       	movw	r22, r18
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <Port_Init+0x1fe>
    1e4e:	66 0f       	add	r22, r22
    1e50:	77 1f       	adc	r23, r23
    1e52:	8a 95       	dec	r24
    1e54:	e2 f7       	brpl	.-8      	; 0x1e4e <Port_Init+0x1fa>
    1e56:	cb 01       	movw	r24, r22
    1e58:	84 2b       	or	r24, r20
    1e5a:	8c 93       	st	X, r24

					}
					// step 2 : config initial pin value
					if(ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_LOW || ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_HIGH)
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	88 2f       	mov	r24, r24
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	9c 01       	movw	r18, r24
    1e64:	22 0f       	add	r18, r18
    1e66:	33 1f       	adc	r19, r19
    1e68:	22 0f       	add	r18, r18
    1e6a:	33 1f       	adc	r19, r19
    1e6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e70:	fc 01       	movw	r30, r24
    1e72:	e2 0f       	add	r30, r18
    1e74:	f3 1f       	adc	r31, r19
    1e76:	81 81       	ldd	r24, Z+1	; 0x01
    1e78:	88 23       	and	r24, r24
    1e7a:	89 f0       	breq	.+34     	; 0x1e9e <Port_Init+0x24a>
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	88 2f       	mov	r24, r24
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	9c 01       	movw	r18, r24
    1e84:	22 0f       	add	r18, r18
    1e86:	33 1f       	adc	r19, r19
    1e88:	22 0f       	add	r18, r18
    1e8a:	33 1f       	adc	r19, r19
    1e8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e90:	fc 01       	movw	r30, r24
    1e92:	e2 0f       	add	r30, r18
    1e94:	f3 1f       	adc	r31, r19
    1e96:	81 81       	ldd	r24, Z+1	; 0x01
    1e98:	81 30       	cpi	r24, 0x01	; 1
    1e9a:	09 f0       	breq	.+2      	; 0x1e9e <Port_Init+0x24a>
    1e9c:	36 c1       	rjmp	.+620    	; 0x210a <Port_Init+0x4b6>
					{
						switch(Local_port)
    1e9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ea0:	28 2f       	mov	r18, r24
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	39 87       	std	Y+9, r19	; 0x09
    1ea6:	28 87       	std	Y+8, r18	; 0x08
    1ea8:	68 85       	ldd	r22, Y+8	; 0x08
    1eaa:	79 85       	ldd	r23, Y+9	; 0x09
    1eac:	62 30       	cpi	r22, 0x02	; 2
    1eae:	71 05       	cpc	r23, r1
    1eb0:	d1 f1       	breq	.+116    	; 0x1f26 <Port_Init+0x2d2>
    1eb2:	88 85       	ldd	r24, Y+8	; 0x08
    1eb4:	99 85       	ldd	r25, Y+9	; 0x09
    1eb6:	83 30       	cpi	r24, 0x03	; 3
    1eb8:	91 05       	cpc	r25, r1
    1eba:	34 f4       	brge	.+12     	; 0x1ec8 <Port_Init+0x274>
    1ebc:	28 85       	ldd	r18, Y+8	; 0x08
    1ebe:	39 85       	ldd	r19, Y+9	; 0x09
    1ec0:	21 30       	cpi	r18, 0x01	; 1
    1ec2:	31 05       	cpc	r19, r1
    1ec4:	71 f0       	breq	.+28     	; 0x1ee2 <Port_Init+0x28e>
    1ec6:	94 c0       	rjmp	.+296    	; 0x1ff0 <Port_Init+0x39c>
    1ec8:	68 85       	ldd	r22, Y+8	; 0x08
    1eca:	79 85       	ldd	r23, Y+9	; 0x09
    1ecc:	63 30       	cpi	r22, 0x03	; 3
    1ece:	71 05       	cpc	r23, r1
    1ed0:	09 f4       	brne	.+2      	; 0x1ed4 <Port_Init+0x280>
    1ed2:	4b c0       	rjmp	.+150    	; 0x1f6a <Port_Init+0x316>
    1ed4:	88 85       	ldd	r24, Y+8	; 0x08
    1ed6:	99 85       	ldd	r25, Y+9	; 0x09
    1ed8:	84 30       	cpi	r24, 0x04	; 4
    1eda:	91 05       	cpc	r25, r1
    1edc:	09 f4       	brne	.+2      	; 0x1ee0 <Port_Init+0x28c>
    1ede:	67 c0       	rjmp	.+206    	; 0x1fae <Port_Init+0x35a>
    1ee0:	87 c0       	rjmp	.+270    	; 0x1ff0 <Port_Init+0x39c>
						{
						case PORT_PORTA:  PORTA_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    1ee2:	ab e3       	ldi	r26, 0x3B	; 59
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	eb e3       	ldi	r30, 0x3B	; 59
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	40 81       	ld	r20, Z
    1eec:	8b 81       	ldd	r24, Y+3	; 0x03
    1eee:	88 2f       	mov	r24, r24
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	9c 01       	movw	r18, r24
    1ef4:	22 0f       	add	r18, r18
    1ef6:	33 1f       	adc	r19, r19
    1ef8:	22 0f       	add	r18, r18
    1efa:	33 1f       	adc	r19, r19
    1efc:	8c 81       	ldd	r24, Y+4	; 0x04
    1efe:	9d 81       	ldd	r25, Y+5	; 0x05
    1f00:	fc 01       	movw	r30, r24
    1f02:	e2 0f       	add	r30, r18
    1f04:	f3 1f       	adc	r31, r19
    1f06:	81 81       	ldd	r24, Z+1	; 0x01
    1f08:	28 2f       	mov	r18, r24
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0e:	88 2f       	mov	r24, r24
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	b9 01       	movw	r22, r18
    1f14:	02 c0       	rjmp	.+4      	; 0x1f1a <Port_Init+0x2c6>
    1f16:	66 0f       	add	r22, r22
    1f18:	77 1f       	adc	r23, r23
    1f1a:	8a 95       	dec	r24
    1f1c:	e2 f7       	brpl	.-8      	; 0x1f16 <Port_Init+0x2c2>
    1f1e:	cb 01       	movw	r24, r22
    1f20:	84 2b       	or	r24, r20
    1f22:	8c 93       	st	X, r24
    1f24:	65 c0       	rjmp	.+202    	; 0x1ff0 <Port_Init+0x39c>
						case PORT_PORTB:  PORTB_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    1f26:	a8 e3       	ldi	r26, 0x38	; 56
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	e8 e3       	ldi	r30, 0x38	; 56
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	40 81       	ld	r20, Z
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	88 2f       	mov	r24, r24
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	9c 01       	movw	r18, r24
    1f38:	22 0f       	add	r18, r18
    1f3a:	33 1f       	adc	r19, r19
    1f3c:	22 0f       	add	r18, r18
    1f3e:	33 1f       	adc	r19, r19
    1f40:	8c 81       	ldd	r24, Y+4	; 0x04
    1f42:	9d 81       	ldd	r25, Y+5	; 0x05
    1f44:	fc 01       	movw	r30, r24
    1f46:	e2 0f       	add	r30, r18
    1f48:	f3 1f       	adc	r31, r19
    1f4a:	81 81       	ldd	r24, Z+1	; 0x01
    1f4c:	28 2f       	mov	r18, r24
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	88 2f       	mov	r24, r24
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	b9 01       	movw	r22, r18
    1f58:	02 c0       	rjmp	.+4      	; 0x1f5e <Port_Init+0x30a>
    1f5a:	66 0f       	add	r22, r22
    1f5c:	77 1f       	adc	r23, r23
    1f5e:	8a 95       	dec	r24
    1f60:	e2 f7       	brpl	.-8      	; 0x1f5a <Port_Init+0x306>
    1f62:	cb 01       	movw	r24, r22
    1f64:	84 2b       	or	r24, r20
    1f66:	8c 93       	st	X, r24
    1f68:	43 c0       	rjmp	.+134    	; 0x1ff0 <Port_Init+0x39c>
						case PORT_PORTC:  PORTC_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    1f6a:	a5 e3       	ldi	r26, 0x35	; 53
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	e5 e3       	ldi	r30, 0x35	; 53
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	40 81       	ld	r20, Z
    1f74:	8b 81       	ldd	r24, Y+3	; 0x03
    1f76:	88 2f       	mov	r24, r24
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	9c 01       	movw	r18, r24
    1f7c:	22 0f       	add	r18, r18
    1f7e:	33 1f       	adc	r19, r19
    1f80:	22 0f       	add	r18, r18
    1f82:	33 1f       	adc	r19, r19
    1f84:	8c 81       	ldd	r24, Y+4	; 0x04
    1f86:	9d 81       	ldd	r25, Y+5	; 0x05
    1f88:	fc 01       	movw	r30, r24
    1f8a:	e2 0f       	add	r30, r18
    1f8c:	f3 1f       	adc	r31, r19
    1f8e:	81 81       	ldd	r24, Z+1	; 0x01
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	88 2f       	mov	r24, r24
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	b9 01       	movw	r22, r18
    1f9c:	02 c0       	rjmp	.+4      	; 0x1fa2 <Port_Init+0x34e>
    1f9e:	66 0f       	add	r22, r22
    1fa0:	77 1f       	adc	r23, r23
    1fa2:	8a 95       	dec	r24
    1fa4:	e2 f7       	brpl	.-8      	; 0x1f9e <Port_Init+0x34a>
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	84 2b       	or	r24, r20
    1faa:	8c 93       	st	X, r24
    1fac:	21 c0       	rjmp	.+66     	; 0x1ff0 <Port_Init+0x39c>
						case PORT_PORTD:  PORTD_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    1fae:	a2 e3       	ldi	r26, 0x32	; 50
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	e2 e3       	ldi	r30, 0x32	; 50
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	40 81       	ld	r20, Z
    1fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fba:	88 2f       	mov	r24, r24
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	9c 01       	movw	r18, r24
    1fc0:	22 0f       	add	r18, r18
    1fc2:	33 1f       	adc	r19, r19
    1fc4:	22 0f       	add	r18, r18
    1fc6:	33 1f       	adc	r19, r19
    1fc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fca:	9d 81       	ldd	r25, Y+5	; 0x05
    1fcc:	fc 01       	movw	r30, r24
    1fce:	e2 0f       	add	r30, r18
    1fd0:	f3 1f       	adc	r31, r19
    1fd2:	81 81       	ldd	r24, Z+1	; 0x01
    1fd4:	28 2f       	mov	r18, r24
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fda:	88 2f       	mov	r24, r24
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	b9 01       	movw	r22, r18
    1fe0:	02 c0       	rjmp	.+4      	; 0x1fe6 <Port_Init+0x392>
    1fe2:	66 0f       	add	r22, r22
    1fe4:	77 1f       	adc	r23, r23
    1fe6:	8a 95       	dec	r24
    1fe8:	e2 f7       	brpl	.-8      	; 0x1fe2 <Port_Init+0x38e>
    1fea:	cb 01       	movw	r24, r22
    1fec:	84 2b       	or	r24, r20
    1fee:	8c 93       	st	X, r24

						}
						// step 3 : config Pin Internal Attach
						if(ConfigPtr[i].Port_PinDirection==PORT_PINDIR_OUTPUT && ConfigPtr[i].Port_PinInternalAttach == PORT_PIN_IN_ATTATCH_PULLUP)
    1ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff2:	88 2f       	mov	r24, r24
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	9c 01       	movw	r18, r24
    1ff8:	22 0f       	add	r18, r18
    1ffa:	33 1f       	adc	r19, r19
    1ffc:	22 0f       	add	r18, r18
    1ffe:	33 1f       	adc	r19, r19
    2000:	8c 81       	ldd	r24, Y+4	; 0x04
    2002:	9d 81       	ldd	r25, Y+5	; 0x05
    2004:	fc 01       	movw	r30, r24
    2006:	e2 0f       	add	r30, r18
    2008:	f3 1f       	adc	r31, r19
    200a:	82 81       	ldd	r24, Z+2	; 0x02
    200c:	81 30       	cpi	r24, 0x01	; 1
    200e:	09 f0       	breq	.+2      	; 0x2012 <Port_Init+0x3be>
    2010:	7c c0       	rjmp	.+248    	; 0x210a <Port_Init+0x4b6>
    2012:	8b 81       	ldd	r24, Y+3	; 0x03
    2014:	88 2f       	mov	r24, r24
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	9c 01       	movw	r18, r24
    201a:	22 0f       	add	r18, r18
    201c:	33 1f       	adc	r19, r19
    201e:	22 0f       	add	r18, r18
    2020:	33 1f       	adc	r19, r19
    2022:	8c 81       	ldd	r24, Y+4	; 0x04
    2024:	9d 81       	ldd	r25, Y+5	; 0x05
    2026:	fc 01       	movw	r30, r24
    2028:	e2 0f       	add	r30, r18
    202a:	f3 1f       	adc	r31, r19
    202c:	83 81       	ldd	r24, Z+3	; 0x03
    202e:	88 23       	and	r24, r24
    2030:	09 f0       	breq	.+2      	; 0x2034 <Port_Init+0x3e0>
    2032:	6b c0       	rjmp	.+214    	; 0x210a <Port_Init+0x4b6>
						{
							switch(Local_port)
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	28 2f       	mov	r18, r24
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	3f 83       	std	Y+7, r19	; 0x07
    203c:	2e 83       	std	Y+6, r18	; 0x06
    203e:	6e 81       	ldd	r22, Y+6	; 0x06
    2040:	7f 81       	ldd	r23, Y+7	; 0x07
    2042:	62 30       	cpi	r22, 0x02	; 2
    2044:	71 05       	cpc	r23, r1
    2046:	49 f1       	breq	.+82     	; 0x209a <Port_Init+0x446>
    2048:	8e 81       	ldd	r24, Y+6	; 0x06
    204a:	9f 81       	ldd	r25, Y+7	; 0x07
    204c:	83 30       	cpi	r24, 0x03	; 3
    204e:	91 05       	cpc	r25, r1
    2050:	34 f4       	brge	.+12     	; 0x205e <Port_Init+0x40a>
    2052:	2e 81       	ldd	r18, Y+6	; 0x06
    2054:	3f 81       	ldd	r19, Y+7	; 0x07
    2056:	21 30       	cpi	r18, 0x01	; 1
    2058:	31 05       	cpc	r19, r1
    205a:	61 f0       	breq	.+24     	; 0x2074 <Port_Init+0x420>
    205c:	56 c0       	rjmp	.+172    	; 0x210a <Port_Init+0x4b6>
    205e:	6e 81       	ldd	r22, Y+6	; 0x06
    2060:	7f 81       	ldd	r23, Y+7	; 0x07
    2062:	63 30       	cpi	r22, 0x03	; 3
    2064:	71 05       	cpc	r23, r1
    2066:	61 f1       	breq	.+88     	; 0x20c0 <Port_Init+0x46c>
    2068:	8e 81       	ldd	r24, Y+6	; 0x06
    206a:	9f 81       	ldd	r25, Y+7	; 0x07
    206c:	84 30       	cpi	r24, 0x04	; 4
    206e:	91 05       	cpc	r25, r1
    2070:	d1 f1       	breq	.+116    	; 0x20e6 <Port_Init+0x492>
    2072:	4b c0       	rjmp	.+150    	; 0x210a <Port_Init+0x4b6>
							{
							case PORT_PORTA:PORTA_REG |= (u8)(1<< Local_pin);break;
    2074:	ab e3       	ldi	r26, 0x3B	; 59
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	eb e3       	ldi	r30, 0x3B	; 59
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	40 81       	ld	r20, Z
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	28 2f       	mov	r18, r24
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	02 2e       	mov	r0, r18
    208a:	02 c0       	rjmp	.+4      	; 0x2090 <Port_Init+0x43c>
    208c:	88 0f       	add	r24, r24
    208e:	99 1f       	adc	r25, r25
    2090:	0a 94       	dec	r0
    2092:	e2 f7       	brpl	.-8      	; 0x208c <Port_Init+0x438>
    2094:	84 2b       	or	r24, r20
    2096:	8c 93       	st	X, r24
    2098:	38 c0       	rjmp	.+112    	; 0x210a <Port_Init+0x4b6>
							case PORT_PORTB:PORTB_REG |= (u8)(1<< Local_pin);break;
    209a:	a8 e3       	ldi	r26, 0x38	; 56
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	e8 e3       	ldi	r30, 0x38	; 56
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	40 81       	ld	r20, Z
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	28 2f       	mov	r18, r24
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	02 2e       	mov	r0, r18
    20b0:	02 c0       	rjmp	.+4      	; 0x20b6 <Port_Init+0x462>
    20b2:	88 0f       	add	r24, r24
    20b4:	99 1f       	adc	r25, r25
    20b6:	0a 94       	dec	r0
    20b8:	e2 f7       	brpl	.-8      	; 0x20b2 <Port_Init+0x45e>
    20ba:	84 2b       	or	r24, r20
    20bc:	8c 93       	st	X, r24
    20be:	25 c0       	rjmp	.+74     	; 0x210a <Port_Init+0x4b6>
							case PORT_PORTC:PORTC_REG |= (u8)(1<< Local_pin);break;
    20c0:	a5 e3       	ldi	r26, 0x35	; 53
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e5 e3       	ldi	r30, 0x35	; 53
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	40 81       	ld	r20, Z
    20ca:	8a 81       	ldd	r24, Y+2	; 0x02
    20cc:	28 2f       	mov	r18, r24
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	02 2e       	mov	r0, r18
    20d6:	02 c0       	rjmp	.+4      	; 0x20dc <Port_Init+0x488>
    20d8:	88 0f       	add	r24, r24
    20da:	99 1f       	adc	r25, r25
    20dc:	0a 94       	dec	r0
    20de:	e2 f7       	brpl	.-8      	; 0x20d8 <Port_Init+0x484>
    20e0:	84 2b       	or	r24, r20
    20e2:	8c 93       	st	X, r24
    20e4:	12 c0       	rjmp	.+36     	; 0x210a <Port_Init+0x4b6>
							case PORT_PORTD:PORTD_REG |= (u8)(1<< Local_pin);break;
    20e6:	a2 e3       	ldi	r26, 0x32	; 50
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	e2 e3       	ldi	r30, 0x32	; 50
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	40 81       	ld	r20, Z
    20f0:	8a 81       	ldd	r24, Y+2	; 0x02
    20f2:	28 2f       	mov	r18, r24
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	02 2e       	mov	r0, r18
    20fc:	02 c0       	rjmp	.+4      	; 0x2102 <Port_Init+0x4ae>
    20fe:	88 0f       	add	r24, r24
    2100:	99 1f       	adc	r25, r25
    2102:	0a 94       	dec	r0
    2104:	e2 f7       	brpl	.-8      	; 0x20fe <Port_Init+0x4aa>
    2106:	84 2b       	or	r24, r20
    2108:	8c 93       	st	X, r24
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<PORT_PINS_CONFIG_ARR_SIZE;i++)
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	8f 5f       	subi	r24, 0xFF	; 255
    210e:	8b 83       	std	Y+3, r24	; 0x03
    2110:	8b 81       	ldd	r24, Y+3	; 0x03
    2112:	80 32       	cpi	r24, 0x20	; 32
    2114:	08 f4       	brcc	.+2      	; 0x2118 <Port_Init+0x4c4>
    2116:	b1 cd       	rjmp	.-1182   	; 0x1c7a <Port_Init+0x26>
					//report error
				}

		    }//for
		}//else
}
    2118:	2b 96       	adiw	r28, 0x0b	; 11
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	f8 94       	cli
    211e:	de bf       	out	0x3e, r29	; 62
    2120:	0f be       	out	0x3f, r0	; 63
    2122:	cd bf       	out	0x3d, r28	; 61
    2124:	cf 91       	pop	r28
    2126:	df 91       	pop	r29
    2128:	08 95       	ret

0000212a <GIE_voidEnable>:
#include"STD_TYPES.h"
#include"BIT_MATH.h"
#include"../Mcu_HW.h"

void GIE_voidEnable(void)
{
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
	//Enable GIE for External interrupt
	SET_BIT(SREG,SREG_I);
    2132:	af e5       	ldi	r26, 0x5F	; 95
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	ef e5       	ldi	r30, 0x5F	; 95
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	80 68       	ori	r24, 0x80	; 128
    213e:	8c 93       	st	X, r24
}
    2140:	cf 91       	pop	r28
    2142:	df 91       	pop	r29
    2144:	08 95       	ret

00002146 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    2146:	df 93       	push	r29
    2148:	cf 93       	push	r28
    214a:	cd b7       	in	r28, 0x3d	; 61
    214c:	de b7       	in	r29, 0x3e	; 62
	//Disable GIE for external Interrupt
	CLR_BIT(SREG,SREG_I);
    214e:	af e5       	ldi	r26, 0x5F	; 95
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	ef e5       	ldi	r30, 0x5F	; 95
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	8f 77       	andi	r24, 0x7F	; 127
    215a:	8c 93       	st	X, r24
}
    215c:	cf 91       	pop	r28
    215e:	df 91       	pop	r29
    2160:	08 95       	ret

00002162 <Enable_Int>:
 */
static void (*EXTI_ARRCALLBACK2FUNC[3])(void) ={NULL_POINTER,NULL_POINTER,NULL_POINTER};


void Enable_Int(const EXT_I * ConfigArr)
{
    2162:	df 93       	push	r29
    2164:	cf 93       	push	r28
    2166:	cd b7       	in	r28, 0x3d	; 61
    2168:	de b7       	in	r29, 0x3e	; 62
    216a:	2b 97       	sbiw	r28, 0x0b	; 11
    216c:	0f b6       	in	r0, 0x3f	; 63
    216e:	f8 94       	cli
    2170:	de bf       	out	0x3e, r29	; 62
    2172:	0f be       	out	0x3f, r0	; 63
    2174:	cd bf       	out	0x3d, r28	; 61
    2176:	9b 83       	std	Y+3, r25	; 0x03
    2178:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter;
	for(Local_u8Counter=0;Local_u8Counter<3;Local_u8Counter++)
    217a:	19 82       	std	Y+1, r1	; 0x01
    217c:	0e c1       	rjmp	.+540    	; 0x239a <Enable_Int+0x238>
	{
		switch(ConfigArr[Local_u8Counter].Interrupt_ID)
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	88 2f       	mov	r24, r24
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	9c 01       	movw	r18, r24
    2186:	22 0f       	add	r18, r18
    2188:	33 1f       	adc	r19, r19
    218a:	8a 81       	ldd	r24, Y+2	; 0x02
    218c:	9b 81       	ldd	r25, Y+3	; 0x03
    218e:	fc 01       	movw	r30, r24
    2190:	e2 0f       	add	r30, r18
    2192:	f3 1f       	adc	r31, r19
    2194:	80 81       	ld	r24, Z
    2196:	28 2f       	mov	r18, r24
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	3b 87       	std	Y+11, r19	; 0x0b
    219c:	2a 87       	std	Y+10, r18	; 0x0a
    219e:	8a 85       	ldd	r24, Y+10	; 0x0a
    21a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    21a2:	81 30       	cpi	r24, 0x01	; 1
    21a4:	91 05       	cpc	r25, r1
    21a6:	09 f4       	brne	.+2      	; 0x21aa <Enable_Int+0x48>
    21a8:	4a c0       	rjmp	.+148    	; 0x223e <Enable_Int+0xdc>
    21aa:	2a 85       	ldd	r18, Y+10	; 0x0a
    21ac:	3b 85       	ldd	r19, Y+11	; 0x0b
    21ae:	22 30       	cpi	r18, 0x02	; 2
    21b0:	31 05       	cpc	r19, r1
    21b2:	09 f4       	brne	.+2      	; 0x21b6 <Enable_Int+0x54>
    21b4:	b1 c0       	rjmp	.+354    	; 0x2318 <Enable_Int+0x1b6>
    21b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    21b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    21ba:	00 97       	sbiw	r24, 0x00	; 0
    21bc:	09 f0       	breq	.+2      	; 0x21c0 <Enable_Int+0x5e>
    21be:	ea c0       	rjmp	.+468    	; 0x2394 <Enable_Int+0x232>
		{
		case EXTI0:
			switch(ConfigArr[Local_u8Counter].Trigger_value)
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
    21c2:	88 2f       	mov	r24, r24
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	9c 01       	movw	r18, r24
    21c8:	22 0f       	add	r18, r18
    21ca:	33 1f       	adc	r19, r19
    21cc:	8a 81       	ldd	r24, Y+2	; 0x02
    21ce:	9b 81       	ldd	r25, Y+3	; 0x03
    21d0:	fc 01       	movw	r30, r24
    21d2:	e2 0f       	add	r30, r18
    21d4:	f3 1f       	adc	r31, r19
    21d6:	81 81       	ldd	r24, Z+1	; 0x01
    21d8:	28 2f       	mov	r18, r24
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	39 87       	std	Y+9, r19	; 0x09
    21de:	28 87       	std	Y+8, r18	; 0x08
    21e0:	88 85       	ldd	r24, Y+8	; 0x08
    21e2:	99 85       	ldd	r25, Y+9	; 0x09
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	31 f0       	breq	.+12     	; 0x21f4 <Enable_Int+0x92>
    21e8:	28 85       	ldd	r18, Y+8	; 0x08
    21ea:	39 85       	ldd	r19, Y+9	; 0x09
    21ec:	21 30       	cpi	r18, 0x01	; 1
    21ee:	31 05       	cpc	r19, r1
    21f0:	81 f0       	breq	.+32     	; 0x2212 <Enable_Int+0xb0>
    21f2:	1d c0       	rjmp	.+58     	; 0x222e <Enable_Int+0xcc>
			{
			case Low_level:
				/*set sense control for INT0 To Low level*/
				CLR_BIT(MCUCR,MCUCR_ISC01);
    21f4:	a5 e5       	ldi	r26, 0x55	; 85
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	e5 e5       	ldi	r30, 0x55	; 85
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	8d 7f       	andi	r24, 0xFD	; 253
    2200:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC00);
    2202:	a5 e5       	ldi	r26, 0x55	; 85
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	e5 e5       	ldi	r30, 0x55	; 85
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	8e 7f       	andi	r24, 0xFE	; 254
    220e:	8c 93       	st	X, r24
    2210:	0e c0       	rjmp	.+28     	; 0x222e <Enable_Int+0xcc>
				break;
			case On_change:
				/*set sense control for INT0 To On change*/
				CLR_BIT(MCUCR,MCUCR_ISC01);
    2212:	a5 e5       	ldi	r26, 0x55	; 85
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	e5 e5       	ldi	r30, 0x55	; 85
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	8d 7f       	andi	r24, 0xFD	; 253
    221e:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC00);
    2220:	a5 e5       	ldi	r26, 0x55	; 85
    2222:	b0 e0       	ldi	r27, 0x00	; 0
    2224:	e5 e5       	ldi	r30, 0x55	; 85
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	80 81       	ld	r24, Z
    222a:	81 60       	ori	r24, 0x01	; 1
    222c:	8c 93       	st	X, r24
				break;
			default:
				break;
			}
			/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER ENABLE BIT6*/
			SET_BIT(GICR,GICR_INT0);
    222e:	ab e5       	ldi	r26, 0x5B	; 91
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	eb e5       	ldi	r30, 0x5B	; 91
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	80 64       	ori	r24, 0x40	; 64
    223a:	8c 93       	st	X, r24
    223c:	ab c0       	rjmp	.+342    	; 0x2394 <Enable_Int+0x232>
			break;
			case EXTI1:
				switch(ConfigArr[Local_u8Counter].Trigger_value)
    223e:	89 81       	ldd	r24, Y+1	; 0x01
    2240:	88 2f       	mov	r24, r24
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	9c 01       	movw	r18, r24
    2246:	22 0f       	add	r18, r18
    2248:	33 1f       	adc	r19, r19
    224a:	8a 81       	ldd	r24, Y+2	; 0x02
    224c:	9b 81       	ldd	r25, Y+3	; 0x03
    224e:	fc 01       	movw	r30, r24
    2250:	e2 0f       	add	r30, r18
    2252:	f3 1f       	adc	r31, r19
    2254:	81 81       	ldd	r24, Z+1	; 0x01
    2256:	28 2f       	mov	r18, r24
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	3f 83       	std	Y+7, r19	; 0x07
    225c:	2e 83       	std	Y+6, r18	; 0x06
    225e:	8e 81       	ldd	r24, Y+6	; 0x06
    2260:	9f 81       	ldd	r25, Y+7	; 0x07
    2262:	81 30       	cpi	r24, 0x01	; 1
    2264:	91 05       	cpc	r25, r1
    2266:	21 f1       	breq	.+72     	; 0x22b0 <Enable_Int+0x14e>
    2268:	2e 81       	ldd	r18, Y+6	; 0x06
    226a:	3f 81       	ldd	r19, Y+7	; 0x07
    226c:	22 30       	cpi	r18, 0x02	; 2
    226e:	31 05       	cpc	r19, r1
    2270:	2c f4       	brge	.+10     	; 0x227c <Enable_Int+0x11a>
    2272:	8e 81       	ldd	r24, Y+6	; 0x06
    2274:	9f 81       	ldd	r25, Y+7	; 0x07
    2276:	00 97       	sbiw	r24, 0x00	; 0
    2278:	61 f0       	breq	.+24     	; 0x2292 <Enable_Int+0x130>
    227a:	46 c0       	rjmp	.+140    	; 0x2308 <Enable_Int+0x1a6>
    227c:	2e 81       	ldd	r18, Y+6	; 0x06
    227e:	3f 81       	ldd	r19, Y+7	; 0x07
    2280:	22 30       	cpi	r18, 0x02	; 2
    2282:	31 05       	cpc	r19, r1
    2284:	21 f1       	breq	.+72     	; 0x22ce <Enable_Int+0x16c>
    2286:	8e 81       	ldd	r24, Y+6	; 0x06
    2288:	9f 81       	ldd	r25, Y+7	; 0x07
    228a:	83 30       	cpi	r24, 0x03	; 3
    228c:	91 05       	cpc	r25, r1
    228e:	71 f1       	breq	.+92     	; 0x22ec <Enable_Int+0x18a>
    2290:	3b c0       	rjmp	.+118    	; 0x2308 <Enable_Int+0x1a6>
				{
				case Low_level:
					/*set sense control for INT0 To falling edge*/
					SET_BIT(MCUCR,MCUCR_ISC01);
    2292:	a5 e5       	ldi	r26, 0x55	; 85
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	e5 e5       	ldi	r30, 0x55	; 85
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	82 60       	ori	r24, 0x02	; 2
    229e:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,MCUCR_ISC00);
    22a0:	a5 e5       	ldi	r26, 0x55	; 85
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	e5 e5       	ldi	r30, 0x55	; 85
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	8e 7f       	andi	r24, 0xFE	; 254
    22ac:	8c 93       	st	X, r24
    22ae:	2c c0       	rjmp	.+88     	; 0x2308 <Enable_Int+0x1a6>
					break;
				case On_change:
					/*set sense control for INT0 To On change*/
					CLR_BIT(MCUCR,MCUCR_ISC01);
    22b0:	a5 e5       	ldi	r26, 0x55	; 85
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	e5 e5       	ldi	r30, 0x55	; 85
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	8d 7f       	andi	r24, 0xFD	; 253
    22bc:	8c 93       	st	X, r24
					SET_BIT(MCUCR,MCUCR_ISC00);
    22be:	a5 e5       	ldi	r26, 0x55	; 85
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e5 e5       	ldi	r30, 0x55	; 85
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	81 60       	ori	r24, 0x01	; 1
    22ca:	8c 93       	st	X, r24
    22cc:	1d c0       	rjmp	.+58     	; 0x2308 <Enable_Int+0x1a6>
					break;
				case Falling_edge:
					/*set sense control for INT0 To falling edge*/
					SET_BIT(MCUCR,MCUCR_ISC01);
    22ce:	a5 e5       	ldi	r26, 0x55	; 85
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	e5 e5       	ldi	r30, 0x55	; 85
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
    22d8:	82 60       	ori	r24, 0x02	; 2
    22da:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,MCUCR_ISC00);
    22dc:	a5 e5       	ldi	r26, 0x55	; 85
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	e5 e5       	ldi	r30, 0x55	; 85
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	8e 7f       	andi	r24, 0xFE	; 254
    22e8:	8c 93       	st	X, r24
    22ea:	0e c0       	rjmp	.+28     	; 0x2308 <Enable_Int+0x1a6>
					break;
				case Rising_edge:
					/*set sense control for INT0 To Rising edge*/
					SET_BIT(MCUCR,MCUCR_ISC01);
    22ec:	a5 e5       	ldi	r26, 0x55	; 85
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	e5 e5       	ldi	r30, 0x55	; 85
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	82 60       	ori	r24, 0x02	; 2
    22f8:	8c 93       	st	X, r24
					SET_BIT(MCUCR,MCUCR_ISC00);
    22fa:	a5 e5       	ldi	r26, 0x55	; 85
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	e5 e5       	ldi	r30, 0x55	; 85
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	81 60       	ori	r24, 0x01	; 1
    2306:	8c 93       	st	X, r24
					break;
				default:
					break;
				}
				/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER ENABLE BIT7*/
				SET_BIT(GICR,GICR_INT1);
    2308:	ab e5       	ldi	r26, 0x5B	; 91
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	eb e5       	ldi	r30, 0x5B	; 91
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	80 81       	ld	r24, Z
    2312:	80 68       	ori	r24, 0x80	; 128
    2314:	8c 93       	st	X, r24
    2316:	3e c0       	rjmp	.+124    	; 0x2394 <Enable_Int+0x232>
				break;
				case EXTI2:
					switch(ConfigArr[Local_u8Counter].Trigger_value)
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	88 2f       	mov	r24, r24
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	9c 01       	movw	r18, r24
    2320:	22 0f       	add	r18, r18
    2322:	33 1f       	adc	r19, r19
    2324:	8a 81       	ldd	r24, Y+2	; 0x02
    2326:	9b 81       	ldd	r25, Y+3	; 0x03
    2328:	fc 01       	movw	r30, r24
    232a:	e2 0f       	add	r30, r18
    232c:	f3 1f       	adc	r31, r19
    232e:	81 81       	ldd	r24, Z+1	; 0x01
    2330:	28 2f       	mov	r18, r24
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	3d 83       	std	Y+5, r19	; 0x05
    2336:	2c 83       	std	Y+4, r18	; 0x04
    2338:	8c 81       	ldd	r24, Y+4	; 0x04
    233a:	9d 81       	ldd	r25, Y+5	; 0x05
    233c:	00 97       	sbiw	r24, 0x00	; 0
    233e:	31 f0       	breq	.+12     	; 0x234c <Enable_Int+0x1ea>
    2340:	2c 81       	ldd	r18, Y+4	; 0x04
    2342:	3d 81       	ldd	r19, Y+5	; 0x05
    2344:	21 30       	cpi	r18, 0x01	; 1
    2346:	31 05       	cpc	r19, r1
    2348:	81 f0       	breq	.+32     	; 0x236a <Enable_Int+0x208>
    234a:	1d c0       	rjmp	.+58     	; 0x2386 <Enable_Int+0x224>
					{
					case Low_level:
						/*set sense control for INT0 To falling edge*/
						SET_BIT(MCUCR,MCUCR_ISC01);
    234c:	a5 e5       	ldi	r26, 0x55	; 85
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	e5 e5       	ldi	r30, 0x55	; 85
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	82 60       	ori	r24, 0x02	; 2
    2358:	8c 93       	st	X, r24
						CLR_BIT(MCUCR,MCUCR_ISC00);
    235a:	a5 e5       	ldi	r26, 0x55	; 85
    235c:	b0 e0       	ldi	r27, 0x00	; 0
    235e:	e5 e5       	ldi	r30, 0x55	; 85
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	80 81       	ld	r24, Z
    2364:	8e 7f       	andi	r24, 0xFE	; 254
    2366:	8c 93       	st	X, r24
    2368:	0e c0       	rjmp	.+28     	; 0x2386 <Enable_Int+0x224>
						break;
					case On_change:
						/*set sense control for INT0 To On change*/
						CLR_BIT(MCUCR,MCUCR_ISC01);
    236a:	a5 e5       	ldi	r26, 0x55	; 85
    236c:	b0 e0       	ldi	r27, 0x00	; 0
    236e:	e5 e5       	ldi	r30, 0x55	; 85
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	8d 7f       	andi	r24, 0xFD	; 253
    2376:	8c 93       	st	X, r24
						SET_BIT(MCUCR,MCUCR_ISC00);
    2378:	a5 e5       	ldi	r26, 0x55	; 85
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	e5 e5       	ldi	r30, 0x55	; 85
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	80 81       	ld	r24, Z
    2382:	81 60       	ori	r24, 0x01	; 1
    2384:	8c 93       	st	X, r24
						break;
					default:
						break;
					}
					/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER ENABLE BIT5*/
					SET_BIT(GICR,GICR_INT2);
    2386:	ab e5       	ldi	r26, 0x5B	; 91
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	eb e5       	ldi	r30, 0x5B	; 91
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	80 62       	ori	r24, 0x20	; 32
    2392:	8c 93       	st	X, r24


void Enable_Int(const EXT_I * ConfigArr)
{
	u8 Local_u8Counter;
	for(Local_u8Counter=0;Local_u8Counter<3;Local_u8Counter++)
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	8f 5f       	subi	r24, 0xFF	; 255
    2398:	89 83       	std	Y+1, r24	; 0x01
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	83 30       	cpi	r24, 0x03	; 3
    239e:	08 f4       	brcc	.+2      	; 0x23a2 <Enable_Int+0x240>
    23a0:	ee ce       	rjmp	.-548    	; 0x217e <Enable_Int+0x1c>
					SET_BIT(GICR,GICR_INT2);
					break;
		}
	}

}
    23a2:	2b 96       	adiw	r28, 0x0b	; 11
    23a4:	0f b6       	in	r0, 0x3f	; 63
    23a6:	f8 94       	cli
    23a8:	de bf       	out	0x3e, r29	; 62
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	cd bf       	out	0x3d, r28	; 61
    23ae:	cf 91       	pop	r28
    23b0:	df 91       	pop	r29
    23b2:	08 95       	ret

000023b4 <Disable_Int>:

void Disable_Int(const EXT_I * ConfigArr)
{
    23b4:	df 93       	push	r29
    23b6:	cf 93       	push	r28
    23b8:	00 d0       	rcall	.+0      	; 0x23ba <Disable_Int+0x6>
    23ba:	00 d0       	rcall	.+0      	; 0x23bc <Disable_Int+0x8>
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
    23c0:	9a 83       	std	Y+2, r25	; 0x02
    23c2:	89 83       	std	Y+1, r24	; 0x01
	switch(ConfigArr->Interrupt_ID)
    23c4:	e9 81       	ldd	r30, Y+1	; 0x01
    23c6:	fa 81       	ldd	r31, Y+2	; 0x02
    23c8:	80 81       	ld	r24, Z
    23ca:	28 2f       	mov	r18, r24
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	3c 83       	std	Y+4, r19	; 0x04
    23d0:	2b 83       	std	Y+3, r18	; 0x03
    23d2:	8b 81       	ldd	r24, Y+3	; 0x03
    23d4:	9c 81       	ldd	r25, Y+4	; 0x04
    23d6:	81 30       	cpi	r24, 0x01	; 1
    23d8:	91 05       	cpc	r25, r1
    23da:	89 f0       	breq	.+34     	; 0x23fe <Disable_Int+0x4a>
    23dc:	2b 81       	ldd	r18, Y+3	; 0x03
    23de:	3c 81       	ldd	r19, Y+4	; 0x04
    23e0:	22 30       	cpi	r18, 0x02	; 2
    23e2:	31 05       	cpc	r19, r1
    23e4:	a1 f0       	breq	.+40     	; 0x240e <Disable_Int+0x5a>
    23e6:	8b 81       	ldd	r24, Y+3	; 0x03
    23e8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ea:	00 97       	sbiw	r24, 0x00	; 0
    23ec:	b9 f4       	brne	.+46     	; 0x241c <Disable_Int+0x68>
	{
	case EXTI0:
		/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER DISABLE BIT6*/
		CLR_BIT(GICR,GICR_INT0);
    23ee:	ab e5       	ldi	r26, 0x5B	; 91
    23f0:	b0 e0       	ldi	r27, 0x00	; 0
    23f2:	eb e5       	ldi	r30, 0x5B	; 91
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	80 81       	ld	r24, Z
    23f8:	8f 7b       	andi	r24, 0xBF	; 191
    23fa:	8c 93       	st	X, r24
    23fc:	0f c0       	rjmp	.+30     	; 0x241c <Disable_Int+0x68>
		break;
	case EXTI1:
		/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER DISABLE BIT7*/
		CLR_BIT(GICR,GICR_INT1);
    23fe:	ab e5       	ldi	r26, 0x5B	; 91
    2400:	b0 e0       	ldi	r27, 0x00	; 0
    2402:	eb e5       	ldi	r30, 0x5B	; 91
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	80 81       	ld	r24, Z
    2408:	8f 77       	andi	r24, 0x7F	; 127
    240a:	8c 93       	st	X, r24
    240c:	07 c0       	rjmp	.+14     	; 0x241c <Disable_Int+0x68>
		break;
	case EXTI2:
		/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER DISABLE BIT5*/
		CLR_BIT(GICR,GICR_INT2);
    240e:	ab e5       	ldi	r26, 0x5B	; 91
    2410:	b0 e0       	ldi	r27, 0x00	; 0
    2412:	eb e5       	ldi	r30, 0x5B	; 91
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	80 81       	ld	r24, Z
    2418:	8f 7d       	andi	r24, 0xDF	; 223
    241a:	8c 93       	st	X, r24
		break;
	}
}
    241c:	0f 90       	pop	r0
    241e:	0f 90       	pop	r0
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	cf 91       	pop	r28
    2426:	df 91       	pop	r29
    2428:	08 95       	ret

0000242a <EXTI_u8INTSetCallBack>:
u8 EXTI_u8INTSetCallBack(const EXT_I * ConfigArr,void (*Copy_pvINTFunc)(void))
{
    242a:	df 93       	push	r29
    242c:	cf 93       	push	r28
    242e:	cd b7       	in	r28, 0x3d	; 61
    2430:	de b7       	in	r29, 0x3e	; 62
    2432:	28 97       	sbiw	r28, 0x08	; 8
    2434:	0f b6       	in	r0, 0x3f	; 63
    2436:	f8 94       	cli
    2438:	de bf       	out	0x3e, r29	; 62
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	cd bf       	out	0x3d, r28	; 61
    243e:	9c 83       	std	Y+4, r25	; 0x04
    2440:	8b 83       	std	Y+3, r24	; 0x03
    2442:	7e 83       	std	Y+6, r23	; 0x06
    2444:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8ErrorStatus=NO_ERROR;
    2446:	82 e0       	ldi	r24, 0x02	; 2
    2448:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8counter;
	for(Local_u8counter=0;Local_u8counter<3;Local_u8counter++)
    244a:	19 82       	std	Y+1, r1	; 0x01
    244c:	59 c0       	rjmp	.+178    	; 0x2500 <EXTI_u8INTSetCallBack+0xd6>
	{
		switch(ConfigArr[Local_u8counter].Interrupt_ID)
    244e:	89 81       	ldd	r24, Y+1	; 0x01
    2450:	88 2f       	mov	r24, r24
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	9c 01       	movw	r18, r24
    2456:	22 0f       	add	r18, r18
    2458:	33 1f       	adc	r19, r19
    245a:	8b 81       	ldd	r24, Y+3	; 0x03
    245c:	9c 81       	ldd	r25, Y+4	; 0x04
    245e:	fc 01       	movw	r30, r24
    2460:	e2 0f       	add	r30, r18
    2462:	f3 1f       	adc	r31, r19
    2464:	80 81       	ld	r24, Z
    2466:	28 2f       	mov	r18, r24
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	38 87       	std	Y+8, r19	; 0x08
    246c:	2f 83       	std	Y+7, r18	; 0x07
    246e:	8f 81       	ldd	r24, Y+7	; 0x07
    2470:	98 85       	ldd	r25, Y+8	; 0x08
    2472:	81 30       	cpi	r24, 0x01	; 1
    2474:	91 05       	cpc	r25, r1
    2476:	e1 f0       	breq	.+56     	; 0x24b0 <EXTI_u8INTSetCallBack+0x86>
    2478:	2f 81       	ldd	r18, Y+7	; 0x07
    247a:	38 85       	ldd	r19, Y+8	; 0x08
    247c:	22 30       	cpi	r18, 0x02	; 2
    247e:	31 05       	cpc	r19, r1
    2480:	51 f1       	breq	.+84     	; 0x24d6 <EXTI_u8INTSetCallBack+0xac>
    2482:	8f 81       	ldd	r24, Y+7	; 0x07
    2484:	98 85       	ldd	r25, Y+8	; 0x08
    2486:	00 97       	sbiw	r24, 0x00	; 0
    2488:	c1 f5       	brne	.+112    	; 0x24fa <EXTI_u8INTSetCallBack+0xd0>
		{
		case EXTI0:
			if(Copy_pvINTFunc != NULL)
    248a:	8d 81       	ldd	r24, Y+5	; 0x05
    248c:	9e 81       	ldd	r25, Y+6	; 0x06
    248e:	00 97       	sbiw	r24, 0x00	; 0
    2490:	69 f0       	breq	.+26     	; 0x24ac <EXTI_u8INTSetCallBack+0x82>
			{
				EXTI_ARRCALLBACK2FUNC[Local_u8counter]=Copy_pvINTFunc;
    2492:	89 81       	ldd	r24, Y+1	; 0x01
    2494:	88 2f       	mov	r24, r24
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	88 0f       	add	r24, r24
    249a:	99 1f       	adc	r25, r25
    249c:	fc 01       	movw	r30, r24
    249e:	ef 59       	subi	r30, 0x9F	; 159
    24a0:	fd 4f       	sbci	r31, 0xFD	; 253
    24a2:	8d 81       	ldd	r24, Y+5	; 0x05
    24a4:	9e 81       	ldd	r25, Y+6	; 0x06
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	80 83       	st	Z, r24
    24aa:	27 c0       	rjmp	.+78     	; 0x24fa <EXTI_u8INTSetCallBack+0xd0>
			}
			else
			{
				Local_u8ErrorStatus = NULL_POINTER;
    24ac:	1a 82       	std	Y+2, r1	; 0x02
    24ae:	25 c0       	rjmp	.+74     	; 0x24fa <EXTI_u8INTSetCallBack+0xd0>
			}
			break;
		case EXTI1:
			if(Copy_pvINTFunc != NULL)
    24b0:	8d 81       	ldd	r24, Y+5	; 0x05
    24b2:	9e 81       	ldd	r25, Y+6	; 0x06
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	69 f0       	breq	.+26     	; 0x24d2 <EXTI_u8INTSetCallBack+0xa8>
			{
				EXTI_ARRCALLBACK2FUNC[Local_u8counter]=Copy_pvINTFunc;
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
    24ba:	88 2f       	mov	r24, r24
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	88 0f       	add	r24, r24
    24c0:	99 1f       	adc	r25, r25
    24c2:	fc 01       	movw	r30, r24
    24c4:	ef 59       	subi	r30, 0x9F	; 159
    24c6:	fd 4f       	sbci	r31, 0xFD	; 253
    24c8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ca:	9e 81       	ldd	r25, Y+6	; 0x06
    24cc:	91 83       	std	Z+1, r25	; 0x01
    24ce:	80 83       	st	Z, r24
    24d0:	14 c0       	rjmp	.+40     	; 0x24fa <EXTI_u8INTSetCallBack+0xd0>
			}
			else
			{
				Local_u8ErrorStatus = NULL_POINTER;
    24d2:	1a 82       	std	Y+2, r1	; 0x02
    24d4:	12 c0       	rjmp	.+36     	; 0x24fa <EXTI_u8INTSetCallBack+0xd0>
			}
			break;
		case EXTI2:
			if(Copy_pvINTFunc != NULL)
    24d6:	8d 81       	ldd	r24, Y+5	; 0x05
    24d8:	9e 81       	ldd	r25, Y+6	; 0x06
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	69 f0       	breq	.+26     	; 0x24f8 <EXTI_u8INTSetCallBack+0xce>
			{
				EXTI_ARRCALLBACK2FUNC[Local_u8counter]=Copy_pvINTFunc;
    24de:	89 81       	ldd	r24, Y+1	; 0x01
    24e0:	88 2f       	mov	r24, r24
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	88 0f       	add	r24, r24
    24e6:	99 1f       	adc	r25, r25
    24e8:	fc 01       	movw	r30, r24
    24ea:	ef 59       	subi	r30, 0x9F	; 159
    24ec:	fd 4f       	sbci	r31, 0xFD	; 253
    24ee:	8d 81       	ldd	r24, Y+5	; 0x05
    24f0:	9e 81       	ldd	r25, Y+6	; 0x06
    24f2:	91 83       	std	Z+1, r25	; 0x01
    24f4:	80 83       	st	Z, r24
    24f6:	01 c0       	rjmp	.+2      	; 0x24fa <EXTI_u8INTSetCallBack+0xd0>
			}
			else
			{
				Local_u8ErrorStatus = NULL_POINTER;
    24f8:	1a 82       	std	Y+2, r1	; 0x02
}
u8 EXTI_u8INTSetCallBack(const EXT_I * ConfigArr,void (*Copy_pvINTFunc)(void))
{
	u8 Local_u8ErrorStatus=NO_ERROR;
	u8 Local_u8counter;
	for(Local_u8counter=0;Local_u8counter<3;Local_u8counter++)
    24fa:	89 81       	ldd	r24, Y+1	; 0x01
    24fc:	8f 5f       	subi	r24, 0xFF	; 255
    24fe:	89 83       	std	Y+1, r24	; 0x01
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	83 30       	cpi	r24, 0x03	; 3
    2504:	08 f4       	brcc	.+2      	; 0x2508 <EXTI_u8INTSetCallBack+0xde>
    2506:	a3 cf       	rjmp	.-186    	; 0x244e <EXTI_u8INTSetCallBack+0x24>
			}
			break;
		}
	}

	return Local_u8ErrorStatus;
    2508:	8a 81       	ldd	r24, Y+2	; 0x02
}
    250a:	28 96       	adiw	r28, 0x08	; 8
    250c:	0f b6       	in	r0, 0x3f	; 63
    250e:	f8 94       	cli
    2510:	de bf       	out	0x3e, r29	; 62
    2512:	0f be       	out	0x3f, r0	; 63
    2514:	cd bf       	out	0x3d, r28	; 61
    2516:	cf 91       	pop	r28
    2518:	df 91       	pop	r29
    251a:	08 95       	ret

0000251c <__vector_1>:

ISR(INT0_vect)
{
    251c:	1f 92       	push	r1
    251e:	0f 92       	push	r0
    2520:	0f b6       	in	r0, 0x3f	; 63
    2522:	0f 92       	push	r0
    2524:	11 24       	eor	r1, r1
    2526:	2f 93       	push	r18
    2528:	3f 93       	push	r19
    252a:	4f 93       	push	r20
    252c:	5f 93       	push	r21
    252e:	6f 93       	push	r22
    2530:	7f 93       	push	r23
    2532:	8f 93       	push	r24
    2534:	9f 93       	push	r25
    2536:	af 93       	push	r26
    2538:	bf 93       	push	r27
    253a:	ef 93       	push	r30
    253c:	ff 93       	push	r31
    253e:	df 93       	push	r29
    2540:	cf 93       	push	r28
    2542:	cd b7       	in	r28, 0x3d	; 61
    2544:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ARRCALLBACK2FUNC[0] != NULL)
    2546:	80 91 61 02 	lds	r24, 0x0261
    254a:	90 91 62 02 	lds	r25, 0x0262
    254e:	00 97       	sbiw	r24, 0x00	; 0
    2550:	29 f0       	breq	.+10     	; 0x255c <__vector_1+0x40>
		{
		EXTI_ARRCALLBACK2FUNC[0]();
    2552:	e0 91 61 02 	lds	r30, 0x0261
    2556:	f0 91 62 02 	lds	r31, 0x0262
    255a:	09 95       	icall
		}
		else
		{
			/*Stop*/
		}
}
    255c:	cf 91       	pop	r28
    255e:	df 91       	pop	r29
    2560:	ff 91       	pop	r31
    2562:	ef 91       	pop	r30
    2564:	bf 91       	pop	r27
    2566:	af 91       	pop	r26
    2568:	9f 91       	pop	r25
    256a:	8f 91       	pop	r24
    256c:	7f 91       	pop	r23
    256e:	6f 91       	pop	r22
    2570:	5f 91       	pop	r21
    2572:	4f 91       	pop	r20
    2574:	3f 91       	pop	r19
    2576:	2f 91       	pop	r18
    2578:	0f 90       	pop	r0
    257a:	0f be       	out	0x3f, r0	; 63
    257c:	0f 90       	pop	r0
    257e:	1f 90       	pop	r1
    2580:	18 95       	reti

00002582 <__vector_2>:
ISR(INT1_vect)
{
    2582:	1f 92       	push	r1
    2584:	0f 92       	push	r0
    2586:	0f b6       	in	r0, 0x3f	; 63
    2588:	0f 92       	push	r0
    258a:	11 24       	eor	r1, r1
    258c:	df 93       	push	r29
    258e:	cf 93       	push	r28
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62

}
    2594:	cf 91       	pop	r28
    2596:	df 91       	pop	r29
    2598:	0f 90       	pop	r0
    259a:	0f be       	out	0x3f, r0	; 63
    259c:	0f 90       	pop	r0
    259e:	1f 90       	pop	r1
    25a0:	18 95       	reti

000025a2 <__vector_3>:
ISR(INT2_vect)
{
    25a2:	1f 92       	push	r1
    25a4:	0f 92       	push	r0
    25a6:	0f b6       	in	r0, 0x3f	; 63
    25a8:	0f 92       	push	r0
    25aa:	11 24       	eor	r1, r1
    25ac:	df 93       	push	r29
    25ae:	cf 93       	push	r28
    25b0:	cd b7       	in	r28, 0x3d	; 61
    25b2:	de b7       	in	r29, 0x3e	; 62

}
    25b4:	cf 91       	pop	r28
    25b6:	df 91       	pop	r29
    25b8:	0f 90       	pop	r0
    25ba:	0f be       	out	0x3f, r0	; 63
    25bc:	0f 90       	pop	r0
    25be:	1f 90       	pop	r1
    25c0:	18 95       	reti

000025c2 <M_Dio_en_getPinValue>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : Dio_HIGH or DIO_LOW
******************************************/
Dio_LevelType  M_Dio_en_getPinValue(Dio_ChannelType ChannelId)
{
    25c2:	df 93       	push	r29
    25c4:	cf 93       	push	r28
    25c6:	00 d0       	rcall	.+0      	; 0x25c8 <M_Dio_en_getPinValue+0x6>
    25c8:	00 d0       	rcall	.+0      	; 0x25ca <M_Dio_en_getPinValue+0x8>
    25ca:	00 d0       	rcall	.+0      	; 0x25cc <M_Dio_en_getPinValue+0xa>
    25cc:	cd b7       	in	r28, 0x3d	; 61
    25ce:	de b7       	in	r29, 0x3e	; 62
    25d0:	8c 83       	std	Y+4, r24	; 0x04
	u8 pin = ChannelId % 10;
    25d2:	8c 81       	ldd	r24, Y+4	; 0x04
    25d4:	9a e0       	ldi	r25, 0x0A	; 10
    25d6:	69 2f       	mov	r22, r25
    25d8:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <__udivmodqi4>
    25dc:	89 2f       	mov	r24, r25
    25de:	8b 83       	std	Y+3, r24	; 0x03
	u8 port = ChannelId / 10;
    25e0:	8c 81       	ldd	r24, Y+4	; 0x04
    25e2:	9a e0       	ldi	r25, 0x0A	; 10
    25e4:	69 2f       	mov	r22, r25
    25e6:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <__udivmodqi4>
    25ea:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType Local_levelType;
	switch(port)
    25ec:	8a 81       	ldd	r24, Y+2	; 0x02
    25ee:	28 2f       	mov	r18, r24
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	3e 83       	std	Y+6, r19	; 0x06
    25f4:	2d 83       	std	Y+5, r18	; 0x05
    25f6:	4d 81       	ldd	r20, Y+5	; 0x05
    25f8:	5e 81       	ldd	r21, Y+6	; 0x06
    25fa:	42 30       	cpi	r20, 0x02	; 2
    25fc:	51 05       	cpc	r21, r1
    25fe:	41 f1       	breq	.+80     	; 0x2650 <M_Dio_en_getPinValue+0x8e>
    2600:	8d 81       	ldd	r24, Y+5	; 0x05
    2602:	9e 81       	ldd	r25, Y+6	; 0x06
    2604:	83 30       	cpi	r24, 0x03	; 3
    2606:	91 05       	cpc	r25, r1
    2608:	34 f4       	brge	.+12     	; 0x2616 <M_Dio_en_getPinValue+0x54>
    260a:	2d 81       	ldd	r18, Y+5	; 0x05
    260c:	3e 81       	ldd	r19, Y+6	; 0x06
    260e:	21 30       	cpi	r18, 0x01	; 1
    2610:	31 05       	cpc	r19, r1
    2612:	61 f0       	breq	.+24     	; 0x262c <M_Dio_en_getPinValue+0x6a>
    2614:	52 c0       	rjmp	.+164    	; 0x26ba <M_Dio_en_getPinValue+0xf8>
    2616:	4d 81       	ldd	r20, Y+5	; 0x05
    2618:	5e 81       	ldd	r21, Y+6	; 0x06
    261a:	43 30       	cpi	r20, 0x03	; 3
    261c:	51 05       	cpc	r21, r1
    261e:	51 f1       	breq	.+84     	; 0x2674 <M_Dio_en_getPinValue+0xb2>
    2620:	8d 81       	ldd	r24, Y+5	; 0x05
    2622:	9e 81       	ldd	r25, Y+6	; 0x06
    2624:	84 30       	cpi	r24, 0x04	; 4
    2626:	91 05       	cpc	r25, r1
    2628:	b9 f1       	breq	.+110    	; 0x2698 <M_Dio_en_getPinValue+0xd6>
    262a:	47 c0       	rjmp	.+142    	; 0x26ba <M_Dio_en_getPinValue+0xf8>
	{
	case DIO_PORTA :Local_levelType = GET_BIT( PINA_REG,pin);break;
    262c:	e9 e3       	ldi	r30, 0x39	; 57
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	28 2f       	mov	r18, r24
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	8b 81       	ldd	r24, Y+3	; 0x03
    2638:	88 2f       	mov	r24, r24
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	a9 01       	movw	r20, r18
    263e:	02 c0       	rjmp	.+4      	; 0x2644 <M_Dio_en_getPinValue+0x82>
    2640:	55 95       	asr	r21
    2642:	47 95       	ror	r20
    2644:	8a 95       	dec	r24
    2646:	e2 f7       	brpl	.-8      	; 0x2640 <M_Dio_en_getPinValue+0x7e>
    2648:	ca 01       	movw	r24, r20
    264a:	81 70       	andi	r24, 0x01	; 1
    264c:	89 83       	std	Y+1, r24	; 0x01
    264e:	35 c0       	rjmp	.+106    	; 0x26ba <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTB :Local_levelType = GET_BIT( PINB_REG,pin);break;
    2650:	e6 e3       	ldi	r30, 0x36	; 54
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	80 81       	ld	r24, Z
    2656:	28 2f       	mov	r18, r24
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	8b 81       	ldd	r24, Y+3	; 0x03
    265c:	88 2f       	mov	r24, r24
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	a9 01       	movw	r20, r18
    2662:	02 c0       	rjmp	.+4      	; 0x2668 <M_Dio_en_getPinValue+0xa6>
    2664:	55 95       	asr	r21
    2666:	47 95       	ror	r20
    2668:	8a 95       	dec	r24
    266a:	e2 f7       	brpl	.-8      	; 0x2664 <M_Dio_en_getPinValue+0xa2>
    266c:	ca 01       	movw	r24, r20
    266e:	81 70       	andi	r24, 0x01	; 1
    2670:	89 83       	std	Y+1, r24	; 0x01
    2672:	23 c0       	rjmp	.+70     	; 0x26ba <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTC :Local_levelType = GET_BIT( PINC_REG,pin);break;
    2674:	e3 e3       	ldi	r30, 0x33	; 51
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	80 81       	ld	r24, Z
    267a:	28 2f       	mov	r18, r24
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	8b 81       	ldd	r24, Y+3	; 0x03
    2680:	88 2f       	mov	r24, r24
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	a9 01       	movw	r20, r18
    2686:	02 c0       	rjmp	.+4      	; 0x268c <M_Dio_en_getPinValue+0xca>
    2688:	55 95       	asr	r21
    268a:	47 95       	ror	r20
    268c:	8a 95       	dec	r24
    268e:	e2 f7       	brpl	.-8      	; 0x2688 <M_Dio_en_getPinValue+0xc6>
    2690:	ca 01       	movw	r24, r20
    2692:	81 70       	andi	r24, 0x01	; 1
    2694:	89 83       	std	Y+1, r24	; 0x01
    2696:	11 c0       	rjmp	.+34     	; 0x26ba <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTD :Local_levelType = GET_BIT( PIND_REG,pin);break;
    2698:	e0 e3       	ldi	r30, 0x30	; 48
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	28 2f       	mov	r18, r24
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	88 2f       	mov	r24, r24
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	a9 01       	movw	r20, r18
    26aa:	02 c0       	rjmp	.+4      	; 0x26b0 <M_Dio_en_getPinValue+0xee>
    26ac:	55 95       	asr	r21
    26ae:	47 95       	ror	r20
    26b0:	8a 95       	dec	r24
    26b2:	e2 f7       	brpl	.-8      	; 0x26ac <M_Dio_en_getPinValue+0xea>
    26b4:	ca 01       	movw	r24, r20
    26b6:	81 70       	andi	r24, 0x01	; 1
    26b8:	89 83       	std	Y+1, r24	; 0x01
	}
    return Local_levelType ;
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    26bc:	26 96       	adiw	r28, 0x06	; 6
    26be:	0f b6       	in	r0, 0x3f	; 63
    26c0:	f8 94       	cli
    26c2:	de bf       	out	0x3e, r29	; 62
    26c4:	0f be       	out	0x3f, r0	; 63
    26c6:	cd bf       	out	0x3d, r28	; 61
    26c8:	cf 91       	pop	r28
    26ca:	df 91       	pop	r29
    26cc:	08 95       	ret

000026ce <M_Dio_void_setPinValue>:
  parameters (in)  :  channelId (pin) ,Level (Dio_HIGH or Dio_LOW)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPinValue(Dio_ChannelType ChannelId,Dio_LevelType Level)
{
    26ce:	df 93       	push	r29
    26d0:	cf 93       	push	r28
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
    26d6:	28 97       	sbiw	r28, 0x08	; 8
    26d8:	0f b6       	in	r0, 0x3f	; 63
    26da:	f8 94       	cli
    26dc:	de bf       	out	0x3e, r29	; 62
    26de:	0f be       	out	0x3f, r0	; 63
    26e0:	cd bf       	out	0x3d, r28	; 61
    26e2:	8b 83       	std	Y+3, r24	; 0x03
    26e4:	6c 83       	std	Y+4, r22	; 0x04
	u8 pin = ChannelId % 10;
    26e6:	8b 81       	ldd	r24, Y+3	; 0x03
    26e8:	9a e0       	ldi	r25, 0x0A	; 10
    26ea:	69 2f       	mov	r22, r25
    26ec:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <__udivmodqi4>
    26f0:	89 2f       	mov	r24, r25
    26f2:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = ChannelId / 10;
    26f4:	8b 81       	ldd	r24, Y+3	; 0x03
    26f6:	9a e0       	ldi	r25, 0x0A	; 10
    26f8:	69 2f       	mov	r22, r25
    26fa:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <__udivmodqi4>
    26fe:	89 83       	std	Y+1, r24	; 0x01

	if(Level == DIO_HIGH)
    2700:	8c 81       	ldd	r24, Y+4	; 0x04
    2702:	81 30       	cpi	r24, 0x01	; 1
    2704:	09 f0       	breq	.+2      	; 0x2708 <M_Dio_void_setPinValue+0x3a>
    2706:	70 c0       	rjmp	.+224    	; 0x27e8 <M_Dio_void_setPinValue+0x11a>
	{
		switch(port)
    2708:	89 81       	ldd	r24, Y+1	; 0x01
    270a:	28 2f       	mov	r18, r24
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	38 87       	std	Y+8, r19	; 0x08
    2710:	2f 83       	std	Y+7, r18	; 0x07
    2712:	8f 81       	ldd	r24, Y+7	; 0x07
    2714:	98 85       	ldd	r25, Y+8	; 0x08
    2716:	82 30       	cpi	r24, 0x02	; 2
    2718:	91 05       	cpc	r25, r1
    271a:	51 f1       	breq	.+84     	; 0x2770 <M_Dio_void_setPinValue+0xa2>
    271c:	2f 81       	ldd	r18, Y+7	; 0x07
    271e:	38 85       	ldd	r19, Y+8	; 0x08
    2720:	23 30       	cpi	r18, 0x03	; 3
    2722:	31 05       	cpc	r19, r1
    2724:	34 f4       	brge	.+12     	; 0x2732 <M_Dio_void_setPinValue+0x64>
    2726:	8f 81       	ldd	r24, Y+7	; 0x07
    2728:	98 85       	ldd	r25, Y+8	; 0x08
    272a:	81 30       	cpi	r24, 0x01	; 1
    272c:	91 05       	cpc	r25, r1
    272e:	61 f0       	breq	.+24     	; 0x2748 <M_Dio_void_setPinValue+0x7a>
    2730:	d3 c0       	rjmp	.+422    	; 0x28d8 <M_Dio_void_setPinValue+0x20a>
    2732:	2f 81       	ldd	r18, Y+7	; 0x07
    2734:	38 85       	ldd	r19, Y+8	; 0x08
    2736:	23 30       	cpi	r18, 0x03	; 3
    2738:	31 05       	cpc	r19, r1
    273a:	71 f1       	breq	.+92     	; 0x2798 <M_Dio_void_setPinValue+0xca>
    273c:	8f 81       	ldd	r24, Y+7	; 0x07
    273e:	98 85       	ldd	r25, Y+8	; 0x08
    2740:	84 30       	cpi	r24, 0x04	; 4
    2742:	91 05       	cpc	r25, r1
    2744:	e9 f1       	breq	.+122    	; 0x27c0 <M_Dio_void_setPinValue+0xf2>
    2746:	c8 c0       	rjmp	.+400    	; 0x28d8 <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : SET_BIT( PORTA_REG,pin);break;
    2748:	ab e3       	ldi	r26, 0x3B	; 59
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	eb e3       	ldi	r30, 0x3B	; 59
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	48 2f       	mov	r20, r24
    2754:	8a 81       	ldd	r24, Y+2	; 0x02
    2756:	28 2f       	mov	r18, r24
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	02 2e       	mov	r0, r18
    2760:	02 c0       	rjmp	.+4      	; 0x2766 <M_Dio_void_setPinValue+0x98>
    2762:	88 0f       	add	r24, r24
    2764:	99 1f       	adc	r25, r25
    2766:	0a 94       	dec	r0
    2768:	e2 f7       	brpl	.-8      	; 0x2762 <M_Dio_void_setPinValue+0x94>
    276a:	84 2b       	or	r24, r20
    276c:	8c 93       	st	X, r24
    276e:	b4 c0       	rjmp	.+360    	; 0x28d8 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : SET_BIT( PORTB_REG,pin);break;
    2770:	a8 e3       	ldi	r26, 0x38	; 56
    2772:	b0 e0       	ldi	r27, 0x00	; 0
    2774:	e8 e3       	ldi	r30, 0x38	; 56
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	80 81       	ld	r24, Z
    277a:	48 2f       	mov	r20, r24
    277c:	8a 81       	ldd	r24, Y+2	; 0x02
    277e:	28 2f       	mov	r18, r24
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	02 2e       	mov	r0, r18
    2788:	02 c0       	rjmp	.+4      	; 0x278e <M_Dio_void_setPinValue+0xc0>
    278a:	88 0f       	add	r24, r24
    278c:	99 1f       	adc	r25, r25
    278e:	0a 94       	dec	r0
    2790:	e2 f7       	brpl	.-8      	; 0x278a <M_Dio_void_setPinValue+0xbc>
    2792:	84 2b       	or	r24, r20
    2794:	8c 93       	st	X, r24
    2796:	a0 c0       	rjmp	.+320    	; 0x28d8 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : SET_BIT( PORTC_REG,pin);break;
    2798:	a5 e3       	ldi	r26, 0x35	; 53
    279a:	b0 e0       	ldi	r27, 0x00	; 0
    279c:	e5 e3       	ldi	r30, 0x35	; 53
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	80 81       	ld	r24, Z
    27a2:	48 2f       	mov	r20, r24
    27a4:	8a 81       	ldd	r24, Y+2	; 0x02
    27a6:	28 2f       	mov	r18, r24
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	02 2e       	mov	r0, r18
    27b0:	02 c0       	rjmp	.+4      	; 0x27b6 <M_Dio_void_setPinValue+0xe8>
    27b2:	88 0f       	add	r24, r24
    27b4:	99 1f       	adc	r25, r25
    27b6:	0a 94       	dec	r0
    27b8:	e2 f7       	brpl	.-8      	; 0x27b2 <M_Dio_void_setPinValue+0xe4>
    27ba:	84 2b       	or	r24, r20
    27bc:	8c 93       	st	X, r24
    27be:	8c c0       	rjmp	.+280    	; 0x28d8 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : SET_BIT( PORTD_REG,pin);break;
    27c0:	a2 e3       	ldi	r26, 0x32	; 50
    27c2:	b0 e0       	ldi	r27, 0x00	; 0
    27c4:	e2 e3       	ldi	r30, 0x32	; 50
    27c6:	f0 e0       	ldi	r31, 0x00	; 0
    27c8:	80 81       	ld	r24, Z
    27ca:	48 2f       	mov	r20, r24
    27cc:	8a 81       	ldd	r24, Y+2	; 0x02
    27ce:	28 2f       	mov	r18, r24
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	02 2e       	mov	r0, r18
    27d8:	02 c0       	rjmp	.+4      	; 0x27de <M_Dio_void_setPinValue+0x110>
    27da:	88 0f       	add	r24, r24
    27dc:	99 1f       	adc	r25, r25
    27de:	0a 94       	dec	r0
    27e0:	e2 f7       	brpl	.-8      	; 0x27da <M_Dio_void_setPinValue+0x10c>
    27e2:	84 2b       	or	r24, r20
    27e4:	8c 93       	st	X, r24
    27e6:	78 c0       	rjmp	.+240    	; 0x28d8 <M_Dio_void_setPinValue+0x20a>
		}

	}
	else if (Level == DIO_LOW)
    27e8:	8c 81       	ldd	r24, Y+4	; 0x04
    27ea:	88 23       	and	r24, r24
    27ec:	09 f0       	breq	.+2      	; 0x27f0 <M_Dio_void_setPinValue+0x122>
    27ee:	74 c0       	rjmp	.+232    	; 0x28d8 <M_Dio_void_setPinValue+0x20a>
	{
		switch(port)
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
    27f2:	28 2f       	mov	r18, r24
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	3e 83       	std	Y+6, r19	; 0x06
    27f8:	2d 83       	std	Y+5, r18	; 0x05
    27fa:	8d 81       	ldd	r24, Y+5	; 0x05
    27fc:	9e 81       	ldd	r25, Y+6	; 0x06
    27fe:	82 30       	cpi	r24, 0x02	; 2
    2800:	91 05       	cpc	r25, r1
    2802:	61 f1       	breq	.+88     	; 0x285c <M_Dio_void_setPinValue+0x18e>
    2804:	2d 81       	ldd	r18, Y+5	; 0x05
    2806:	3e 81       	ldd	r19, Y+6	; 0x06
    2808:	23 30       	cpi	r18, 0x03	; 3
    280a:	31 05       	cpc	r19, r1
    280c:	34 f4       	brge	.+12     	; 0x281a <M_Dio_void_setPinValue+0x14c>
    280e:	8d 81       	ldd	r24, Y+5	; 0x05
    2810:	9e 81       	ldd	r25, Y+6	; 0x06
    2812:	81 30       	cpi	r24, 0x01	; 1
    2814:	91 05       	cpc	r25, r1
    2816:	69 f0       	breq	.+26     	; 0x2832 <M_Dio_void_setPinValue+0x164>
    2818:	5f c0       	rjmp	.+190    	; 0x28d8 <M_Dio_void_setPinValue+0x20a>
    281a:	2d 81       	ldd	r18, Y+5	; 0x05
    281c:	3e 81       	ldd	r19, Y+6	; 0x06
    281e:	23 30       	cpi	r18, 0x03	; 3
    2820:	31 05       	cpc	r19, r1
    2822:	89 f1       	breq	.+98     	; 0x2886 <M_Dio_void_setPinValue+0x1b8>
    2824:	8d 81       	ldd	r24, Y+5	; 0x05
    2826:	9e 81       	ldd	r25, Y+6	; 0x06
    2828:	84 30       	cpi	r24, 0x04	; 4
    282a:	91 05       	cpc	r25, r1
    282c:	09 f4       	brne	.+2      	; 0x2830 <M_Dio_void_setPinValue+0x162>
    282e:	40 c0       	rjmp	.+128    	; 0x28b0 <M_Dio_void_setPinValue+0x1e2>
    2830:	53 c0       	rjmp	.+166    	; 0x28d8 <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : CLR_BIT( PORTA_REG,pin);break;
    2832:	ab e3       	ldi	r26, 0x3B	; 59
    2834:	b0 e0       	ldi	r27, 0x00	; 0
    2836:	eb e3       	ldi	r30, 0x3B	; 59
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	80 81       	ld	r24, Z
    283c:	48 2f       	mov	r20, r24
    283e:	8a 81       	ldd	r24, Y+2	; 0x02
    2840:	28 2f       	mov	r18, r24
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	02 2e       	mov	r0, r18
    284a:	02 c0       	rjmp	.+4      	; 0x2850 <M_Dio_void_setPinValue+0x182>
    284c:	88 0f       	add	r24, r24
    284e:	99 1f       	adc	r25, r25
    2850:	0a 94       	dec	r0
    2852:	e2 f7       	brpl	.-8      	; 0x284c <M_Dio_void_setPinValue+0x17e>
    2854:	80 95       	com	r24
    2856:	84 23       	and	r24, r20
    2858:	8c 93       	st	X, r24
    285a:	3e c0       	rjmp	.+124    	; 0x28d8 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : CLR_BIT( PORTB_REG,pin);break;
    285c:	a8 e3       	ldi	r26, 0x38	; 56
    285e:	b0 e0       	ldi	r27, 0x00	; 0
    2860:	e8 e3       	ldi	r30, 0x38	; 56
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	80 81       	ld	r24, Z
    2866:	48 2f       	mov	r20, r24
    2868:	8a 81       	ldd	r24, Y+2	; 0x02
    286a:	28 2f       	mov	r18, r24
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	02 2e       	mov	r0, r18
    2874:	02 c0       	rjmp	.+4      	; 0x287a <M_Dio_void_setPinValue+0x1ac>
    2876:	88 0f       	add	r24, r24
    2878:	99 1f       	adc	r25, r25
    287a:	0a 94       	dec	r0
    287c:	e2 f7       	brpl	.-8      	; 0x2876 <M_Dio_void_setPinValue+0x1a8>
    287e:	80 95       	com	r24
    2880:	84 23       	and	r24, r20
    2882:	8c 93       	st	X, r24
    2884:	29 c0       	rjmp	.+82     	; 0x28d8 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : CLR_BIT( PORTC_REG,pin);break;
    2886:	a5 e3       	ldi	r26, 0x35	; 53
    2888:	b0 e0       	ldi	r27, 0x00	; 0
    288a:	e5 e3       	ldi	r30, 0x35	; 53
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	80 81       	ld	r24, Z
    2890:	48 2f       	mov	r20, r24
    2892:	8a 81       	ldd	r24, Y+2	; 0x02
    2894:	28 2f       	mov	r18, r24
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	02 2e       	mov	r0, r18
    289e:	02 c0       	rjmp	.+4      	; 0x28a4 <M_Dio_void_setPinValue+0x1d6>
    28a0:	88 0f       	add	r24, r24
    28a2:	99 1f       	adc	r25, r25
    28a4:	0a 94       	dec	r0
    28a6:	e2 f7       	brpl	.-8      	; 0x28a0 <M_Dio_void_setPinValue+0x1d2>
    28a8:	80 95       	com	r24
    28aa:	84 23       	and	r24, r20
    28ac:	8c 93       	st	X, r24
    28ae:	14 c0       	rjmp	.+40     	; 0x28d8 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : CLR_BIT( PORTD_REG,pin);break;
    28b0:	a2 e3       	ldi	r26, 0x32	; 50
    28b2:	b0 e0       	ldi	r27, 0x00	; 0
    28b4:	e2 e3       	ldi	r30, 0x32	; 50
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	80 81       	ld	r24, Z
    28ba:	48 2f       	mov	r20, r24
    28bc:	8a 81       	ldd	r24, Y+2	; 0x02
    28be:	28 2f       	mov	r18, r24
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	02 2e       	mov	r0, r18
    28c8:	02 c0       	rjmp	.+4      	; 0x28ce <M_Dio_void_setPinValue+0x200>
    28ca:	88 0f       	add	r24, r24
    28cc:	99 1f       	adc	r25, r25
    28ce:	0a 94       	dec	r0
    28d0:	e2 f7       	brpl	.-8      	; 0x28ca <M_Dio_void_setPinValue+0x1fc>
    28d2:	80 95       	com	r24
    28d4:	84 23       	and	r24, r20
    28d6:	8c 93       	st	X, r24
		}

	}

}
    28d8:	28 96       	adiw	r28, 0x08	; 8
    28da:	0f b6       	in	r0, 0x3f	; 63
    28dc:	f8 94       	cli
    28de:	de bf       	out	0x3e, r29	; 62
    28e0:	0f be       	out	0x3f, r0	; 63
    28e2:	cd bf       	out	0x3d, r28	; 61
    28e4:	cf 91       	pop	r28
    28e6:	df 91       	pop	r29
    28e8:	08 95       	ret

000028ea <M_Dio_en_getPortValue>:
  parameters (in)  :  PortId
  parameters (out) :  Non
  Return Value     : Dio_PortLevelType
******************************************/
Dio_PortLevelType M_Dio_en_getPortValue(Dio_PortType PortId)
{
    28ea:	df 93       	push	r29
    28ec:	cf 93       	push	r28
    28ee:	00 d0       	rcall	.+0      	; 0x28f0 <M_Dio_en_getPortValue+0x6>
    28f0:	00 d0       	rcall	.+0      	; 0x28f2 <M_Dio_en_getPortValue+0x8>
    28f2:	cd b7       	in	r28, 0x3d	; 61
    28f4:	de b7       	in	r29, 0x3e	; 62
    28f6:	8a 83       	std	Y+2, r24	; 0x02
	Dio_PortLevelType Local_Reading;

	switch( PortId)
    28f8:	8a 81       	ldd	r24, Y+2	; 0x02
    28fa:	28 2f       	mov	r18, r24
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	3c 83       	std	Y+4, r19	; 0x04
    2900:	2b 83       	std	Y+3, r18	; 0x03
    2902:	8b 81       	ldd	r24, Y+3	; 0x03
    2904:	9c 81       	ldd	r25, Y+4	; 0x04
    2906:	82 30       	cpi	r24, 0x02	; 2
    2908:	91 05       	cpc	r25, r1
    290a:	d9 f0       	breq	.+54     	; 0x2942 <M_Dio_en_getPortValue+0x58>
    290c:	2b 81       	ldd	r18, Y+3	; 0x03
    290e:	3c 81       	ldd	r19, Y+4	; 0x04
    2910:	23 30       	cpi	r18, 0x03	; 3
    2912:	31 05       	cpc	r19, r1
    2914:	34 f4       	brge	.+12     	; 0x2922 <M_Dio_en_getPortValue+0x38>
    2916:	8b 81       	ldd	r24, Y+3	; 0x03
    2918:	9c 81       	ldd	r25, Y+4	; 0x04
    291a:	81 30       	cpi	r24, 0x01	; 1
    291c:	91 05       	cpc	r25, r1
    291e:	61 f0       	breq	.+24     	; 0x2938 <M_Dio_en_getPortValue+0x4e>
    2920:	1e c0       	rjmp	.+60     	; 0x295e <M_Dio_en_getPortValue+0x74>
    2922:	2b 81       	ldd	r18, Y+3	; 0x03
    2924:	3c 81       	ldd	r19, Y+4	; 0x04
    2926:	23 30       	cpi	r18, 0x03	; 3
    2928:	31 05       	cpc	r19, r1
    292a:	81 f0       	breq	.+32     	; 0x294c <M_Dio_en_getPortValue+0x62>
    292c:	8b 81       	ldd	r24, Y+3	; 0x03
    292e:	9c 81       	ldd	r25, Y+4	; 0x04
    2930:	84 30       	cpi	r24, 0x04	; 4
    2932:	91 05       	cpc	r25, r1
    2934:	81 f0       	breq	.+32     	; 0x2956 <M_Dio_en_getPortValue+0x6c>
    2936:	13 c0       	rjmp	.+38     	; 0x295e <M_Dio_en_getPortValue+0x74>
	{
	case DIO_PORTA :Local_Reading =  PORTA_REG;break;
    2938:	eb e3       	ldi	r30, 0x3B	; 59
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	80 81       	ld	r24, Z
    293e:	89 83       	std	Y+1, r24	; 0x01
    2940:	0e c0       	rjmp	.+28     	; 0x295e <M_Dio_en_getPortValue+0x74>
	case DIO_PORTB :Local_Reading =  PORTB_REG;break;
    2942:	e8 e3       	ldi	r30, 0x38	; 56
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	80 81       	ld	r24, Z
    2948:	89 83       	std	Y+1, r24	; 0x01
    294a:	09 c0       	rjmp	.+18     	; 0x295e <M_Dio_en_getPortValue+0x74>
	case DIO_PORTC :Local_Reading =  PORTC_REG;break;
    294c:	e5 e3       	ldi	r30, 0x35	; 53
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	80 81       	ld	r24, Z
    2952:	89 83       	std	Y+1, r24	; 0x01
    2954:	04 c0       	rjmp	.+8      	; 0x295e <M_Dio_en_getPortValue+0x74>
	case DIO_PORTD :Local_Reading =  PORTD_REG;break;
    2956:	e2 e3       	ldi	r30, 0x32	; 50
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	80 81       	ld	r24, Z
    295c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_Reading;
    295e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2960:	0f 90       	pop	r0
    2962:	0f 90       	pop	r0
    2964:	0f 90       	pop	r0
    2966:	0f 90       	pop	r0
    2968:	cf 91       	pop	r28
    296a:	df 91       	pop	r29
    296c:	08 95       	ret

0000296e <M_Dio_void_setPortValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPortValue(Dio_PortType PortId,Dio_PortLevelType Level)
{
    296e:	df 93       	push	r29
    2970:	cf 93       	push	r28
    2972:	00 d0       	rcall	.+0      	; 0x2974 <M_Dio_void_setPortValue+0x6>
    2974:	00 d0       	rcall	.+0      	; 0x2976 <M_Dio_void_setPortValue+0x8>
    2976:	cd b7       	in	r28, 0x3d	; 61
    2978:	de b7       	in	r29, 0x3e	; 62
    297a:	89 83       	std	Y+1, r24	; 0x01
    297c:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortId)
    297e:	89 81       	ldd	r24, Y+1	; 0x01
    2980:	28 2f       	mov	r18, r24
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	3c 83       	std	Y+4, r19	; 0x04
    2986:	2b 83       	std	Y+3, r18	; 0x03
    2988:	8b 81       	ldd	r24, Y+3	; 0x03
    298a:	9c 81       	ldd	r25, Y+4	; 0x04
    298c:	82 30       	cpi	r24, 0x02	; 2
    298e:	91 05       	cpc	r25, r1
    2990:	d9 f0       	breq	.+54     	; 0x29c8 <M_Dio_void_setPortValue+0x5a>
    2992:	2b 81       	ldd	r18, Y+3	; 0x03
    2994:	3c 81       	ldd	r19, Y+4	; 0x04
    2996:	23 30       	cpi	r18, 0x03	; 3
    2998:	31 05       	cpc	r19, r1
    299a:	34 f4       	brge	.+12     	; 0x29a8 <M_Dio_void_setPortValue+0x3a>
    299c:	8b 81       	ldd	r24, Y+3	; 0x03
    299e:	9c 81       	ldd	r25, Y+4	; 0x04
    29a0:	81 30       	cpi	r24, 0x01	; 1
    29a2:	91 05       	cpc	r25, r1
    29a4:	61 f0       	breq	.+24     	; 0x29be <M_Dio_void_setPortValue+0x50>
    29a6:	1e c0       	rjmp	.+60     	; 0x29e4 <M_Dio_void_setPortValue+0x76>
    29a8:	2b 81       	ldd	r18, Y+3	; 0x03
    29aa:	3c 81       	ldd	r19, Y+4	; 0x04
    29ac:	23 30       	cpi	r18, 0x03	; 3
    29ae:	31 05       	cpc	r19, r1
    29b0:	81 f0       	breq	.+32     	; 0x29d2 <M_Dio_void_setPortValue+0x64>
    29b2:	8b 81       	ldd	r24, Y+3	; 0x03
    29b4:	9c 81       	ldd	r25, Y+4	; 0x04
    29b6:	84 30       	cpi	r24, 0x04	; 4
    29b8:	91 05       	cpc	r25, r1
    29ba:	81 f0       	breq	.+32     	; 0x29dc <M_Dio_void_setPortValue+0x6e>
    29bc:	13 c0       	rjmp	.+38     	; 0x29e4 <M_Dio_void_setPortValue+0x76>
	{
    	case DIO_PORTA : PORTA_REG = Level;break;
    29be:	eb e3       	ldi	r30, 0x3B	; 59
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	8a 81       	ldd	r24, Y+2	; 0x02
    29c4:	80 83       	st	Z, r24
    29c6:	0e c0       	rjmp	.+28     	; 0x29e4 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTB : PORTB_REG = Level;break;
    29c8:	e8 e3       	ldi	r30, 0x38	; 56
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	8a 81       	ldd	r24, Y+2	; 0x02
    29ce:	80 83       	st	Z, r24
    29d0:	09 c0       	rjmp	.+18     	; 0x29e4 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTC : PORTC_REG = Level;break;
    29d2:	e5 e3       	ldi	r30, 0x35	; 53
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	8a 81       	ldd	r24, Y+2	; 0x02
    29d8:	80 83       	st	Z, r24
    29da:	04 c0       	rjmp	.+8      	; 0x29e4 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTD : PORTD_REG = Level;break;
    29dc:	e2 e3       	ldi	r30, 0x32	; 50
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	8a 81       	ldd	r24, Y+2	; 0x02
    29e2:	80 83       	st	Z, r24
	}
}
    29e4:	0f 90       	pop	r0
    29e6:	0f 90       	pop	r0
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
    29ec:	cf 91       	pop	r28
    29ee:	df 91       	pop	r29
    29f0:	08 95       	ret

000029f2 <M_Dio_void_togglePinValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_togglePinValue(Dio_ChannelType channelId)
{
    29f2:	df 93       	push	r29
    29f4:	cf 93       	push	r28
    29f6:	00 d0       	rcall	.+0      	; 0x29f8 <M_Dio_void_togglePinValue+0x6>
    29f8:	00 d0       	rcall	.+0      	; 0x29fa <M_Dio_void_togglePinValue+0x8>
    29fa:	0f 92       	push	r0
    29fc:	cd b7       	in	r28, 0x3d	; 61
    29fe:	de b7       	in	r29, 0x3e	; 62
    2a00:	8b 83       	std	Y+3, r24	; 0x03
	u8 pin = channelId % 10;
    2a02:	8b 81       	ldd	r24, Y+3	; 0x03
    2a04:	9a e0       	ldi	r25, 0x0A	; 10
    2a06:	69 2f       	mov	r22, r25
    2a08:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <__udivmodqi4>
    2a0c:	89 2f       	mov	r24, r25
    2a0e:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = channelId/ 10;
    2a10:	8b 81       	ldd	r24, Y+3	; 0x03
    2a12:	9a e0       	ldi	r25, 0x0A	; 10
    2a14:	69 2f       	mov	r22, r25
    2a16:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <__udivmodqi4>
    2a1a:	89 83       	std	Y+1, r24	; 0x01

	switch(port)
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	28 2f       	mov	r18, r24
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	3d 83       	std	Y+5, r19	; 0x05
    2a24:	2c 83       	std	Y+4, r18	; 0x04
    2a26:	8c 81       	ldd	r24, Y+4	; 0x04
    2a28:	9d 81       	ldd	r25, Y+5	; 0x05
    2a2a:	82 30       	cpi	r24, 0x02	; 2
    2a2c:	91 05       	cpc	r25, r1
    2a2e:	51 f1       	breq	.+84     	; 0x2a84 <M_Dio_void_togglePinValue+0x92>
    2a30:	2c 81       	ldd	r18, Y+4	; 0x04
    2a32:	3d 81       	ldd	r19, Y+5	; 0x05
    2a34:	23 30       	cpi	r18, 0x03	; 3
    2a36:	31 05       	cpc	r19, r1
    2a38:	34 f4       	brge	.+12     	; 0x2a46 <M_Dio_void_togglePinValue+0x54>
    2a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a3c:	9d 81       	ldd	r25, Y+5	; 0x05
    2a3e:	81 30       	cpi	r24, 0x01	; 1
    2a40:	91 05       	cpc	r25, r1
    2a42:	61 f0       	breq	.+24     	; 0x2a5c <M_Dio_void_togglePinValue+0x6a>
    2a44:	5a c0       	rjmp	.+180    	; 0x2afa <M_Dio_void_togglePinValue+0x108>
    2a46:	2c 81       	ldd	r18, Y+4	; 0x04
    2a48:	3d 81       	ldd	r19, Y+5	; 0x05
    2a4a:	23 30       	cpi	r18, 0x03	; 3
    2a4c:	31 05       	cpc	r19, r1
    2a4e:	71 f1       	breq	.+92     	; 0x2aac <M_Dio_void_togglePinValue+0xba>
    2a50:	8c 81       	ldd	r24, Y+4	; 0x04
    2a52:	9d 81       	ldd	r25, Y+5	; 0x05
    2a54:	84 30       	cpi	r24, 0x04	; 4
    2a56:	91 05       	cpc	r25, r1
    2a58:	e9 f1       	breq	.+122    	; 0x2ad4 <M_Dio_void_togglePinValue+0xe2>
    2a5a:	4f c0       	rjmp	.+158    	; 0x2afa <M_Dio_void_togglePinValue+0x108>
	{
	case DIO_PORTA :TOG_BIT( PORTA_REG,pin);break;
    2a5c:	ab e3       	ldi	r26, 0x3B	; 59
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	eb e3       	ldi	r30, 0x3B	; 59
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
    2a66:	48 2f       	mov	r20, r24
    2a68:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6a:	28 2f       	mov	r18, r24
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	02 2e       	mov	r0, r18
    2a74:	02 c0       	rjmp	.+4      	; 0x2a7a <M_Dio_void_togglePinValue+0x88>
    2a76:	88 0f       	add	r24, r24
    2a78:	99 1f       	adc	r25, r25
    2a7a:	0a 94       	dec	r0
    2a7c:	e2 f7       	brpl	.-8      	; 0x2a76 <M_Dio_void_togglePinValue+0x84>
    2a7e:	84 27       	eor	r24, r20
    2a80:	8c 93       	st	X, r24
    2a82:	3b c0       	rjmp	.+118    	; 0x2afa <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTB :TOG_BIT( PORTB_REG,pin);break;
    2a84:	a8 e3       	ldi	r26, 0x38	; 56
    2a86:	b0 e0       	ldi	r27, 0x00	; 0
    2a88:	e8 e3       	ldi	r30, 0x38	; 56
    2a8a:	f0 e0       	ldi	r31, 0x00	; 0
    2a8c:	80 81       	ld	r24, Z
    2a8e:	48 2f       	mov	r20, r24
    2a90:	8a 81       	ldd	r24, Y+2	; 0x02
    2a92:	28 2f       	mov	r18, r24
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	02 2e       	mov	r0, r18
    2a9c:	02 c0       	rjmp	.+4      	; 0x2aa2 <M_Dio_void_togglePinValue+0xb0>
    2a9e:	88 0f       	add	r24, r24
    2aa0:	99 1f       	adc	r25, r25
    2aa2:	0a 94       	dec	r0
    2aa4:	e2 f7       	brpl	.-8      	; 0x2a9e <M_Dio_void_togglePinValue+0xac>
    2aa6:	84 27       	eor	r24, r20
    2aa8:	8c 93       	st	X, r24
    2aaa:	27 c0       	rjmp	.+78     	; 0x2afa <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTC :TOG_BIT( PORTC_REG,pin);break;
    2aac:	a5 e3       	ldi	r26, 0x35	; 53
    2aae:	b0 e0       	ldi	r27, 0x00	; 0
    2ab0:	e5 e3       	ldi	r30, 0x35	; 53
    2ab2:	f0 e0       	ldi	r31, 0x00	; 0
    2ab4:	80 81       	ld	r24, Z
    2ab6:	48 2f       	mov	r20, r24
    2ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aba:	28 2f       	mov	r18, r24
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	02 2e       	mov	r0, r18
    2ac4:	02 c0       	rjmp	.+4      	; 0x2aca <M_Dio_void_togglePinValue+0xd8>
    2ac6:	88 0f       	add	r24, r24
    2ac8:	99 1f       	adc	r25, r25
    2aca:	0a 94       	dec	r0
    2acc:	e2 f7       	brpl	.-8      	; 0x2ac6 <M_Dio_void_togglePinValue+0xd4>
    2ace:	84 27       	eor	r24, r20
    2ad0:	8c 93       	st	X, r24
    2ad2:	13 c0       	rjmp	.+38     	; 0x2afa <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTD :TOG_BIT( PORTD_REG,pin);break;
    2ad4:	a2 e3       	ldi	r26, 0x32	; 50
    2ad6:	b0 e0       	ldi	r27, 0x00	; 0
    2ad8:	e2 e3       	ldi	r30, 0x32	; 50
    2ada:	f0 e0       	ldi	r31, 0x00	; 0
    2adc:	80 81       	ld	r24, Z
    2ade:	48 2f       	mov	r20, r24
    2ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae2:	28 2f       	mov	r18, r24
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	02 2e       	mov	r0, r18
    2aec:	02 c0       	rjmp	.+4      	; 0x2af2 <M_Dio_void_togglePinValue+0x100>
    2aee:	88 0f       	add	r24, r24
    2af0:	99 1f       	adc	r25, r25
    2af2:	0a 94       	dec	r0
    2af4:	e2 f7       	brpl	.-8      	; 0x2aee <M_Dio_void_togglePinValue+0xfc>
    2af6:	84 27       	eor	r24, r20
    2af8:	8c 93       	st	X, r24
	}

}
    2afa:	0f 90       	pop	r0
    2afc:	0f 90       	pop	r0
    2afe:	0f 90       	pop	r0
    2b00:	0f 90       	pop	r0
    2b02:	0f 90       	pop	r0
    2b04:	cf 91       	pop	r28
    2b06:	df 91       	pop	r29
    2b08:	08 95       	ret

00002b0a <ADC_Init>:
#include"ADC_Types.h"
#include"ADC_Init.h"
#include<avr/interrupt.h>
static void (*ADC_Ptr_To_Func)(void) =NULL;
Error_States_ADC ADC_Init(ADC_ConfigType *Ptr_to_ADC)
{
    2b0a:	df 93       	push	r29
    2b0c:	cf 93       	push	r28
    2b0e:	00 d0       	rcall	.+0      	; 0x2b10 <ADC_Init+0x6>
    2b10:	0f 92       	push	r0
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
    2b16:	9b 83       	std	Y+3, r25	; 0x03
    2b18:	8a 83       	std	Y+2, r24	; 0x02
	Error_States_ADC Error_state= Valid;
    2b1a:	19 82       	std	Y+1, r1	; 0x01
	if(Ptr_to_ADC->Voltage_Ref_Value==VCC_5V)
    2b1c:	ea 81       	ldd	r30, Y+2	; 0x02
    2b1e:	fb 81       	ldd	r31, Y+3	; 0x03
    2b20:	80 81       	ld	r24, Z
    2b22:	88 23       	and	r24, r24
    2b24:	79 f4       	brne	.+30     	; 0x2b44 <ADC_Init+0x3a>
	{
		/*select 5v*/
		CLR_BIT(ADMUX,ADMUX_REFS0);
    2b26:	a7 e2       	ldi	r26, 0x27	; 39
    2b28:	b0 e0       	ldi	r27, 0x00	; 0
    2b2a:	e7 e2       	ldi	r30, 0x27	; 39
    2b2c:	f0 e0       	ldi	r31, 0x00	; 0
    2b2e:	80 81       	ld	r24, Z
    2b30:	8f 7b       	andi	r24, 0xBF	; 191
    2b32:	8c 93       	st	X, r24
		SET_BIT(ADMUX,ADMUX_REFS1);
    2b34:	a7 e2       	ldi	r26, 0x27	; 39
    2b36:	b0 e0       	ldi	r27, 0x00	; 0
    2b38:	e7 e2       	ldi	r30, 0x27	; 39
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	80 81       	ld	r24, Z
    2b3e:	80 68       	ori	r24, 0x80	; 128
    2b40:	8c 93       	st	X, r24
    2b42:	13 c0       	rjmp	.+38     	; 0x2b6a <ADC_Init+0x60>

	}
	else if(Ptr_to_ADC->Voltage_Ref_Value==VREF_2_5_V)
    2b44:	ea 81       	ldd	r30, Y+2	; 0x02
    2b46:	fb 81       	ldd	r31, Y+3	; 0x03
    2b48:	80 81       	ld	r24, Z
    2b4a:	81 30       	cpi	r24, 0x01	; 1
    2b4c:	71 f4       	brne	.+28     	; 0x2b6a <ADC_Init+0x60>
	{
		/*select 2.56v*/
		SET_BIT(ADMUX,ADMUX_REFS0);
    2b4e:	a7 e2       	ldi	r26, 0x27	; 39
    2b50:	b0 e0       	ldi	r27, 0x00	; 0
    2b52:	e7 e2       	ldi	r30, 0x27	; 39
    2b54:	f0 e0       	ldi	r31, 0x00	; 0
    2b56:	80 81       	ld	r24, Z
    2b58:	80 64       	ori	r24, 0x40	; 64
    2b5a:	8c 93       	st	X, r24
		SET_BIT(ADMUX,ADMUX_REFS1);
    2b5c:	a7 e2       	ldi	r26, 0x27	; 39
    2b5e:	b0 e0       	ldi	r27, 0x00	; 0
    2b60:	e7 e2       	ldi	r30, 0x27	; 39
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	80 81       	ld	r24, Z
    2b66:	80 68       	ori	r24, 0x80	; 128
    2b68:	8c 93       	st	X, r24
	}
	if(Ptr_to_ADC->AdjustType==Right_Adjust)
    2b6a:	ea 81       	ldd	r30, Y+2	; 0x02
    2b6c:	fb 81       	ldd	r31, Y+3	; 0x03
    2b6e:	82 81       	ldd	r24, Z+2	; 0x02
    2b70:	88 23       	and	r24, r24
    2b72:	41 f4       	brne	.+16     	; 0x2b84 <ADC_Init+0x7a>
	{
		/*Select right adjust*/
		CLR_BIT(ADMUX,ADMUX_ADLAR);
    2b74:	a7 e2       	ldi	r26, 0x27	; 39
    2b76:	b0 e0       	ldi	r27, 0x00	; 0
    2b78:	e7 e2       	ldi	r30, 0x27	; 39
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	80 81       	ld	r24, Z
    2b7e:	8f 7d       	andi	r24, 0xDF	; 223
    2b80:	8c 93       	st	X, r24
    2b82:	0c c0       	rjmp	.+24     	; 0x2b9c <ADC_Init+0x92>
	}
	else if(Ptr_to_ADC->AdjustType==Right_Adjust)
    2b84:	ea 81       	ldd	r30, Y+2	; 0x02
    2b86:	fb 81       	ldd	r31, Y+3	; 0x03
    2b88:	82 81       	ldd	r24, Z+2	; 0x02
    2b8a:	88 23       	and	r24, r24
    2b8c:	39 f4       	brne	.+14     	; 0x2b9c <ADC_Init+0x92>
	{
		/*Select left adjust*/
		SET_BIT(ADMUX,ADMUX_ADLAR);
    2b8e:	a7 e2       	ldi	r26, 0x27	; 39
    2b90:	b0 e0       	ldi	r27, 0x00	; 0
    2b92:	e7 e2       	ldi	r30, 0x27	; 39
    2b94:	f0 e0       	ldi	r31, 0x00	; 0
    2b96:	80 81       	ld	r24, Z
    2b98:	80 62       	ori	r24, 0x20	; 32
    2b9a:	8c 93       	st	X, r24
	}
	if(Ptr_to_ADC->Pre_Scaller==DIV_BY_128)
    2b9c:	ea 81       	ldd	r30, Y+2	; 0x02
    2b9e:	fb 81       	ldd	r31, Y+3	; 0x03
    2ba0:	81 81       	ldd	r24, Z+1	; 0x01
    2ba2:	86 30       	cpi	r24, 0x06	; 6
    2ba4:	b1 f4       	brne	.+44     	; 0x2bd2 <ADC_Init+0xc8>
	{
		/*Select Pre-scaller 128*/
		SET_BIT(ADCSRA,ADCSRA_ADPS0);
    2ba6:	a6 e2       	ldi	r26, 0x26	; 38
    2ba8:	b0 e0       	ldi	r27, 0x00	; 0
    2baa:	e6 e2       	ldi	r30, 0x26	; 38
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
    2bb0:	81 60       	ori	r24, 0x01	; 1
    2bb2:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS1);
    2bb4:	a6 e2       	ldi	r26, 0x26	; 38
    2bb6:	b0 e0       	ldi	r27, 0x00	; 0
    2bb8:	e6 e2       	ldi	r30, 0x26	; 38
    2bba:	f0 e0       	ldi	r31, 0x00	; 0
    2bbc:	80 81       	ld	r24, Z
    2bbe:	82 60       	ori	r24, 0x02	; 2
    2bc0:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS2);
    2bc2:	a6 e2       	ldi	r26, 0x26	; 38
    2bc4:	b0 e0       	ldi	r27, 0x00	; 0
    2bc6:	e6 e2       	ldi	r30, 0x26	; 38
    2bc8:	f0 e0       	ldi	r31, 0x00	; 0
    2bca:	80 81       	ld	r24, Z
    2bcc:	84 60       	ori	r24, 0x04	; 4
    2bce:	8c 93       	st	X, r24
    2bd0:	1a c0       	rjmp	.+52     	; 0x2c06 <ADC_Init+0xfc>

	}
	else if(Ptr_to_ADC->Pre_Scaller==DIV_BY_2)
    2bd2:	ea 81       	ldd	r30, Y+2	; 0x02
    2bd4:	fb 81       	ldd	r31, Y+3	; 0x03
    2bd6:	81 81       	ldd	r24, Z+1	; 0x01
    2bd8:	88 23       	and	r24, r24
    2bda:	a9 f4       	brne	.+42     	; 0x2c06 <ADC_Init+0xfc>
	{
		/**/
		CLR_BIT(ADCSRA,ADCSRA_ADPS0);
    2bdc:	a6 e2       	ldi	r26, 0x26	; 38
    2bde:	b0 e0       	ldi	r27, 0x00	; 0
    2be0:	e6 e2       	ldi	r30, 0x26	; 38
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	80 81       	ld	r24, Z
    2be6:	8e 7f       	andi	r24, 0xFE	; 254
    2be8:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADCSRA_ADPS1);
    2bea:	a6 e2       	ldi	r26, 0x26	; 38
    2bec:	b0 e0       	ldi	r27, 0x00	; 0
    2bee:	e6 e2       	ldi	r30, 0x26	; 38
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	80 81       	ld	r24, Z
    2bf4:	8d 7f       	andi	r24, 0xFD	; 253
    2bf6:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADCSRA_ADPS2);
    2bf8:	a6 e2       	ldi	r26, 0x26	; 38
    2bfa:	b0 e0       	ldi	r27, 0x00	; 0
    2bfc:	e6 e2       	ldi	r30, 0x26	; 38
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	80 81       	ld	r24, Z
    2c02:	8b 7f       	andi	r24, 0xFB	; 251
    2c04:	8c 93       	st	X, r24
	}
	return Error_state;
    2c06:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c08:	0f 90       	pop	r0
    2c0a:	0f 90       	pop	r0
    2c0c:	0f 90       	pop	r0
    2c0e:	cf 91       	pop	r28
    2c10:	df 91       	pop	r29
    2c12:	08 95       	ret

00002c14 <ADC_getDigitalValueSynchNonBlocking>:

u16 ADC_getDigitalValueSynchNonBlocking(ADC_ConfigType *Ptr_to_ADC)
{
    2c14:	df 93       	push	r29
    2c16:	cf 93       	push	r28
    2c18:	cd b7       	in	r28, 0x3d	; 61
    2c1a:	de b7       	in	r29, 0x3e	; 62
    2c1c:	28 97       	sbiw	r28, 0x08	; 8
    2c1e:	0f b6       	in	r0, 0x3f	; 63
    2c20:	f8 94       	cli
    2c22:	de bf       	out	0x3e, r29	; 62
    2c24:	0f be       	out	0x3f, r0	; 63
    2c26:	cd bf       	out	0x3d, r28	; 61
    2c28:	9e 83       	std	Y+6, r25	; 0x06
    2c2a:	8d 83       	std	Y+5, r24	; 0x05
	u16 Reading_value=0;
    2c2c:	1c 82       	std	Y+4, r1	; 0x04
    2c2e:	1b 82       	std	Y+3, r1	; 0x03
	u16 Counter=0;
    2c30:	1a 82       	std	Y+2, r1	; 0x02
    2c32:	19 82       	std	Y+1, r1	; 0x01
	/*Select port*/
	if(Ptr_to_ADC->Channel==ADC0)
    2c34:	ed 81       	ldd	r30, Y+5	; 0x05
    2c36:	fe 81       	ldd	r31, Y+6	; 0x06
    2c38:	83 81       	ldd	r24, Z+3	; 0x03
    2c3a:	88 23       	and	r24, r24
    2c3c:	19 f5       	brne	.+70     	; 0x2c84 <ADC_getDigitalValueSynchNonBlocking+0x70>
	{
		/*Select ADC0*/

		CLR_BIT(ADMUX,ADMUX_MUX0);
    2c3e:	a7 e2       	ldi	r26, 0x27	; 39
    2c40:	b0 e0       	ldi	r27, 0x00	; 0
    2c42:	e7 e2       	ldi	r30, 0x27	; 39
    2c44:	f0 e0       	ldi	r31, 0x00	; 0
    2c46:	80 81       	ld	r24, Z
    2c48:	8e 7f       	andi	r24, 0xFE	; 254
    2c4a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,ADMUX_MUX1);
    2c4c:	a7 e2       	ldi	r26, 0x27	; 39
    2c4e:	b0 e0       	ldi	r27, 0x00	; 0
    2c50:	e7 e2       	ldi	r30, 0x27	; 39
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	80 81       	ld	r24, Z
    2c56:	8d 7f       	andi	r24, 0xFD	; 253
    2c58:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,ADMUX_MUX2);
    2c5a:	a7 e2       	ldi	r26, 0x27	; 39
    2c5c:	b0 e0       	ldi	r27, 0x00	; 0
    2c5e:	e7 e2       	ldi	r30, 0x27	; 39
    2c60:	f0 e0       	ldi	r31, 0x00	; 0
    2c62:	80 81       	ld	r24, Z
    2c64:	8b 7f       	andi	r24, 0xFB	; 251
    2c66:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,ADMUX_MUX3);
    2c68:	a7 e2       	ldi	r26, 0x27	; 39
    2c6a:	b0 e0       	ldi	r27, 0x00	; 0
    2c6c:	e7 e2       	ldi	r30, 0x27	; 39
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	80 81       	ld	r24, Z
    2c72:	87 7f       	andi	r24, 0xF7	; 247
    2c74:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,ADMUX_MUX4);
    2c76:	a7 e2       	ldi	r26, 0x27	; 39
    2c78:	b0 e0       	ldi	r27, 0x00	; 0
    2c7a:	e7 e2       	ldi	r30, 0x27	; 39
    2c7c:	f0 e0       	ldi	r31, 0x00	; 0
    2c7e:	80 81       	ld	r24, Z
    2c80:	8f 7e       	andi	r24, 0xEF	; 239
    2c82:	8c 93       	st	X, r24

	}

	/*Enable ADC*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    2c84:	a6 e2       	ldi	r26, 0x26	; 38
    2c86:	b0 e0       	ldi	r27, 0x00	; 0
    2c88:	e6 e2       	ldi	r30, 0x26	; 38
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	80 81       	ld	r24, Z
    2c8e:	80 68       	ori	r24, 0x80	; 128
    2c90:	8c 93       	st	X, r24
	/*Start Conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    2c92:	a6 e2       	ldi	r26, 0x26	; 38
    2c94:	b0 e0       	ldi	r27, 0x00	; 0
    2c96:	e6 e2       	ldi	r30, 0x26	; 38
    2c98:	f0 e0       	ldi	r31, 0x00	; 0
    2c9a:	80 81       	ld	r24, Z
    2c9c:	80 64       	ori	r24, 0x40	; 64
    2c9e:	8c 93       	st	X, r24
    2ca0:	05 c0       	rjmp	.+10     	; 0x2cac <ADC_getDigitalValueSynchNonBlocking+0x98>
	/*loop for the conversion to end*/
	while((GET_BIT(ADCSRA,ADCSRA_ADSC))==1 || Counter<= MAX_DELAY)
	{
		Counter++;
    2ca2:	89 81       	ldd	r24, Y+1	; 0x01
    2ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca6:	01 96       	adiw	r24, 0x01	; 1
    2ca8:	9a 83       	std	Y+2, r25	; 0x02
    2caa:	89 83       	std	Y+1, r24	; 0x01
	/*Enable ADC*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
	/*Start Conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
	/*loop for the conversion to end*/
	while((GET_BIT(ADCSRA,ADCSRA_ADSC))==1 || Counter<= MAX_DELAY)
    2cac:	e6 e2       	ldi	r30, 0x26	; 38
    2cae:	f0 e0       	ldi	r31, 0x00	; 0
    2cb0:	80 81       	ld	r24, Z
    2cb2:	82 95       	swap	r24
    2cb4:	86 95       	lsr	r24
    2cb6:	86 95       	lsr	r24
    2cb8:	83 70       	andi	r24, 0x03	; 3
    2cba:	88 2f       	mov	r24, r24
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	81 70       	andi	r24, 0x01	; 1
    2cc0:	90 70       	andi	r25, 0x00	; 0
    2cc2:	88 23       	and	r24, r24
    2cc4:	71 f7       	brne	.-36     	; 0x2ca2 <ADC_getDigitalValueSynchNonBlocking+0x8e>
    2cc6:	89 81       	ldd	r24, Y+1	; 0x01
    2cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cca:	23 ec       	ldi	r18, 0xC3	; 195
    2ccc:	81 35       	cpi	r24, 0x51	; 81
    2cce:	92 07       	cpc	r25, r18
    2cd0:	40 f3       	brcs	.-48     	; 0x2ca2 <ADC_getDigitalValueSynchNonBlocking+0x8e>
	{
		Counter++;
	}
	if((GET_BIT(ADCSRA,ADCSRA_ADSC))==0)
    2cd2:	e6 e2       	ldi	r30, 0x26	; 38
    2cd4:	f0 e0       	ldi	r31, 0x00	; 0
    2cd6:	80 81       	ld	r24, Z
    2cd8:	82 95       	swap	r24
    2cda:	86 95       	lsr	r24
    2cdc:	86 95       	lsr	r24
    2cde:	83 70       	andi	r24, 0x03	; 3
    2ce0:	88 2f       	mov	r24, r24
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	81 70       	andi	r24, 0x01	; 1
    2ce6:	90 70       	andi	r25, 0x00	; 0
    2ce8:	00 97       	sbiw	r24, 0x00	; 0
    2cea:	41 f4       	brne	.+16     	; 0x2cfc <ADC_getDigitalValueSynchNonBlocking+0xe8>
	{
		//Reading_value= ((ADCL*5)/10);
		//return Reading_value;
		return ADCL;
    2cec:	e4 e2       	ldi	r30, 0x24	; 36
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
    2cf0:	80 81       	ld	r24, Z
    2cf2:	28 2f       	mov	r18, r24
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	38 87       	std	Y+8, r19	; 0x08
    2cf8:	2f 83       	std	Y+7, r18	; 0x07
    2cfa:	02 c0       	rjmp	.+4      	; 0x2d00 <ADC_getDigitalValueSynchNonBlocking+0xec>
	}
	else
	{
		return 0;
    2cfc:	18 86       	std	Y+8, r1	; 0x08
    2cfe:	1f 82       	std	Y+7, r1	; 0x07
    2d00:	8f 81       	ldd	r24, Y+7	; 0x07
    2d02:	98 85       	ldd	r25, Y+8	; 0x08
	}
}
    2d04:	28 96       	adiw	r28, 0x08	; 8
    2d06:	0f b6       	in	r0, 0x3f	; 63
    2d08:	f8 94       	cli
    2d0a:	de bf       	out	0x3e, r29	; 62
    2d0c:	0f be       	out	0x3f, r0	; 63
    2d0e:	cd bf       	out	0x3d, r28	; 61
    2d10:	cf 91       	pop	r28
    2d12:	df 91       	pop	r29
    2d14:	08 95       	ret

00002d16 <ADC_getDigitalValueAsynchCallBack>:

u16 ADC_getDigitalValueAsynchCallBack(ADC_ConfigType *Ptr_to_ADC)
{
    2d16:	df 93       	push	r29
    2d18:	cf 93       	push	r28
    2d1a:	cd b7       	in	r28, 0x3d	; 61
    2d1c:	de b7       	in	r29, 0x3e	; 62
    2d1e:	28 97       	sbiw	r28, 0x08	; 8
    2d20:	0f b6       	in	r0, 0x3f	; 63
    2d22:	f8 94       	cli
    2d24:	de bf       	out	0x3e, r29	; 62
    2d26:	0f be       	out	0x3f, r0	; 63
    2d28:	cd bf       	out	0x3d, r28	; 61
    2d2a:	9e 83       	std	Y+6, r25	; 0x06
    2d2c:	8d 83       	std	Y+5, r24	; 0x05
	u16 Reading_value=0;
    2d2e:	1c 82       	std	Y+4, r1	; 0x04
    2d30:	1b 82       	std	Y+3, r1	; 0x03
	u16 Counter=0;
    2d32:	1a 82       	std	Y+2, r1	; 0x02
    2d34:	19 82       	std	Y+1, r1	; 0x01
	/*Select port*/
	if(Ptr_to_ADC->Channel==ADC0)
    2d36:	ed 81       	ldd	r30, Y+5	; 0x05
    2d38:	fe 81       	ldd	r31, Y+6	; 0x06
    2d3a:	83 81       	ldd	r24, Z+3	; 0x03
    2d3c:	88 23       	and	r24, r24
    2d3e:	19 f5       	brne	.+70     	; 0x2d86 <ADC_getDigitalValueAsynchCallBack+0x70>
	{
		/*Select ADC0*/

		CLR_BIT(ADMUX,ADMUX_MUX0);
    2d40:	a7 e2       	ldi	r26, 0x27	; 39
    2d42:	b0 e0       	ldi	r27, 0x00	; 0
    2d44:	e7 e2       	ldi	r30, 0x27	; 39
    2d46:	f0 e0       	ldi	r31, 0x00	; 0
    2d48:	80 81       	ld	r24, Z
    2d4a:	8e 7f       	andi	r24, 0xFE	; 254
    2d4c:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,ADMUX_MUX1);
    2d4e:	a7 e2       	ldi	r26, 0x27	; 39
    2d50:	b0 e0       	ldi	r27, 0x00	; 0
    2d52:	e7 e2       	ldi	r30, 0x27	; 39
    2d54:	f0 e0       	ldi	r31, 0x00	; 0
    2d56:	80 81       	ld	r24, Z
    2d58:	8d 7f       	andi	r24, 0xFD	; 253
    2d5a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,ADMUX_MUX2);
    2d5c:	a7 e2       	ldi	r26, 0x27	; 39
    2d5e:	b0 e0       	ldi	r27, 0x00	; 0
    2d60:	e7 e2       	ldi	r30, 0x27	; 39
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	80 81       	ld	r24, Z
    2d66:	8b 7f       	andi	r24, 0xFB	; 251
    2d68:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,ADMUX_MUX3);
    2d6a:	a7 e2       	ldi	r26, 0x27	; 39
    2d6c:	b0 e0       	ldi	r27, 0x00	; 0
    2d6e:	e7 e2       	ldi	r30, 0x27	; 39
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	80 81       	ld	r24, Z
    2d74:	87 7f       	andi	r24, 0xF7	; 247
    2d76:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,ADMUX_MUX4);
    2d78:	a7 e2       	ldi	r26, 0x27	; 39
    2d7a:	b0 e0       	ldi	r27, 0x00	; 0
    2d7c:	e7 e2       	ldi	r30, 0x27	; 39
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	80 81       	ld	r24, Z
    2d82:	8f 7e       	andi	r24, 0xEF	; 239
    2d84:	8c 93       	st	X, r24

	}
	//start adc interrupt
	ADC_Interrupt_Enable();
    2d86:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <ADC_Interrupt_Enable>

	/*Enable ADC*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    2d8a:	a6 e2       	ldi	r26, 0x26	; 38
    2d8c:	b0 e0       	ldi	r27, 0x00	; 0
    2d8e:	e6 e2       	ldi	r30, 0x26	; 38
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
    2d92:	80 81       	ld	r24, Z
    2d94:	80 68       	ori	r24, 0x80	; 128
    2d96:	8c 93       	st	X, r24
	/*Start Conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    2d98:	a6 e2       	ldi	r26, 0x26	; 38
    2d9a:	b0 e0       	ldi	r27, 0x00	; 0
    2d9c:	e6 e2       	ldi	r30, 0x26	; 38
    2d9e:	f0 e0       	ldi	r31, 0x00	; 0
    2da0:	80 81       	ld	r24, Z
    2da2:	80 64       	ori	r24, 0x40	; 64
    2da4:	8c 93       	st	X, r24

}
    2da6:	28 96       	adiw	r28, 0x08	; 8
    2da8:	0f b6       	in	r0, 0x3f	; 63
    2daa:	f8 94       	cli
    2dac:	de bf       	out	0x3e, r29	; 62
    2dae:	0f be       	out	0x3f, r0	; 63
    2db0:	cd bf       	out	0x3d, r28	; 61
    2db2:	cf 91       	pop	r28
    2db4:	df 91       	pop	r29
    2db6:	08 95       	ret

00002db8 <ADC_Get_Value_Reading>:
u16 ADC_Get_Value_Reading(void)
{
    2db8:	df 93       	push	r29
    2dba:	cf 93       	push	r28
    2dbc:	cd b7       	in	r28, 0x3d	; 61
    2dbe:	de b7       	in	r29, 0x3e	; 62
	return ADCL;
    2dc0:	e4 e2       	ldi	r30, 0x24	; 36
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	80 81       	ld	r24, Z
    2dc6:	88 2f       	mov	r24, r24
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
}
    2dca:	cf 91       	pop	r28
    2dcc:	df 91       	pop	r29
    2dce:	08 95       	ret

00002dd0 <ADC_Interrupt_Enable>:
void ADC_Interrupt_Enable(void)
{
    2dd0:	df 93       	push	r29
    2dd2:	cf 93       	push	r28
    2dd4:	cd b7       	in	r28, 0x3d	; 61
    2dd6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADCSRA_ADIE);
    2dd8:	a6 e2       	ldi	r26, 0x26	; 38
    2dda:	b0 e0       	ldi	r27, 0x00	; 0
    2ddc:	e6 e2       	ldi	r30, 0x26	; 38
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	80 81       	ld	r24, Z
    2de2:	88 60       	ori	r24, 0x08	; 8
    2de4:	8c 93       	st	X, r24
}
    2de6:	cf 91       	pop	r28
    2de8:	df 91       	pop	r29
    2dea:	08 95       	ret

00002dec <ADC_Interrupt_Disable>:
void ADC_Interrupt_Disable(void)
{
    2dec:	df 93       	push	r29
    2dee:	cf 93       	push	r28
    2df0:	cd b7       	in	r28, 0x3d	; 61
    2df2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
    2df4:	a6 e2       	ldi	r26, 0x26	; 38
    2df6:	b0 e0       	ldi	r27, 0x00	; 0
    2df8:	e6 e2       	ldi	r30, 0x26	; 38
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	80 81       	ld	r24, Z
    2dfe:	87 7f       	andi	r24, 0xF7	; 247
    2e00:	8c 93       	st	X, r24
}
    2e02:	cf 91       	pop	r28
    2e04:	df 91       	pop	r29
    2e06:	08 95       	ret

00002e08 <ADC_u8INTSetCallBack>:
u8 ADC_u8INTSetCallBack(void (*Copy_pvINTFunc)(void))
{
    2e08:	df 93       	push	r29
    2e0a:	cf 93       	push	r28
    2e0c:	00 d0       	rcall	.+0      	; 0x2e0e <ADC_u8INTSetCallBack+0x6>
    2e0e:	0f 92       	push	r0
    2e10:	cd b7       	in	r28, 0x3d	; 61
    2e12:	de b7       	in	r29, 0x3e	; 62
    2e14:	9a 83       	std	Y+2, r25	; 0x02
    2e16:	89 83       	std	Y+1, r24	; 0x01
	ADC_Ptr_To_Func = Copy_pvINTFunc;
    2e18:	89 81       	ldd	r24, Y+1	; 0x01
    2e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e1c:	90 93 68 02 	sts	0x0268, r25
    2e20:	80 93 67 02 	sts	0x0267, r24
}
    2e24:	0f 90       	pop	r0
    2e26:	0f 90       	pop	r0
    2e28:	0f 90       	pop	r0
    2e2a:	cf 91       	pop	r28
    2e2c:	df 91       	pop	r29
    2e2e:	08 95       	ret

00002e30 <H_KEYPAD_u8_getPressedKey>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
u8 H_KEYPAD_u8_getPressedKey(void)
{
    2e30:	df 93       	push	r29
    2e32:	cf 93       	push	r28
    2e34:	cd b7       	in	r28, 0x3d	; 61
    2e36:	de b7       	in	r29, 0x3e	; 62
    2e38:	62 97       	sbiw	r28, 0x12	; 18
    2e3a:	0f b6       	in	r0, 0x3f	; 63
    2e3c:	f8 94       	cli
    2e3e:	de bf       	out	0x3e, r29	; 62
    2e40:	0f be       	out	0x3f, r0	; 63
    2e42:	cd bf       	out	0x3d, r28	; 61
	u8 Local_Pressed_key=NO_PRESSED_KEY;
    2e44:	19 8a       	std	Y+17, r1	; 0x11
	u8 ROW_Index;
	u8 COL_Index;
	for(ROW_Index=0;ROW_Index<4;ROW_Index++)
    2e46:	18 8a       	std	Y+16, r1	; 0x10
    2e48:	c8 c0       	rjmp	.+400    	; 0x2fda <H_KEYPAD_u8_getPressedKey+0x1aa>
	{
		M_Dio_void_setPinValue(ROWS_ARR[0], DIO_HIGH);
    2e4a:	80 91 78 01 	lds	r24, 0x0178
    2e4e:	61 e0       	ldi	r22, 0x01	; 1
    2e50:	0e 94 67 13 	call	0x26ce	; 0x26ce <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(ROWS_ARR[1], DIO_HIGH);
    2e54:	80 91 79 01 	lds	r24, 0x0179
    2e58:	61 e0       	ldi	r22, 0x01	; 1
    2e5a:	0e 94 67 13 	call	0x26ce	; 0x26ce <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(ROWS_ARR[2], DIO_HIGH);
    2e5e:	80 91 7a 01 	lds	r24, 0x017A
    2e62:	61 e0       	ldi	r22, 0x01	; 1
    2e64:	0e 94 67 13 	call	0x26ce	; 0x26ce <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(ROWS_ARR[3], DIO_HIGH);
    2e68:	80 91 7b 01 	lds	r24, 0x017B
    2e6c:	61 e0       	ldi	r22, 0x01	; 1
    2e6e:	0e 94 67 13 	call	0x26ce	; 0x26ce <M_Dio_void_setPinValue>

		M_Dio_void_setPinValue(ROWS_ARR[ROW_Index],DIO_LOW);
    2e72:	88 89       	ldd	r24, Y+16	; 0x10
    2e74:	88 2f       	mov	r24, r24
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	fc 01       	movw	r30, r24
    2e7a:	e8 58       	subi	r30, 0x88	; 136
    2e7c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e7e:	80 81       	ld	r24, Z
    2e80:	60 e0       	ldi	r22, 0x00	; 0
    2e82:	0e 94 67 13 	call	0x26ce	; 0x26ce <M_Dio_void_setPinValue>
		for(COL_Index=0;COL_Index<4;COL_Index++)
    2e86:	1f 86       	std	Y+15, r1	; 0x0f
    2e88:	a1 c0       	rjmp	.+322    	; 0x2fcc <H_KEYPAD_u8_getPressedKey+0x19c>
		{
			if((M_Dio_en_getPinValue(COLS_ARR[COL_Index]))==DIO_LOW)
    2e8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e8c:	88 2f       	mov	r24, r24
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	fc 01       	movw	r30, r24
    2e92:	e4 58       	subi	r30, 0x84	; 132
    2e94:	fe 4f       	sbci	r31, 0xFE	; 254
    2e96:	80 81       	ld	r24, Z
    2e98:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <M_Dio_en_getPinValue>
    2e9c:	88 23       	and	r24, r24
    2e9e:	09 f0       	breq	.+2      	; 0x2ea2 <H_KEYPAD_u8_getPressedKey+0x72>
    2ea0:	92 c0       	rjmp	.+292    	; 0x2fc6 <H_KEYPAD_u8_getPressedKey+0x196>
    2ea2:	80 e0       	ldi	r24, 0x00	; 0
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	a8 e4       	ldi	r26, 0x48	; 72
    2ea8:	b2 e4       	ldi	r27, 0x42	; 66
    2eaa:	8b 87       	std	Y+11, r24	; 0x0b
    2eac:	9c 87       	std	Y+12, r25	; 0x0c
    2eae:	ad 87       	std	Y+13, r26	; 0x0d
    2eb0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	4a e7       	ldi	r20, 0x7A	; 122
    2ec0:	55 e4       	ldi	r21, 0x45	; 69
    2ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	8f 83       	std	Y+7, r24	; 0x07
    2ecc:	98 87       	std	Y+8, r25	; 0x08
    2ece:	a9 87       	std	Y+9, r26	; 0x09
    2ed0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ed2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ed4:	78 85       	ldd	r23, Y+8	; 0x08
    2ed6:	89 85       	ldd	r24, Y+9	; 0x09
    2ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eda:	20 e0       	ldi	r18, 0x00	; 0
    2edc:	30 e0       	ldi	r19, 0x00	; 0
    2ede:	40 e8       	ldi	r20, 0x80	; 128
    2ee0:	5f e3       	ldi	r21, 0x3F	; 63
    2ee2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ee6:	88 23       	and	r24, r24
    2ee8:	2c f4       	brge	.+10     	; 0x2ef4 <H_KEYPAD_u8_getPressedKey+0xc4>
		__ticks = 1;
    2eea:	81 e0       	ldi	r24, 0x01	; 1
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	9e 83       	std	Y+6, r25	; 0x06
    2ef0:	8d 83       	std	Y+5, r24	; 0x05
    2ef2:	3f c0       	rjmp	.+126    	; 0x2f72 <H_KEYPAD_u8_getPressedKey+0x142>
	else if (__tmp > 65535)
    2ef4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef6:	78 85       	ldd	r23, Y+8	; 0x08
    2ef8:	89 85       	ldd	r24, Y+9	; 0x09
    2efa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	3f ef       	ldi	r19, 0xFF	; 255
    2f00:	4f e7       	ldi	r20, 0x7F	; 127
    2f02:	57 e4       	ldi	r21, 0x47	; 71
    2f04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f08:	18 16       	cp	r1, r24
    2f0a:	4c f5       	brge	.+82     	; 0x2f5e <H_KEYPAD_u8_getPressedKey+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	40 e2       	ldi	r20, 0x20	; 32
    2f1a:	51 e4       	ldi	r21, 0x41	; 65
    2f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f20:	dc 01       	movw	r26, r24
    2f22:	cb 01       	movw	r24, r22
    2f24:	bc 01       	movw	r22, r24
    2f26:	cd 01       	movw	r24, r26
    2f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f2c:	dc 01       	movw	r26, r24
    2f2e:	cb 01       	movw	r24, r22
    2f30:	9e 83       	std	Y+6, r25	; 0x06
    2f32:	8d 83       	std	Y+5, r24	; 0x05
    2f34:	0f c0       	rjmp	.+30     	; 0x2f54 <H_KEYPAD_u8_getPressedKey+0x124>
    2f36:	80 e9       	ldi	r24, 0x90	; 144
    2f38:	91 e0       	ldi	r25, 0x01	; 1
    2f3a:	9c 83       	std	Y+4, r25	; 0x04
    2f3c:	8b 83       	std	Y+3, r24	; 0x03
    2f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f40:	9c 81       	ldd	r25, Y+4	; 0x04
    2f42:	01 97       	sbiw	r24, 0x01	; 1
    2f44:	f1 f7       	brne	.-4      	; 0x2f42 <H_KEYPAD_u8_getPressedKey+0x112>
    2f46:	9c 83       	std	Y+4, r25	; 0x04
    2f48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f4e:	01 97       	sbiw	r24, 0x01	; 1
    2f50:	9e 83       	std	Y+6, r25	; 0x06
    2f52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f54:	8d 81       	ldd	r24, Y+5	; 0x05
    2f56:	9e 81       	ldd	r25, Y+6	; 0x06
    2f58:	00 97       	sbiw	r24, 0x00	; 0
    2f5a:	69 f7       	brne	.-38     	; 0x2f36 <H_KEYPAD_u8_getPressedKey+0x106>
    2f5c:	14 c0       	rjmp	.+40     	; 0x2f86 <H_KEYPAD_u8_getPressedKey+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f60:	78 85       	ldd	r23, Y+8	; 0x08
    2f62:	89 85       	ldd	r24, Y+9	; 0x09
    2f64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	9e 83       	std	Y+6, r25	; 0x06
    2f70:	8d 83       	std	Y+5, r24	; 0x05
    2f72:	8d 81       	ldd	r24, Y+5	; 0x05
    2f74:	9e 81       	ldd	r25, Y+6	; 0x06
    2f76:	9a 83       	std	Y+2, r25	; 0x02
    2f78:	89 83       	std	Y+1, r24	; 0x01
    2f7a:	89 81       	ldd	r24, Y+1	; 0x01
    2f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7e:	01 97       	sbiw	r24, 0x01	; 1
    2f80:	f1 f7       	brne	.-4      	; 0x2f7e <H_KEYPAD_u8_getPressedKey+0x14e>
    2f82:	9a 83       	std	Y+2, r25	; 0x02
    2f84:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(50);
				while(M_Dio_en_getPinValue(COLS_ARR[COL_Index])==DIO_LOW);
    2f86:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f88:	88 2f       	mov	r24, r24
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	fc 01       	movw	r30, r24
    2f8e:	e4 58       	subi	r30, 0x84	; 132
    2f90:	fe 4f       	sbci	r31, 0xFE	; 254
    2f92:	80 81       	ld	r24, Z
    2f94:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <M_Dio_en_getPinValue>
    2f98:	88 23       	and	r24, r24
    2f9a:	a9 f3       	breq	.-22     	; 0x2f86 <H_KEYPAD_u8_getPressedKey+0x156>
				Local_Pressed_key= KPD_KEYS_CALC[ROW_Index][COL_Index];
    2f9c:	88 89       	ldd	r24, Y+16	; 0x10
    2f9e:	48 2f       	mov	r20, r24
    2fa0:	50 e0       	ldi	r21, 0x00	; 0
    2fa2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fa4:	28 2f       	mov	r18, r24
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	ca 01       	movw	r24, r20
    2faa:	88 0f       	add	r24, r24
    2fac:	99 1f       	adc	r25, r25
    2fae:	88 0f       	add	r24, r24
    2fb0:	99 1f       	adc	r25, r25
    2fb2:	82 0f       	add	r24, r18
    2fb4:	93 1f       	adc	r25, r19
    2fb6:	fc 01       	movw	r30, r24
    2fb8:	e8 59       	subi	r30, 0x98	; 152
    2fba:	fe 4f       	sbci	r31, 0xFE	; 254
    2fbc:	80 81       	ld	r24, Z
    2fbe:	89 8b       	std	Y+17, r24	; 0x11
				//M_Dio_void_setPinValue(DIO_PB7,DIO_HIGH);
				//_delay_ms(50);
				//M_Dio_void_setPinValue(DIO_PB7,DIO_LOW);
				return Local_Pressed_key;
    2fc0:	89 89       	ldd	r24, Y+17	; 0x11
    2fc2:	8a 8b       	std	Y+18, r24	; 0x12
    2fc4:	10 c0       	rjmp	.+32     	; 0x2fe6 <H_KEYPAD_u8_getPressedKey+0x1b6>
		M_Dio_void_setPinValue(ROWS_ARR[1], DIO_HIGH);
		M_Dio_void_setPinValue(ROWS_ARR[2], DIO_HIGH);
		M_Dio_void_setPinValue(ROWS_ARR[3], DIO_HIGH);

		M_Dio_void_setPinValue(ROWS_ARR[ROW_Index],DIO_LOW);
		for(COL_Index=0;COL_Index<4;COL_Index++)
    2fc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fc8:	8f 5f       	subi	r24, 0xFF	; 255
    2fca:	8f 87       	std	Y+15, r24	; 0x0f
    2fcc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fce:	84 30       	cpi	r24, 0x04	; 4
    2fd0:	08 f4       	brcc	.+2      	; 0x2fd4 <H_KEYPAD_u8_getPressedKey+0x1a4>
    2fd2:	5b cf       	rjmp	.-330    	; 0x2e8a <H_KEYPAD_u8_getPressedKey+0x5a>
u8 H_KEYPAD_u8_getPressedKey(void)
{
	u8 Local_Pressed_key=NO_PRESSED_KEY;
	u8 ROW_Index;
	u8 COL_Index;
	for(ROW_Index=0;ROW_Index<4;ROW_Index++)
    2fd4:	88 89       	ldd	r24, Y+16	; 0x10
    2fd6:	8f 5f       	subi	r24, 0xFF	; 255
    2fd8:	88 8b       	std	Y+16, r24	; 0x10
    2fda:	88 89       	ldd	r24, Y+16	; 0x10
    2fdc:	84 30       	cpi	r24, 0x04	; 4
    2fde:	08 f4       	brcc	.+2      	; 0x2fe2 <H_KEYPAD_u8_getPressedKey+0x1b2>
    2fe0:	34 cf       	rjmp	.-408    	; 0x2e4a <H_KEYPAD_u8_getPressedKey+0x1a>
				//M_Dio_void_setPinValue(DIO_PB7,DIO_LOW);
				return Local_Pressed_key;
			}
		}
	}
	return Local_Pressed_key;
    2fe2:	89 89       	ldd	r24, Y+17	; 0x11
    2fe4:	8a 8b       	std	Y+18, r24	; 0x12
    2fe6:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2fe8:	62 96       	adiw	r28, 0x12	; 18
    2fea:	0f b6       	in	r0, 0x3f	; 63
    2fec:	f8 94       	cli
    2fee:	de bf       	out	0x3e, r29	; 62
    2ff0:	0f be       	out	0x3f, r0	; 63
    2ff2:	cd bf       	out	0x3d, r28	; 61
    2ff4:	cf 91       	pop	r28
    2ff6:	df 91       	pop	r29
    2ff8:	08 95       	ret

00002ffa <H_LCD_void_latchByte>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
    2ffa:	df 93       	push	r29
    2ffc:	cf 93       	push	r28
    2ffe:	cd b7       	in	r28, 0x3d	; 61
    3000:	de b7       	in	r29, 0x3e	; 62
    3002:	ab 97       	sbiw	r28, 0x2b	; 43
    3004:	0f b6       	in	r0, 0x3f	; 63
    3006:	f8 94       	cli
    3008:	de bf       	out	0x3e, r29	; 62
    300a:	0f be       	out	0x3f, r0	; 63
    300c:	cd bf       	out	0x3d, r28	; 61
    300e:	8b a7       	std	Y+43, r24	; 0x2b
#if(LCD_MODE == _4_BIT_MODE)
	//enable = zero
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
    3010:	8c e0       	ldi	r24, 0x0C	; 12
    3012:	60 e0       	ldi	r22, 0x00	; 0
    3014:	0e 94 67 13 	call	0x26ce	; 0x26ce <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_D4,GET_BIT(copy_u8Byte,4));
    3018:	8b a5       	ldd	r24, Y+43	; 0x2b
    301a:	82 95       	swap	r24
    301c:	8f 70       	andi	r24, 0x0F	; 15
    301e:	98 2f       	mov	r25, r24
    3020:	91 70       	andi	r25, 0x01	; 1
    3022:	84 e1       	ldi	r24, 0x14	; 20
    3024:	69 2f       	mov	r22, r25
    3026:	0e 94 67 13 	call	0x26ce	; 0x26ce <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D5,GET_BIT(copy_u8Byte,5));
    302a:	8b a5       	ldd	r24, Y+43	; 0x2b
    302c:	82 95       	swap	r24
    302e:	86 95       	lsr	r24
    3030:	87 70       	andi	r24, 0x07	; 7
    3032:	98 2f       	mov	r25, r24
    3034:	91 70       	andi	r25, 0x01	; 1
    3036:	85 e1       	ldi	r24, 0x15	; 21
    3038:	69 2f       	mov	r22, r25
    303a:	0e 94 67 13 	call	0x26ce	; 0x26ce <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D6,GET_BIT(copy_u8Byte,6));
    303e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3040:	82 95       	swap	r24
    3042:	86 95       	lsr	r24
    3044:	86 95       	lsr	r24
    3046:	83 70       	andi	r24, 0x03	; 3
    3048:	98 2f       	mov	r25, r24
    304a:	91 70       	andi	r25, 0x01	; 1
    304c:	86 e1       	ldi	r24, 0x16	; 22
    304e:	69 2f       	mov	r22, r25
    3050:	0e 94 67 13 	call	0x26ce	; 0x26ce <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D7,GET_BIT(copy_u8Byte,7));
    3054:	8b a5       	ldd	r24, Y+43	; 0x2b
    3056:	98 2f       	mov	r25, r24
    3058:	99 1f       	adc	r25, r25
    305a:	99 27       	eor	r25, r25
    305c:	99 1f       	adc	r25, r25
    305e:	88 e1       	ldi	r24, 0x18	; 24
    3060:	69 2f       	mov	r22, r25
    3062:	0e 94 67 13 	call	0x26ce	; 0x26ce <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_HIGH);
    3066:	8c e0       	ldi	r24, 0x0C	; 12
    3068:	61 e0       	ldi	r22, 0x01	; 1
    306a:	0e 94 67 13 	call	0x26ce	; 0x26ce <M_Dio_void_setPinValue>
    306e:	80 e0       	ldi	r24, 0x00	; 0
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	a0 e8       	ldi	r26, 0x80	; 128
    3074:	bf e3       	ldi	r27, 0x3F	; 63
    3076:	8f a3       	std	Y+39, r24	; 0x27
    3078:	98 a7       	std	Y+40, r25	; 0x28
    307a:	a9 a7       	std	Y+41, r26	; 0x29
    307c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    307e:	6f a1       	ldd	r22, Y+39	; 0x27
    3080:	78 a5       	ldd	r23, Y+40	; 0x28
    3082:	89 a5       	ldd	r24, Y+41	; 0x29
    3084:	9a a5       	ldd	r25, Y+42	; 0x2a
    3086:	20 e0       	ldi	r18, 0x00	; 0
    3088:	30 e0       	ldi	r19, 0x00	; 0
    308a:	4a e7       	ldi	r20, 0x7A	; 122
    308c:	55 e4       	ldi	r21, 0x45	; 69
    308e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3092:	dc 01       	movw	r26, r24
    3094:	cb 01       	movw	r24, r22
    3096:	8b a3       	std	Y+35, r24	; 0x23
    3098:	9c a3       	std	Y+36, r25	; 0x24
    309a:	ad a3       	std	Y+37, r26	; 0x25
    309c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    309e:	6b a1       	ldd	r22, Y+35	; 0x23
    30a0:	7c a1       	ldd	r23, Y+36	; 0x24
    30a2:	8d a1       	ldd	r24, Y+37	; 0x25
    30a4:	9e a1       	ldd	r25, Y+38	; 0x26
    30a6:	20 e0       	ldi	r18, 0x00	; 0
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	40 e8       	ldi	r20, 0x80	; 128
    30ac:	5f e3       	ldi	r21, 0x3F	; 63
    30ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30b2:	88 23       	and	r24, r24
    30b4:	2c f4       	brge	.+10     	; 0x30c0 <H_LCD_void_latchByte+0xc6>
		__ticks = 1;
    30b6:	81 e0       	ldi	r24, 0x01	; 1
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	9a a3       	std	Y+34, r25	; 0x22
    30bc:	89 a3       	std	Y+33, r24	; 0x21
    30be:	3f c0       	rjmp	.+126    	; 0x313e <H_LCD_void_latchByte+0x144>
	else if (__tmp > 65535)
    30c0:	6b a1       	ldd	r22, Y+35	; 0x23
    30c2:	7c a1       	ldd	r23, Y+36	; 0x24
    30c4:	8d a1       	ldd	r24, Y+37	; 0x25
    30c6:	9e a1       	ldd	r25, Y+38	; 0x26
    30c8:	20 e0       	ldi	r18, 0x00	; 0
    30ca:	3f ef       	ldi	r19, 0xFF	; 255
    30cc:	4f e7       	ldi	r20, 0x7F	; 127
    30ce:	57 e4       	ldi	r21, 0x47	; 71
    30d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30d4:	18 16       	cp	r1, r24
    30d6:	4c f5       	brge	.+82     	; 0x312a <H_LCD_void_latchByte+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30d8:	6f a1       	ldd	r22, Y+39	; 0x27
    30da:	78 a5       	ldd	r23, Y+40	; 0x28
    30dc:	89 a5       	ldd	r24, Y+41	; 0x29
    30de:	9a a5       	ldd	r25, Y+42	; 0x2a
    30e0:	20 e0       	ldi	r18, 0x00	; 0
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	40 e2       	ldi	r20, 0x20	; 32
    30e6:	51 e4       	ldi	r21, 0x41	; 65
    30e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ec:	dc 01       	movw	r26, r24
    30ee:	cb 01       	movw	r24, r22
    30f0:	bc 01       	movw	r22, r24
    30f2:	cd 01       	movw	r24, r26
    30f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f8:	dc 01       	movw	r26, r24
    30fa:	cb 01       	movw	r24, r22
    30fc:	9a a3       	std	Y+34, r25	; 0x22
    30fe:	89 a3       	std	Y+33, r24	; 0x21
    3100:	0f c0       	rjmp	.+30     	; 0x3120 <H_LCD_void_latchByte+0x126>
    3102:	80 e9       	ldi	r24, 0x90	; 144
    3104:	91 e0       	ldi	r25, 0x01	; 1
    3106:	98 a3       	std	Y+32, r25	; 0x20
    3108:	8f 8f       	std	Y+31, r24	; 0x1f
    310a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    310c:	98 a1       	ldd	r25, Y+32	; 0x20
    310e:	01 97       	sbiw	r24, 0x01	; 1
    3110:	f1 f7       	brne	.-4      	; 0x310e <H_LCD_void_latchByte+0x114>
    3112:	98 a3       	std	Y+32, r25	; 0x20
    3114:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3116:	89 a1       	ldd	r24, Y+33	; 0x21
    3118:	9a a1       	ldd	r25, Y+34	; 0x22
    311a:	01 97       	sbiw	r24, 0x01	; 1
    311c:	9a a3       	std	Y+34, r25	; 0x22
    311e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3120:	89 a1       	ldd	r24, Y+33	; 0x21
    3122:	9a a1       	ldd	r25, Y+34	; 0x22
    3124:	00 97       	sbiw	r24, 0x00	; 0
    3126:	69 f7       	brne	.-38     	; 0x3102 <H_LCD_void_latchByte+0x108>
    3128:	14 c0       	rjmp	.+40     	; 0x3152 <H_LCD_void_latchByte+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    312a:	6b a1       	ldd	r22, Y+35	; 0x23
    312c:	7c a1       	ldd	r23, Y+36	; 0x24
    312e:	8d a1       	ldd	r24, Y+37	; 0x25
    3130:	9e a1       	ldd	r25, Y+38	; 0x26
    3132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3136:	dc 01       	movw	r26, r24
    3138:	cb 01       	movw	r24, r22
    313a:	9a a3       	std	Y+34, r25	; 0x22
    313c:	89 a3       	std	Y+33, r24	; 0x21
    313e:	89 a1       	ldd	r24, Y+33	; 0x21
    3140:	9a a1       	ldd	r25, Y+34	; 0x22
    3142:	9e 8f       	std	Y+30, r25	; 0x1e
    3144:	8d 8f       	std	Y+29, r24	; 0x1d
    3146:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3148:	9e 8d       	ldd	r25, Y+30	; 0x1e
    314a:	01 97       	sbiw	r24, 0x01	; 1
    314c:	f1 f7       	brne	.-4      	; 0x314a <H_LCD_void_latchByte+0x150>
    314e:	9e 8f       	std	Y+30, r25	; 0x1e
    3150:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
    3152:	8c e0       	ldi	r24, 0x0C	; 12
    3154:	60 e0       	ldi	r22, 0x00	; 0
    3156:	0e 94 67 13 	call	0x26ce	; 0x26ce <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_D4,GET_BIT(copy_u8Byte,0));
    315a:	8b a5       	ldd	r24, Y+43	; 0x2b
    315c:	98 2f       	mov	r25, r24
    315e:	91 70       	andi	r25, 0x01	; 1
    3160:	84 e1       	ldi	r24, 0x14	; 20
    3162:	69 2f       	mov	r22, r25
    3164:	0e 94 67 13 	call	0x26ce	; 0x26ce <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D5,GET_BIT(copy_u8Byte,1));
    3168:	8b a5       	ldd	r24, Y+43	; 0x2b
    316a:	86 95       	lsr	r24
    316c:	98 2f       	mov	r25, r24
    316e:	91 70       	andi	r25, 0x01	; 1
    3170:	85 e1       	ldi	r24, 0x15	; 21
    3172:	69 2f       	mov	r22, r25
    3174:	0e 94 67 13 	call	0x26ce	; 0x26ce <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D6,GET_BIT(copy_u8Byte,2));
    3178:	8b a5       	ldd	r24, Y+43	; 0x2b
    317a:	86 95       	lsr	r24
    317c:	86 95       	lsr	r24
    317e:	98 2f       	mov	r25, r24
    3180:	91 70       	andi	r25, 0x01	; 1
    3182:	86 e1       	ldi	r24, 0x16	; 22
    3184:	69 2f       	mov	r22, r25
    3186:	0e 94 67 13 	call	0x26ce	; 0x26ce <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D7,GET_BIT(copy_u8Byte,3));
    318a:	8b a5       	ldd	r24, Y+43	; 0x2b
    318c:	86 95       	lsr	r24
    318e:	86 95       	lsr	r24
    3190:	86 95       	lsr	r24
    3192:	98 2f       	mov	r25, r24
    3194:	91 70       	andi	r25, 0x01	; 1
    3196:	88 e1       	ldi	r24, 0x18	; 24
    3198:	69 2f       	mov	r22, r25
    319a:	0e 94 67 13 	call	0x26ce	; 0x26ce <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_HIGH);
    319e:	8c e0       	ldi	r24, 0x0C	; 12
    31a0:	61 e0       	ldi	r22, 0x01	; 1
    31a2:	0e 94 67 13 	call	0x26ce	; 0x26ce <M_Dio_void_setPinValue>
    31a6:	80 e0       	ldi	r24, 0x00	; 0
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	a0 e8       	ldi	r26, 0x80	; 128
    31ac:	bf e3       	ldi	r27, 0x3F	; 63
    31ae:	89 8f       	std	Y+25, r24	; 0x19
    31b0:	9a 8f       	std	Y+26, r25	; 0x1a
    31b2:	ab 8f       	std	Y+27, r26	; 0x1b
    31b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31b6:	69 8d       	ldd	r22, Y+25	; 0x19
    31b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	4a e7       	ldi	r20, 0x7A	; 122
    31c4:	55 e4       	ldi	r21, 0x45	; 69
    31c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	8d 8b       	std	Y+21, r24	; 0x15
    31d0:	9e 8b       	std	Y+22, r25	; 0x16
    31d2:	af 8b       	std	Y+23, r26	; 0x17
    31d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31d6:	6d 89       	ldd	r22, Y+21	; 0x15
    31d8:	7e 89       	ldd	r23, Y+22	; 0x16
    31da:	8f 89       	ldd	r24, Y+23	; 0x17
    31dc:	98 8d       	ldd	r25, Y+24	; 0x18
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	40 e8       	ldi	r20, 0x80	; 128
    31e4:	5f e3       	ldi	r21, 0x3F	; 63
    31e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31ea:	88 23       	and	r24, r24
    31ec:	2c f4       	brge	.+10     	; 0x31f8 <H_LCD_void_latchByte+0x1fe>
		__ticks = 1;
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	9c 8b       	std	Y+20, r25	; 0x14
    31f4:	8b 8b       	std	Y+19, r24	; 0x13
    31f6:	3f c0       	rjmp	.+126    	; 0x3276 <H_LCD_void_latchByte+0x27c>
	else if (__tmp > 65535)
    31f8:	6d 89       	ldd	r22, Y+21	; 0x15
    31fa:	7e 89       	ldd	r23, Y+22	; 0x16
    31fc:	8f 89       	ldd	r24, Y+23	; 0x17
    31fe:	98 8d       	ldd	r25, Y+24	; 0x18
    3200:	20 e0       	ldi	r18, 0x00	; 0
    3202:	3f ef       	ldi	r19, 0xFF	; 255
    3204:	4f e7       	ldi	r20, 0x7F	; 127
    3206:	57 e4       	ldi	r21, 0x47	; 71
    3208:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    320c:	18 16       	cp	r1, r24
    320e:	4c f5       	brge	.+82     	; 0x3262 <H_LCD_void_latchByte+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3210:	69 8d       	ldd	r22, Y+25	; 0x19
    3212:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3214:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3216:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	40 e2       	ldi	r20, 0x20	; 32
    321e:	51 e4       	ldi	r21, 0x41	; 65
    3220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3224:	dc 01       	movw	r26, r24
    3226:	cb 01       	movw	r24, r22
    3228:	bc 01       	movw	r22, r24
    322a:	cd 01       	movw	r24, r26
    322c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	9c 8b       	std	Y+20, r25	; 0x14
    3236:	8b 8b       	std	Y+19, r24	; 0x13
    3238:	0f c0       	rjmp	.+30     	; 0x3258 <H_LCD_void_latchByte+0x25e>
    323a:	80 e9       	ldi	r24, 0x90	; 144
    323c:	91 e0       	ldi	r25, 0x01	; 1
    323e:	9a 8b       	std	Y+18, r25	; 0x12
    3240:	89 8b       	std	Y+17, r24	; 0x11
    3242:	89 89       	ldd	r24, Y+17	; 0x11
    3244:	9a 89       	ldd	r25, Y+18	; 0x12
    3246:	01 97       	sbiw	r24, 0x01	; 1
    3248:	f1 f7       	brne	.-4      	; 0x3246 <H_LCD_void_latchByte+0x24c>
    324a:	9a 8b       	std	Y+18, r25	; 0x12
    324c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    324e:	8b 89       	ldd	r24, Y+19	; 0x13
    3250:	9c 89       	ldd	r25, Y+20	; 0x14
    3252:	01 97       	sbiw	r24, 0x01	; 1
    3254:	9c 8b       	std	Y+20, r25	; 0x14
    3256:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3258:	8b 89       	ldd	r24, Y+19	; 0x13
    325a:	9c 89       	ldd	r25, Y+20	; 0x14
    325c:	00 97       	sbiw	r24, 0x00	; 0
    325e:	69 f7       	brne	.-38     	; 0x323a <H_LCD_void_latchByte+0x240>
    3260:	14 c0       	rjmp	.+40     	; 0x328a <H_LCD_void_latchByte+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3262:	6d 89       	ldd	r22, Y+21	; 0x15
    3264:	7e 89       	ldd	r23, Y+22	; 0x16
    3266:	8f 89       	ldd	r24, Y+23	; 0x17
    3268:	98 8d       	ldd	r25, Y+24	; 0x18
    326a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	9c 8b       	std	Y+20, r25	; 0x14
    3274:	8b 8b       	std	Y+19, r24	; 0x13
    3276:	8b 89       	ldd	r24, Y+19	; 0x13
    3278:	9c 89       	ldd	r25, Y+20	; 0x14
    327a:	98 8b       	std	Y+16, r25	; 0x10
    327c:	8f 87       	std	Y+15, r24	; 0x0f
    327e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3280:	98 89       	ldd	r25, Y+16	; 0x10
    3282:	01 97       	sbiw	r24, 0x01	; 1
    3284:	f1 f7       	brne	.-4      	; 0x3282 <H_LCD_void_latchByte+0x288>
    3286:	98 8b       	std	Y+16, r25	; 0x10
    3288:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
    328a:	8c e0       	ldi	r24, 0x0C	; 12
    328c:	60 e0       	ldi	r22, 0x00	; 0
    328e:	0e 94 67 13 	call	0x26ce	; 0x26ce <M_Dio_void_setPinValue>
    3292:	80 e0       	ldi	r24, 0x00	; 0
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	a0 ef       	ldi	r26, 0xF0	; 240
    3298:	b1 e4       	ldi	r27, 0x41	; 65
    329a:	8b 87       	std	Y+11, r24	; 0x0b
    329c:	9c 87       	std	Y+12, r25	; 0x0c
    329e:	ad 87       	std	Y+13, r26	; 0x0d
    32a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    32a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    32a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    32a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	4a e7       	ldi	r20, 0x7A	; 122
    32b0:	55 e4       	ldi	r21, 0x45	; 69
    32b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b6:	dc 01       	movw	r26, r24
    32b8:	cb 01       	movw	r24, r22
    32ba:	8f 83       	std	Y+7, r24	; 0x07
    32bc:	98 87       	std	Y+8, r25	; 0x08
    32be:	a9 87       	std	Y+9, r26	; 0x09
    32c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32c2:	6f 81       	ldd	r22, Y+7	; 0x07
    32c4:	78 85       	ldd	r23, Y+8	; 0x08
    32c6:	89 85       	ldd	r24, Y+9	; 0x09
    32c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	40 e8       	ldi	r20, 0x80	; 128
    32d0:	5f e3       	ldi	r21, 0x3F	; 63
    32d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32d6:	88 23       	and	r24, r24
    32d8:	2c f4       	brge	.+10     	; 0x32e4 <H_LCD_void_latchByte+0x2ea>
		__ticks = 1;
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	9e 83       	std	Y+6, r25	; 0x06
    32e0:	8d 83       	std	Y+5, r24	; 0x05
    32e2:	3f c0       	rjmp	.+126    	; 0x3362 <H_LCD_void_latchByte+0x368>
	else if (__tmp > 65535)
    32e4:	6f 81       	ldd	r22, Y+7	; 0x07
    32e6:	78 85       	ldd	r23, Y+8	; 0x08
    32e8:	89 85       	ldd	r24, Y+9	; 0x09
    32ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	3f ef       	ldi	r19, 0xFF	; 255
    32f0:	4f e7       	ldi	r20, 0x7F	; 127
    32f2:	57 e4       	ldi	r21, 0x47	; 71
    32f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32f8:	18 16       	cp	r1, r24
    32fa:	4c f5       	brge	.+82     	; 0x334e <H_LCD_void_latchByte+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    32fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3300:	8d 85       	ldd	r24, Y+13	; 0x0d
    3302:	9e 85       	ldd	r25, Y+14	; 0x0e
    3304:	20 e0       	ldi	r18, 0x00	; 0
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	40 e2       	ldi	r20, 0x20	; 32
    330a:	51 e4       	ldi	r21, 0x41	; 65
    330c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3310:	dc 01       	movw	r26, r24
    3312:	cb 01       	movw	r24, r22
    3314:	bc 01       	movw	r22, r24
    3316:	cd 01       	movw	r24, r26
    3318:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    331c:	dc 01       	movw	r26, r24
    331e:	cb 01       	movw	r24, r22
    3320:	9e 83       	std	Y+6, r25	; 0x06
    3322:	8d 83       	std	Y+5, r24	; 0x05
    3324:	0f c0       	rjmp	.+30     	; 0x3344 <H_LCD_void_latchByte+0x34a>
    3326:	80 e9       	ldi	r24, 0x90	; 144
    3328:	91 e0       	ldi	r25, 0x01	; 1
    332a:	9c 83       	std	Y+4, r25	; 0x04
    332c:	8b 83       	std	Y+3, r24	; 0x03
    332e:	8b 81       	ldd	r24, Y+3	; 0x03
    3330:	9c 81       	ldd	r25, Y+4	; 0x04
    3332:	01 97       	sbiw	r24, 0x01	; 1
    3334:	f1 f7       	brne	.-4      	; 0x3332 <H_LCD_void_latchByte+0x338>
    3336:	9c 83       	std	Y+4, r25	; 0x04
    3338:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    333a:	8d 81       	ldd	r24, Y+5	; 0x05
    333c:	9e 81       	ldd	r25, Y+6	; 0x06
    333e:	01 97       	sbiw	r24, 0x01	; 1
    3340:	9e 83       	std	Y+6, r25	; 0x06
    3342:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3344:	8d 81       	ldd	r24, Y+5	; 0x05
    3346:	9e 81       	ldd	r25, Y+6	; 0x06
    3348:	00 97       	sbiw	r24, 0x00	; 0
    334a:	69 f7       	brne	.-38     	; 0x3326 <H_LCD_void_latchByte+0x32c>
    334c:	14 c0       	rjmp	.+40     	; 0x3376 <H_LCD_void_latchByte+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    334e:	6f 81       	ldd	r22, Y+7	; 0x07
    3350:	78 85       	ldd	r23, Y+8	; 0x08
    3352:	89 85       	ldd	r24, Y+9	; 0x09
    3354:	9a 85       	ldd	r25, Y+10	; 0x0a
    3356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335a:	dc 01       	movw	r26, r24
    335c:	cb 01       	movw	r24, r22
    335e:	9e 83       	std	Y+6, r25	; 0x06
    3360:	8d 83       	std	Y+5, r24	; 0x05
    3362:	8d 81       	ldd	r24, Y+5	; 0x05
    3364:	9e 81       	ldd	r25, Y+6	; 0x06
    3366:	9a 83       	std	Y+2, r25	; 0x02
    3368:	89 83       	std	Y+1, r24	; 0x01
    336a:	89 81       	ldd	r24, Y+1	; 0x01
    336c:	9a 81       	ldd	r25, Y+2	; 0x02
    336e:	01 97       	sbiw	r24, 0x01	; 1
    3370:	f1 f7       	brne	.-4      	; 0x336e <H_LCD_void_latchByte+0x374>
    3372:	9a 83       	std	Y+2, r25	; 0x02
    3374:	89 83       	std	Y+1, r24	; 0x01
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
	_delay_ms(30);

#endif

}
    3376:	ab 96       	adiw	r28, 0x2b	; 43
    3378:	0f b6       	in	r0, 0x3f	; 63
    337a:	f8 94       	cli
    337c:	de bf       	out	0x3e, r29	; 62
    337e:	0f be       	out	0x3f, r0	; 63
    3380:	cd bf       	out	0x3d, r28	; 61
    3382:	cf 91       	pop	r28
    3384:	df 91       	pop	r29
    3386:	08 95       	ret

00003388 <H_LCD_void_Init>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_Init(void)
{
    3388:	0f 93       	push	r16
    338a:	1f 93       	push	r17
    338c:	df 93       	push	r29
    338e:	cf 93       	push	r28
    3390:	cd b7       	in	r28, 0x3d	; 61
    3392:	de b7       	in	r29, 0x3e	; 62
    3394:	c6 54       	subi	r28, 0x46	; 70
    3396:	d0 40       	sbci	r29, 0x00	; 0
    3398:	0f b6       	in	r0, 0x3f	; 63
    339a:	f8 94       	cli
    339c:	de bf       	out	0x3e, r29	; 62
    339e:	0f be       	out	0x3f, r0	; 63
    33a0:	cd bf       	out	0x3d, r28	; 61
    33a2:	fe 01       	movw	r30, r28
    33a4:	ed 5b       	subi	r30, 0xBD	; 189
    33a6:	ff 4f       	sbci	r31, 0xFF	; 255
    33a8:	80 e0       	ldi	r24, 0x00	; 0
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	a6 e1       	ldi	r26, 0x16	; 22
    33ae:	b3 e4       	ldi	r27, 0x43	; 67
    33b0:	80 83       	st	Z, r24
    33b2:	91 83       	std	Z+1, r25	; 0x01
    33b4:	a2 83       	std	Z+2, r26	; 0x02
    33b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b8:	8e 01       	movw	r16, r28
    33ba:	01 5c       	subi	r16, 0xC1	; 193
    33bc:	1f 4f       	sbci	r17, 0xFF	; 255
    33be:	fe 01       	movw	r30, r28
    33c0:	ed 5b       	subi	r30, 0xBD	; 189
    33c2:	ff 4f       	sbci	r31, 0xFF	; 255
    33c4:	60 81       	ld	r22, Z
    33c6:	71 81       	ldd	r23, Z+1	; 0x01
    33c8:	82 81       	ldd	r24, Z+2	; 0x02
    33ca:	93 81       	ldd	r25, Z+3	; 0x03
    33cc:	20 e0       	ldi	r18, 0x00	; 0
    33ce:	30 e0       	ldi	r19, 0x00	; 0
    33d0:	4a e7       	ldi	r20, 0x7A	; 122
    33d2:	55 e4       	ldi	r21, 0x45	; 69
    33d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d8:	dc 01       	movw	r26, r24
    33da:	cb 01       	movw	r24, r22
    33dc:	f8 01       	movw	r30, r16
    33de:	80 83       	st	Z, r24
    33e0:	91 83       	std	Z+1, r25	; 0x01
    33e2:	a2 83       	std	Z+2, r26	; 0x02
    33e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33e6:	fe 01       	movw	r30, r28
    33e8:	ff 96       	adiw	r30, 0x3f	; 63
    33ea:	60 81       	ld	r22, Z
    33ec:	71 81       	ldd	r23, Z+1	; 0x01
    33ee:	82 81       	ldd	r24, Z+2	; 0x02
    33f0:	93 81       	ldd	r25, Z+3	; 0x03
    33f2:	20 e0       	ldi	r18, 0x00	; 0
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	40 e8       	ldi	r20, 0x80	; 128
    33f8:	5f e3       	ldi	r21, 0x3F	; 63
    33fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33fe:	88 23       	and	r24, r24
    3400:	2c f4       	brge	.+10     	; 0x340c <H_LCD_void_Init+0x84>
		__ticks = 1;
    3402:	81 e0       	ldi	r24, 0x01	; 1
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	9e af       	std	Y+62, r25	; 0x3e
    3408:	8d af       	std	Y+61, r24	; 0x3d
    340a:	46 c0       	rjmp	.+140    	; 0x3498 <H_LCD_void_Init+0x110>
	else if (__tmp > 65535)
    340c:	fe 01       	movw	r30, r28
    340e:	ff 96       	adiw	r30, 0x3f	; 63
    3410:	60 81       	ld	r22, Z
    3412:	71 81       	ldd	r23, Z+1	; 0x01
    3414:	82 81       	ldd	r24, Z+2	; 0x02
    3416:	93 81       	ldd	r25, Z+3	; 0x03
    3418:	20 e0       	ldi	r18, 0x00	; 0
    341a:	3f ef       	ldi	r19, 0xFF	; 255
    341c:	4f e7       	ldi	r20, 0x7F	; 127
    341e:	57 e4       	ldi	r21, 0x47	; 71
    3420:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3424:	18 16       	cp	r1, r24
    3426:	64 f5       	brge	.+88     	; 0x3480 <H_LCD_void_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3428:	fe 01       	movw	r30, r28
    342a:	ed 5b       	subi	r30, 0xBD	; 189
    342c:	ff 4f       	sbci	r31, 0xFF	; 255
    342e:	60 81       	ld	r22, Z
    3430:	71 81       	ldd	r23, Z+1	; 0x01
    3432:	82 81       	ldd	r24, Z+2	; 0x02
    3434:	93 81       	ldd	r25, Z+3	; 0x03
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	40 e2       	ldi	r20, 0x20	; 32
    343c:	51 e4       	ldi	r21, 0x41	; 65
    343e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3442:	dc 01       	movw	r26, r24
    3444:	cb 01       	movw	r24, r22
    3446:	bc 01       	movw	r22, r24
    3448:	cd 01       	movw	r24, r26
    344a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	9e af       	std	Y+62, r25	; 0x3e
    3454:	8d af       	std	Y+61, r24	; 0x3d
    3456:	0f c0       	rjmp	.+30     	; 0x3476 <H_LCD_void_Init+0xee>
    3458:	80 e9       	ldi	r24, 0x90	; 144
    345a:	91 e0       	ldi	r25, 0x01	; 1
    345c:	9c af       	std	Y+60, r25	; 0x3c
    345e:	8b af       	std	Y+59, r24	; 0x3b
    3460:	8b ad       	ldd	r24, Y+59	; 0x3b
    3462:	9c ad       	ldd	r25, Y+60	; 0x3c
    3464:	01 97       	sbiw	r24, 0x01	; 1
    3466:	f1 f7       	brne	.-4      	; 0x3464 <H_LCD_void_Init+0xdc>
    3468:	9c af       	std	Y+60, r25	; 0x3c
    346a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    346c:	8d ad       	ldd	r24, Y+61	; 0x3d
    346e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3470:	01 97       	sbiw	r24, 0x01	; 1
    3472:	9e af       	std	Y+62, r25	; 0x3e
    3474:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3476:	8d ad       	ldd	r24, Y+61	; 0x3d
    3478:	9e ad       	ldd	r25, Y+62	; 0x3e
    347a:	00 97       	sbiw	r24, 0x00	; 0
    347c:	69 f7       	brne	.-38     	; 0x3458 <H_LCD_void_Init+0xd0>
    347e:	16 c0       	rjmp	.+44     	; 0x34ac <H_LCD_void_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3480:	fe 01       	movw	r30, r28
    3482:	ff 96       	adiw	r30, 0x3f	; 63
    3484:	60 81       	ld	r22, Z
    3486:	71 81       	ldd	r23, Z+1	; 0x01
    3488:	82 81       	ldd	r24, Z+2	; 0x02
    348a:	93 81       	ldd	r25, Z+3	; 0x03
    348c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3490:	dc 01       	movw	r26, r24
    3492:	cb 01       	movw	r24, r22
    3494:	9e af       	std	Y+62, r25	; 0x3e
    3496:	8d af       	std	Y+61, r24	; 0x3d
    3498:	8d ad       	ldd	r24, Y+61	; 0x3d
    349a:	9e ad       	ldd	r25, Y+62	; 0x3e
    349c:	9a af       	std	Y+58, r25	; 0x3a
    349e:	89 af       	std	Y+57, r24	; 0x39
    34a0:	89 ad       	ldd	r24, Y+57	; 0x39
    34a2:	9a ad       	ldd	r25, Y+58	; 0x3a
    34a4:	01 97       	sbiw	r24, 0x01	; 1
    34a6:	f1 f7       	brne	.-4      	; 0x34a4 <H_LCD_void_Init+0x11c>
    34a8:	9a af       	std	Y+58, r25	; 0x3a
    34aa:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(150);
	M_Dio_void_setPinValue(CLCD_RS_PIN,DIO_LOW);
    34ac:	8d e0       	ldi	r24, 0x0D	; 13
    34ae:	60 e0       	ldi	r22, 0x00	; 0
    34b0:	0e 94 67 13 	call	0x26ce	; 0x26ce <M_Dio_void_setPinValue>
	/*Function set*/
#if(LCD_MODE == _4_BIT_MODE)
	H_LCD_void_sendCommand(CLCD_FUNCTION_SET_1);
    34b4:	82 e0       	ldi	r24, 0x02	; 2
    34b6:	0e 94 4e 1c 	call	0x389c	; 0x389c <H_LCD_void_sendCommand>
    34ba:	80 e0       	ldi	r24, 0x00	; 0
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	a0 ea       	ldi	r26, 0xA0	; 160
    34c0:	b0 e4       	ldi	r27, 0x40	; 64
    34c2:	8d ab       	std	Y+53, r24	; 0x35
    34c4:	9e ab       	std	Y+54, r25	; 0x36
    34c6:	af ab       	std	Y+55, r26	; 0x37
    34c8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ca:	6d a9       	ldd	r22, Y+53	; 0x35
    34cc:	7e a9       	ldd	r23, Y+54	; 0x36
    34ce:	8f a9       	ldd	r24, Y+55	; 0x37
    34d0:	98 ad       	ldd	r25, Y+56	; 0x38
    34d2:	20 e0       	ldi	r18, 0x00	; 0
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	4a e7       	ldi	r20, 0x7A	; 122
    34d8:	55 e4       	ldi	r21, 0x45	; 69
    34da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34de:	dc 01       	movw	r26, r24
    34e0:	cb 01       	movw	r24, r22
    34e2:	89 ab       	std	Y+49, r24	; 0x31
    34e4:	9a ab       	std	Y+50, r25	; 0x32
    34e6:	ab ab       	std	Y+51, r26	; 0x33
    34e8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    34ea:	69 a9       	ldd	r22, Y+49	; 0x31
    34ec:	7a a9       	ldd	r23, Y+50	; 0x32
    34ee:	8b a9       	ldd	r24, Y+51	; 0x33
    34f0:	9c a9       	ldd	r25, Y+52	; 0x34
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	40 e8       	ldi	r20, 0x80	; 128
    34f8:	5f e3       	ldi	r21, 0x3F	; 63
    34fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34fe:	88 23       	and	r24, r24
    3500:	2c f4       	brge	.+10     	; 0x350c <H_LCD_void_Init+0x184>
		__ticks = 1;
    3502:	81 e0       	ldi	r24, 0x01	; 1
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	98 ab       	std	Y+48, r25	; 0x30
    3508:	8f a7       	std	Y+47, r24	; 0x2f
    350a:	3f c0       	rjmp	.+126    	; 0x358a <H_LCD_void_Init+0x202>
	else if (__tmp > 65535)
    350c:	69 a9       	ldd	r22, Y+49	; 0x31
    350e:	7a a9       	ldd	r23, Y+50	; 0x32
    3510:	8b a9       	ldd	r24, Y+51	; 0x33
    3512:	9c a9       	ldd	r25, Y+52	; 0x34
    3514:	20 e0       	ldi	r18, 0x00	; 0
    3516:	3f ef       	ldi	r19, 0xFF	; 255
    3518:	4f e7       	ldi	r20, 0x7F	; 127
    351a:	57 e4       	ldi	r21, 0x47	; 71
    351c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3520:	18 16       	cp	r1, r24
    3522:	4c f5       	brge	.+82     	; 0x3576 <H_LCD_void_Init+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3524:	6d a9       	ldd	r22, Y+53	; 0x35
    3526:	7e a9       	ldd	r23, Y+54	; 0x36
    3528:	8f a9       	ldd	r24, Y+55	; 0x37
    352a:	98 ad       	ldd	r25, Y+56	; 0x38
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	40 e2       	ldi	r20, 0x20	; 32
    3532:	51 e4       	ldi	r21, 0x41	; 65
    3534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3538:	dc 01       	movw	r26, r24
    353a:	cb 01       	movw	r24, r22
    353c:	bc 01       	movw	r22, r24
    353e:	cd 01       	movw	r24, r26
    3540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3544:	dc 01       	movw	r26, r24
    3546:	cb 01       	movw	r24, r22
    3548:	98 ab       	std	Y+48, r25	; 0x30
    354a:	8f a7       	std	Y+47, r24	; 0x2f
    354c:	0f c0       	rjmp	.+30     	; 0x356c <H_LCD_void_Init+0x1e4>
    354e:	80 e9       	ldi	r24, 0x90	; 144
    3550:	91 e0       	ldi	r25, 0x01	; 1
    3552:	9e a7       	std	Y+46, r25	; 0x2e
    3554:	8d a7       	std	Y+45, r24	; 0x2d
    3556:	8d a5       	ldd	r24, Y+45	; 0x2d
    3558:	9e a5       	ldd	r25, Y+46	; 0x2e
    355a:	01 97       	sbiw	r24, 0x01	; 1
    355c:	f1 f7       	brne	.-4      	; 0x355a <H_LCD_void_Init+0x1d2>
    355e:	9e a7       	std	Y+46, r25	; 0x2e
    3560:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3562:	8f a5       	ldd	r24, Y+47	; 0x2f
    3564:	98 a9       	ldd	r25, Y+48	; 0x30
    3566:	01 97       	sbiw	r24, 0x01	; 1
    3568:	98 ab       	std	Y+48, r25	; 0x30
    356a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    356c:	8f a5       	ldd	r24, Y+47	; 0x2f
    356e:	98 a9       	ldd	r25, Y+48	; 0x30
    3570:	00 97       	sbiw	r24, 0x00	; 0
    3572:	69 f7       	brne	.-38     	; 0x354e <H_LCD_void_Init+0x1c6>
    3574:	14 c0       	rjmp	.+40     	; 0x359e <H_LCD_void_Init+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3576:	69 a9       	ldd	r22, Y+49	; 0x31
    3578:	7a a9       	ldd	r23, Y+50	; 0x32
    357a:	8b a9       	ldd	r24, Y+51	; 0x33
    357c:	9c a9       	ldd	r25, Y+52	; 0x34
    357e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3582:	dc 01       	movw	r26, r24
    3584:	cb 01       	movw	r24, r22
    3586:	98 ab       	std	Y+48, r25	; 0x30
    3588:	8f a7       	std	Y+47, r24	; 0x2f
    358a:	8f a5       	ldd	r24, Y+47	; 0x2f
    358c:	98 a9       	ldd	r25, Y+48	; 0x30
    358e:	9c a7       	std	Y+44, r25	; 0x2c
    3590:	8b a7       	std	Y+43, r24	; 0x2b
    3592:	8b a5       	ldd	r24, Y+43	; 0x2b
    3594:	9c a5       	ldd	r25, Y+44	; 0x2c
    3596:	01 97       	sbiw	r24, 0x01	; 1
    3598:	f1 f7       	brne	.-4      	; 0x3596 <H_LCD_void_Init+0x20e>
    359a:	9c a7       	std	Y+44, r25	; 0x2c
    359c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	H_LCD_void_sendCommand(CLCD_FUNCTION_SET_2);
    359e:	88 e2       	ldi	r24, 0x28	; 40
    35a0:	0e 94 4e 1c 	call	0x389c	; 0x389c <H_LCD_void_sendCommand>
    35a4:	80 e0       	ldi	r24, 0x00	; 0
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	a0 ea       	ldi	r26, 0xA0	; 160
    35aa:	b0 e4       	ldi	r27, 0x40	; 64
    35ac:	8f a3       	std	Y+39, r24	; 0x27
    35ae:	98 a7       	std	Y+40, r25	; 0x28
    35b0:	a9 a7       	std	Y+41, r26	; 0x29
    35b2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35b4:	6f a1       	ldd	r22, Y+39	; 0x27
    35b6:	78 a5       	ldd	r23, Y+40	; 0x28
    35b8:	89 a5       	ldd	r24, Y+41	; 0x29
    35ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    35bc:	20 e0       	ldi	r18, 0x00	; 0
    35be:	30 e0       	ldi	r19, 0x00	; 0
    35c0:	4a e7       	ldi	r20, 0x7A	; 122
    35c2:	55 e4       	ldi	r21, 0x45	; 69
    35c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35c8:	dc 01       	movw	r26, r24
    35ca:	cb 01       	movw	r24, r22
    35cc:	8b a3       	std	Y+35, r24	; 0x23
    35ce:	9c a3       	std	Y+36, r25	; 0x24
    35d0:	ad a3       	std	Y+37, r26	; 0x25
    35d2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    35d4:	6b a1       	ldd	r22, Y+35	; 0x23
    35d6:	7c a1       	ldd	r23, Y+36	; 0x24
    35d8:	8d a1       	ldd	r24, Y+37	; 0x25
    35da:	9e a1       	ldd	r25, Y+38	; 0x26
    35dc:	20 e0       	ldi	r18, 0x00	; 0
    35de:	30 e0       	ldi	r19, 0x00	; 0
    35e0:	40 e8       	ldi	r20, 0x80	; 128
    35e2:	5f e3       	ldi	r21, 0x3F	; 63
    35e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35e8:	88 23       	and	r24, r24
    35ea:	2c f4       	brge	.+10     	; 0x35f6 <H_LCD_void_Init+0x26e>
		__ticks = 1;
    35ec:	81 e0       	ldi	r24, 0x01	; 1
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	9a a3       	std	Y+34, r25	; 0x22
    35f2:	89 a3       	std	Y+33, r24	; 0x21
    35f4:	3f c0       	rjmp	.+126    	; 0x3674 <H_LCD_void_Init+0x2ec>
	else if (__tmp > 65535)
    35f6:	6b a1       	ldd	r22, Y+35	; 0x23
    35f8:	7c a1       	ldd	r23, Y+36	; 0x24
    35fa:	8d a1       	ldd	r24, Y+37	; 0x25
    35fc:	9e a1       	ldd	r25, Y+38	; 0x26
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	3f ef       	ldi	r19, 0xFF	; 255
    3602:	4f e7       	ldi	r20, 0x7F	; 127
    3604:	57 e4       	ldi	r21, 0x47	; 71
    3606:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    360a:	18 16       	cp	r1, r24
    360c:	4c f5       	brge	.+82     	; 0x3660 <H_LCD_void_Init+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    360e:	6f a1       	ldd	r22, Y+39	; 0x27
    3610:	78 a5       	ldd	r23, Y+40	; 0x28
    3612:	89 a5       	ldd	r24, Y+41	; 0x29
    3614:	9a a5       	ldd	r25, Y+42	; 0x2a
    3616:	20 e0       	ldi	r18, 0x00	; 0
    3618:	30 e0       	ldi	r19, 0x00	; 0
    361a:	40 e2       	ldi	r20, 0x20	; 32
    361c:	51 e4       	ldi	r21, 0x41	; 65
    361e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3622:	dc 01       	movw	r26, r24
    3624:	cb 01       	movw	r24, r22
    3626:	bc 01       	movw	r22, r24
    3628:	cd 01       	movw	r24, r26
    362a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    362e:	dc 01       	movw	r26, r24
    3630:	cb 01       	movw	r24, r22
    3632:	9a a3       	std	Y+34, r25	; 0x22
    3634:	89 a3       	std	Y+33, r24	; 0x21
    3636:	0f c0       	rjmp	.+30     	; 0x3656 <H_LCD_void_Init+0x2ce>
    3638:	80 e9       	ldi	r24, 0x90	; 144
    363a:	91 e0       	ldi	r25, 0x01	; 1
    363c:	98 a3       	std	Y+32, r25	; 0x20
    363e:	8f 8f       	std	Y+31, r24	; 0x1f
    3640:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3642:	98 a1       	ldd	r25, Y+32	; 0x20
    3644:	01 97       	sbiw	r24, 0x01	; 1
    3646:	f1 f7       	brne	.-4      	; 0x3644 <H_LCD_void_Init+0x2bc>
    3648:	98 a3       	std	Y+32, r25	; 0x20
    364a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    364c:	89 a1       	ldd	r24, Y+33	; 0x21
    364e:	9a a1       	ldd	r25, Y+34	; 0x22
    3650:	01 97       	sbiw	r24, 0x01	; 1
    3652:	9a a3       	std	Y+34, r25	; 0x22
    3654:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3656:	89 a1       	ldd	r24, Y+33	; 0x21
    3658:	9a a1       	ldd	r25, Y+34	; 0x22
    365a:	00 97       	sbiw	r24, 0x00	; 0
    365c:	69 f7       	brne	.-38     	; 0x3638 <H_LCD_void_Init+0x2b0>
    365e:	14 c0       	rjmp	.+40     	; 0x3688 <H_LCD_void_Init+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3660:	6b a1       	ldd	r22, Y+35	; 0x23
    3662:	7c a1       	ldd	r23, Y+36	; 0x24
    3664:	8d a1       	ldd	r24, Y+37	; 0x25
    3666:	9e a1       	ldd	r25, Y+38	; 0x26
    3668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    366c:	dc 01       	movw	r26, r24
    366e:	cb 01       	movw	r24, r22
    3670:	9a a3       	std	Y+34, r25	; 0x22
    3672:	89 a3       	std	Y+33, r24	; 0x21
    3674:	89 a1       	ldd	r24, Y+33	; 0x21
    3676:	9a a1       	ldd	r25, Y+34	; 0x22
    3678:	9e 8f       	std	Y+30, r25	; 0x1e
    367a:	8d 8f       	std	Y+29, r24	; 0x1d
    367c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    367e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3680:	01 97       	sbiw	r24, 0x01	; 1
    3682:	f1 f7       	brne	.-4      	; 0x3680 <H_LCD_void_Init+0x2f8>
    3684:	9e 8f       	std	Y+30, r25	; 0x1e
    3686:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	/*Display ON/OFF*/
	H_LCD_void_sendCommand(CLCD_DISPLAY);
    3688:	8c e0       	ldi	r24, 0x0C	; 12
    368a:	0e 94 4e 1c 	call	0x389c	; 0x389c <H_LCD_void_sendCommand>
    368e:	80 e0       	ldi	r24, 0x00	; 0
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	a0 ea       	ldi	r26, 0xA0	; 160
    3694:	b0 e4       	ldi	r27, 0x40	; 64
    3696:	89 8f       	std	Y+25, r24	; 0x19
    3698:	9a 8f       	std	Y+26, r25	; 0x1a
    369a:	ab 8f       	std	Y+27, r26	; 0x1b
    369c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    369e:	69 8d       	ldd	r22, Y+25	; 0x19
    36a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36a6:	20 e0       	ldi	r18, 0x00	; 0
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	4a e7       	ldi	r20, 0x7A	; 122
    36ac:	55 e4       	ldi	r21, 0x45	; 69
    36ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b2:	dc 01       	movw	r26, r24
    36b4:	cb 01       	movw	r24, r22
    36b6:	8d 8b       	std	Y+21, r24	; 0x15
    36b8:	9e 8b       	std	Y+22, r25	; 0x16
    36ba:	af 8b       	std	Y+23, r26	; 0x17
    36bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    36be:	6d 89       	ldd	r22, Y+21	; 0x15
    36c0:	7e 89       	ldd	r23, Y+22	; 0x16
    36c2:	8f 89       	ldd	r24, Y+23	; 0x17
    36c4:	98 8d       	ldd	r25, Y+24	; 0x18
    36c6:	20 e0       	ldi	r18, 0x00	; 0
    36c8:	30 e0       	ldi	r19, 0x00	; 0
    36ca:	40 e8       	ldi	r20, 0x80	; 128
    36cc:	5f e3       	ldi	r21, 0x3F	; 63
    36ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36d2:	88 23       	and	r24, r24
    36d4:	2c f4       	brge	.+10     	; 0x36e0 <H_LCD_void_Init+0x358>
		__ticks = 1;
    36d6:	81 e0       	ldi	r24, 0x01	; 1
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	9c 8b       	std	Y+20, r25	; 0x14
    36dc:	8b 8b       	std	Y+19, r24	; 0x13
    36de:	3f c0       	rjmp	.+126    	; 0x375e <H_LCD_void_Init+0x3d6>
	else if (__tmp > 65535)
    36e0:	6d 89       	ldd	r22, Y+21	; 0x15
    36e2:	7e 89       	ldd	r23, Y+22	; 0x16
    36e4:	8f 89       	ldd	r24, Y+23	; 0x17
    36e6:	98 8d       	ldd	r25, Y+24	; 0x18
    36e8:	20 e0       	ldi	r18, 0x00	; 0
    36ea:	3f ef       	ldi	r19, 0xFF	; 255
    36ec:	4f e7       	ldi	r20, 0x7F	; 127
    36ee:	57 e4       	ldi	r21, 0x47	; 71
    36f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36f4:	18 16       	cp	r1, r24
    36f6:	4c f5       	brge	.+82     	; 0x374a <H_LCD_void_Init+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36f8:	69 8d       	ldd	r22, Y+25	; 0x19
    36fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3700:	20 e0       	ldi	r18, 0x00	; 0
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	40 e2       	ldi	r20, 0x20	; 32
    3706:	51 e4       	ldi	r21, 0x41	; 65
    3708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    370c:	dc 01       	movw	r26, r24
    370e:	cb 01       	movw	r24, r22
    3710:	bc 01       	movw	r22, r24
    3712:	cd 01       	movw	r24, r26
    3714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3718:	dc 01       	movw	r26, r24
    371a:	cb 01       	movw	r24, r22
    371c:	9c 8b       	std	Y+20, r25	; 0x14
    371e:	8b 8b       	std	Y+19, r24	; 0x13
    3720:	0f c0       	rjmp	.+30     	; 0x3740 <H_LCD_void_Init+0x3b8>
    3722:	80 e9       	ldi	r24, 0x90	; 144
    3724:	91 e0       	ldi	r25, 0x01	; 1
    3726:	9a 8b       	std	Y+18, r25	; 0x12
    3728:	89 8b       	std	Y+17, r24	; 0x11
    372a:	89 89       	ldd	r24, Y+17	; 0x11
    372c:	9a 89       	ldd	r25, Y+18	; 0x12
    372e:	01 97       	sbiw	r24, 0x01	; 1
    3730:	f1 f7       	brne	.-4      	; 0x372e <H_LCD_void_Init+0x3a6>
    3732:	9a 8b       	std	Y+18, r25	; 0x12
    3734:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3736:	8b 89       	ldd	r24, Y+19	; 0x13
    3738:	9c 89       	ldd	r25, Y+20	; 0x14
    373a:	01 97       	sbiw	r24, 0x01	; 1
    373c:	9c 8b       	std	Y+20, r25	; 0x14
    373e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3740:	8b 89       	ldd	r24, Y+19	; 0x13
    3742:	9c 89       	ldd	r25, Y+20	; 0x14
    3744:	00 97       	sbiw	r24, 0x00	; 0
    3746:	69 f7       	brne	.-38     	; 0x3722 <H_LCD_void_Init+0x39a>
    3748:	14 c0       	rjmp	.+40     	; 0x3772 <H_LCD_void_Init+0x3ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    374a:	6d 89       	ldd	r22, Y+21	; 0x15
    374c:	7e 89       	ldd	r23, Y+22	; 0x16
    374e:	8f 89       	ldd	r24, Y+23	; 0x17
    3750:	98 8d       	ldd	r25, Y+24	; 0x18
    3752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3756:	dc 01       	movw	r26, r24
    3758:	cb 01       	movw	r24, r22
    375a:	9c 8b       	std	Y+20, r25	; 0x14
    375c:	8b 8b       	std	Y+19, r24	; 0x13
    375e:	8b 89       	ldd	r24, Y+19	; 0x13
    3760:	9c 89       	ldd	r25, Y+20	; 0x14
    3762:	98 8b       	std	Y+16, r25	; 0x10
    3764:	8f 87       	std	Y+15, r24	; 0x0f
    3766:	8f 85       	ldd	r24, Y+15	; 0x0f
    3768:	98 89       	ldd	r25, Y+16	; 0x10
    376a:	01 97       	sbiw	r24, 0x01	; 1
    376c:	f1 f7       	brne	.-4      	; 0x376a <H_LCD_void_Init+0x3e2>
    376e:	98 8b       	std	Y+16, r25	; 0x10
    3770:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	/*Display clear*/
	H_LCD_void_sendCommand(CLCD_CLEAR);
    3772:	81 e0       	ldi	r24, 0x01	; 1
    3774:	0e 94 4e 1c 	call	0x389c	; 0x389c <H_LCD_void_sendCommand>
    3778:	80 e0       	ldi	r24, 0x00	; 0
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	a0 ea       	ldi	r26, 0xA0	; 160
    377e:	b0 e4       	ldi	r27, 0x40	; 64
    3780:	8b 87       	std	Y+11, r24	; 0x0b
    3782:	9c 87       	std	Y+12, r25	; 0x0c
    3784:	ad 87       	std	Y+13, r26	; 0x0d
    3786:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3788:	6b 85       	ldd	r22, Y+11	; 0x0b
    378a:	7c 85       	ldd	r23, Y+12	; 0x0c
    378c:	8d 85       	ldd	r24, Y+13	; 0x0d
    378e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3790:	20 e0       	ldi	r18, 0x00	; 0
    3792:	30 e0       	ldi	r19, 0x00	; 0
    3794:	4a e7       	ldi	r20, 0x7A	; 122
    3796:	55 e4       	ldi	r21, 0x45	; 69
    3798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    379c:	dc 01       	movw	r26, r24
    379e:	cb 01       	movw	r24, r22
    37a0:	8f 83       	std	Y+7, r24	; 0x07
    37a2:	98 87       	std	Y+8, r25	; 0x08
    37a4:	a9 87       	std	Y+9, r26	; 0x09
    37a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37a8:	6f 81       	ldd	r22, Y+7	; 0x07
    37aa:	78 85       	ldd	r23, Y+8	; 0x08
    37ac:	89 85       	ldd	r24, Y+9	; 0x09
    37ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    37b0:	20 e0       	ldi	r18, 0x00	; 0
    37b2:	30 e0       	ldi	r19, 0x00	; 0
    37b4:	40 e8       	ldi	r20, 0x80	; 128
    37b6:	5f e3       	ldi	r21, 0x3F	; 63
    37b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37bc:	88 23       	and	r24, r24
    37be:	2c f4       	brge	.+10     	; 0x37ca <H_LCD_void_Init+0x442>
		__ticks = 1;
    37c0:	81 e0       	ldi	r24, 0x01	; 1
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	9e 83       	std	Y+6, r25	; 0x06
    37c6:	8d 83       	std	Y+5, r24	; 0x05
    37c8:	3f c0       	rjmp	.+126    	; 0x3848 <H_LCD_void_Init+0x4c0>
	else if (__tmp > 65535)
    37ca:	6f 81       	ldd	r22, Y+7	; 0x07
    37cc:	78 85       	ldd	r23, Y+8	; 0x08
    37ce:	89 85       	ldd	r24, Y+9	; 0x09
    37d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    37d2:	20 e0       	ldi	r18, 0x00	; 0
    37d4:	3f ef       	ldi	r19, 0xFF	; 255
    37d6:	4f e7       	ldi	r20, 0x7F	; 127
    37d8:	57 e4       	ldi	r21, 0x47	; 71
    37da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37de:	18 16       	cp	r1, r24
    37e0:	4c f5       	brge	.+82     	; 0x3834 <H_LCD_void_Init+0x4ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    37e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    37e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    37e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	30 e0       	ldi	r19, 0x00	; 0
    37ee:	40 e2       	ldi	r20, 0x20	; 32
    37f0:	51 e4       	ldi	r21, 0x41	; 65
    37f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f6:	dc 01       	movw	r26, r24
    37f8:	cb 01       	movw	r24, r22
    37fa:	bc 01       	movw	r22, r24
    37fc:	cd 01       	movw	r24, r26
    37fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3802:	dc 01       	movw	r26, r24
    3804:	cb 01       	movw	r24, r22
    3806:	9e 83       	std	Y+6, r25	; 0x06
    3808:	8d 83       	std	Y+5, r24	; 0x05
    380a:	0f c0       	rjmp	.+30     	; 0x382a <H_LCD_void_Init+0x4a2>
    380c:	80 e9       	ldi	r24, 0x90	; 144
    380e:	91 e0       	ldi	r25, 0x01	; 1
    3810:	9c 83       	std	Y+4, r25	; 0x04
    3812:	8b 83       	std	Y+3, r24	; 0x03
    3814:	8b 81       	ldd	r24, Y+3	; 0x03
    3816:	9c 81       	ldd	r25, Y+4	; 0x04
    3818:	01 97       	sbiw	r24, 0x01	; 1
    381a:	f1 f7       	brne	.-4      	; 0x3818 <H_LCD_void_Init+0x490>
    381c:	9c 83       	std	Y+4, r25	; 0x04
    381e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3820:	8d 81       	ldd	r24, Y+5	; 0x05
    3822:	9e 81       	ldd	r25, Y+6	; 0x06
    3824:	01 97       	sbiw	r24, 0x01	; 1
    3826:	9e 83       	std	Y+6, r25	; 0x06
    3828:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    382a:	8d 81       	ldd	r24, Y+5	; 0x05
    382c:	9e 81       	ldd	r25, Y+6	; 0x06
    382e:	00 97       	sbiw	r24, 0x00	; 0
    3830:	69 f7       	brne	.-38     	; 0x380c <H_LCD_void_Init+0x484>
    3832:	14 c0       	rjmp	.+40     	; 0x385c <H_LCD_void_Init+0x4d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3834:	6f 81       	ldd	r22, Y+7	; 0x07
    3836:	78 85       	ldd	r23, Y+8	; 0x08
    3838:	89 85       	ldd	r24, Y+9	; 0x09
    383a:	9a 85       	ldd	r25, Y+10	; 0x0a
    383c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3840:	dc 01       	movw	r26, r24
    3842:	cb 01       	movw	r24, r22
    3844:	9e 83       	std	Y+6, r25	; 0x06
    3846:	8d 83       	std	Y+5, r24	; 0x05
    3848:	8d 81       	ldd	r24, Y+5	; 0x05
    384a:	9e 81       	ldd	r25, Y+6	; 0x06
    384c:	9a 83       	std	Y+2, r25	; 0x02
    384e:	89 83       	std	Y+1, r24	; 0x01
    3850:	89 81       	ldd	r24, Y+1	; 0x01
    3852:	9a 81       	ldd	r25, Y+2	; 0x02
    3854:	01 97       	sbiw	r24, 0x01	; 1
    3856:	f1 f7       	brne	.-4      	; 0x3854 <H_LCD_void_Init+0x4cc>
    3858:	9a 83       	std	Y+2, r25	; 0x02
    385a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	H_LCD_void_sendCommand(CLCD_ENTRY_MODE_SET);
    385c:	86 e0       	ldi	r24, 0x06	; 6
    385e:	0e 94 4e 1c 	call	0x389c	; 0x389c <H_LCD_void_sendCommand>
	/*clear display*/
	H_LCD_void_sendCommand(0b00000001);

#endif

}
    3862:	ca 5b       	subi	r28, 0xBA	; 186
    3864:	df 4f       	sbci	r29, 0xFF	; 255
    3866:	0f b6       	in	r0, 0x3f	; 63
    3868:	f8 94       	cli
    386a:	de bf       	out	0x3e, r29	; 62
    386c:	0f be       	out	0x3f, r0	; 63
    386e:	cd bf       	out	0x3d, r28	; 61
    3870:	cf 91       	pop	r28
    3872:	df 91       	pop	r29
    3874:	1f 91       	pop	r17
    3876:	0f 91       	pop	r16
    3878:	08 95       	ret

0000387a <H_LCD_void_sendData>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_sendData(u8 copy_u8data )
{
    387a:	df 93       	push	r29
    387c:	cf 93       	push	r28
    387e:	0f 92       	push	r0
    3880:	cd b7       	in	r28, 0x3d	; 61
    3882:	de b7       	in	r29, 0x3e	; 62
    3884:	89 83       	std	Y+1, r24	; 0x01
	/*SET RS TO ZERO*/
	M_Dio_void_setPinValue(CLCD_RS_PIN,DIO_HIGH);
    3886:	8d e0       	ldi	r24, 0x0D	; 13
    3888:	61 e0       	ldi	r22, 0x01	; 1
    388a:	0e 94 67 13 	call	0x26ce	; 0x26ce <M_Dio_void_setPinValue>
	/*Write command*/
	H_LCD_void_latchByte(copy_u8data);
    388e:	89 81       	ldd	r24, Y+1	; 0x01
    3890:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <H_LCD_void_latchByte>

}
    3894:	0f 90       	pop	r0
    3896:	cf 91       	pop	r28
    3898:	df 91       	pop	r29
    389a:	08 95       	ret

0000389c <H_LCD_void_sendCommand>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_sendCommand(u8 copy_u8command)
{
    389c:	df 93       	push	r29
    389e:	cf 93       	push	r28
    38a0:	0f 92       	push	r0
    38a2:	cd b7       	in	r28, 0x3d	; 61
    38a4:	de b7       	in	r29, 0x3e	; 62
    38a6:	89 83       	std	Y+1, r24	; 0x01
	/*SET RS TO ZERO*/
	M_Dio_void_setPinValue(CLCD_RS_PIN,DIO_LOW);
    38a8:	8d e0       	ldi	r24, 0x0D	; 13
    38aa:	60 e0       	ldi	r22, 0x00	; 0
    38ac:	0e 94 67 13 	call	0x26ce	; 0x26ce <M_Dio_void_setPinValue>
	/*Write command*/
	H_LCD_void_latchByte(copy_u8command);
    38b0:	89 81       	ldd	r24, Y+1	; 0x01
    38b2:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <H_LCD_void_latchByte>

}
    38b6:	0f 90       	pop	r0
    38b8:	cf 91       	pop	r28
    38ba:	df 91       	pop	r29
    38bc:	08 95       	ret

000038be <H_LCD_void_sendString>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_sendString(const s8 * pstr)
{
    38be:	df 93       	push	r29
    38c0:	cf 93       	push	r28
    38c2:	00 d0       	rcall	.+0      	; 0x38c4 <H_LCD_void_sendString+0x6>
    38c4:	0f 92       	push	r0
    38c6:	cd b7       	in	r28, 0x3d	; 61
    38c8:	de b7       	in	r29, 0x3e	; 62
    38ca:	9b 83       	std	Y+3, r25	; 0x03
    38cc:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter;
	for(counter=0;pstr[counter]!=0;counter++)
    38ce:	19 82       	std	Y+1, r1	; 0x01
    38d0:	0e c0       	rjmp	.+28     	; 0x38ee <H_LCD_void_sendString+0x30>
	{
		H_LCD_void_sendData(pstr[counter]);
    38d2:	89 81       	ldd	r24, Y+1	; 0x01
    38d4:	28 2f       	mov	r18, r24
    38d6:	30 e0       	ldi	r19, 0x00	; 0
    38d8:	8a 81       	ldd	r24, Y+2	; 0x02
    38da:	9b 81       	ldd	r25, Y+3	; 0x03
    38dc:	fc 01       	movw	r30, r24
    38de:	e2 0f       	add	r30, r18
    38e0:	f3 1f       	adc	r31, r19
    38e2:	80 81       	ld	r24, Z
    38e4:	0e 94 3d 1c 	call	0x387a	; 0x387a <H_LCD_void_sendData>
  Return Value     : void
******************************************/
void H_LCD_void_sendString(const s8 * pstr)
{
	u8 counter;
	for(counter=0;pstr[counter]!=0;counter++)
    38e8:	89 81       	ldd	r24, Y+1	; 0x01
    38ea:	8f 5f       	subi	r24, 0xFF	; 255
    38ec:	89 83       	std	Y+1, r24	; 0x01
    38ee:	89 81       	ldd	r24, Y+1	; 0x01
    38f0:	28 2f       	mov	r18, r24
    38f2:	30 e0       	ldi	r19, 0x00	; 0
    38f4:	8a 81       	ldd	r24, Y+2	; 0x02
    38f6:	9b 81       	ldd	r25, Y+3	; 0x03
    38f8:	fc 01       	movw	r30, r24
    38fa:	e2 0f       	add	r30, r18
    38fc:	f3 1f       	adc	r31, r19
    38fe:	80 81       	ld	r24, Z
    3900:	88 23       	and	r24, r24
    3902:	39 f7       	brne	.-50     	; 0x38d2 <H_LCD_void_sendString+0x14>
	{
		H_LCD_void_sendData(pstr[counter]);
	}
}
    3904:	0f 90       	pop	r0
    3906:	0f 90       	pop	r0
    3908:	0f 90       	pop	r0
    390a:	cf 91       	pop	r28
    390c:	df 91       	pop	r29
    390e:	08 95       	ret

00003910 <H_LCD_void_sendIntNum>:
	//H_LCD_void_sendData(copy_s32Num+'0');

}
*/
void H_LCD_void_sendIntNum(s32 copy_s32Num)
{
    3910:	0f 93       	push	r16
    3912:	1f 93       	push	r17
    3914:	df 93       	push	r29
    3916:	cf 93       	push	r28
    3918:	cd b7       	in	r28, 0x3d	; 61
    391a:	de b7       	in	r29, 0x3e	; 62
    391c:	a5 97       	sbiw	r28, 0x25	; 37
    391e:	0f b6       	in	r0, 0x3f	; 63
    3920:	f8 94       	cli
    3922:	de bf       	out	0x3e, r29	; 62
    3924:	0f be       	out	0x3f, r0	; 63
    3926:	cd bf       	out	0x3d, r28	; 61
    3928:	6a a3       	std	Y+34, r22	; 0x22
    392a:	7b a3       	std	Y+35, r23	; 0x23
    392c:	8c a3       	std	Y+36, r24	; 0x24
    392e:	9d a3       	std	Y+37, r25	; 0x25
	/* Local Variable to save the numbers digits*/
	s32 Local_Variable[8] = {0} ;
    3930:	80 e2       	ldi	r24, 0x20	; 32
    3932:	fe 01       	movw	r30, r28
    3934:	32 96       	adiw	r30, 0x02	; 2
    3936:	df 01       	movw	r26, r30
    3938:	98 2f       	mov	r25, r24
    393a:	1d 92       	st	X+, r1
    393c:	9a 95       	dec	r25
    393e:	e9 f7       	brne	.-6      	; 0x393a <H_LCD_void_sendIntNum+0x2a>
	u8 Local_Counter = 0 ;
    3940:	19 82       	std	Y+1, r1	; 0x01

	/* Check if the number is negative */
	if (copy_s32Num < 0)
    3942:	8a a1       	ldd	r24, Y+34	; 0x22
    3944:	9b a1       	ldd	r25, Y+35	; 0x23
    3946:	ac a1       	ldd	r26, Y+36	; 0x24
    3948:	bd a1       	ldd	r27, Y+37	; 0x25
    394a:	bb 23       	and	r27, r27
    394c:	0c f0       	brlt	.+2      	; 0x3950 <H_LCD_void_sendIntNum+0x40>
    394e:	4a c0       	rjmp	.+148    	; 0x39e4 <H_LCD_void_sendIntNum+0xd4>
	{
	/*Remove Negative Sign from number*/
	copy_s32Num = copy_s32Num * -1 ;
    3950:	8a a1       	ldd	r24, Y+34	; 0x22
    3952:	9b a1       	ldd	r25, Y+35	; 0x23
    3954:	ac a1       	ldd	r26, Y+36	; 0x24
    3956:	bd a1       	ldd	r27, Y+37	; 0x25
    3958:	b0 95       	com	r27
    395a:	a0 95       	com	r26
    395c:	90 95       	com	r25
    395e:	81 95       	neg	r24
    3960:	9f 4f       	sbci	r25, 0xFF	; 255
    3962:	af 4f       	sbci	r26, 0xFF	; 255
    3964:	bf 4f       	sbci	r27, 0xFF	; 255
    3966:	8a a3       	std	Y+34, r24	; 0x22
    3968:	9b a3       	std	Y+35, r25	; 0x23
    396a:	ac a3       	std	Y+36, r26	; 0x24
    396c:	bd a3       	std	Y+37, r27	; 0x25
	/*Send Negative Sign */
	H_LCD_void_sendData('-');
    396e:	8d e2       	ldi	r24, 0x2D	; 45
    3970:	0e 94 3d 1c 	call	0x387a	; 0x387a <H_LCD_void_sendData>
    3974:	37 c0       	rjmp	.+110    	; 0x39e4 <H_LCD_void_sendIntNum+0xd4>
	}
	/* While loop to split the Numbers and save it in Local_Variable*/
	while (copy_s32Num != 0)
	{
	Local_Variable[Local_Counter] = copy_s32Num % 10 ;
    3976:	89 81       	ldd	r24, Y+1	; 0x01
    3978:	08 2f       	mov	r16, r24
    397a:	10 e0       	ldi	r17, 0x00	; 0
    397c:	8a a1       	ldd	r24, Y+34	; 0x22
    397e:	9b a1       	ldd	r25, Y+35	; 0x23
    3980:	ac a1       	ldd	r26, Y+36	; 0x24
    3982:	bd a1       	ldd	r27, Y+37	; 0x25
    3984:	2a e0       	ldi	r18, 0x0A	; 10
    3986:	30 e0       	ldi	r19, 0x00	; 0
    3988:	40 e0       	ldi	r20, 0x00	; 0
    398a:	50 e0       	ldi	r21, 0x00	; 0
    398c:	bc 01       	movw	r22, r24
    398e:	cd 01       	movw	r24, r26
    3990:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__divmodsi4>
    3994:	dc 01       	movw	r26, r24
    3996:	cb 01       	movw	r24, r22
    3998:	ac 01       	movw	r20, r24
    399a:	bd 01       	movw	r22, r26
    399c:	98 01       	movw	r18, r16
    399e:	22 0f       	add	r18, r18
    39a0:	33 1f       	adc	r19, r19
    39a2:	22 0f       	add	r18, r18
    39a4:	33 1f       	adc	r19, r19
    39a6:	ce 01       	movw	r24, r28
    39a8:	01 96       	adiw	r24, 0x01	; 1
    39aa:	82 0f       	add	r24, r18
    39ac:	93 1f       	adc	r25, r19
    39ae:	fc 01       	movw	r30, r24
    39b0:	31 96       	adiw	r30, 0x01	; 1
    39b2:	40 83       	st	Z, r20
    39b4:	51 83       	std	Z+1, r21	; 0x01
    39b6:	62 83       	std	Z+2, r22	; 0x02
    39b8:	73 83       	std	Z+3, r23	; 0x03
	copy_s32Num = copy_s32Num / 10 ;
    39ba:	8a a1       	ldd	r24, Y+34	; 0x22
    39bc:	9b a1       	ldd	r25, Y+35	; 0x23
    39be:	ac a1       	ldd	r26, Y+36	; 0x24
    39c0:	bd a1       	ldd	r27, Y+37	; 0x25
    39c2:	2a e0       	ldi	r18, 0x0A	; 10
    39c4:	30 e0       	ldi	r19, 0x00	; 0
    39c6:	40 e0       	ldi	r20, 0x00	; 0
    39c8:	50 e0       	ldi	r21, 0x00	; 0
    39ca:	bc 01       	movw	r22, r24
    39cc:	cd 01       	movw	r24, r26
    39ce:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__divmodsi4>
    39d2:	da 01       	movw	r26, r20
    39d4:	c9 01       	movw	r24, r18
    39d6:	8a a3       	std	Y+34, r24	; 0x22
    39d8:	9b a3       	std	Y+35, r25	; 0x23
    39da:	ac a3       	std	Y+36, r26	; 0x24
    39dc:	bd a3       	std	Y+37, r27	; 0x25
	Local_Counter ++ ;
    39de:	89 81       	ldd	r24, Y+1	; 0x01
    39e0:	8f 5f       	subi	r24, 0xFF	; 255
    39e2:	89 83       	std	Y+1, r24	; 0x01
	copy_s32Num = copy_s32Num * -1 ;
	/*Send Negative Sign */
	H_LCD_void_sendData('-');
	}
	/* While loop to split the Numbers and save it in Local_Variable*/
	while (copy_s32Num != 0)
    39e4:	8a a1       	ldd	r24, Y+34	; 0x22
    39e6:	9b a1       	ldd	r25, Y+35	; 0x23
    39e8:	ac a1       	ldd	r26, Y+36	; 0x24
    39ea:	bd a1       	ldd	r27, Y+37	; 0x25
    39ec:	00 97       	sbiw	r24, 0x00	; 0
    39ee:	a1 05       	cpc	r26, r1
    39f0:	b1 05       	cpc	r27, r1
    39f2:	09 f6       	brne	.-126    	; 0x3976 <H_LCD_void_sendIntNum+0x66>
	copy_s32Num = copy_s32Num / 10 ;
	Local_Counter ++ ;

	}
	/* For loop to send the numbers using SendData*/
	for (Local_Counter --; Local_Counter < '0' ; Local_Counter--)
    39f4:	89 81       	ldd	r24, Y+1	; 0x01
    39f6:	81 50       	subi	r24, 0x01	; 1
    39f8:	89 83       	std	Y+1, r24	; 0x01
    39fa:	18 c0       	rjmp	.+48     	; 0x3a2c <H_LCD_void_sendIntNum+0x11c>
	{
		 H_LCD_void_sendData('0' + Local_Variable[Local_Counter]);
    39fc:	89 81       	ldd	r24, Y+1	; 0x01
    39fe:	88 2f       	mov	r24, r24
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	9c 01       	movw	r18, r24
    3a04:	22 0f       	add	r18, r18
    3a06:	33 1f       	adc	r19, r19
    3a08:	22 0f       	add	r18, r18
    3a0a:	33 1f       	adc	r19, r19
    3a0c:	ce 01       	movw	r24, r28
    3a0e:	01 96       	adiw	r24, 0x01	; 1
    3a10:	82 0f       	add	r24, r18
    3a12:	93 1f       	adc	r25, r19
    3a14:	fc 01       	movw	r30, r24
    3a16:	31 96       	adiw	r30, 0x01	; 1
    3a18:	80 81       	ld	r24, Z
    3a1a:	91 81       	ldd	r25, Z+1	; 0x01
    3a1c:	a2 81       	ldd	r26, Z+2	; 0x02
    3a1e:	b3 81       	ldd	r27, Z+3	; 0x03
    3a20:	80 5d       	subi	r24, 0xD0	; 208
    3a22:	0e 94 3d 1c 	call	0x387a	; 0x387a <H_LCD_void_sendData>
	copy_s32Num = copy_s32Num / 10 ;
	Local_Counter ++ ;

	}
	/* For loop to send the numbers using SendData*/
	for (Local_Counter --; Local_Counter < '0' ; Local_Counter--)
    3a26:	89 81       	ldd	r24, Y+1	; 0x01
    3a28:	81 50       	subi	r24, 0x01	; 1
    3a2a:	89 83       	std	Y+1, r24	; 0x01
    3a2c:	89 81       	ldd	r24, Y+1	; 0x01
    3a2e:	80 33       	cpi	r24, 0x30	; 48
    3a30:	28 f3       	brcs	.-54     	; 0x39fc <H_LCD_void_sendIntNum+0xec>
	{
		 H_LCD_void_sendData('0' + Local_Variable[Local_Counter]);
	}
}
    3a32:	a5 96       	adiw	r28, 0x25	; 37
    3a34:	0f b6       	in	r0, 0x3f	; 63
    3a36:	f8 94       	cli
    3a38:	de bf       	out	0x3e, r29	; 62
    3a3a:	0f be       	out	0x3f, r0	; 63
    3a3c:	cd bf       	out	0x3d, r28	; 61
    3a3e:	cf 91       	pop	r28
    3a40:	df 91       	pop	r29
    3a42:	1f 91       	pop	r17
    3a44:	0f 91       	pop	r16
    3a46:	08 95       	ret

00003a48 <H_LCD_void_gotoXY>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col)
{
    3a48:	df 93       	push	r29
    3a4a:	cf 93       	push	r28
    3a4c:	00 d0       	rcall	.+0      	; 0x3a4e <H_LCD_void_gotoXY+0x6>
    3a4e:	0f 92       	push	r0
    3a50:	cd b7       	in	r28, 0x3d	; 61
    3a52:	de b7       	in	r29, 0x3e	; 62
    3a54:	8a 83       	std	Y+2, r24	; 0x02
    3a56:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(copy_u8Row == 1)
    3a58:	8a 81       	ldd	r24, Y+2	; 0x02
    3a5a:	81 30       	cpi	r24, 0x01	; 1
    3a5c:	19 f4       	brne	.+6      	; 0x3a64 <H_LCD_void_gotoXY+0x1c>
	{
		Local_u8Address = copy_u8Col;
    3a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a60:	89 83       	std	Y+1, r24	; 0x01
    3a62:	14 c0       	rjmp	.+40     	; 0x3a8c <H_LCD_void_gotoXY+0x44>
	}
	else if(copy_u8Row == 2)
    3a64:	8a 81       	ldd	r24, Y+2	; 0x02
    3a66:	82 30       	cpi	r24, 0x02	; 2
    3a68:	21 f4       	brne	.+8      	; 0x3a72 <H_LCD_void_gotoXY+0x2a>
	{
		Local_u8Address = copy_u8Col + 0x40;
    3a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a6c:	80 5c       	subi	r24, 0xC0	; 192
    3a6e:	89 83       	std	Y+1, r24	; 0x01
    3a70:	0d c0       	rjmp	.+26     	; 0x3a8c <H_LCD_void_gotoXY+0x44>
	}
	else if(copy_u8Row == 3)
    3a72:	8a 81       	ldd	r24, Y+2	; 0x02
    3a74:	83 30       	cpi	r24, 0x03	; 3
    3a76:	21 f4       	brne	.+8      	; 0x3a80 <H_LCD_void_gotoXY+0x38>
	{
		Local_u8Address = copy_u8Col + 0x14;
    3a78:	8b 81       	ldd	r24, Y+3	; 0x03
    3a7a:	8c 5e       	subi	r24, 0xEC	; 236
    3a7c:	89 83       	std	Y+1, r24	; 0x01
    3a7e:	06 c0       	rjmp	.+12     	; 0x3a8c <H_LCD_void_gotoXY+0x44>
	}
	else if(copy_u8Row == 4)
    3a80:	8a 81       	ldd	r24, Y+2	; 0x02
    3a82:	84 30       	cpi	r24, 0x04	; 4
    3a84:	19 f4       	brne	.+6      	; 0x3a8c <H_LCD_void_gotoXY+0x44>
	{
		Local_u8Address = copy_u8Col + 0x54;
    3a86:	8b 81       	ldd	r24, Y+3	; 0x03
    3a88:	8c 5a       	subi	r24, 0xAC	; 172
    3a8a:	89 83       	std	Y+1, r24	; 0x01
	else
	{

	}
	//128 Is added to the address to set the most significant bit by 1 according to DDRAM address instruction
	H_LCD_void_sendCommand(Local_u8Address+128);
    3a8c:	89 81       	ldd	r24, Y+1	; 0x01
    3a8e:	80 58       	subi	r24, 0x80	; 128
    3a90:	0e 94 4e 1c 	call	0x389c	; 0x389c <H_LCD_void_sendCommand>
}
    3a94:	0f 90       	pop	r0
    3a96:	0f 90       	pop	r0
    3a98:	0f 90       	pop	r0
    3a9a:	cf 91       	pop	r28
    3a9c:	df 91       	pop	r29
    3a9e:	08 95       	ret

00003aa0 <H_LCD_void_creatCustomChar>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_creatCustomChar (const u8 * ArrPattern,u8 copy_u8charCode)
{
    3aa0:	df 93       	push	r29
    3aa2:	cf 93       	push	r28
    3aa4:	00 d0       	rcall	.+0      	; 0x3aa6 <H_LCD_void_creatCustomChar+0x6>
    3aa6:	00 d0       	rcall	.+0      	; 0x3aa8 <H_LCD_void_creatCustomChar+0x8>
    3aa8:	0f 92       	push	r0
    3aaa:	cd b7       	in	r28, 0x3d	; 61
    3aac:	de b7       	in	r29, 0x3e	; 62
    3aae:	9c 83       	std	Y+4, r25	; 0x04
    3ab0:	8b 83       	std	Y+3, r24	; 0x03
    3ab2:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_counter=0;
    3ab4:	1a 82       	std	Y+2, r1	; 0x02
	/*first calculate CGRAM address since each block of address is 8bytes*/
	u8 Local_u8CGramaddress=0;
    3ab6:	19 82       	std	Y+1, r1	; 0x01
	Local_u8CGramaddress = copy_u8charCode*8;
    3ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    3aba:	88 2f       	mov	r24, r24
    3abc:	90 e0       	ldi	r25, 0x00	; 0
    3abe:	88 0f       	add	r24, r24
    3ac0:	99 1f       	adc	r25, r25
    3ac2:	88 0f       	add	r24, r24
    3ac4:	99 1f       	adc	r25, r25
    3ac6:	88 0f       	add	r24, r24
    3ac8:	99 1f       	adc	r25, r25
    3aca:	89 83       	std	Y+1, r24	; 0x01
	/*Access CGRAM block using function Send command by setting bit 6 and clearing bit7*/
	H_LCD_void_sendCommand(Local_u8CGramaddress+64);
    3acc:	89 81       	ldd	r24, Y+1	; 0x01
    3ace:	80 5c       	subi	r24, 0xC0	; 192
    3ad0:	0e 94 4e 1c 	call	0x389c	; 0x389c <H_LCD_void_sendCommand>
	/*write the pattern to the CG ram */
	for(Local_counter=0;Local_counter<8;Local_counter++) /*<8 since there are 8 memory locations only for cgram (64bytes)*/
    3ad4:	1a 82       	std	Y+2, r1	; 0x02
    3ad6:	0e c0       	rjmp	.+28     	; 0x3af4 <H_LCD_void_creatCustomChar+0x54>
	{
		H_LCD_void_sendData(ArrPattern[Local_counter]);
    3ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    3ada:	28 2f       	mov	r18, r24
    3adc:	30 e0       	ldi	r19, 0x00	; 0
    3ade:	8b 81       	ldd	r24, Y+3	; 0x03
    3ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ae2:	fc 01       	movw	r30, r24
    3ae4:	e2 0f       	add	r30, r18
    3ae6:	f3 1f       	adc	r31, r19
    3ae8:	80 81       	ld	r24, Z
    3aea:	0e 94 3d 1c 	call	0x387a	; 0x387a <H_LCD_void_sendData>
	u8 Local_u8CGramaddress=0;
	Local_u8CGramaddress = copy_u8charCode*8;
	/*Access CGRAM block using function Send command by setting bit 6 and clearing bit7*/
	H_LCD_void_sendCommand(Local_u8CGramaddress+64);
	/*write the pattern to the CG ram */
	for(Local_counter=0;Local_counter<8;Local_counter++) /*<8 since there are 8 memory locations only for cgram (64bytes)*/
    3aee:	8a 81       	ldd	r24, Y+2	; 0x02
    3af0:	8f 5f       	subi	r24, 0xFF	; 255
    3af2:	8a 83       	std	Y+2, r24	; 0x02
    3af4:	8a 81       	ldd	r24, Y+2	; 0x02
    3af6:	88 30       	cpi	r24, 0x08	; 8
    3af8:	78 f3       	brcs	.-34     	; 0x3ad8 <H_LCD_void_creatCustomChar+0x38>
	{
		H_LCD_void_sendData(ArrPattern[Local_counter]);
	}
	H_LCD_void_gotoXY(1,0);
    3afa:	81 e0       	ldi	r24, 0x01	; 1
    3afc:	60 e0       	ldi	r22, 0x00	; 0
    3afe:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <H_LCD_void_gotoXY>
	H_LCD_void_sendData(copy_u8charCode);
    3b02:	8d 81       	ldd	r24, Y+5	; 0x05
    3b04:	0e 94 3d 1c 	call	0x387a	; 0x387a <H_LCD_void_sendData>

}
    3b08:	0f 90       	pop	r0
    3b0a:	0f 90       	pop	r0
    3b0c:	0f 90       	pop	r0
    3b0e:	0f 90       	pop	r0
    3b10:	0f 90       	pop	r0
    3b12:	cf 91       	pop	r28
    3b14:	df 91       	pop	r29
    3b16:	08 95       	ret

00003b18 <H_LCD_void_displayCustomChar>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_displayCustomChar (u8 copy_u8charCode)
{
    3b18:	df 93       	push	r29
    3b1a:	cf 93       	push	r28
    3b1c:	0f 92       	push	r0
    3b1e:	cd b7       	in	r28, 0x3d	; 61
    3b20:	de b7       	in	r29, 0x3e	; 62
    3b22:	89 83       	std	Y+1, r24	; 0x01
	/*give the custom char number to send data*/
	H_LCD_void_sendData(copy_u8charCode);
    3b24:	89 81       	ldd	r24, Y+1	; 0x01
    3b26:	0e 94 3d 1c 	call	0x387a	; 0x387a <H_LCD_void_sendData>
}
    3b2a:	0f 90       	pop	r0
    3b2c:	cf 91       	pop	r28
    3b2e:	df 91       	pop	r29
    3b30:	08 95       	ret

00003b32 <H_LCD_void_ClearDisplay>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_ClearDisplay(void)
{
    3b32:	df 93       	push	r29
    3b34:	cf 93       	push	r28
    3b36:	cd b7       	in	r28, 0x3d	; 61
    3b38:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_sendCommand(CLCD_CLEAR);
    3b3a:	81 e0       	ldi	r24, 0x01	; 1
    3b3c:	0e 94 4e 1c 	call	0x389c	; 0x389c <H_LCD_void_sendCommand>
}
    3b40:	cf 91       	pop	r28
    3b42:	df 91       	pop	r29
    3b44:	08 95       	ret

00003b46 <main>:
extern const Port_ConfigType PORT_Config_Arr[PORT_PINS_CONFIG_ARR_SIZE];
UART_CONFIG ARR_UART_CFG_3={Baud_16MHz_9600,Word_Size_8,Disabled,One_Stop_bit};

void Display_Received_data(void);
int main(void)
{
    3b46:	df 93       	push	r29
    3b48:	cf 93       	push	r28
    3b4a:	cd b7       	in	r28, 0x3d	; 61
    3b4c:	de b7       	in	r29, 0x3e	; 62
	Port_Init(PORT_Config_Arr);
    3b4e:	8f ec       	ldi	r24, 0xCF	; 207
    3b50:	91 e0       	ldi	r25, 0x01	; 1
    3b52:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Port_Init>
	H_LCD_void_Init();
    3b56:	0e 94 c4 19 	call	0x3388	; 0x3388 <H_LCD_void_Init>
	UART_Init(&ARR_UART_CFG_3);
    3b5a:	8e ea       	ldi	r24, 0xAE	; 174
    3b5c:	91 e0       	ldi	r25, 0x01	; 1
    3b5e:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_Init>
	UART_SetCallBack(Display_Received_data);
    3b62:	88 eb       	ldi	r24, 0xB8	; 184
    3b64:	9d e1       	ldi	r25, 0x1D	; 29
    3b66:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <UART_SetCallBack>
	GIE_voidEnable();
    3b6a:	0e 94 95 10 	call	0x212a	; 0x212a <GIE_voidEnable>
    3b6e:	ff cf       	rjmp	.-2      	; 0x3b6e <main+0x28>

00003b70 <Display_Received_data>:

	}
}

void Display_Received_data(void)
{
    3b70:	df 93       	push	r29
    3b72:	cf 93       	push	r28
    3b74:	0f 92       	push	r0
    3b76:	cd b7       	in	r28, 0x3d	; 61
    3b78:	de b7       	in	r29, 0x3e	; 62
	u8 Received_Data=0;
    3b7a:	19 82       	std	Y+1, r1	; 0x01
	Received_Data=UART_RecieveByteASynchCallback();
    3b7c:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <UART_RecieveByteASynchCallback>
    3b80:	89 83       	std	Y+1, r24	; 0x01
	if(Received_Data!='\0' && Received_Data != 'A')
    3b82:	89 81       	ldd	r24, Y+1	; 0x01
    3b84:	88 23       	and	r24, r24
    3b86:	39 f0       	breq	.+14     	; 0x3b96 <Display_Received_data+0x26>
    3b88:	89 81       	ldd	r24, Y+1	; 0x01
    3b8a:	81 34       	cpi	r24, 0x41	; 65
    3b8c:	21 f0       	breq	.+8      	; 0x3b96 <Display_Received_data+0x26>
	{
		H_LCD_void_sendData(Received_Data);
    3b8e:	89 81       	ldd	r24, Y+1	; 0x01
    3b90:	0e 94 3d 1c 	call	0x387a	; 0x387a <H_LCD_void_sendData>
    3b94:	05 c0       	rjmp	.+10     	; 0x3ba0 <Display_Received_data+0x30>
	}
	else if(Received_Data=='A')
    3b96:	89 81       	ldd	r24, Y+1	; 0x01
    3b98:	81 34       	cpi	r24, 0x41	; 65
    3b9a:	11 f4       	brne	.+4      	; 0x3ba0 <Display_Received_data+0x30>
	{
		H_LCD_void_ClearDisplay();
    3b9c:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <H_LCD_void_ClearDisplay>
	}
	else
	{
		//H_LCD_void_ClearDisplay();
	}
}
    3ba0:	0f 90       	pop	r0
    3ba2:	cf 91       	pop	r28
    3ba4:	df 91       	pop	r29
    3ba6:	08 95       	ret

00003ba8 <__mulsi3>:
    3ba8:	62 9f       	mul	r22, r18
    3baa:	d0 01       	movw	r26, r0
    3bac:	73 9f       	mul	r23, r19
    3bae:	f0 01       	movw	r30, r0
    3bb0:	82 9f       	mul	r24, r18
    3bb2:	e0 0d       	add	r30, r0
    3bb4:	f1 1d       	adc	r31, r1
    3bb6:	64 9f       	mul	r22, r20
    3bb8:	e0 0d       	add	r30, r0
    3bba:	f1 1d       	adc	r31, r1
    3bbc:	92 9f       	mul	r25, r18
    3bbe:	f0 0d       	add	r31, r0
    3bc0:	83 9f       	mul	r24, r19
    3bc2:	f0 0d       	add	r31, r0
    3bc4:	74 9f       	mul	r23, r20
    3bc6:	f0 0d       	add	r31, r0
    3bc8:	65 9f       	mul	r22, r21
    3bca:	f0 0d       	add	r31, r0
    3bcc:	99 27       	eor	r25, r25
    3bce:	72 9f       	mul	r23, r18
    3bd0:	b0 0d       	add	r27, r0
    3bd2:	e1 1d       	adc	r30, r1
    3bd4:	f9 1f       	adc	r31, r25
    3bd6:	63 9f       	mul	r22, r19
    3bd8:	b0 0d       	add	r27, r0
    3bda:	e1 1d       	adc	r30, r1
    3bdc:	f9 1f       	adc	r31, r25
    3bde:	bd 01       	movw	r22, r26
    3be0:	cf 01       	movw	r24, r30
    3be2:	11 24       	eor	r1, r1
    3be4:	08 95       	ret

00003be6 <__udivmodqi4>:
    3be6:	99 1b       	sub	r25, r25
    3be8:	79 e0       	ldi	r23, 0x09	; 9
    3bea:	04 c0       	rjmp	.+8      	; 0x3bf4 <__udivmodqi4_ep>

00003bec <__udivmodqi4_loop>:
    3bec:	99 1f       	adc	r25, r25
    3bee:	96 17       	cp	r25, r22
    3bf0:	08 f0       	brcs	.+2      	; 0x3bf4 <__udivmodqi4_ep>
    3bf2:	96 1b       	sub	r25, r22

00003bf4 <__udivmodqi4_ep>:
    3bf4:	88 1f       	adc	r24, r24
    3bf6:	7a 95       	dec	r23
    3bf8:	c9 f7       	brne	.-14     	; 0x3bec <__udivmodqi4_loop>
    3bfa:	80 95       	com	r24
    3bfc:	08 95       	ret

00003bfe <__udivmodsi4>:
    3bfe:	a1 e2       	ldi	r26, 0x21	; 33
    3c00:	1a 2e       	mov	r1, r26
    3c02:	aa 1b       	sub	r26, r26
    3c04:	bb 1b       	sub	r27, r27
    3c06:	fd 01       	movw	r30, r26
    3c08:	0d c0       	rjmp	.+26     	; 0x3c24 <__udivmodsi4_ep>

00003c0a <__udivmodsi4_loop>:
    3c0a:	aa 1f       	adc	r26, r26
    3c0c:	bb 1f       	adc	r27, r27
    3c0e:	ee 1f       	adc	r30, r30
    3c10:	ff 1f       	adc	r31, r31
    3c12:	a2 17       	cp	r26, r18
    3c14:	b3 07       	cpc	r27, r19
    3c16:	e4 07       	cpc	r30, r20
    3c18:	f5 07       	cpc	r31, r21
    3c1a:	20 f0       	brcs	.+8      	; 0x3c24 <__udivmodsi4_ep>
    3c1c:	a2 1b       	sub	r26, r18
    3c1e:	b3 0b       	sbc	r27, r19
    3c20:	e4 0b       	sbc	r30, r20
    3c22:	f5 0b       	sbc	r31, r21

00003c24 <__udivmodsi4_ep>:
    3c24:	66 1f       	adc	r22, r22
    3c26:	77 1f       	adc	r23, r23
    3c28:	88 1f       	adc	r24, r24
    3c2a:	99 1f       	adc	r25, r25
    3c2c:	1a 94       	dec	r1
    3c2e:	69 f7       	brne	.-38     	; 0x3c0a <__udivmodsi4_loop>
    3c30:	60 95       	com	r22
    3c32:	70 95       	com	r23
    3c34:	80 95       	com	r24
    3c36:	90 95       	com	r25
    3c38:	9b 01       	movw	r18, r22
    3c3a:	ac 01       	movw	r20, r24
    3c3c:	bd 01       	movw	r22, r26
    3c3e:	cf 01       	movw	r24, r30
    3c40:	08 95       	ret

00003c42 <__divmodsi4>:
    3c42:	97 fb       	bst	r25, 7
    3c44:	09 2e       	mov	r0, r25
    3c46:	05 26       	eor	r0, r21
    3c48:	0e d0       	rcall	.+28     	; 0x3c66 <__divmodsi4_neg1>
    3c4a:	57 fd       	sbrc	r21, 7
    3c4c:	04 d0       	rcall	.+8      	; 0x3c56 <__divmodsi4_neg2>
    3c4e:	d7 df       	rcall	.-82     	; 0x3bfe <__udivmodsi4>
    3c50:	0a d0       	rcall	.+20     	; 0x3c66 <__divmodsi4_neg1>
    3c52:	00 1c       	adc	r0, r0
    3c54:	38 f4       	brcc	.+14     	; 0x3c64 <__divmodsi4_exit>

00003c56 <__divmodsi4_neg2>:
    3c56:	50 95       	com	r21
    3c58:	40 95       	com	r20
    3c5a:	30 95       	com	r19
    3c5c:	21 95       	neg	r18
    3c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c60:	4f 4f       	sbci	r20, 0xFF	; 255
    3c62:	5f 4f       	sbci	r21, 0xFF	; 255

00003c64 <__divmodsi4_exit>:
    3c64:	08 95       	ret

00003c66 <__divmodsi4_neg1>:
    3c66:	f6 f7       	brtc	.-4      	; 0x3c64 <__divmodsi4_exit>
    3c68:	90 95       	com	r25
    3c6a:	80 95       	com	r24
    3c6c:	70 95       	com	r23
    3c6e:	61 95       	neg	r22
    3c70:	7f 4f       	sbci	r23, 0xFF	; 255
    3c72:	8f 4f       	sbci	r24, 0xFF	; 255
    3c74:	9f 4f       	sbci	r25, 0xFF	; 255
    3c76:	08 95       	ret

00003c78 <__prologue_saves__>:
    3c78:	2f 92       	push	r2
    3c7a:	3f 92       	push	r3
    3c7c:	4f 92       	push	r4
    3c7e:	5f 92       	push	r5
    3c80:	6f 92       	push	r6
    3c82:	7f 92       	push	r7
    3c84:	8f 92       	push	r8
    3c86:	9f 92       	push	r9
    3c88:	af 92       	push	r10
    3c8a:	bf 92       	push	r11
    3c8c:	cf 92       	push	r12
    3c8e:	df 92       	push	r13
    3c90:	ef 92       	push	r14
    3c92:	ff 92       	push	r15
    3c94:	0f 93       	push	r16
    3c96:	1f 93       	push	r17
    3c98:	cf 93       	push	r28
    3c9a:	df 93       	push	r29
    3c9c:	cd b7       	in	r28, 0x3d	; 61
    3c9e:	de b7       	in	r29, 0x3e	; 62
    3ca0:	ca 1b       	sub	r28, r26
    3ca2:	db 0b       	sbc	r29, r27
    3ca4:	0f b6       	in	r0, 0x3f	; 63
    3ca6:	f8 94       	cli
    3ca8:	de bf       	out	0x3e, r29	; 62
    3caa:	0f be       	out	0x3f, r0	; 63
    3cac:	cd bf       	out	0x3d, r28	; 61
    3cae:	09 94       	ijmp

00003cb0 <__epilogue_restores__>:
    3cb0:	2a 88       	ldd	r2, Y+18	; 0x12
    3cb2:	39 88       	ldd	r3, Y+17	; 0x11
    3cb4:	48 88       	ldd	r4, Y+16	; 0x10
    3cb6:	5f 84       	ldd	r5, Y+15	; 0x0f
    3cb8:	6e 84       	ldd	r6, Y+14	; 0x0e
    3cba:	7d 84       	ldd	r7, Y+13	; 0x0d
    3cbc:	8c 84       	ldd	r8, Y+12	; 0x0c
    3cbe:	9b 84       	ldd	r9, Y+11	; 0x0b
    3cc0:	aa 84       	ldd	r10, Y+10	; 0x0a
    3cc2:	b9 84       	ldd	r11, Y+9	; 0x09
    3cc4:	c8 84       	ldd	r12, Y+8	; 0x08
    3cc6:	df 80       	ldd	r13, Y+7	; 0x07
    3cc8:	ee 80       	ldd	r14, Y+6	; 0x06
    3cca:	fd 80       	ldd	r15, Y+5	; 0x05
    3ccc:	0c 81       	ldd	r16, Y+4	; 0x04
    3cce:	1b 81       	ldd	r17, Y+3	; 0x03
    3cd0:	aa 81       	ldd	r26, Y+2	; 0x02
    3cd2:	b9 81       	ldd	r27, Y+1	; 0x01
    3cd4:	ce 0f       	add	r28, r30
    3cd6:	d1 1d       	adc	r29, r1
    3cd8:	0f b6       	in	r0, 0x3f	; 63
    3cda:	f8 94       	cli
    3cdc:	de bf       	out	0x3e, r29	; 62
    3cde:	0f be       	out	0x3f, r0	; 63
    3ce0:	cd bf       	out	0x3d, r28	; 61
    3ce2:	ed 01       	movw	r28, r26
    3ce4:	08 95       	ret

00003ce6 <_exit>:
    3ce6:	f8 94       	cli

00003ce8 <__stop_program>:
    3ce8:	ff cf       	rjmp	.-2      	; 0x3ce8 <__stop_program>
