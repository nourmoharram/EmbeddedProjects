
DC_Motor_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000046de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002b4  00800060  000046de  00004772  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800314  00800314  00004a26  2**0
                  ALLOC
  3 .stab         00004d28  00000000  00000000  00004a28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002ff2  00000000  00000000  00009750  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000c742  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000c902  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000cb16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000f128  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  000105f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00011904  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00011ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00011deb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012805  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__vector_1>
       8:	0c 94 1d 13 	jmp	0x263a	; 0x263a <__vector_2>
       c:	0c 94 2d 13 	jmp	0x265a	; 0x265a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 76 0e 	jmp	0x1cec	; 0x1cec <__vector_10>
      2c:	0c 94 0d 0e 	jmp	0x1c1a	; 0x1c1a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ed       	ldi	r30, 0xDE	; 222
      68:	f6 e4       	ldi	r31, 0x46	; 70
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 31       	cpi	r26, 0x14	; 20
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a4 e1       	ldi	r26, 0x14	; 20
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 32       	cpi	r26, 0x29	; 41
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 63 22 	call	0x44c6	; 0x44c6 <main>
      8a:	0c 94 6d 23 	jmp	0x46da	; 0x46da <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 36 23 	jmp	0x466c	; 0x466c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e3       	ldi	r26, 0x30	; 48
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 52 23 	jmp	0x46a4	; 0x46a4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 42 23 	jmp	0x4684	; 0x4684 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5e 23 	jmp	0x46bc	; 0x46bc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 42 23 	jmp	0x4684	; 0x4684 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5e 23 	jmp	0x46bc	; 0x46bc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 36 23 	jmp	0x466c	; 0x466c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e3       	ldi	r24, 0x30	; 48
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 52 23 	jmp	0x46a4	; 0x46a4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3e 23 	jmp	0x467c	; 0x467c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e3       	ldi	r22, 0x30	; 48
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5a 23 	jmp	0x46b4	; 0x46b4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 42 23 	jmp	0x4684	; 0x4684 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5e 23 	jmp	0x46bc	; 0x46bc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 42 23 	jmp	0x4684	; 0x4684 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5e 23 	jmp	0x46bc	; 0x46bc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 42 23 	jmp	0x4684	; 0x4684 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5e 23 	jmp	0x46bc	; 0x46bc <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 3f 23 	jmp	0x467e	; 0x467e <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 5b 23 	jmp	0x46b6	; 0x46b6 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 46 23 	jmp	0x468c	; 0x468c <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 62 23 	jmp	0x46c4	; 0x46c4 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 3e 23 	jmp	0x467c	; 0x467c <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 5a 23 	jmp	0x46b4	; 0x46b4 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 5c       	subi	r30, 0xC8	; 200
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <M_TIMER1_void_Init>:

void (*ICU_CallBackFun)(void) = NULL ;


void M_TIMER1_void_Init(TIMER_1_MD Local_Mode,TIMER_1_WG Local_WG)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <M_TIMER1_void_Init+0x6>
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	89 83       	std	Y+1, r24	; 0x01
     ef6:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_Mode == TIMER_1_NM)
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	88 23       	and	r24, r24
     efc:	99 f5       	brne	.+102    	; 0xf64 <M_TIMER1_void_Init+0x7a>
	{
		/*Select normal mode*/
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
     efe:	af e4       	ldi	r26, 0x4F	; 79
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	ef e4       	ldi	r30, 0x4F	; 79
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	8e 7f       	andi	r24, 0xFE	; 254
     f0a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
     f0c:	af e4       	ldi	r26, 0x4F	; 79
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	ef e4       	ldi	r30, 0x4F	; 79
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	8d 7f       	andi	r24, 0xFD	; 253
     f18:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
     f1a:	ae e4       	ldi	r26, 0x4E	; 78
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	ee e4       	ldi	r30, 0x4E	; 78
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	91 81       	ldd	r25, Z+1	; 0x01
     f26:	87 7f       	andi	r24, 0xF7	; 247
     f28:	11 96       	adiw	r26, 0x01	; 1
     f2a:	9c 93       	st	X, r25
     f2c:	8e 93       	st	-X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
     f2e:	ae e4       	ldi	r26, 0x4E	; 78
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	ee e4       	ldi	r30, 0x4E	; 78
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	91 81       	ldd	r25, Z+1	; 0x01
     f3a:	8f 7e       	andi	r24, 0xEF	; 239
     f3c:	11 96       	adiw	r26, 0x01	; 1
     f3e:	9c 93       	st	X, r25
     f40:	8e 93       	st	-X, r24
		if(Local_WG == TIMER_1_NWG)
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	88 23       	and	r24, r24
     f46:	71 f4       	brne	.+28     	; 0xf64 <M_TIMER1_void_Init+0x7a>
		{
			/*Select compare output mode*/
			CLR_BIT(TCCR1A,TCCR1A_COM1A0);
     f48:	af e4       	ldi	r26, 0x4F	; 79
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	ef e4       	ldi	r30, 0x4F	; 79
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	8f 7b       	andi	r24, 0xBF	; 191
     f54:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_COM1A1);
     f56:	af e4       	ldi	r26, 0x4F	; 79
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	ef e4       	ldi	r30, 0x4F	; 79
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	8f 77       	andi	r24, 0x7F	; 127
     f62:	8c 93       	st	X, r24
		}
	}
}
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <M_TIMER1_void_Start>:

void M_TIMER1_void_Start(TIMER1_PRESCALER Local_Prescaller)
{
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	0f 92       	push	r0
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	89 83       	std	Y+1, r24	; 0x01
	if(Local_Prescaller== TIMER1_CLK_8)
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	82 30       	cpi	r24, 0x02	; 2
     f7e:	f1 f4       	brne	.+60     	; 0xfbc <M_TIMER1_void_Start+0x4e>
	{
		CLR_BIT(TCCR1B,TCCR1B_CS10);
     f80:	ae e4       	ldi	r26, 0x4E	; 78
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	ee e4       	ldi	r30, 0x4E	; 78
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	91 81       	ldd	r25, Z+1	; 0x01
     f8c:	8e 7f       	andi	r24, 0xFE	; 254
     f8e:	11 96       	adiw	r26, 0x01	; 1
     f90:	9c 93       	st	X, r25
     f92:	8e 93       	st	-X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
     f94:	ae e4       	ldi	r26, 0x4E	; 78
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	ee e4       	ldi	r30, 0x4E	; 78
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	91 81       	ldd	r25, Z+1	; 0x01
     fa0:	82 60       	ori	r24, 0x02	; 2
     fa2:	11 96       	adiw	r26, 0x01	; 1
     fa4:	9c 93       	st	X, r25
     fa6:	8e 93       	st	-X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);
     fa8:	ae e4       	ldi	r26, 0x4E	; 78
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	ee e4       	ldi	r30, 0x4E	; 78
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	91 81       	ldd	r25, Z+1	; 0x01
     fb4:	8b 7f       	andi	r24, 0xFB	; 251
     fb6:	11 96       	adiw	r26, 0x01	; 1
     fb8:	9c 93       	st	X, r25
     fba:	8e 93       	st	-X, r24
	}
}
     fbc:	0f 90       	pop	r0
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	08 95       	ret

00000fc4 <M_TIMER1_void_Stop>:
void M_TIMER1_void_Stop(void)
{
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B,TCCR1B_CS10);
     fcc:	ae e4       	ldi	r26, 0x4E	; 78
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	ee e4       	ldi	r30, 0x4E	; 78
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	91 81       	ldd	r25, Z+1	; 0x01
     fd8:	8e 7f       	andi	r24, 0xFE	; 254
     fda:	11 96       	adiw	r26, 0x01	; 1
     fdc:	9c 93       	st	X, r25
     fde:	8e 93       	st	-X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS11);
     fe0:	ae e4       	ldi	r26, 0x4E	; 78
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	ee e4       	ldi	r30, 0x4E	; 78
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	91 81       	ldd	r25, Z+1	; 0x01
     fec:	8d 7f       	andi	r24, 0xFD	; 253
     fee:	11 96       	adiw	r26, 0x01	; 1
     ff0:	9c 93       	st	X, r25
     ff2:	8e 93       	st	-X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
     ff4:	ae e4       	ldi	r26, 0x4E	; 78
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	ee e4       	ldi	r30, 0x4E	; 78
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	91 81       	ldd	r25, Z+1	; 0x01
    1000:	8b 7f       	andi	r24, 0xFB	; 251
    1002:	11 96       	adiw	r26, 0x01	; 1
    1004:	9c 93       	st	X, r25
    1006:	8e 93       	st	-X, r24

}
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <M_TIMER1_void_ICU_Enable>:

void M_TIMER1_void_ICU_Enable(void)
{
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
	/*Enable ICU Interrupt*/
	SET_BIT(TIMSK,TIMSK_TICIE1);
    1016:	a9 e5       	ldi	r26, 0x59	; 89
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e9 e5       	ldi	r30, 0x59	; 89
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	80 62       	ori	r24, 0x20	; 32
    1022:	8c 93       	st	X, r24
	/*Set trigger to rising edge*/
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    1024:	ae e4       	ldi	r26, 0x4E	; 78
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	ee e4       	ldi	r30, 0x4E	; 78
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	91 81       	ldd	r25, Z+1	; 0x01
    1030:	80 64       	ori	r24, 0x40	; 64
    1032:	11 96       	adiw	r26, 0x01	; 1
    1034:	9c 93       	st	X, r25
    1036:	8e 93       	st	-X, r24

}
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <M_TIMER1_void_ICU_TriggerSelect>:


void M_TIMER1_void_ICU_TriggerSelect(ICU_Trigger Local_Trigger)
{
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	0f 92       	push	r0
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	89 83       	std	Y+1, r24	; 0x01
	if(Local_Trigger == ICU_FALLING)
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	88 23       	and	r24, r24
    104e:	59 f4       	brne	.+22     	; 0x1066 <M_TIMER1_void_ICU_TriggerSelect+0x28>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    1050:	ae e4       	ldi	r26, 0x4E	; 78
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	ee e4       	ldi	r30, 0x4E	; 78
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	91 81       	ldd	r25, Z+1	; 0x01
    105c:	8f 7b       	andi	r24, 0xBF	; 191
    105e:	11 96       	adiw	r26, 0x01	; 1
    1060:	9c 93       	st	X, r25
    1062:	8e 93       	st	-X, r24
    1064:	0d c0       	rjmp	.+26     	; 0x1080 <M_TIMER1_void_ICU_TriggerSelect+0x42>

	}
	else if(Local_Trigger == ICU_RISING)
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	51 f4       	brne	.+20     	; 0x1080 <M_TIMER1_void_ICU_TriggerSelect+0x42>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    106c:	ae e4       	ldi	r26, 0x4E	; 78
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	ee e4       	ldi	r30, 0x4E	; 78
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	91 81       	ldd	r25, Z+1	; 0x01
    1078:	80 64       	ori	r24, 0x40	; 64
    107a:	11 96       	adiw	r26, 0x01	; 1
    107c:	9c 93       	st	X, r25
    107e:	8e 93       	st	-X, r24

	}
}
    1080:	0f 90       	pop	r0
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <M_TIMER1_void_ICU_INTERRUPTDIS>:

void M_TIMER1_void_ICU_INTERRUPTDIS(void)
{
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
	/*Enable ICU Interrupt*/
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    1090:	a9 e5       	ldi	r26, 0x59	; 89
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e9 e5       	ldi	r30, 0x59	; 89
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	8f 7d       	andi	r24, 0xDF	; 223
    109c:	8c 93       	st	X, r24
}
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	08 95       	ret

000010a4 <M_TIMER1_void_ICU_Reading>:

u16 M_TIMER1_void_ICU_Reading(void)
{
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    10ac:	e6 e4       	ldi	r30, 0x46	; 70
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	91 81       	ldd	r25, Z+1	; 0x01
}
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <M_TIMER1_void_ICU_SetCallBack>:

void M_TIMER1_void_ICU_SetCallBack(void)
{
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62

}
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	08 95       	ret

000010c8 <M_TIMER1_u8_Reset_flag>:

u8 M_TIMER1_u8_Reset_flag(TIMER1_INTERRUPT_TYPE Local_type)
{
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	0f 92       	push	r0
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	89 83       	std	Y+1, r24	; 0x01
	if(Local_type == TIMER1_ICU)
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	88 23       	and	r24, r24
    10d8:	41 f4       	brne	.+16     	; 0x10ea <M_TIMER1_u8_Reset_flag+0x22>
	{
		SET_BIT(TIFR,TIFR_ICF1);
    10da:	a8 e5       	ldi	r26, 0x58	; 88
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e8 e5       	ldi	r30, 0x58	; 88
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	80 62       	ori	r24, 0x20	; 32
    10e6:	8c 93       	st	X, r24
    10e8:	0a c0       	rjmp	.+20     	; 0x10fe <M_TIMER1_u8_Reset_flag+0x36>
	}
	else if(Local_type == TIMER1_OVF)
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	83 30       	cpi	r24, 0x03	; 3
    10ee:	39 f4       	brne	.+14     	; 0x10fe <M_TIMER1_u8_Reset_flag+0x36>
	{
		SET_BIT(TIFR,TIFR_TOV1);
    10f0:	a8 e5       	ldi	r26, 0x58	; 88
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e8 e5       	ldi	r30, 0x58	; 88
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	84 60       	ori	r24, 0x04	; 4
    10fc:	8c 93       	st	X, r24
	}
	return 0;
    10fe:	80 e0       	ldi	r24, 0x00	; 0
}
    1100:	0f 90       	pop	r0
    1102:	cf 91       	pop	r28
    1104:	df 91       	pop	r29
    1106:	08 95       	ret

00001108 <M_void_Timer_Init>:
static u32 No_of_over_flows=0;
static u8 No_of_Remaning=0;
static u32 Global_No_of_overflows=0;

void M_void_Timer_Init(Timer_Mode T_MODE, Comp_Output_Mode WG_M)
{
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    1110:	2c 97       	sbiw	r28, 0x0c	; 12
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	f8 94       	cli
    1116:	de bf       	out	0x3e, r29	; 62
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	cd bf       	out	0x3d, r28	; 61
    111c:	89 83       	std	Y+1, r24	; 0x01
    111e:	6a 83       	std	Y+2, r22	; 0x02
	switch(T_MODE)
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	3c 87       	std	Y+12, r19	; 0x0c
    1128:	2b 87       	std	Y+11, r18	; 0x0b
    112a:	8b 85       	ldd	r24, Y+11	; 0x0b
    112c:	9c 85       	ldd	r25, Y+12	; 0x0c
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	91 05       	cpc	r25, r1
    1132:	09 f4       	brne	.+2      	; 0x1136 <M_void_Timer_Init+0x2e>
    1134:	7e c0       	rjmp	.+252    	; 0x1232 <M_void_Timer_Init+0x12a>
    1136:	2b 85       	ldd	r18, Y+11	; 0x0b
    1138:	3c 85       	ldd	r19, Y+12	; 0x0c
    113a:	22 30       	cpi	r18, 0x02	; 2
    113c:	31 05       	cpc	r19, r1
    113e:	2c f4       	brge	.+10     	; 0x114a <M_void_Timer_Init+0x42>
    1140:	8b 85       	ldd	r24, Y+11	; 0x0b
    1142:	9c 85       	ldd	r25, Y+12	; 0x0c
    1144:	00 97       	sbiw	r24, 0x00	; 0
    1146:	71 f0       	breq	.+28     	; 0x1164 <M_void_Timer_Init+0x5c>
    1148:	76 c1       	rjmp	.+748    	; 0x1436 <M_void_Timer_Init+0x32e>
    114a:	2b 85       	ldd	r18, Y+11	; 0x0b
    114c:	3c 85       	ldd	r19, Y+12	; 0x0c
    114e:	22 30       	cpi	r18, 0x02	; 2
    1150:	31 05       	cpc	r19, r1
    1152:	09 f4       	brne	.+2      	; 0x1156 <M_void_Timer_Init+0x4e>
    1154:	d6 c0       	rjmp	.+428    	; 0x1302 <M_void_Timer_Init+0x1fa>
    1156:	8b 85       	ldd	r24, Y+11	; 0x0b
    1158:	9c 85       	ldd	r25, Y+12	; 0x0c
    115a:	83 30       	cpi	r24, 0x03	; 3
    115c:	91 05       	cpc	r25, r1
    115e:	09 f4       	brne	.+2      	; 0x1162 <M_void_Timer_Init+0x5a>
    1160:	1e c1       	rjmp	.+572    	; 0x139e <M_void_Timer_Init+0x296>
    1162:	69 c1       	rjmp	.+722    	; 0x1436 <M_void_Timer_Init+0x32e>
	{
	case Normal_Mode:
		TCCR0 &= CLEAR_TIMER_MODE_REG;
    1164:	a3 e5       	ldi	r26, 0x53	; 83
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e3 e5       	ldi	r30, 0x53	; 83
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	87 7d       	andi	r24, 0xD7	; 215
    1170:	8c 93       	st	X, r24
		TCCR0 |=SET_NORMAL_MODE_MASK;
    1172:	a3 e5       	ldi	r26, 0x53	; 83
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e3 e5       	ldi	r30, 0x53	; 83
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	8c 93       	st	X, r24
		switch(WG_M)
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	3a 87       	std	Y+10, r19	; 0x0a
    1186:	29 87       	std	Y+9, r18	; 0x09
    1188:	89 85       	ldd	r24, Y+9	; 0x09
    118a:	9a 85       	ldd	r25, Y+10	; 0x0a
    118c:	81 30       	cpi	r24, 0x01	; 1
    118e:	91 05       	cpc	r25, r1
    1190:	19 f1       	breq	.+70     	; 0x11d8 <M_void_Timer_Init+0xd0>
    1192:	29 85       	ldd	r18, Y+9	; 0x09
    1194:	3a 85       	ldd	r19, Y+10	; 0x0a
    1196:	22 30       	cpi	r18, 0x02	; 2
    1198:	31 05       	cpc	r19, r1
    119a:	2c f4       	brge	.+10     	; 0x11a6 <M_void_Timer_Init+0x9e>
    119c:	89 85       	ldd	r24, Y+9	; 0x09
    119e:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	61 f0       	breq	.+24     	; 0x11bc <M_void_Timer_Init+0xb4>
    11a4:	48 c1       	rjmp	.+656    	; 0x1436 <M_void_Timer_Init+0x32e>
    11a6:	29 85       	ldd	r18, Y+9	; 0x09
    11a8:	3a 85       	ldd	r19, Y+10	; 0x0a
    11aa:	22 30       	cpi	r18, 0x02	; 2
    11ac:	31 05       	cpc	r19, r1
    11ae:	19 f1       	breq	.+70     	; 0x11f6 <M_void_Timer_Init+0xee>
    11b0:	89 85       	ldd	r24, Y+9	; 0x09
    11b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b4:	83 30       	cpi	r24, 0x03	; 3
    11b6:	91 05       	cpc	r25, r1
    11b8:	69 f1       	breq	.+90     	; 0x1214 <M_void_Timer_Init+0x10c>
    11ba:	3d c1       	rjmp	.+634    	; 0x1436 <M_void_Timer_Init+0x32e>
		{
		case Normal_Port:
			TCCR0 &= CLEAR_TIMER_MODE_REG;
    11bc:	a3 e5       	ldi	r26, 0x53	; 83
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e3 e5       	ldi	r30, 0x53	; 83
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	87 7d       	andi	r24, 0xD7	; 215
    11c8:	8c 93       	st	X, r24
			TCCR0 |= NORMAL_PORT_MASK;
    11ca:	a3 e5       	ldi	r26, 0x53	; 83
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e3 e5       	ldi	r30, 0x53	; 83
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	8c 93       	st	X, r24
    11d6:	2f c1       	rjmp	.+606    	; 0x1436 <M_void_Timer_Init+0x32e>
			break;
		case Toggle_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    11d8:	a3 e5       	ldi	r26, 0x53	; 83
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e3 e5       	ldi	r30, 0x53	; 83
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	8f 7c       	andi	r24, 0xCF	; 207
    11e4:	8c 93       	st	X, r24
			TCCR0 |= TOGGLE_PORT_MASK;
    11e6:	a3 e5       	ldi	r26, 0x53	; 83
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e3 e5       	ldi	r30, 0x53	; 83
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	80 61       	ori	r24, 0x10	; 16
    11f2:	8c 93       	st	X, r24
    11f4:	20 c1       	rjmp	.+576    	; 0x1436 <M_void_Timer_Init+0x32e>
			break;
		case Clear_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    11f6:	a3 e5       	ldi	r26, 0x53	; 83
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e3 e5       	ldi	r30, 0x53	; 83
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	8f 7c       	andi	r24, 0xCF	; 207
    1202:	8c 93       	st	X, r24
			TCCR0 |= CLEAR_PORT_MASK;
    1204:	a3 e5       	ldi	r26, 0x53	; 83
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e3 e5       	ldi	r30, 0x53	; 83
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	80 62       	ori	r24, 0x20	; 32
    1210:	8c 93       	st	X, r24
    1212:	11 c1       	rjmp	.+546    	; 0x1436 <M_void_Timer_Init+0x32e>
			break;
		case Set_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    1214:	a3 e5       	ldi	r26, 0x53	; 83
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e3 e5       	ldi	r30, 0x53	; 83
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	8f 7c       	andi	r24, 0xCF	; 207
    1220:	8c 93       	st	X, r24
			TCCR0 |= SET_PORT_MASK;
    1222:	a3 e5       	ldi	r26, 0x53	; 83
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e3 e5       	ldi	r30, 0x53	; 83
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	80 63       	ori	r24, 0x30	; 48
    122e:	8c 93       	st	X, r24
    1230:	02 c1       	rjmp	.+516    	; 0x1436 <M_void_Timer_Init+0x32e>
		default:
			break;
		}
		break;
	case CTC_Mode:
		TCCR0 &= CLEAR_TIMER_MODE_REG;
    1232:	a3 e5       	ldi	r26, 0x53	; 83
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e3 e5       	ldi	r30, 0x53	; 83
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	87 7d       	andi	r24, 0xD7	; 215
    123e:	8c 93       	st	X, r24
		TCCR0 |=SET_CTC_MODE_MASK;
    1240:	a3 e5       	ldi	r26, 0x53	; 83
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e3 e5       	ldi	r30, 0x53	; 83
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	88 60       	ori	r24, 0x08	; 8
    124c:	8c 93       	st	X, r24
		switch(WG_M)
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	38 87       	std	Y+8, r19	; 0x08
    1256:	2f 83       	std	Y+7, r18	; 0x07
    1258:	8f 81       	ldd	r24, Y+7	; 0x07
    125a:	98 85       	ldd	r25, Y+8	; 0x08
    125c:	81 30       	cpi	r24, 0x01	; 1
    125e:	91 05       	cpc	r25, r1
    1260:	19 f1       	breq	.+70     	; 0x12a8 <M_void_Timer_Init+0x1a0>
    1262:	2f 81       	ldd	r18, Y+7	; 0x07
    1264:	38 85       	ldd	r19, Y+8	; 0x08
    1266:	22 30       	cpi	r18, 0x02	; 2
    1268:	31 05       	cpc	r19, r1
    126a:	2c f4       	brge	.+10     	; 0x1276 <M_void_Timer_Init+0x16e>
    126c:	8f 81       	ldd	r24, Y+7	; 0x07
    126e:	98 85       	ldd	r25, Y+8	; 0x08
    1270:	00 97       	sbiw	r24, 0x00	; 0
    1272:	61 f0       	breq	.+24     	; 0x128c <M_void_Timer_Init+0x184>
    1274:	e0 c0       	rjmp	.+448    	; 0x1436 <M_void_Timer_Init+0x32e>
    1276:	2f 81       	ldd	r18, Y+7	; 0x07
    1278:	38 85       	ldd	r19, Y+8	; 0x08
    127a:	22 30       	cpi	r18, 0x02	; 2
    127c:	31 05       	cpc	r19, r1
    127e:	19 f1       	breq	.+70     	; 0x12c6 <M_void_Timer_Init+0x1be>
    1280:	8f 81       	ldd	r24, Y+7	; 0x07
    1282:	98 85       	ldd	r25, Y+8	; 0x08
    1284:	83 30       	cpi	r24, 0x03	; 3
    1286:	91 05       	cpc	r25, r1
    1288:	69 f1       	breq	.+90     	; 0x12e4 <M_void_Timer_Init+0x1dc>
    128a:	d5 c0       	rjmp	.+426    	; 0x1436 <M_void_Timer_Init+0x32e>
		{
		case Normal_Port:
			TCCR0 &= CLEAR_TIMER_MODE_REG;
    128c:	a3 e5       	ldi	r26, 0x53	; 83
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	e3 e5       	ldi	r30, 0x53	; 83
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	87 7d       	andi	r24, 0xD7	; 215
    1298:	8c 93       	st	X, r24
			TCCR0 |= NORMAL_PORT_MASK;
    129a:	a3 e5       	ldi	r26, 0x53	; 83
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	e3 e5       	ldi	r30, 0x53	; 83
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	8c 93       	st	X, r24
    12a6:	c7 c0       	rjmp	.+398    	; 0x1436 <M_void_Timer_Init+0x32e>
			break;
		case Toggle_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    12a8:	a3 e5       	ldi	r26, 0x53	; 83
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e3 e5       	ldi	r30, 0x53	; 83
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	8f 7c       	andi	r24, 0xCF	; 207
    12b4:	8c 93       	st	X, r24
			TCCR0 |= TOGGLE_PORT_MASK;
    12b6:	a3 e5       	ldi	r26, 0x53	; 83
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e3 e5       	ldi	r30, 0x53	; 83
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	80 61       	ori	r24, 0x10	; 16
    12c2:	8c 93       	st	X, r24
    12c4:	b8 c0       	rjmp	.+368    	; 0x1436 <M_void_Timer_Init+0x32e>
			break;
		case Clear_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    12c6:	a3 e5       	ldi	r26, 0x53	; 83
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e3 e5       	ldi	r30, 0x53	; 83
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	8f 7c       	andi	r24, 0xCF	; 207
    12d2:	8c 93       	st	X, r24
			TCCR0 |= CLEAR_PORT_MASK;
    12d4:	a3 e5       	ldi	r26, 0x53	; 83
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e3 e5       	ldi	r30, 0x53	; 83
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	80 62       	ori	r24, 0x20	; 32
    12e0:	8c 93       	st	X, r24
    12e2:	a9 c0       	rjmp	.+338    	; 0x1436 <M_void_Timer_Init+0x32e>
			break;
		case Set_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    12e4:	a3 e5       	ldi	r26, 0x53	; 83
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	e3 e5       	ldi	r30, 0x53	; 83
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	8f 7c       	andi	r24, 0xCF	; 207
    12f0:	8c 93       	st	X, r24
			TCCR0 |= SET_PORT_MASK;
    12f2:	a3 e5       	ldi	r26, 0x53	; 83
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e3 e5       	ldi	r30, 0x53	; 83
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	80 63       	ori	r24, 0x30	; 48
    12fe:	8c 93       	st	X, r24
    1300:	9a c0       	rjmp	.+308    	; 0x1436 <M_void_Timer_Init+0x32e>
		default:
			break;
		}
		break;
	case Fast_PWM:
		TCCR0 &= CLEAR_TIMER_MODE_REG;
    1302:	a3 e5       	ldi	r26, 0x53	; 83
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e3 e5       	ldi	r30, 0x53	; 83
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	87 7d       	andi	r24, 0xD7	; 215
    130e:	8c 93       	st	X, r24
		TCCR0 |=SET_FAST_MODE_MASK;
    1310:	a3 e5       	ldi	r26, 0x53	; 83
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e3 e5       	ldi	r30, 0x53	; 83
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	88 64       	ori	r24, 0x48	; 72
    131c:	8c 93       	st	X, r24
		switch(WG_M)
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	3e 83       	std	Y+6, r19	; 0x06
    1326:	2d 83       	std	Y+5, r18	; 0x05
    1328:	8d 81       	ldd	r24, Y+5	; 0x05
    132a:	9e 81       	ldd	r25, Y+6	; 0x06
    132c:	84 30       	cpi	r24, 0x04	; 4
    132e:	91 05       	cpc	r25, r1
    1330:	c1 f0       	breq	.+48     	; 0x1362 <M_void_Timer_Init+0x25a>
    1332:	2d 81       	ldd	r18, Y+5	; 0x05
    1334:	3e 81       	ldd	r19, Y+6	; 0x06
    1336:	25 30       	cpi	r18, 0x05	; 5
    1338:	31 05       	cpc	r19, r1
    133a:	11 f1       	breq	.+68     	; 0x1380 <M_void_Timer_Init+0x278>
    133c:	8d 81       	ldd	r24, Y+5	; 0x05
    133e:	9e 81       	ldd	r25, Y+6	; 0x06
    1340:	00 97       	sbiw	r24, 0x00	; 0
    1342:	09 f0       	breq	.+2      	; 0x1346 <M_void_Timer_Init+0x23e>
    1344:	78 c0       	rjmp	.+240    	; 0x1436 <M_void_Timer_Init+0x32e>
		{
		case Normal_Port:
			TCCR0 &= CLEAR_TIMER_MODE_REG;
    1346:	a3 e5       	ldi	r26, 0x53	; 83
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e3 e5       	ldi	r30, 0x53	; 83
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	87 7d       	andi	r24, 0xD7	; 215
    1352:	8c 93       	st	X, r24
			TCCR0 |= NORMAL_PORT_MASK;
    1354:	a3 e5       	ldi	r26, 0x53	; 83
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e3 e5       	ldi	r30, 0x53	; 83
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	8c 93       	st	X, r24
    1360:	6a c0       	rjmp	.+212    	; 0x1436 <M_void_Timer_Init+0x32e>
			break;
		case Inverting_Mode:
			TCCR0 &= CLEAR_WAVEG_MASK;
    1362:	a3 e5       	ldi	r26, 0x53	; 83
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e3 e5       	ldi	r30, 0x53	; 83
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	8f 7c       	andi	r24, 0xCF	; 207
    136e:	8c 93       	st	X, r24
			TCCR0 |= INVERTING_FAST_MASK;
    1370:	a3 e5       	ldi	r26, 0x53	; 83
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e3 e5       	ldi	r30, 0x53	; 83
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	80 63       	ori	r24, 0x30	; 48
    137c:	8c 93       	st	X, r24
    137e:	5b c0       	rjmp	.+182    	; 0x1436 <M_void_Timer_Init+0x32e>
			break;
		case Non_Invering_Mode:
			TCCR0 &= CLEAR_WAVEG_MASK;
    1380:	a3 e5       	ldi	r26, 0x53	; 83
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e3 e5       	ldi	r30, 0x53	; 83
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	8f 7c       	andi	r24, 0xCF	; 207
    138c:	8c 93       	st	X, r24
			TCCR0 |= NON_INVERTING_FAST_MASK;
    138e:	a3 e5       	ldi	r26, 0x53	; 83
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	e3 e5       	ldi	r30, 0x53	; 83
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	80 62       	ori	r24, 0x20	; 32
    139a:	8c 93       	st	X, r24
    139c:	4c c0       	rjmp	.+152    	; 0x1436 <M_void_Timer_Init+0x32e>
		default:
			break;
		}
		break;
	case Phase_Correct_PWM:
		TCCR0 &= CLEAR_TIMER_MODE_REG;
    139e:	a3 e5       	ldi	r26, 0x53	; 83
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e3 e5       	ldi	r30, 0x53	; 83
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	87 7d       	andi	r24, 0xD7	; 215
    13aa:	8c 93       	st	X, r24
		TCCR0 |=SET_PWM_PHASE_MODE_MASK;
    13ac:	a3 e5       	ldi	r26, 0x53	; 83
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e3 e5       	ldi	r30, 0x53	; 83
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	80 64       	ori	r24, 0x40	; 64
    13b8:	8c 93       	st	X, r24
		switch(WG_M)
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	3c 83       	std	Y+4, r19	; 0x04
    13c2:	2b 83       	std	Y+3, r18	; 0x03
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	9c 81       	ldd	r25, Y+4	; 0x04
    13c8:	84 30       	cpi	r24, 0x04	; 4
    13ca:	91 05       	cpc	r25, r1
    13cc:	b9 f0       	breq	.+46     	; 0x13fc <M_void_Timer_Init+0x2f4>
    13ce:	2b 81       	ldd	r18, Y+3	; 0x03
    13d0:	3c 81       	ldd	r19, Y+4	; 0x04
    13d2:	25 30       	cpi	r18, 0x05	; 5
    13d4:	31 05       	cpc	r19, r1
    13d6:	09 f1       	breq	.+66     	; 0x141a <M_void_Timer_Init+0x312>
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
    13da:	9c 81       	ldd	r25, Y+4	; 0x04
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	59 f5       	brne	.+86     	; 0x1436 <M_void_Timer_Init+0x32e>
		{
		case Normal_Port:
			TCCR0 &= CLEAR_TIMER_MODE_REG;
    13e0:	a3 e5       	ldi	r26, 0x53	; 83
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e3 e5       	ldi	r30, 0x53	; 83
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	87 7d       	andi	r24, 0xD7	; 215
    13ec:	8c 93       	st	X, r24
			TCCR0 |= NORMAL_PORT_MASK;
    13ee:	a3 e5       	ldi	r26, 0x53	; 83
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e3 e5       	ldi	r30, 0x53	; 83
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	8c 93       	st	X, r24
    13fa:	1d c0       	rjmp	.+58     	; 0x1436 <M_void_Timer_Init+0x32e>
			break;
		case Inverting_Mode:
			TCCR0 &= CLEAR_WAVEG_MASK;
    13fc:	a3 e5       	ldi	r26, 0x53	; 83
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e3 e5       	ldi	r30, 0x53	; 83
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	8f 7c       	andi	r24, 0xCF	; 207
    1408:	8c 93       	st	X, r24
			TCCR0 |= INVERTING_PHASE_MASK;
    140a:	a3 e5       	ldi	r26, 0x53	; 83
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e3 e5       	ldi	r30, 0x53	; 83
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	80 63       	ori	r24, 0x30	; 48
    1416:	8c 93       	st	X, r24
    1418:	0e c0       	rjmp	.+28     	; 0x1436 <M_void_Timer_Init+0x32e>
			break;
		case Non_Invering_Mode:
			TCCR0 &= CLEAR_WAVEG_MASK;
    141a:	a3 e5       	ldi	r26, 0x53	; 83
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e3 e5       	ldi	r30, 0x53	; 83
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	8f 7c       	andi	r24, 0xCF	; 207
    1426:	8c 93       	st	X, r24
			TCCR0 |= NON_INVERTING_PHASE_MASK;
    1428:	a3 e5       	ldi	r26, 0x53	; 83
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e3 e5       	ldi	r30, 0x53	; 83
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	80 62       	ori	r24, 0x20	; 32
    1434:	8c 93       	st	X, r24
		default:
			break;
		}
		break;
	}
}
    1436:	2c 96       	adiw	r28, 0x0c	; 12
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <M_void_Timer_start>:
void M_void_Timer_start(PRE_SCALLER Pre_scaller_select)
{
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	00 d0       	rcall	.+0      	; 0x144e <M_void_Timer_start+0x6>
    144e:	0f 92       	push	r0
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	89 83       	std	Y+1, r24	; 0x01
	switch(Pre_scaller_select)
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	3b 83       	std	Y+3, r19	; 0x03
    145e:	2a 83       	std	Y+2, r18	; 0x02
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	9b 81       	ldd	r25, Y+3	; 0x03
    1464:	82 30       	cpi	r24, 0x02	; 2
    1466:	91 05       	cpc	r25, r1
    1468:	09 f4       	brne	.+2      	; 0x146c <M_void_Timer_start+0x24>
    146a:	3e c0       	rjmp	.+124    	; 0x14e8 <M_void_Timer_start+0xa0>
    146c:	2a 81       	ldd	r18, Y+2	; 0x02
    146e:	3b 81       	ldd	r19, Y+3	; 0x03
    1470:	23 30       	cpi	r18, 0x03	; 3
    1472:	31 05       	cpc	r19, r1
    1474:	54 f4       	brge	.+20     	; 0x148a <M_void_Timer_start+0x42>
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	9b 81       	ldd	r25, Y+3	; 0x03
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	c1 f0       	breq	.+48     	; 0x14ae <M_void_Timer_start+0x66>
    147e:	2a 81       	ldd	r18, Y+2	; 0x02
    1480:	3b 81       	ldd	r19, Y+3	; 0x03
    1482:	21 30       	cpi	r18, 0x01	; 1
    1484:	31 05       	cpc	r19, r1
    1486:	09 f1       	breq	.+66     	; 0x14ca <M_void_Timer_start+0x82>
    1488:	6a c0       	rjmp	.+212    	; 0x155e <M_void_Timer_start+0x116>
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	9b 81       	ldd	r25, Y+3	; 0x03
    148e:	84 30       	cpi	r24, 0x04	; 4
    1490:	91 05       	cpc	r25, r1
    1492:	09 f4       	brne	.+2      	; 0x1496 <M_void_Timer_start+0x4e>
    1494:	47 c0       	rjmp	.+142    	; 0x1524 <M_void_Timer_start+0xdc>
    1496:	2a 81       	ldd	r18, Y+2	; 0x02
    1498:	3b 81       	ldd	r19, Y+3	; 0x03
    149a:	24 30       	cpi	r18, 0x04	; 4
    149c:	31 05       	cpc	r19, r1
    149e:	9c f1       	brlt	.+102    	; 0x1506 <M_void_Timer_start+0xbe>
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	9b 81       	ldd	r25, Y+3	; 0x03
    14a4:	85 30       	cpi	r24, 0x05	; 5
    14a6:	91 05       	cpc	r25, r1
    14a8:	09 f4       	brne	.+2      	; 0x14ac <M_void_Timer_start+0x64>
    14aa:	4b c0       	rjmp	.+150    	; 0x1542 <M_void_Timer_start+0xfa>
    14ac:	58 c0       	rjmp	.+176    	; 0x155e <M_void_Timer_start+0x116>
	{
	case No_CLK:
		TCCR0 &= CLEAR_PRESCALLER_MASK;
    14ae:	a3 e5       	ldi	r26, 0x53	; 83
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e3 e5       	ldi	r30, 0x53	; 83
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	88 7f       	andi	r24, 0xF8	; 248
    14ba:	8c 93       	st	X, r24
		TCCR0 |= NO_CLK_SOURCE;
    14bc:	a3 e5       	ldi	r26, 0x53	; 83
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e3 e5       	ldi	r30, 0x53	; 83
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	8c 93       	st	X, r24
    14c8:	4a c0       	rjmp	.+148    	; 0x155e <M_void_Timer_start+0x116>
		break;
	case NO_PRESCALLING:
		TCCR0 &= CLEAR_PRESCALLER_MASK;
    14ca:	a3 e5       	ldi	r26, 0x53	; 83
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e3 e5       	ldi	r30, 0x53	; 83
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	88 7f       	andi	r24, 0xF8	; 248
    14d6:	8c 93       	st	X, r24
		TCCR0 |= NO_CLK_PRESCALLER;
    14d8:	a3 e5       	ldi	r26, 0x53	; 83
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e3 e5       	ldi	r30, 0x53	; 83
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	81 60       	ori	r24, 0x01	; 1
    14e4:	8c 93       	st	X, r24
    14e6:	3b c0       	rjmp	.+118    	; 0x155e <M_void_Timer_start+0x116>
		break;
	case CLK_8:
		TCCR0 &= CLEAR_PRESCALLER_MASK;
    14e8:	a3 e5       	ldi	r26, 0x53	; 83
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	e3 e5       	ldi	r30, 0x53	; 83
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	88 7f       	andi	r24, 0xF8	; 248
    14f4:	8c 93       	st	X, r24
		TCCR0 |= CLK_8_PRESCALLER;
    14f6:	a3 e5       	ldi	r26, 0x53	; 83
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e3 e5       	ldi	r30, 0x53	; 83
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	82 60       	ori	r24, 0x02	; 2
    1502:	8c 93       	st	X, r24
    1504:	2c c0       	rjmp	.+88     	; 0x155e <M_void_Timer_start+0x116>
		break;
	case CLK_64:
		TCCR0 &= CLEAR_PRESCALLER_MASK;
    1506:	a3 e5       	ldi	r26, 0x53	; 83
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e3 e5       	ldi	r30, 0x53	; 83
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	88 7f       	andi	r24, 0xF8	; 248
    1512:	8c 93       	st	X, r24
		TCCR0 |= CLK_64_PRESCALLER;
    1514:	a3 e5       	ldi	r26, 0x53	; 83
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e3 e5       	ldi	r30, 0x53	; 83
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	83 60       	ori	r24, 0x03	; 3
    1520:	8c 93       	st	X, r24
    1522:	1d c0       	rjmp	.+58     	; 0x155e <M_void_Timer_start+0x116>
		break;
	case CLK_256:
		TCCR0 &= CLEAR_PRESCALLER_MASK;
    1524:	a3 e5       	ldi	r26, 0x53	; 83
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e3 e5       	ldi	r30, 0x53	; 83
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	88 7f       	andi	r24, 0xF8	; 248
    1530:	8c 93       	st	X, r24
		TCCR0 |= CLK_256_PRESCALLER;
    1532:	a3 e5       	ldi	r26, 0x53	; 83
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	e3 e5       	ldi	r30, 0x53	; 83
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	84 60       	ori	r24, 0x04	; 4
    153e:	8c 93       	st	X, r24
    1540:	0e c0       	rjmp	.+28     	; 0x155e <M_void_Timer_start+0x116>
		break;
	case CLK_1024:
		TCCR0 &= CLEAR_PRESCALLER_MASK;
    1542:	a3 e5       	ldi	r26, 0x53	; 83
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e3 e5       	ldi	r30, 0x53	; 83
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	88 7f       	andi	r24, 0xF8	; 248
    154e:	8c 93       	st	X, r24
		TCCR0 |= CLK_1024_PRESCALLER;
    1550:	a3 e5       	ldi	r26, 0x53	; 83
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e3 e5       	ldi	r30, 0x53	; 83
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	85 60       	ori	r24, 0x05	; 5
    155c:	8c 93       	st	X, r24
		break;
	default:
		break;
	}

}
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <M_void_Timer_stop>:
void M_void_Timer_stop(void)
{
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= CLEAR_PRESCALLER_MASK;
    1572:	a3 e5       	ldi	r26, 0x53	; 83
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	e3 e5       	ldi	r30, 0x53	; 83
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	88 7f       	andi	r24, 0xF8	; 248
    157e:	8c 93       	st	X, r24
	TCCR0 |= NO_CLK_SOURCE;
    1580:	a3 e5       	ldi	r26, 0x53	; 83
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e3 e5       	ldi	r30, 0x53	; 83
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	8c 93       	st	X, r24
}
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <Timer_u8__GetCounts>:

u8 Timer_u8__GetCounts(void)
{
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    159a:	e2 e5       	ldi	r30, 0x52	; 82
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
}
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	08 95       	ret

000015a6 <M_void_Timer_Set_Preload>:
void M_void_Timer_Set_Preload(u8 Pre_load)
{
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	0f 92       	push	r0
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	89 83       	std	Y+1, r24	; 0x01
	TCNT0= Pre_load;
    15b2:	e2 e5       	ldi	r30, 0x52	; 82
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	80 83       	st	Z, r24
}
    15ba:	0f 90       	pop	r0
    15bc:	cf 91       	pop	r28
    15be:	df 91       	pop	r29
    15c0:	08 95       	ret

000015c2 <M_TIMER0_setDelayTimeMilliSec>:

void M_TIMER0_setDelayTimeMilliSec(u32 Local_DelayTime, Timer_Mode Local_Mode, PRE_SCALLER Local_Prescaller)
{
    15c2:	df 93       	push	r29
    15c4:	cf 93       	push	r28
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	ac 97       	sbiw	r28, 0x2c	; 44
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
    15d6:	6a a3       	std	Y+34, r22	; 0x22
    15d8:	7b a3       	std	Y+35, r23	; 0x23
    15da:	8c a3       	std	Y+36, r24	; 0x24
    15dc:	9d a3       	std	Y+37, r25	; 0x25
    15de:	4e a3       	std	Y+38, r20	; 0x26
    15e0:	2f a3       	std	Y+39, r18	; 0x27

	u32 Pre_scallers[5]={1,8,64,256,1024};
    15e2:	ce 01       	movw	r24, r28
    15e4:	0e 96       	adiw	r24, 0x0e	; 14
    15e6:	99 a7       	std	Y+41, r25	; 0x29
    15e8:	88 a7       	std	Y+40, r24	; 0x28
    15ea:	ef e7       	ldi	r30, 0x7F	; 127
    15ec:	f2 e0       	ldi	r31, 0x02	; 2
    15ee:	fb a7       	std	Y+43, r31	; 0x2b
    15f0:	ea a7       	std	Y+42, r30	; 0x2a
    15f2:	f4 e1       	ldi	r31, 0x14	; 20
    15f4:	fc a7       	std	Y+44, r31	; 0x2c
    15f6:	ea a5       	ldd	r30, Y+42	; 0x2a
    15f8:	fb a5       	ldd	r31, Y+43	; 0x2b
    15fa:	00 80       	ld	r0, Z
    15fc:	8a a5       	ldd	r24, Y+42	; 0x2a
    15fe:	9b a5       	ldd	r25, Y+43	; 0x2b
    1600:	01 96       	adiw	r24, 0x01	; 1
    1602:	9b a7       	std	Y+43, r25	; 0x2b
    1604:	8a a7       	std	Y+42, r24	; 0x2a
    1606:	e8 a5       	ldd	r30, Y+40	; 0x28
    1608:	f9 a5       	ldd	r31, Y+41	; 0x29
    160a:	00 82       	st	Z, r0
    160c:	88 a5       	ldd	r24, Y+40	; 0x28
    160e:	99 a5       	ldd	r25, Y+41	; 0x29
    1610:	01 96       	adiw	r24, 0x01	; 1
    1612:	99 a7       	std	Y+41, r25	; 0x29
    1614:	88 a7       	std	Y+40, r24	; 0x28
    1616:	9c a5       	ldd	r25, Y+44	; 0x2c
    1618:	91 50       	subi	r25, 0x01	; 1
    161a:	9c a7       	std	Y+44, r25	; 0x2c
    161c:	ec a5       	ldd	r30, Y+44	; 0x2c
    161e:	ee 23       	and	r30, r30
    1620:	51 f7       	brne	.-44     	; 0x15f6 <M_TIMER0_setDelayTimeMilliSec+0x34>
	f32 TickTime = (f32)Pre_scallers[1]/16;
    1622:	8a 89       	ldd	r24, Y+18	; 0x12
    1624:	9b 89       	ldd	r25, Y+19	; 0x13
    1626:	ac 89       	ldd	r26, Y+20	; 0x14
    1628:	bd 89       	ldd	r27, Y+21	; 0x15
    162a:	bc 01       	movw	r22, r24
    162c:	cd 01       	movw	r24, r26
    162e:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	bc 01       	movw	r22, r24
    1638:	cd 01       	movw	r24, r26
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	40 e8       	ldi	r20, 0x80	; 128
    1640:	51 e4       	ldi	r21, 0x41	; 65
    1642:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	8a 87       	std	Y+10, r24	; 0x0a
    164c:	9b 87       	std	Y+11, r25	; 0x0b
    164e:	ac 87       	std	Y+12, r26	; 0x0c
    1650:	bd 87       	std	Y+13, r27	; 0x0d

	u32 DesiredTickS = 0;
    1652:	1e 82       	std	Y+6, r1	; 0x06
    1654:	1f 82       	std	Y+7, r1	; 0x07
    1656:	18 86       	std	Y+8, r1	; 0x08
    1658:	19 86       	std	Y+9, r1	; 0x09
	u32 CTC_Value = 0 ;
    165a:	1a 82       	std	Y+2, r1	; 0x02
    165c:	1b 82       	std	Y+3, r1	; 0x03
    165e:	1c 82       	std	Y+4, r1	; 0x04
    1660:	1d 82       	std	Y+5, r1	; 0x05
	/* Calculate the desired Tick*/
	 DesiredTickS = (f32)Local_DelayTime*1000/ (TickTime) ;
    1662:	6a a1       	ldd	r22, Y+34	; 0x22
    1664:	7b a1       	ldd	r23, Y+35	; 0x23
    1666:	8c a1       	ldd	r24, Y+36	; 0x24
    1668:	9d a1       	ldd	r25, Y+37	; 0x25
    166a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	bc 01       	movw	r22, r24
    1674:	cd 01       	movw	r24, r26
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	4a e7       	ldi	r20, 0x7A	; 122
    167c:	54 e4       	ldi	r21, 0x44	; 68
    167e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	bc 01       	movw	r22, r24
    1688:	cd 01       	movw	r24, r26
    168a:	2a 85       	ldd	r18, Y+10	; 0x0a
    168c:	3b 85       	ldd	r19, Y+11	; 0x0b
    168e:	4c 85       	ldd	r20, Y+12	; 0x0c
    1690:	5d 85       	ldd	r21, Y+13	; 0x0d
    1692:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	bc 01       	movw	r22, r24
    169c:	cd 01       	movw	r24, r26
    169e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	8e 83       	std	Y+6, r24	; 0x06
    16a8:	9f 83       	std	Y+7, r25	; 0x07
    16aa:	a8 87       	std	Y+8, r26	; 0x08
    16ac:	b9 87       	std	Y+9, r27	; 0x09
	if(Local_Mode == Normal_Mode)
    16ae:	8e a1       	ldd	r24, Y+38	; 0x26
    16b0:	88 23       	and	r24, r24
    16b2:	c9 f5       	brne	.+114    	; 0x1726 <M_TIMER0_setDelayTimeMilliSec+0x164>
	{
		 /*Store the numbers of over flow */
		 No_of_over_flows = DesiredTickS/ 256 ;
    16b4:	8e 81       	ldd	r24, Y+6	; 0x06
    16b6:	9f 81       	ldd	r25, Y+7	; 0x07
    16b8:	a8 85       	ldd	r26, Y+8	; 0x08
    16ba:	b9 85       	ldd	r27, Y+9	; 0x09
    16bc:	89 2f       	mov	r24, r25
    16be:	9a 2f       	mov	r25, r26
    16c0:	ab 2f       	mov	r26, r27
    16c2:	bb 27       	eor	r27, r27
    16c4:	80 93 1a 03 	sts	0x031A, r24
    16c8:	90 93 1b 03 	sts	0x031B, r25
    16cc:	a0 93 1c 03 	sts	0x031C, r26
    16d0:	b0 93 1d 03 	sts	0x031D, r27
		 /* Store the Number of remaining if found */
		 No_of_Remaning = DesiredTickS % 256;
    16d4:	8e 81       	ldd	r24, Y+6	; 0x06
    16d6:	80 93 1e 03 	sts	0x031E, r24
		 /*if there is remaining then start from it */
		 if(DesiredTickS % 256 != 0)
    16da:	8e 81       	ldd	r24, Y+6	; 0x06
    16dc:	9f 81       	ldd	r25, Y+7	; 0x07
    16de:	a8 85       	ldd	r26, Y+8	; 0x08
    16e0:	b9 85       	ldd	r27, Y+9	; 0x09
    16e2:	90 70       	andi	r25, 0x00	; 0
    16e4:	a0 70       	andi	r26, 0x00	; 0
    16e6:	b0 70       	andi	r27, 0x00	; 0
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	a1 05       	cpc	r26, r1
    16ec:	b1 05       	cpc	r27, r1
    16ee:	09 f4       	brne	.+2      	; 0x16f2 <M_TIMER0_setDelayTimeMilliSec+0x130>
    16f0:	57 c0       	rjmp	.+174    	; 0x17a0 <M_TIMER0_setDelayTimeMilliSec+0x1de>
		 {
			 TCNT0 = 256 - No_of_Remaning ;
    16f2:	e2 e5       	ldi	r30, 0x52	; 82
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 91 1e 03 	lds	r24, 0x031E
    16fa:	81 95       	neg	r24
    16fc:	80 83       	st	Z, r24
			 No_of_over_flows ++ ;
    16fe:	80 91 1a 03 	lds	r24, 0x031A
    1702:	90 91 1b 03 	lds	r25, 0x031B
    1706:	a0 91 1c 03 	lds	r26, 0x031C
    170a:	b0 91 1d 03 	lds	r27, 0x031D
    170e:	01 96       	adiw	r24, 0x01	; 1
    1710:	a1 1d       	adc	r26, r1
    1712:	b1 1d       	adc	r27, r1
    1714:	80 93 1a 03 	sts	0x031A, r24
    1718:	90 93 1b 03 	sts	0x031B, r25
    171c:	a0 93 1c 03 	sts	0x031C, r26
    1720:	b0 93 1d 03 	sts	0x031D, r27
    1724:	3d c0       	rjmp	.+122    	; 0x17a0 <M_TIMER0_setDelayTimeMilliSec+0x1de>
		 }

		 //H_LCD_void_gotoXY(2,10);
		// H_LCD_void_sendIntNum(No_of_Remaning);
	}
	else if(Local_Mode == CTC_Mode)
    1726:	8e a1       	ldd	r24, Y+38	; 0x26
    1728:	81 30       	cpi	r24, 0x01	; 1
    172a:	d1 f5       	brne	.+116    	; 0x17a0 <M_TIMER0_setDelayTimeMilliSec+0x1de>
	{
		CTC_Value = 255 ;
    172c:	8f ef       	ldi	r24, 0xFF	; 255
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	a0 e0       	ldi	r26, 0x00	; 0
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	8a 83       	std	Y+2, r24	; 0x02
    1736:	9b 83       	std	Y+3, r25	; 0x03
    1738:	ac 83       	std	Y+4, r26	; 0x04
    173a:	bd 83       	std	Y+5, r27	; 0x05
		u8 NoOfCompMatch = 0;
    173c:	19 82       	std	Y+1, r1	; 0x01
    173e:	0b c0       	rjmp	.+22     	; 0x1756 <M_TIMER0_setDelayTimeMilliSec+0x194>

		while(DesiredTickS % CTC_Value)
		{
			CTC_Value -- ;
    1740:	8a 81       	ldd	r24, Y+2	; 0x02
    1742:	9b 81       	ldd	r25, Y+3	; 0x03
    1744:	ac 81       	ldd	r26, Y+4	; 0x04
    1746:	bd 81       	ldd	r27, Y+5	; 0x05
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	a1 09       	sbc	r26, r1
    174c:	b1 09       	sbc	r27, r1
    174e:	8a 83       	std	Y+2, r24	; 0x02
    1750:	9b 83       	std	Y+3, r25	; 0x03
    1752:	ac 83       	std	Y+4, r26	; 0x04
    1754:	bd 83       	std	Y+5, r27	; 0x05
	else if(Local_Mode == CTC_Mode)
	{
		CTC_Value = 255 ;
		u8 NoOfCompMatch = 0;

		while(DesiredTickS % CTC_Value)
    1756:	8e 81       	ldd	r24, Y+6	; 0x06
    1758:	9f 81       	ldd	r25, Y+7	; 0x07
    175a:	a8 85       	ldd	r26, Y+8	; 0x08
    175c:	b9 85       	ldd	r27, Y+9	; 0x09
    175e:	2a 81       	ldd	r18, Y+2	; 0x02
    1760:	3b 81       	ldd	r19, Y+3	; 0x03
    1762:	4c 81       	ldd	r20, Y+4	; 0x04
    1764:	5d 81       	ldd	r21, Y+5	; 0x05
    1766:	bc 01       	movw	r22, r24
    1768:	cd 01       	movw	r24, r26
    176a:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <__udivmodsi4>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	a1 05       	cpc	r26, r1
    1776:	b1 05       	cpc	r27, r1
    1778:	19 f7       	brne	.-58     	; 0x1740 <M_TIMER0_setDelayTimeMilliSec+0x17e>
		{
			CTC_Value -- ;
		}
		NoOfCompMatch = DesiredTickS % CTC_Value ;
    177a:	8e 81       	ldd	r24, Y+6	; 0x06
    177c:	9f 81       	ldd	r25, Y+7	; 0x07
    177e:	a8 85       	ldd	r26, Y+8	; 0x08
    1780:	b9 85       	ldd	r27, Y+9	; 0x09
    1782:	2a 81       	ldd	r18, Y+2	; 0x02
    1784:	3b 81       	ldd	r19, Y+3	; 0x03
    1786:	4c 81       	ldd	r20, Y+4	; 0x04
    1788:	5d 81       	ldd	r21, Y+5	; 0x05
    178a:	bc 01       	movw	r22, r24
    178c:	cd 01       	movw	r24, r26
    178e:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <__udivmodsi4>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	89 83       	std	Y+1, r24	; 0x01
		OCR0 = NoOfCompMatch;
    1798:	ec e5       	ldi	r30, 0x5C	; 92
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	80 83       	st	Z, r24
	}
	M_void_Timer_start(Local_Prescaller);
    17a0:	8f a1       	ldd	r24, Y+39	; 0x27
    17a2:	0e 94 24 0a 	call	0x1448	; 0x1448 <M_void_Timer_start>
}
    17a6:	ac 96       	adiw	r28, 0x2c	; 44
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	cd bf       	out	0x3d, r28	; 61
    17b2:	cf 91       	pop	r28
    17b4:	df 91       	pop	r29
    17b6:	08 95       	ret

000017b8 <M_void_EnableTIMERInt>:

void M_void_EnableTIMERInt(Timer_Mode T_MODE)
{
    17b8:	df 93       	push	r29
    17ba:	cf 93       	push	r28
    17bc:	00 d0       	rcall	.+0      	; 0x17be <M_void_EnableTIMERInt+0x6>
    17be:	0f 92       	push	r0
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
    17c4:	89 83       	std	Y+1, r24	; 0x01
	switch(T_MODE)
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	3b 83       	std	Y+3, r19	; 0x03
    17ce:	2a 83       	std	Y+2, r18	; 0x02
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	9b 81       	ldd	r25, Y+3	; 0x03
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	31 f0       	breq	.+12     	; 0x17e4 <M_void_EnableTIMERInt+0x2c>
    17d8:	2a 81       	ldd	r18, Y+2	; 0x02
    17da:	3b 81       	ldd	r19, Y+3	; 0x03
    17dc:	21 30       	cpi	r18, 0x01	; 1
    17de:	31 05       	cpc	r19, r1
    17e0:	81 f0       	breq	.+32     	; 0x1802 <M_void_EnableTIMERInt+0x4a>
    17e2:	1d c0       	rjmp	.+58     	; 0x181e <M_void_EnableTIMERInt+0x66>
	{
	case Normal_Mode:
		TIMSK &= NORMAL_MODE_INTERRUPT_CLEAR;
    17e4:	a9 e5       	ldi	r26, 0x59	; 89
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e9 e5       	ldi	r30, 0x59	; 89
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	8e 7f       	andi	r24, 0xFE	; 254
    17f0:	8c 93       	st	X, r24
		TIMSK |= NORMAL_MODE_INTERRUPT_SET;
    17f2:	a9 e5       	ldi	r26, 0x59	; 89
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e9 e5       	ldi	r30, 0x59	; 89
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	81 60       	ori	r24, 0x01	; 1
    17fe:	8c 93       	st	X, r24
    1800:	0e c0       	rjmp	.+28     	; 0x181e <M_void_EnableTIMERInt+0x66>
		break;
	case CTC_Mode:
		TIMSK &= CTC_MODE_INTERRUPT_CLEAR;
    1802:	a9 e5       	ldi	r26, 0x59	; 89
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	e9 e5       	ldi	r30, 0x59	; 89
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	8d 7f       	andi	r24, 0xFD	; 253
    180e:	8c 93       	st	X, r24
		TIMSK |= CTC_MODE_INTERRUPT_SET;
    1810:	a9 e5       	ldi	r26, 0x59	; 89
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e9 e5       	ldi	r30, 0x59	; 89
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	82 60       	ori	r24, 0x02	; 2
    181c:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <M_void_DisableTIMERInt>:
void M_void_DisableTIMERInt(Timer_Mode T_MODE)
{
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	00 d0       	rcall	.+0      	; 0x1830 <M_void_DisableTIMERInt+0x6>
    1830:	0f 92       	push	r0
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	89 83       	std	Y+1, r24	; 0x01
	switch(T_MODE)
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	28 2f       	mov	r18, r24
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	3b 83       	std	Y+3, r19	; 0x03
    1840:	2a 83       	std	Y+2, r18	; 0x02
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	9b 81       	ldd	r25, Y+3	; 0x03
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	31 f0       	breq	.+12     	; 0x1856 <M_void_DisableTIMERInt+0x2c>
    184a:	2a 81       	ldd	r18, Y+2	; 0x02
    184c:	3b 81       	ldd	r19, Y+3	; 0x03
    184e:	21 30       	cpi	r18, 0x01	; 1
    1850:	31 05       	cpc	r19, r1
    1852:	79 f0       	breq	.+30     	; 0x1872 <M_void_DisableTIMERInt+0x48>
    1854:	1b c0       	rjmp	.+54     	; 0x188c <M_void_DisableTIMERInt+0x62>
	{
	case Normal_Mode:
		TIMSK &= NORMAL_MODE_INTERRUPT_CLEAR;
    1856:	a9 e5       	ldi	r26, 0x59	; 89
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e9 e5       	ldi	r30, 0x59	; 89
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	8e 7f       	andi	r24, 0xFE	; 254
    1862:	8c 93       	st	X, r24
		TIMSK |= NORMAL_MODE_INTERRUPT_RESET;
    1864:	a9 e5       	ldi	r26, 0x59	; 89
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	e9 e5       	ldi	r30, 0x59	; 89
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	8c 93       	st	X, r24
    1870:	0d c0       	rjmp	.+26     	; 0x188c <M_void_DisableTIMERInt+0x62>
		break;
	case CTC_Mode:
		TIMSK &= CTC_MODE_INTERRUPT_CLEAR;
    1872:	a9 e5       	ldi	r26, 0x59	; 89
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e9 e5       	ldi	r30, 0x59	; 89
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	8d 7f       	andi	r24, 0xFD	; 253
    187e:	8c 93       	st	X, r24
		TIMSK |= CTC_MODE_INTERRUPT_RESET;
    1880:	a9 e5       	ldi	r26, 0x59	; 89
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e9 e5       	ldi	r30, 0x59	; 89
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	08 95       	ret

00001898 <M_void_setCallBack>:

void M_void_setCallBack(Timer_Mode T_MODE,void (*Copy_pvINTFunc)(void))
{
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	00 d0       	rcall	.+0      	; 0x189e <M_void_setCallBack+0x6>
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <M_void_setCallBack+0x8>
    18a0:	0f 92       	push	r0
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	89 83       	std	Y+1, r24	; 0x01
    18a8:	7b 83       	std	Y+3, r23	; 0x03
    18aa:	6a 83       	std	Y+2, r22	; 0x02
	//u8 Local_u8ErrorStatus=NO_ERROR;
//	u8 Local_u8counter;
	switch(T_MODE)
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	3d 83       	std	Y+5, r19	; 0x05
    18b4:	2c 83       	std	Y+4, r18	; 0x04
    18b6:	8c 81       	ldd	r24, Y+4	; 0x04
    18b8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ba:	00 97       	sbiw	r24, 0x00	; 0
    18bc:	31 f0       	breq	.+12     	; 0x18ca <M_void_setCallBack+0x32>
    18be:	2c 81       	ldd	r18, Y+4	; 0x04
    18c0:	3d 81       	ldd	r19, Y+5	; 0x05
    18c2:	21 30       	cpi	r18, 0x01	; 1
    18c4:	31 05       	cpc	r19, r1
    18c6:	61 f0       	breq	.+24     	; 0x18e0 <M_void_setCallBack+0x48>
    18c8:	15 c0       	rjmp	.+42     	; 0x18f4 <M_void_setCallBack+0x5c>
	{
	case Normal_Mode:
		if(Copy_pvINTFunc!= NULL)
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	9b 81       	ldd	r25, Y+3	; 0x03
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	89 f0       	breq	.+34     	; 0x18f4 <M_void_setCallBack+0x5c>
		{
			EXTI_ARRCALLBACK2FUNC[0]=Copy_pvINTFunc;
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	9b 81       	ldd	r25, Y+3	; 0x03
    18d6:	90 93 17 03 	sts	0x0317, r25
    18da:	80 93 16 03 	sts	0x0316, r24
    18de:	0a c0       	rjmp	.+20     	; 0x18f4 <M_void_setCallBack+0x5c>
		}
		break;
	case CTC_Mode:
		if(Copy_pvINTFunc!= NULL)
    18e0:	8a 81       	ldd	r24, Y+2	; 0x02
    18e2:	9b 81       	ldd	r25, Y+3	; 0x03
    18e4:	00 97       	sbiw	r24, 0x00	; 0
    18e6:	31 f0       	breq	.+12     	; 0x18f4 <M_void_setCallBack+0x5c>
		{
			EXTI_ARRCALLBACK2FUNC[1]=Copy_pvINTFunc;
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	9b 81       	ldd	r25, Y+3	; 0x03
    18ec:	90 93 19 03 	sts	0x0319, r25
    18f0:	80 93 18 03 	sts	0x0318, r24
		}
		break;
	default:
		break;
	}
}
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	cf 91       	pop	r28
    1900:	df 91       	pop	r29
    1902:	08 95       	ret

00001904 <M_TIMER0_PHASE_PWM_SET>:

void M_TIMER0_PHASE_PWM_SET(Comp_Output_Mode PWM_TYPE,u32 PWM_FREQ, u8 Duty_Cycle)
{
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    190c:	28 97       	sbiw	r28, 0x08	; 8
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	f8 94       	cli
    1912:	de bf       	out	0x3e, r29	; 62
    1914:	0f be       	out	0x3f, r0	; 63
    1916:	cd bf       	out	0x3d, r28	; 61
    1918:	89 83       	std	Y+1, r24	; 0x01
    191a:	4a 83       	std	Y+2, r20	; 0x02
    191c:	5b 83       	std	Y+3, r21	; 0x03
    191e:	6c 83       	std	Y+4, r22	; 0x04
    1920:	7d 83       	std	Y+5, r23	; 0x05
    1922:	2e 83       	std	Y+6, r18	; 0x06
	/*Set duty cycle to OCR0*/
	switch(PWM_TYPE)
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	38 87       	std	Y+8, r19	; 0x08
    192c:	2f 83       	std	Y+7, r18	; 0x07
    192e:	8f 81       	ldd	r24, Y+7	; 0x07
    1930:	98 85       	ldd	r25, Y+8	; 0x08
    1932:	84 30       	cpi	r24, 0x04	; 4
    1934:	91 05       	cpc	r25, r1
    1936:	31 f0       	breq	.+12     	; 0x1944 <M_TIMER0_PHASE_PWM_SET+0x40>
    1938:	2f 81       	ldd	r18, Y+7	; 0x07
    193a:	38 85       	ldd	r19, Y+8	; 0x08
    193c:	25 30       	cpi	r18, 0x05	; 5
    193e:	31 05       	cpc	r19, r1
    1940:	89 f0       	breq	.+34     	; 0x1964 <M_TIMER0_PHASE_PWM_SET+0x60>
    1942:	1b c0       	rjmp	.+54     	; 0x197a <M_TIMER0_PHASE_PWM_SET+0x76>
	{
	case Inverting_Mode:
		OCR0=(255-(3*Duty_Cycle));
    1944:	ec e5       	ldi	r30, 0x5C	; 92
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	8e 81       	ldd	r24, Y+6	; 0x06
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	c9 01       	movw	r24, r18
    1950:	88 0f       	add	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	82 0f       	add	r24, r18
    1956:	93 1f       	adc	r25, r19
    1958:	90 95       	com	r25
    195a:	81 95       	neg	r24
    195c:	9f 4f       	sbci	r25, 0xFF	; 255
    195e:	81 50       	subi	r24, 0x01	; 1
    1960:	80 83       	st	Z, r24
    1962:	0b c0       	rjmp	.+22     	; 0x197a <M_TIMER0_PHASE_PWM_SET+0x76>
		break;
	case Non_Invering_Mode:
		OCR0=(3*Duty_Cycle);
    1964:	ec e5       	ldi	r30, 0x5C	; 92
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	8e 81       	ldd	r24, Y+6	; 0x06
    196a:	28 2f       	mov	r18, r24
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	c9 01       	movw	r24, r18
    1970:	88 0f       	add	r24, r24
    1972:	99 1f       	adc	r25, r25
    1974:	82 0f       	add	r24, r18
    1976:	93 1f       	adc	r25, r19
    1978:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
	/*Select PRE_SCALLER according to the giver frequency*/
	if((PWM_FREQ>31000))
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	9b 81       	ldd	r25, Y+3	; 0x03
    197e:	ac 81       	ldd	r26, Y+4	; 0x04
    1980:	bd 81       	ldd	r27, Y+5	; 0x05
    1982:	89 31       	cpi	r24, 0x19	; 25
    1984:	39 e7       	ldi	r19, 0x79	; 121
    1986:	93 07       	cpc	r25, r19
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	a3 07       	cpc	r26, r19
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	b3 07       	cpc	r27, r19
    1990:	20 f0       	brcs	.+8      	; 0x199a <M_TIMER0_PHASE_PWM_SET+0x96>
	{
		M_void_Timer_start(NO_PRESCALLING);
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	0e 94 24 0a 	call	0x1448	; 0x1448 <M_void_Timer_start>
    1998:	7b c0       	rjmp	.+246    	; 0x1a90 <M_TIMER0_PHASE_PWM_SET+0x18c>
	}
	else if((PWM_FREQ<=31000) && (PWM_FREQ>3900))
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	9b 81       	ldd	r25, Y+3	; 0x03
    199e:	ac 81       	ldd	r26, Y+4	; 0x04
    19a0:	bd 81       	ldd	r27, Y+5	; 0x05
    19a2:	89 31       	cpi	r24, 0x19	; 25
    19a4:	29 e7       	ldi	r18, 0x79	; 121
    19a6:	92 07       	cpc	r25, r18
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	a2 07       	cpc	r26, r18
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	b2 07       	cpc	r27, r18
    19b0:	80 f4       	brcc	.+32     	; 0x19d2 <M_TIMER0_PHASE_PWM_SET+0xce>
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	9b 81       	ldd	r25, Y+3	; 0x03
    19b6:	ac 81       	ldd	r26, Y+4	; 0x04
    19b8:	bd 81       	ldd	r27, Y+5	; 0x05
    19ba:	8d 33       	cpi	r24, 0x3D	; 61
    19bc:	3f e0       	ldi	r19, 0x0F	; 15
    19be:	93 07       	cpc	r25, r19
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	a3 07       	cpc	r26, r19
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	b3 07       	cpc	r27, r19
    19c8:	20 f0       	brcs	.+8      	; 0x19d2 <M_TIMER0_PHASE_PWM_SET+0xce>
	{
		M_void_Timer_start(CLK_8);
    19ca:	82 e0       	ldi	r24, 0x02	; 2
    19cc:	0e 94 24 0a 	call	0x1448	; 0x1448 <M_void_Timer_start>
    19d0:	5f c0       	rjmp	.+190    	; 0x1a90 <M_TIMER0_PHASE_PWM_SET+0x18c>

	}
	else if((PWM_FREQ <= 3900) && (PWM_FREQ > 400))
    19d2:	8a 81       	ldd	r24, Y+2	; 0x02
    19d4:	9b 81       	ldd	r25, Y+3	; 0x03
    19d6:	ac 81       	ldd	r26, Y+4	; 0x04
    19d8:	bd 81       	ldd	r27, Y+5	; 0x05
    19da:	8d 33       	cpi	r24, 0x3D	; 61
    19dc:	2f e0       	ldi	r18, 0x0F	; 15
    19de:	92 07       	cpc	r25, r18
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	a2 07       	cpc	r26, r18
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	b2 07       	cpc	r27, r18
    19e8:	80 f4       	brcc	.+32     	; 0x1a0a <M_TIMER0_PHASE_PWM_SET+0x106>
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	9b 81       	ldd	r25, Y+3	; 0x03
    19ee:	ac 81       	ldd	r26, Y+4	; 0x04
    19f0:	bd 81       	ldd	r27, Y+5	; 0x05
    19f2:	81 39       	cpi	r24, 0x91	; 145
    19f4:	31 e0       	ldi	r19, 0x01	; 1
    19f6:	93 07       	cpc	r25, r19
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	a3 07       	cpc	r26, r19
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	b3 07       	cpc	r27, r19
    1a00:	20 f0       	brcs	.+8      	; 0x1a0a <M_TIMER0_PHASE_PWM_SET+0x106>
	{
		M_void_Timer_start(CLK_64);
    1a02:	83 e0       	ldi	r24, 0x03	; 3
    1a04:	0e 94 24 0a 	call	0x1448	; 0x1448 <M_void_Timer_start>
    1a08:	43 c0       	rjmp	.+134    	; 0x1a90 <M_TIMER0_PHASE_PWM_SET+0x18c>

	}
	else if((PWM_FREQ <= 400) && (PWM_FREQ >100))
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a0e:	ac 81       	ldd	r26, Y+4	; 0x04
    1a10:	bd 81       	ldd	r27, Y+5	; 0x05
    1a12:	81 39       	cpi	r24, 0x91	; 145
    1a14:	21 e0       	ldi	r18, 0x01	; 1
    1a16:	92 07       	cpc	r25, r18
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	a2 07       	cpc	r26, r18
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	b2 07       	cpc	r27, r18
    1a20:	68 f4       	brcc	.+26     	; 0x1a3c <M_TIMER0_PHASE_PWM_SET+0x138>
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	9b 81       	ldd	r25, Y+3	; 0x03
    1a26:	ac 81       	ldd	r26, Y+4	; 0x04
    1a28:	bd 81       	ldd	r27, Y+5	; 0x05
    1a2a:	85 36       	cpi	r24, 0x65	; 101
    1a2c:	91 05       	cpc	r25, r1
    1a2e:	a1 05       	cpc	r26, r1
    1a30:	b1 05       	cpc	r27, r1
    1a32:	20 f0       	brcs	.+8      	; 0x1a3c <M_TIMER0_PHASE_PWM_SET+0x138>
	{
		M_void_Timer_start(CLK_256);
    1a34:	84 e0       	ldi	r24, 0x04	; 4
    1a36:	0e 94 24 0a 	call	0x1448	; 0x1448 <M_void_Timer_start>
    1a3a:	2a c0       	rjmp	.+84     	; 0x1a90 <M_TIMER0_PHASE_PWM_SET+0x18c>

	}
	else if((PWM_FREQ <=100) &&(PWM_FREQ >=30))
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a40:	ac 81       	ldd	r26, Y+4	; 0x04
    1a42:	bd 81       	ldd	r27, Y+5	; 0x05
    1a44:	85 36       	cpi	r24, 0x65	; 101
    1a46:	91 05       	cpc	r25, r1
    1a48:	a1 05       	cpc	r26, r1
    1a4a:	b1 05       	cpc	r27, r1
    1a4c:	68 f4       	brcc	.+26     	; 0x1a68 <M_TIMER0_PHASE_PWM_SET+0x164>
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	9b 81       	ldd	r25, Y+3	; 0x03
    1a52:	ac 81       	ldd	r26, Y+4	; 0x04
    1a54:	bd 81       	ldd	r27, Y+5	; 0x05
    1a56:	8e 31       	cpi	r24, 0x1E	; 30
    1a58:	91 05       	cpc	r25, r1
    1a5a:	a1 05       	cpc	r26, r1
    1a5c:	b1 05       	cpc	r27, r1
    1a5e:	20 f0       	brcs	.+8      	; 0x1a68 <M_TIMER0_PHASE_PWM_SET+0x164>
	{
		M_void_Timer_start(CLK_1024);
    1a60:	85 e0       	ldi	r24, 0x05	; 5
    1a62:	0e 94 24 0a 	call	0x1448	; 0x1448 <M_void_Timer_start>
    1a66:	14 c0       	rjmp	.+40     	; 0x1a90 <M_TIMER0_PHASE_PWM_SET+0x18c>
	}
	else if((PWM_FREQ<30) && (PWM_FREQ >=0))
    1a68:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a6c:	ac 81       	ldd	r26, Y+4	; 0x04
    1a6e:	bd 81       	ldd	r27, Y+5	; 0x05
    1a70:	8e 31       	cpi	r24, 0x1E	; 30
    1a72:	91 05       	cpc	r25, r1
    1a74:	a1 05       	cpc	r26, r1
    1a76:	b1 05       	cpc	r27, r1
    1a78:	58 f4       	brcc	.+22     	; 0x1a90 <M_TIMER0_PHASE_PWM_SET+0x18c>
	{
		M_void_Timer_Init(Phase_Correct_PWM,Normal_Port);
    1a7a:	83 e0       	ldi	r24, 0x03	; 3
    1a7c:	60 e0       	ldi	r22, 0x00	; 0
    1a7e:	0e 94 84 08 	call	0x1108	; 0x1108 <M_void_Timer_Init>
		M_void_Timer_start(No_CLK);
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	0e 94 24 0a 	call	0x1448	; 0x1448 <M_void_Timer_start>
		M_Dio_void_setPinValue(DIO_PB3,DIO_LOW);
    1a88:	87 e1       	ldi	r24, 0x17	; 23
    1a8a:	60 e0       	ldi	r22, 0x00	; 0
    1a8c:	0e 94 c3 13 	call	0x2786	; 0x2786 <M_Dio_void_setPinValue>
		break;
	default:
		break;
	}
	*/
}
    1a90:	28 96       	adiw	r28, 0x08	; 8
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	f8 94       	cli
    1a96:	de bf       	out	0x3e, r29	; 62
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	cd bf       	out	0x3d, r28	; 61
    1a9c:	cf 91       	pop	r28
    1a9e:	df 91       	pop	r29
    1aa0:	08 95       	ret

00001aa2 <M_TIMER0_FAST_PWM_SET>:

void M_TIMER0_FAST_PWM_SET(Comp_Output_Mode PWM_TYPE,FAST_PWM_FREQ PWM_FREQ,u8 Duty_Cycle)
{
    1aa2:	0f 93       	push	r16
    1aa4:	1f 93       	push	r17
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	28 97       	sbiw	r28, 0x08	; 8
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	f8 94       	cli
    1ab4:	de bf       	out	0x3e, r29	; 62
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	cd bf       	out	0x3d, r28	; 61
    1aba:	89 83       	std	Y+1, r24	; 0x01
    1abc:	7b 83       	std	Y+3, r23	; 0x03
    1abe:	6a 83       	std	Y+2, r22	; 0x02
    1ac0:	4c 83       	std	Y+4, r20	; 0x04
	/*Set duty cycle to OCR0*/
	switch(PWM_TYPE)
    1ac2:	89 81       	ldd	r24, Y+1	; 0x01
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	3e 83       	std	Y+6, r19	; 0x06
    1aca:	2d 83       	std	Y+5, r18	; 0x05
    1acc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ace:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad0:	84 30       	cpi	r24, 0x04	; 4
    1ad2:	91 05       	cpc	r25, r1
    1ad4:	31 f0       	breq	.+12     	; 0x1ae2 <M_TIMER0_FAST_PWM_SET+0x40>
    1ad6:	ed 81       	ldd	r30, Y+5	; 0x05
    1ad8:	fe 81       	ldd	r31, Y+6	; 0x06
    1ada:	e5 30       	cpi	r30, 0x05	; 5
    1adc:	f1 05       	cpc	r31, r1
    1ade:	69 f1       	breq	.+90     	; 0x1b3a <M_TIMER0_FAST_PWM_SET+0x98>
    1ae0:	57 c0       	rjmp	.+174    	; 0x1b90 <M_TIMER0_FAST_PWM_SET+0xee>
	{
	case Inverting_Mode:
		OCR0=(255-(f32)(2.56*Duty_Cycle));
    1ae2:	0c e5       	ldi	r16, 0x5C	; 92
    1ae4:	10 e0       	ldi	r17, 0x00	; 0
    1ae6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae8:	88 2f       	mov	r24, r24
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	aa 27       	eor	r26, r26
    1aee:	97 fd       	sbrc	r25, 7
    1af0:	a0 95       	com	r26
    1af2:	ba 2f       	mov	r27, r26
    1af4:	bc 01       	movw	r22, r24
    1af6:	cd 01       	movw	r24, r26
    1af8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	bc 01       	movw	r22, r24
    1b02:	cd 01       	movw	r24, r26
    1b04:	2a e0       	ldi	r18, 0x0A	; 10
    1b06:	37 ed       	ldi	r19, 0xD7	; 215
    1b08:	43 e2       	ldi	r20, 0x23	; 35
    1b0a:	50 ec       	ldi	r21, 0xC0	; 192
    1b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	bc 01       	movw	r22, r24
    1b16:	cd 01       	movw	r24, r26
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	4f e7       	ldi	r20, 0x7F	; 127
    1b1e:	53 e4       	ldi	r21, 0x43	; 67
    1b20:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	bc 01       	movw	r22, r24
    1b2a:	cd 01       	movw	r24, r26
    1b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	f8 01       	movw	r30, r16
    1b36:	80 83       	st	Z, r24
    1b38:	2b c0       	rjmp	.+86     	; 0x1b90 <M_TIMER0_FAST_PWM_SET+0xee>
		break;
	case Non_Invering_Mode:
		OCR0=(((f32)2.56*Duty_Cycle)-1);
    1b3a:	0c e5       	ldi	r16, 0x5C	; 92
    1b3c:	10 e0       	ldi	r17, 0x00	; 0
    1b3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b40:	88 2f       	mov	r24, r24
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	aa 27       	eor	r26, r26
    1b46:	97 fd       	sbrc	r25, 7
    1b48:	a0 95       	com	r26
    1b4a:	ba 2f       	mov	r27, r26
    1b4c:	bc 01       	movw	r22, r24
    1b4e:	cd 01       	movw	r24, r26
    1b50:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	bc 01       	movw	r22, r24
    1b5a:	cd 01       	movw	r24, r26
    1b5c:	2a e0       	ldi	r18, 0x0A	; 10
    1b5e:	37 ed       	ldi	r19, 0xD7	; 215
    1b60:	43 e2       	ldi	r20, 0x23	; 35
    1b62:	50 e4       	ldi	r21, 0x40	; 64
    1b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	bc 01       	movw	r22, r24
    1b6e:	cd 01       	movw	r24, r26
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	40 e8       	ldi	r20, 0x80	; 128
    1b76:	5f e3       	ldi	r21, 0x3F	; 63
    1b78:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	bc 01       	movw	r22, r24
    1b82:	cd 01       	movw	r24, r26
    1b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	f8 01       	movw	r30, r16
    1b8e:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
	/*Select PRE_SCALLER according to the giver frequency*/
	switch(PWM_FREQ)
    1b90:	2a 81       	ldd	r18, Y+2	; 0x02
    1b92:	3b 81       	ldd	r19, Y+3	; 0x03
    1b94:	38 87       	std	Y+8, r19	; 0x08
    1b96:	2f 83       	std	Y+7, r18	; 0x07
    1b98:	8f 81       	ldd	r24, Y+7	; 0x07
    1b9a:	98 85       	ldd	r25, Y+8	; 0x08
    1b9c:	e3 e0       	ldi	r30, 0x03	; 3
    1b9e:	81 3d       	cpi	r24, 0xD1	; 209
    1ba0:	9e 07       	cpc	r25, r30
    1ba2:	29 f1       	breq	.+74     	; 0x1bee <M_TIMER0_FAST_PWM_SET+0x14c>
    1ba4:	2f 81       	ldd	r18, Y+7	; 0x07
    1ba6:	38 85       	ldd	r19, Y+8	; 0x08
    1ba8:	83 e0       	ldi	r24, 0x03	; 3
    1baa:	22 3d       	cpi	r18, 0xD2	; 210
    1bac:	38 07       	cpc	r19, r24
    1bae:	58 f4       	brcc	.+22     	; 0x1bc6 <M_TIMER0_FAST_PWM_SET+0x124>
    1bb0:	ef 81       	ldd	r30, Y+7	; 0x07
    1bb2:	f8 85       	ldd	r31, Y+8	; 0x08
    1bb4:	ed 33       	cpi	r30, 0x3D	; 61
    1bb6:	f1 05       	cpc	r31, r1
    1bb8:	11 f1       	breq	.+68     	; 0x1bfe <M_TIMER0_FAST_PWM_SET+0x15c>
    1bba:	2f 81       	ldd	r18, Y+7	; 0x07
    1bbc:	38 85       	ldd	r19, Y+8	; 0x08
    1bbe:	24 3f       	cpi	r18, 0xF4	; 244
    1bc0:	31 05       	cpc	r19, r1
    1bc2:	c9 f0       	breq	.+50     	; 0x1bf6 <M_TIMER0_FAST_PWM_SET+0x154>
    1bc4:	1f c0       	rjmp	.+62     	; 0x1c04 <M_TIMER0_FAST_PWM_SET+0x162>
    1bc6:	8f 81       	ldd	r24, Y+7	; 0x07
    1bc8:	98 85       	ldd	r25, Y+8	; 0x08
    1bca:	ee e1       	ldi	r30, 0x1E	; 30
    1bcc:	85 38       	cpi	r24, 0x85	; 133
    1bce:	9e 07       	cpc	r25, r30
    1bd0:	51 f0       	breq	.+20     	; 0x1be6 <M_TIMER0_FAST_PWM_SET+0x144>
    1bd2:	2f 81       	ldd	r18, Y+7	; 0x07
    1bd4:	38 85       	ldd	r19, Y+8	; 0x08
    1bd6:	84 ef       	ldi	r24, 0xF4	; 244
    1bd8:	24 32       	cpi	r18, 0x24	; 36
    1bda:	38 07       	cpc	r19, r24
    1bdc:	99 f4       	brne	.+38     	; 0x1c04 <M_TIMER0_FAST_PWM_SET+0x162>
	{
	case FAST_PWM_NO_PRESC:
		M_void_Timer_start(NO_PRESCALLING);
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	0e 94 24 0a 	call	0x1448	; 0x1448 <M_void_Timer_start>
    1be4:	0f c0       	rjmp	.+30     	; 0x1c04 <M_TIMER0_FAST_PWM_SET+0x162>
		break;
	case FAST_PWM_8_CLK:
		M_void_Timer_start(CLK_8);
    1be6:	82 e0       	ldi	r24, 0x02	; 2
    1be8:	0e 94 24 0a 	call	0x1448	; 0x1448 <M_void_Timer_start>
    1bec:	0b c0       	rjmp	.+22     	; 0x1c04 <M_TIMER0_FAST_PWM_SET+0x162>
		break;
	case FAST_PWM_64_CLK:
		M_void_Timer_start(CLK_64);
    1bee:	83 e0       	ldi	r24, 0x03	; 3
    1bf0:	0e 94 24 0a 	call	0x1448	; 0x1448 <M_void_Timer_start>
    1bf4:	07 c0       	rjmp	.+14     	; 0x1c04 <M_TIMER0_FAST_PWM_SET+0x162>
		break;
	case FAST_PWM_256_CLK:
		M_void_Timer_start(CLK_256);
    1bf6:	84 e0       	ldi	r24, 0x04	; 4
    1bf8:	0e 94 24 0a 	call	0x1448	; 0x1448 <M_void_Timer_start>
    1bfc:	03 c0       	rjmp	.+6      	; 0x1c04 <M_TIMER0_FAST_PWM_SET+0x162>
		break;
	case FAST_PWM_1024_CLK:
		M_void_Timer_start(CLK_1024);
    1bfe:	85 e0       	ldi	r24, 0x05	; 5
    1c00:	0e 94 24 0a 	call	0x1448	; 0x1448 <M_void_Timer_start>
		break;
	default:
		break;
	}
}
    1c04:	28 96       	adiw	r28, 0x08	; 8
    1c06:	0f b6       	in	r0, 0x3f	; 63
    1c08:	f8 94       	cli
    1c0a:	de bf       	out	0x3e, r29	; 62
    1c0c:	0f be       	out	0x3f, r0	; 63
    1c0e:	cd bf       	out	0x3d, r28	; 61
    1c10:	cf 91       	pop	r28
    1c12:	df 91       	pop	r29
    1c14:	1f 91       	pop	r17
    1c16:	0f 91       	pop	r16
    1c18:	08 95       	ret

00001c1a <__vector_11>:



ISR(TIMER0_OVF_vect)
{
    1c1a:	1f 92       	push	r1
    1c1c:	0f 92       	push	r0
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	0f 92       	push	r0
    1c22:	11 24       	eor	r1, r1
    1c24:	2f 93       	push	r18
    1c26:	3f 93       	push	r19
    1c28:	4f 93       	push	r20
    1c2a:	5f 93       	push	r21
    1c2c:	6f 93       	push	r22
    1c2e:	7f 93       	push	r23
    1c30:	8f 93       	push	r24
    1c32:	9f 93       	push	r25
    1c34:	af 93       	push	r26
    1c36:	bf 93       	push	r27
    1c38:	ef 93       	push	r30
    1c3a:	ff 93       	push	r31
    1c3c:	df 93       	push	r29
    1c3e:	cf 93       	push	r28
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
	Global_No_of_overflows++;
    1c44:	80 91 1f 03 	lds	r24, 0x031F
    1c48:	90 91 20 03 	lds	r25, 0x0320
    1c4c:	a0 91 21 03 	lds	r26, 0x0321
    1c50:	b0 91 22 03 	lds	r27, 0x0322
    1c54:	01 96       	adiw	r24, 0x01	; 1
    1c56:	a1 1d       	adc	r26, r1
    1c58:	b1 1d       	adc	r27, r1
    1c5a:	80 93 1f 03 	sts	0x031F, r24
    1c5e:	90 93 20 03 	sts	0x0320, r25
    1c62:	a0 93 21 03 	sts	0x0321, r26
    1c66:	b0 93 22 03 	sts	0x0322, r27
	if(EXTI_ARRCALLBACK2FUNC[0]!=NULL)
    1c6a:	80 91 16 03 	lds	r24, 0x0316
    1c6e:	90 91 17 03 	lds	r25, 0x0317
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	41 f1       	breq	.+80     	; 0x1cc6 <__vector_11+0xac>
	{
		if(Global_No_of_overflows==No_of_over_flows)
    1c76:	20 91 1f 03 	lds	r18, 0x031F
    1c7a:	30 91 20 03 	lds	r19, 0x0320
    1c7e:	40 91 21 03 	lds	r20, 0x0321
    1c82:	50 91 22 03 	lds	r21, 0x0322
    1c86:	80 91 1a 03 	lds	r24, 0x031A
    1c8a:	90 91 1b 03 	lds	r25, 0x031B
    1c8e:	a0 91 1c 03 	lds	r26, 0x031C
    1c92:	b0 91 1d 03 	lds	r27, 0x031D
    1c96:	28 17       	cp	r18, r24
    1c98:	39 07       	cpc	r19, r25
    1c9a:	4a 07       	cpc	r20, r26
    1c9c:	5b 07       	cpc	r21, r27
    1c9e:	99 f4       	brne	.+38     	; 0x1cc6 <__vector_11+0xac>
		{
			EXTI_ARRCALLBACK2FUNC[0]();
    1ca0:	e0 91 16 03 	lds	r30, 0x0316
    1ca4:	f0 91 17 03 	lds	r31, 0x0317
    1ca8:	09 95       	icall
			Global_No_of_overflows=0;
    1caa:	10 92 1f 03 	sts	0x031F, r1
    1cae:	10 92 20 03 	sts	0x0320, r1
    1cb2:	10 92 21 03 	sts	0x0321, r1
    1cb6:	10 92 22 03 	sts	0x0322, r1
			TCNT0 = 256 - No_of_Remaning;
    1cba:	e2 e5       	ldi	r30, 0x52	; 82
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 91 1e 03 	lds	r24, 0x031E
    1cc2:	81 95       	neg	r24
    1cc4:	80 83       	st	Z, r24
		}
	}

}
    1cc6:	cf 91       	pop	r28
    1cc8:	df 91       	pop	r29
    1cca:	ff 91       	pop	r31
    1ccc:	ef 91       	pop	r30
    1cce:	bf 91       	pop	r27
    1cd0:	af 91       	pop	r26
    1cd2:	9f 91       	pop	r25
    1cd4:	8f 91       	pop	r24
    1cd6:	7f 91       	pop	r23
    1cd8:	6f 91       	pop	r22
    1cda:	5f 91       	pop	r21
    1cdc:	4f 91       	pop	r20
    1cde:	3f 91       	pop	r19
    1ce0:	2f 91       	pop	r18
    1ce2:	0f 90       	pop	r0
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	0f 90       	pop	r0
    1ce8:	1f 90       	pop	r1
    1cea:	18 95       	reti

00001cec <__vector_10>:
ISR(TIMER0_COMP_vect)
{
    1cec:	1f 92       	push	r1
    1cee:	0f 92       	push	r0
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	0f 92       	push	r0
    1cf4:	11 24       	eor	r1, r1
    1cf6:	df 93       	push	r29
    1cf8:	cf 93       	push	r28
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62

}
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	0f 90       	pop	r0
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	0f 90       	pop	r0
    1d08:	1f 90       	pop	r1
    1d0a:	18 95       	reti

00001d0c <Port_Init>:
  parameters (in)  :
  parameters (out) : none
  Return Value     : void
******************************************/
void Port_Init(const Port_ConfigType * ConfigPtr)
{
    1d0c:	df 93       	push	r29
    1d0e:	cf 93       	push	r28
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62
    1d14:	2b 97       	sbiw	r28, 0x0b	; 11
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	de bf       	out	0x3e, r29	; 62
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	cd bf       	out	0x3d, r28	; 61
    1d20:	9d 83       	std	Y+5, r25	; 0x05
    1d22:	8c 83       	std	Y+4, r24	; 0x04

	if(ConfigPtr == NULL)
    1d24:	8c 81       	ldd	r24, Y+4	; 0x04
    1d26:	9d 81       	ldd	r25, Y+5	; 0x05
    1d28:	00 97       	sbiw	r24, 0x00	; 0
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <Port_Init+0x22>
    1d2c:	51 c2       	rjmp	.+1186   	; 0x21d0 <Port_Init+0x4c4>
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<PORT_PINS_CONFIG_ARR_SIZE;i++)
    1d2e:	1b 82       	std	Y+3, r1	; 0x03
    1d30:	4b c2       	rjmp	.+1174   	; 0x21c8 <Port_Init+0x4bc>
			{
				Local_pin =(ConfigPtr[i].Port_PinNumber)%10 ;
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	88 2f       	mov	r24, r24
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	9c 01       	movw	r18, r24
    1d3a:	22 0f       	add	r18, r18
    1d3c:	33 1f       	adc	r19, r19
    1d3e:	22 0f       	add	r18, r18
    1d40:	33 1f       	adc	r19, r19
    1d42:	8c 81       	ldd	r24, Y+4	; 0x04
    1d44:	9d 81       	ldd	r25, Y+5	; 0x05
    1d46:	fc 01       	movw	r30, r24
    1d48:	e2 0f       	add	r30, r18
    1d4a:	f3 1f       	adc	r31, r19
    1d4c:	80 81       	ld	r24, Z
    1d4e:	9a e0       	ldi	r25, 0x0A	; 10
    1d50:	69 2f       	mov	r22, r25
    1d52:	0e 94 ed 22 	call	0x45da	; 0x45da <__udivmodqi4>
    1d56:	89 2f       	mov	r24, r25
    1d58:	8a 83       	std	Y+2, r24	; 0x02
				Local_port =(ConfigPtr[i].Port_PinNumber)/10 ;
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	88 2f       	mov	r24, r24
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	9c 01       	movw	r18, r24
    1d62:	22 0f       	add	r18, r18
    1d64:	33 1f       	adc	r19, r19
    1d66:	22 0f       	add	r18, r18
    1d68:	33 1f       	adc	r19, r19
    1d6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d6e:	fc 01       	movw	r30, r24
    1d70:	e2 0f       	add	r30, r18
    1d72:	f3 1f       	adc	r31, r19
    1d74:	80 81       	ld	r24, Z
    1d76:	9a e0       	ldi	r25, 0x0A	; 10
    1d78:	69 2f       	mov	r22, r25
    1d7a:	0e 94 ed 22 	call	0x45da	; 0x45da <__udivmodqi4>
    1d7e:	89 83       	std	Y+1, r24	; 0x01
				// step1 : set direction
				if(ConfigPtr[i].Port_PinDirection == PORT_PINDIR_INPUT || ConfigPtr[i].Port_PinDirection ==PORT_PINDIR_OUTPUT)
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	88 2f       	mov	r24, r24
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	9c 01       	movw	r18, r24
    1d88:	22 0f       	add	r18, r18
    1d8a:	33 1f       	adc	r19, r19
    1d8c:	22 0f       	add	r18, r18
    1d8e:	33 1f       	adc	r19, r19
    1d90:	8c 81       	ldd	r24, Y+4	; 0x04
    1d92:	9d 81       	ldd	r25, Y+5	; 0x05
    1d94:	fc 01       	movw	r30, r24
    1d96:	e2 0f       	add	r30, r18
    1d98:	f3 1f       	adc	r31, r19
    1d9a:	82 81       	ldd	r24, Z+2	; 0x02
    1d9c:	88 23       	and	r24, r24
    1d9e:	89 f0       	breq	.+34     	; 0x1dc2 <Port_Init+0xb6>
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	88 2f       	mov	r24, r24
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	9c 01       	movw	r18, r24
    1da8:	22 0f       	add	r18, r18
    1daa:	33 1f       	adc	r19, r19
    1dac:	22 0f       	add	r18, r18
    1dae:	33 1f       	adc	r19, r19
    1db0:	8c 81       	ldd	r24, Y+4	; 0x04
    1db2:	9d 81       	ldd	r25, Y+5	; 0x05
    1db4:	fc 01       	movw	r30, r24
    1db6:	e2 0f       	add	r30, r18
    1db8:	f3 1f       	adc	r31, r19
    1dba:	82 81       	ldd	r24, Z+2	; 0x02
    1dbc:	81 30       	cpi	r24, 0x01	; 1
    1dbe:	09 f0       	breq	.+2      	; 0x1dc2 <Port_Init+0xb6>
    1dc0:	00 c2       	rjmp	.+1024   	; 0x21c2 <Port_Init+0x4b6>
				{
					switch(Local_port)
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	28 2f       	mov	r18, r24
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	3b 87       	std	Y+11, r19	; 0x0b
    1dca:	2a 87       	std	Y+10, r18	; 0x0a
    1dcc:	6a 85       	ldd	r22, Y+10	; 0x0a
    1dce:	7b 85       	ldd	r23, Y+11	; 0x0b
    1dd0:	62 30       	cpi	r22, 0x02	; 2
    1dd2:	71 05       	cpc	r23, r1
    1dd4:	d1 f1       	breq	.+116    	; 0x1e4a <Port_Init+0x13e>
    1dd6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dd8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dda:	83 30       	cpi	r24, 0x03	; 3
    1ddc:	91 05       	cpc	r25, r1
    1dde:	34 f4       	brge	.+12     	; 0x1dec <Port_Init+0xe0>
    1de0:	2a 85       	ldd	r18, Y+10	; 0x0a
    1de2:	3b 85       	ldd	r19, Y+11	; 0x0b
    1de4:	21 30       	cpi	r18, 0x01	; 1
    1de6:	31 05       	cpc	r19, r1
    1de8:	71 f0       	breq	.+28     	; 0x1e06 <Port_Init+0xfa>
    1dea:	94 c0       	rjmp	.+296    	; 0x1f14 <Port_Init+0x208>
    1dec:	6a 85       	ldd	r22, Y+10	; 0x0a
    1dee:	7b 85       	ldd	r23, Y+11	; 0x0b
    1df0:	63 30       	cpi	r22, 0x03	; 3
    1df2:	71 05       	cpc	r23, r1
    1df4:	09 f4       	brne	.+2      	; 0x1df8 <Port_Init+0xec>
    1df6:	4b c0       	rjmp	.+150    	; 0x1e8e <Port_Init+0x182>
    1df8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dfa:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dfc:	84 30       	cpi	r24, 0x04	; 4
    1dfe:	91 05       	cpc	r25, r1
    1e00:	09 f4       	brne	.+2      	; 0x1e04 <Port_Init+0xf8>
    1e02:	67 c0       	rjmp	.+206    	; 0x1ed2 <Port_Init+0x1c6>
    1e04:	87 c0       	rjmp	.+270    	; 0x1f14 <Port_Init+0x208>
					{
					case PORT_PORTA:DDRA_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1e06:	aa e3       	ldi	r26, 0x3A	; 58
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	ea e3       	ldi	r30, 0x3A	; 58
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	40 81       	ld	r20, Z
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	88 2f       	mov	r24, r24
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	9c 01       	movw	r18, r24
    1e18:	22 0f       	add	r18, r18
    1e1a:	33 1f       	adc	r19, r19
    1e1c:	22 0f       	add	r18, r18
    1e1e:	33 1f       	adc	r19, r19
    1e20:	8c 81       	ldd	r24, Y+4	; 0x04
    1e22:	9d 81       	ldd	r25, Y+5	; 0x05
    1e24:	fc 01       	movw	r30, r24
    1e26:	e2 0f       	add	r30, r18
    1e28:	f3 1f       	adc	r31, r19
    1e2a:	82 81       	ldd	r24, Z+2	; 0x02
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	8a 81       	ldd	r24, Y+2	; 0x02
    1e32:	88 2f       	mov	r24, r24
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	b9 01       	movw	r22, r18
    1e38:	02 c0       	rjmp	.+4      	; 0x1e3e <Port_Init+0x132>
    1e3a:	66 0f       	add	r22, r22
    1e3c:	77 1f       	adc	r23, r23
    1e3e:	8a 95       	dec	r24
    1e40:	e2 f7       	brpl	.-8      	; 0x1e3a <Port_Init+0x12e>
    1e42:	cb 01       	movw	r24, r22
    1e44:	84 2b       	or	r24, r20
    1e46:	8c 93       	st	X, r24
    1e48:	65 c0       	rjmp	.+202    	; 0x1f14 <Port_Init+0x208>
					case PORT_PORTB:DDRB_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1e4a:	a7 e3       	ldi	r26, 0x37	; 55
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	e7 e3       	ldi	r30, 0x37	; 55
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	40 81       	ld	r20, Z
    1e54:	8b 81       	ldd	r24, Y+3	; 0x03
    1e56:	88 2f       	mov	r24, r24
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	9c 01       	movw	r18, r24
    1e5c:	22 0f       	add	r18, r18
    1e5e:	33 1f       	adc	r19, r19
    1e60:	22 0f       	add	r18, r18
    1e62:	33 1f       	adc	r19, r19
    1e64:	8c 81       	ldd	r24, Y+4	; 0x04
    1e66:	9d 81       	ldd	r25, Y+5	; 0x05
    1e68:	fc 01       	movw	r30, r24
    1e6a:	e2 0f       	add	r30, r18
    1e6c:	f3 1f       	adc	r31, r19
    1e6e:	82 81       	ldd	r24, Z+2	; 0x02
    1e70:	28 2f       	mov	r18, r24
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	88 2f       	mov	r24, r24
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	b9 01       	movw	r22, r18
    1e7c:	02 c0       	rjmp	.+4      	; 0x1e82 <Port_Init+0x176>
    1e7e:	66 0f       	add	r22, r22
    1e80:	77 1f       	adc	r23, r23
    1e82:	8a 95       	dec	r24
    1e84:	e2 f7       	brpl	.-8      	; 0x1e7e <Port_Init+0x172>
    1e86:	cb 01       	movw	r24, r22
    1e88:	84 2b       	or	r24, r20
    1e8a:	8c 93       	st	X, r24
    1e8c:	43 c0       	rjmp	.+134    	; 0x1f14 <Port_Init+0x208>
					case PORT_PORTC:DDRC_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1e8e:	a4 e3       	ldi	r26, 0x34	; 52
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	e4 e3       	ldi	r30, 0x34	; 52
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	40 81       	ld	r20, Z
    1e98:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9a:	88 2f       	mov	r24, r24
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	9c 01       	movw	r18, r24
    1ea0:	22 0f       	add	r18, r18
    1ea2:	33 1f       	adc	r19, r19
    1ea4:	22 0f       	add	r18, r18
    1ea6:	33 1f       	adc	r19, r19
    1ea8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eaa:	9d 81       	ldd	r25, Y+5	; 0x05
    1eac:	fc 01       	movw	r30, r24
    1eae:	e2 0f       	add	r30, r18
    1eb0:	f3 1f       	adc	r31, r19
    1eb2:	82 81       	ldd	r24, Z+2	; 0x02
    1eb4:	28 2f       	mov	r18, r24
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	88 2f       	mov	r24, r24
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	b9 01       	movw	r22, r18
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <Port_Init+0x1ba>
    1ec2:	66 0f       	add	r22, r22
    1ec4:	77 1f       	adc	r23, r23
    1ec6:	8a 95       	dec	r24
    1ec8:	e2 f7       	brpl	.-8      	; 0x1ec2 <Port_Init+0x1b6>
    1eca:	cb 01       	movw	r24, r22
    1ecc:	84 2b       	or	r24, r20
    1ece:	8c 93       	st	X, r24
    1ed0:	21 c0       	rjmp	.+66     	; 0x1f14 <Port_Init+0x208>
					case PORT_PORTD:DDRD_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1ed2:	a1 e3       	ldi	r26, 0x31	; 49
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e1 e3       	ldi	r30, 0x31	; 49
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	40 81       	ld	r20, Z
    1edc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ede:	88 2f       	mov	r24, r24
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	9c 01       	movw	r18, r24
    1ee4:	22 0f       	add	r18, r18
    1ee6:	33 1f       	adc	r19, r19
    1ee8:	22 0f       	add	r18, r18
    1eea:	33 1f       	adc	r19, r19
    1eec:	8c 81       	ldd	r24, Y+4	; 0x04
    1eee:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	e2 0f       	add	r30, r18
    1ef4:	f3 1f       	adc	r31, r19
    1ef6:	82 81       	ldd	r24, Z+2	; 0x02
    1ef8:	28 2f       	mov	r18, r24
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	8a 81       	ldd	r24, Y+2	; 0x02
    1efe:	88 2f       	mov	r24, r24
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	b9 01       	movw	r22, r18
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <Port_Init+0x1fe>
    1f06:	66 0f       	add	r22, r22
    1f08:	77 1f       	adc	r23, r23
    1f0a:	8a 95       	dec	r24
    1f0c:	e2 f7       	brpl	.-8      	; 0x1f06 <Port_Init+0x1fa>
    1f0e:	cb 01       	movw	r24, r22
    1f10:	84 2b       	or	r24, r20
    1f12:	8c 93       	st	X, r24

					}
					// step 2 : config initial pin value
					if(ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_LOW || ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_HIGH)
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	88 2f       	mov	r24, r24
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	9c 01       	movw	r18, r24
    1f1c:	22 0f       	add	r18, r18
    1f1e:	33 1f       	adc	r19, r19
    1f20:	22 0f       	add	r18, r18
    1f22:	33 1f       	adc	r19, r19
    1f24:	8c 81       	ldd	r24, Y+4	; 0x04
    1f26:	9d 81       	ldd	r25, Y+5	; 0x05
    1f28:	fc 01       	movw	r30, r24
    1f2a:	e2 0f       	add	r30, r18
    1f2c:	f3 1f       	adc	r31, r19
    1f2e:	81 81       	ldd	r24, Z+1	; 0x01
    1f30:	88 23       	and	r24, r24
    1f32:	89 f0       	breq	.+34     	; 0x1f56 <Port_Init+0x24a>
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	88 2f       	mov	r24, r24
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	9c 01       	movw	r18, r24
    1f3c:	22 0f       	add	r18, r18
    1f3e:	33 1f       	adc	r19, r19
    1f40:	22 0f       	add	r18, r18
    1f42:	33 1f       	adc	r19, r19
    1f44:	8c 81       	ldd	r24, Y+4	; 0x04
    1f46:	9d 81       	ldd	r25, Y+5	; 0x05
    1f48:	fc 01       	movw	r30, r24
    1f4a:	e2 0f       	add	r30, r18
    1f4c:	f3 1f       	adc	r31, r19
    1f4e:	81 81       	ldd	r24, Z+1	; 0x01
    1f50:	81 30       	cpi	r24, 0x01	; 1
    1f52:	09 f0       	breq	.+2      	; 0x1f56 <Port_Init+0x24a>
    1f54:	36 c1       	rjmp	.+620    	; 0x21c2 <Port_Init+0x4b6>
					{
						switch(Local_port)
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	28 2f       	mov	r18, r24
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	39 87       	std	Y+9, r19	; 0x09
    1f5e:	28 87       	std	Y+8, r18	; 0x08
    1f60:	68 85       	ldd	r22, Y+8	; 0x08
    1f62:	79 85       	ldd	r23, Y+9	; 0x09
    1f64:	62 30       	cpi	r22, 0x02	; 2
    1f66:	71 05       	cpc	r23, r1
    1f68:	d1 f1       	breq	.+116    	; 0x1fde <Port_Init+0x2d2>
    1f6a:	88 85       	ldd	r24, Y+8	; 0x08
    1f6c:	99 85       	ldd	r25, Y+9	; 0x09
    1f6e:	83 30       	cpi	r24, 0x03	; 3
    1f70:	91 05       	cpc	r25, r1
    1f72:	34 f4       	brge	.+12     	; 0x1f80 <Port_Init+0x274>
    1f74:	28 85       	ldd	r18, Y+8	; 0x08
    1f76:	39 85       	ldd	r19, Y+9	; 0x09
    1f78:	21 30       	cpi	r18, 0x01	; 1
    1f7a:	31 05       	cpc	r19, r1
    1f7c:	71 f0       	breq	.+28     	; 0x1f9a <Port_Init+0x28e>
    1f7e:	94 c0       	rjmp	.+296    	; 0x20a8 <Port_Init+0x39c>
    1f80:	68 85       	ldd	r22, Y+8	; 0x08
    1f82:	79 85       	ldd	r23, Y+9	; 0x09
    1f84:	63 30       	cpi	r22, 0x03	; 3
    1f86:	71 05       	cpc	r23, r1
    1f88:	09 f4       	brne	.+2      	; 0x1f8c <Port_Init+0x280>
    1f8a:	4b c0       	rjmp	.+150    	; 0x2022 <Port_Init+0x316>
    1f8c:	88 85       	ldd	r24, Y+8	; 0x08
    1f8e:	99 85       	ldd	r25, Y+9	; 0x09
    1f90:	84 30       	cpi	r24, 0x04	; 4
    1f92:	91 05       	cpc	r25, r1
    1f94:	09 f4       	brne	.+2      	; 0x1f98 <Port_Init+0x28c>
    1f96:	67 c0       	rjmp	.+206    	; 0x2066 <Port_Init+0x35a>
    1f98:	87 c0       	rjmp	.+270    	; 0x20a8 <Port_Init+0x39c>
						{
						case PORT_PORTA:  PORTA_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    1f9a:	ab e3       	ldi	r26, 0x3B	; 59
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	eb e3       	ldi	r30, 0x3B	; 59
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	40 81       	ld	r20, Z
    1fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa6:	88 2f       	mov	r24, r24
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	9c 01       	movw	r18, r24
    1fac:	22 0f       	add	r18, r18
    1fae:	33 1f       	adc	r19, r19
    1fb0:	22 0f       	add	r18, r18
    1fb2:	33 1f       	adc	r19, r19
    1fb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb8:	fc 01       	movw	r30, r24
    1fba:	e2 0f       	add	r30, r18
    1fbc:	f3 1f       	adc	r31, r19
    1fbe:	81 81       	ldd	r24, Z+1	; 0x01
    1fc0:	28 2f       	mov	r18, r24
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc6:	88 2f       	mov	r24, r24
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	b9 01       	movw	r22, r18
    1fcc:	02 c0       	rjmp	.+4      	; 0x1fd2 <Port_Init+0x2c6>
    1fce:	66 0f       	add	r22, r22
    1fd0:	77 1f       	adc	r23, r23
    1fd2:	8a 95       	dec	r24
    1fd4:	e2 f7       	brpl	.-8      	; 0x1fce <Port_Init+0x2c2>
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	84 2b       	or	r24, r20
    1fda:	8c 93       	st	X, r24
    1fdc:	65 c0       	rjmp	.+202    	; 0x20a8 <Port_Init+0x39c>
						case PORT_PORTB:  PORTB_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    1fde:	a8 e3       	ldi	r26, 0x38	; 56
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	e8 e3       	ldi	r30, 0x38	; 56
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	40 81       	ld	r20, Z
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	88 2f       	mov	r24, r24
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	9c 01       	movw	r18, r24
    1ff0:	22 0f       	add	r18, r18
    1ff2:	33 1f       	adc	r19, r19
    1ff4:	22 0f       	add	r18, r18
    1ff6:	33 1f       	adc	r19, r19
    1ff8:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffa:	9d 81       	ldd	r25, Y+5	; 0x05
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	e2 0f       	add	r30, r18
    2000:	f3 1f       	adc	r31, r19
    2002:	81 81       	ldd	r24, Z+1	; 0x01
    2004:	28 2f       	mov	r18, r24
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	8a 81       	ldd	r24, Y+2	; 0x02
    200a:	88 2f       	mov	r24, r24
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	b9 01       	movw	r22, r18
    2010:	02 c0       	rjmp	.+4      	; 0x2016 <Port_Init+0x30a>
    2012:	66 0f       	add	r22, r22
    2014:	77 1f       	adc	r23, r23
    2016:	8a 95       	dec	r24
    2018:	e2 f7       	brpl	.-8      	; 0x2012 <Port_Init+0x306>
    201a:	cb 01       	movw	r24, r22
    201c:	84 2b       	or	r24, r20
    201e:	8c 93       	st	X, r24
    2020:	43 c0       	rjmp	.+134    	; 0x20a8 <Port_Init+0x39c>
						case PORT_PORTC:  PORTC_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    2022:	a5 e3       	ldi	r26, 0x35	; 53
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	e5 e3       	ldi	r30, 0x35	; 53
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	40 81       	ld	r20, Z
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	88 2f       	mov	r24, r24
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	9c 01       	movw	r18, r24
    2034:	22 0f       	add	r18, r18
    2036:	33 1f       	adc	r19, r19
    2038:	22 0f       	add	r18, r18
    203a:	33 1f       	adc	r19, r19
    203c:	8c 81       	ldd	r24, Y+4	; 0x04
    203e:	9d 81       	ldd	r25, Y+5	; 0x05
    2040:	fc 01       	movw	r30, r24
    2042:	e2 0f       	add	r30, r18
    2044:	f3 1f       	adc	r31, r19
    2046:	81 81       	ldd	r24, Z+1	; 0x01
    2048:	28 2f       	mov	r18, r24
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	8a 81       	ldd	r24, Y+2	; 0x02
    204e:	88 2f       	mov	r24, r24
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	b9 01       	movw	r22, r18
    2054:	02 c0       	rjmp	.+4      	; 0x205a <Port_Init+0x34e>
    2056:	66 0f       	add	r22, r22
    2058:	77 1f       	adc	r23, r23
    205a:	8a 95       	dec	r24
    205c:	e2 f7       	brpl	.-8      	; 0x2056 <Port_Init+0x34a>
    205e:	cb 01       	movw	r24, r22
    2060:	84 2b       	or	r24, r20
    2062:	8c 93       	st	X, r24
    2064:	21 c0       	rjmp	.+66     	; 0x20a8 <Port_Init+0x39c>
						case PORT_PORTD:  PORTD_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    2066:	a2 e3       	ldi	r26, 0x32	; 50
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	e2 e3       	ldi	r30, 0x32	; 50
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	40 81       	ld	r20, Z
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	88 2f       	mov	r24, r24
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	9c 01       	movw	r18, r24
    2078:	22 0f       	add	r18, r18
    207a:	33 1f       	adc	r19, r19
    207c:	22 0f       	add	r18, r18
    207e:	33 1f       	adc	r19, r19
    2080:	8c 81       	ldd	r24, Y+4	; 0x04
    2082:	9d 81       	ldd	r25, Y+5	; 0x05
    2084:	fc 01       	movw	r30, r24
    2086:	e2 0f       	add	r30, r18
    2088:	f3 1f       	adc	r31, r19
    208a:	81 81       	ldd	r24, Z+1	; 0x01
    208c:	28 2f       	mov	r18, r24
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	8a 81       	ldd	r24, Y+2	; 0x02
    2092:	88 2f       	mov	r24, r24
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	b9 01       	movw	r22, r18
    2098:	02 c0       	rjmp	.+4      	; 0x209e <Port_Init+0x392>
    209a:	66 0f       	add	r22, r22
    209c:	77 1f       	adc	r23, r23
    209e:	8a 95       	dec	r24
    20a0:	e2 f7       	brpl	.-8      	; 0x209a <Port_Init+0x38e>
    20a2:	cb 01       	movw	r24, r22
    20a4:	84 2b       	or	r24, r20
    20a6:	8c 93       	st	X, r24

						}
						// step 3 : config Pin Internal Attach
						if(ConfigPtr[i].Port_PinDirection==PORT_PINDIR_OUTPUT && ConfigPtr[i].Port_PinInternalAttach == PORT_PIN_IN_ATTATCH_PULLUP)
    20a8:	8b 81       	ldd	r24, Y+3	; 0x03
    20aa:	88 2f       	mov	r24, r24
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	9c 01       	movw	r18, r24
    20b0:	22 0f       	add	r18, r18
    20b2:	33 1f       	adc	r19, r19
    20b4:	22 0f       	add	r18, r18
    20b6:	33 1f       	adc	r19, r19
    20b8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ba:	9d 81       	ldd	r25, Y+5	; 0x05
    20bc:	fc 01       	movw	r30, r24
    20be:	e2 0f       	add	r30, r18
    20c0:	f3 1f       	adc	r31, r19
    20c2:	82 81       	ldd	r24, Z+2	; 0x02
    20c4:	81 30       	cpi	r24, 0x01	; 1
    20c6:	09 f0       	breq	.+2      	; 0x20ca <Port_Init+0x3be>
    20c8:	7c c0       	rjmp	.+248    	; 0x21c2 <Port_Init+0x4b6>
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	88 2f       	mov	r24, r24
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	9c 01       	movw	r18, r24
    20d2:	22 0f       	add	r18, r18
    20d4:	33 1f       	adc	r19, r19
    20d6:	22 0f       	add	r18, r18
    20d8:	33 1f       	adc	r19, r19
    20da:	8c 81       	ldd	r24, Y+4	; 0x04
    20dc:	9d 81       	ldd	r25, Y+5	; 0x05
    20de:	fc 01       	movw	r30, r24
    20e0:	e2 0f       	add	r30, r18
    20e2:	f3 1f       	adc	r31, r19
    20e4:	83 81       	ldd	r24, Z+3	; 0x03
    20e6:	88 23       	and	r24, r24
    20e8:	09 f0       	breq	.+2      	; 0x20ec <Port_Init+0x3e0>
    20ea:	6b c0       	rjmp	.+214    	; 0x21c2 <Port_Init+0x4b6>
						{
							switch(Local_port)
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	28 2f       	mov	r18, r24
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	3f 83       	std	Y+7, r19	; 0x07
    20f4:	2e 83       	std	Y+6, r18	; 0x06
    20f6:	6e 81       	ldd	r22, Y+6	; 0x06
    20f8:	7f 81       	ldd	r23, Y+7	; 0x07
    20fa:	62 30       	cpi	r22, 0x02	; 2
    20fc:	71 05       	cpc	r23, r1
    20fe:	49 f1       	breq	.+82     	; 0x2152 <Port_Init+0x446>
    2100:	8e 81       	ldd	r24, Y+6	; 0x06
    2102:	9f 81       	ldd	r25, Y+7	; 0x07
    2104:	83 30       	cpi	r24, 0x03	; 3
    2106:	91 05       	cpc	r25, r1
    2108:	34 f4       	brge	.+12     	; 0x2116 <Port_Init+0x40a>
    210a:	2e 81       	ldd	r18, Y+6	; 0x06
    210c:	3f 81       	ldd	r19, Y+7	; 0x07
    210e:	21 30       	cpi	r18, 0x01	; 1
    2110:	31 05       	cpc	r19, r1
    2112:	61 f0       	breq	.+24     	; 0x212c <Port_Init+0x420>
    2114:	56 c0       	rjmp	.+172    	; 0x21c2 <Port_Init+0x4b6>
    2116:	6e 81       	ldd	r22, Y+6	; 0x06
    2118:	7f 81       	ldd	r23, Y+7	; 0x07
    211a:	63 30       	cpi	r22, 0x03	; 3
    211c:	71 05       	cpc	r23, r1
    211e:	61 f1       	breq	.+88     	; 0x2178 <Port_Init+0x46c>
    2120:	8e 81       	ldd	r24, Y+6	; 0x06
    2122:	9f 81       	ldd	r25, Y+7	; 0x07
    2124:	84 30       	cpi	r24, 0x04	; 4
    2126:	91 05       	cpc	r25, r1
    2128:	d1 f1       	breq	.+116    	; 0x219e <Port_Init+0x492>
    212a:	4b c0       	rjmp	.+150    	; 0x21c2 <Port_Init+0x4b6>
							{
							case PORT_PORTA:PORTA_REG |= (u8)(1<< Local_pin);break;
    212c:	ab e3       	ldi	r26, 0x3B	; 59
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	eb e3       	ldi	r30, 0x3B	; 59
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	40 81       	ld	r20, Z
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	28 2f       	mov	r18, r24
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	02 2e       	mov	r0, r18
    2142:	02 c0       	rjmp	.+4      	; 0x2148 <Port_Init+0x43c>
    2144:	88 0f       	add	r24, r24
    2146:	99 1f       	adc	r25, r25
    2148:	0a 94       	dec	r0
    214a:	e2 f7       	brpl	.-8      	; 0x2144 <Port_Init+0x438>
    214c:	84 2b       	or	r24, r20
    214e:	8c 93       	st	X, r24
    2150:	38 c0       	rjmp	.+112    	; 0x21c2 <Port_Init+0x4b6>
							case PORT_PORTB:PORTB_REG |= (u8)(1<< Local_pin);break;
    2152:	a8 e3       	ldi	r26, 0x38	; 56
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	e8 e3       	ldi	r30, 0x38	; 56
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	40 81       	ld	r20, Z
    215c:	8a 81       	ldd	r24, Y+2	; 0x02
    215e:	28 2f       	mov	r18, r24
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	02 2e       	mov	r0, r18
    2168:	02 c0       	rjmp	.+4      	; 0x216e <Port_Init+0x462>
    216a:	88 0f       	add	r24, r24
    216c:	99 1f       	adc	r25, r25
    216e:	0a 94       	dec	r0
    2170:	e2 f7       	brpl	.-8      	; 0x216a <Port_Init+0x45e>
    2172:	84 2b       	or	r24, r20
    2174:	8c 93       	st	X, r24
    2176:	25 c0       	rjmp	.+74     	; 0x21c2 <Port_Init+0x4b6>
							case PORT_PORTC:PORTC_REG |= (u8)(1<< Local_pin);break;
    2178:	a5 e3       	ldi	r26, 0x35	; 53
    217a:	b0 e0       	ldi	r27, 0x00	; 0
    217c:	e5 e3       	ldi	r30, 0x35	; 53
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	40 81       	ld	r20, Z
    2182:	8a 81       	ldd	r24, Y+2	; 0x02
    2184:	28 2f       	mov	r18, r24
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	02 2e       	mov	r0, r18
    218e:	02 c0       	rjmp	.+4      	; 0x2194 <Port_Init+0x488>
    2190:	88 0f       	add	r24, r24
    2192:	99 1f       	adc	r25, r25
    2194:	0a 94       	dec	r0
    2196:	e2 f7       	brpl	.-8      	; 0x2190 <Port_Init+0x484>
    2198:	84 2b       	or	r24, r20
    219a:	8c 93       	st	X, r24
    219c:	12 c0       	rjmp	.+36     	; 0x21c2 <Port_Init+0x4b6>
							case PORT_PORTD:PORTD_REG |= (u8)(1<< Local_pin);break;
    219e:	a2 e3       	ldi	r26, 0x32	; 50
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	e2 e3       	ldi	r30, 0x32	; 50
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	40 81       	ld	r20, Z
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	28 2f       	mov	r18, r24
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	02 2e       	mov	r0, r18
    21b4:	02 c0       	rjmp	.+4      	; 0x21ba <Port_Init+0x4ae>
    21b6:	88 0f       	add	r24, r24
    21b8:	99 1f       	adc	r25, r25
    21ba:	0a 94       	dec	r0
    21bc:	e2 f7       	brpl	.-8      	; 0x21b6 <Port_Init+0x4aa>
    21be:	84 2b       	or	r24, r20
    21c0:	8c 93       	st	X, r24
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<PORT_PINS_CONFIG_ARR_SIZE;i++)
    21c2:	8b 81       	ldd	r24, Y+3	; 0x03
    21c4:	8f 5f       	subi	r24, 0xFF	; 255
    21c6:	8b 83       	std	Y+3, r24	; 0x03
    21c8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ca:	80 32       	cpi	r24, 0x20	; 32
    21cc:	08 f4       	brcc	.+2      	; 0x21d0 <Port_Init+0x4c4>
    21ce:	b1 cd       	rjmp	.-1182   	; 0x1d32 <Port_Init+0x26>
					//report error
				}

		    }//for
		}//else
}
    21d0:	2b 96       	adiw	r28, 0x0b	; 11
    21d2:	0f b6       	in	r0, 0x3f	; 63
    21d4:	f8 94       	cli
    21d6:	de bf       	out	0x3e, r29	; 62
    21d8:	0f be       	out	0x3f, r0	; 63
    21da:	cd bf       	out	0x3d, r28	; 61
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <GIE_voidEnable>:
#include"STD_TYPES.h"
#include"BIT_MATH.h"
#include"../Mcu_HW.h"

void GIE_voidEnable(void)
{
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
	//Enable GIE for External interrupt
	SET_BIT(SREG,SREG_I);
    21ea:	af e5       	ldi	r26, 0x5F	; 95
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	ef e5       	ldi	r30, 0x5F	; 95
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	80 68       	ori	r24, 0x80	; 128
    21f6:	8c 93       	st	X, r24
}
    21f8:	cf 91       	pop	r28
    21fa:	df 91       	pop	r29
    21fc:	08 95       	ret

000021fe <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    21fe:	df 93       	push	r29
    2200:	cf 93       	push	r28
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
	//Disable GIE for external Interrupt
	CLR_BIT(SREG,SREG_I);
    2206:	af e5       	ldi	r26, 0x5F	; 95
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	ef e5       	ldi	r30, 0x5F	; 95
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	8f 77       	andi	r24, 0x7F	; 127
    2212:	8c 93       	st	X, r24
}
    2214:	cf 91       	pop	r28
    2216:	df 91       	pop	r29
    2218:	08 95       	ret

0000221a <Enable_Int>:
 */
static void (*EXTI_ARRCALLBACK2FUNC[3])(void) ={NULL_POINTER,NULL_POINTER,NULL_POINTER};


void Enable_Int(const EXT_I * ConfigArr)
{
    221a:	df 93       	push	r29
    221c:	cf 93       	push	r28
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
    2222:	2b 97       	sbiw	r28, 0x0b	; 11
    2224:	0f b6       	in	r0, 0x3f	; 63
    2226:	f8 94       	cli
    2228:	de bf       	out	0x3e, r29	; 62
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	cd bf       	out	0x3d, r28	; 61
    222e:	9b 83       	std	Y+3, r25	; 0x03
    2230:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter;
	for(Local_u8Counter=0;Local_u8Counter<3;Local_u8Counter++)
    2232:	19 82       	std	Y+1, r1	; 0x01
    2234:	0e c1       	rjmp	.+540    	; 0x2452 <Enable_Int+0x238>
	{
		switch(ConfigArr[Local_u8Counter].Interrupt_ID)
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	88 2f       	mov	r24, r24
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	9c 01       	movw	r18, r24
    223e:	22 0f       	add	r18, r18
    2240:	33 1f       	adc	r19, r19
    2242:	8a 81       	ldd	r24, Y+2	; 0x02
    2244:	9b 81       	ldd	r25, Y+3	; 0x03
    2246:	fc 01       	movw	r30, r24
    2248:	e2 0f       	add	r30, r18
    224a:	f3 1f       	adc	r31, r19
    224c:	80 81       	ld	r24, Z
    224e:	28 2f       	mov	r18, r24
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	3b 87       	std	Y+11, r19	; 0x0b
    2254:	2a 87       	std	Y+10, r18	; 0x0a
    2256:	8a 85       	ldd	r24, Y+10	; 0x0a
    2258:	9b 85       	ldd	r25, Y+11	; 0x0b
    225a:	81 30       	cpi	r24, 0x01	; 1
    225c:	91 05       	cpc	r25, r1
    225e:	09 f4       	brne	.+2      	; 0x2262 <Enable_Int+0x48>
    2260:	4a c0       	rjmp	.+148    	; 0x22f6 <Enable_Int+0xdc>
    2262:	2a 85       	ldd	r18, Y+10	; 0x0a
    2264:	3b 85       	ldd	r19, Y+11	; 0x0b
    2266:	22 30       	cpi	r18, 0x02	; 2
    2268:	31 05       	cpc	r19, r1
    226a:	09 f4       	brne	.+2      	; 0x226e <Enable_Int+0x54>
    226c:	b1 c0       	rjmp	.+354    	; 0x23d0 <Enable_Int+0x1b6>
    226e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2270:	9b 85       	ldd	r25, Y+11	; 0x0b
    2272:	00 97       	sbiw	r24, 0x00	; 0
    2274:	09 f0       	breq	.+2      	; 0x2278 <Enable_Int+0x5e>
    2276:	ea c0       	rjmp	.+468    	; 0x244c <Enable_Int+0x232>
		{
		case EXTI0:
			switch(ConfigArr[Local_u8Counter].Trigger_value)
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	88 2f       	mov	r24, r24
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	9c 01       	movw	r18, r24
    2280:	22 0f       	add	r18, r18
    2282:	33 1f       	adc	r19, r19
    2284:	8a 81       	ldd	r24, Y+2	; 0x02
    2286:	9b 81       	ldd	r25, Y+3	; 0x03
    2288:	fc 01       	movw	r30, r24
    228a:	e2 0f       	add	r30, r18
    228c:	f3 1f       	adc	r31, r19
    228e:	81 81       	ldd	r24, Z+1	; 0x01
    2290:	28 2f       	mov	r18, r24
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	39 87       	std	Y+9, r19	; 0x09
    2296:	28 87       	std	Y+8, r18	; 0x08
    2298:	88 85       	ldd	r24, Y+8	; 0x08
    229a:	99 85       	ldd	r25, Y+9	; 0x09
    229c:	00 97       	sbiw	r24, 0x00	; 0
    229e:	31 f0       	breq	.+12     	; 0x22ac <Enable_Int+0x92>
    22a0:	28 85       	ldd	r18, Y+8	; 0x08
    22a2:	39 85       	ldd	r19, Y+9	; 0x09
    22a4:	21 30       	cpi	r18, 0x01	; 1
    22a6:	31 05       	cpc	r19, r1
    22a8:	81 f0       	breq	.+32     	; 0x22ca <Enable_Int+0xb0>
    22aa:	1d c0       	rjmp	.+58     	; 0x22e6 <Enable_Int+0xcc>
			{
			case Low_level:
				/*set sense control for INT0 To Low level*/
				CLR_BIT(MCUCR,MCUCR_ISC01);
    22ac:	a5 e5       	ldi	r26, 0x55	; 85
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	e5 e5       	ldi	r30, 0x55	; 85
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	8d 7f       	andi	r24, 0xFD	; 253
    22b8:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC00);
    22ba:	a5 e5       	ldi	r26, 0x55	; 85
    22bc:	b0 e0       	ldi	r27, 0x00	; 0
    22be:	e5 e5       	ldi	r30, 0x55	; 85
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
    22c4:	8e 7f       	andi	r24, 0xFE	; 254
    22c6:	8c 93       	st	X, r24
    22c8:	0e c0       	rjmp	.+28     	; 0x22e6 <Enable_Int+0xcc>
				break;
			case On_change:
				/*set sense control for INT0 To On change*/
				CLR_BIT(MCUCR,MCUCR_ISC01);
    22ca:	a5 e5       	ldi	r26, 0x55	; 85
    22cc:	b0 e0       	ldi	r27, 0x00	; 0
    22ce:	e5 e5       	ldi	r30, 0x55	; 85
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	80 81       	ld	r24, Z
    22d4:	8d 7f       	andi	r24, 0xFD	; 253
    22d6:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC00);
    22d8:	a5 e5       	ldi	r26, 0x55	; 85
    22da:	b0 e0       	ldi	r27, 0x00	; 0
    22dc:	e5 e5       	ldi	r30, 0x55	; 85
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	81 60       	ori	r24, 0x01	; 1
    22e4:	8c 93       	st	X, r24
				break;
			default:
				break;
			}
			/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER ENABLE BIT6*/
			SET_BIT(GICR,GICR_INT0);
    22e6:	ab e5       	ldi	r26, 0x5B	; 91
    22e8:	b0 e0       	ldi	r27, 0x00	; 0
    22ea:	eb e5       	ldi	r30, 0x5B	; 91
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	80 81       	ld	r24, Z
    22f0:	80 64       	ori	r24, 0x40	; 64
    22f2:	8c 93       	st	X, r24
    22f4:	ab c0       	rjmp	.+342    	; 0x244c <Enable_Int+0x232>
			break;
			case EXTI1:
				switch(ConfigArr[Local_u8Counter].Trigger_value)
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	88 2f       	mov	r24, r24
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	9c 01       	movw	r18, r24
    22fe:	22 0f       	add	r18, r18
    2300:	33 1f       	adc	r19, r19
    2302:	8a 81       	ldd	r24, Y+2	; 0x02
    2304:	9b 81       	ldd	r25, Y+3	; 0x03
    2306:	fc 01       	movw	r30, r24
    2308:	e2 0f       	add	r30, r18
    230a:	f3 1f       	adc	r31, r19
    230c:	81 81       	ldd	r24, Z+1	; 0x01
    230e:	28 2f       	mov	r18, r24
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	3f 83       	std	Y+7, r19	; 0x07
    2314:	2e 83       	std	Y+6, r18	; 0x06
    2316:	8e 81       	ldd	r24, Y+6	; 0x06
    2318:	9f 81       	ldd	r25, Y+7	; 0x07
    231a:	81 30       	cpi	r24, 0x01	; 1
    231c:	91 05       	cpc	r25, r1
    231e:	21 f1       	breq	.+72     	; 0x2368 <Enable_Int+0x14e>
    2320:	2e 81       	ldd	r18, Y+6	; 0x06
    2322:	3f 81       	ldd	r19, Y+7	; 0x07
    2324:	22 30       	cpi	r18, 0x02	; 2
    2326:	31 05       	cpc	r19, r1
    2328:	2c f4       	brge	.+10     	; 0x2334 <Enable_Int+0x11a>
    232a:	8e 81       	ldd	r24, Y+6	; 0x06
    232c:	9f 81       	ldd	r25, Y+7	; 0x07
    232e:	00 97       	sbiw	r24, 0x00	; 0
    2330:	61 f0       	breq	.+24     	; 0x234a <Enable_Int+0x130>
    2332:	46 c0       	rjmp	.+140    	; 0x23c0 <Enable_Int+0x1a6>
    2334:	2e 81       	ldd	r18, Y+6	; 0x06
    2336:	3f 81       	ldd	r19, Y+7	; 0x07
    2338:	22 30       	cpi	r18, 0x02	; 2
    233a:	31 05       	cpc	r19, r1
    233c:	21 f1       	breq	.+72     	; 0x2386 <Enable_Int+0x16c>
    233e:	8e 81       	ldd	r24, Y+6	; 0x06
    2340:	9f 81       	ldd	r25, Y+7	; 0x07
    2342:	83 30       	cpi	r24, 0x03	; 3
    2344:	91 05       	cpc	r25, r1
    2346:	71 f1       	breq	.+92     	; 0x23a4 <Enable_Int+0x18a>
    2348:	3b c0       	rjmp	.+118    	; 0x23c0 <Enable_Int+0x1a6>
				{
				case Low_level:
					/*set sense control for INT0 To falling edge*/
					SET_BIT(MCUCR,MCUCR_ISC01);
    234a:	a5 e5       	ldi	r26, 0x55	; 85
    234c:	b0 e0       	ldi	r27, 0x00	; 0
    234e:	e5 e5       	ldi	r30, 0x55	; 85
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	80 81       	ld	r24, Z
    2354:	82 60       	ori	r24, 0x02	; 2
    2356:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,MCUCR_ISC00);
    2358:	a5 e5       	ldi	r26, 0x55	; 85
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	e5 e5       	ldi	r30, 0x55	; 85
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	8e 7f       	andi	r24, 0xFE	; 254
    2364:	8c 93       	st	X, r24
    2366:	2c c0       	rjmp	.+88     	; 0x23c0 <Enable_Int+0x1a6>
					break;
				case On_change:
					/*set sense control for INT0 To On change*/
					CLR_BIT(MCUCR,MCUCR_ISC01);
    2368:	a5 e5       	ldi	r26, 0x55	; 85
    236a:	b0 e0       	ldi	r27, 0x00	; 0
    236c:	e5 e5       	ldi	r30, 0x55	; 85
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	80 81       	ld	r24, Z
    2372:	8d 7f       	andi	r24, 0xFD	; 253
    2374:	8c 93       	st	X, r24
					SET_BIT(MCUCR,MCUCR_ISC00);
    2376:	a5 e5       	ldi	r26, 0x55	; 85
    2378:	b0 e0       	ldi	r27, 0x00	; 0
    237a:	e5 e5       	ldi	r30, 0x55	; 85
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	81 60       	ori	r24, 0x01	; 1
    2382:	8c 93       	st	X, r24
    2384:	1d c0       	rjmp	.+58     	; 0x23c0 <Enable_Int+0x1a6>
					break;
				case Falling_edge:
					/*set sense control for INT0 To falling edge*/
					SET_BIT(MCUCR,MCUCR_ISC01);
    2386:	a5 e5       	ldi	r26, 0x55	; 85
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	e5 e5       	ldi	r30, 0x55	; 85
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	82 60       	ori	r24, 0x02	; 2
    2392:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,MCUCR_ISC00);
    2394:	a5 e5       	ldi	r26, 0x55	; 85
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	e5 e5       	ldi	r30, 0x55	; 85
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
    239e:	8e 7f       	andi	r24, 0xFE	; 254
    23a0:	8c 93       	st	X, r24
    23a2:	0e c0       	rjmp	.+28     	; 0x23c0 <Enable_Int+0x1a6>
					break;
				case Rising_edge:
					/*set sense control for INT0 To Rising edge*/
					SET_BIT(MCUCR,MCUCR_ISC01);
    23a4:	a5 e5       	ldi	r26, 0x55	; 85
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	e5 e5       	ldi	r30, 0x55	; 85
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
    23ae:	82 60       	ori	r24, 0x02	; 2
    23b0:	8c 93       	st	X, r24
					SET_BIT(MCUCR,MCUCR_ISC00);
    23b2:	a5 e5       	ldi	r26, 0x55	; 85
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	e5 e5       	ldi	r30, 0x55	; 85
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	81 60       	ori	r24, 0x01	; 1
    23be:	8c 93       	st	X, r24
					break;
				default:
					break;
				}
				/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER ENABLE BIT7*/
				SET_BIT(GICR,GICR_INT1);
    23c0:	ab e5       	ldi	r26, 0x5B	; 91
    23c2:	b0 e0       	ldi	r27, 0x00	; 0
    23c4:	eb e5       	ldi	r30, 0x5B	; 91
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	80 81       	ld	r24, Z
    23ca:	80 68       	ori	r24, 0x80	; 128
    23cc:	8c 93       	st	X, r24
    23ce:	3e c0       	rjmp	.+124    	; 0x244c <Enable_Int+0x232>
				break;
				case EXTI2:
					switch(ConfigArr[Local_u8Counter].Trigger_value)
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	88 2f       	mov	r24, r24
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	9c 01       	movw	r18, r24
    23d8:	22 0f       	add	r18, r18
    23da:	33 1f       	adc	r19, r19
    23dc:	8a 81       	ldd	r24, Y+2	; 0x02
    23de:	9b 81       	ldd	r25, Y+3	; 0x03
    23e0:	fc 01       	movw	r30, r24
    23e2:	e2 0f       	add	r30, r18
    23e4:	f3 1f       	adc	r31, r19
    23e6:	81 81       	ldd	r24, Z+1	; 0x01
    23e8:	28 2f       	mov	r18, r24
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	3d 83       	std	Y+5, r19	; 0x05
    23ee:	2c 83       	std	Y+4, r18	; 0x04
    23f0:	8c 81       	ldd	r24, Y+4	; 0x04
    23f2:	9d 81       	ldd	r25, Y+5	; 0x05
    23f4:	00 97       	sbiw	r24, 0x00	; 0
    23f6:	31 f0       	breq	.+12     	; 0x2404 <Enable_Int+0x1ea>
    23f8:	2c 81       	ldd	r18, Y+4	; 0x04
    23fa:	3d 81       	ldd	r19, Y+5	; 0x05
    23fc:	21 30       	cpi	r18, 0x01	; 1
    23fe:	31 05       	cpc	r19, r1
    2400:	81 f0       	breq	.+32     	; 0x2422 <Enable_Int+0x208>
    2402:	1d c0       	rjmp	.+58     	; 0x243e <Enable_Int+0x224>
					{
					case Low_level:
						/*set sense control for INT0 To falling edge*/
						SET_BIT(MCUCR,MCUCR_ISC01);
    2404:	a5 e5       	ldi	r26, 0x55	; 85
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	e5 e5       	ldi	r30, 0x55	; 85
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	82 60       	ori	r24, 0x02	; 2
    2410:	8c 93       	st	X, r24
						CLR_BIT(MCUCR,MCUCR_ISC00);
    2412:	a5 e5       	ldi	r26, 0x55	; 85
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	e5 e5       	ldi	r30, 0x55	; 85
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	8e 7f       	andi	r24, 0xFE	; 254
    241e:	8c 93       	st	X, r24
    2420:	0e c0       	rjmp	.+28     	; 0x243e <Enable_Int+0x224>
						break;
					case On_change:
						/*set sense control for INT0 To On change*/
						CLR_BIT(MCUCR,MCUCR_ISC01);
    2422:	a5 e5       	ldi	r26, 0x55	; 85
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	e5 e5       	ldi	r30, 0x55	; 85
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	8d 7f       	andi	r24, 0xFD	; 253
    242e:	8c 93       	st	X, r24
						SET_BIT(MCUCR,MCUCR_ISC00);
    2430:	a5 e5       	ldi	r26, 0x55	; 85
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	e5 e5       	ldi	r30, 0x55	; 85
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	81 60       	ori	r24, 0x01	; 1
    243c:	8c 93       	st	X, r24
						break;
					default:
						break;
					}
					/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER ENABLE BIT5*/
					SET_BIT(GICR,GICR_INT2);
    243e:	ab e5       	ldi	r26, 0x5B	; 91
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	eb e5       	ldi	r30, 0x5B	; 91
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
    2448:	80 62       	ori	r24, 0x20	; 32
    244a:	8c 93       	st	X, r24


void Enable_Int(const EXT_I * ConfigArr)
{
	u8 Local_u8Counter;
	for(Local_u8Counter=0;Local_u8Counter<3;Local_u8Counter++)
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	8f 5f       	subi	r24, 0xFF	; 255
    2450:	89 83       	std	Y+1, r24	; 0x01
    2452:	89 81       	ldd	r24, Y+1	; 0x01
    2454:	83 30       	cpi	r24, 0x03	; 3
    2456:	08 f4       	brcc	.+2      	; 0x245a <Enable_Int+0x240>
    2458:	ee ce       	rjmp	.-548    	; 0x2236 <Enable_Int+0x1c>
					SET_BIT(GICR,GICR_INT2);
					break;
		}
	}

}
    245a:	2b 96       	adiw	r28, 0x0b	; 11
    245c:	0f b6       	in	r0, 0x3f	; 63
    245e:	f8 94       	cli
    2460:	de bf       	out	0x3e, r29	; 62
    2462:	0f be       	out	0x3f, r0	; 63
    2464:	cd bf       	out	0x3d, r28	; 61
    2466:	cf 91       	pop	r28
    2468:	df 91       	pop	r29
    246a:	08 95       	ret

0000246c <Disable_Int>:

void Disable_Int(const EXT_I * ConfigArr)
{
    246c:	df 93       	push	r29
    246e:	cf 93       	push	r28
    2470:	00 d0       	rcall	.+0      	; 0x2472 <Disable_Int+0x6>
    2472:	00 d0       	rcall	.+0      	; 0x2474 <Disable_Int+0x8>
    2474:	cd b7       	in	r28, 0x3d	; 61
    2476:	de b7       	in	r29, 0x3e	; 62
    2478:	9a 83       	std	Y+2, r25	; 0x02
    247a:	89 83       	std	Y+1, r24	; 0x01
	switch(ConfigArr->Interrupt_ID)
    247c:	e9 81       	ldd	r30, Y+1	; 0x01
    247e:	fa 81       	ldd	r31, Y+2	; 0x02
    2480:	80 81       	ld	r24, Z
    2482:	28 2f       	mov	r18, r24
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	3c 83       	std	Y+4, r19	; 0x04
    2488:	2b 83       	std	Y+3, r18	; 0x03
    248a:	8b 81       	ldd	r24, Y+3	; 0x03
    248c:	9c 81       	ldd	r25, Y+4	; 0x04
    248e:	81 30       	cpi	r24, 0x01	; 1
    2490:	91 05       	cpc	r25, r1
    2492:	89 f0       	breq	.+34     	; 0x24b6 <Disable_Int+0x4a>
    2494:	2b 81       	ldd	r18, Y+3	; 0x03
    2496:	3c 81       	ldd	r19, Y+4	; 0x04
    2498:	22 30       	cpi	r18, 0x02	; 2
    249a:	31 05       	cpc	r19, r1
    249c:	a1 f0       	breq	.+40     	; 0x24c6 <Disable_Int+0x5a>
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	9c 81       	ldd	r25, Y+4	; 0x04
    24a2:	00 97       	sbiw	r24, 0x00	; 0
    24a4:	b9 f4       	brne	.+46     	; 0x24d4 <Disable_Int+0x68>
	{
	case EXTI0:
		/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER DISABLE BIT6*/
		CLR_BIT(GICR,GICR_INT0);
    24a6:	ab e5       	ldi	r26, 0x5B	; 91
    24a8:	b0 e0       	ldi	r27, 0x00	; 0
    24aa:	eb e5       	ldi	r30, 0x5B	; 91
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	80 81       	ld	r24, Z
    24b0:	8f 7b       	andi	r24, 0xBF	; 191
    24b2:	8c 93       	st	X, r24
    24b4:	0f c0       	rjmp	.+30     	; 0x24d4 <Disable_Int+0x68>
		break;
	case EXTI1:
		/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER DISABLE BIT7*/
		CLR_BIT(GICR,GICR_INT1);
    24b6:	ab e5       	ldi	r26, 0x5B	; 91
    24b8:	b0 e0       	ldi	r27, 0x00	; 0
    24ba:	eb e5       	ldi	r30, 0x5B	; 91
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	80 81       	ld	r24, Z
    24c0:	8f 77       	andi	r24, 0x7F	; 127
    24c2:	8c 93       	st	X, r24
    24c4:	07 c0       	rjmp	.+14     	; 0x24d4 <Disable_Int+0x68>
		break;
	case EXTI2:
		/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER DISABLE BIT5*/
		CLR_BIT(GICR,GICR_INT2);
    24c6:	ab e5       	ldi	r26, 0x5B	; 91
    24c8:	b0 e0       	ldi	r27, 0x00	; 0
    24ca:	eb e5       	ldi	r30, 0x5B	; 91
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
    24d0:	8f 7d       	andi	r24, 0xDF	; 223
    24d2:	8c 93       	st	X, r24
		break;
	}
}
    24d4:	0f 90       	pop	r0
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	cf 91       	pop	r28
    24de:	df 91       	pop	r29
    24e0:	08 95       	ret

000024e2 <EXTI_u8INTSetCallBack>:
u8 EXTI_u8INTSetCallBack(const EXT_I * ConfigArr,void (*Copy_pvINTFunc)(void))
{
    24e2:	df 93       	push	r29
    24e4:	cf 93       	push	r28
    24e6:	cd b7       	in	r28, 0x3d	; 61
    24e8:	de b7       	in	r29, 0x3e	; 62
    24ea:	28 97       	sbiw	r28, 0x08	; 8
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	cd bf       	out	0x3d, r28	; 61
    24f6:	9c 83       	std	Y+4, r25	; 0x04
    24f8:	8b 83       	std	Y+3, r24	; 0x03
    24fa:	7e 83       	std	Y+6, r23	; 0x06
    24fc:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8ErrorStatus=NO_ERROR;
    24fe:	82 e0       	ldi	r24, 0x02	; 2
    2500:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8counter;
	for(Local_u8counter=0;Local_u8counter<3;Local_u8counter++)
    2502:	19 82       	std	Y+1, r1	; 0x01
    2504:	59 c0       	rjmp	.+178    	; 0x25b8 <EXTI_u8INTSetCallBack+0xd6>
	{
		switch(ConfigArr[Local_u8counter].Interrupt_ID)
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	88 2f       	mov	r24, r24
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	9c 01       	movw	r18, r24
    250e:	22 0f       	add	r18, r18
    2510:	33 1f       	adc	r19, r19
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	9c 81       	ldd	r25, Y+4	; 0x04
    2516:	fc 01       	movw	r30, r24
    2518:	e2 0f       	add	r30, r18
    251a:	f3 1f       	adc	r31, r19
    251c:	80 81       	ld	r24, Z
    251e:	28 2f       	mov	r18, r24
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	38 87       	std	Y+8, r19	; 0x08
    2524:	2f 83       	std	Y+7, r18	; 0x07
    2526:	8f 81       	ldd	r24, Y+7	; 0x07
    2528:	98 85       	ldd	r25, Y+8	; 0x08
    252a:	81 30       	cpi	r24, 0x01	; 1
    252c:	91 05       	cpc	r25, r1
    252e:	e1 f0       	breq	.+56     	; 0x2568 <EXTI_u8INTSetCallBack+0x86>
    2530:	2f 81       	ldd	r18, Y+7	; 0x07
    2532:	38 85       	ldd	r19, Y+8	; 0x08
    2534:	22 30       	cpi	r18, 0x02	; 2
    2536:	31 05       	cpc	r19, r1
    2538:	51 f1       	breq	.+84     	; 0x258e <EXTI_u8INTSetCallBack+0xac>
    253a:	8f 81       	ldd	r24, Y+7	; 0x07
    253c:	98 85       	ldd	r25, Y+8	; 0x08
    253e:	00 97       	sbiw	r24, 0x00	; 0
    2540:	c1 f5       	brne	.+112    	; 0x25b2 <EXTI_u8INTSetCallBack+0xd0>
		{
		case EXTI0:
			if(Copy_pvINTFunc != NULL)
    2542:	8d 81       	ldd	r24, Y+5	; 0x05
    2544:	9e 81       	ldd	r25, Y+6	; 0x06
    2546:	00 97       	sbiw	r24, 0x00	; 0
    2548:	69 f0       	breq	.+26     	; 0x2564 <EXTI_u8INTSetCallBack+0x82>
			{
				EXTI_ARRCALLBACK2FUNC[Local_u8counter]=Copy_pvINTFunc;
    254a:	89 81       	ldd	r24, Y+1	; 0x01
    254c:	88 2f       	mov	r24, r24
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	88 0f       	add	r24, r24
    2552:	99 1f       	adc	r25, r25
    2554:	fc 01       	movw	r30, r24
    2556:	ed 5d       	subi	r30, 0xDD	; 221
    2558:	fc 4f       	sbci	r31, 0xFC	; 252
    255a:	8d 81       	ldd	r24, Y+5	; 0x05
    255c:	9e 81       	ldd	r25, Y+6	; 0x06
    255e:	91 83       	std	Z+1, r25	; 0x01
    2560:	80 83       	st	Z, r24
    2562:	27 c0       	rjmp	.+78     	; 0x25b2 <EXTI_u8INTSetCallBack+0xd0>
			}
			else
			{
				Local_u8ErrorStatus = NULL_POINTER;
    2564:	1a 82       	std	Y+2, r1	; 0x02
    2566:	25 c0       	rjmp	.+74     	; 0x25b2 <EXTI_u8INTSetCallBack+0xd0>
			}
			break;
		case EXTI1:
			if(Copy_pvINTFunc != NULL)
    2568:	8d 81       	ldd	r24, Y+5	; 0x05
    256a:	9e 81       	ldd	r25, Y+6	; 0x06
    256c:	00 97       	sbiw	r24, 0x00	; 0
    256e:	69 f0       	breq	.+26     	; 0x258a <EXTI_u8INTSetCallBack+0xa8>
			{
				EXTI_ARRCALLBACK2FUNC[Local_u8counter]=Copy_pvINTFunc;
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	88 2f       	mov	r24, r24
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	88 0f       	add	r24, r24
    2578:	99 1f       	adc	r25, r25
    257a:	fc 01       	movw	r30, r24
    257c:	ed 5d       	subi	r30, 0xDD	; 221
    257e:	fc 4f       	sbci	r31, 0xFC	; 252
    2580:	8d 81       	ldd	r24, Y+5	; 0x05
    2582:	9e 81       	ldd	r25, Y+6	; 0x06
    2584:	91 83       	std	Z+1, r25	; 0x01
    2586:	80 83       	st	Z, r24
    2588:	14 c0       	rjmp	.+40     	; 0x25b2 <EXTI_u8INTSetCallBack+0xd0>
			}
			else
			{
				Local_u8ErrorStatus = NULL_POINTER;
    258a:	1a 82       	std	Y+2, r1	; 0x02
    258c:	12 c0       	rjmp	.+36     	; 0x25b2 <EXTI_u8INTSetCallBack+0xd0>
			}
			break;
		case EXTI2:
			if(Copy_pvINTFunc != NULL)
    258e:	8d 81       	ldd	r24, Y+5	; 0x05
    2590:	9e 81       	ldd	r25, Y+6	; 0x06
    2592:	00 97       	sbiw	r24, 0x00	; 0
    2594:	69 f0       	breq	.+26     	; 0x25b0 <EXTI_u8INTSetCallBack+0xce>
			{
				EXTI_ARRCALLBACK2FUNC[Local_u8counter]=Copy_pvINTFunc;
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	88 2f       	mov	r24, r24
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	fc 01       	movw	r30, r24
    25a2:	ed 5d       	subi	r30, 0xDD	; 221
    25a4:	fc 4f       	sbci	r31, 0xFC	; 252
    25a6:	8d 81       	ldd	r24, Y+5	; 0x05
    25a8:	9e 81       	ldd	r25, Y+6	; 0x06
    25aa:	91 83       	std	Z+1, r25	; 0x01
    25ac:	80 83       	st	Z, r24
    25ae:	01 c0       	rjmp	.+2      	; 0x25b2 <EXTI_u8INTSetCallBack+0xd0>
			}
			else
			{
				Local_u8ErrorStatus = NULL_POINTER;
    25b0:	1a 82       	std	Y+2, r1	; 0x02
}
u8 EXTI_u8INTSetCallBack(const EXT_I * ConfigArr,void (*Copy_pvINTFunc)(void))
{
	u8 Local_u8ErrorStatus=NO_ERROR;
	u8 Local_u8counter;
	for(Local_u8counter=0;Local_u8counter<3;Local_u8counter++)
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	8f 5f       	subi	r24, 0xFF	; 255
    25b6:	89 83       	std	Y+1, r24	; 0x01
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	83 30       	cpi	r24, 0x03	; 3
    25bc:	08 f4       	brcc	.+2      	; 0x25c0 <EXTI_u8INTSetCallBack+0xde>
    25be:	a3 cf       	rjmp	.-186    	; 0x2506 <EXTI_u8INTSetCallBack+0x24>
			}
			break;
		}
	}

	return Local_u8ErrorStatus;
    25c0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    25c2:	28 96       	adiw	r28, 0x08	; 8
    25c4:	0f b6       	in	r0, 0x3f	; 63
    25c6:	f8 94       	cli
    25c8:	de bf       	out	0x3e, r29	; 62
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	cd bf       	out	0x3d, r28	; 61
    25ce:	cf 91       	pop	r28
    25d0:	df 91       	pop	r29
    25d2:	08 95       	ret

000025d4 <__vector_1>:

ISR(INT0_vect)
{
    25d4:	1f 92       	push	r1
    25d6:	0f 92       	push	r0
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	0f 92       	push	r0
    25dc:	11 24       	eor	r1, r1
    25de:	2f 93       	push	r18
    25e0:	3f 93       	push	r19
    25e2:	4f 93       	push	r20
    25e4:	5f 93       	push	r21
    25e6:	6f 93       	push	r22
    25e8:	7f 93       	push	r23
    25ea:	8f 93       	push	r24
    25ec:	9f 93       	push	r25
    25ee:	af 93       	push	r26
    25f0:	bf 93       	push	r27
    25f2:	ef 93       	push	r30
    25f4:	ff 93       	push	r31
    25f6:	df 93       	push	r29
    25f8:	cf 93       	push	r28
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ARRCALLBACK2FUNC[0] != NULL)
    25fe:	80 91 23 03 	lds	r24, 0x0323
    2602:	90 91 24 03 	lds	r25, 0x0324
    2606:	00 97       	sbiw	r24, 0x00	; 0
    2608:	29 f0       	breq	.+10     	; 0x2614 <__vector_1+0x40>
		{
		EXTI_ARRCALLBACK2FUNC[0]();
    260a:	e0 91 23 03 	lds	r30, 0x0323
    260e:	f0 91 24 03 	lds	r31, 0x0324
    2612:	09 95       	icall
		}
		else
		{
			/*Stop*/
		}
}
    2614:	cf 91       	pop	r28
    2616:	df 91       	pop	r29
    2618:	ff 91       	pop	r31
    261a:	ef 91       	pop	r30
    261c:	bf 91       	pop	r27
    261e:	af 91       	pop	r26
    2620:	9f 91       	pop	r25
    2622:	8f 91       	pop	r24
    2624:	7f 91       	pop	r23
    2626:	6f 91       	pop	r22
    2628:	5f 91       	pop	r21
    262a:	4f 91       	pop	r20
    262c:	3f 91       	pop	r19
    262e:	2f 91       	pop	r18
    2630:	0f 90       	pop	r0
    2632:	0f be       	out	0x3f, r0	; 63
    2634:	0f 90       	pop	r0
    2636:	1f 90       	pop	r1
    2638:	18 95       	reti

0000263a <__vector_2>:
ISR(INT1_vect)
{
    263a:	1f 92       	push	r1
    263c:	0f 92       	push	r0
    263e:	0f b6       	in	r0, 0x3f	; 63
    2640:	0f 92       	push	r0
    2642:	11 24       	eor	r1, r1
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62

}
    264c:	cf 91       	pop	r28
    264e:	df 91       	pop	r29
    2650:	0f 90       	pop	r0
    2652:	0f be       	out	0x3f, r0	; 63
    2654:	0f 90       	pop	r0
    2656:	1f 90       	pop	r1
    2658:	18 95       	reti

0000265a <__vector_3>:
ISR(INT2_vect)
{
    265a:	1f 92       	push	r1
    265c:	0f 92       	push	r0
    265e:	0f b6       	in	r0, 0x3f	; 63
    2660:	0f 92       	push	r0
    2662:	11 24       	eor	r1, r1
    2664:	df 93       	push	r29
    2666:	cf 93       	push	r28
    2668:	cd b7       	in	r28, 0x3d	; 61
    266a:	de b7       	in	r29, 0x3e	; 62

}
    266c:	cf 91       	pop	r28
    266e:	df 91       	pop	r29
    2670:	0f 90       	pop	r0
    2672:	0f be       	out	0x3f, r0	; 63
    2674:	0f 90       	pop	r0
    2676:	1f 90       	pop	r1
    2678:	18 95       	reti

0000267a <M_Dio_en_getPinValue>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : Dio_HIGH or DIO_LOW
******************************************/
Dio_LevelType  M_Dio_en_getPinValue(Dio_ChannelType ChannelId)
{
    267a:	df 93       	push	r29
    267c:	cf 93       	push	r28
    267e:	00 d0       	rcall	.+0      	; 0x2680 <M_Dio_en_getPinValue+0x6>
    2680:	00 d0       	rcall	.+0      	; 0x2682 <M_Dio_en_getPinValue+0x8>
    2682:	00 d0       	rcall	.+0      	; 0x2684 <M_Dio_en_getPinValue+0xa>
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
    2688:	8c 83       	std	Y+4, r24	; 0x04
	u8 pin = ChannelId % 10;
    268a:	8c 81       	ldd	r24, Y+4	; 0x04
    268c:	9a e0       	ldi	r25, 0x0A	; 10
    268e:	69 2f       	mov	r22, r25
    2690:	0e 94 ed 22 	call	0x45da	; 0x45da <__udivmodqi4>
    2694:	89 2f       	mov	r24, r25
    2696:	8b 83       	std	Y+3, r24	; 0x03
	u8 port = ChannelId / 10;
    2698:	8c 81       	ldd	r24, Y+4	; 0x04
    269a:	9a e0       	ldi	r25, 0x0A	; 10
    269c:	69 2f       	mov	r22, r25
    269e:	0e 94 ed 22 	call	0x45da	; 0x45da <__udivmodqi4>
    26a2:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType Local_levelType;
	switch(port)
    26a4:	8a 81       	ldd	r24, Y+2	; 0x02
    26a6:	28 2f       	mov	r18, r24
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	3e 83       	std	Y+6, r19	; 0x06
    26ac:	2d 83       	std	Y+5, r18	; 0x05
    26ae:	4d 81       	ldd	r20, Y+5	; 0x05
    26b0:	5e 81       	ldd	r21, Y+6	; 0x06
    26b2:	42 30       	cpi	r20, 0x02	; 2
    26b4:	51 05       	cpc	r21, r1
    26b6:	41 f1       	breq	.+80     	; 0x2708 <M_Dio_en_getPinValue+0x8e>
    26b8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ba:	9e 81       	ldd	r25, Y+6	; 0x06
    26bc:	83 30       	cpi	r24, 0x03	; 3
    26be:	91 05       	cpc	r25, r1
    26c0:	34 f4       	brge	.+12     	; 0x26ce <M_Dio_en_getPinValue+0x54>
    26c2:	2d 81       	ldd	r18, Y+5	; 0x05
    26c4:	3e 81       	ldd	r19, Y+6	; 0x06
    26c6:	21 30       	cpi	r18, 0x01	; 1
    26c8:	31 05       	cpc	r19, r1
    26ca:	61 f0       	breq	.+24     	; 0x26e4 <M_Dio_en_getPinValue+0x6a>
    26cc:	52 c0       	rjmp	.+164    	; 0x2772 <M_Dio_en_getPinValue+0xf8>
    26ce:	4d 81       	ldd	r20, Y+5	; 0x05
    26d0:	5e 81       	ldd	r21, Y+6	; 0x06
    26d2:	43 30       	cpi	r20, 0x03	; 3
    26d4:	51 05       	cpc	r21, r1
    26d6:	51 f1       	breq	.+84     	; 0x272c <M_Dio_en_getPinValue+0xb2>
    26d8:	8d 81       	ldd	r24, Y+5	; 0x05
    26da:	9e 81       	ldd	r25, Y+6	; 0x06
    26dc:	84 30       	cpi	r24, 0x04	; 4
    26de:	91 05       	cpc	r25, r1
    26e0:	b9 f1       	breq	.+110    	; 0x2750 <M_Dio_en_getPinValue+0xd6>
    26e2:	47 c0       	rjmp	.+142    	; 0x2772 <M_Dio_en_getPinValue+0xf8>
	{
	case DIO_PORTA :Local_levelType = GET_BIT( PINA_REG,pin);break;
    26e4:	e9 e3       	ldi	r30, 0x39	; 57
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	80 81       	ld	r24, Z
    26ea:	28 2f       	mov	r18, r24
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	8b 81       	ldd	r24, Y+3	; 0x03
    26f0:	88 2f       	mov	r24, r24
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	a9 01       	movw	r20, r18
    26f6:	02 c0       	rjmp	.+4      	; 0x26fc <M_Dio_en_getPinValue+0x82>
    26f8:	55 95       	asr	r21
    26fa:	47 95       	ror	r20
    26fc:	8a 95       	dec	r24
    26fe:	e2 f7       	brpl	.-8      	; 0x26f8 <M_Dio_en_getPinValue+0x7e>
    2700:	ca 01       	movw	r24, r20
    2702:	81 70       	andi	r24, 0x01	; 1
    2704:	89 83       	std	Y+1, r24	; 0x01
    2706:	35 c0       	rjmp	.+106    	; 0x2772 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTB :Local_levelType = GET_BIT( PINB_REG,pin);break;
    2708:	e6 e3       	ldi	r30, 0x36	; 54
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	80 81       	ld	r24, Z
    270e:	28 2f       	mov	r18, r24
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	8b 81       	ldd	r24, Y+3	; 0x03
    2714:	88 2f       	mov	r24, r24
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	a9 01       	movw	r20, r18
    271a:	02 c0       	rjmp	.+4      	; 0x2720 <M_Dio_en_getPinValue+0xa6>
    271c:	55 95       	asr	r21
    271e:	47 95       	ror	r20
    2720:	8a 95       	dec	r24
    2722:	e2 f7       	brpl	.-8      	; 0x271c <M_Dio_en_getPinValue+0xa2>
    2724:	ca 01       	movw	r24, r20
    2726:	81 70       	andi	r24, 0x01	; 1
    2728:	89 83       	std	Y+1, r24	; 0x01
    272a:	23 c0       	rjmp	.+70     	; 0x2772 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTC :Local_levelType = GET_BIT( PINC_REG,pin);break;
    272c:	e3 e3       	ldi	r30, 0x33	; 51
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 81       	ld	r24, Z
    2732:	28 2f       	mov	r18, r24
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	8b 81       	ldd	r24, Y+3	; 0x03
    2738:	88 2f       	mov	r24, r24
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	a9 01       	movw	r20, r18
    273e:	02 c0       	rjmp	.+4      	; 0x2744 <M_Dio_en_getPinValue+0xca>
    2740:	55 95       	asr	r21
    2742:	47 95       	ror	r20
    2744:	8a 95       	dec	r24
    2746:	e2 f7       	brpl	.-8      	; 0x2740 <M_Dio_en_getPinValue+0xc6>
    2748:	ca 01       	movw	r24, r20
    274a:	81 70       	andi	r24, 0x01	; 1
    274c:	89 83       	std	Y+1, r24	; 0x01
    274e:	11 c0       	rjmp	.+34     	; 0x2772 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTD :Local_levelType = GET_BIT( PIND_REG,pin);break;
    2750:	e0 e3       	ldi	r30, 0x30	; 48
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	80 81       	ld	r24, Z
    2756:	28 2f       	mov	r18, r24
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	8b 81       	ldd	r24, Y+3	; 0x03
    275c:	88 2f       	mov	r24, r24
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	a9 01       	movw	r20, r18
    2762:	02 c0       	rjmp	.+4      	; 0x2768 <M_Dio_en_getPinValue+0xee>
    2764:	55 95       	asr	r21
    2766:	47 95       	ror	r20
    2768:	8a 95       	dec	r24
    276a:	e2 f7       	brpl	.-8      	; 0x2764 <M_Dio_en_getPinValue+0xea>
    276c:	ca 01       	movw	r24, r20
    276e:	81 70       	andi	r24, 0x01	; 1
    2770:	89 83       	std	Y+1, r24	; 0x01
	}
    return Local_levelType ;
    2772:	89 81       	ldd	r24, Y+1	; 0x01
}
    2774:	26 96       	adiw	r28, 0x06	; 6
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	f8 94       	cli
    277a:	de bf       	out	0x3e, r29	; 62
    277c:	0f be       	out	0x3f, r0	; 63
    277e:	cd bf       	out	0x3d, r28	; 61
    2780:	cf 91       	pop	r28
    2782:	df 91       	pop	r29
    2784:	08 95       	ret

00002786 <M_Dio_void_setPinValue>:
  parameters (in)  :  channelId (pin) ,Level (Dio_HIGH or Dio_LOW)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPinValue(Dio_ChannelType ChannelId,Dio_LevelType Level)
{
    2786:	df 93       	push	r29
    2788:	cf 93       	push	r28
    278a:	cd b7       	in	r28, 0x3d	; 61
    278c:	de b7       	in	r29, 0x3e	; 62
    278e:	28 97       	sbiw	r28, 0x08	; 8
    2790:	0f b6       	in	r0, 0x3f	; 63
    2792:	f8 94       	cli
    2794:	de bf       	out	0x3e, r29	; 62
    2796:	0f be       	out	0x3f, r0	; 63
    2798:	cd bf       	out	0x3d, r28	; 61
    279a:	8b 83       	std	Y+3, r24	; 0x03
    279c:	6c 83       	std	Y+4, r22	; 0x04
	u8 pin = ChannelId % 10;
    279e:	8b 81       	ldd	r24, Y+3	; 0x03
    27a0:	9a e0       	ldi	r25, 0x0A	; 10
    27a2:	69 2f       	mov	r22, r25
    27a4:	0e 94 ed 22 	call	0x45da	; 0x45da <__udivmodqi4>
    27a8:	89 2f       	mov	r24, r25
    27aa:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = ChannelId / 10;
    27ac:	8b 81       	ldd	r24, Y+3	; 0x03
    27ae:	9a e0       	ldi	r25, 0x0A	; 10
    27b0:	69 2f       	mov	r22, r25
    27b2:	0e 94 ed 22 	call	0x45da	; 0x45da <__udivmodqi4>
    27b6:	89 83       	std	Y+1, r24	; 0x01

	if(Level == DIO_HIGH)
    27b8:	8c 81       	ldd	r24, Y+4	; 0x04
    27ba:	81 30       	cpi	r24, 0x01	; 1
    27bc:	09 f0       	breq	.+2      	; 0x27c0 <M_Dio_void_setPinValue+0x3a>
    27be:	70 c0       	rjmp	.+224    	; 0x28a0 <M_Dio_void_setPinValue+0x11a>
	{
		switch(port)
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	28 2f       	mov	r18, r24
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	38 87       	std	Y+8, r19	; 0x08
    27c8:	2f 83       	std	Y+7, r18	; 0x07
    27ca:	8f 81       	ldd	r24, Y+7	; 0x07
    27cc:	98 85       	ldd	r25, Y+8	; 0x08
    27ce:	82 30       	cpi	r24, 0x02	; 2
    27d0:	91 05       	cpc	r25, r1
    27d2:	51 f1       	breq	.+84     	; 0x2828 <M_Dio_void_setPinValue+0xa2>
    27d4:	2f 81       	ldd	r18, Y+7	; 0x07
    27d6:	38 85       	ldd	r19, Y+8	; 0x08
    27d8:	23 30       	cpi	r18, 0x03	; 3
    27da:	31 05       	cpc	r19, r1
    27dc:	34 f4       	brge	.+12     	; 0x27ea <M_Dio_void_setPinValue+0x64>
    27de:	8f 81       	ldd	r24, Y+7	; 0x07
    27e0:	98 85       	ldd	r25, Y+8	; 0x08
    27e2:	81 30       	cpi	r24, 0x01	; 1
    27e4:	91 05       	cpc	r25, r1
    27e6:	61 f0       	breq	.+24     	; 0x2800 <M_Dio_void_setPinValue+0x7a>
    27e8:	d3 c0       	rjmp	.+422    	; 0x2990 <M_Dio_void_setPinValue+0x20a>
    27ea:	2f 81       	ldd	r18, Y+7	; 0x07
    27ec:	38 85       	ldd	r19, Y+8	; 0x08
    27ee:	23 30       	cpi	r18, 0x03	; 3
    27f0:	31 05       	cpc	r19, r1
    27f2:	71 f1       	breq	.+92     	; 0x2850 <M_Dio_void_setPinValue+0xca>
    27f4:	8f 81       	ldd	r24, Y+7	; 0x07
    27f6:	98 85       	ldd	r25, Y+8	; 0x08
    27f8:	84 30       	cpi	r24, 0x04	; 4
    27fa:	91 05       	cpc	r25, r1
    27fc:	e9 f1       	breq	.+122    	; 0x2878 <M_Dio_void_setPinValue+0xf2>
    27fe:	c8 c0       	rjmp	.+400    	; 0x2990 <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : SET_BIT( PORTA_REG,pin);break;
    2800:	ab e3       	ldi	r26, 0x3B	; 59
    2802:	b0 e0       	ldi	r27, 0x00	; 0
    2804:	eb e3       	ldi	r30, 0x3B	; 59
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	80 81       	ld	r24, Z
    280a:	48 2f       	mov	r20, r24
    280c:	8a 81       	ldd	r24, Y+2	; 0x02
    280e:	28 2f       	mov	r18, r24
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	02 2e       	mov	r0, r18
    2818:	02 c0       	rjmp	.+4      	; 0x281e <M_Dio_void_setPinValue+0x98>
    281a:	88 0f       	add	r24, r24
    281c:	99 1f       	adc	r25, r25
    281e:	0a 94       	dec	r0
    2820:	e2 f7       	brpl	.-8      	; 0x281a <M_Dio_void_setPinValue+0x94>
    2822:	84 2b       	or	r24, r20
    2824:	8c 93       	st	X, r24
    2826:	b4 c0       	rjmp	.+360    	; 0x2990 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : SET_BIT( PORTB_REG,pin);break;
    2828:	a8 e3       	ldi	r26, 0x38	; 56
    282a:	b0 e0       	ldi	r27, 0x00	; 0
    282c:	e8 e3       	ldi	r30, 0x38	; 56
    282e:	f0 e0       	ldi	r31, 0x00	; 0
    2830:	80 81       	ld	r24, Z
    2832:	48 2f       	mov	r20, r24
    2834:	8a 81       	ldd	r24, Y+2	; 0x02
    2836:	28 2f       	mov	r18, r24
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	02 2e       	mov	r0, r18
    2840:	02 c0       	rjmp	.+4      	; 0x2846 <M_Dio_void_setPinValue+0xc0>
    2842:	88 0f       	add	r24, r24
    2844:	99 1f       	adc	r25, r25
    2846:	0a 94       	dec	r0
    2848:	e2 f7       	brpl	.-8      	; 0x2842 <M_Dio_void_setPinValue+0xbc>
    284a:	84 2b       	or	r24, r20
    284c:	8c 93       	st	X, r24
    284e:	a0 c0       	rjmp	.+320    	; 0x2990 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : SET_BIT( PORTC_REG,pin);break;
    2850:	a5 e3       	ldi	r26, 0x35	; 53
    2852:	b0 e0       	ldi	r27, 0x00	; 0
    2854:	e5 e3       	ldi	r30, 0x35	; 53
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	80 81       	ld	r24, Z
    285a:	48 2f       	mov	r20, r24
    285c:	8a 81       	ldd	r24, Y+2	; 0x02
    285e:	28 2f       	mov	r18, r24
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	02 2e       	mov	r0, r18
    2868:	02 c0       	rjmp	.+4      	; 0x286e <M_Dio_void_setPinValue+0xe8>
    286a:	88 0f       	add	r24, r24
    286c:	99 1f       	adc	r25, r25
    286e:	0a 94       	dec	r0
    2870:	e2 f7       	brpl	.-8      	; 0x286a <M_Dio_void_setPinValue+0xe4>
    2872:	84 2b       	or	r24, r20
    2874:	8c 93       	st	X, r24
    2876:	8c c0       	rjmp	.+280    	; 0x2990 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : SET_BIT( PORTD_REG,pin);break;
    2878:	a2 e3       	ldi	r26, 0x32	; 50
    287a:	b0 e0       	ldi	r27, 0x00	; 0
    287c:	e2 e3       	ldi	r30, 0x32	; 50
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	80 81       	ld	r24, Z
    2882:	48 2f       	mov	r20, r24
    2884:	8a 81       	ldd	r24, Y+2	; 0x02
    2886:	28 2f       	mov	r18, r24
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	02 2e       	mov	r0, r18
    2890:	02 c0       	rjmp	.+4      	; 0x2896 <M_Dio_void_setPinValue+0x110>
    2892:	88 0f       	add	r24, r24
    2894:	99 1f       	adc	r25, r25
    2896:	0a 94       	dec	r0
    2898:	e2 f7       	brpl	.-8      	; 0x2892 <M_Dio_void_setPinValue+0x10c>
    289a:	84 2b       	or	r24, r20
    289c:	8c 93       	st	X, r24
    289e:	78 c0       	rjmp	.+240    	; 0x2990 <M_Dio_void_setPinValue+0x20a>
		}

	}
	else if (Level == DIO_LOW)
    28a0:	8c 81       	ldd	r24, Y+4	; 0x04
    28a2:	88 23       	and	r24, r24
    28a4:	09 f0       	breq	.+2      	; 0x28a8 <M_Dio_void_setPinValue+0x122>
    28a6:	74 c0       	rjmp	.+232    	; 0x2990 <M_Dio_void_setPinValue+0x20a>
	{
		switch(port)
    28a8:	89 81       	ldd	r24, Y+1	; 0x01
    28aa:	28 2f       	mov	r18, r24
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	3e 83       	std	Y+6, r19	; 0x06
    28b0:	2d 83       	std	Y+5, r18	; 0x05
    28b2:	8d 81       	ldd	r24, Y+5	; 0x05
    28b4:	9e 81       	ldd	r25, Y+6	; 0x06
    28b6:	82 30       	cpi	r24, 0x02	; 2
    28b8:	91 05       	cpc	r25, r1
    28ba:	61 f1       	breq	.+88     	; 0x2914 <M_Dio_void_setPinValue+0x18e>
    28bc:	2d 81       	ldd	r18, Y+5	; 0x05
    28be:	3e 81       	ldd	r19, Y+6	; 0x06
    28c0:	23 30       	cpi	r18, 0x03	; 3
    28c2:	31 05       	cpc	r19, r1
    28c4:	34 f4       	brge	.+12     	; 0x28d2 <M_Dio_void_setPinValue+0x14c>
    28c6:	8d 81       	ldd	r24, Y+5	; 0x05
    28c8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ca:	81 30       	cpi	r24, 0x01	; 1
    28cc:	91 05       	cpc	r25, r1
    28ce:	69 f0       	breq	.+26     	; 0x28ea <M_Dio_void_setPinValue+0x164>
    28d0:	5f c0       	rjmp	.+190    	; 0x2990 <M_Dio_void_setPinValue+0x20a>
    28d2:	2d 81       	ldd	r18, Y+5	; 0x05
    28d4:	3e 81       	ldd	r19, Y+6	; 0x06
    28d6:	23 30       	cpi	r18, 0x03	; 3
    28d8:	31 05       	cpc	r19, r1
    28da:	89 f1       	breq	.+98     	; 0x293e <M_Dio_void_setPinValue+0x1b8>
    28dc:	8d 81       	ldd	r24, Y+5	; 0x05
    28de:	9e 81       	ldd	r25, Y+6	; 0x06
    28e0:	84 30       	cpi	r24, 0x04	; 4
    28e2:	91 05       	cpc	r25, r1
    28e4:	09 f4       	brne	.+2      	; 0x28e8 <M_Dio_void_setPinValue+0x162>
    28e6:	40 c0       	rjmp	.+128    	; 0x2968 <M_Dio_void_setPinValue+0x1e2>
    28e8:	53 c0       	rjmp	.+166    	; 0x2990 <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : CLR_BIT( PORTA_REG,pin);break;
    28ea:	ab e3       	ldi	r26, 0x3B	; 59
    28ec:	b0 e0       	ldi	r27, 0x00	; 0
    28ee:	eb e3       	ldi	r30, 0x3B	; 59
    28f0:	f0 e0       	ldi	r31, 0x00	; 0
    28f2:	80 81       	ld	r24, Z
    28f4:	48 2f       	mov	r20, r24
    28f6:	8a 81       	ldd	r24, Y+2	; 0x02
    28f8:	28 2f       	mov	r18, r24
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	02 2e       	mov	r0, r18
    2902:	02 c0       	rjmp	.+4      	; 0x2908 <M_Dio_void_setPinValue+0x182>
    2904:	88 0f       	add	r24, r24
    2906:	99 1f       	adc	r25, r25
    2908:	0a 94       	dec	r0
    290a:	e2 f7       	brpl	.-8      	; 0x2904 <M_Dio_void_setPinValue+0x17e>
    290c:	80 95       	com	r24
    290e:	84 23       	and	r24, r20
    2910:	8c 93       	st	X, r24
    2912:	3e c0       	rjmp	.+124    	; 0x2990 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : CLR_BIT( PORTB_REG,pin);break;
    2914:	a8 e3       	ldi	r26, 0x38	; 56
    2916:	b0 e0       	ldi	r27, 0x00	; 0
    2918:	e8 e3       	ldi	r30, 0x38	; 56
    291a:	f0 e0       	ldi	r31, 0x00	; 0
    291c:	80 81       	ld	r24, Z
    291e:	48 2f       	mov	r20, r24
    2920:	8a 81       	ldd	r24, Y+2	; 0x02
    2922:	28 2f       	mov	r18, r24
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	02 2e       	mov	r0, r18
    292c:	02 c0       	rjmp	.+4      	; 0x2932 <M_Dio_void_setPinValue+0x1ac>
    292e:	88 0f       	add	r24, r24
    2930:	99 1f       	adc	r25, r25
    2932:	0a 94       	dec	r0
    2934:	e2 f7       	brpl	.-8      	; 0x292e <M_Dio_void_setPinValue+0x1a8>
    2936:	80 95       	com	r24
    2938:	84 23       	and	r24, r20
    293a:	8c 93       	st	X, r24
    293c:	29 c0       	rjmp	.+82     	; 0x2990 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : CLR_BIT( PORTC_REG,pin);break;
    293e:	a5 e3       	ldi	r26, 0x35	; 53
    2940:	b0 e0       	ldi	r27, 0x00	; 0
    2942:	e5 e3       	ldi	r30, 0x35	; 53
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	80 81       	ld	r24, Z
    2948:	48 2f       	mov	r20, r24
    294a:	8a 81       	ldd	r24, Y+2	; 0x02
    294c:	28 2f       	mov	r18, r24
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	02 2e       	mov	r0, r18
    2956:	02 c0       	rjmp	.+4      	; 0x295c <M_Dio_void_setPinValue+0x1d6>
    2958:	88 0f       	add	r24, r24
    295a:	99 1f       	adc	r25, r25
    295c:	0a 94       	dec	r0
    295e:	e2 f7       	brpl	.-8      	; 0x2958 <M_Dio_void_setPinValue+0x1d2>
    2960:	80 95       	com	r24
    2962:	84 23       	and	r24, r20
    2964:	8c 93       	st	X, r24
    2966:	14 c0       	rjmp	.+40     	; 0x2990 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : CLR_BIT( PORTD_REG,pin);break;
    2968:	a2 e3       	ldi	r26, 0x32	; 50
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	e2 e3       	ldi	r30, 0x32	; 50
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	80 81       	ld	r24, Z
    2972:	48 2f       	mov	r20, r24
    2974:	8a 81       	ldd	r24, Y+2	; 0x02
    2976:	28 2f       	mov	r18, r24
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	02 2e       	mov	r0, r18
    2980:	02 c0       	rjmp	.+4      	; 0x2986 <M_Dio_void_setPinValue+0x200>
    2982:	88 0f       	add	r24, r24
    2984:	99 1f       	adc	r25, r25
    2986:	0a 94       	dec	r0
    2988:	e2 f7       	brpl	.-8      	; 0x2982 <M_Dio_void_setPinValue+0x1fc>
    298a:	80 95       	com	r24
    298c:	84 23       	and	r24, r20
    298e:	8c 93       	st	X, r24
		}

	}

}
    2990:	28 96       	adiw	r28, 0x08	; 8
    2992:	0f b6       	in	r0, 0x3f	; 63
    2994:	f8 94       	cli
    2996:	de bf       	out	0x3e, r29	; 62
    2998:	0f be       	out	0x3f, r0	; 63
    299a:	cd bf       	out	0x3d, r28	; 61
    299c:	cf 91       	pop	r28
    299e:	df 91       	pop	r29
    29a0:	08 95       	ret

000029a2 <M_Dio_en_getPortValue>:
  parameters (in)  :  PortId
  parameters (out) :  Non
  Return Value     : Dio_PortLevelType
******************************************/
Dio_PortLevelType M_Dio_en_getPortValue(Dio_PortType PortId)
{
    29a2:	df 93       	push	r29
    29a4:	cf 93       	push	r28
    29a6:	00 d0       	rcall	.+0      	; 0x29a8 <M_Dio_en_getPortValue+0x6>
    29a8:	00 d0       	rcall	.+0      	; 0x29aa <M_Dio_en_getPortValue+0x8>
    29aa:	cd b7       	in	r28, 0x3d	; 61
    29ac:	de b7       	in	r29, 0x3e	; 62
    29ae:	8a 83       	std	Y+2, r24	; 0x02
	Dio_PortLevelType Local_Reading;

	switch( PortId)
    29b0:	8a 81       	ldd	r24, Y+2	; 0x02
    29b2:	28 2f       	mov	r18, r24
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	3c 83       	std	Y+4, r19	; 0x04
    29b8:	2b 83       	std	Y+3, r18	; 0x03
    29ba:	8b 81       	ldd	r24, Y+3	; 0x03
    29bc:	9c 81       	ldd	r25, Y+4	; 0x04
    29be:	82 30       	cpi	r24, 0x02	; 2
    29c0:	91 05       	cpc	r25, r1
    29c2:	d9 f0       	breq	.+54     	; 0x29fa <M_Dio_en_getPortValue+0x58>
    29c4:	2b 81       	ldd	r18, Y+3	; 0x03
    29c6:	3c 81       	ldd	r19, Y+4	; 0x04
    29c8:	23 30       	cpi	r18, 0x03	; 3
    29ca:	31 05       	cpc	r19, r1
    29cc:	34 f4       	brge	.+12     	; 0x29da <M_Dio_en_getPortValue+0x38>
    29ce:	8b 81       	ldd	r24, Y+3	; 0x03
    29d0:	9c 81       	ldd	r25, Y+4	; 0x04
    29d2:	81 30       	cpi	r24, 0x01	; 1
    29d4:	91 05       	cpc	r25, r1
    29d6:	61 f0       	breq	.+24     	; 0x29f0 <M_Dio_en_getPortValue+0x4e>
    29d8:	1e c0       	rjmp	.+60     	; 0x2a16 <M_Dio_en_getPortValue+0x74>
    29da:	2b 81       	ldd	r18, Y+3	; 0x03
    29dc:	3c 81       	ldd	r19, Y+4	; 0x04
    29de:	23 30       	cpi	r18, 0x03	; 3
    29e0:	31 05       	cpc	r19, r1
    29e2:	81 f0       	breq	.+32     	; 0x2a04 <M_Dio_en_getPortValue+0x62>
    29e4:	8b 81       	ldd	r24, Y+3	; 0x03
    29e6:	9c 81       	ldd	r25, Y+4	; 0x04
    29e8:	84 30       	cpi	r24, 0x04	; 4
    29ea:	91 05       	cpc	r25, r1
    29ec:	81 f0       	breq	.+32     	; 0x2a0e <M_Dio_en_getPortValue+0x6c>
    29ee:	13 c0       	rjmp	.+38     	; 0x2a16 <M_Dio_en_getPortValue+0x74>
	{
	case DIO_PORTA :Local_Reading =  PORTA_REG;break;
    29f0:	eb e3       	ldi	r30, 0x3B	; 59
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	80 81       	ld	r24, Z
    29f6:	89 83       	std	Y+1, r24	; 0x01
    29f8:	0e c0       	rjmp	.+28     	; 0x2a16 <M_Dio_en_getPortValue+0x74>
	case DIO_PORTB :Local_Reading =  PORTB_REG;break;
    29fa:	e8 e3       	ldi	r30, 0x38	; 56
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	89 83       	std	Y+1, r24	; 0x01
    2a02:	09 c0       	rjmp	.+18     	; 0x2a16 <M_Dio_en_getPortValue+0x74>
	case DIO_PORTC :Local_Reading =  PORTC_REG;break;
    2a04:	e5 e3       	ldi	r30, 0x35	; 53
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	80 81       	ld	r24, Z
    2a0a:	89 83       	std	Y+1, r24	; 0x01
    2a0c:	04 c0       	rjmp	.+8      	; 0x2a16 <M_Dio_en_getPortValue+0x74>
	case DIO_PORTD :Local_Reading =  PORTD_REG;break;
    2a0e:	e2 e3       	ldi	r30, 0x32	; 50
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 81       	ld	r24, Z
    2a14:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_Reading;
    2a16:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a18:	0f 90       	pop	r0
    2a1a:	0f 90       	pop	r0
    2a1c:	0f 90       	pop	r0
    2a1e:	0f 90       	pop	r0
    2a20:	cf 91       	pop	r28
    2a22:	df 91       	pop	r29
    2a24:	08 95       	ret

00002a26 <M_Dio_void_setPortValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPortValue(Dio_PortType PortId,Dio_PortLevelType Level)
{
    2a26:	df 93       	push	r29
    2a28:	cf 93       	push	r28
    2a2a:	00 d0       	rcall	.+0      	; 0x2a2c <M_Dio_void_setPortValue+0x6>
    2a2c:	00 d0       	rcall	.+0      	; 0x2a2e <M_Dio_void_setPortValue+0x8>
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
    2a32:	89 83       	std	Y+1, r24	; 0x01
    2a34:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortId)
    2a36:	89 81       	ldd	r24, Y+1	; 0x01
    2a38:	28 2f       	mov	r18, r24
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	3c 83       	std	Y+4, r19	; 0x04
    2a3e:	2b 83       	std	Y+3, r18	; 0x03
    2a40:	8b 81       	ldd	r24, Y+3	; 0x03
    2a42:	9c 81       	ldd	r25, Y+4	; 0x04
    2a44:	82 30       	cpi	r24, 0x02	; 2
    2a46:	91 05       	cpc	r25, r1
    2a48:	d9 f0       	breq	.+54     	; 0x2a80 <M_Dio_void_setPortValue+0x5a>
    2a4a:	2b 81       	ldd	r18, Y+3	; 0x03
    2a4c:	3c 81       	ldd	r19, Y+4	; 0x04
    2a4e:	23 30       	cpi	r18, 0x03	; 3
    2a50:	31 05       	cpc	r19, r1
    2a52:	34 f4       	brge	.+12     	; 0x2a60 <M_Dio_void_setPortValue+0x3a>
    2a54:	8b 81       	ldd	r24, Y+3	; 0x03
    2a56:	9c 81       	ldd	r25, Y+4	; 0x04
    2a58:	81 30       	cpi	r24, 0x01	; 1
    2a5a:	91 05       	cpc	r25, r1
    2a5c:	61 f0       	breq	.+24     	; 0x2a76 <M_Dio_void_setPortValue+0x50>
    2a5e:	1e c0       	rjmp	.+60     	; 0x2a9c <M_Dio_void_setPortValue+0x76>
    2a60:	2b 81       	ldd	r18, Y+3	; 0x03
    2a62:	3c 81       	ldd	r19, Y+4	; 0x04
    2a64:	23 30       	cpi	r18, 0x03	; 3
    2a66:	31 05       	cpc	r19, r1
    2a68:	81 f0       	breq	.+32     	; 0x2a8a <M_Dio_void_setPortValue+0x64>
    2a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6e:	84 30       	cpi	r24, 0x04	; 4
    2a70:	91 05       	cpc	r25, r1
    2a72:	81 f0       	breq	.+32     	; 0x2a94 <M_Dio_void_setPortValue+0x6e>
    2a74:	13 c0       	rjmp	.+38     	; 0x2a9c <M_Dio_void_setPortValue+0x76>
	{
    	case DIO_PORTA : PORTA_REG = Level;break;
    2a76:	eb e3       	ldi	r30, 0x3B	; 59
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7c:	80 83       	st	Z, r24
    2a7e:	0e c0       	rjmp	.+28     	; 0x2a9c <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTB : PORTB_REG = Level;break;
    2a80:	e8 e3       	ldi	r30, 0x38	; 56
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	8a 81       	ldd	r24, Y+2	; 0x02
    2a86:	80 83       	st	Z, r24
    2a88:	09 c0       	rjmp	.+18     	; 0x2a9c <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTC : PORTC_REG = Level;break;
    2a8a:	e5 e3       	ldi	r30, 0x35	; 53
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a90:	80 83       	st	Z, r24
    2a92:	04 c0       	rjmp	.+8      	; 0x2a9c <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTD : PORTD_REG = Level;break;
    2a94:	e2 e3       	ldi	r30, 0x32	; 50
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9a:	80 83       	st	Z, r24
	}
}
    2a9c:	0f 90       	pop	r0
    2a9e:	0f 90       	pop	r0
    2aa0:	0f 90       	pop	r0
    2aa2:	0f 90       	pop	r0
    2aa4:	cf 91       	pop	r28
    2aa6:	df 91       	pop	r29
    2aa8:	08 95       	ret

00002aaa <M_Dio_void_togglePinValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_togglePinValue(Dio_ChannelType channelId)
{
    2aaa:	df 93       	push	r29
    2aac:	cf 93       	push	r28
    2aae:	00 d0       	rcall	.+0      	; 0x2ab0 <M_Dio_void_togglePinValue+0x6>
    2ab0:	00 d0       	rcall	.+0      	; 0x2ab2 <M_Dio_void_togglePinValue+0x8>
    2ab2:	0f 92       	push	r0
    2ab4:	cd b7       	in	r28, 0x3d	; 61
    2ab6:	de b7       	in	r29, 0x3e	; 62
    2ab8:	8b 83       	std	Y+3, r24	; 0x03
	u8 pin = channelId % 10;
    2aba:	8b 81       	ldd	r24, Y+3	; 0x03
    2abc:	9a e0       	ldi	r25, 0x0A	; 10
    2abe:	69 2f       	mov	r22, r25
    2ac0:	0e 94 ed 22 	call	0x45da	; 0x45da <__udivmodqi4>
    2ac4:	89 2f       	mov	r24, r25
    2ac6:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = channelId/ 10;
    2ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aca:	9a e0       	ldi	r25, 0x0A	; 10
    2acc:	69 2f       	mov	r22, r25
    2ace:	0e 94 ed 22 	call	0x45da	; 0x45da <__udivmodqi4>
    2ad2:	89 83       	std	Y+1, r24	; 0x01

	switch(port)
    2ad4:	89 81       	ldd	r24, Y+1	; 0x01
    2ad6:	28 2f       	mov	r18, r24
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	3d 83       	std	Y+5, r19	; 0x05
    2adc:	2c 83       	std	Y+4, r18	; 0x04
    2ade:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ae2:	82 30       	cpi	r24, 0x02	; 2
    2ae4:	91 05       	cpc	r25, r1
    2ae6:	51 f1       	breq	.+84     	; 0x2b3c <M_Dio_void_togglePinValue+0x92>
    2ae8:	2c 81       	ldd	r18, Y+4	; 0x04
    2aea:	3d 81       	ldd	r19, Y+5	; 0x05
    2aec:	23 30       	cpi	r18, 0x03	; 3
    2aee:	31 05       	cpc	r19, r1
    2af0:	34 f4       	brge	.+12     	; 0x2afe <M_Dio_void_togglePinValue+0x54>
    2af2:	8c 81       	ldd	r24, Y+4	; 0x04
    2af4:	9d 81       	ldd	r25, Y+5	; 0x05
    2af6:	81 30       	cpi	r24, 0x01	; 1
    2af8:	91 05       	cpc	r25, r1
    2afa:	61 f0       	breq	.+24     	; 0x2b14 <M_Dio_void_togglePinValue+0x6a>
    2afc:	5a c0       	rjmp	.+180    	; 0x2bb2 <M_Dio_void_togglePinValue+0x108>
    2afe:	2c 81       	ldd	r18, Y+4	; 0x04
    2b00:	3d 81       	ldd	r19, Y+5	; 0x05
    2b02:	23 30       	cpi	r18, 0x03	; 3
    2b04:	31 05       	cpc	r19, r1
    2b06:	71 f1       	breq	.+92     	; 0x2b64 <M_Dio_void_togglePinValue+0xba>
    2b08:	8c 81       	ldd	r24, Y+4	; 0x04
    2b0a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b0c:	84 30       	cpi	r24, 0x04	; 4
    2b0e:	91 05       	cpc	r25, r1
    2b10:	e9 f1       	breq	.+122    	; 0x2b8c <M_Dio_void_togglePinValue+0xe2>
    2b12:	4f c0       	rjmp	.+158    	; 0x2bb2 <M_Dio_void_togglePinValue+0x108>
	{
	case DIO_PORTA :TOG_BIT( PORTA_REG,pin);break;
    2b14:	ab e3       	ldi	r26, 0x3B	; 59
    2b16:	b0 e0       	ldi	r27, 0x00	; 0
    2b18:	eb e3       	ldi	r30, 0x3B	; 59
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	80 81       	ld	r24, Z
    2b1e:	48 2f       	mov	r20, r24
    2b20:	8a 81       	ldd	r24, Y+2	; 0x02
    2b22:	28 2f       	mov	r18, r24
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	02 2e       	mov	r0, r18
    2b2c:	02 c0       	rjmp	.+4      	; 0x2b32 <M_Dio_void_togglePinValue+0x88>
    2b2e:	88 0f       	add	r24, r24
    2b30:	99 1f       	adc	r25, r25
    2b32:	0a 94       	dec	r0
    2b34:	e2 f7       	brpl	.-8      	; 0x2b2e <M_Dio_void_togglePinValue+0x84>
    2b36:	84 27       	eor	r24, r20
    2b38:	8c 93       	st	X, r24
    2b3a:	3b c0       	rjmp	.+118    	; 0x2bb2 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTB :TOG_BIT( PORTB_REG,pin);break;
    2b3c:	a8 e3       	ldi	r26, 0x38	; 56
    2b3e:	b0 e0       	ldi	r27, 0x00	; 0
    2b40:	e8 e3       	ldi	r30, 0x38	; 56
    2b42:	f0 e0       	ldi	r31, 0x00	; 0
    2b44:	80 81       	ld	r24, Z
    2b46:	48 2f       	mov	r20, r24
    2b48:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4a:	28 2f       	mov	r18, r24
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	02 2e       	mov	r0, r18
    2b54:	02 c0       	rjmp	.+4      	; 0x2b5a <M_Dio_void_togglePinValue+0xb0>
    2b56:	88 0f       	add	r24, r24
    2b58:	99 1f       	adc	r25, r25
    2b5a:	0a 94       	dec	r0
    2b5c:	e2 f7       	brpl	.-8      	; 0x2b56 <M_Dio_void_togglePinValue+0xac>
    2b5e:	84 27       	eor	r24, r20
    2b60:	8c 93       	st	X, r24
    2b62:	27 c0       	rjmp	.+78     	; 0x2bb2 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTC :TOG_BIT( PORTC_REG,pin);break;
    2b64:	a5 e3       	ldi	r26, 0x35	; 53
    2b66:	b0 e0       	ldi	r27, 0x00	; 0
    2b68:	e5 e3       	ldi	r30, 0x35	; 53
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	80 81       	ld	r24, Z
    2b6e:	48 2f       	mov	r20, r24
    2b70:	8a 81       	ldd	r24, Y+2	; 0x02
    2b72:	28 2f       	mov	r18, r24
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	02 2e       	mov	r0, r18
    2b7c:	02 c0       	rjmp	.+4      	; 0x2b82 <M_Dio_void_togglePinValue+0xd8>
    2b7e:	88 0f       	add	r24, r24
    2b80:	99 1f       	adc	r25, r25
    2b82:	0a 94       	dec	r0
    2b84:	e2 f7       	brpl	.-8      	; 0x2b7e <M_Dio_void_togglePinValue+0xd4>
    2b86:	84 27       	eor	r24, r20
    2b88:	8c 93       	st	X, r24
    2b8a:	13 c0       	rjmp	.+38     	; 0x2bb2 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTD :TOG_BIT( PORTD_REG,pin);break;
    2b8c:	a2 e3       	ldi	r26, 0x32	; 50
    2b8e:	b0 e0       	ldi	r27, 0x00	; 0
    2b90:	e2 e3       	ldi	r30, 0x32	; 50
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	80 81       	ld	r24, Z
    2b96:	48 2f       	mov	r20, r24
    2b98:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9a:	28 2f       	mov	r18, r24
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	02 2e       	mov	r0, r18
    2ba4:	02 c0       	rjmp	.+4      	; 0x2baa <M_Dio_void_togglePinValue+0x100>
    2ba6:	88 0f       	add	r24, r24
    2ba8:	99 1f       	adc	r25, r25
    2baa:	0a 94       	dec	r0
    2bac:	e2 f7       	brpl	.-8      	; 0x2ba6 <M_Dio_void_togglePinValue+0xfc>
    2bae:	84 27       	eor	r24, r20
    2bb0:	8c 93       	st	X, r24
	}

}
    2bb2:	0f 90       	pop	r0
    2bb4:	0f 90       	pop	r0
    2bb6:	0f 90       	pop	r0
    2bb8:	0f 90       	pop	r0
    2bba:	0f 90       	pop	r0
    2bbc:	cf 91       	pop	r28
    2bbe:	df 91       	pop	r29
    2bc0:	08 95       	ret

00002bc2 <H_KEYPAD_u8_getPressedKey>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
u8 H_KEYPAD_u8_getPressedKey(void)
{
    2bc2:	df 93       	push	r29
    2bc4:	cf 93       	push	r28
    2bc6:	cd b7       	in	r28, 0x3d	; 61
    2bc8:	de b7       	in	r29, 0x3e	; 62
    2bca:	62 97       	sbiw	r28, 0x12	; 18
    2bcc:	0f b6       	in	r0, 0x3f	; 63
    2bce:	f8 94       	cli
    2bd0:	de bf       	out	0x3e, r29	; 62
    2bd2:	0f be       	out	0x3f, r0	; 63
    2bd4:	cd bf       	out	0x3d, r28	; 61
	u8 Local_Pressed_key=NO_PRESSED_KEY;
    2bd6:	19 8a       	std	Y+17, r1	; 0x11
	u8 ROW_Index;
	u8 COL_Index;
	for(ROW_Index=0;ROW_Index<4;ROW_Index++)
    2bd8:	18 8a       	std	Y+16, r1	; 0x10
    2bda:	c8 c0       	rjmp	.+400    	; 0x2d6c <H_KEYPAD_u8_getPressedKey+0x1aa>
	{
		M_Dio_void_setPinValue(ROWS_ARR[0], DIO_HIGH);
    2bdc:	80 91 48 02 	lds	r24, 0x0248
    2be0:	61 e0       	ldi	r22, 0x01	; 1
    2be2:	0e 94 c3 13 	call	0x2786	; 0x2786 <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(ROWS_ARR[1], DIO_HIGH);
    2be6:	80 91 49 02 	lds	r24, 0x0249
    2bea:	61 e0       	ldi	r22, 0x01	; 1
    2bec:	0e 94 c3 13 	call	0x2786	; 0x2786 <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(ROWS_ARR[2], DIO_HIGH);
    2bf0:	80 91 4a 02 	lds	r24, 0x024A
    2bf4:	61 e0       	ldi	r22, 0x01	; 1
    2bf6:	0e 94 c3 13 	call	0x2786	; 0x2786 <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(ROWS_ARR[3], DIO_HIGH);
    2bfa:	80 91 4b 02 	lds	r24, 0x024B
    2bfe:	61 e0       	ldi	r22, 0x01	; 1
    2c00:	0e 94 c3 13 	call	0x2786	; 0x2786 <M_Dio_void_setPinValue>

		M_Dio_void_setPinValue(ROWS_ARR[ROW_Index],DIO_LOW);
    2c04:	88 89       	ldd	r24, Y+16	; 0x10
    2c06:	88 2f       	mov	r24, r24
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	fc 01       	movw	r30, r24
    2c0c:	e8 5b       	subi	r30, 0xB8	; 184
    2c0e:	fd 4f       	sbci	r31, 0xFD	; 253
    2c10:	80 81       	ld	r24, Z
    2c12:	60 e0       	ldi	r22, 0x00	; 0
    2c14:	0e 94 c3 13 	call	0x2786	; 0x2786 <M_Dio_void_setPinValue>
		for(COL_Index=0;COL_Index<4;COL_Index++)
    2c18:	1f 86       	std	Y+15, r1	; 0x0f
    2c1a:	a1 c0       	rjmp	.+322    	; 0x2d5e <H_KEYPAD_u8_getPressedKey+0x19c>
		{
			if((M_Dio_en_getPinValue(COLS_ARR[COL_Index]))==DIO_LOW)
    2c1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c1e:	88 2f       	mov	r24, r24
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	fc 01       	movw	r30, r24
    2c24:	e4 5b       	subi	r30, 0xB4	; 180
    2c26:	fd 4f       	sbci	r31, 0xFD	; 253
    2c28:	80 81       	ld	r24, Z
    2c2a:	0e 94 3d 13 	call	0x267a	; 0x267a <M_Dio_en_getPinValue>
    2c2e:	88 23       	and	r24, r24
    2c30:	09 f0       	breq	.+2      	; 0x2c34 <H_KEYPAD_u8_getPressedKey+0x72>
    2c32:	92 c0       	rjmp	.+292    	; 0x2d58 <H_KEYPAD_u8_getPressedKey+0x196>
    2c34:	80 e0       	ldi	r24, 0x00	; 0
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	a8 e4       	ldi	r26, 0x48	; 72
    2c3a:	b2 e4       	ldi	r27, 0x42	; 66
    2c3c:	8b 87       	std	Y+11, r24	; 0x0b
    2c3e:	9c 87       	std	Y+12, r25	; 0x0c
    2c40:	ad 87       	std	Y+13, r26	; 0x0d
    2c42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c44:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c46:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	4a e7       	ldi	r20, 0x7A	; 122
    2c52:	55 e4       	ldi	r21, 0x45	; 69
    2c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	8f 83       	std	Y+7, r24	; 0x07
    2c5e:	98 87       	std	Y+8, r25	; 0x08
    2c60:	a9 87       	std	Y+9, r26	; 0x09
    2c62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c64:	6f 81       	ldd	r22, Y+7	; 0x07
    2c66:	78 85       	ldd	r23, Y+8	; 0x08
    2c68:	89 85       	ldd	r24, Y+9	; 0x09
    2c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	40 e8       	ldi	r20, 0x80	; 128
    2c72:	5f e3       	ldi	r21, 0x3F	; 63
    2c74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c78:	88 23       	and	r24, r24
    2c7a:	2c f4       	brge	.+10     	; 0x2c86 <H_KEYPAD_u8_getPressedKey+0xc4>
		__ticks = 1;
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	9e 83       	std	Y+6, r25	; 0x06
    2c82:	8d 83       	std	Y+5, r24	; 0x05
    2c84:	3f c0       	rjmp	.+126    	; 0x2d04 <H_KEYPAD_u8_getPressedKey+0x142>
	else if (__tmp > 65535)
    2c86:	6f 81       	ldd	r22, Y+7	; 0x07
    2c88:	78 85       	ldd	r23, Y+8	; 0x08
    2c8a:	89 85       	ldd	r24, Y+9	; 0x09
    2c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	3f ef       	ldi	r19, 0xFF	; 255
    2c92:	4f e7       	ldi	r20, 0x7F	; 127
    2c94:	57 e4       	ldi	r21, 0x47	; 71
    2c96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c9a:	18 16       	cp	r1, r24
    2c9c:	4c f5       	brge	.+82     	; 0x2cf0 <H_KEYPAD_u8_getPressedKey+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ca0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ca2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	40 e2       	ldi	r20, 0x20	; 32
    2cac:	51 e4       	ldi	r21, 0x41	; 65
    2cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	bc 01       	movw	r22, r24
    2cb8:	cd 01       	movw	r24, r26
    2cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	9e 83       	std	Y+6, r25	; 0x06
    2cc4:	8d 83       	std	Y+5, r24	; 0x05
    2cc6:	0f c0       	rjmp	.+30     	; 0x2ce6 <H_KEYPAD_u8_getPressedKey+0x124>
    2cc8:	80 e9       	ldi	r24, 0x90	; 144
    2cca:	91 e0       	ldi	r25, 0x01	; 1
    2ccc:	9c 83       	std	Y+4, r25	; 0x04
    2cce:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd4:	01 97       	sbiw	r24, 0x01	; 1
    2cd6:	f1 f7       	brne	.-4      	; 0x2cd4 <H_KEYPAD_u8_getPressedKey+0x112>
    2cd8:	9c 83       	std	Y+4, r25	; 0x04
    2cda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cde:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce0:	01 97       	sbiw	r24, 0x01	; 1
    2ce2:	9e 83       	std	Y+6, r25	; 0x06
    2ce4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cea:	00 97       	sbiw	r24, 0x00	; 0
    2cec:	69 f7       	brne	.-38     	; 0x2cc8 <H_KEYPAD_u8_getPressedKey+0x106>
    2cee:	14 c0       	rjmp	.+40     	; 0x2d18 <H_KEYPAD_u8_getPressedKey+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf0:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf2:	78 85       	ldd	r23, Y+8	; 0x08
    2cf4:	89 85       	ldd	r24, Y+9	; 0x09
    2cf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	cb 01       	movw	r24, r22
    2d00:	9e 83       	std	Y+6, r25	; 0x06
    2d02:	8d 83       	std	Y+5, r24	; 0x05
    2d04:	8d 81       	ldd	r24, Y+5	; 0x05
    2d06:	9e 81       	ldd	r25, Y+6	; 0x06
    2d08:	9a 83       	std	Y+2, r25	; 0x02
    2d0a:	89 83       	std	Y+1, r24	; 0x01
    2d0c:	89 81       	ldd	r24, Y+1	; 0x01
    2d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d10:	01 97       	sbiw	r24, 0x01	; 1
    2d12:	f1 f7       	brne	.-4      	; 0x2d10 <H_KEYPAD_u8_getPressedKey+0x14e>
    2d14:	9a 83       	std	Y+2, r25	; 0x02
    2d16:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(50);
				while(M_Dio_en_getPinValue(COLS_ARR[COL_Index])==DIO_LOW);
    2d18:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d1a:	88 2f       	mov	r24, r24
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	fc 01       	movw	r30, r24
    2d20:	e4 5b       	subi	r30, 0xB4	; 180
    2d22:	fd 4f       	sbci	r31, 0xFD	; 253
    2d24:	80 81       	ld	r24, Z
    2d26:	0e 94 3d 13 	call	0x267a	; 0x267a <M_Dio_en_getPinValue>
    2d2a:	88 23       	and	r24, r24
    2d2c:	a9 f3       	breq	.-22     	; 0x2d18 <H_KEYPAD_u8_getPressedKey+0x156>
				Local_Pressed_key= KPD_KEYS_CALC[ROW_Index][COL_Index];
    2d2e:	88 89       	ldd	r24, Y+16	; 0x10
    2d30:	48 2f       	mov	r20, r24
    2d32:	50 e0       	ldi	r21, 0x00	; 0
    2d34:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d36:	28 2f       	mov	r18, r24
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	ca 01       	movw	r24, r20
    2d3c:	88 0f       	add	r24, r24
    2d3e:	99 1f       	adc	r25, r25
    2d40:	88 0f       	add	r24, r24
    2d42:	99 1f       	adc	r25, r25
    2d44:	82 0f       	add	r24, r18
    2d46:	93 1f       	adc	r25, r19
    2d48:	fc 01       	movw	r30, r24
    2d4a:	e8 5c       	subi	r30, 0xC8	; 200
    2d4c:	fd 4f       	sbci	r31, 0xFD	; 253
    2d4e:	80 81       	ld	r24, Z
    2d50:	89 8b       	std	Y+17, r24	; 0x11
				//M_Dio_void_setPinValue(DIO_PB7,DIO_HIGH);
				//_delay_ms(50);
				//M_Dio_void_setPinValue(DIO_PB7,DIO_LOW);
				return Local_Pressed_key;
    2d52:	89 89       	ldd	r24, Y+17	; 0x11
    2d54:	8a 8b       	std	Y+18, r24	; 0x12
    2d56:	10 c0       	rjmp	.+32     	; 0x2d78 <H_KEYPAD_u8_getPressedKey+0x1b6>
		M_Dio_void_setPinValue(ROWS_ARR[1], DIO_HIGH);
		M_Dio_void_setPinValue(ROWS_ARR[2], DIO_HIGH);
		M_Dio_void_setPinValue(ROWS_ARR[3], DIO_HIGH);

		M_Dio_void_setPinValue(ROWS_ARR[ROW_Index],DIO_LOW);
		for(COL_Index=0;COL_Index<4;COL_Index++)
    2d58:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d5a:	8f 5f       	subi	r24, 0xFF	; 255
    2d5c:	8f 87       	std	Y+15, r24	; 0x0f
    2d5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d60:	84 30       	cpi	r24, 0x04	; 4
    2d62:	08 f4       	brcc	.+2      	; 0x2d66 <H_KEYPAD_u8_getPressedKey+0x1a4>
    2d64:	5b cf       	rjmp	.-330    	; 0x2c1c <H_KEYPAD_u8_getPressedKey+0x5a>
u8 H_KEYPAD_u8_getPressedKey(void)
{
	u8 Local_Pressed_key=NO_PRESSED_KEY;
	u8 ROW_Index;
	u8 COL_Index;
	for(ROW_Index=0;ROW_Index<4;ROW_Index++)
    2d66:	88 89       	ldd	r24, Y+16	; 0x10
    2d68:	8f 5f       	subi	r24, 0xFF	; 255
    2d6a:	88 8b       	std	Y+16, r24	; 0x10
    2d6c:	88 89       	ldd	r24, Y+16	; 0x10
    2d6e:	84 30       	cpi	r24, 0x04	; 4
    2d70:	08 f4       	brcc	.+2      	; 0x2d74 <H_KEYPAD_u8_getPressedKey+0x1b2>
    2d72:	34 cf       	rjmp	.-408    	; 0x2bdc <H_KEYPAD_u8_getPressedKey+0x1a>
				//M_Dio_void_setPinValue(DIO_PB7,DIO_LOW);
				return Local_Pressed_key;
			}
		}
	}
	return Local_Pressed_key;
    2d74:	89 89       	ldd	r24, Y+17	; 0x11
    2d76:	8a 8b       	std	Y+18, r24	; 0x12
    2d78:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2d7a:	62 96       	adiw	r28, 0x12	; 18
    2d7c:	0f b6       	in	r0, 0x3f	; 63
    2d7e:	f8 94       	cli
    2d80:	de bf       	out	0x3e, r29	; 62
    2d82:	0f be       	out	0x3f, r0	; 63
    2d84:	cd bf       	out	0x3d, r28	; 61
    2d86:	cf 91       	pop	r28
    2d88:	df 91       	pop	r29
    2d8a:	08 95       	ret

00002d8c <H_DC_MOTOR_START>:
#include"DC_MOTOR_Private.h"
#include"DC_MOTOR_Types.h"
#include"DC_MOTOR_Init.h"

void H_DC_MOTOR_START(u32 PWM_FREQ,u8 DUTY_CYCLE,DC_M_DIR MOTOR_DIRECTION)
{
    2d8c:	df 93       	push	r29
    2d8e:	cf 93       	push	r28
    2d90:	cd b7       	in	r28, 0x3d	; 61
    2d92:	de b7       	in	r29, 0x3e	; 62
    2d94:	28 97       	sbiw	r28, 0x08	; 8
    2d96:	0f b6       	in	r0, 0x3f	; 63
    2d98:	f8 94       	cli
    2d9a:	de bf       	out	0x3e, r29	; 62
    2d9c:	0f be       	out	0x3f, r0	; 63
    2d9e:	cd bf       	out	0x3d, r28	; 61
    2da0:	69 83       	std	Y+1, r22	; 0x01
    2da2:	7a 83       	std	Y+2, r23	; 0x02
    2da4:	8b 83       	std	Y+3, r24	; 0x03
    2da6:	9c 83       	std	Y+4, r25	; 0x04
    2da8:	4d 83       	std	Y+5, r20	; 0x05
    2daa:	2e 83       	std	Y+6, r18	; 0x06
	M_void_Timer_Init(Phase_Correct_PWM,Non_Invering_Mode);
    2dac:	83 e0       	ldi	r24, 0x03	; 3
    2dae:	65 e0       	ldi	r22, 0x05	; 5
    2db0:	0e 94 84 08 	call	0x1108	; 0x1108 <M_void_Timer_Init>

	M_TIMER0_PHASE_PWM_SET(Non_Invering_Mode,PWM_FREQ,DUTY_CYCLE);
    2db4:	29 81       	ldd	r18, Y+1	; 0x01
    2db6:	3a 81       	ldd	r19, Y+2	; 0x02
    2db8:	4b 81       	ldd	r20, Y+3	; 0x03
    2dba:	5c 81       	ldd	r21, Y+4	; 0x04
    2dbc:	85 e0       	ldi	r24, 0x05	; 5
    2dbe:	ba 01       	movw	r22, r20
    2dc0:	a9 01       	movw	r20, r18
    2dc2:	2d 81       	ldd	r18, Y+5	; 0x05
    2dc4:	0e 94 82 0c 	call	0x1904	; 0x1904 <M_TIMER0_PHASE_PWM_SET>
	switch(MOTOR_DIRECTION)
    2dc8:	8e 81       	ldd	r24, Y+6	; 0x06
    2dca:	28 2f       	mov	r18, r24
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	38 87       	std	Y+8, r19	; 0x08
    2dd0:	2f 83       	std	Y+7, r18	; 0x07
    2dd2:	8f 81       	ldd	r24, Y+7	; 0x07
    2dd4:	98 85       	ldd	r25, Y+8	; 0x08
    2dd6:	81 30       	cpi	r24, 0x01	; 1
    2dd8:	91 05       	cpc	r25, r1
    2dda:	31 f0       	breq	.+12     	; 0x2de8 <H_DC_MOTOR_START+0x5c>
    2ddc:	2f 81       	ldd	r18, Y+7	; 0x07
    2dde:	38 85       	ldd	r19, Y+8	; 0x08
    2de0:	22 30       	cpi	r18, 0x02	; 2
    2de2:	31 05       	cpc	r19, r1
    2de4:	51 f0       	breq	.+20     	; 0x2dfa <H_DC_MOTOR_START+0x6e>
    2de6:	11 c0       	rjmp	.+34     	; 0x2e0a <H_DC_MOTOR_START+0x7e>
	{
	case FORWARD_DIRECTION:
		M_Dio_void_setPinValue(DIO_PD0,DIO_HIGH);
    2de8:	88 e2       	ldi	r24, 0x28	; 40
    2dea:	61 e0       	ldi	r22, 0x01	; 1
    2dec:	0e 94 c3 13 	call	0x2786	; 0x2786 <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(DIO_PD1,DIO_LOW);
    2df0:	89 e2       	ldi	r24, 0x29	; 41
    2df2:	60 e0       	ldi	r22, 0x00	; 0
    2df4:	0e 94 c3 13 	call	0x2786	; 0x2786 <M_Dio_void_setPinValue>
    2df8:	08 c0       	rjmp	.+16     	; 0x2e0a <H_DC_MOTOR_START+0x7e>
		break;
	case BACKWARD_DIRECTION:
		M_Dio_void_setPinValue(DIO_PD0,DIO_LOW);
    2dfa:	88 e2       	ldi	r24, 0x28	; 40
    2dfc:	60 e0       	ldi	r22, 0x00	; 0
    2dfe:	0e 94 c3 13 	call	0x2786	; 0x2786 <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(DIO_PD1,DIO_HIGH);
    2e02:	89 e2       	ldi	r24, 0x29	; 41
    2e04:	61 e0       	ldi	r22, 0x01	; 1
    2e06:	0e 94 c3 13 	call	0x2786	; 0x2786 <M_Dio_void_setPinValue>
		break;
	default:
		break;
	}
}
    2e0a:	28 96       	adiw	r28, 0x08	; 8
    2e0c:	0f b6       	in	r0, 0x3f	; 63
    2e0e:	f8 94       	cli
    2e10:	de bf       	out	0x3e, r29	; 62
    2e12:	0f be       	out	0x3f, r0	; 63
    2e14:	cd bf       	out	0x3d, r28	; 61
    2e16:	cf 91       	pop	r28
    2e18:	df 91       	pop	r29
    2e1a:	08 95       	ret

00002e1c <H_DC_MOTOR_STOP>:
void H_DC_MOTOR_STOP(void)
{
    2e1c:	df 93       	push	r29
    2e1e:	cf 93       	push	r28
    2e20:	cd b7       	in	r28, 0x3d	; 61
    2e22:	de b7       	in	r29, 0x3e	; 62
	M_void_Timer_Init(Phase_Correct_PWM,Normal_Port);
    2e24:	83 e0       	ldi	r24, 0x03	; 3
    2e26:	60 e0       	ldi	r22, 0x00	; 0
    2e28:	0e 94 84 08 	call	0x1108	; 0x1108 <M_void_Timer_Init>
	M_void_Timer_stop();
    2e2c:	0e 94 b5 0a 	call	0x156a	; 0x156a <M_void_Timer_stop>
}
    2e30:	cf 91       	pop	r28
    2e32:	df 91       	pop	r29
    2e34:	08 95       	ret

00002e36 <H_LCD_void_latchByte>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
    2e36:	df 93       	push	r29
    2e38:	cf 93       	push	r28
    2e3a:	cd b7       	in	r28, 0x3d	; 61
    2e3c:	de b7       	in	r29, 0x3e	; 62
    2e3e:	ab 97       	sbiw	r28, 0x2b	; 43
    2e40:	0f b6       	in	r0, 0x3f	; 63
    2e42:	f8 94       	cli
    2e44:	de bf       	out	0x3e, r29	; 62
    2e46:	0f be       	out	0x3f, r0	; 63
    2e48:	cd bf       	out	0x3d, r28	; 61
    2e4a:	8b a7       	std	Y+43, r24	; 0x2b
#if(LCD_MODE == _4_BIT_MODE)
	//enable = zero
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
    2e4c:	8c e0       	ldi	r24, 0x0C	; 12
    2e4e:	60 e0       	ldi	r22, 0x00	; 0
    2e50:	0e 94 c3 13 	call	0x2786	; 0x2786 <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_D4,GET_BIT(copy_u8Byte,4));
    2e54:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e56:	82 95       	swap	r24
    2e58:	8f 70       	andi	r24, 0x0F	; 15
    2e5a:	98 2f       	mov	r25, r24
    2e5c:	91 70       	andi	r25, 0x01	; 1
    2e5e:	84 e1       	ldi	r24, 0x14	; 20
    2e60:	69 2f       	mov	r22, r25
    2e62:	0e 94 c3 13 	call	0x2786	; 0x2786 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D5,GET_BIT(copy_u8Byte,5));
    2e66:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e68:	82 95       	swap	r24
    2e6a:	86 95       	lsr	r24
    2e6c:	87 70       	andi	r24, 0x07	; 7
    2e6e:	98 2f       	mov	r25, r24
    2e70:	91 70       	andi	r25, 0x01	; 1
    2e72:	85 e1       	ldi	r24, 0x15	; 21
    2e74:	69 2f       	mov	r22, r25
    2e76:	0e 94 c3 13 	call	0x2786	; 0x2786 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D6,GET_BIT(copy_u8Byte,6));
    2e7a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e7c:	82 95       	swap	r24
    2e7e:	86 95       	lsr	r24
    2e80:	86 95       	lsr	r24
    2e82:	83 70       	andi	r24, 0x03	; 3
    2e84:	98 2f       	mov	r25, r24
    2e86:	91 70       	andi	r25, 0x01	; 1
    2e88:	86 e1       	ldi	r24, 0x16	; 22
    2e8a:	69 2f       	mov	r22, r25
    2e8c:	0e 94 c3 13 	call	0x2786	; 0x2786 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D7,GET_BIT(copy_u8Byte,7));
    2e90:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e92:	98 2f       	mov	r25, r24
    2e94:	99 1f       	adc	r25, r25
    2e96:	99 27       	eor	r25, r25
    2e98:	99 1f       	adc	r25, r25
    2e9a:	88 e1       	ldi	r24, 0x18	; 24
    2e9c:	69 2f       	mov	r22, r25
    2e9e:	0e 94 c3 13 	call	0x2786	; 0x2786 <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_HIGH);
    2ea2:	8c e0       	ldi	r24, 0x0C	; 12
    2ea4:	61 e0       	ldi	r22, 0x01	; 1
    2ea6:	0e 94 c3 13 	call	0x2786	; 0x2786 <M_Dio_void_setPinValue>
    2eaa:	80 e0       	ldi	r24, 0x00	; 0
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	a0 e8       	ldi	r26, 0x80	; 128
    2eb0:	bf e3       	ldi	r27, 0x3F	; 63
    2eb2:	8f a3       	std	Y+39, r24	; 0x27
    2eb4:	98 a7       	std	Y+40, r25	; 0x28
    2eb6:	a9 a7       	std	Y+41, r26	; 0x29
    2eb8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eba:	6f a1       	ldd	r22, Y+39	; 0x27
    2ebc:	78 a5       	ldd	r23, Y+40	; 0x28
    2ebe:	89 a5       	ldd	r24, Y+41	; 0x29
    2ec0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	4a e7       	ldi	r20, 0x7A	; 122
    2ec8:	55 e4       	ldi	r21, 0x45	; 69
    2eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ece:	dc 01       	movw	r26, r24
    2ed0:	cb 01       	movw	r24, r22
    2ed2:	8b a3       	std	Y+35, r24	; 0x23
    2ed4:	9c a3       	std	Y+36, r25	; 0x24
    2ed6:	ad a3       	std	Y+37, r26	; 0x25
    2ed8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2eda:	6b a1       	ldd	r22, Y+35	; 0x23
    2edc:	7c a1       	ldd	r23, Y+36	; 0x24
    2ede:	8d a1       	ldd	r24, Y+37	; 0x25
    2ee0:	9e a1       	ldd	r25, Y+38	; 0x26
    2ee2:	20 e0       	ldi	r18, 0x00	; 0
    2ee4:	30 e0       	ldi	r19, 0x00	; 0
    2ee6:	40 e8       	ldi	r20, 0x80	; 128
    2ee8:	5f e3       	ldi	r21, 0x3F	; 63
    2eea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eee:	88 23       	and	r24, r24
    2ef0:	2c f4       	brge	.+10     	; 0x2efc <H_LCD_void_latchByte+0xc6>
		__ticks = 1;
    2ef2:	81 e0       	ldi	r24, 0x01	; 1
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	9a a3       	std	Y+34, r25	; 0x22
    2ef8:	89 a3       	std	Y+33, r24	; 0x21
    2efa:	3f c0       	rjmp	.+126    	; 0x2f7a <H_LCD_void_latchByte+0x144>
	else if (__tmp > 65535)
    2efc:	6b a1       	ldd	r22, Y+35	; 0x23
    2efe:	7c a1       	ldd	r23, Y+36	; 0x24
    2f00:	8d a1       	ldd	r24, Y+37	; 0x25
    2f02:	9e a1       	ldd	r25, Y+38	; 0x26
    2f04:	20 e0       	ldi	r18, 0x00	; 0
    2f06:	3f ef       	ldi	r19, 0xFF	; 255
    2f08:	4f e7       	ldi	r20, 0x7F	; 127
    2f0a:	57 e4       	ldi	r21, 0x47	; 71
    2f0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f10:	18 16       	cp	r1, r24
    2f12:	4c f5       	brge	.+82     	; 0x2f66 <H_LCD_void_latchByte+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f14:	6f a1       	ldd	r22, Y+39	; 0x27
    2f16:	78 a5       	ldd	r23, Y+40	; 0x28
    2f18:	89 a5       	ldd	r24, Y+41	; 0x29
    2f1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	40 e2       	ldi	r20, 0x20	; 32
    2f22:	51 e4       	ldi	r21, 0x41	; 65
    2f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f28:	dc 01       	movw	r26, r24
    2f2a:	cb 01       	movw	r24, r22
    2f2c:	bc 01       	movw	r22, r24
    2f2e:	cd 01       	movw	r24, r26
    2f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	9a a3       	std	Y+34, r25	; 0x22
    2f3a:	89 a3       	std	Y+33, r24	; 0x21
    2f3c:	0f c0       	rjmp	.+30     	; 0x2f5c <H_LCD_void_latchByte+0x126>
    2f3e:	80 e9       	ldi	r24, 0x90	; 144
    2f40:	91 e0       	ldi	r25, 0x01	; 1
    2f42:	98 a3       	std	Y+32, r25	; 0x20
    2f44:	8f 8f       	std	Y+31, r24	; 0x1f
    2f46:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f48:	98 a1       	ldd	r25, Y+32	; 0x20
    2f4a:	01 97       	sbiw	r24, 0x01	; 1
    2f4c:	f1 f7       	brne	.-4      	; 0x2f4a <H_LCD_void_latchByte+0x114>
    2f4e:	98 a3       	std	Y+32, r25	; 0x20
    2f50:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f52:	89 a1       	ldd	r24, Y+33	; 0x21
    2f54:	9a a1       	ldd	r25, Y+34	; 0x22
    2f56:	01 97       	sbiw	r24, 0x01	; 1
    2f58:	9a a3       	std	Y+34, r25	; 0x22
    2f5a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f5c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f5e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f60:	00 97       	sbiw	r24, 0x00	; 0
    2f62:	69 f7       	brne	.-38     	; 0x2f3e <H_LCD_void_latchByte+0x108>
    2f64:	14 c0       	rjmp	.+40     	; 0x2f8e <H_LCD_void_latchByte+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f66:	6b a1       	ldd	r22, Y+35	; 0x23
    2f68:	7c a1       	ldd	r23, Y+36	; 0x24
    2f6a:	8d a1       	ldd	r24, Y+37	; 0x25
    2f6c:	9e a1       	ldd	r25, Y+38	; 0x26
    2f6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f72:	dc 01       	movw	r26, r24
    2f74:	cb 01       	movw	r24, r22
    2f76:	9a a3       	std	Y+34, r25	; 0x22
    2f78:	89 a3       	std	Y+33, r24	; 0x21
    2f7a:	89 a1       	ldd	r24, Y+33	; 0x21
    2f7c:	9a a1       	ldd	r25, Y+34	; 0x22
    2f7e:	9e 8f       	std	Y+30, r25	; 0x1e
    2f80:	8d 8f       	std	Y+29, r24	; 0x1d
    2f82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f86:	01 97       	sbiw	r24, 0x01	; 1
    2f88:	f1 f7       	brne	.-4      	; 0x2f86 <H_LCD_void_latchByte+0x150>
    2f8a:	9e 8f       	std	Y+30, r25	; 0x1e
    2f8c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
    2f8e:	8c e0       	ldi	r24, 0x0C	; 12
    2f90:	60 e0       	ldi	r22, 0x00	; 0
    2f92:	0e 94 c3 13 	call	0x2786	; 0x2786 <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_D4,GET_BIT(copy_u8Byte,0));
    2f96:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f98:	98 2f       	mov	r25, r24
    2f9a:	91 70       	andi	r25, 0x01	; 1
    2f9c:	84 e1       	ldi	r24, 0x14	; 20
    2f9e:	69 2f       	mov	r22, r25
    2fa0:	0e 94 c3 13 	call	0x2786	; 0x2786 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D5,GET_BIT(copy_u8Byte,1));
    2fa4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fa6:	86 95       	lsr	r24
    2fa8:	98 2f       	mov	r25, r24
    2faa:	91 70       	andi	r25, 0x01	; 1
    2fac:	85 e1       	ldi	r24, 0x15	; 21
    2fae:	69 2f       	mov	r22, r25
    2fb0:	0e 94 c3 13 	call	0x2786	; 0x2786 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D6,GET_BIT(copy_u8Byte,2));
    2fb4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fb6:	86 95       	lsr	r24
    2fb8:	86 95       	lsr	r24
    2fba:	98 2f       	mov	r25, r24
    2fbc:	91 70       	andi	r25, 0x01	; 1
    2fbe:	86 e1       	ldi	r24, 0x16	; 22
    2fc0:	69 2f       	mov	r22, r25
    2fc2:	0e 94 c3 13 	call	0x2786	; 0x2786 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D7,GET_BIT(copy_u8Byte,3));
    2fc6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fc8:	86 95       	lsr	r24
    2fca:	86 95       	lsr	r24
    2fcc:	86 95       	lsr	r24
    2fce:	98 2f       	mov	r25, r24
    2fd0:	91 70       	andi	r25, 0x01	; 1
    2fd2:	88 e1       	ldi	r24, 0x18	; 24
    2fd4:	69 2f       	mov	r22, r25
    2fd6:	0e 94 c3 13 	call	0x2786	; 0x2786 <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_HIGH);
    2fda:	8c e0       	ldi	r24, 0x0C	; 12
    2fdc:	61 e0       	ldi	r22, 0x01	; 1
    2fde:	0e 94 c3 13 	call	0x2786	; 0x2786 <M_Dio_void_setPinValue>
    2fe2:	80 e0       	ldi	r24, 0x00	; 0
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	a0 e8       	ldi	r26, 0x80	; 128
    2fe8:	bf e3       	ldi	r27, 0x3F	; 63
    2fea:	89 8f       	std	Y+25, r24	; 0x19
    2fec:	9a 8f       	std	Y+26, r25	; 0x1a
    2fee:	ab 8f       	std	Y+27, r26	; 0x1b
    2ff0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ff4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ff6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ff8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ffa:	20 e0       	ldi	r18, 0x00	; 0
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	4a e7       	ldi	r20, 0x7A	; 122
    3000:	55 e4       	ldi	r21, 0x45	; 69
    3002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3006:	dc 01       	movw	r26, r24
    3008:	cb 01       	movw	r24, r22
    300a:	8d 8b       	std	Y+21, r24	; 0x15
    300c:	9e 8b       	std	Y+22, r25	; 0x16
    300e:	af 8b       	std	Y+23, r26	; 0x17
    3010:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3012:	6d 89       	ldd	r22, Y+21	; 0x15
    3014:	7e 89       	ldd	r23, Y+22	; 0x16
    3016:	8f 89       	ldd	r24, Y+23	; 0x17
    3018:	98 8d       	ldd	r25, Y+24	; 0x18
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	40 e8       	ldi	r20, 0x80	; 128
    3020:	5f e3       	ldi	r21, 0x3F	; 63
    3022:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3026:	88 23       	and	r24, r24
    3028:	2c f4       	brge	.+10     	; 0x3034 <H_LCD_void_latchByte+0x1fe>
		__ticks = 1;
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	9c 8b       	std	Y+20, r25	; 0x14
    3030:	8b 8b       	std	Y+19, r24	; 0x13
    3032:	3f c0       	rjmp	.+126    	; 0x30b2 <H_LCD_void_latchByte+0x27c>
	else if (__tmp > 65535)
    3034:	6d 89       	ldd	r22, Y+21	; 0x15
    3036:	7e 89       	ldd	r23, Y+22	; 0x16
    3038:	8f 89       	ldd	r24, Y+23	; 0x17
    303a:	98 8d       	ldd	r25, Y+24	; 0x18
    303c:	20 e0       	ldi	r18, 0x00	; 0
    303e:	3f ef       	ldi	r19, 0xFF	; 255
    3040:	4f e7       	ldi	r20, 0x7F	; 127
    3042:	57 e4       	ldi	r21, 0x47	; 71
    3044:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3048:	18 16       	cp	r1, r24
    304a:	4c f5       	brge	.+82     	; 0x309e <H_LCD_void_latchByte+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    304c:	69 8d       	ldd	r22, Y+25	; 0x19
    304e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3050:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3052:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	40 e2       	ldi	r20, 0x20	; 32
    305a:	51 e4       	ldi	r21, 0x41	; 65
    305c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3060:	dc 01       	movw	r26, r24
    3062:	cb 01       	movw	r24, r22
    3064:	bc 01       	movw	r22, r24
    3066:	cd 01       	movw	r24, r26
    3068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306c:	dc 01       	movw	r26, r24
    306e:	cb 01       	movw	r24, r22
    3070:	9c 8b       	std	Y+20, r25	; 0x14
    3072:	8b 8b       	std	Y+19, r24	; 0x13
    3074:	0f c0       	rjmp	.+30     	; 0x3094 <H_LCD_void_latchByte+0x25e>
    3076:	80 e9       	ldi	r24, 0x90	; 144
    3078:	91 e0       	ldi	r25, 0x01	; 1
    307a:	9a 8b       	std	Y+18, r25	; 0x12
    307c:	89 8b       	std	Y+17, r24	; 0x11
    307e:	89 89       	ldd	r24, Y+17	; 0x11
    3080:	9a 89       	ldd	r25, Y+18	; 0x12
    3082:	01 97       	sbiw	r24, 0x01	; 1
    3084:	f1 f7       	brne	.-4      	; 0x3082 <H_LCD_void_latchByte+0x24c>
    3086:	9a 8b       	std	Y+18, r25	; 0x12
    3088:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    308a:	8b 89       	ldd	r24, Y+19	; 0x13
    308c:	9c 89       	ldd	r25, Y+20	; 0x14
    308e:	01 97       	sbiw	r24, 0x01	; 1
    3090:	9c 8b       	std	Y+20, r25	; 0x14
    3092:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3094:	8b 89       	ldd	r24, Y+19	; 0x13
    3096:	9c 89       	ldd	r25, Y+20	; 0x14
    3098:	00 97       	sbiw	r24, 0x00	; 0
    309a:	69 f7       	brne	.-38     	; 0x3076 <H_LCD_void_latchByte+0x240>
    309c:	14 c0       	rjmp	.+40     	; 0x30c6 <H_LCD_void_latchByte+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    309e:	6d 89       	ldd	r22, Y+21	; 0x15
    30a0:	7e 89       	ldd	r23, Y+22	; 0x16
    30a2:	8f 89       	ldd	r24, Y+23	; 0x17
    30a4:	98 8d       	ldd	r25, Y+24	; 0x18
    30a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30aa:	dc 01       	movw	r26, r24
    30ac:	cb 01       	movw	r24, r22
    30ae:	9c 8b       	std	Y+20, r25	; 0x14
    30b0:	8b 8b       	std	Y+19, r24	; 0x13
    30b2:	8b 89       	ldd	r24, Y+19	; 0x13
    30b4:	9c 89       	ldd	r25, Y+20	; 0x14
    30b6:	98 8b       	std	Y+16, r25	; 0x10
    30b8:	8f 87       	std	Y+15, r24	; 0x0f
    30ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    30bc:	98 89       	ldd	r25, Y+16	; 0x10
    30be:	01 97       	sbiw	r24, 0x01	; 1
    30c0:	f1 f7       	brne	.-4      	; 0x30be <H_LCD_void_latchByte+0x288>
    30c2:	98 8b       	std	Y+16, r25	; 0x10
    30c4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
    30c6:	8c e0       	ldi	r24, 0x0C	; 12
    30c8:	60 e0       	ldi	r22, 0x00	; 0
    30ca:	0e 94 c3 13 	call	0x2786	; 0x2786 <M_Dio_void_setPinValue>
    30ce:	80 e0       	ldi	r24, 0x00	; 0
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	a0 ef       	ldi	r26, 0xF0	; 240
    30d4:	b1 e4       	ldi	r27, 0x41	; 65
    30d6:	8b 87       	std	Y+11, r24	; 0x0b
    30d8:	9c 87       	std	Y+12, r25	; 0x0c
    30da:	ad 87       	std	Y+13, r26	; 0x0d
    30dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30de:	6b 85       	ldd	r22, Y+11	; 0x0b
    30e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    30e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    30e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    30e6:	20 e0       	ldi	r18, 0x00	; 0
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	4a e7       	ldi	r20, 0x7A	; 122
    30ec:	55 e4       	ldi	r21, 0x45	; 69
    30ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f2:	dc 01       	movw	r26, r24
    30f4:	cb 01       	movw	r24, r22
    30f6:	8f 83       	std	Y+7, r24	; 0x07
    30f8:	98 87       	std	Y+8, r25	; 0x08
    30fa:	a9 87       	std	Y+9, r26	; 0x09
    30fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3100:	78 85       	ldd	r23, Y+8	; 0x08
    3102:	89 85       	ldd	r24, Y+9	; 0x09
    3104:	9a 85       	ldd	r25, Y+10	; 0x0a
    3106:	20 e0       	ldi	r18, 0x00	; 0
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	40 e8       	ldi	r20, 0x80	; 128
    310c:	5f e3       	ldi	r21, 0x3F	; 63
    310e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3112:	88 23       	and	r24, r24
    3114:	2c f4       	brge	.+10     	; 0x3120 <H_LCD_void_latchByte+0x2ea>
		__ticks = 1;
    3116:	81 e0       	ldi	r24, 0x01	; 1
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	9e 83       	std	Y+6, r25	; 0x06
    311c:	8d 83       	std	Y+5, r24	; 0x05
    311e:	3f c0       	rjmp	.+126    	; 0x319e <H_LCD_void_latchByte+0x368>
	else if (__tmp > 65535)
    3120:	6f 81       	ldd	r22, Y+7	; 0x07
    3122:	78 85       	ldd	r23, Y+8	; 0x08
    3124:	89 85       	ldd	r24, Y+9	; 0x09
    3126:	9a 85       	ldd	r25, Y+10	; 0x0a
    3128:	20 e0       	ldi	r18, 0x00	; 0
    312a:	3f ef       	ldi	r19, 0xFF	; 255
    312c:	4f e7       	ldi	r20, 0x7F	; 127
    312e:	57 e4       	ldi	r21, 0x47	; 71
    3130:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3134:	18 16       	cp	r1, r24
    3136:	4c f5       	brge	.+82     	; 0x318a <H_LCD_void_latchByte+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3138:	6b 85       	ldd	r22, Y+11	; 0x0b
    313a:	7c 85       	ldd	r23, Y+12	; 0x0c
    313c:	8d 85       	ldd	r24, Y+13	; 0x0d
    313e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3140:	20 e0       	ldi	r18, 0x00	; 0
    3142:	30 e0       	ldi	r19, 0x00	; 0
    3144:	40 e2       	ldi	r20, 0x20	; 32
    3146:	51 e4       	ldi	r21, 0x41	; 65
    3148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	bc 01       	movw	r22, r24
    3152:	cd 01       	movw	r24, r26
    3154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3158:	dc 01       	movw	r26, r24
    315a:	cb 01       	movw	r24, r22
    315c:	9e 83       	std	Y+6, r25	; 0x06
    315e:	8d 83       	std	Y+5, r24	; 0x05
    3160:	0f c0       	rjmp	.+30     	; 0x3180 <H_LCD_void_latchByte+0x34a>
    3162:	80 e9       	ldi	r24, 0x90	; 144
    3164:	91 e0       	ldi	r25, 0x01	; 1
    3166:	9c 83       	std	Y+4, r25	; 0x04
    3168:	8b 83       	std	Y+3, r24	; 0x03
    316a:	8b 81       	ldd	r24, Y+3	; 0x03
    316c:	9c 81       	ldd	r25, Y+4	; 0x04
    316e:	01 97       	sbiw	r24, 0x01	; 1
    3170:	f1 f7       	brne	.-4      	; 0x316e <H_LCD_void_latchByte+0x338>
    3172:	9c 83       	std	Y+4, r25	; 0x04
    3174:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3176:	8d 81       	ldd	r24, Y+5	; 0x05
    3178:	9e 81       	ldd	r25, Y+6	; 0x06
    317a:	01 97       	sbiw	r24, 0x01	; 1
    317c:	9e 83       	std	Y+6, r25	; 0x06
    317e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3180:	8d 81       	ldd	r24, Y+5	; 0x05
    3182:	9e 81       	ldd	r25, Y+6	; 0x06
    3184:	00 97       	sbiw	r24, 0x00	; 0
    3186:	69 f7       	brne	.-38     	; 0x3162 <H_LCD_void_latchByte+0x32c>
    3188:	14 c0       	rjmp	.+40     	; 0x31b2 <H_LCD_void_latchByte+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    318a:	6f 81       	ldd	r22, Y+7	; 0x07
    318c:	78 85       	ldd	r23, Y+8	; 0x08
    318e:	89 85       	ldd	r24, Y+9	; 0x09
    3190:	9a 85       	ldd	r25, Y+10	; 0x0a
    3192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3196:	dc 01       	movw	r26, r24
    3198:	cb 01       	movw	r24, r22
    319a:	9e 83       	std	Y+6, r25	; 0x06
    319c:	8d 83       	std	Y+5, r24	; 0x05
    319e:	8d 81       	ldd	r24, Y+5	; 0x05
    31a0:	9e 81       	ldd	r25, Y+6	; 0x06
    31a2:	9a 83       	std	Y+2, r25	; 0x02
    31a4:	89 83       	std	Y+1, r24	; 0x01
    31a6:	89 81       	ldd	r24, Y+1	; 0x01
    31a8:	9a 81       	ldd	r25, Y+2	; 0x02
    31aa:	01 97       	sbiw	r24, 0x01	; 1
    31ac:	f1 f7       	brne	.-4      	; 0x31aa <H_LCD_void_latchByte+0x374>
    31ae:	9a 83       	std	Y+2, r25	; 0x02
    31b0:	89 83       	std	Y+1, r24	; 0x01
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
	_delay_ms(30);

#endif

}
    31b2:	ab 96       	adiw	r28, 0x2b	; 43
    31b4:	0f b6       	in	r0, 0x3f	; 63
    31b6:	f8 94       	cli
    31b8:	de bf       	out	0x3e, r29	; 62
    31ba:	0f be       	out	0x3f, r0	; 63
    31bc:	cd bf       	out	0x3d, r28	; 61
    31be:	cf 91       	pop	r28
    31c0:	df 91       	pop	r29
    31c2:	08 95       	ret

000031c4 <H_LCD_void_Init>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_Init(void)
{
    31c4:	0f 93       	push	r16
    31c6:	1f 93       	push	r17
    31c8:	df 93       	push	r29
    31ca:	cf 93       	push	r28
    31cc:	cd b7       	in	r28, 0x3d	; 61
    31ce:	de b7       	in	r29, 0x3e	; 62
    31d0:	c6 54       	subi	r28, 0x46	; 70
    31d2:	d0 40       	sbci	r29, 0x00	; 0
    31d4:	0f b6       	in	r0, 0x3f	; 63
    31d6:	f8 94       	cli
    31d8:	de bf       	out	0x3e, r29	; 62
    31da:	0f be       	out	0x3f, r0	; 63
    31dc:	cd bf       	out	0x3d, r28	; 61
    31de:	fe 01       	movw	r30, r28
    31e0:	ed 5b       	subi	r30, 0xBD	; 189
    31e2:	ff 4f       	sbci	r31, 0xFF	; 255
    31e4:	80 e0       	ldi	r24, 0x00	; 0
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	a6 e1       	ldi	r26, 0x16	; 22
    31ea:	b3 e4       	ldi	r27, 0x43	; 67
    31ec:	80 83       	st	Z, r24
    31ee:	91 83       	std	Z+1, r25	; 0x01
    31f0:	a2 83       	std	Z+2, r26	; 0x02
    31f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31f4:	8e 01       	movw	r16, r28
    31f6:	01 5c       	subi	r16, 0xC1	; 193
    31f8:	1f 4f       	sbci	r17, 0xFF	; 255
    31fa:	fe 01       	movw	r30, r28
    31fc:	ed 5b       	subi	r30, 0xBD	; 189
    31fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3200:	60 81       	ld	r22, Z
    3202:	71 81       	ldd	r23, Z+1	; 0x01
    3204:	82 81       	ldd	r24, Z+2	; 0x02
    3206:	93 81       	ldd	r25, Z+3	; 0x03
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	4a e7       	ldi	r20, 0x7A	; 122
    320e:	55 e4       	ldi	r21, 0x45	; 69
    3210:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	f8 01       	movw	r30, r16
    321a:	80 83       	st	Z, r24
    321c:	91 83       	std	Z+1, r25	; 0x01
    321e:	a2 83       	std	Z+2, r26	; 0x02
    3220:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3222:	fe 01       	movw	r30, r28
    3224:	ff 96       	adiw	r30, 0x3f	; 63
    3226:	60 81       	ld	r22, Z
    3228:	71 81       	ldd	r23, Z+1	; 0x01
    322a:	82 81       	ldd	r24, Z+2	; 0x02
    322c:	93 81       	ldd	r25, Z+3	; 0x03
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	40 e8       	ldi	r20, 0x80	; 128
    3234:	5f e3       	ldi	r21, 0x3F	; 63
    3236:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    323a:	88 23       	and	r24, r24
    323c:	2c f4       	brge	.+10     	; 0x3248 <H_LCD_void_Init+0x84>
		__ticks = 1;
    323e:	81 e0       	ldi	r24, 0x01	; 1
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	9e af       	std	Y+62, r25	; 0x3e
    3244:	8d af       	std	Y+61, r24	; 0x3d
    3246:	46 c0       	rjmp	.+140    	; 0x32d4 <H_LCD_void_Init+0x110>
	else if (__tmp > 65535)
    3248:	fe 01       	movw	r30, r28
    324a:	ff 96       	adiw	r30, 0x3f	; 63
    324c:	60 81       	ld	r22, Z
    324e:	71 81       	ldd	r23, Z+1	; 0x01
    3250:	82 81       	ldd	r24, Z+2	; 0x02
    3252:	93 81       	ldd	r25, Z+3	; 0x03
    3254:	20 e0       	ldi	r18, 0x00	; 0
    3256:	3f ef       	ldi	r19, 0xFF	; 255
    3258:	4f e7       	ldi	r20, 0x7F	; 127
    325a:	57 e4       	ldi	r21, 0x47	; 71
    325c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3260:	18 16       	cp	r1, r24
    3262:	64 f5       	brge	.+88     	; 0x32bc <H_LCD_void_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3264:	fe 01       	movw	r30, r28
    3266:	ed 5b       	subi	r30, 0xBD	; 189
    3268:	ff 4f       	sbci	r31, 0xFF	; 255
    326a:	60 81       	ld	r22, Z
    326c:	71 81       	ldd	r23, Z+1	; 0x01
    326e:	82 81       	ldd	r24, Z+2	; 0x02
    3270:	93 81       	ldd	r25, Z+3	; 0x03
    3272:	20 e0       	ldi	r18, 0x00	; 0
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	40 e2       	ldi	r20, 0x20	; 32
    3278:	51 e4       	ldi	r21, 0x41	; 65
    327a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    327e:	dc 01       	movw	r26, r24
    3280:	cb 01       	movw	r24, r22
    3282:	bc 01       	movw	r22, r24
    3284:	cd 01       	movw	r24, r26
    3286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328a:	dc 01       	movw	r26, r24
    328c:	cb 01       	movw	r24, r22
    328e:	9e af       	std	Y+62, r25	; 0x3e
    3290:	8d af       	std	Y+61, r24	; 0x3d
    3292:	0f c0       	rjmp	.+30     	; 0x32b2 <H_LCD_void_Init+0xee>
    3294:	80 e9       	ldi	r24, 0x90	; 144
    3296:	91 e0       	ldi	r25, 0x01	; 1
    3298:	9c af       	std	Y+60, r25	; 0x3c
    329a:	8b af       	std	Y+59, r24	; 0x3b
    329c:	8b ad       	ldd	r24, Y+59	; 0x3b
    329e:	9c ad       	ldd	r25, Y+60	; 0x3c
    32a0:	01 97       	sbiw	r24, 0x01	; 1
    32a2:	f1 f7       	brne	.-4      	; 0x32a0 <H_LCD_void_Init+0xdc>
    32a4:	9c af       	std	Y+60, r25	; 0x3c
    32a6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    32aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    32ac:	01 97       	sbiw	r24, 0x01	; 1
    32ae:	9e af       	std	Y+62, r25	; 0x3e
    32b0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    32b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    32b6:	00 97       	sbiw	r24, 0x00	; 0
    32b8:	69 f7       	brne	.-38     	; 0x3294 <H_LCD_void_Init+0xd0>
    32ba:	16 c0       	rjmp	.+44     	; 0x32e8 <H_LCD_void_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32bc:	fe 01       	movw	r30, r28
    32be:	ff 96       	adiw	r30, 0x3f	; 63
    32c0:	60 81       	ld	r22, Z
    32c2:	71 81       	ldd	r23, Z+1	; 0x01
    32c4:	82 81       	ldd	r24, Z+2	; 0x02
    32c6:	93 81       	ldd	r25, Z+3	; 0x03
    32c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32cc:	dc 01       	movw	r26, r24
    32ce:	cb 01       	movw	r24, r22
    32d0:	9e af       	std	Y+62, r25	; 0x3e
    32d2:	8d af       	std	Y+61, r24	; 0x3d
    32d4:	8d ad       	ldd	r24, Y+61	; 0x3d
    32d6:	9e ad       	ldd	r25, Y+62	; 0x3e
    32d8:	9a af       	std	Y+58, r25	; 0x3a
    32da:	89 af       	std	Y+57, r24	; 0x39
    32dc:	89 ad       	ldd	r24, Y+57	; 0x39
    32de:	9a ad       	ldd	r25, Y+58	; 0x3a
    32e0:	01 97       	sbiw	r24, 0x01	; 1
    32e2:	f1 f7       	brne	.-4      	; 0x32e0 <H_LCD_void_Init+0x11c>
    32e4:	9a af       	std	Y+58, r25	; 0x3a
    32e6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(150);
	M_Dio_void_setPinValue(CLCD_RS_PIN,DIO_LOW);
    32e8:	8d e0       	ldi	r24, 0x0D	; 13
    32ea:	60 e0       	ldi	r22, 0x00	; 0
    32ec:	0e 94 c3 13 	call	0x2786	; 0x2786 <M_Dio_void_setPinValue>
	/*Function set*/
#if(LCD_MODE == _4_BIT_MODE)
	H_LCD_void_sendCommand(CLCD_FUNCTION_SET_1);
    32f0:	82 e0       	ldi	r24, 0x02	; 2
    32f2:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <H_LCD_void_sendCommand>
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	a0 ea       	ldi	r26, 0xA0	; 160
    32fc:	b0 e4       	ldi	r27, 0x40	; 64
    32fe:	8d ab       	std	Y+53, r24	; 0x35
    3300:	9e ab       	std	Y+54, r25	; 0x36
    3302:	af ab       	std	Y+55, r26	; 0x37
    3304:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3306:	6d a9       	ldd	r22, Y+53	; 0x35
    3308:	7e a9       	ldd	r23, Y+54	; 0x36
    330a:	8f a9       	ldd	r24, Y+55	; 0x37
    330c:	98 ad       	ldd	r25, Y+56	; 0x38
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	30 e0       	ldi	r19, 0x00	; 0
    3312:	4a e7       	ldi	r20, 0x7A	; 122
    3314:	55 e4       	ldi	r21, 0x45	; 69
    3316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    331a:	dc 01       	movw	r26, r24
    331c:	cb 01       	movw	r24, r22
    331e:	89 ab       	std	Y+49, r24	; 0x31
    3320:	9a ab       	std	Y+50, r25	; 0x32
    3322:	ab ab       	std	Y+51, r26	; 0x33
    3324:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3326:	69 a9       	ldd	r22, Y+49	; 0x31
    3328:	7a a9       	ldd	r23, Y+50	; 0x32
    332a:	8b a9       	ldd	r24, Y+51	; 0x33
    332c:	9c a9       	ldd	r25, Y+52	; 0x34
    332e:	20 e0       	ldi	r18, 0x00	; 0
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	40 e8       	ldi	r20, 0x80	; 128
    3334:	5f e3       	ldi	r21, 0x3F	; 63
    3336:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    333a:	88 23       	and	r24, r24
    333c:	2c f4       	brge	.+10     	; 0x3348 <H_LCD_void_Init+0x184>
		__ticks = 1;
    333e:	81 e0       	ldi	r24, 0x01	; 1
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	98 ab       	std	Y+48, r25	; 0x30
    3344:	8f a7       	std	Y+47, r24	; 0x2f
    3346:	3f c0       	rjmp	.+126    	; 0x33c6 <H_LCD_void_Init+0x202>
	else if (__tmp > 65535)
    3348:	69 a9       	ldd	r22, Y+49	; 0x31
    334a:	7a a9       	ldd	r23, Y+50	; 0x32
    334c:	8b a9       	ldd	r24, Y+51	; 0x33
    334e:	9c a9       	ldd	r25, Y+52	; 0x34
    3350:	20 e0       	ldi	r18, 0x00	; 0
    3352:	3f ef       	ldi	r19, 0xFF	; 255
    3354:	4f e7       	ldi	r20, 0x7F	; 127
    3356:	57 e4       	ldi	r21, 0x47	; 71
    3358:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    335c:	18 16       	cp	r1, r24
    335e:	4c f5       	brge	.+82     	; 0x33b2 <H_LCD_void_Init+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3360:	6d a9       	ldd	r22, Y+53	; 0x35
    3362:	7e a9       	ldd	r23, Y+54	; 0x36
    3364:	8f a9       	ldd	r24, Y+55	; 0x37
    3366:	98 ad       	ldd	r25, Y+56	; 0x38
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	40 e2       	ldi	r20, 0x20	; 32
    336e:	51 e4       	ldi	r21, 0x41	; 65
    3370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	bc 01       	movw	r22, r24
    337a:	cd 01       	movw	r24, r26
    337c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3380:	dc 01       	movw	r26, r24
    3382:	cb 01       	movw	r24, r22
    3384:	98 ab       	std	Y+48, r25	; 0x30
    3386:	8f a7       	std	Y+47, r24	; 0x2f
    3388:	0f c0       	rjmp	.+30     	; 0x33a8 <H_LCD_void_Init+0x1e4>
    338a:	80 e9       	ldi	r24, 0x90	; 144
    338c:	91 e0       	ldi	r25, 0x01	; 1
    338e:	9e a7       	std	Y+46, r25	; 0x2e
    3390:	8d a7       	std	Y+45, r24	; 0x2d
    3392:	8d a5       	ldd	r24, Y+45	; 0x2d
    3394:	9e a5       	ldd	r25, Y+46	; 0x2e
    3396:	01 97       	sbiw	r24, 0x01	; 1
    3398:	f1 f7       	brne	.-4      	; 0x3396 <H_LCD_void_Init+0x1d2>
    339a:	9e a7       	std	Y+46, r25	; 0x2e
    339c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    339e:	8f a5       	ldd	r24, Y+47	; 0x2f
    33a0:	98 a9       	ldd	r25, Y+48	; 0x30
    33a2:	01 97       	sbiw	r24, 0x01	; 1
    33a4:	98 ab       	std	Y+48, r25	; 0x30
    33a6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    33aa:	98 a9       	ldd	r25, Y+48	; 0x30
    33ac:	00 97       	sbiw	r24, 0x00	; 0
    33ae:	69 f7       	brne	.-38     	; 0x338a <H_LCD_void_Init+0x1c6>
    33b0:	14 c0       	rjmp	.+40     	; 0x33da <H_LCD_void_Init+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33b2:	69 a9       	ldd	r22, Y+49	; 0x31
    33b4:	7a a9       	ldd	r23, Y+50	; 0x32
    33b6:	8b a9       	ldd	r24, Y+51	; 0x33
    33b8:	9c a9       	ldd	r25, Y+52	; 0x34
    33ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33be:	dc 01       	movw	r26, r24
    33c0:	cb 01       	movw	r24, r22
    33c2:	98 ab       	std	Y+48, r25	; 0x30
    33c4:	8f a7       	std	Y+47, r24	; 0x2f
    33c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    33c8:	98 a9       	ldd	r25, Y+48	; 0x30
    33ca:	9c a7       	std	Y+44, r25	; 0x2c
    33cc:	8b a7       	std	Y+43, r24	; 0x2b
    33ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    33d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    33d2:	01 97       	sbiw	r24, 0x01	; 1
    33d4:	f1 f7       	brne	.-4      	; 0x33d2 <H_LCD_void_Init+0x20e>
    33d6:	9c a7       	std	Y+44, r25	; 0x2c
    33d8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	H_LCD_void_sendCommand(CLCD_FUNCTION_SET_2);
    33da:	88 e2       	ldi	r24, 0x28	; 40
    33dc:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <H_LCD_void_sendCommand>
    33e0:	80 e0       	ldi	r24, 0x00	; 0
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	a0 ea       	ldi	r26, 0xA0	; 160
    33e6:	b0 e4       	ldi	r27, 0x40	; 64
    33e8:	8f a3       	std	Y+39, r24	; 0x27
    33ea:	98 a7       	std	Y+40, r25	; 0x28
    33ec:	a9 a7       	std	Y+41, r26	; 0x29
    33ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33f0:	6f a1       	ldd	r22, Y+39	; 0x27
    33f2:	78 a5       	ldd	r23, Y+40	; 0x28
    33f4:	89 a5       	ldd	r24, Y+41	; 0x29
    33f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	4a e7       	ldi	r20, 0x7A	; 122
    33fe:	55 e4       	ldi	r21, 0x45	; 69
    3400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	8b a3       	std	Y+35, r24	; 0x23
    340a:	9c a3       	std	Y+36, r25	; 0x24
    340c:	ad a3       	std	Y+37, r26	; 0x25
    340e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3410:	6b a1       	ldd	r22, Y+35	; 0x23
    3412:	7c a1       	ldd	r23, Y+36	; 0x24
    3414:	8d a1       	ldd	r24, Y+37	; 0x25
    3416:	9e a1       	ldd	r25, Y+38	; 0x26
    3418:	20 e0       	ldi	r18, 0x00	; 0
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	40 e8       	ldi	r20, 0x80	; 128
    341e:	5f e3       	ldi	r21, 0x3F	; 63
    3420:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3424:	88 23       	and	r24, r24
    3426:	2c f4       	brge	.+10     	; 0x3432 <H_LCD_void_Init+0x26e>
		__ticks = 1;
    3428:	81 e0       	ldi	r24, 0x01	; 1
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	9a a3       	std	Y+34, r25	; 0x22
    342e:	89 a3       	std	Y+33, r24	; 0x21
    3430:	3f c0       	rjmp	.+126    	; 0x34b0 <H_LCD_void_Init+0x2ec>
	else if (__tmp > 65535)
    3432:	6b a1       	ldd	r22, Y+35	; 0x23
    3434:	7c a1       	ldd	r23, Y+36	; 0x24
    3436:	8d a1       	ldd	r24, Y+37	; 0x25
    3438:	9e a1       	ldd	r25, Y+38	; 0x26
    343a:	20 e0       	ldi	r18, 0x00	; 0
    343c:	3f ef       	ldi	r19, 0xFF	; 255
    343e:	4f e7       	ldi	r20, 0x7F	; 127
    3440:	57 e4       	ldi	r21, 0x47	; 71
    3442:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3446:	18 16       	cp	r1, r24
    3448:	4c f5       	brge	.+82     	; 0x349c <H_LCD_void_Init+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    344a:	6f a1       	ldd	r22, Y+39	; 0x27
    344c:	78 a5       	ldd	r23, Y+40	; 0x28
    344e:	89 a5       	ldd	r24, Y+41	; 0x29
    3450:	9a a5       	ldd	r25, Y+42	; 0x2a
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	40 e2       	ldi	r20, 0x20	; 32
    3458:	51 e4       	ldi	r21, 0x41	; 65
    345a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    345e:	dc 01       	movw	r26, r24
    3460:	cb 01       	movw	r24, r22
    3462:	bc 01       	movw	r22, r24
    3464:	cd 01       	movw	r24, r26
    3466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346a:	dc 01       	movw	r26, r24
    346c:	cb 01       	movw	r24, r22
    346e:	9a a3       	std	Y+34, r25	; 0x22
    3470:	89 a3       	std	Y+33, r24	; 0x21
    3472:	0f c0       	rjmp	.+30     	; 0x3492 <H_LCD_void_Init+0x2ce>
    3474:	80 e9       	ldi	r24, 0x90	; 144
    3476:	91 e0       	ldi	r25, 0x01	; 1
    3478:	98 a3       	std	Y+32, r25	; 0x20
    347a:	8f 8f       	std	Y+31, r24	; 0x1f
    347c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    347e:	98 a1       	ldd	r25, Y+32	; 0x20
    3480:	01 97       	sbiw	r24, 0x01	; 1
    3482:	f1 f7       	brne	.-4      	; 0x3480 <H_LCD_void_Init+0x2bc>
    3484:	98 a3       	std	Y+32, r25	; 0x20
    3486:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3488:	89 a1       	ldd	r24, Y+33	; 0x21
    348a:	9a a1       	ldd	r25, Y+34	; 0x22
    348c:	01 97       	sbiw	r24, 0x01	; 1
    348e:	9a a3       	std	Y+34, r25	; 0x22
    3490:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3492:	89 a1       	ldd	r24, Y+33	; 0x21
    3494:	9a a1       	ldd	r25, Y+34	; 0x22
    3496:	00 97       	sbiw	r24, 0x00	; 0
    3498:	69 f7       	brne	.-38     	; 0x3474 <H_LCD_void_Init+0x2b0>
    349a:	14 c0       	rjmp	.+40     	; 0x34c4 <H_LCD_void_Init+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    349c:	6b a1       	ldd	r22, Y+35	; 0x23
    349e:	7c a1       	ldd	r23, Y+36	; 0x24
    34a0:	8d a1       	ldd	r24, Y+37	; 0x25
    34a2:	9e a1       	ldd	r25, Y+38	; 0x26
    34a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a8:	dc 01       	movw	r26, r24
    34aa:	cb 01       	movw	r24, r22
    34ac:	9a a3       	std	Y+34, r25	; 0x22
    34ae:	89 a3       	std	Y+33, r24	; 0x21
    34b0:	89 a1       	ldd	r24, Y+33	; 0x21
    34b2:	9a a1       	ldd	r25, Y+34	; 0x22
    34b4:	9e 8f       	std	Y+30, r25	; 0x1e
    34b6:	8d 8f       	std	Y+29, r24	; 0x1d
    34b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34bc:	01 97       	sbiw	r24, 0x01	; 1
    34be:	f1 f7       	brne	.-4      	; 0x34bc <H_LCD_void_Init+0x2f8>
    34c0:	9e 8f       	std	Y+30, r25	; 0x1e
    34c2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	/*Display ON/OFF*/
	H_LCD_void_sendCommand(CLCD_DISPLAY);
    34c4:	8c e0       	ldi	r24, 0x0C	; 12
    34c6:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <H_LCD_void_sendCommand>
    34ca:	80 e0       	ldi	r24, 0x00	; 0
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	a0 ea       	ldi	r26, 0xA0	; 160
    34d0:	b0 e4       	ldi	r27, 0x40	; 64
    34d2:	89 8f       	std	Y+25, r24	; 0x19
    34d4:	9a 8f       	std	Y+26, r25	; 0x1a
    34d6:	ab 8f       	std	Y+27, r26	; 0x1b
    34d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34da:	69 8d       	ldd	r22, Y+25	; 0x19
    34dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34e2:	20 e0       	ldi	r18, 0x00	; 0
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	4a e7       	ldi	r20, 0x7A	; 122
    34e8:	55 e4       	ldi	r21, 0x45	; 69
    34ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ee:	dc 01       	movw	r26, r24
    34f0:	cb 01       	movw	r24, r22
    34f2:	8d 8b       	std	Y+21, r24	; 0x15
    34f4:	9e 8b       	std	Y+22, r25	; 0x16
    34f6:	af 8b       	std	Y+23, r26	; 0x17
    34f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34fa:	6d 89       	ldd	r22, Y+21	; 0x15
    34fc:	7e 89       	ldd	r23, Y+22	; 0x16
    34fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3500:	98 8d       	ldd	r25, Y+24	; 0x18
    3502:	20 e0       	ldi	r18, 0x00	; 0
    3504:	30 e0       	ldi	r19, 0x00	; 0
    3506:	40 e8       	ldi	r20, 0x80	; 128
    3508:	5f e3       	ldi	r21, 0x3F	; 63
    350a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    350e:	88 23       	and	r24, r24
    3510:	2c f4       	brge	.+10     	; 0x351c <H_LCD_void_Init+0x358>
		__ticks = 1;
    3512:	81 e0       	ldi	r24, 0x01	; 1
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	9c 8b       	std	Y+20, r25	; 0x14
    3518:	8b 8b       	std	Y+19, r24	; 0x13
    351a:	3f c0       	rjmp	.+126    	; 0x359a <H_LCD_void_Init+0x3d6>
	else if (__tmp > 65535)
    351c:	6d 89       	ldd	r22, Y+21	; 0x15
    351e:	7e 89       	ldd	r23, Y+22	; 0x16
    3520:	8f 89       	ldd	r24, Y+23	; 0x17
    3522:	98 8d       	ldd	r25, Y+24	; 0x18
    3524:	20 e0       	ldi	r18, 0x00	; 0
    3526:	3f ef       	ldi	r19, 0xFF	; 255
    3528:	4f e7       	ldi	r20, 0x7F	; 127
    352a:	57 e4       	ldi	r21, 0x47	; 71
    352c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3530:	18 16       	cp	r1, r24
    3532:	4c f5       	brge	.+82     	; 0x3586 <H_LCD_void_Init+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3534:	69 8d       	ldd	r22, Y+25	; 0x19
    3536:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3538:	8b 8d       	ldd	r24, Y+27	; 0x1b
    353a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    353c:	20 e0       	ldi	r18, 0x00	; 0
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	40 e2       	ldi	r20, 0x20	; 32
    3542:	51 e4       	ldi	r21, 0x41	; 65
    3544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3548:	dc 01       	movw	r26, r24
    354a:	cb 01       	movw	r24, r22
    354c:	bc 01       	movw	r22, r24
    354e:	cd 01       	movw	r24, r26
    3550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3554:	dc 01       	movw	r26, r24
    3556:	cb 01       	movw	r24, r22
    3558:	9c 8b       	std	Y+20, r25	; 0x14
    355a:	8b 8b       	std	Y+19, r24	; 0x13
    355c:	0f c0       	rjmp	.+30     	; 0x357c <H_LCD_void_Init+0x3b8>
    355e:	80 e9       	ldi	r24, 0x90	; 144
    3560:	91 e0       	ldi	r25, 0x01	; 1
    3562:	9a 8b       	std	Y+18, r25	; 0x12
    3564:	89 8b       	std	Y+17, r24	; 0x11
    3566:	89 89       	ldd	r24, Y+17	; 0x11
    3568:	9a 89       	ldd	r25, Y+18	; 0x12
    356a:	01 97       	sbiw	r24, 0x01	; 1
    356c:	f1 f7       	brne	.-4      	; 0x356a <H_LCD_void_Init+0x3a6>
    356e:	9a 8b       	std	Y+18, r25	; 0x12
    3570:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3572:	8b 89       	ldd	r24, Y+19	; 0x13
    3574:	9c 89       	ldd	r25, Y+20	; 0x14
    3576:	01 97       	sbiw	r24, 0x01	; 1
    3578:	9c 8b       	std	Y+20, r25	; 0x14
    357a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    357c:	8b 89       	ldd	r24, Y+19	; 0x13
    357e:	9c 89       	ldd	r25, Y+20	; 0x14
    3580:	00 97       	sbiw	r24, 0x00	; 0
    3582:	69 f7       	brne	.-38     	; 0x355e <H_LCD_void_Init+0x39a>
    3584:	14 c0       	rjmp	.+40     	; 0x35ae <H_LCD_void_Init+0x3ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3586:	6d 89       	ldd	r22, Y+21	; 0x15
    3588:	7e 89       	ldd	r23, Y+22	; 0x16
    358a:	8f 89       	ldd	r24, Y+23	; 0x17
    358c:	98 8d       	ldd	r25, Y+24	; 0x18
    358e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3592:	dc 01       	movw	r26, r24
    3594:	cb 01       	movw	r24, r22
    3596:	9c 8b       	std	Y+20, r25	; 0x14
    3598:	8b 8b       	std	Y+19, r24	; 0x13
    359a:	8b 89       	ldd	r24, Y+19	; 0x13
    359c:	9c 89       	ldd	r25, Y+20	; 0x14
    359e:	98 8b       	std	Y+16, r25	; 0x10
    35a0:	8f 87       	std	Y+15, r24	; 0x0f
    35a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    35a4:	98 89       	ldd	r25, Y+16	; 0x10
    35a6:	01 97       	sbiw	r24, 0x01	; 1
    35a8:	f1 f7       	brne	.-4      	; 0x35a6 <H_LCD_void_Init+0x3e2>
    35aa:	98 8b       	std	Y+16, r25	; 0x10
    35ac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	/*Display clear*/
	H_LCD_void_sendCommand(CLCD_CLEAR);
    35ae:	81 e0       	ldi	r24, 0x01	; 1
    35b0:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <H_LCD_void_sendCommand>
    35b4:	80 e0       	ldi	r24, 0x00	; 0
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	a0 ea       	ldi	r26, 0xA0	; 160
    35ba:	b0 e4       	ldi	r27, 0x40	; 64
    35bc:	8b 87       	std	Y+11, r24	; 0x0b
    35be:	9c 87       	std	Y+12, r25	; 0x0c
    35c0:	ad 87       	std	Y+13, r26	; 0x0d
    35c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    35c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    35c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    35ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    35cc:	20 e0       	ldi	r18, 0x00	; 0
    35ce:	30 e0       	ldi	r19, 0x00	; 0
    35d0:	4a e7       	ldi	r20, 0x7A	; 122
    35d2:	55 e4       	ldi	r21, 0x45	; 69
    35d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d8:	dc 01       	movw	r26, r24
    35da:	cb 01       	movw	r24, r22
    35dc:	8f 83       	std	Y+7, r24	; 0x07
    35de:	98 87       	std	Y+8, r25	; 0x08
    35e0:	a9 87       	std	Y+9, r26	; 0x09
    35e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35e4:	6f 81       	ldd	r22, Y+7	; 0x07
    35e6:	78 85       	ldd	r23, Y+8	; 0x08
    35e8:	89 85       	ldd	r24, Y+9	; 0x09
    35ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ec:	20 e0       	ldi	r18, 0x00	; 0
    35ee:	30 e0       	ldi	r19, 0x00	; 0
    35f0:	40 e8       	ldi	r20, 0x80	; 128
    35f2:	5f e3       	ldi	r21, 0x3F	; 63
    35f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35f8:	88 23       	and	r24, r24
    35fa:	2c f4       	brge	.+10     	; 0x3606 <H_LCD_void_Init+0x442>
		__ticks = 1;
    35fc:	81 e0       	ldi	r24, 0x01	; 1
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	9e 83       	std	Y+6, r25	; 0x06
    3602:	8d 83       	std	Y+5, r24	; 0x05
    3604:	3f c0       	rjmp	.+126    	; 0x3684 <H_LCD_void_Init+0x4c0>
	else if (__tmp > 65535)
    3606:	6f 81       	ldd	r22, Y+7	; 0x07
    3608:	78 85       	ldd	r23, Y+8	; 0x08
    360a:	89 85       	ldd	r24, Y+9	; 0x09
    360c:	9a 85       	ldd	r25, Y+10	; 0x0a
    360e:	20 e0       	ldi	r18, 0x00	; 0
    3610:	3f ef       	ldi	r19, 0xFF	; 255
    3612:	4f e7       	ldi	r20, 0x7F	; 127
    3614:	57 e4       	ldi	r21, 0x47	; 71
    3616:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    361a:	18 16       	cp	r1, r24
    361c:	4c f5       	brge	.+82     	; 0x3670 <H_LCD_void_Init+0x4ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    361e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3620:	7c 85       	ldd	r23, Y+12	; 0x0c
    3622:	8d 85       	ldd	r24, Y+13	; 0x0d
    3624:	9e 85       	ldd	r25, Y+14	; 0x0e
    3626:	20 e0       	ldi	r18, 0x00	; 0
    3628:	30 e0       	ldi	r19, 0x00	; 0
    362a:	40 e2       	ldi	r20, 0x20	; 32
    362c:	51 e4       	ldi	r21, 0x41	; 65
    362e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3632:	dc 01       	movw	r26, r24
    3634:	cb 01       	movw	r24, r22
    3636:	bc 01       	movw	r22, r24
    3638:	cd 01       	movw	r24, r26
    363a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    363e:	dc 01       	movw	r26, r24
    3640:	cb 01       	movw	r24, r22
    3642:	9e 83       	std	Y+6, r25	; 0x06
    3644:	8d 83       	std	Y+5, r24	; 0x05
    3646:	0f c0       	rjmp	.+30     	; 0x3666 <H_LCD_void_Init+0x4a2>
    3648:	80 e9       	ldi	r24, 0x90	; 144
    364a:	91 e0       	ldi	r25, 0x01	; 1
    364c:	9c 83       	std	Y+4, r25	; 0x04
    364e:	8b 83       	std	Y+3, r24	; 0x03
    3650:	8b 81       	ldd	r24, Y+3	; 0x03
    3652:	9c 81       	ldd	r25, Y+4	; 0x04
    3654:	01 97       	sbiw	r24, 0x01	; 1
    3656:	f1 f7       	brne	.-4      	; 0x3654 <H_LCD_void_Init+0x490>
    3658:	9c 83       	std	Y+4, r25	; 0x04
    365a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    365c:	8d 81       	ldd	r24, Y+5	; 0x05
    365e:	9e 81       	ldd	r25, Y+6	; 0x06
    3660:	01 97       	sbiw	r24, 0x01	; 1
    3662:	9e 83       	std	Y+6, r25	; 0x06
    3664:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3666:	8d 81       	ldd	r24, Y+5	; 0x05
    3668:	9e 81       	ldd	r25, Y+6	; 0x06
    366a:	00 97       	sbiw	r24, 0x00	; 0
    366c:	69 f7       	brne	.-38     	; 0x3648 <H_LCD_void_Init+0x484>
    366e:	14 c0       	rjmp	.+40     	; 0x3698 <H_LCD_void_Init+0x4d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3670:	6f 81       	ldd	r22, Y+7	; 0x07
    3672:	78 85       	ldd	r23, Y+8	; 0x08
    3674:	89 85       	ldd	r24, Y+9	; 0x09
    3676:	9a 85       	ldd	r25, Y+10	; 0x0a
    3678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    367c:	dc 01       	movw	r26, r24
    367e:	cb 01       	movw	r24, r22
    3680:	9e 83       	std	Y+6, r25	; 0x06
    3682:	8d 83       	std	Y+5, r24	; 0x05
    3684:	8d 81       	ldd	r24, Y+5	; 0x05
    3686:	9e 81       	ldd	r25, Y+6	; 0x06
    3688:	9a 83       	std	Y+2, r25	; 0x02
    368a:	89 83       	std	Y+1, r24	; 0x01
    368c:	89 81       	ldd	r24, Y+1	; 0x01
    368e:	9a 81       	ldd	r25, Y+2	; 0x02
    3690:	01 97       	sbiw	r24, 0x01	; 1
    3692:	f1 f7       	brne	.-4      	; 0x3690 <H_LCD_void_Init+0x4cc>
    3694:	9a 83       	std	Y+2, r25	; 0x02
    3696:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	H_LCD_void_sendCommand(CLCD_ENTRY_MODE_SET);
    3698:	86 e0       	ldi	r24, 0x06	; 6
    369a:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <H_LCD_void_sendCommand>
	/*clear display*/
	H_LCD_void_sendCommand(0b00000001);

#endif

}
    369e:	ca 5b       	subi	r28, 0xBA	; 186
    36a0:	df 4f       	sbci	r29, 0xFF	; 255
    36a2:	0f b6       	in	r0, 0x3f	; 63
    36a4:	f8 94       	cli
    36a6:	de bf       	out	0x3e, r29	; 62
    36a8:	0f be       	out	0x3f, r0	; 63
    36aa:	cd bf       	out	0x3d, r28	; 61
    36ac:	cf 91       	pop	r28
    36ae:	df 91       	pop	r29
    36b0:	1f 91       	pop	r17
    36b2:	0f 91       	pop	r16
    36b4:	08 95       	ret

000036b6 <H_LCD_void_sendData>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_sendData(u8 copy_u8data )
{
    36b6:	df 93       	push	r29
    36b8:	cf 93       	push	r28
    36ba:	0f 92       	push	r0
    36bc:	cd b7       	in	r28, 0x3d	; 61
    36be:	de b7       	in	r29, 0x3e	; 62
    36c0:	89 83       	std	Y+1, r24	; 0x01
	/*SET RS TO ZERO*/
	M_Dio_void_setPinValue(CLCD_RS_PIN,DIO_HIGH);
    36c2:	8d e0       	ldi	r24, 0x0D	; 13
    36c4:	61 e0       	ldi	r22, 0x01	; 1
    36c6:	0e 94 c3 13 	call	0x2786	; 0x2786 <M_Dio_void_setPinValue>
	/*Write command*/
	H_LCD_void_latchByte(copy_u8data);
    36ca:	89 81       	ldd	r24, Y+1	; 0x01
    36cc:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <H_LCD_void_latchByte>

}
    36d0:	0f 90       	pop	r0
    36d2:	cf 91       	pop	r28
    36d4:	df 91       	pop	r29
    36d6:	08 95       	ret

000036d8 <H_LCD_void_sendCommand>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_sendCommand(u8 copy_u8command)
{
    36d8:	df 93       	push	r29
    36da:	cf 93       	push	r28
    36dc:	0f 92       	push	r0
    36de:	cd b7       	in	r28, 0x3d	; 61
    36e0:	de b7       	in	r29, 0x3e	; 62
    36e2:	89 83       	std	Y+1, r24	; 0x01
	/*SET RS TO ZERO*/
	M_Dio_void_setPinValue(CLCD_RS_PIN,DIO_LOW);
    36e4:	8d e0       	ldi	r24, 0x0D	; 13
    36e6:	60 e0       	ldi	r22, 0x00	; 0
    36e8:	0e 94 c3 13 	call	0x2786	; 0x2786 <M_Dio_void_setPinValue>
	/*Write command*/
	H_LCD_void_latchByte(copy_u8command);
    36ec:	89 81       	ldd	r24, Y+1	; 0x01
    36ee:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <H_LCD_void_latchByte>

}
    36f2:	0f 90       	pop	r0
    36f4:	cf 91       	pop	r28
    36f6:	df 91       	pop	r29
    36f8:	08 95       	ret

000036fa <H_LCD_void_sendString>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_sendString(const char * pstr)
{
    36fa:	df 93       	push	r29
    36fc:	cf 93       	push	r28
    36fe:	00 d0       	rcall	.+0      	; 0x3700 <H_LCD_void_sendString+0x6>
    3700:	0f 92       	push	r0
    3702:	cd b7       	in	r28, 0x3d	; 61
    3704:	de b7       	in	r29, 0x3e	; 62
    3706:	9b 83       	std	Y+3, r25	; 0x03
    3708:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter;
	for(counter=0;pstr[counter]!=0;counter++)
    370a:	19 82       	std	Y+1, r1	; 0x01
    370c:	0e c0       	rjmp	.+28     	; 0x372a <H_LCD_void_sendString+0x30>
	{
		H_LCD_void_sendData(pstr[counter]);
    370e:	89 81       	ldd	r24, Y+1	; 0x01
    3710:	28 2f       	mov	r18, r24
    3712:	30 e0       	ldi	r19, 0x00	; 0
    3714:	8a 81       	ldd	r24, Y+2	; 0x02
    3716:	9b 81       	ldd	r25, Y+3	; 0x03
    3718:	fc 01       	movw	r30, r24
    371a:	e2 0f       	add	r30, r18
    371c:	f3 1f       	adc	r31, r19
    371e:	80 81       	ld	r24, Z
    3720:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <H_LCD_void_sendData>
  Return Value     : void
******************************************/
void H_LCD_void_sendString(const char * pstr)
{
	u8 counter;
	for(counter=0;pstr[counter]!=0;counter++)
    3724:	89 81       	ldd	r24, Y+1	; 0x01
    3726:	8f 5f       	subi	r24, 0xFF	; 255
    3728:	89 83       	std	Y+1, r24	; 0x01
    372a:	89 81       	ldd	r24, Y+1	; 0x01
    372c:	28 2f       	mov	r18, r24
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	8a 81       	ldd	r24, Y+2	; 0x02
    3732:	9b 81       	ldd	r25, Y+3	; 0x03
    3734:	fc 01       	movw	r30, r24
    3736:	e2 0f       	add	r30, r18
    3738:	f3 1f       	adc	r31, r19
    373a:	80 81       	ld	r24, Z
    373c:	88 23       	and	r24, r24
    373e:	39 f7       	brne	.-50     	; 0x370e <H_LCD_void_sendString+0x14>
	{
		H_LCD_void_sendData(pstr[counter]);
	}
}
    3740:	0f 90       	pop	r0
    3742:	0f 90       	pop	r0
    3744:	0f 90       	pop	r0
    3746:	cf 91       	pop	r28
    3748:	df 91       	pop	r29
    374a:	08 95       	ret

0000374c <H_LCD_void_sendIntNum>:
	//H_LCD_void_sendData(copy_s32Num+'0');

}
*/
void H_LCD_void_sendIntNum(s32 copy_s32Num)
{
    374c:	0f 93       	push	r16
    374e:	1f 93       	push	r17
    3750:	df 93       	push	r29
    3752:	cf 93       	push	r28
    3754:	cd b7       	in	r28, 0x3d	; 61
    3756:	de b7       	in	r29, 0x3e	; 62
    3758:	a5 97       	sbiw	r28, 0x25	; 37
    375a:	0f b6       	in	r0, 0x3f	; 63
    375c:	f8 94       	cli
    375e:	de bf       	out	0x3e, r29	; 62
    3760:	0f be       	out	0x3f, r0	; 63
    3762:	cd bf       	out	0x3d, r28	; 61
    3764:	6a a3       	std	Y+34, r22	; 0x22
    3766:	7b a3       	std	Y+35, r23	; 0x23
    3768:	8c a3       	std	Y+36, r24	; 0x24
    376a:	9d a3       	std	Y+37, r25	; 0x25
	/* Local Variable to save the numbers digits*/
	s32 Local_Variable[8] = {0} ;
    376c:	80 e2       	ldi	r24, 0x20	; 32
    376e:	fe 01       	movw	r30, r28
    3770:	32 96       	adiw	r30, 0x02	; 2
    3772:	df 01       	movw	r26, r30
    3774:	98 2f       	mov	r25, r24
    3776:	1d 92       	st	X+, r1
    3778:	9a 95       	dec	r25
    377a:	e9 f7       	brne	.-6      	; 0x3776 <H_LCD_void_sendIntNum+0x2a>
	u8 Local_Counter = 0 ;
    377c:	19 82       	std	Y+1, r1	; 0x01

	/* Check if the number is negative */
	if (copy_s32Num < 0)
    377e:	8a a1       	ldd	r24, Y+34	; 0x22
    3780:	9b a1       	ldd	r25, Y+35	; 0x23
    3782:	ac a1       	ldd	r26, Y+36	; 0x24
    3784:	bd a1       	ldd	r27, Y+37	; 0x25
    3786:	bb 23       	and	r27, r27
    3788:	0c f0       	brlt	.+2      	; 0x378c <H_LCD_void_sendIntNum+0x40>
    378a:	4a c0       	rjmp	.+148    	; 0x3820 <H_LCD_void_sendIntNum+0xd4>
	{
	/*Remove Negative Sign from number*/
	copy_s32Num = copy_s32Num * -1 ;
    378c:	8a a1       	ldd	r24, Y+34	; 0x22
    378e:	9b a1       	ldd	r25, Y+35	; 0x23
    3790:	ac a1       	ldd	r26, Y+36	; 0x24
    3792:	bd a1       	ldd	r27, Y+37	; 0x25
    3794:	b0 95       	com	r27
    3796:	a0 95       	com	r26
    3798:	90 95       	com	r25
    379a:	81 95       	neg	r24
    379c:	9f 4f       	sbci	r25, 0xFF	; 255
    379e:	af 4f       	sbci	r26, 0xFF	; 255
    37a0:	bf 4f       	sbci	r27, 0xFF	; 255
    37a2:	8a a3       	std	Y+34, r24	; 0x22
    37a4:	9b a3       	std	Y+35, r25	; 0x23
    37a6:	ac a3       	std	Y+36, r26	; 0x24
    37a8:	bd a3       	std	Y+37, r27	; 0x25
	/*Send Negative Sign */
	H_LCD_void_sendData('-');
    37aa:	8d e2       	ldi	r24, 0x2D	; 45
    37ac:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <H_LCD_void_sendData>
    37b0:	37 c0       	rjmp	.+110    	; 0x3820 <H_LCD_void_sendIntNum+0xd4>
	}
	/* While loop to split the Numbers and save it in Local_Variable*/
	while (copy_s32Num != 0)
	{
	Local_Variable[Local_Counter] = copy_s32Num % 10 ;
    37b2:	89 81       	ldd	r24, Y+1	; 0x01
    37b4:	08 2f       	mov	r16, r24
    37b6:	10 e0       	ldi	r17, 0x00	; 0
    37b8:	8a a1       	ldd	r24, Y+34	; 0x22
    37ba:	9b a1       	ldd	r25, Y+35	; 0x23
    37bc:	ac a1       	ldd	r26, Y+36	; 0x24
    37be:	bd a1       	ldd	r27, Y+37	; 0x25
    37c0:	2a e0       	ldi	r18, 0x0A	; 10
    37c2:	30 e0       	ldi	r19, 0x00	; 0
    37c4:	40 e0       	ldi	r20, 0x00	; 0
    37c6:	50 e0       	ldi	r21, 0x00	; 0
    37c8:	bc 01       	movw	r22, r24
    37ca:	cd 01       	movw	r24, r26
    37cc:	0e 94 1b 23 	call	0x4636	; 0x4636 <__divmodsi4>
    37d0:	dc 01       	movw	r26, r24
    37d2:	cb 01       	movw	r24, r22
    37d4:	ac 01       	movw	r20, r24
    37d6:	bd 01       	movw	r22, r26
    37d8:	98 01       	movw	r18, r16
    37da:	22 0f       	add	r18, r18
    37dc:	33 1f       	adc	r19, r19
    37de:	22 0f       	add	r18, r18
    37e0:	33 1f       	adc	r19, r19
    37e2:	ce 01       	movw	r24, r28
    37e4:	01 96       	adiw	r24, 0x01	; 1
    37e6:	82 0f       	add	r24, r18
    37e8:	93 1f       	adc	r25, r19
    37ea:	fc 01       	movw	r30, r24
    37ec:	31 96       	adiw	r30, 0x01	; 1
    37ee:	40 83       	st	Z, r20
    37f0:	51 83       	std	Z+1, r21	; 0x01
    37f2:	62 83       	std	Z+2, r22	; 0x02
    37f4:	73 83       	std	Z+3, r23	; 0x03
	copy_s32Num = copy_s32Num / 10 ;
    37f6:	8a a1       	ldd	r24, Y+34	; 0x22
    37f8:	9b a1       	ldd	r25, Y+35	; 0x23
    37fa:	ac a1       	ldd	r26, Y+36	; 0x24
    37fc:	bd a1       	ldd	r27, Y+37	; 0x25
    37fe:	2a e0       	ldi	r18, 0x0A	; 10
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	40 e0       	ldi	r20, 0x00	; 0
    3804:	50 e0       	ldi	r21, 0x00	; 0
    3806:	bc 01       	movw	r22, r24
    3808:	cd 01       	movw	r24, r26
    380a:	0e 94 1b 23 	call	0x4636	; 0x4636 <__divmodsi4>
    380e:	da 01       	movw	r26, r20
    3810:	c9 01       	movw	r24, r18
    3812:	8a a3       	std	Y+34, r24	; 0x22
    3814:	9b a3       	std	Y+35, r25	; 0x23
    3816:	ac a3       	std	Y+36, r26	; 0x24
    3818:	bd a3       	std	Y+37, r27	; 0x25
	Local_Counter ++ ;
    381a:	89 81       	ldd	r24, Y+1	; 0x01
    381c:	8f 5f       	subi	r24, 0xFF	; 255
    381e:	89 83       	std	Y+1, r24	; 0x01
	copy_s32Num = copy_s32Num * -1 ;
	/*Send Negative Sign */
	H_LCD_void_sendData('-');
	}
	/* While loop to split the Numbers and save it in Local_Variable*/
	while (copy_s32Num != 0)
    3820:	8a a1       	ldd	r24, Y+34	; 0x22
    3822:	9b a1       	ldd	r25, Y+35	; 0x23
    3824:	ac a1       	ldd	r26, Y+36	; 0x24
    3826:	bd a1       	ldd	r27, Y+37	; 0x25
    3828:	00 97       	sbiw	r24, 0x00	; 0
    382a:	a1 05       	cpc	r26, r1
    382c:	b1 05       	cpc	r27, r1
    382e:	09 f6       	brne	.-126    	; 0x37b2 <H_LCD_void_sendIntNum+0x66>
	copy_s32Num = copy_s32Num / 10 ;
	Local_Counter ++ ;

	}
	/* For loop to send the numbers using SendData*/
	for (Local_Counter --; Local_Counter < '0' ; Local_Counter--)
    3830:	89 81       	ldd	r24, Y+1	; 0x01
    3832:	81 50       	subi	r24, 0x01	; 1
    3834:	89 83       	std	Y+1, r24	; 0x01
    3836:	18 c0       	rjmp	.+48     	; 0x3868 <H_LCD_void_sendIntNum+0x11c>
	{
		 H_LCD_void_sendData('0' + Local_Variable[Local_Counter]);
    3838:	89 81       	ldd	r24, Y+1	; 0x01
    383a:	88 2f       	mov	r24, r24
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	9c 01       	movw	r18, r24
    3840:	22 0f       	add	r18, r18
    3842:	33 1f       	adc	r19, r19
    3844:	22 0f       	add	r18, r18
    3846:	33 1f       	adc	r19, r19
    3848:	ce 01       	movw	r24, r28
    384a:	01 96       	adiw	r24, 0x01	; 1
    384c:	82 0f       	add	r24, r18
    384e:	93 1f       	adc	r25, r19
    3850:	fc 01       	movw	r30, r24
    3852:	31 96       	adiw	r30, 0x01	; 1
    3854:	80 81       	ld	r24, Z
    3856:	91 81       	ldd	r25, Z+1	; 0x01
    3858:	a2 81       	ldd	r26, Z+2	; 0x02
    385a:	b3 81       	ldd	r27, Z+3	; 0x03
    385c:	80 5d       	subi	r24, 0xD0	; 208
    385e:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <H_LCD_void_sendData>
	copy_s32Num = copy_s32Num / 10 ;
	Local_Counter ++ ;

	}
	/* For loop to send the numbers using SendData*/
	for (Local_Counter --; Local_Counter < '0' ; Local_Counter--)
    3862:	89 81       	ldd	r24, Y+1	; 0x01
    3864:	81 50       	subi	r24, 0x01	; 1
    3866:	89 83       	std	Y+1, r24	; 0x01
    3868:	89 81       	ldd	r24, Y+1	; 0x01
    386a:	80 33       	cpi	r24, 0x30	; 48
    386c:	28 f3       	brcs	.-54     	; 0x3838 <H_LCD_void_sendIntNum+0xec>
	{
		 H_LCD_void_sendData('0' + Local_Variable[Local_Counter]);
	}
}
    386e:	a5 96       	adiw	r28, 0x25	; 37
    3870:	0f b6       	in	r0, 0x3f	; 63
    3872:	f8 94       	cli
    3874:	de bf       	out	0x3e, r29	; 62
    3876:	0f be       	out	0x3f, r0	; 63
    3878:	cd bf       	out	0x3d, r28	; 61
    387a:	cf 91       	pop	r28
    387c:	df 91       	pop	r29
    387e:	1f 91       	pop	r17
    3880:	0f 91       	pop	r16
    3882:	08 95       	ret

00003884 <H_LCD_void_gotoXY>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col)
{
    3884:	df 93       	push	r29
    3886:	cf 93       	push	r28
    3888:	00 d0       	rcall	.+0      	; 0x388a <H_LCD_void_gotoXY+0x6>
    388a:	0f 92       	push	r0
    388c:	cd b7       	in	r28, 0x3d	; 61
    388e:	de b7       	in	r29, 0x3e	; 62
    3890:	8a 83       	std	Y+2, r24	; 0x02
    3892:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(copy_u8Row == 1)
    3894:	8a 81       	ldd	r24, Y+2	; 0x02
    3896:	81 30       	cpi	r24, 0x01	; 1
    3898:	19 f4       	brne	.+6      	; 0x38a0 <H_LCD_void_gotoXY+0x1c>
	{
		Local_u8Address = copy_u8Col;
    389a:	8b 81       	ldd	r24, Y+3	; 0x03
    389c:	89 83       	std	Y+1, r24	; 0x01
    389e:	14 c0       	rjmp	.+40     	; 0x38c8 <H_LCD_void_gotoXY+0x44>
	}
	else if(copy_u8Row == 2)
    38a0:	8a 81       	ldd	r24, Y+2	; 0x02
    38a2:	82 30       	cpi	r24, 0x02	; 2
    38a4:	21 f4       	brne	.+8      	; 0x38ae <H_LCD_void_gotoXY+0x2a>
	{
		Local_u8Address = copy_u8Col + 0x40;
    38a6:	8b 81       	ldd	r24, Y+3	; 0x03
    38a8:	80 5c       	subi	r24, 0xC0	; 192
    38aa:	89 83       	std	Y+1, r24	; 0x01
    38ac:	0d c0       	rjmp	.+26     	; 0x38c8 <H_LCD_void_gotoXY+0x44>
	}
	else if(copy_u8Row == 3)
    38ae:	8a 81       	ldd	r24, Y+2	; 0x02
    38b0:	83 30       	cpi	r24, 0x03	; 3
    38b2:	21 f4       	brne	.+8      	; 0x38bc <H_LCD_void_gotoXY+0x38>
	{
		Local_u8Address = copy_u8Col + 0x14;
    38b4:	8b 81       	ldd	r24, Y+3	; 0x03
    38b6:	8c 5e       	subi	r24, 0xEC	; 236
    38b8:	89 83       	std	Y+1, r24	; 0x01
    38ba:	06 c0       	rjmp	.+12     	; 0x38c8 <H_LCD_void_gotoXY+0x44>
	}
	else if(copy_u8Row == 4)
    38bc:	8a 81       	ldd	r24, Y+2	; 0x02
    38be:	84 30       	cpi	r24, 0x04	; 4
    38c0:	19 f4       	brne	.+6      	; 0x38c8 <H_LCD_void_gotoXY+0x44>
	{
		Local_u8Address = copy_u8Col + 0x54;
    38c2:	8b 81       	ldd	r24, Y+3	; 0x03
    38c4:	8c 5a       	subi	r24, 0xAC	; 172
    38c6:	89 83       	std	Y+1, r24	; 0x01
	else
	{

	}
	//128 Is added to the address to set the most significant bit by 1 according to DDRAM address instruction
	H_LCD_void_sendCommand(Local_u8Address+128);
    38c8:	89 81       	ldd	r24, Y+1	; 0x01
    38ca:	80 58       	subi	r24, 0x80	; 128
    38cc:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <H_LCD_void_sendCommand>
}
    38d0:	0f 90       	pop	r0
    38d2:	0f 90       	pop	r0
    38d4:	0f 90       	pop	r0
    38d6:	cf 91       	pop	r28
    38d8:	df 91       	pop	r29
    38da:	08 95       	ret

000038dc <H_LCD_void_creatCustomChar>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_creatCustomChar (const u8 * ArrPattern,u8 copy_u8charCode)
{
    38dc:	df 93       	push	r29
    38de:	cf 93       	push	r28
    38e0:	00 d0       	rcall	.+0      	; 0x38e2 <H_LCD_void_creatCustomChar+0x6>
    38e2:	00 d0       	rcall	.+0      	; 0x38e4 <H_LCD_void_creatCustomChar+0x8>
    38e4:	0f 92       	push	r0
    38e6:	cd b7       	in	r28, 0x3d	; 61
    38e8:	de b7       	in	r29, 0x3e	; 62
    38ea:	9c 83       	std	Y+4, r25	; 0x04
    38ec:	8b 83       	std	Y+3, r24	; 0x03
    38ee:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_counter=0;
    38f0:	1a 82       	std	Y+2, r1	; 0x02
	/*first calculate CGRAM address since each block of address is 8bytes*/
	u8 Local_u8CGramaddress=0;
    38f2:	19 82       	std	Y+1, r1	; 0x01
	Local_u8CGramaddress = copy_u8charCode*8;
    38f4:	8d 81       	ldd	r24, Y+5	; 0x05
    38f6:	88 2f       	mov	r24, r24
    38f8:	90 e0       	ldi	r25, 0x00	; 0
    38fa:	88 0f       	add	r24, r24
    38fc:	99 1f       	adc	r25, r25
    38fe:	88 0f       	add	r24, r24
    3900:	99 1f       	adc	r25, r25
    3902:	88 0f       	add	r24, r24
    3904:	99 1f       	adc	r25, r25
    3906:	89 83       	std	Y+1, r24	; 0x01
	/*Access CGRAM block using function Send command by setting bit 6 and clearing bit7*/
	H_LCD_void_sendCommand(Local_u8CGramaddress+64);
    3908:	89 81       	ldd	r24, Y+1	; 0x01
    390a:	80 5c       	subi	r24, 0xC0	; 192
    390c:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <H_LCD_void_sendCommand>
	/*write the pattern to the CG ram */
	for(Local_counter=0;Local_counter<8;Local_counter++) /*<8 since there are 8 memory locations only for cgram (64bytes)*/
    3910:	1a 82       	std	Y+2, r1	; 0x02
    3912:	0e c0       	rjmp	.+28     	; 0x3930 <H_LCD_void_creatCustomChar+0x54>
	{
		H_LCD_void_sendData(ArrPattern[Local_counter]);
    3914:	8a 81       	ldd	r24, Y+2	; 0x02
    3916:	28 2f       	mov	r18, r24
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	8b 81       	ldd	r24, Y+3	; 0x03
    391c:	9c 81       	ldd	r25, Y+4	; 0x04
    391e:	fc 01       	movw	r30, r24
    3920:	e2 0f       	add	r30, r18
    3922:	f3 1f       	adc	r31, r19
    3924:	80 81       	ld	r24, Z
    3926:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <H_LCD_void_sendData>
	u8 Local_u8CGramaddress=0;
	Local_u8CGramaddress = copy_u8charCode*8;
	/*Access CGRAM block using function Send command by setting bit 6 and clearing bit7*/
	H_LCD_void_sendCommand(Local_u8CGramaddress+64);
	/*write the pattern to the CG ram */
	for(Local_counter=0;Local_counter<8;Local_counter++) /*<8 since there are 8 memory locations only for cgram (64bytes)*/
    392a:	8a 81       	ldd	r24, Y+2	; 0x02
    392c:	8f 5f       	subi	r24, 0xFF	; 255
    392e:	8a 83       	std	Y+2, r24	; 0x02
    3930:	8a 81       	ldd	r24, Y+2	; 0x02
    3932:	88 30       	cpi	r24, 0x08	; 8
    3934:	78 f3       	brcs	.-34     	; 0x3914 <H_LCD_void_creatCustomChar+0x38>
	{
		H_LCD_void_sendData(ArrPattern[Local_counter]);
	}
	H_LCD_void_gotoXY(1,0);
    3936:	81 e0       	ldi	r24, 0x01	; 1
    3938:	60 e0       	ldi	r22, 0x00	; 0
    393a:	0e 94 42 1c 	call	0x3884	; 0x3884 <H_LCD_void_gotoXY>
	H_LCD_void_sendData(copy_u8charCode);
    393e:	8d 81       	ldd	r24, Y+5	; 0x05
    3940:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <H_LCD_void_sendData>

}
    3944:	0f 90       	pop	r0
    3946:	0f 90       	pop	r0
    3948:	0f 90       	pop	r0
    394a:	0f 90       	pop	r0
    394c:	0f 90       	pop	r0
    394e:	cf 91       	pop	r28
    3950:	df 91       	pop	r29
    3952:	08 95       	ret

00003954 <H_LCD_void_displayCustomChar>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_displayCustomChar (u8 copy_u8charCode)
{
    3954:	df 93       	push	r29
    3956:	cf 93       	push	r28
    3958:	0f 92       	push	r0
    395a:	cd b7       	in	r28, 0x3d	; 61
    395c:	de b7       	in	r29, 0x3e	; 62
    395e:	89 83       	std	Y+1, r24	; 0x01
	/*give the custom char number to send data*/
	H_LCD_void_sendData(copy_u8charCode);
    3960:	89 81       	ldd	r24, Y+1	; 0x01
    3962:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <H_LCD_void_sendData>
}
    3966:	0f 90       	pop	r0
    3968:	cf 91       	pop	r28
    396a:	df 91       	pop	r29
    396c:	08 95       	ret

0000396e <H_LCD_void_ClearDisplay>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_ClearDisplay(void)
{
    396e:	df 93       	push	r29
    3970:	cf 93       	push	r28
    3972:	cd b7       	in	r28, 0x3d	; 61
    3974:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_sendCommand(CLCD_CLEAR);
    3976:	81 e0       	ldi	r24, 0x01	; 1
    3978:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <H_LCD_void_sendCommand>
}
    397c:	cf 91       	pop	r28
    397e:	df 91       	pop	r29
    3980:	08 95       	ret

00003982 <APPLICATION_Init>:

extern const Port_ConfigType PORT_Config_Arr[PORT_PINS_CONFIG_ARR_SIZE];


void APPLICATION_Init(void)
{
    3982:	df 93       	push	r29
    3984:	cf 93       	push	r28
    3986:	cd b7       	in	r28, 0x3d	; 61
    3988:	de b7       	in	r29, 0x3e	; 62
	Port_Init(PORT_Config_Arr);
    398a:	83 e9       	ldi	r24, 0x93	; 147
    398c:	92 e0       	ldi	r25, 0x02	; 2
    398e:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <Port_Init>
	H_LCD_void_Init();
    3992:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <H_LCD_void_Init>

}
    3996:	cf 91       	pop	r28
    3998:	df 91       	pop	r29
    399a:	08 95       	ret

0000399c <APPLICATION_Core>:
	}
}
	*/

void APPLICATION_Core(void)
{
    399c:	0f 93       	push	r16
    399e:	1f 93       	push	r17
    39a0:	df 93       	push	r29
    39a2:	cf 93       	push	r28
    39a4:	cd b7       	in	r28, 0x3d	; 61
    39a6:	de b7       	in	r29, 0x3e	; 62
    39a8:	ca 56       	subi	r28, 0x6A	; 106
    39aa:	d0 40       	sbci	r29, 0x00	; 0
    39ac:	0f b6       	in	r0, 0x3f	; 63
    39ae:	f8 94       	cli
    39b0:	de bf       	out	0x3e, r29	; 62
    39b2:	0f be       	out	0x3f, r0	; 63
    39b4:	cd bf       	out	0x3d, r28	; 61
	 u8 Duty_Cycle=0;
    39b6:	fe 01       	movw	r30, r28
    39b8:	e6 59       	subi	r30, 0x96	; 150
    39ba:	ff 4f       	sbci	r31, 0xFF	; 255
    39bc:	10 82       	st	Z, r1
	 u8 Direction=0;
    39be:	fe 01       	movw	r30, r28
    39c0:	e7 59       	subi	r30, 0x97	; 151
    39c2:	ff 4f       	sbci	r31, 0xFF	; 255
    39c4:	10 82       	st	Z, r1
	 u32 PWM_FREQ=0;
    39c6:	fe 01       	movw	r30, r28
    39c8:	eb 59       	subi	r30, 0x9B	; 155
    39ca:	ff 4f       	sbci	r31, 0xFF	; 255
    39cc:	10 82       	st	Z, r1
    39ce:	11 82       	std	Z+1, r1	; 0x01
    39d0:	12 82       	std	Z+2, r1	; 0x02
    39d2:	13 82       	std	Z+3, r1	; 0x03


	H_LCD_void_ClearDisplay();
    39d4:	0e 94 b7 1c 	call	0x396e	; 0x396e <H_LCD_void_ClearDisplay>
	u8 Pressed_key='\0';
    39d8:	fe 01       	movw	r30, r28
    39da:	ec 59       	subi	r30, 0x9C	; 156
    39dc:	ff 4f       	sbci	r31, 0xFF	; 255
    39de:	10 82       	st	Z, r1
	u8 Pressed_key_int=0;
    39e0:	fe 01       	movw	r30, r28
    39e2:	ed 59       	subi	r30, 0x9D	; 157
    39e4:	ff 4f       	sbci	r31, 0xFF	; 255
    39e6:	10 82       	st	Z, r1
	/*Select Duty cycle*/
	H_LCD_void_sendString("Please Enter");
    39e8:	80 e6       	ldi	r24, 0x60	; 96
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <H_LCD_void_sendString>
	H_LCD_void_gotoXY(2,0);
    39f0:	82 e0       	ldi	r24, 0x02	; 2
    39f2:	60 e0       	ldi	r22, 0x00	; 0
    39f4:	0e 94 42 1c 	call	0x3884	; 0x3884 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("The Duty Cycle");
    39f8:	8d e6       	ldi	r24, 0x6D	; 109
    39fa:	90 e0       	ldi	r25, 0x00	; 0
    39fc:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <H_LCD_void_sendString>
    3a00:	fe 01       	movw	r30, r28
    3a02:	e1 5a       	subi	r30, 0xA1	; 161
    3a04:	ff 4f       	sbci	r31, 0xFF	; 255
    3a06:	80 e0       	ldi	r24, 0x00	; 0
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	a8 e4       	ldi	r26, 0x48	; 72
    3a0c:	b3 e4       	ldi	r27, 0x43	; 67
    3a0e:	80 83       	st	Z, r24
    3a10:	91 83       	std	Z+1, r25	; 0x01
    3a12:	a2 83       	std	Z+2, r26	; 0x02
    3a14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a16:	8e 01       	movw	r16, r28
    3a18:	05 5a       	subi	r16, 0xA5	; 165
    3a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a1c:	fe 01       	movw	r30, r28
    3a1e:	e1 5a       	subi	r30, 0xA1	; 161
    3a20:	ff 4f       	sbci	r31, 0xFF	; 255
    3a22:	60 81       	ld	r22, Z
    3a24:	71 81       	ldd	r23, Z+1	; 0x01
    3a26:	82 81       	ldd	r24, Z+2	; 0x02
    3a28:	93 81       	ldd	r25, Z+3	; 0x03
    3a2a:	20 e0       	ldi	r18, 0x00	; 0
    3a2c:	30 e0       	ldi	r19, 0x00	; 0
    3a2e:	4a e7       	ldi	r20, 0x7A	; 122
    3a30:	55 e4       	ldi	r21, 0x45	; 69
    3a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a36:	dc 01       	movw	r26, r24
    3a38:	cb 01       	movw	r24, r22
    3a3a:	f8 01       	movw	r30, r16
    3a3c:	80 83       	st	Z, r24
    3a3e:	91 83       	std	Z+1, r25	; 0x01
    3a40:	a2 83       	std	Z+2, r26	; 0x02
    3a42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a44:	fe 01       	movw	r30, r28
    3a46:	e5 5a       	subi	r30, 0xA5	; 165
    3a48:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4a:	60 81       	ld	r22, Z
    3a4c:	71 81       	ldd	r23, Z+1	; 0x01
    3a4e:	82 81       	ldd	r24, Z+2	; 0x02
    3a50:	93 81       	ldd	r25, Z+3	; 0x03
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	40 e8       	ldi	r20, 0x80	; 128
    3a58:	5f e3       	ldi	r21, 0x3F	; 63
    3a5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a5e:	88 23       	and	r24, r24
    3a60:	44 f4       	brge	.+16     	; 0x3a72 <APPLICATION_Core+0xd6>
		__ticks = 1;
    3a62:	fe 01       	movw	r30, r28
    3a64:	e7 5a       	subi	r30, 0xA7	; 167
    3a66:	ff 4f       	sbci	r31, 0xFF	; 255
    3a68:	81 e0       	ldi	r24, 0x01	; 1
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	91 83       	std	Z+1, r25	; 0x01
    3a6e:	80 83       	st	Z, r24
    3a70:	64 c0       	rjmp	.+200    	; 0x3b3a <APPLICATION_Core+0x19e>
	else if (__tmp > 65535)
    3a72:	fe 01       	movw	r30, r28
    3a74:	e5 5a       	subi	r30, 0xA5	; 165
    3a76:	ff 4f       	sbci	r31, 0xFF	; 255
    3a78:	60 81       	ld	r22, Z
    3a7a:	71 81       	ldd	r23, Z+1	; 0x01
    3a7c:	82 81       	ldd	r24, Z+2	; 0x02
    3a7e:	93 81       	ldd	r25, Z+3	; 0x03
    3a80:	20 e0       	ldi	r18, 0x00	; 0
    3a82:	3f ef       	ldi	r19, 0xFF	; 255
    3a84:	4f e7       	ldi	r20, 0x7F	; 127
    3a86:	57 e4       	ldi	r21, 0x47	; 71
    3a88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a8c:	18 16       	cp	r1, r24
    3a8e:	0c f0       	brlt	.+2      	; 0x3a92 <APPLICATION_Core+0xf6>
    3a90:	43 c0       	rjmp	.+134    	; 0x3b18 <APPLICATION_Core+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a92:	fe 01       	movw	r30, r28
    3a94:	e1 5a       	subi	r30, 0xA1	; 161
    3a96:	ff 4f       	sbci	r31, 0xFF	; 255
    3a98:	60 81       	ld	r22, Z
    3a9a:	71 81       	ldd	r23, Z+1	; 0x01
    3a9c:	82 81       	ldd	r24, Z+2	; 0x02
    3a9e:	93 81       	ldd	r25, Z+3	; 0x03
    3aa0:	20 e0       	ldi	r18, 0x00	; 0
    3aa2:	30 e0       	ldi	r19, 0x00	; 0
    3aa4:	40 e2       	ldi	r20, 0x20	; 32
    3aa6:	51 e4       	ldi	r21, 0x41	; 65
    3aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aac:	dc 01       	movw	r26, r24
    3aae:	cb 01       	movw	r24, r22
    3ab0:	8e 01       	movw	r16, r28
    3ab2:	07 5a       	subi	r16, 0xA7	; 167
    3ab4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ab6:	bc 01       	movw	r22, r24
    3ab8:	cd 01       	movw	r24, r26
    3aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3abe:	dc 01       	movw	r26, r24
    3ac0:	cb 01       	movw	r24, r22
    3ac2:	f8 01       	movw	r30, r16
    3ac4:	91 83       	std	Z+1, r25	; 0x01
    3ac6:	80 83       	st	Z, r24
    3ac8:	1f c0       	rjmp	.+62     	; 0x3b08 <APPLICATION_Core+0x16c>
    3aca:	fe 01       	movw	r30, r28
    3acc:	e9 5a       	subi	r30, 0xA9	; 169
    3ace:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad0:	80 e9       	ldi	r24, 0x90	; 144
    3ad2:	91 e0       	ldi	r25, 0x01	; 1
    3ad4:	91 83       	std	Z+1, r25	; 0x01
    3ad6:	80 83       	st	Z, r24
    3ad8:	fe 01       	movw	r30, r28
    3ada:	e9 5a       	subi	r30, 0xA9	; 169
    3adc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ade:	80 81       	ld	r24, Z
    3ae0:	91 81       	ldd	r25, Z+1	; 0x01
    3ae2:	01 97       	sbiw	r24, 0x01	; 1
    3ae4:	f1 f7       	brne	.-4      	; 0x3ae2 <APPLICATION_Core+0x146>
    3ae6:	fe 01       	movw	r30, r28
    3ae8:	e9 5a       	subi	r30, 0xA9	; 169
    3aea:	ff 4f       	sbci	r31, 0xFF	; 255
    3aec:	91 83       	std	Z+1, r25	; 0x01
    3aee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3af0:	de 01       	movw	r26, r28
    3af2:	a7 5a       	subi	r26, 0xA7	; 167
    3af4:	bf 4f       	sbci	r27, 0xFF	; 255
    3af6:	fe 01       	movw	r30, r28
    3af8:	e7 5a       	subi	r30, 0xA7	; 167
    3afa:	ff 4f       	sbci	r31, 0xFF	; 255
    3afc:	80 81       	ld	r24, Z
    3afe:	91 81       	ldd	r25, Z+1	; 0x01
    3b00:	01 97       	sbiw	r24, 0x01	; 1
    3b02:	11 96       	adiw	r26, 0x01	; 1
    3b04:	9c 93       	st	X, r25
    3b06:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b08:	fe 01       	movw	r30, r28
    3b0a:	e7 5a       	subi	r30, 0xA7	; 167
    3b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0e:	80 81       	ld	r24, Z
    3b10:	91 81       	ldd	r25, Z+1	; 0x01
    3b12:	00 97       	sbiw	r24, 0x00	; 0
    3b14:	d1 f6       	brne	.-76     	; 0x3aca <APPLICATION_Core+0x12e>
    3b16:	27 c0       	rjmp	.+78     	; 0x3b66 <APPLICATION_Core+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b18:	8e 01       	movw	r16, r28
    3b1a:	07 5a       	subi	r16, 0xA7	; 167
    3b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b1e:	fe 01       	movw	r30, r28
    3b20:	e5 5a       	subi	r30, 0xA5	; 165
    3b22:	ff 4f       	sbci	r31, 0xFF	; 255
    3b24:	60 81       	ld	r22, Z
    3b26:	71 81       	ldd	r23, Z+1	; 0x01
    3b28:	82 81       	ldd	r24, Z+2	; 0x02
    3b2a:	93 81       	ldd	r25, Z+3	; 0x03
    3b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b30:	dc 01       	movw	r26, r24
    3b32:	cb 01       	movw	r24, r22
    3b34:	f8 01       	movw	r30, r16
    3b36:	91 83       	std	Z+1, r25	; 0x01
    3b38:	80 83       	st	Z, r24
    3b3a:	de 01       	movw	r26, r28
    3b3c:	ab 5a       	subi	r26, 0xAB	; 171
    3b3e:	bf 4f       	sbci	r27, 0xFF	; 255
    3b40:	fe 01       	movw	r30, r28
    3b42:	e7 5a       	subi	r30, 0xA7	; 167
    3b44:	ff 4f       	sbci	r31, 0xFF	; 255
    3b46:	80 81       	ld	r24, Z
    3b48:	91 81       	ldd	r25, Z+1	; 0x01
    3b4a:	8d 93       	st	X+, r24
    3b4c:	9c 93       	st	X, r25
    3b4e:	fe 01       	movw	r30, r28
    3b50:	eb 5a       	subi	r30, 0xAB	; 171
    3b52:	ff 4f       	sbci	r31, 0xFF	; 255
    3b54:	80 81       	ld	r24, Z
    3b56:	91 81       	ldd	r25, Z+1	; 0x01
    3b58:	01 97       	sbiw	r24, 0x01	; 1
    3b5a:	f1 f7       	brne	.-4      	; 0x3b58 <APPLICATION_Core+0x1bc>
    3b5c:	fe 01       	movw	r30, r28
    3b5e:	eb 5a       	subi	r30, 0xAB	; 171
    3b60:	ff 4f       	sbci	r31, 0xFF	; 255
    3b62:	91 83       	std	Z+1, r25	; 0x01
    3b64:	80 83       	st	Z, r24
	_delay_ms(200);
	H_LCD_void_ClearDisplay();
    3b66:	0e 94 b7 1c 	call	0x396e	; 0x396e <H_LCD_void_ClearDisplay>
	H_LCD_void_sendString("Duty Cycle:");
    3b6a:	8c e7       	ldi	r24, 0x7C	; 124
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <H_LCD_void_sendString>
	H_LCD_void_gotoXY(2,0);
    3b72:	82 e0       	ldi	r24, 0x02	; 2
    3b74:	60 e0       	ldi	r22, 0x00	; 0
    3b76:	0e 94 42 1c 	call	0x3884	; 0x3884 <H_LCD_void_gotoXY>
	Duty_Cycle=0;
    3b7a:	fe 01       	movw	r30, r28
    3b7c:	e6 59       	subi	r30, 0x96	; 150
    3b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b80:	10 82       	st	Z, r1
	do
	{
		Pressed_key=H_KEYPAD_u8_getPressedKey();
    3b82:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <H_KEYPAD_u8_getPressedKey>
    3b86:	fe 01       	movw	r30, r28
    3b88:	ec 59       	subi	r30, 0x9C	; 156
    3b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8c:	80 83       	st	Z, r24
		if(Pressed_key != '\0' && Pressed_key != '=')
    3b8e:	fe 01       	movw	r30, r28
    3b90:	ec 59       	subi	r30, 0x9C	; 156
    3b92:	ff 4f       	sbci	r31, 0xFF	; 255
    3b94:	80 81       	ld	r24, Z
    3b96:	88 23       	and	r24, r24
    3b98:	79 f1       	breq	.+94     	; 0x3bf8 <APPLICATION_Core+0x25c>
    3b9a:	fe 01       	movw	r30, r28
    3b9c:	ec 59       	subi	r30, 0x9C	; 156
    3b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba0:	80 81       	ld	r24, Z
    3ba2:	8d 33       	cpi	r24, 0x3D	; 61
    3ba4:	49 f1       	breq	.+82     	; 0x3bf8 <APPLICATION_Core+0x25c>
		{
			H_LCD_void_sendData(Pressed_key);
    3ba6:	fe 01       	movw	r30, r28
    3ba8:	ec 59       	subi	r30, 0x9C	; 156
    3baa:	ff 4f       	sbci	r31, 0xFF	; 255
    3bac:	80 81       	ld	r24, Z
    3bae:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <H_LCD_void_sendData>
			Pressed_key_int= Pressed_key -'0';
    3bb2:	de 01       	movw	r26, r28
    3bb4:	ad 59       	subi	r26, 0x9D	; 157
    3bb6:	bf 4f       	sbci	r27, 0xFF	; 255
    3bb8:	fe 01       	movw	r30, r28
    3bba:	ec 59       	subi	r30, 0x9C	; 156
    3bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bbe:	80 81       	ld	r24, Z
    3bc0:	80 53       	subi	r24, 0x30	; 48
    3bc2:	8c 93       	st	X, r24
			Duty_Cycle=Duty_Cycle*10+Pressed_key_int;
    3bc4:	fe 01       	movw	r30, r28
    3bc6:	e6 59       	subi	r30, 0x96	; 150
    3bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bca:	80 81       	ld	r24, Z
    3bcc:	88 2f       	mov	r24, r24
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	9c 01       	movw	r18, r24
    3bd2:	22 0f       	add	r18, r18
    3bd4:	33 1f       	adc	r19, r19
    3bd6:	c9 01       	movw	r24, r18
    3bd8:	88 0f       	add	r24, r24
    3bda:	99 1f       	adc	r25, r25
    3bdc:	88 0f       	add	r24, r24
    3bde:	99 1f       	adc	r25, r25
    3be0:	82 0f       	add	r24, r18
    3be2:	93 1f       	adc	r25, r19
    3be4:	98 2f       	mov	r25, r24
    3be6:	de 01       	movw	r26, r28
    3be8:	a6 59       	subi	r26, 0x96	; 150
    3bea:	bf 4f       	sbci	r27, 0xFF	; 255
    3bec:	fe 01       	movw	r30, r28
    3bee:	ed 59       	subi	r30, 0x9D	; 157
    3bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf2:	80 81       	ld	r24, Z
    3bf4:	89 0f       	add	r24, r25
    3bf6:	8c 93       	st	X, r24
		}
	}while(Pressed_key != '=');
    3bf8:	fe 01       	movw	r30, r28
    3bfa:	ec 59       	subi	r30, 0x9C	; 156
    3bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfe:	80 81       	ld	r24, Z
    3c00:	8d 33       	cpi	r24, 0x3D	; 61
    3c02:	09 f0       	breq	.+2      	; 0x3c06 <APPLICATION_Core+0x26a>
    3c04:	be cf       	rjmp	.-132    	; 0x3b82 <APPLICATION_Core+0x1e6>
	Pressed_key='\0';
    3c06:	fe 01       	movw	r30, r28
    3c08:	ec 59       	subi	r30, 0x9C	; 156
    3c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0c:	10 82       	st	Z, r1
	Pressed_key_int=0;
    3c0e:	fe 01       	movw	r30, r28
    3c10:	ed 59       	subi	r30, 0x9D	; 157
    3c12:	ff 4f       	sbci	r31, 0xFF	; 255
    3c14:	10 82       	st	Z, r1
    3c16:	fe 01       	movw	r30, r28
    3c18:	ef 5a       	subi	r30, 0xAF	; 175
    3c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1c:	80 e0       	ldi	r24, 0x00	; 0
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	a8 e4       	ldi	r26, 0x48	; 72
    3c22:	b3 e4       	ldi	r27, 0x43	; 67
    3c24:	80 83       	st	Z, r24
    3c26:	91 83       	std	Z+1, r25	; 0x01
    3c28:	a2 83       	std	Z+2, r26	; 0x02
    3c2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c2c:	8e 01       	movw	r16, r28
    3c2e:	03 5b       	subi	r16, 0xB3	; 179
    3c30:	1f 4f       	sbci	r17, 0xFF	; 255
    3c32:	fe 01       	movw	r30, r28
    3c34:	ef 5a       	subi	r30, 0xAF	; 175
    3c36:	ff 4f       	sbci	r31, 0xFF	; 255
    3c38:	60 81       	ld	r22, Z
    3c3a:	71 81       	ldd	r23, Z+1	; 0x01
    3c3c:	82 81       	ldd	r24, Z+2	; 0x02
    3c3e:	93 81       	ldd	r25, Z+3	; 0x03
    3c40:	20 e0       	ldi	r18, 0x00	; 0
    3c42:	30 e0       	ldi	r19, 0x00	; 0
    3c44:	4a e7       	ldi	r20, 0x7A	; 122
    3c46:	55 e4       	ldi	r21, 0x45	; 69
    3c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c4c:	dc 01       	movw	r26, r24
    3c4e:	cb 01       	movw	r24, r22
    3c50:	f8 01       	movw	r30, r16
    3c52:	80 83       	st	Z, r24
    3c54:	91 83       	std	Z+1, r25	; 0x01
    3c56:	a2 83       	std	Z+2, r26	; 0x02
    3c58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c5a:	fe 01       	movw	r30, r28
    3c5c:	e3 5b       	subi	r30, 0xB3	; 179
    3c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c60:	60 81       	ld	r22, Z
    3c62:	71 81       	ldd	r23, Z+1	; 0x01
    3c64:	82 81       	ldd	r24, Z+2	; 0x02
    3c66:	93 81       	ldd	r25, Z+3	; 0x03
    3c68:	20 e0       	ldi	r18, 0x00	; 0
    3c6a:	30 e0       	ldi	r19, 0x00	; 0
    3c6c:	40 e8       	ldi	r20, 0x80	; 128
    3c6e:	5f e3       	ldi	r21, 0x3F	; 63
    3c70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c74:	88 23       	and	r24, r24
    3c76:	44 f4       	brge	.+16     	; 0x3c88 <APPLICATION_Core+0x2ec>
		__ticks = 1;
    3c78:	fe 01       	movw	r30, r28
    3c7a:	e5 5b       	subi	r30, 0xB5	; 181
    3c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7e:	81 e0       	ldi	r24, 0x01	; 1
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	91 83       	std	Z+1, r25	; 0x01
    3c84:	80 83       	st	Z, r24
    3c86:	64 c0       	rjmp	.+200    	; 0x3d50 <APPLICATION_Core+0x3b4>
	else if (__tmp > 65535)
    3c88:	fe 01       	movw	r30, r28
    3c8a:	e3 5b       	subi	r30, 0xB3	; 179
    3c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8e:	60 81       	ld	r22, Z
    3c90:	71 81       	ldd	r23, Z+1	; 0x01
    3c92:	82 81       	ldd	r24, Z+2	; 0x02
    3c94:	93 81       	ldd	r25, Z+3	; 0x03
    3c96:	20 e0       	ldi	r18, 0x00	; 0
    3c98:	3f ef       	ldi	r19, 0xFF	; 255
    3c9a:	4f e7       	ldi	r20, 0x7F	; 127
    3c9c:	57 e4       	ldi	r21, 0x47	; 71
    3c9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ca2:	18 16       	cp	r1, r24
    3ca4:	0c f0       	brlt	.+2      	; 0x3ca8 <APPLICATION_Core+0x30c>
    3ca6:	43 c0       	rjmp	.+134    	; 0x3d2e <APPLICATION_Core+0x392>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ca8:	fe 01       	movw	r30, r28
    3caa:	ef 5a       	subi	r30, 0xAF	; 175
    3cac:	ff 4f       	sbci	r31, 0xFF	; 255
    3cae:	60 81       	ld	r22, Z
    3cb0:	71 81       	ldd	r23, Z+1	; 0x01
    3cb2:	82 81       	ldd	r24, Z+2	; 0x02
    3cb4:	93 81       	ldd	r25, Z+3	; 0x03
    3cb6:	20 e0       	ldi	r18, 0x00	; 0
    3cb8:	30 e0       	ldi	r19, 0x00	; 0
    3cba:	40 e2       	ldi	r20, 0x20	; 32
    3cbc:	51 e4       	ldi	r21, 0x41	; 65
    3cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc2:	dc 01       	movw	r26, r24
    3cc4:	cb 01       	movw	r24, r22
    3cc6:	8e 01       	movw	r16, r28
    3cc8:	05 5b       	subi	r16, 0xB5	; 181
    3cca:	1f 4f       	sbci	r17, 0xFF	; 255
    3ccc:	bc 01       	movw	r22, r24
    3cce:	cd 01       	movw	r24, r26
    3cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cd4:	dc 01       	movw	r26, r24
    3cd6:	cb 01       	movw	r24, r22
    3cd8:	f8 01       	movw	r30, r16
    3cda:	91 83       	std	Z+1, r25	; 0x01
    3cdc:	80 83       	st	Z, r24
    3cde:	1f c0       	rjmp	.+62     	; 0x3d1e <APPLICATION_Core+0x382>
    3ce0:	fe 01       	movw	r30, r28
    3ce2:	e7 5b       	subi	r30, 0xB7	; 183
    3ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce6:	80 e9       	ldi	r24, 0x90	; 144
    3ce8:	91 e0       	ldi	r25, 0x01	; 1
    3cea:	91 83       	std	Z+1, r25	; 0x01
    3cec:	80 83       	st	Z, r24
    3cee:	fe 01       	movw	r30, r28
    3cf0:	e7 5b       	subi	r30, 0xB7	; 183
    3cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf4:	80 81       	ld	r24, Z
    3cf6:	91 81       	ldd	r25, Z+1	; 0x01
    3cf8:	01 97       	sbiw	r24, 0x01	; 1
    3cfa:	f1 f7       	brne	.-4      	; 0x3cf8 <APPLICATION_Core+0x35c>
    3cfc:	fe 01       	movw	r30, r28
    3cfe:	e7 5b       	subi	r30, 0xB7	; 183
    3d00:	ff 4f       	sbci	r31, 0xFF	; 255
    3d02:	91 83       	std	Z+1, r25	; 0x01
    3d04:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d06:	de 01       	movw	r26, r28
    3d08:	a5 5b       	subi	r26, 0xB5	; 181
    3d0a:	bf 4f       	sbci	r27, 0xFF	; 255
    3d0c:	fe 01       	movw	r30, r28
    3d0e:	e5 5b       	subi	r30, 0xB5	; 181
    3d10:	ff 4f       	sbci	r31, 0xFF	; 255
    3d12:	80 81       	ld	r24, Z
    3d14:	91 81       	ldd	r25, Z+1	; 0x01
    3d16:	01 97       	sbiw	r24, 0x01	; 1
    3d18:	11 96       	adiw	r26, 0x01	; 1
    3d1a:	9c 93       	st	X, r25
    3d1c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d1e:	fe 01       	movw	r30, r28
    3d20:	e5 5b       	subi	r30, 0xB5	; 181
    3d22:	ff 4f       	sbci	r31, 0xFF	; 255
    3d24:	80 81       	ld	r24, Z
    3d26:	91 81       	ldd	r25, Z+1	; 0x01
    3d28:	00 97       	sbiw	r24, 0x00	; 0
    3d2a:	d1 f6       	brne	.-76     	; 0x3ce0 <APPLICATION_Core+0x344>
    3d2c:	27 c0       	rjmp	.+78     	; 0x3d7c <APPLICATION_Core+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d2e:	8e 01       	movw	r16, r28
    3d30:	05 5b       	subi	r16, 0xB5	; 181
    3d32:	1f 4f       	sbci	r17, 0xFF	; 255
    3d34:	fe 01       	movw	r30, r28
    3d36:	e3 5b       	subi	r30, 0xB3	; 179
    3d38:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3a:	60 81       	ld	r22, Z
    3d3c:	71 81       	ldd	r23, Z+1	; 0x01
    3d3e:	82 81       	ldd	r24, Z+2	; 0x02
    3d40:	93 81       	ldd	r25, Z+3	; 0x03
    3d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d46:	dc 01       	movw	r26, r24
    3d48:	cb 01       	movw	r24, r22
    3d4a:	f8 01       	movw	r30, r16
    3d4c:	91 83       	std	Z+1, r25	; 0x01
    3d4e:	80 83       	st	Z, r24
    3d50:	de 01       	movw	r26, r28
    3d52:	a9 5b       	subi	r26, 0xB9	; 185
    3d54:	bf 4f       	sbci	r27, 0xFF	; 255
    3d56:	fe 01       	movw	r30, r28
    3d58:	e5 5b       	subi	r30, 0xB5	; 181
    3d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5c:	80 81       	ld	r24, Z
    3d5e:	91 81       	ldd	r25, Z+1	; 0x01
    3d60:	8d 93       	st	X+, r24
    3d62:	9c 93       	st	X, r25
    3d64:	fe 01       	movw	r30, r28
    3d66:	e9 5b       	subi	r30, 0xB9	; 185
    3d68:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6a:	80 81       	ld	r24, Z
    3d6c:	91 81       	ldd	r25, Z+1	; 0x01
    3d6e:	01 97       	sbiw	r24, 0x01	; 1
    3d70:	f1 f7       	brne	.-4      	; 0x3d6e <APPLICATION_Core+0x3d2>
    3d72:	fe 01       	movw	r30, r28
    3d74:	e9 5b       	subi	r30, 0xB9	; 185
    3d76:	ff 4f       	sbci	r31, 0xFF	; 255
    3d78:	91 83       	std	Z+1, r25	; 0x01
    3d7a:	80 83       	st	Z, r24
	_delay_ms(200);
//	H_LCD_void_ClearDisplay();
	//H_LCD_void_sendIntNum(Duty_Cycle);
	//_delay_ms(3000);

	H_LCD_void_ClearDisplay();
    3d7c:	0e 94 b7 1c 	call	0x396e	; 0x396e <H_LCD_void_ClearDisplay>
	/*Select the frequency*/
	H_LCD_void_sendString("Please Enter");
    3d80:	80 e6       	ldi	r24, 0x60	; 96
    3d82:	90 e0       	ldi	r25, 0x00	; 0
    3d84:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <H_LCD_void_sendString>
	H_LCD_void_gotoXY(2,0);
    3d88:	82 e0       	ldi	r24, 0x02	; 2
    3d8a:	60 e0       	ldi	r22, 0x00	; 0
    3d8c:	0e 94 42 1c 	call	0x3884	; 0x3884 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("The Frequency");
    3d90:	88 e8       	ldi	r24, 0x88	; 136
    3d92:	90 e0       	ldi	r25, 0x00	; 0
    3d94:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <H_LCD_void_sendString>
    3d98:	fe 01       	movw	r30, r28
    3d9a:	ed 5b       	subi	r30, 0xBD	; 189
    3d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9e:	80 e0       	ldi	r24, 0x00	; 0
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	a8 e4       	ldi	r26, 0x48	; 72
    3da4:	b3 e4       	ldi	r27, 0x43	; 67
    3da6:	80 83       	st	Z, r24
    3da8:	91 83       	std	Z+1, r25	; 0x01
    3daa:	a2 83       	std	Z+2, r26	; 0x02
    3dac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dae:	8e 01       	movw	r16, r28
    3db0:	01 5c       	subi	r16, 0xC1	; 193
    3db2:	1f 4f       	sbci	r17, 0xFF	; 255
    3db4:	fe 01       	movw	r30, r28
    3db6:	ed 5b       	subi	r30, 0xBD	; 189
    3db8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dba:	60 81       	ld	r22, Z
    3dbc:	71 81       	ldd	r23, Z+1	; 0x01
    3dbe:	82 81       	ldd	r24, Z+2	; 0x02
    3dc0:	93 81       	ldd	r25, Z+3	; 0x03
    3dc2:	20 e0       	ldi	r18, 0x00	; 0
    3dc4:	30 e0       	ldi	r19, 0x00	; 0
    3dc6:	4a e7       	ldi	r20, 0x7A	; 122
    3dc8:	55 e4       	ldi	r21, 0x45	; 69
    3dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dce:	dc 01       	movw	r26, r24
    3dd0:	cb 01       	movw	r24, r22
    3dd2:	f8 01       	movw	r30, r16
    3dd4:	80 83       	st	Z, r24
    3dd6:	91 83       	std	Z+1, r25	; 0x01
    3dd8:	a2 83       	std	Z+2, r26	; 0x02
    3dda:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ddc:	fe 01       	movw	r30, r28
    3dde:	ff 96       	adiw	r30, 0x3f	; 63
    3de0:	60 81       	ld	r22, Z
    3de2:	71 81       	ldd	r23, Z+1	; 0x01
    3de4:	82 81       	ldd	r24, Z+2	; 0x02
    3de6:	93 81       	ldd	r25, Z+3	; 0x03
    3de8:	20 e0       	ldi	r18, 0x00	; 0
    3dea:	30 e0       	ldi	r19, 0x00	; 0
    3dec:	40 e8       	ldi	r20, 0x80	; 128
    3dee:	5f e3       	ldi	r21, 0x3F	; 63
    3df0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3df4:	88 23       	and	r24, r24
    3df6:	2c f4       	brge	.+10     	; 0x3e02 <APPLICATION_Core+0x466>
		__ticks = 1;
    3df8:	81 e0       	ldi	r24, 0x01	; 1
    3dfa:	90 e0       	ldi	r25, 0x00	; 0
    3dfc:	9e af       	std	Y+62, r25	; 0x3e
    3dfe:	8d af       	std	Y+61, r24	; 0x3d
    3e00:	46 c0       	rjmp	.+140    	; 0x3e8e <APPLICATION_Core+0x4f2>
	else if (__tmp > 65535)
    3e02:	fe 01       	movw	r30, r28
    3e04:	ff 96       	adiw	r30, 0x3f	; 63
    3e06:	60 81       	ld	r22, Z
    3e08:	71 81       	ldd	r23, Z+1	; 0x01
    3e0a:	82 81       	ldd	r24, Z+2	; 0x02
    3e0c:	93 81       	ldd	r25, Z+3	; 0x03
    3e0e:	20 e0       	ldi	r18, 0x00	; 0
    3e10:	3f ef       	ldi	r19, 0xFF	; 255
    3e12:	4f e7       	ldi	r20, 0x7F	; 127
    3e14:	57 e4       	ldi	r21, 0x47	; 71
    3e16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e1a:	18 16       	cp	r1, r24
    3e1c:	64 f5       	brge	.+88     	; 0x3e76 <APPLICATION_Core+0x4da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e1e:	fe 01       	movw	r30, r28
    3e20:	ed 5b       	subi	r30, 0xBD	; 189
    3e22:	ff 4f       	sbci	r31, 0xFF	; 255
    3e24:	60 81       	ld	r22, Z
    3e26:	71 81       	ldd	r23, Z+1	; 0x01
    3e28:	82 81       	ldd	r24, Z+2	; 0x02
    3e2a:	93 81       	ldd	r25, Z+3	; 0x03
    3e2c:	20 e0       	ldi	r18, 0x00	; 0
    3e2e:	30 e0       	ldi	r19, 0x00	; 0
    3e30:	40 e2       	ldi	r20, 0x20	; 32
    3e32:	51 e4       	ldi	r21, 0x41	; 65
    3e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e38:	dc 01       	movw	r26, r24
    3e3a:	cb 01       	movw	r24, r22
    3e3c:	bc 01       	movw	r22, r24
    3e3e:	cd 01       	movw	r24, r26
    3e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e44:	dc 01       	movw	r26, r24
    3e46:	cb 01       	movw	r24, r22
    3e48:	9e af       	std	Y+62, r25	; 0x3e
    3e4a:	8d af       	std	Y+61, r24	; 0x3d
    3e4c:	0f c0       	rjmp	.+30     	; 0x3e6c <APPLICATION_Core+0x4d0>
    3e4e:	80 e9       	ldi	r24, 0x90	; 144
    3e50:	91 e0       	ldi	r25, 0x01	; 1
    3e52:	9c af       	std	Y+60, r25	; 0x3c
    3e54:	8b af       	std	Y+59, r24	; 0x3b
    3e56:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e58:	9c ad       	ldd	r25, Y+60	; 0x3c
    3e5a:	01 97       	sbiw	r24, 0x01	; 1
    3e5c:	f1 f7       	brne	.-4      	; 0x3e5a <APPLICATION_Core+0x4be>
    3e5e:	9c af       	std	Y+60, r25	; 0x3c
    3e60:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e62:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e64:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e66:	01 97       	sbiw	r24, 0x01	; 1
    3e68:	9e af       	std	Y+62, r25	; 0x3e
    3e6a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e6c:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e6e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e70:	00 97       	sbiw	r24, 0x00	; 0
    3e72:	69 f7       	brne	.-38     	; 0x3e4e <APPLICATION_Core+0x4b2>
    3e74:	16 c0       	rjmp	.+44     	; 0x3ea2 <APPLICATION_Core+0x506>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e76:	fe 01       	movw	r30, r28
    3e78:	ff 96       	adiw	r30, 0x3f	; 63
    3e7a:	60 81       	ld	r22, Z
    3e7c:	71 81       	ldd	r23, Z+1	; 0x01
    3e7e:	82 81       	ldd	r24, Z+2	; 0x02
    3e80:	93 81       	ldd	r25, Z+3	; 0x03
    3e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e86:	dc 01       	movw	r26, r24
    3e88:	cb 01       	movw	r24, r22
    3e8a:	9e af       	std	Y+62, r25	; 0x3e
    3e8c:	8d af       	std	Y+61, r24	; 0x3d
    3e8e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e90:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e92:	9a af       	std	Y+58, r25	; 0x3a
    3e94:	89 af       	std	Y+57, r24	; 0x39
    3e96:	89 ad       	ldd	r24, Y+57	; 0x39
    3e98:	9a ad       	ldd	r25, Y+58	; 0x3a
    3e9a:	01 97       	sbiw	r24, 0x01	; 1
    3e9c:	f1 f7       	brne	.-4      	; 0x3e9a <APPLICATION_Core+0x4fe>
    3e9e:	9a af       	std	Y+58, r25	; 0x3a
    3ea0:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(200);
	H_LCD_void_ClearDisplay();
    3ea2:	0e 94 b7 1c 	call	0x396e	; 0x396e <H_LCD_void_ClearDisplay>
	H_LCD_void_sendString("Frequency:");
    3ea6:	86 e9       	ldi	r24, 0x96	; 150
    3ea8:	90 e0       	ldi	r25, 0x00	; 0
    3eaa:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <H_LCD_void_sendString>
	H_LCD_void_gotoXY(2,0);
    3eae:	82 e0       	ldi	r24, 0x02	; 2
    3eb0:	60 e0       	ldi	r22, 0x00	; 0
    3eb2:	0e 94 42 1c 	call	0x3884	; 0x3884 <H_LCD_void_gotoXY>
	PWM_FREQ=0;
    3eb6:	fe 01       	movw	r30, r28
    3eb8:	eb 59       	subi	r30, 0x9B	; 155
    3eba:	ff 4f       	sbci	r31, 0xFF	; 255
    3ebc:	10 82       	st	Z, r1
    3ebe:	11 82       	std	Z+1, r1	; 0x01
    3ec0:	12 82       	std	Z+2, r1	; 0x02
    3ec2:	13 82       	std	Z+3, r1	; 0x03
	do
	{
		Pressed_key=H_KEYPAD_u8_getPressedKey();
    3ec4:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <H_KEYPAD_u8_getPressedKey>
    3ec8:	fe 01       	movw	r30, r28
    3eca:	ec 59       	subi	r30, 0x9C	; 156
    3ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ece:	80 83       	st	Z, r24
		if(Pressed_key != '\0' && Pressed_key != '=')
    3ed0:	fe 01       	movw	r30, r28
    3ed2:	ec 59       	subi	r30, 0x9C	; 156
    3ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed6:	80 81       	ld	r24, Z
    3ed8:	88 23       	and	r24, r24
    3eda:	c9 f1       	breq	.+114    	; 0x3f4e <APPLICATION_Core+0x5b2>
    3edc:	fe 01       	movw	r30, r28
    3ede:	ec 59       	subi	r30, 0x9C	; 156
    3ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee2:	80 81       	ld	r24, Z
    3ee4:	8d 33       	cpi	r24, 0x3D	; 61
    3ee6:	99 f1       	breq	.+102    	; 0x3f4e <APPLICATION_Core+0x5b2>
		{
			H_LCD_void_sendData(Pressed_key);
    3ee8:	fe 01       	movw	r30, r28
    3eea:	ec 59       	subi	r30, 0x9C	; 156
    3eec:	ff 4f       	sbci	r31, 0xFF	; 255
    3eee:	80 81       	ld	r24, Z
    3ef0:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <H_LCD_void_sendData>
			Pressed_key_int= Pressed_key -'0';
    3ef4:	de 01       	movw	r26, r28
    3ef6:	ad 59       	subi	r26, 0x9D	; 157
    3ef8:	bf 4f       	sbci	r27, 0xFF	; 255
    3efa:	fe 01       	movw	r30, r28
    3efc:	ec 59       	subi	r30, 0x9C	; 156
    3efe:	ff 4f       	sbci	r31, 0xFF	; 255
    3f00:	80 81       	ld	r24, Z
    3f02:	80 53       	subi	r24, 0x30	; 48
    3f04:	8c 93       	st	X, r24
			PWM_FREQ=PWM_FREQ*10+Pressed_key_int;
    3f06:	fe 01       	movw	r30, r28
    3f08:	eb 59       	subi	r30, 0x9B	; 155
    3f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0c:	80 81       	ld	r24, Z
    3f0e:	91 81       	ldd	r25, Z+1	; 0x01
    3f10:	a2 81       	ldd	r26, Z+2	; 0x02
    3f12:	b3 81       	ldd	r27, Z+3	; 0x03
    3f14:	2a e0       	ldi	r18, 0x0A	; 10
    3f16:	30 e0       	ldi	r19, 0x00	; 0
    3f18:	40 e0       	ldi	r20, 0x00	; 0
    3f1a:	50 e0       	ldi	r21, 0x00	; 0
    3f1c:	bc 01       	movw	r22, r24
    3f1e:	cd 01       	movw	r24, r26
    3f20:	0e 94 ce 22 	call	0x459c	; 0x459c <__mulsi3>
    3f24:	9b 01       	movw	r18, r22
    3f26:	ac 01       	movw	r20, r24
    3f28:	fe 01       	movw	r30, r28
    3f2a:	ed 59       	subi	r30, 0x9D	; 157
    3f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2e:	80 81       	ld	r24, Z
    3f30:	88 2f       	mov	r24, r24
    3f32:	90 e0       	ldi	r25, 0x00	; 0
    3f34:	a0 e0       	ldi	r26, 0x00	; 0
    3f36:	b0 e0       	ldi	r27, 0x00	; 0
    3f38:	fe 01       	movw	r30, r28
    3f3a:	eb 59       	subi	r30, 0x9B	; 155
    3f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3e:	82 0f       	add	r24, r18
    3f40:	93 1f       	adc	r25, r19
    3f42:	a4 1f       	adc	r26, r20
    3f44:	b5 1f       	adc	r27, r21
    3f46:	80 83       	st	Z, r24
    3f48:	91 83       	std	Z+1, r25	; 0x01
    3f4a:	a2 83       	std	Z+2, r26	; 0x02
    3f4c:	b3 83       	std	Z+3, r27	; 0x03
		}
	}while(Pressed_key != '=');
    3f4e:	fe 01       	movw	r30, r28
    3f50:	ec 59       	subi	r30, 0x9C	; 156
    3f52:	ff 4f       	sbci	r31, 0xFF	; 255
    3f54:	80 81       	ld	r24, Z
    3f56:	8d 33       	cpi	r24, 0x3D	; 61
    3f58:	09 f0       	breq	.+2      	; 0x3f5c <APPLICATION_Core+0x5c0>
    3f5a:	b4 cf       	rjmp	.-152    	; 0x3ec4 <APPLICATION_Core+0x528>
    3f5c:	80 e0       	ldi	r24, 0x00	; 0
    3f5e:	90 e0       	ldi	r25, 0x00	; 0
    3f60:	a8 e4       	ldi	r26, 0x48	; 72
    3f62:	b3 e4       	ldi	r27, 0x43	; 67
    3f64:	8d ab       	std	Y+53, r24	; 0x35
    3f66:	9e ab       	std	Y+54, r25	; 0x36
    3f68:	af ab       	std	Y+55, r26	; 0x37
    3f6a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f6c:	6d a9       	ldd	r22, Y+53	; 0x35
    3f6e:	7e a9       	ldd	r23, Y+54	; 0x36
    3f70:	8f a9       	ldd	r24, Y+55	; 0x37
    3f72:	98 ad       	ldd	r25, Y+56	; 0x38
    3f74:	20 e0       	ldi	r18, 0x00	; 0
    3f76:	30 e0       	ldi	r19, 0x00	; 0
    3f78:	4a e7       	ldi	r20, 0x7A	; 122
    3f7a:	55 e4       	ldi	r21, 0x45	; 69
    3f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f80:	dc 01       	movw	r26, r24
    3f82:	cb 01       	movw	r24, r22
    3f84:	89 ab       	std	Y+49, r24	; 0x31
    3f86:	9a ab       	std	Y+50, r25	; 0x32
    3f88:	ab ab       	std	Y+51, r26	; 0x33
    3f8a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3f8c:	69 a9       	ldd	r22, Y+49	; 0x31
    3f8e:	7a a9       	ldd	r23, Y+50	; 0x32
    3f90:	8b a9       	ldd	r24, Y+51	; 0x33
    3f92:	9c a9       	ldd	r25, Y+52	; 0x34
    3f94:	20 e0       	ldi	r18, 0x00	; 0
    3f96:	30 e0       	ldi	r19, 0x00	; 0
    3f98:	40 e8       	ldi	r20, 0x80	; 128
    3f9a:	5f e3       	ldi	r21, 0x3F	; 63
    3f9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fa0:	88 23       	and	r24, r24
    3fa2:	2c f4       	brge	.+10     	; 0x3fae <APPLICATION_Core+0x612>
		__ticks = 1;
    3fa4:	81 e0       	ldi	r24, 0x01	; 1
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	98 ab       	std	Y+48, r25	; 0x30
    3faa:	8f a7       	std	Y+47, r24	; 0x2f
    3fac:	3f c0       	rjmp	.+126    	; 0x402c <APPLICATION_Core+0x690>
	else if (__tmp > 65535)
    3fae:	69 a9       	ldd	r22, Y+49	; 0x31
    3fb0:	7a a9       	ldd	r23, Y+50	; 0x32
    3fb2:	8b a9       	ldd	r24, Y+51	; 0x33
    3fb4:	9c a9       	ldd	r25, Y+52	; 0x34
    3fb6:	20 e0       	ldi	r18, 0x00	; 0
    3fb8:	3f ef       	ldi	r19, 0xFF	; 255
    3fba:	4f e7       	ldi	r20, 0x7F	; 127
    3fbc:	57 e4       	ldi	r21, 0x47	; 71
    3fbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fc2:	18 16       	cp	r1, r24
    3fc4:	4c f5       	brge	.+82     	; 0x4018 <APPLICATION_Core+0x67c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fc6:	6d a9       	ldd	r22, Y+53	; 0x35
    3fc8:	7e a9       	ldd	r23, Y+54	; 0x36
    3fca:	8f a9       	ldd	r24, Y+55	; 0x37
    3fcc:	98 ad       	ldd	r25, Y+56	; 0x38
    3fce:	20 e0       	ldi	r18, 0x00	; 0
    3fd0:	30 e0       	ldi	r19, 0x00	; 0
    3fd2:	40 e2       	ldi	r20, 0x20	; 32
    3fd4:	51 e4       	ldi	r21, 0x41	; 65
    3fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fda:	dc 01       	movw	r26, r24
    3fdc:	cb 01       	movw	r24, r22
    3fde:	bc 01       	movw	r22, r24
    3fe0:	cd 01       	movw	r24, r26
    3fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fe6:	dc 01       	movw	r26, r24
    3fe8:	cb 01       	movw	r24, r22
    3fea:	98 ab       	std	Y+48, r25	; 0x30
    3fec:	8f a7       	std	Y+47, r24	; 0x2f
    3fee:	0f c0       	rjmp	.+30     	; 0x400e <APPLICATION_Core+0x672>
    3ff0:	80 e9       	ldi	r24, 0x90	; 144
    3ff2:	91 e0       	ldi	r25, 0x01	; 1
    3ff4:	9e a7       	std	Y+46, r25	; 0x2e
    3ff6:	8d a7       	std	Y+45, r24	; 0x2d
    3ff8:	8d a5       	ldd	r24, Y+45	; 0x2d
    3ffa:	9e a5       	ldd	r25, Y+46	; 0x2e
    3ffc:	01 97       	sbiw	r24, 0x01	; 1
    3ffe:	f1 f7       	brne	.-4      	; 0x3ffc <APPLICATION_Core+0x660>
    4000:	9e a7       	std	Y+46, r25	; 0x2e
    4002:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4004:	8f a5       	ldd	r24, Y+47	; 0x2f
    4006:	98 a9       	ldd	r25, Y+48	; 0x30
    4008:	01 97       	sbiw	r24, 0x01	; 1
    400a:	98 ab       	std	Y+48, r25	; 0x30
    400c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    400e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4010:	98 a9       	ldd	r25, Y+48	; 0x30
    4012:	00 97       	sbiw	r24, 0x00	; 0
    4014:	69 f7       	brne	.-38     	; 0x3ff0 <APPLICATION_Core+0x654>
    4016:	14 c0       	rjmp	.+40     	; 0x4040 <APPLICATION_Core+0x6a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4018:	69 a9       	ldd	r22, Y+49	; 0x31
    401a:	7a a9       	ldd	r23, Y+50	; 0x32
    401c:	8b a9       	ldd	r24, Y+51	; 0x33
    401e:	9c a9       	ldd	r25, Y+52	; 0x34
    4020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4024:	dc 01       	movw	r26, r24
    4026:	cb 01       	movw	r24, r22
    4028:	98 ab       	std	Y+48, r25	; 0x30
    402a:	8f a7       	std	Y+47, r24	; 0x2f
    402c:	8f a5       	ldd	r24, Y+47	; 0x2f
    402e:	98 a9       	ldd	r25, Y+48	; 0x30
    4030:	9c a7       	std	Y+44, r25	; 0x2c
    4032:	8b a7       	std	Y+43, r24	; 0x2b
    4034:	8b a5       	ldd	r24, Y+43	; 0x2b
    4036:	9c a5       	ldd	r25, Y+44	; 0x2c
    4038:	01 97       	sbiw	r24, 0x01	; 1
    403a:	f1 f7       	brne	.-4      	; 0x4038 <APPLICATION_Core+0x69c>
    403c:	9c a7       	std	Y+44, r25	; 0x2c
    403e:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(200);
	Pressed_key='\0';
    4040:	fe 01       	movw	r30, r28
    4042:	ec 59       	subi	r30, 0x9C	; 156
    4044:	ff 4f       	sbci	r31, 0xFF	; 255
    4046:	10 82       	st	Z, r1
	Pressed_key_int=0;
    4048:	fe 01       	movw	r30, r28
    404a:	ed 59       	subi	r30, 0x9D	; 157
    404c:	ff 4f       	sbci	r31, 0xFF	; 255
    404e:	10 82       	st	Z, r1
	//H_LCD_void_ClearDisplay();
//	H_LCD_void_sendIntNum(PWM_FREQ);
	//_delay_ms(3000);

	H_LCD_void_ClearDisplay();
    4050:	0e 94 b7 1c 	call	0x396e	; 0x396e <H_LCD_void_ClearDisplay>
	/*Select Direction*/
	H_LCD_void_sendString("Select Direction");
    4054:	81 ea       	ldi	r24, 0xA1	; 161
    4056:	90 e0       	ldi	r25, 0x00	; 0
    4058:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <H_LCD_void_sendString>
	H_LCD_void_gotoXY(2,0);
    405c:	82 e0       	ldi	r24, 0x02	; 2
    405e:	60 e0       	ldi	r22, 0x00	; 0
    4060:	0e 94 42 1c 	call	0x3884	; 0x3884 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("Of rotation");
    4064:	82 eb       	ldi	r24, 0xB2	; 178
    4066:	90 e0       	ldi	r25, 0x00	; 0
    4068:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <H_LCD_void_sendString>
    406c:	80 e0       	ldi	r24, 0x00	; 0
    406e:	90 e0       	ldi	r25, 0x00	; 0
    4070:	a8 e4       	ldi	r26, 0x48	; 72
    4072:	b3 e4       	ldi	r27, 0x43	; 67
    4074:	8f a3       	std	Y+39, r24	; 0x27
    4076:	98 a7       	std	Y+40, r25	; 0x28
    4078:	a9 a7       	std	Y+41, r26	; 0x29
    407a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    407c:	6f a1       	ldd	r22, Y+39	; 0x27
    407e:	78 a5       	ldd	r23, Y+40	; 0x28
    4080:	89 a5       	ldd	r24, Y+41	; 0x29
    4082:	9a a5       	ldd	r25, Y+42	; 0x2a
    4084:	20 e0       	ldi	r18, 0x00	; 0
    4086:	30 e0       	ldi	r19, 0x00	; 0
    4088:	4a e7       	ldi	r20, 0x7A	; 122
    408a:	55 e4       	ldi	r21, 0x45	; 69
    408c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4090:	dc 01       	movw	r26, r24
    4092:	cb 01       	movw	r24, r22
    4094:	8b a3       	std	Y+35, r24	; 0x23
    4096:	9c a3       	std	Y+36, r25	; 0x24
    4098:	ad a3       	std	Y+37, r26	; 0x25
    409a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    409c:	6b a1       	ldd	r22, Y+35	; 0x23
    409e:	7c a1       	ldd	r23, Y+36	; 0x24
    40a0:	8d a1       	ldd	r24, Y+37	; 0x25
    40a2:	9e a1       	ldd	r25, Y+38	; 0x26
    40a4:	20 e0       	ldi	r18, 0x00	; 0
    40a6:	30 e0       	ldi	r19, 0x00	; 0
    40a8:	40 e8       	ldi	r20, 0x80	; 128
    40aa:	5f e3       	ldi	r21, 0x3F	; 63
    40ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40b0:	88 23       	and	r24, r24
    40b2:	2c f4       	brge	.+10     	; 0x40be <APPLICATION_Core+0x722>
		__ticks = 1;
    40b4:	81 e0       	ldi	r24, 0x01	; 1
    40b6:	90 e0       	ldi	r25, 0x00	; 0
    40b8:	9a a3       	std	Y+34, r25	; 0x22
    40ba:	89 a3       	std	Y+33, r24	; 0x21
    40bc:	3f c0       	rjmp	.+126    	; 0x413c <APPLICATION_Core+0x7a0>
	else if (__tmp > 65535)
    40be:	6b a1       	ldd	r22, Y+35	; 0x23
    40c0:	7c a1       	ldd	r23, Y+36	; 0x24
    40c2:	8d a1       	ldd	r24, Y+37	; 0x25
    40c4:	9e a1       	ldd	r25, Y+38	; 0x26
    40c6:	20 e0       	ldi	r18, 0x00	; 0
    40c8:	3f ef       	ldi	r19, 0xFF	; 255
    40ca:	4f e7       	ldi	r20, 0x7F	; 127
    40cc:	57 e4       	ldi	r21, 0x47	; 71
    40ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40d2:	18 16       	cp	r1, r24
    40d4:	4c f5       	brge	.+82     	; 0x4128 <APPLICATION_Core+0x78c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40d6:	6f a1       	ldd	r22, Y+39	; 0x27
    40d8:	78 a5       	ldd	r23, Y+40	; 0x28
    40da:	89 a5       	ldd	r24, Y+41	; 0x29
    40dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    40de:	20 e0       	ldi	r18, 0x00	; 0
    40e0:	30 e0       	ldi	r19, 0x00	; 0
    40e2:	40 e2       	ldi	r20, 0x20	; 32
    40e4:	51 e4       	ldi	r21, 0x41	; 65
    40e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ea:	dc 01       	movw	r26, r24
    40ec:	cb 01       	movw	r24, r22
    40ee:	bc 01       	movw	r22, r24
    40f0:	cd 01       	movw	r24, r26
    40f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40f6:	dc 01       	movw	r26, r24
    40f8:	cb 01       	movw	r24, r22
    40fa:	9a a3       	std	Y+34, r25	; 0x22
    40fc:	89 a3       	std	Y+33, r24	; 0x21
    40fe:	0f c0       	rjmp	.+30     	; 0x411e <APPLICATION_Core+0x782>
    4100:	80 e9       	ldi	r24, 0x90	; 144
    4102:	91 e0       	ldi	r25, 0x01	; 1
    4104:	98 a3       	std	Y+32, r25	; 0x20
    4106:	8f 8f       	std	Y+31, r24	; 0x1f
    4108:	8f 8d       	ldd	r24, Y+31	; 0x1f
    410a:	98 a1       	ldd	r25, Y+32	; 0x20
    410c:	01 97       	sbiw	r24, 0x01	; 1
    410e:	f1 f7       	brne	.-4      	; 0x410c <APPLICATION_Core+0x770>
    4110:	98 a3       	std	Y+32, r25	; 0x20
    4112:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4114:	89 a1       	ldd	r24, Y+33	; 0x21
    4116:	9a a1       	ldd	r25, Y+34	; 0x22
    4118:	01 97       	sbiw	r24, 0x01	; 1
    411a:	9a a3       	std	Y+34, r25	; 0x22
    411c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    411e:	89 a1       	ldd	r24, Y+33	; 0x21
    4120:	9a a1       	ldd	r25, Y+34	; 0x22
    4122:	00 97       	sbiw	r24, 0x00	; 0
    4124:	69 f7       	brne	.-38     	; 0x4100 <APPLICATION_Core+0x764>
    4126:	14 c0       	rjmp	.+40     	; 0x4150 <APPLICATION_Core+0x7b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4128:	6b a1       	ldd	r22, Y+35	; 0x23
    412a:	7c a1       	ldd	r23, Y+36	; 0x24
    412c:	8d a1       	ldd	r24, Y+37	; 0x25
    412e:	9e a1       	ldd	r25, Y+38	; 0x26
    4130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4134:	dc 01       	movw	r26, r24
    4136:	cb 01       	movw	r24, r22
    4138:	9a a3       	std	Y+34, r25	; 0x22
    413a:	89 a3       	std	Y+33, r24	; 0x21
    413c:	89 a1       	ldd	r24, Y+33	; 0x21
    413e:	9a a1       	ldd	r25, Y+34	; 0x22
    4140:	9e 8f       	std	Y+30, r25	; 0x1e
    4142:	8d 8f       	std	Y+29, r24	; 0x1d
    4144:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4146:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4148:	01 97       	sbiw	r24, 0x01	; 1
    414a:	f1 f7       	brne	.-4      	; 0x4148 <APPLICATION_Core+0x7ac>
    414c:	9e 8f       	std	Y+30, r25	; 0x1e
    414e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(200);
	H_LCD_void_ClearDisplay();
    4150:	0e 94 b7 1c 	call	0x396e	; 0x396e <H_LCD_void_ClearDisplay>
	H_LCD_void_sendString("Forward...1");
    4154:	8e eb       	ldi	r24, 0xBE	; 190
    4156:	90 e0       	ldi	r25, 0x00	; 0
    4158:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <H_LCD_void_sendString>
	H_LCD_void_gotoXY(2,0);
    415c:	82 e0       	ldi	r24, 0x02	; 2
    415e:	60 e0       	ldi	r22, 0x00	; 0
    4160:	0e 94 42 1c 	call	0x3884	; 0x3884 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("Reverse...2");
    4164:	8a ec       	ldi	r24, 0xCA	; 202
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <H_LCD_void_sendString>
	H_LCD_void_gotoXY(3,0);
    416c:	83 e0       	ldi	r24, 0x03	; 3
    416e:	60 e0       	ldi	r22, 0x00	; 0
    4170:	0e 94 42 1c 	call	0x3884	; 0x3884 <H_LCD_void_gotoXY>
	Direction=0;
    4174:	fe 01       	movw	r30, r28
    4176:	e7 59       	subi	r30, 0x97	; 151
    4178:	ff 4f       	sbci	r31, 0xFF	; 255
    417a:	10 82       	st	Z, r1
	do
	{
		Pressed_key=H_KEYPAD_u8_getPressedKey();
    417c:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <H_KEYPAD_u8_getPressedKey>
    4180:	fe 01       	movw	r30, r28
    4182:	ec 59       	subi	r30, 0x9C	; 156
    4184:	ff 4f       	sbci	r31, 0xFF	; 255
    4186:	80 83       	st	Z, r24
		if(Pressed_key != '\0' && Pressed_key != '=')
    4188:	fe 01       	movw	r30, r28
    418a:	ec 59       	subi	r30, 0x9C	; 156
    418c:	ff 4f       	sbci	r31, 0xFF	; 255
    418e:	80 81       	ld	r24, Z
    4190:	88 23       	and	r24, r24
    4192:	e9 f0       	breq	.+58     	; 0x41ce <APPLICATION_Core+0x832>
    4194:	fe 01       	movw	r30, r28
    4196:	ec 59       	subi	r30, 0x9C	; 156
    4198:	ff 4f       	sbci	r31, 0xFF	; 255
    419a:	80 81       	ld	r24, Z
    419c:	8d 33       	cpi	r24, 0x3D	; 61
    419e:	b9 f0       	breq	.+46     	; 0x41ce <APPLICATION_Core+0x832>
		{
			H_LCD_void_sendData(Pressed_key);
    41a0:	fe 01       	movw	r30, r28
    41a2:	ec 59       	subi	r30, 0x9C	; 156
    41a4:	ff 4f       	sbci	r31, 0xFF	; 255
    41a6:	80 81       	ld	r24, Z
    41a8:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <H_LCD_void_sendData>
			Pressed_key_int= Pressed_key -'0';
    41ac:	de 01       	movw	r26, r28
    41ae:	ad 59       	subi	r26, 0x9D	; 157
    41b0:	bf 4f       	sbci	r27, 0xFF	; 255
    41b2:	fe 01       	movw	r30, r28
    41b4:	ec 59       	subi	r30, 0x9C	; 156
    41b6:	ff 4f       	sbci	r31, 0xFF	; 255
    41b8:	80 81       	ld	r24, Z
    41ba:	80 53       	subi	r24, 0x30	; 48
    41bc:	8c 93       	st	X, r24
			Direction=Pressed_key_int;
    41be:	de 01       	movw	r26, r28
    41c0:	a7 59       	subi	r26, 0x97	; 151
    41c2:	bf 4f       	sbci	r27, 0xFF	; 255
    41c4:	fe 01       	movw	r30, r28
    41c6:	ed 59       	subi	r30, 0x9D	; 157
    41c8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ca:	80 81       	ld	r24, Z
    41cc:	8c 93       	st	X, r24
		}

	}while(Pressed_key != '=');
    41ce:	fe 01       	movw	r30, r28
    41d0:	ec 59       	subi	r30, 0x9C	; 156
    41d2:	ff 4f       	sbci	r31, 0xFF	; 255
    41d4:	80 81       	ld	r24, Z
    41d6:	8d 33       	cpi	r24, 0x3D	; 61
    41d8:	89 f6       	brne	.-94     	; 0x417c <APPLICATION_Core+0x7e0>
    41da:	80 e0       	ldi	r24, 0x00	; 0
    41dc:	90 e0       	ldi	r25, 0x00	; 0
    41de:	a8 e4       	ldi	r26, 0x48	; 72
    41e0:	b3 e4       	ldi	r27, 0x43	; 67
    41e2:	89 8f       	std	Y+25, r24	; 0x19
    41e4:	9a 8f       	std	Y+26, r25	; 0x1a
    41e6:	ab 8f       	std	Y+27, r26	; 0x1b
    41e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41ea:	69 8d       	ldd	r22, Y+25	; 0x19
    41ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41f2:	20 e0       	ldi	r18, 0x00	; 0
    41f4:	30 e0       	ldi	r19, 0x00	; 0
    41f6:	4a e7       	ldi	r20, 0x7A	; 122
    41f8:	55 e4       	ldi	r21, 0x45	; 69
    41fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41fe:	dc 01       	movw	r26, r24
    4200:	cb 01       	movw	r24, r22
    4202:	8d 8b       	std	Y+21, r24	; 0x15
    4204:	9e 8b       	std	Y+22, r25	; 0x16
    4206:	af 8b       	std	Y+23, r26	; 0x17
    4208:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    420a:	6d 89       	ldd	r22, Y+21	; 0x15
    420c:	7e 89       	ldd	r23, Y+22	; 0x16
    420e:	8f 89       	ldd	r24, Y+23	; 0x17
    4210:	98 8d       	ldd	r25, Y+24	; 0x18
    4212:	20 e0       	ldi	r18, 0x00	; 0
    4214:	30 e0       	ldi	r19, 0x00	; 0
    4216:	40 e8       	ldi	r20, 0x80	; 128
    4218:	5f e3       	ldi	r21, 0x3F	; 63
    421a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    421e:	88 23       	and	r24, r24
    4220:	2c f4       	brge	.+10     	; 0x422c <APPLICATION_Core+0x890>
		__ticks = 1;
    4222:	81 e0       	ldi	r24, 0x01	; 1
    4224:	90 e0       	ldi	r25, 0x00	; 0
    4226:	9c 8b       	std	Y+20, r25	; 0x14
    4228:	8b 8b       	std	Y+19, r24	; 0x13
    422a:	3f c0       	rjmp	.+126    	; 0x42aa <APPLICATION_Core+0x90e>
	else if (__tmp > 65535)
    422c:	6d 89       	ldd	r22, Y+21	; 0x15
    422e:	7e 89       	ldd	r23, Y+22	; 0x16
    4230:	8f 89       	ldd	r24, Y+23	; 0x17
    4232:	98 8d       	ldd	r25, Y+24	; 0x18
    4234:	20 e0       	ldi	r18, 0x00	; 0
    4236:	3f ef       	ldi	r19, 0xFF	; 255
    4238:	4f e7       	ldi	r20, 0x7F	; 127
    423a:	57 e4       	ldi	r21, 0x47	; 71
    423c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4240:	18 16       	cp	r1, r24
    4242:	4c f5       	brge	.+82     	; 0x4296 <APPLICATION_Core+0x8fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4244:	69 8d       	ldd	r22, Y+25	; 0x19
    4246:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4248:	8b 8d       	ldd	r24, Y+27	; 0x1b
    424a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    424c:	20 e0       	ldi	r18, 0x00	; 0
    424e:	30 e0       	ldi	r19, 0x00	; 0
    4250:	40 e2       	ldi	r20, 0x20	; 32
    4252:	51 e4       	ldi	r21, 0x41	; 65
    4254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4258:	dc 01       	movw	r26, r24
    425a:	cb 01       	movw	r24, r22
    425c:	bc 01       	movw	r22, r24
    425e:	cd 01       	movw	r24, r26
    4260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4264:	dc 01       	movw	r26, r24
    4266:	cb 01       	movw	r24, r22
    4268:	9c 8b       	std	Y+20, r25	; 0x14
    426a:	8b 8b       	std	Y+19, r24	; 0x13
    426c:	0f c0       	rjmp	.+30     	; 0x428c <APPLICATION_Core+0x8f0>
    426e:	80 e9       	ldi	r24, 0x90	; 144
    4270:	91 e0       	ldi	r25, 0x01	; 1
    4272:	9a 8b       	std	Y+18, r25	; 0x12
    4274:	89 8b       	std	Y+17, r24	; 0x11
    4276:	89 89       	ldd	r24, Y+17	; 0x11
    4278:	9a 89       	ldd	r25, Y+18	; 0x12
    427a:	01 97       	sbiw	r24, 0x01	; 1
    427c:	f1 f7       	brne	.-4      	; 0x427a <APPLICATION_Core+0x8de>
    427e:	9a 8b       	std	Y+18, r25	; 0x12
    4280:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4282:	8b 89       	ldd	r24, Y+19	; 0x13
    4284:	9c 89       	ldd	r25, Y+20	; 0x14
    4286:	01 97       	sbiw	r24, 0x01	; 1
    4288:	9c 8b       	std	Y+20, r25	; 0x14
    428a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    428c:	8b 89       	ldd	r24, Y+19	; 0x13
    428e:	9c 89       	ldd	r25, Y+20	; 0x14
    4290:	00 97       	sbiw	r24, 0x00	; 0
    4292:	69 f7       	brne	.-38     	; 0x426e <APPLICATION_Core+0x8d2>
    4294:	14 c0       	rjmp	.+40     	; 0x42be <APPLICATION_Core+0x922>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4296:	6d 89       	ldd	r22, Y+21	; 0x15
    4298:	7e 89       	ldd	r23, Y+22	; 0x16
    429a:	8f 89       	ldd	r24, Y+23	; 0x17
    429c:	98 8d       	ldd	r25, Y+24	; 0x18
    429e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42a2:	dc 01       	movw	r26, r24
    42a4:	cb 01       	movw	r24, r22
    42a6:	9c 8b       	std	Y+20, r25	; 0x14
    42a8:	8b 8b       	std	Y+19, r24	; 0x13
    42aa:	8b 89       	ldd	r24, Y+19	; 0x13
    42ac:	9c 89       	ldd	r25, Y+20	; 0x14
    42ae:	98 8b       	std	Y+16, r25	; 0x10
    42b0:	8f 87       	std	Y+15, r24	; 0x0f
    42b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    42b4:	98 89       	ldd	r25, Y+16	; 0x10
    42b6:	01 97       	sbiw	r24, 0x01	; 1
    42b8:	f1 f7       	brne	.-4      	; 0x42b6 <APPLICATION_Core+0x91a>
    42ba:	98 8b       	std	Y+16, r25	; 0x10
    42bc:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(200);
	Pressed_key='\0';
    42be:	fe 01       	movw	r30, r28
    42c0:	ec 59       	subi	r30, 0x9C	; 156
    42c2:	ff 4f       	sbci	r31, 0xFF	; 255
    42c4:	10 82       	st	Z, r1
	Pressed_key_int=0;
    42c6:	fe 01       	movw	r30, r28
    42c8:	ed 59       	subi	r30, 0x9D	; 157
    42ca:	ff 4f       	sbci	r31, 0xFF	; 255
    42cc:	10 82       	st	Z, r1
	//H_LCD_void_sendIntNum(Duty_Cycle);
//	H_LCD_void_ClearDisplay();
	//H_DC_MOTOR_START(0,0,Direction);

	/*Represent Collected data*/
	H_LCD_void_ClearDisplay();
    42ce:	0e 94 b7 1c 	call	0x396e	; 0x396e <H_LCD_void_ClearDisplay>
	H_LCD_void_sendString("Duty=");
    42d2:	86 ed       	ldi	r24, 0xD6	; 214
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <H_LCD_void_sendString>
	H_LCD_void_gotoXY(1,6);
    42da:	81 e0       	ldi	r24, 0x01	; 1
    42dc:	66 e0       	ldi	r22, 0x06	; 6
    42de:	0e 94 42 1c 	call	0x3884	; 0x3884 <H_LCD_void_gotoXY>
	H_LCD_void_sendIntNum(Duty_Cycle);
    42e2:	fe 01       	movw	r30, r28
    42e4:	e6 59       	subi	r30, 0x96	; 150
    42e6:	ff 4f       	sbci	r31, 0xFF	; 255
    42e8:	80 81       	ld	r24, Z
    42ea:	88 2f       	mov	r24, r24
    42ec:	90 e0       	ldi	r25, 0x00	; 0
    42ee:	a0 e0       	ldi	r26, 0x00	; 0
    42f0:	b0 e0       	ldi	r27, 0x00	; 0
    42f2:	bc 01       	movw	r22, r24
    42f4:	cd 01       	movw	r24, r26
    42f6:	0e 94 a6 1b 	call	0x374c	; 0x374c <H_LCD_void_sendIntNum>
	H_LCD_void_gotoXY(2,0);
    42fa:	82 e0       	ldi	r24, 0x02	; 2
    42fc:	60 e0       	ldi	r22, 0x00	; 0
    42fe:	0e 94 42 1c 	call	0x3884	; 0x3884 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("Freq=");
    4302:	8c ed       	ldi	r24, 0xDC	; 220
    4304:	90 e0       	ldi	r25, 0x00	; 0
    4306:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <H_LCD_void_sendString>
	H_LCD_void_gotoXY(2,6);
    430a:	82 e0       	ldi	r24, 0x02	; 2
    430c:	66 e0       	ldi	r22, 0x06	; 6
    430e:	0e 94 42 1c 	call	0x3884	; 0x3884 <H_LCD_void_gotoXY>
	H_LCD_void_sendIntNum(PWM_FREQ);
    4312:	fe 01       	movw	r30, r28
    4314:	eb 59       	subi	r30, 0x9B	; 155
    4316:	ff 4f       	sbci	r31, 0xFF	; 255
    4318:	80 81       	ld	r24, Z
    431a:	91 81       	ldd	r25, Z+1	; 0x01
    431c:	a2 81       	ldd	r26, Z+2	; 0x02
    431e:	b3 81       	ldd	r27, Z+3	; 0x03
    4320:	bc 01       	movw	r22, r24
    4322:	cd 01       	movw	r24, r26
    4324:	0e 94 a6 1b 	call	0x374c	; 0x374c <H_LCD_void_sendIntNum>
	H_LCD_void_gotoXY(3,0);
    4328:	83 e0       	ldi	r24, 0x03	; 3
    432a:	60 e0       	ldi	r22, 0x00	; 0
    432c:	0e 94 42 1c 	call	0x3884	; 0x3884 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("DIR=");
    4330:	82 ee       	ldi	r24, 0xE2	; 226
    4332:	90 e0       	ldi	r25, 0x00	; 0
    4334:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <H_LCD_void_sendString>
	H_LCD_void_gotoXY(3,6);
    4338:	83 e0       	ldi	r24, 0x03	; 3
    433a:	66 e0       	ldi	r22, 0x06	; 6
    433c:	0e 94 42 1c 	call	0x3884	; 0x3884 <H_LCD_void_gotoXY>
	H_LCD_void_sendIntNum(Direction);
    4340:	fe 01       	movw	r30, r28
    4342:	e7 59       	subi	r30, 0x97	; 151
    4344:	ff 4f       	sbci	r31, 0xFF	; 255
    4346:	80 81       	ld	r24, Z
    4348:	88 2f       	mov	r24, r24
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	a0 e0       	ldi	r26, 0x00	; 0
    434e:	b0 e0       	ldi	r27, 0x00	; 0
    4350:	bc 01       	movw	r22, r24
    4352:	cd 01       	movw	r24, r26
    4354:	0e 94 a6 1b 	call	0x374c	; 0x374c <H_LCD_void_sendIntNum>

	H_DC_MOTOR_START(PWM_FREQ,Duty_Cycle,Direction);
    4358:	fe 01       	movw	r30, r28
    435a:	eb 59       	subi	r30, 0x9B	; 155
    435c:	ff 4f       	sbci	r31, 0xFF	; 255
    435e:	80 81       	ld	r24, Z
    4360:	91 81       	ldd	r25, Z+1	; 0x01
    4362:	a2 81       	ldd	r26, Z+2	; 0x02
    4364:	b3 81       	ldd	r27, Z+3	; 0x03
    4366:	fe 01       	movw	r30, r28
    4368:	e6 59       	subi	r30, 0x96	; 150
    436a:	ff 4f       	sbci	r31, 0xFF	; 255
    436c:	9e 01       	movw	r18, r28
    436e:	27 59       	subi	r18, 0x97	; 151
    4370:	3f 4f       	sbci	r19, 0xFF	; 255
    4372:	bc 01       	movw	r22, r24
    4374:	cd 01       	movw	r24, r26
    4376:	40 81       	ld	r20, Z
    4378:	f9 01       	movw	r30, r18
    437a:	20 81       	ld	r18, Z
    437c:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <H_DC_MOTOR_START>

	H_LCD_void_ClearDisplay();
    4380:	0e 94 b7 1c 	call	0x396e	; 0x396e <H_LCD_void_ClearDisplay>
    4384:	80 e0       	ldi	r24, 0x00	; 0
    4386:	90 e0       	ldi	r25, 0x00	; 0
    4388:	aa ef       	ldi	r26, 0xFA	; 250
    438a:	b3 e4       	ldi	r27, 0x43	; 67
    438c:	8b 87       	std	Y+11, r24	; 0x0b
    438e:	9c 87       	std	Y+12, r25	; 0x0c
    4390:	ad 87       	std	Y+13, r26	; 0x0d
    4392:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4394:	6b 85       	ldd	r22, Y+11	; 0x0b
    4396:	7c 85       	ldd	r23, Y+12	; 0x0c
    4398:	8d 85       	ldd	r24, Y+13	; 0x0d
    439a:	9e 85       	ldd	r25, Y+14	; 0x0e
    439c:	20 e0       	ldi	r18, 0x00	; 0
    439e:	30 e0       	ldi	r19, 0x00	; 0
    43a0:	4a e7       	ldi	r20, 0x7A	; 122
    43a2:	55 e4       	ldi	r21, 0x45	; 69
    43a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43a8:	dc 01       	movw	r26, r24
    43aa:	cb 01       	movw	r24, r22
    43ac:	8f 83       	std	Y+7, r24	; 0x07
    43ae:	98 87       	std	Y+8, r25	; 0x08
    43b0:	a9 87       	std	Y+9, r26	; 0x09
    43b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43b4:	6f 81       	ldd	r22, Y+7	; 0x07
    43b6:	78 85       	ldd	r23, Y+8	; 0x08
    43b8:	89 85       	ldd	r24, Y+9	; 0x09
    43ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    43bc:	20 e0       	ldi	r18, 0x00	; 0
    43be:	30 e0       	ldi	r19, 0x00	; 0
    43c0:	40 e8       	ldi	r20, 0x80	; 128
    43c2:	5f e3       	ldi	r21, 0x3F	; 63
    43c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43c8:	88 23       	and	r24, r24
    43ca:	2c f4       	brge	.+10     	; 0x43d6 <APPLICATION_Core+0xa3a>
		__ticks = 1;
    43cc:	81 e0       	ldi	r24, 0x01	; 1
    43ce:	90 e0       	ldi	r25, 0x00	; 0
    43d0:	9e 83       	std	Y+6, r25	; 0x06
    43d2:	8d 83       	std	Y+5, r24	; 0x05
    43d4:	3f c0       	rjmp	.+126    	; 0x4454 <APPLICATION_Core+0xab8>
	else if (__tmp > 65535)
    43d6:	6f 81       	ldd	r22, Y+7	; 0x07
    43d8:	78 85       	ldd	r23, Y+8	; 0x08
    43da:	89 85       	ldd	r24, Y+9	; 0x09
    43dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    43de:	20 e0       	ldi	r18, 0x00	; 0
    43e0:	3f ef       	ldi	r19, 0xFF	; 255
    43e2:	4f e7       	ldi	r20, 0x7F	; 127
    43e4:	57 e4       	ldi	r21, 0x47	; 71
    43e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43ea:	18 16       	cp	r1, r24
    43ec:	4c f5       	brge	.+82     	; 0x4440 <APPLICATION_Core+0xaa4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    43f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    43f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    43f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    43f6:	20 e0       	ldi	r18, 0x00	; 0
    43f8:	30 e0       	ldi	r19, 0x00	; 0
    43fa:	40 e2       	ldi	r20, 0x20	; 32
    43fc:	51 e4       	ldi	r21, 0x41	; 65
    43fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4402:	dc 01       	movw	r26, r24
    4404:	cb 01       	movw	r24, r22
    4406:	bc 01       	movw	r22, r24
    4408:	cd 01       	movw	r24, r26
    440a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    440e:	dc 01       	movw	r26, r24
    4410:	cb 01       	movw	r24, r22
    4412:	9e 83       	std	Y+6, r25	; 0x06
    4414:	8d 83       	std	Y+5, r24	; 0x05
    4416:	0f c0       	rjmp	.+30     	; 0x4436 <APPLICATION_Core+0xa9a>
    4418:	80 e9       	ldi	r24, 0x90	; 144
    441a:	91 e0       	ldi	r25, 0x01	; 1
    441c:	9c 83       	std	Y+4, r25	; 0x04
    441e:	8b 83       	std	Y+3, r24	; 0x03
    4420:	8b 81       	ldd	r24, Y+3	; 0x03
    4422:	9c 81       	ldd	r25, Y+4	; 0x04
    4424:	01 97       	sbiw	r24, 0x01	; 1
    4426:	f1 f7       	brne	.-4      	; 0x4424 <APPLICATION_Core+0xa88>
    4428:	9c 83       	std	Y+4, r25	; 0x04
    442a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    442c:	8d 81       	ldd	r24, Y+5	; 0x05
    442e:	9e 81       	ldd	r25, Y+6	; 0x06
    4430:	01 97       	sbiw	r24, 0x01	; 1
    4432:	9e 83       	std	Y+6, r25	; 0x06
    4434:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4436:	8d 81       	ldd	r24, Y+5	; 0x05
    4438:	9e 81       	ldd	r25, Y+6	; 0x06
    443a:	00 97       	sbiw	r24, 0x00	; 0
    443c:	69 f7       	brne	.-38     	; 0x4418 <APPLICATION_Core+0xa7c>
    443e:	14 c0       	rjmp	.+40     	; 0x4468 <APPLICATION_Core+0xacc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4440:	6f 81       	ldd	r22, Y+7	; 0x07
    4442:	78 85       	ldd	r23, Y+8	; 0x08
    4444:	89 85       	ldd	r24, Y+9	; 0x09
    4446:	9a 85       	ldd	r25, Y+10	; 0x0a
    4448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    444c:	dc 01       	movw	r26, r24
    444e:	cb 01       	movw	r24, r22
    4450:	9e 83       	std	Y+6, r25	; 0x06
    4452:	8d 83       	std	Y+5, r24	; 0x05
    4454:	8d 81       	ldd	r24, Y+5	; 0x05
    4456:	9e 81       	ldd	r25, Y+6	; 0x06
    4458:	9a 83       	std	Y+2, r25	; 0x02
    445a:	89 83       	std	Y+1, r24	; 0x01
    445c:	89 81       	ldd	r24, Y+1	; 0x01
    445e:	9a 81       	ldd	r25, Y+2	; 0x02
    4460:	01 97       	sbiw	r24, 0x01	; 1
    4462:	f1 f7       	brne	.-4      	; 0x4460 <APPLICATION_Core+0xac4>
    4464:	9a 83       	std	Y+2, r25	; 0x02
    4466:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    4468:	c6 59       	subi	r28, 0x96	; 150
    446a:	df 4f       	sbci	r29, 0xFF	; 255
    446c:	0f b6       	in	r0, 0x3f	; 63
    446e:	f8 94       	cli
    4470:	de bf       	out	0x3e, r29	; 62
    4472:	0f be       	out	0x3f, r0	; 63
    4474:	cd bf       	out	0x3d, r28	; 61
    4476:	cf 91       	pop	r28
    4478:	df 91       	pop	r29
    447a:	1f 91       	pop	r17
    447c:	0f 91       	pop	r16
    447e:	08 95       	ret

00004480 <APPLICATION_Stop>:

void APPLICATION_Stop(void)
{
    4480:	df 93       	push	r29
    4482:	cf 93       	push	r28
    4484:	cd b7       	in	r28, 0x3d	; 61
    4486:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_ClearDisplay();
    4488:	0e 94 b7 1c 	call	0x396e	; 0x396e <H_LCD_void_ClearDisplay>
	H_LCD_void_sendString("APPLICATION");
    448c:	87 ee       	ldi	r24, 0xE7	; 231
    448e:	90 e0       	ldi	r25, 0x00	; 0
    4490:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <H_LCD_void_sendString>
	H_LCD_void_gotoXY(2,0);
    4494:	82 e0       	ldi	r24, 0x02	; 2
    4496:	60 e0       	ldi	r22, 0x00	; 0
    4498:	0e 94 42 1c 	call	0x3884	; 0x3884 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("Stopped!");
    449c:	83 ef       	ldi	r24, 0xF3	; 243
    449e:	90 e0       	ldi	r25, 0x00	; 0
    44a0:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <H_LCD_void_sendString>
	H_DC_MOTOR_START(0,0,0);
    44a4:	60 e0       	ldi	r22, 0x00	; 0
    44a6:	70 e0       	ldi	r23, 0x00	; 0
    44a8:	80 e0       	ldi	r24, 0x00	; 0
    44aa:	90 e0       	ldi	r25, 0x00	; 0
    44ac:	40 e0       	ldi	r20, 0x00	; 0
    44ae:	20 e0       	ldi	r18, 0x00	; 0
    44b0:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <H_DC_MOTOR_START>
	M_Dio_void_setPinValue(DIO_PB3,DIO_LOW);
    44b4:	87 e1       	ldi	r24, 0x17	; 23
    44b6:	60 e0       	ldi	r22, 0x00	; 0
    44b8:	0e 94 c3 13 	call	0x2786	; 0x2786 <M_Dio_void_setPinValue>
	H_DC_MOTOR_STOP();
    44bc:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <H_DC_MOTOR_STOP>
}
    44c0:	cf 91       	pop	r28
    44c2:	df 91       	pop	r29
    44c4:	08 95       	ret

000044c6 <main>:
#include"KPD/KPD_Init.h"
#include"APP.h"
static u8 APP_FLAG=1;

int main(void)
{
    44c6:	df 93       	push	r29
    44c8:	cf 93       	push	r28
    44ca:	0f 92       	push	r0
    44cc:	cd b7       	in	r28, 0x3d	; 61
    44ce:	de b7       	in	r29, 0x3e	; 62
	APPLICATION_Init();
    44d0:	0e 94 c1 1c 	call	0x3982	; 0x3982 <APPLICATION_Init>

	while(1)
	{


		u8 Command='\0';
    44d4:	19 82       	std	Y+1, r1	; 0x01
    44d6:	1b c0       	rjmp	.+54     	; 0x450e <main+0x48>
		while(APP_FLAG==1)
		{
			H_LCD_void_ClearDisplay();
    44d8:	0e 94 b7 1c 	call	0x396e	; 0x396e <H_LCD_void_ClearDisplay>
			H_LCD_void_sendString("To Start");
    44dc:	8c ef       	ldi	r24, 0xFC	; 252
    44de:	90 e0       	ldi	r25, 0x00	; 0
    44e0:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <H_LCD_void_sendString>
			H_LCD_void_gotoXY(2,0);
    44e4:	82 e0       	ldi	r24, 0x02	; 2
    44e6:	60 e0       	ldi	r22, 0x00	; 0
    44e8:	0e 94 42 1c 	call	0x3884	; 0x3884 <H_LCD_void_gotoXY>
			H_LCD_void_sendString("Enter 1");
    44ec:	85 e0       	ldi	r24, 0x05	; 5
    44ee:	91 e0       	ldi	r25, 0x01	; 1
    44f0:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <H_LCD_void_sendString>
			do
			{
				Command=H_KEYPAD_u8_getPressedKey();
    44f4:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <H_KEYPAD_u8_getPressedKey>
    44f8:	89 83       	std	Y+1, r24	; 0x01

			}while(Command !='1');
    44fa:	89 81       	ldd	r24, Y+1	; 0x01
    44fc:	81 33       	cpi	r24, 0x31	; 49
    44fe:	d1 f7       	brne	.-12     	; 0x44f4 <main+0x2e>
			H_LCD_void_sendData(Command);
    4500:	89 81       	ldd	r24, Y+1	; 0x01
    4502:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <H_LCD_void_sendData>
			APPLICATION_Core();
    4506:	0e 94 ce 1c 	call	0x399c	; 0x399c <APPLICATION_Core>
			APP_FLAG=0;
    450a:	10 92 7e 02 	sts	0x027E, r1
	while(1)
	{


		u8 Command='\0';
		while(APP_FLAG==1)
    450e:	80 91 7e 02 	lds	r24, 0x027E
    4512:	81 30       	cpi	r24, 0x01	; 1
    4514:	09 f3       	breq	.-62     	; 0x44d8 <main+0x12>
    4516:	3c c0       	rjmp	.+120    	; 0x4590 <main+0xca>
			APPLICATION_Core();
			APP_FLAG=0;
		}
		while(APP_FLAG==0)
		{
			H_LCD_void_ClearDisplay();
    4518:	0e 94 b7 1c 	call	0x396e	; 0x396e <H_LCD_void_ClearDisplay>
			H_LCD_void_sendString("To Restart");
    451c:	8d e0       	ldi	r24, 0x0D	; 13
    451e:	91 e0       	ldi	r25, 0x01	; 1
    4520:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <H_LCD_void_sendString>
			H_LCD_void_gotoXY(2,0);
    4524:	82 e0       	ldi	r24, 0x02	; 2
    4526:	60 e0       	ldi	r22, 0x00	; 0
    4528:	0e 94 42 1c 	call	0x3884	; 0x3884 <H_LCD_void_gotoXY>
			H_LCD_void_sendString("Enter 5");
    452c:	88 e1       	ldi	r24, 0x18	; 24
    452e:	91 e0       	ldi	r25, 0x01	; 1
    4530:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <H_LCD_void_sendString>
			H_LCD_void_gotoXY(3,0);
    4534:	83 e0       	ldi	r24, 0x03	; 3
    4536:	60 e0       	ldi	r22, 0x00	; 0
    4538:	0e 94 42 1c 	call	0x3884	; 0x3884 <H_LCD_void_gotoXY>
			H_LCD_void_sendString("To Exit");
    453c:	80 e2       	ldi	r24, 0x20	; 32
    453e:	91 e0       	ldi	r25, 0x01	; 1
    4540:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <H_LCD_void_sendString>
			H_LCD_void_gotoXY(4,0);
    4544:	84 e0       	ldi	r24, 0x04	; 4
    4546:	60 e0       	ldi	r22, 0x00	; 0
    4548:	0e 94 42 1c 	call	0x3884	; 0x3884 <H_LCD_void_gotoXY>
			H_LCD_void_sendString("Enter 0");
    454c:	88 e2       	ldi	r24, 0x28	; 40
    454e:	91 e0       	ldi	r25, 0x01	; 1
    4550:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <H_LCD_void_sendString>
			do
			{
				Command=H_KEYPAD_u8_getPressedKey();
    4554:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <H_KEYPAD_u8_getPressedKey>
    4558:	89 83       	std	Y+1, r24	; 0x01

			}while((Command!='5' || Command != '0') && (Command =='\0'));
    455a:	89 81       	ldd	r24, Y+1	; 0x01
    455c:	85 33       	cpi	r24, 0x35	; 53
    455e:	19 f4       	brne	.+6      	; 0x4566 <main+0xa0>
    4560:	89 81       	ldd	r24, Y+1	; 0x01
    4562:	80 33       	cpi	r24, 0x30	; 48
    4564:	19 f0       	breq	.+6      	; 0x456c <main+0xa6>
    4566:	89 81       	ldd	r24, Y+1	; 0x01
    4568:	88 23       	and	r24, r24
    456a:	a1 f3       	breq	.-24     	; 0x4554 <main+0x8e>
			H_LCD_void_sendData(Command);
    456c:	89 81       	ldd	r24, Y+1	; 0x01
    456e:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <H_LCD_void_sendData>
			if(Command=='5')
    4572:	89 81       	ldd	r24, Y+1	; 0x01
    4574:	85 33       	cpi	r24, 0x35	; 53
    4576:	21 f4       	brne	.+8      	; 0x4580 <main+0xba>
			{
				APP_FLAG=1;
    4578:	81 e0       	ldi	r24, 0x01	; 1
    457a:	80 93 7e 02 	sts	0x027E, r24
    457e:	08 c0       	rjmp	.+16     	; 0x4590 <main+0xca>
			}
			else if(Command=='0')
    4580:	89 81       	ldd	r24, Y+1	; 0x01
    4582:	80 33       	cpi	r24, 0x30	; 48
    4584:	29 f4       	brne	.+10     	; 0x4590 <main+0xca>
			{
				APPLICATION_Stop();
    4586:	0e 94 40 22 	call	0x4480	; 0x4480 <APPLICATION_Stop>
				APP_FLAG=1;
    458a:	81 e0       	ldi	r24, 0x01	; 1
    458c:	80 93 7e 02 	sts	0x027E, r24
			}while(Command !='1');
			H_LCD_void_sendData(Command);
			APPLICATION_Core();
			APP_FLAG=0;
		}
		while(APP_FLAG==0)
    4590:	80 91 7e 02 	lds	r24, 0x027E
    4594:	88 23       	and	r24, r24
    4596:	09 f4       	brne	.+2      	; 0x459a <main+0xd4>
    4598:	bf cf       	rjmp	.-130    	; 0x4518 <main+0x52>
    459a:	9c cf       	rjmp	.-200    	; 0x44d4 <main+0xe>

0000459c <__mulsi3>:
    459c:	62 9f       	mul	r22, r18
    459e:	d0 01       	movw	r26, r0
    45a0:	73 9f       	mul	r23, r19
    45a2:	f0 01       	movw	r30, r0
    45a4:	82 9f       	mul	r24, r18
    45a6:	e0 0d       	add	r30, r0
    45a8:	f1 1d       	adc	r31, r1
    45aa:	64 9f       	mul	r22, r20
    45ac:	e0 0d       	add	r30, r0
    45ae:	f1 1d       	adc	r31, r1
    45b0:	92 9f       	mul	r25, r18
    45b2:	f0 0d       	add	r31, r0
    45b4:	83 9f       	mul	r24, r19
    45b6:	f0 0d       	add	r31, r0
    45b8:	74 9f       	mul	r23, r20
    45ba:	f0 0d       	add	r31, r0
    45bc:	65 9f       	mul	r22, r21
    45be:	f0 0d       	add	r31, r0
    45c0:	99 27       	eor	r25, r25
    45c2:	72 9f       	mul	r23, r18
    45c4:	b0 0d       	add	r27, r0
    45c6:	e1 1d       	adc	r30, r1
    45c8:	f9 1f       	adc	r31, r25
    45ca:	63 9f       	mul	r22, r19
    45cc:	b0 0d       	add	r27, r0
    45ce:	e1 1d       	adc	r30, r1
    45d0:	f9 1f       	adc	r31, r25
    45d2:	bd 01       	movw	r22, r26
    45d4:	cf 01       	movw	r24, r30
    45d6:	11 24       	eor	r1, r1
    45d8:	08 95       	ret

000045da <__udivmodqi4>:
    45da:	99 1b       	sub	r25, r25
    45dc:	79 e0       	ldi	r23, 0x09	; 9
    45de:	04 c0       	rjmp	.+8      	; 0x45e8 <__udivmodqi4_ep>

000045e0 <__udivmodqi4_loop>:
    45e0:	99 1f       	adc	r25, r25
    45e2:	96 17       	cp	r25, r22
    45e4:	08 f0       	brcs	.+2      	; 0x45e8 <__udivmodqi4_ep>
    45e6:	96 1b       	sub	r25, r22

000045e8 <__udivmodqi4_ep>:
    45e8:	88 1f       	adc	r24, r24
    45ea:	7a 95       	dec	r23
    45ec:	c9 f7       	brne	.-14     	; 0x45e0 <__udivmodqi4_loop>
    45ee:	80 95       	com	r24
    45f0:	08 95       	ret

000045f2 <__udivmodsi4>:
    45f2:	a1 e2       	ldi	r26, 0x21	; 33
    45f4:	1a 2e       	mov	r1, r26
    45f6:	aa 1b       	sub	r26, r26
    45f8:	bb 1b       	sub	r27, r27
    45fa:	fd 01       	movw	r30, r26
    45fc:	0d c0       	rjmp	.+26     	; 0x4618 <__udivmodsi4_ep>

000045fe <__udivmodsi4_loop>:
    45fe:	aa 1f       	adc	r26, r26
    4600:	bb 1f       	adc	r27, r27
    4602:	ee 1f       	adc	r30, r30
    4604:	ff 1f       	adc	r31, r31
    4606:	a2 17       	cp	r26, r18
    4608:	b3 07       	cpc	r27, r19
    460a:	e4 07       	cpc	r30, r20
    460c:	f5 07       	cpc	r31, r21
    460e:	20 f0       	brcs	.+8      	; 0x4618 <__udivmodsi4_ep>
    4610:	a2 1b       	sub	r26, r18
    4612:	b3 0b       	sbc	r27, r19
    4614:	e4 0b       	sbc	r30, r20
    4616:	f5 0b       	sbc	r31, r21

00004618 <__udivmodsi4_ep>:
    4618:	66 1f       	adc	r22, r22
    461a:	77 1f       	adc	r23, r23
    461c:	88 1f       	adc	r24, r24
    461e:	99 1f       	adc	r25, r25
    4620:	1a 94       	dec	r1
    4622:	69 f7       	brne	.-38     	; 0x45fe <__udivmodsi4_loop>
    4624:	60 95       	com	r22
    4626:	70 95       	com	r23
    4628:	80 95       	com	r24
    462a:	90 95       	com	r25
    462c:	9b 01       	movw	r18, r22
    462e:	ac 01       	movw	r20, r24
    4630:	bd 01       	movw	r22, r26
    4632:	cf 01       	movw	r24, r30
    4634:	08 95       	ret

00004636 <__divmodsi4>:
    4636:	97 fb       	bst	r25, 7
    4638:	09 2e       	mov	r0, r25
    463a:	05 26       	eor	r0, r21
    463c:	0e d0       	rcall	.+28     	; 0x465a <__divmodsi4_neg1>
    463e:	57 fd       	sbrc	r21, 7
    4640:	04 d0       	rcall	.+8      	; 0x464a <__divmodsi4_neg2>
    4642:	d7 df       	rcall	.-82     	; 0x45f2 <__udivmodsi4>
    4644:	0a d0       	rcall	.+20     	; 0x465a <__divmodsi4_neg1>
    4646:	00 1c       	adc	r0, r0
    4648:	38 f4       	brcc	.+14     	; 0x4658 <__divmodsi4_exit>

0000464a <__divmodsi4_neg2>:
    464a:	50 95       	com	r21
    464c:	40 95       	com	r20
    464e:	30 95       	com	r19
    4650:	21 95       	neg	r18
    4652:	3f 4f       	sbci	r19, 0xFF	; 255
    4654:	4f 4f       	sbci	r20, 0xFF	; 255
    4656:	5f 4f       	sbci	r21, 0xFF	; 255

00004658 <__divmodsi4_exit>:
    4658:	08 95       	ret

0000465a <__divmodsi4_neg1>:
    465a:	f6 f7       	brtc	.-4      	; 0x4658 <__divmodsi4_exit>
    465c:	90 95       	com	r25
    465e:	80 95       	com	r24
    4660:	70 95       	com	r23
    4662:	61 95       	neg	r22
    4664:	7f 4f       	sbci	r23, 0xFF	; 255
    4666:	8f 4f       	sbci	r24, 0xFF	; 255
    4668:	9f 4f       	sbci	r25, 0xFF	; 255
    466a:	08 95       	ret

0000466c <__prologue_saves__>:
    466c:	2f 92       	push	r2
    466e:	3f 92       	push	r3
    4670:	4f 92       	push	r4
    4672:	5f 92       	push	r5
    4674:	6f 92       	push	r6
    4676:	7f 92       	push	r7
    4678:	8f 92       	push	r8
    467a:	9f 92       	push	r9
    467c:	af 92       	push	r10
    467e:	bf 92       	push	r11
    4680:	cf 92       	push	r12
    4682:	df 92       	push	r13
    4684:	ef 92       	push	r14
    4686:	ff 92       	push	r15
    4688:	0f 93       	push	r16
    468a:	1f 93       	push	r17
    468c:	cf 93       	push	r28
    468e:	df 93       	push	r29
    4690:	cd b7       	in	r28, 0x3d	; 61
    4692:	de b7       	in	r29, 0x3e	; 62
    4694:	ca 1b       	sub	r28, r26
    4696:	db 0b       	sbc	r29, r27
    4698:	0f b6       	in	r0, 0x3f	; 63
    469a:	f8 94       	cli
    469c:	de bf       	out	0x3e, r29	; 62
    469e:	0f be       	out	0x3f, r0	; 63
    46a0:	cd bf       	out	0x3d, r28	; 61
    46a2:	09 94       	ijmp

000046a4 <__epilogue_restores__>:
    46a4:	2a 88       	ldd	r2, Y+18	; 0x12
    46a6:	39 88       	ldd	r3, Y+17	; 0x11
    46a8:	48 88       	ldd	r4, Y+16	; 0x10
    46aa:	5f 84       	ldd	r5, Y+15	; 0x0f
    46ac:	6e 84       	ldd	r6, Y+14	; 0x0e
    46ae:	7d 84       	ldd	r7, Y+13	; 0x0d
    46b0:	8c 84       	ldd	r8, Y+12	; 0x0c
    46b2:	9b 84       	ldd	r9, Y+11	; 0x0b
    46b4:	aa 84       	ldd	r10, Y+10	; 0x0a
    46b6:	b9 84       	ldd	r11, Y+9	; 0x09
    46b8:	c8 84       	ldd	r12, Y+8	; 0x08
    46ba:	df 80       	ldd	r13, Y+7	; 0x07
    46bc:	ee 80       	ldd	r14, Y+6	; 0x06
    46be:	fd 80       	ldd	r15, Y+5	; 0x05
    46c0:	0c 81       	ldd	r16, Y+4	; 0x04
    46c2:	1b 81       	ldd	r17, Y+3	; 0x03
    46c4:	aa 81       	ldd	r26, Y+2	; 0x02
    46c6:	b9 81       	ldd	r27, Y+1	; 0x01
    46c8:	ce 0f       	add	r28, r30
    46ca:	d1 1d       	adc	r29, r1
    46cc:	0f b6       	in	r0, 0x3f	; 63
    46ce:	f8 94       	cli
    46d0:	de bf       	out	0x3e, r29	; 62
    46d2:	0f be       	out	0x3f, r0	; 63
    46d4:	cd bf       	out	0x3d, r28	; 61
    46d6:	ed 01       	movw	r28, r26
    46d8:	08 95       	ret

000046da <_exit>:
    46da:	f8 94       	cli

000046dc <__stop_program>:
    46dc:	ff cf       	rjmp	.-2      	; 0x46dc <__stop_program>
