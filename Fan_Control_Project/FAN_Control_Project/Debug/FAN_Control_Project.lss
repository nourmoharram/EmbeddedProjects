
FAN_Control_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000525c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000022e  00800060  0000525c  000052f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  0080028e  0080028e  0000551e  2**0
                  ALLOC
  3 .stab         000064c8  00000000  00000000  00005520  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003ec0  00000000  00000000  0000b9e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000f8a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000fa68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000fc7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0001228e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0001375c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00014a68  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00014c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00014f4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00015969  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 76 13 	jmp	0x26ec	; 0x26ec <__vector_1>
       8:	0c 94 a9 13 	jmp	0x2752	; 0x2752 <__vector_2>
       c:	0c 94 b9 13 	jmp	0x2772	; 0x2772 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 02 0f 	jmp	0x1e04	; 0x1e04 <__vector_10>
      2c:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 2c 19 	jmp	0x3258	; 0x3258 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	f2 e5       	ldi	r31, 0x52	; 82
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3a       	cpi	r26, 0xAE	; 174
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <main>
      8a:	0c 94 2c 29 	jmp	0x5258	; 0x5258 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f5 28 	jmp	0x51ea	; 0x51ea <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e9       	ldi	r26, 0x95	; 149
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 11 29 	jmp	0x5222	; 0x5222 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 01 29 	jmp	0x5202	; 0x5202 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1d 29 	jmp	0x523a	; 0x523a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 01 29 	jmp	0x5202	; 0x5202 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1d 29 	jmp	0x523a	; 0x523a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f5 28 	jmp	0x51ea	; 0x51ea <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e9       	ldi	r24, 0x95	; 149
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 11 29 	jmp	0x5222	; 0x5222 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fd 28 	jmp	0x51fa	; 0x51fa <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e9       	ldi	r22, 0x95	; 149
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 19 29 	jmp	0x5232	; 0x5232 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 01 29 	jmp	0x5202	; 0x5202 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 1d 29 	jmp	0x523a	; 0x523a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 01 29 	jmp	0x5202	; 0x5202 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 1d 29 	jmp	0x523a	; 0x523a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 01 29 	jmp	0x5202	; 0x5202 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 1d 29 	jmp	0x523a	; 0x523a <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 fe 28 	jmp	0x51fc	; 0x51fc <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 1a 29 	jmp	0x5234	; 0x5234 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 05 29 	jmp	0x520a	; 0x520a <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 21 29 	jmp	0x5242	; 0x5242 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 fd 28 	jmp	0x51fa	; 0x51fa <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 19 29 	jmp	0x5232	; 0x5232 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e3 56       	subi	r30, 0x63	; 99
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <UART_Init>:
#include"USART_Init.h"

//const UART_CONFIG ARR_UART_CFG_1[1]={{Baud_9600,Word_Size_8,Disabled,One_Stop_bit}};

void UART_Init(UART_CONFIG *Ptr_Copy_UART)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <UART_Init+0x6>
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	9a 83       	std	Y+2, r25	; 0x02
     ef6:	89 83       	std	Y+1, r24	; 0x01
	UCSRC = 0b10000110;
     ef8:	e0 e4       	ldi	r30, 0x40	; 64
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	86 e8       	ldi	r24, 0x86	; 134
     efe:	80 83       	st	Z, r24

	UBBRL = 51;
     f00:	e9 e2       	ldi	r30, 0x29	; 41
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	83 e3       	ldi	r24, 0x33	; 51
     f06:	80 83       	st	Z, r24
	//	UBBRH = Ptr_Copy_UART->Baud_NO >>8;


	/*Enable Transmitter*/
	SET_BIT(UCSRB,UCSRB_TXEN);
     f08:	aa e2       	ldi	r26, 0x2A	; 42
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	ea e2       	ldi	r30, 0x2A	; 42
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	88 60       	ori	r24, 0x08	; 8
     f14:	8c 93       	st	X, r24
}
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	cf 91       	pop	r28
     f1c:	df 91       	pop	r29
     f1e:	08 95       	ret

00000f20 <UART_SendByte>:


void UART_SendByte(u8 Copy_UART)
{
     f20:	df 93       	push	r29
     f22:	cf 93       	push	r28
     f24:	0f 92       	push	r0
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
     f2a:	89 83       	std	Y+1, r24	; 0x01

	//u8 counter=0;
	/*WAIT until transmit buffer is empty*/
	while((GET_BIT(UCSRA,UCSRA_UDRE))==0);
     f2c:	eb e2       	ldi	r30, 0x2B	; 43
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	82 95       	swap	r24
     f34:	86 95       	lsr	r24
     f36:	87 70       	andi	r24, 0x07	; 7
     f38:	88 2f       	mov	r24, r24
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	81 70       	andi	r24, 0x01	; 1
     f3e:	90 70       	andi	r25, 0x00	; 0
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	a1 f3       	breq	.-24     	; 0xf2c <UART_SendByte+0xc>
	UDR= Copy_UART;
     f44:	ec e2       	ldi	r30, 0x2C	; 44
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	80 83       	st	Z, r24
	//while((GET_BIT(UCSRA,UCSRA_TXC))==0);
	//CLR_BIT(UCSRA,UCSRA_TXC);
}
     f4c:	0f 90       	pop	r0
     f4e:	cf 91       	pop	r28
     f50:	df 91       	pop	r29
     f52:	08 95       	ret

00000f54 <UART_SendString>:


void UART_SendString(UART_CONFIG Copy_UART,u8 *Ptr_To_String)
{
     f54:	df 93       	push	r29
     f56:	cf 93       	push	r28
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
     f5c:	27 97       	sbiw	r28, 0x07	; 7
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	de bf       	out	0x3e, r29	; 62
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	cd bf       	out	0x3d, r28	; 61
     f68:	49 83       	std	Y+1, r20	; 0x01
     f6a:	5a 83       	std	Y+2, r21	; 0x02
     f6c:	6b 83       	std	Y+3, r22	; 0x03
     f6e:	7c 83       	std	Y+4, r23	; 0x04
     f70:	8d 83       	std	Y+5, r24	; 0x05
     f72:	3f 83       	std	Y+7, r19	; 0x07
     f74:	2e 83       	std	Y+6, r18	; 0x06

}
     f76:	27 96       	adiw	r28, 0x07	; 7
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	f8 94       	cli
     f7c:	de bf       	out	0x3e, r29	; 62
     f7e:	0f be       	out	0x3f, r0	; 63
     f80:	cd bf       	out	0x3d, r28	; 61
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <UART_RecieveByteSynchNonBlocking>:
u8 UART_RecieveByteSynchNonBlocking(void)
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62

	//u8 counter=0;
	/*wait until receive is complete*/
	while((GET_BIT(UCSRA,UCSRA_RXC))==0);
     f90:	eb e2       	ldi	r30, 0x2B	; 43
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	88 23       	and	r24, r24
     f98:	dc f7       	brge	.-10     	; 0xf90 <UART_RecieveByteSynchNonBlocking+0x8>
	return UDR;
     f9a:	ec e2       	ldi	r30, 0x2C	; 44
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
}
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <UART_RecieveByteASynchCallback>:
void UART_RecieveByteASynchCallback(void)
{
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62

}
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <M_TIMER1_void_Init>:

void (*ICU_CallBackFun)(void) = NULL ;


void M_TIMER1_void_Init(TIMER_1_MD Local_Mode,TIMER_1_WG Local_WG)
{
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	00 d0       	rcall	.+0      	; 0xfba <M_TIMER1_void_Init+0x6>
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	89 83       	std	Y+1, r24	; 0x01
     fc0:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_Mode == TIMER_1_NM)
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	88 23       	and	r24, r24
     fc6:	99 f5       	brne	.+102    	; 0x102e <M_TIMER1_void_Init+0x7a>
	{
		/*Select normal mode*/
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
     fc8:	af e4       	ldi	r26, 0x4F	; 79
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	ef e4       	ldi	r30, 0x4F	; 79
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	8e 7f       	andi	r24, 0xFE	; 254
     fd4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
     fd6:	af e4       	ldi	r26, 0x4F	; 79
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	ef e4       	ldi	r30, 0x4F	; 79
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	8d 7f       	andi	r24, 0xFD	; 253
     fe2:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
     fe4:	ae e4       	ldi	r26, 0x4E	; 78
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	ee e4       	ldi	r30, 0x4E	; 78
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	91 81       	ldd	r25, Z+1	; 0x01
     ff0:	87 7f       	andi	r24, 0xF7	; 247
     ff2:	11 96       	adiw	r26, 0x01	; 1
     ff4:	9c 93       	st	X, r25
     ff6:	8e 93       	st	-X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
     ff8:	ae e4       	ldi	r26, 0x4E	; 78
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	ee e4       	ldi	r30, 0x4E	; 78
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	91 81       	ldd	r25, Z+1	; 0x01
    1004:	8f 7e       	andi	r24, 0xEF	; 239
    1006:	11 96       	adiw	r26, 0x01	; 1
    1008:	9c 93       	st	X, r25
    100a:	8e 93       	st	-X, r24
		if(Local_WG == TIMER_1_NWG)
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	88 23       	and	r24, r24
    1010:	71 f4       	brne	.+28     	; 0x102e <M_TIMER1_void_Init+0x7a>
		{
			/*Select compare output mode*/
			CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    1012:	af e4       	ldi	r26, 0x4F	; 79
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	ef e4       	ldi	r30, 0x4F	; 79
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	8f 7b       	andi	r24, 0xBF	; 191
    101e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    1020:	af e4       	ldi	r26, 0x4F	; 79
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	ef e4       	ldi	r30, 0x4F	; 79
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	8f 77       	andi	r24, 0x7F	; 127
    102c:	8c 93       	st	X, r24
		}
	}
}
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	08 95       	ret

00001038 <M_TIMER1_void_Start>:

void M_TIMER1_void_Start(TIMER1_PRESCALER Local_Prescaller)
{
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	0f 92       	push	r0
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	89 83       	std	Y+1, r24	; 0x01
	if(Local_Prescaller== TIMER1_CLK_8)
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	82 30       	cpi	r24, 0x02	; 2
    1048:	f1 f4       	brne	.+60     	; 0x1086 <M_TIMER1_void_Start+0x4e>
	{
		CLR_BIT(TCCR1B,TCCR1B_CS10);
    104a:	ae e4       	ldi	r26, 0x4E	; 78
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	ee e4       	ldi	r30, 0x4E	; 78
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	91 81       	ldd	r25, Z+1	; 0x01
    1056:	8e 7f       	andi	r24, 0xFE	; 254
    1058:	11 96       	adiw	r26, 0x01	; 1
    105a:	9c 93       	st	X, r25
    105c:	8e 93       	st	-X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    105e:	ae e4       	ldi	r26, 0x4E	; 78
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	ee e4       	ldi	r30, 0x4E	; 78
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	91 81       	ldd	r25, Z+1	; 0x01
    106a:	82 60       	ori	r24, 0x02	; 2
    106c:	11 96       	adiw	r26, 0x01	; 1
    106e:	9c 93       	st	X, r25
    1070:	8e 93       	st	-X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);
    1072:	ae e4       	ldi	r26, 0x4E	; 78
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	ee e4       	ldi	r30, 0x4E	; 78
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	91 81       	ldd	r25, Z+1	; 0x01
    107e:	8b 7f       	andi	r24, 0xFB	; 251
    1080:	11 96       	adiw	r26, 0x01	; 1
    1082:	9c 93       	st	X, r25
    1084:	8e 93       	st	-X, r24
	}
}
    1086:	0f 90       	pop	r0
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <M_TIMER1_void_Stop>:
void M_TIMER1_void_Stop(void)
{
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    1096:	ae e4       	ldi	r26, 0x4E	; 78
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	ee e4       	ldi	r30, 0x4E	; 78
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	91 81       	ldd	r25, Z+1	; 0x01
    10a2:	8e 7f       	andi	r24, 0xFE	; 254
    10a4:	11 96       	adiw	r26, 0x01	; 1
    10a6:	9c 93       	st	X, r25
    10a8:	8e 93       	st	-X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS11);
    10aa:	ae e4       	ldi	r26, 0x4E	; 78
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	ee e4       	ldi	r30, 0x4E	; 78
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	91 81       	ldd	r25, Z+1	; 0x01
    10b6:	8d 7f       	andi	r24, 0xFD	; 253
    10b8:	11 96       	adiw	r26, 0x01	; 1
    10ba:	9c 93       	st	X, r25
    10bc:	8e 93       	st	-X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    10be:	ae e4       	ldi	r26, 0x4E	; 78
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	ee e4       	ldi	r30, 0x4E	; 78
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	91 81       	ldd	r25, Z+1	; 0x01
    10ca:	8b 7f       	andi	r24, 0xFB	; 251
    10cc:	11 96       	adiw	r26, 0x01	; 1
    10ce:	9c 93       	st	X, r25
    10d0:	8e 93       	st	-X, r24

}
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	08 95       	ret

000010d8 <M_TIMER1_void_ICU_Enable>:

void M_TIMER1_void_ICU_Enable(void)
{
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
	/*Enable ICU Interrupt*/
	SET_BIT(TIMSK,TIMSK_TICIE1);
    10e0:	a9 e5       	ldi	r26, 0x59	; 89
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e9 e5       	ldi	r30, 0x59	; 89
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	80 62       	ori	r24, 0x20	; 32
    10ec:	8c 93       	st	X, r24
	/*Set trigger to rising edge*/
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    10ee:	ae e4       	ldi	r26, 0x4E	; 78
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	ee e4       	ldi	r30, 0x4E	; 78
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	91 81       	ldd	r25, Z+1	; 0x01
    10fa:	80 64       	ori	r24, 0x40	; 64
    10fc:	11 96       	adiw	r26, 0x01	; 1
    10fe:	9c 93       	st	X, r25
    1100:	8e 93       	st	-X, r24

}
    1102:	cf 91       	pop	r28
    1104:	df 91       	pop	r29
    1106:	08 95       	ret

00001108 <M_TIMER1_void_ICU_TriggerSelect>:


void M_TIMER1_void_ICU_TriggerSelect(ICU_Trigger Local_Trigger)
{
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	0f 92       	push	r0
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
    1112:	89 83       	std	Y+1, r24	; 0x01
	if(Local_Trigger == ICU_FALLING)
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	88 23       	and	r24, r24
    1118:	59 f4       	brne	.+22     	; 0x1130 <M_TIMER1_void_ICU_TriggerSelect+0x28>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    111a:	ae e4       	ldi	r26, 0x4E	; 78
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	ee e4       	ldi	r30, 0x4E	; 78
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	91 81       	ldd	r25, Z+1	; 0x01
    1126:	8f 7b       	andi	r24, 0xBF	; 191
    1128:	11 96       	adiw	r26, 0x01	; 1
    112a:	9c 93       	st	X, r25
    112c:	8e 93       	st	-X, r24
    112e:	0d c0       	rjmp	.+26     	; 0x114a <M_TIMER1_void_ICU_TriggerSelect+0x42>

	}
	else if(Local_Trigger == ICU_RISING)
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	81 30       	cpi	r24, 0x01	; 1
    1134:	51 f4       	brne	.+20     	; 0x114a <M_TIMER1_void_ICU_TriggerSelect+0x42>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    1136:	ae e4       	ldi	r26, 0x4E	; 78
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	ee e4       	ldi	r30, 0x4E	; 78
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	91 81       	ldd	r25, Z+1	; 0x01
    1142:	80 64       	ori	r24, 0x40	; 64
    1144:	11 96       	adiw	r26, 0x01	; 1
    1146:	9c 93       	st	X, r25
    1148:	8e 93       	st	-X, r24

	}
}
    114a:	0f 90       	pop	r0
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	08 95       	ret

00001152 <M_TIMER1_void_ICU_INTERRUPTDIS>:

void M_TIMER1_void_ICU_INTERRUPTDIS(void)
{
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
	/*Enable ICU Interrupt*/
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    115a:	a9 e5       	ldi	r26, 0x59	; 89
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e9 e5       	ldi	r30, 0x59	; 89
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	8f 7d       	andi	r24, 0xDF	; 223
    1166:	8c 93       	st	X, r24
}
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <M_TIMER1_void_ICU_Reading>:

u16 M_TIMER1_void_ICU_Reading(void)
{
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1176:	e6 e4       	ldi	r30, 0x46	; 70
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	91 81       	ldd	r25, Z+1	; 0x01
}
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	08 95       	ret

00001184 <M_TIMER1_void_ICU_SetCallBack>:

void M_TIMER1_void_ICU_SetCallBack(void)
{
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62

}
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <M_TIMER1_u8_Reset_flag>:

u8 M_TIMER1_u8_Reset_flag(TIMER1_INTERRUPT_TYPE Local_type)
{
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	0f 92       	push	r0
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	89 83       	std	Y+1, r24	; 0x01
	if(Local_type == TIMER1_ICU)
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	88 23       	and	r24, r24
    11a2:	41 f4       	brne	.+16     	; 0x11b4 <M_TIMER1_u8_Reset_flag+0x22>
	{
		SET_BIT(TIFR,TIFR_ICF1);
    11a4:	a8 e5       	ldi	r26, 0x58	; 88
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e8 e5       	ldi	r30, 0x58	; 88
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	80 62       	ori	r24, 0x20	; 32
    11b0:	8c 93       	st	X, r24
    11b2:	0a c0       	rjmp	.+20     	; 0x11c8 <M_TIMER1_u8_Reset_flag+0x36>
	}
	else if(Local_type == TIMER1_OVF)
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	83 30       	cpi	r24, 0x03	; 3
    11b8:	39 f4       	brne	.+14     	; 0x11c8 <M_TIMER1_u8_Reset_flag+0x36>
	{
		SET_BIT(TIFR,TIFR_TOV1);
    11ba:	a8 e5       	ldi	r26, 0x58	; 88
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e8 e5       	ldi	r30, 0x58	; 88
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	84 60       	ori	r24, 0x04	; 4
    11c6:	8c 93       	st	X, r24
	}
	return 0;
    11c8:	80 e0       	ldi	r24, 0x00	; 0
}
    11ca:	0f 90       	pop	r0
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <M_void_Timer_Init>:
static u32 No_of_over_flows=0;
static u8 No_of_Remaning=0;
static u32 Global_No_of_overflows=0;

void M_void_Timer_Init(Timer_Mode T_MODE, Comp_Output_Mode WG_M)
{
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	2c 97       	sbiw	r28, 0x0c	; 12
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	cd bf       	out	0x3d, r28	; 61
    11e6:	89 83       	std	Y+1, r24	; 0x01
    11e8:	6a 83       	std	Y+2, r22	; 0x02
	switch(T_MODE)
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	3c 87       	std	Y+12, r19	; 0x0c
    11f2:	2b 87       	std	Y+11, r18	; 0x0b
    11f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    11f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    11f8:	81 30       	cpi	r24, 0x01	; 1
    11fa:	91 05       	cpc	r25, r1
    11fc:	09 f4       	brne	.+2      	; 0x1200 <M_void_Timer_Init+0x2e>
    11fe:	7e c0       	rjmp	.+252    	; 0x12fc <M_void_Timer_Init+0x12a>
    1200:	2b 85       	ldd	r18, Y+11	; 0x0b
    1202:	3c 85       	ldd	r19, Y+12	; 0x0c
    1204:	22 30       	cpi	r18, 0x02	; 2
    1206:	31 05       	cpc	r19, r1
    1208:	2c f4       	brge	.+10     	; 0x1214 <M_void_Timer_Init+0x42>
    120a:	8b 85       	ldd	r24, Y+11	; 0x0b
    120c:	9c 85       	ldd	r25, Y+12	; 0x0c
    120e:	00 97       	sbiw	r24, 0x00	; 0
    1210:	71 f0       	breq	.+28     	; 0x122e <M_void_Timer_Init+0x5c>
    1212:	76 c1       	rjmp	.+748    	; 0x1500 <M_void_Timer_Init+0x32e>
    1214:	2b 85       	ldd	r18, Y+11	; 0x0b
    1216:	3c 85       	ldd	r19, Y+12	; 0x0c
    1218:	22 30       	cpi	r18, 0x02	; 2
    121a:	31 05       	cpc	r19, r1
    121c:	09 f4       	brne	.+2      	; 0x1220 <M_void_Timer_Init+0x4e>
    121e:	d6 c0       	rjmp	.+428    	; 0x13cc <M_void_Timer_Init+0x1fa>
    1220:	8b 85       	ldd	r24, Y+11	; 0x0b
    1222:	9c 85       	ldd	r25, Y+12	; 0x0c
    1224:	83 30       	cpi	r24, 0x03	; 3
    1226:	91 05       	cpc	r25, r1
    1228:	09 f4       	brne	.+2      	; 0x122c <M_void_Timer_Init+0x5a>
    122a:	1e c1       	rjmp	.+572    	; 0x1468 <M_void_Timer_Init+0x296>
    122c:	69 c1       	rjmp	.+722    	; 0x1500 <M_void_Timer_Init+0x32e>
	{
	case Normal_Mode:
		TCCR0 &= CLEAR_TIMER_MODE_REG;
    122e:	a3 e5       	ldi	r26, 0x53	; 83
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e3 e5       	ldi	r30, 0x53	; 83
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	87 7d       	andi	r24, 0xD7	; 215
    123a:	8c 93       	st	X, r24
		TCCR0 |=SET_NORMAL_MODE_MASK;
    123c:	a3 e5       	ldi	r26, 0x53	; 83
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e3 e5       	ldi	r30, 0x53	; 83
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	8c 93       	st	X, r24
		switch(WG_M)
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	3a 87       	std	Y+10, r19	; 0x0a
    1250:	29 87       	std	Y+9, r18	; 0x09
    1252:	89 85       	ldd	r24, Y+9	; 0x09
    1254:	9a 85       	ldd	r25, Y+10	; 0x0a
    1256:	81 30       	cpi	r24, 0x01	; 1
    1258:	91 05       	cpc	r25, r1
    125a:	19 f1       	breq	.+70     	; 0x12a2 <M_void_Timer_Init+0xd0>
    125c:	29 85       	ldd	r18, Y+9	; 0x09
    125e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1260:	22 30       	cpi	r18, 0x02	; 2
    1262:	31 05       	cpc	r19, r1
    1264:	2c f4       	brge	.+10     	; 0x1270 <M_void_Timer_Init+0x9e>
    1266:	89 85       	ldd	r24, Y+9	; 0x09
    1268:	9a 85       	ldd	r25, Y+10	; 0x0a
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	61 f0       	breq	.+24     	; 0x1286 <M_void_Timer_Init+0xb4>
    126e:	48 c1       	rjmp	.+656    	; 0x1500 <M_void_Timer_Init+0x32e>
    1270:	29 85       	ldd	r18, Y+9	; 0x09
    1272:	3a 85       	ldd	r19, Y+10	; 0x0a
    1274:	22 30       	cpi	r18, 0x02	; 2
    1276:	31 05       	cpc	r19, r1
    1278:	19 f1       	breq	.+70     	; 0x12c0 <M_void_Timer_Init+0xee>
    127a:	89 85       	ldd	r24, Y+9	; 0x09
    127c:	9a 85       	ldd	r25, Y+10	; 0x0a
    127e:	83 30       	cpi	r24, 0x03	; 3
    1280:	91 05       	cpc	r25, r1
    1282:	69 f1       	breq	.+90     	; 0x12de <M_void_Timer_Init+0x10c>
    1284:	3d c1       	rjmp	.+634    	; 0x1500 <M_void_Timer_Init+0x32e>
		{
		case Normal_Port:
			TCCR0 &= CLEAR_TIMER_MODE_REG;
    1286:	a3 e5       	ldi	r26, 0x53	; 83
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e3 e5       	ldi	r30, 0x53	; 83
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	87 7d       	andi	r24, 0xD7	; 215
    1292:	8c 93       	st	X, r24
			TCCR0 |= NORMAL_PORT_MASK;
    1294:	a3 e5       	ldi	r26, 0x53	; 83
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e3 e5       	ldi	r30, 0x53	; 83
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	8c 93       	st	X, r24
    12a0:	2f c1       	rjmp	.+606    	; 0x1500 <M_void_Timer_Init+0x32e>
			break;
		case Toggle_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    12a2:	a3 e5       	ldi	r26, 0x53	; 83
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e3 e5       	ldi	r30, 0x53	; 83
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	8f 7c       	andi	r24, 0xCF	; 207
    12ae:	8c 93       	st	X, r24
			TCCR0 |= TOGGLE_PORT_MASK;
    12b0:	a3 e5       	ldi	r26, 0x53	; 83
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e3 e5       	ldi	r30, 0x53	; 83
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	80 61       	ori	r24, 0x10	; 16
    12bc:	8c 93       	st	X, r24
    12be:	20 c1       	rjmp	.+576    	; 0x1500 <M_void_Timer_Init+0x32e>
			break;
		case Clear_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    12c0:	a3 e5       	ldi	r26, 0x53	; 83
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e3 e5       	ldi	r30, 0x53	; 83
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	8f 7c       	andi	r24, 0xCF	; 207
    12cc:	8c 93       	st	X, r24
			TCCR0 |= CLEAR_PORT_MASK;
    12ce:	a3 e5       	ldi	r26, 0x53	; 83
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e3 e5       	ldi	r30, 0x53	; 83
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	80 62       	ori	r24, 0x20	; 32
    12da:	8c 93       	st	X, r24
    12dc:	11 c1       	rjmp	.+546    	; 0x1500 <M_void_Timer_Init+0x32e>
			break;
		case Set_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    12de:	a3 e5       	ldi	r26, 0x53	; 83
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e3 e5       	ldi	r30, 0x53	; 83
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	8f 7c       	andi	r24, 0xCF	; 207
    12ea:	8c 93       	st	X, r24
			TCCR0 |= SET_PORT_MASK;
    12ec:	a3 e5       	ldi	r26, 0x53	; 83
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e3 e5       	ldi	r30, 0x53	; 83
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	80 63       	ori	r24, 0x30	; 48
    12f8:	8c 93       	st	X, r24
    12fa:	02 c1       	rjmp	.+516    	; 0x1500 <M_void_Timer_Init+0x32e>
		default:
			break;
		}
		break;
	case CTC_Mode:
		TCCR0 &= CLEAR_TIMER_MODE_REG;
    12fc:	a3 e5       	ldi	r26, 0x53	; 83
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e3 e5       	ldi	r30, 0x53	; 83
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	87 7d       	andi	r24, 0xD7	; 215
    1308:	8c 93       	st	X, r24
		TCCR0 |=SET_CTC_MODE_MASK;
    130a:	a3 e5       	ldi	r26, 0x53	; 83
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e3 e5       	ldi	r30, 0x53	; 83
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	88 60       	ori	r24, 0x08	; 8
    1316:	8c 93       	st	X, r24
		switch(WG_M)
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	38 87       	std	Y+8, r19	; 0x08
    1320:	2f 83       	std	Y+7, r18	; 0x07
    1322:	8f 81       	ldd	r24, Y+7	; 0x07
    1324:	98 85       	ldd	r25, Y+8	; 0x08
    1326:	81 30       	cpi	r24, 0x01	; 1
    1328:	91 05       	cpc	r25, r1
    132a:	19 f1       	breq	.+70     	; 0x1372 <M_void_Timer_Init+0x1a0>
    132c:	2f 81       	ldd	r18, Y+7	; 0x07
    132e:	38 85       	ldd	r19, Y+8	; 0x08
    1330:	22 30       	cpi	r18, 0x02	; 2
    1332:	31 05       	cpc	r19, r1
    1334:	2c f4       	brge	.+10     	; 0x1340 <M_void_Timer_Init+0x16e>
    1336:	8f 81       	ldd	r24, Y+7	; 0x07
    1338:	98 85       	ldd	r25, Y+8	; 0x08
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	61 f0       	breq	.+24     	; 0x1356 <M_void_Timer_Init+0x184>
    133e:	e0 c0       	rjmp	.+448    	; 0x1500 <M_void_Timer_Init+0x32e>
    1340:	2f 81       	ldd	r18, Y+7	; 0x07
    1342:	38 85       	ldd	r19, Y+8	; 0x08
    1344:	22 30       	cpi	r18, 0x02	; 2
    1346:	31 05       	cpc	r19, r1
    1348:	19 f1       	breq	.+70     	; 0x1390 <M_void_Timer_Init+0x1be>
    134a:	8f 81       	ldd	r24, Y+7	; 0x07
    134c:	98 85       	ldd	r25, Y+8	; 0x08
    134e:	83 30       	cpi	r24, 0x03	; 3
    1350:	91 05       	cpc	r25, r1
    1352:	69 f1       	breq	.+90     	; 0x13ae <M_void_Timer_Init+0x1dc>
    1354:	d5 c0       	rjmp	.+426    	; 0x1500 <M_void_Timer_Init+0x32e>
		{
		case Normal_Port:
			TCCR0 &= CLEAR_TIMER_MODE_REG;
    1356:	a3 e5       	ldi	r26, 0x53	; 83
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e3 e5       	ldi	r30, 0x53	; 83
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	87 7d       	andi	r24, 0xD7	; 215
    1362:	8c 93       	st	X, r24
			TCCR0 |= NORMAL_PORT_MASK;
    1364:	a3 e5       	ldi	r26, 0x53	; 83
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	e3 e5       	ldi	r30, 0x53	; 83
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	8c 93       	st	X, r24
    1370:	c7 c0       	rjmp	.+398    	; 0x1500 <M_void_Timer_Init+0x32e>
			break;
		case Toggle_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    1372:	a3 e5       	ldi	r26, 0x53	; 83
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e3 e5       	ldi	r30, 0x53	; 83
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	8f 7c       	andi	r24, 0xCF	; 207
    137e:	8c 93       	st	X, r24
			TCCR0 |= TOGGLE_PORT_MASK;
    1380:	a3 e5       	ldi	r26, 0x53	; 83
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e3 e5       	ldi	r30, 0x53	; 83
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	80 61       	ori	r24, 0x10	; 16
    138c:	8c 93       	st	X, r24
    138e:	b8 c0       	rjmp	.+368    	; 0x1500 <M_void_Timer_Init+0x32e>
			break;
		case Clear_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    1390:	a3 e5       	ldi	r26, 0x53	; 83
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e3 e5       	ldi	r30, 0x53	; 83
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	8f 7c       	andi	r24, 0xCF	; 207
    139c:	8c 93       	st	X, r24
			TCCR0 |= CLEAR_PORT_MASK;
    139e:	a3 e5       	ldi	r26, 0x53	; 83
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e3 e5       	ldi	r30, 0x53	; 83
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	80 62       	ori	r24, 0x20	; 32
    13aa:	8c 93       	st	X, r24
    13ac:	a9 c0       	rjmp	.+338    	; 0x1500 <M_void_Timer_Init+0x32e>
			break;
		case Set_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    13ae:	a3 e5       	ldi	r26, 0x53	; 83
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e3 e5       	ldi	r30, 0x53	; 83
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	8f 7c       	andi	r24, 0xCF	; 207
    13ba:	8c 93       	st	X, r24
			TCCR0 |= SET_PORT_MASK;
    13bc:	a3 e5       	ldi	r26, 0x53	; 83
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e3 e5       	ldi	r30, 0x53	; 83
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	80 63       	ori	r24, 0x30	; 48
    13c8:	8c 93       	st	X, r24
    13ca:	9a c0       	rjmp	.+308    	; 0x1500 <M_void_Timer_Init+0x32e>
		default:
			break;
		}
		break;
	case Fast_PWM:
		TCCR0 &= CLEAR_TIMER_MODE_REG;
    13cc:	a3 e5       	ldi	r26, 0x53	; 83
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e3 e5       	ldi	r30, 0x53	; 83
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	87 7d       	andi	r24, 0xD7	; 215
    13d8:	8c 93       	st	X, r24
		TCCR0 |=SET_FAST_MODE_MASK;
    13da:	a3 e5       	ldi	r26, 0x53	; 83
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e3 e5       	ldi	r30, 0x53	; 83
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	88 64       	ori	r24, 0x48	; 72
    13e6:	8c 93       	st	X, r24
		switch(WG_M)
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	3e 83       	std	Y+6, r19	; 0x06
    13f0:	2d 83       	std	Y+5, r18	; 0x05
    13f2:	8d 81       	ldd	r24, Y+5	; 0x05
    13f4:	9e 81       	ldd	r25, Y+6	; 0x06
    13f6:	84 30       	cpi	r24, 0x04	; 4
    13f8:	91 05       	cpc	r25, r1
    13fa:	c1 f0       	breq	.+48     	; 0x142c <M_void_Timer_Init+0x25a>
    13fc:	2d 81       	ldd	r18, Y+5	; 0x05
    13fe:	3e 81       	ldd	r19, Y+6	; 0x06
    1400:	25 30       	cpi	r18, 0x05	; 5
    1402:	31 05       	cpc	r19, r1
    1404:	11 f1       	breq	.+68     	; 0x144a <M_void_Timer_Init+0x278>
    1406:	8d 81       	ldd	r24, Y+5	; 0x05
    1408:	9e 81       	ldd	r25, Y+6	; 0x06
    140a:	00 97       	sbiw	r24, 0x00	; 0
    140c:	09 f0       	breq	.+2      	; 0x1410 <M_void_Timer_Init+0x23e>
    140e:	78 c0       	rjmp	.+240    	; 0x1500 <M_void_Timer_Init+0x32e>
		{
		case Normal_Port:
			TCCR0 &= CLEAR_TIMER_MODE_REG;
    1410:	a3 e5       	ldi	r26, 0x53	; 83
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e3 e5       	ldi	r30, 0x53	; 83
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	87 7d       	andi	r24, 0xD7	; 215
    141c:	8c 93       	st	X, r24
			TCCR0 |= NORMAL_PORT_MASK;
    141e:	a3 e5       	ldi	r26, 0x53	; 83
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e3 e5       	ldi	r30, 0x53	; 83
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	8c 93       	st	X, r24
    142a:	6a c0       	rjmp	.+212    	; 0x1500 <M_void_Timer_Init+0x32e>
			break;
		case Inverting_Mode:
			TCCR0 &= CLEAR_WAVEG_MASK;
    142c:	a3 e5       	ldi	r26, 0x53	; 83
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e3 e5       	ldi	r30, 0x53	; 83
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	8f 7c       	andi	r24, 0xCF	; 207
    1438:	8c 93       	st	X, r24
			TCCR0 |= INVERTING_FAST_MASK;
    143a:	a3 e5       	ldi	r26, 0x53	; 83
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e3 e5       	ldi	r30, 0x53	; 83
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	80 63       	ori	r24, 0x30	; 48
    1446:	8c 93       	st	X, r24
    1448:	5b c0       	rjmp	.+182    	; 0x1500 <M_void_Timer_Init+0x32e>
			break;
		case Non_Invering_Mode:
			TCCR0 &= CLEAR_WAVEG_MASK;
    144a:	a3 e5       	ldi	r26, 0x53	; 83
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	e3 e5       	ldi	r30, 0x53	; 83
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	8f 7c       	andi	r24, 0xCF	; 207
    1456:	8c 93       	st	X, r24
			TCCR0 |= NON_INVERTING_FAST_MASK;
    1458:	a3 e5       	ldi	r26, 0x53	; 83
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e3 e5       	ldi	r30, 0x53	; 83
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	80 62       	ori	r24, 0x20	; 32
    1464:	8c 93       	st	X, r24
    1466:	4c c0       	rjmp	.+152    	; 0x1500 <M_void_Timer_Init+0x32e>
		default:
			break;
		}
		break;
	case Phase_Correct_PWM:
		TCCR0 &= CLEAR_TIMER_MODE_REG;
    1468:	a3 e5       	ldi	r26, 0x53	; 83
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e3 e5       	ldi	r30, 0x53	; 83
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	87 7d       	andi	r24, 0xD7	; 215
    1474:	8c 93       	st	X, r24
		TCCR0 |=SET_PWM_PHASE_MODE_MASK;
    1476:	a3 e5       	ldi	r26, 0x53	; 83
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e3 e5       	ldi	r30, 0x53	; 83
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	80 64       	ori	r24, 0x40	; 64
    1482:	8c 93       	st	X, r24
		switch(WG_M)
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	3c 83       	std	Y+4, r19	; 0x04
    148c:	2b 83       	std	Y+3, r18	; 0x03
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	9c 81       	ldd	r25, Y+4	; 0x04
    1492:	84 30       	cpi	r24, 0x04	; 4
    1494:	91 05       	cpc	r25, r1
    1496:	b9 f0       	breq	.+46     	; 0x14c6 <M_void_Timer_Init+0x2f4>
    1498:	2b 81       	ldd	r18, Y+3	; 0x03
    149a:	3c 81       	ldd	r19, Y+4	; 0x04
    149c:	25 30       	cpi	r18, 0x05	; 5
    149e:	31 05       	cpc	r19, r1
    14a0:	09 f1       	breq	.+66     	; 0x14e4 <M_void_Timer_Init+0x312>
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	9c 81       	ldd	r25, Y+4	; 0x04
    14a6:	00 97       	sbiw	r24, 0x00	; 0
    14a8:	59 f5       	brne	.+86     	; 0x1500 <M_void_Timer_Init+0x32e>
		{
		case Normal_Port:
			TCCR0 &= CLEAR_TIMER_MODE_REG;
    14aa:	a3 e5       	ldi	r26, 0x53	; 83
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e3 e5       	ldi	r30, 0x53	; 83
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	87 7d       	andi	r24, 0xD7	; 215
    14b6:	8c 93       	st	X, r24
			TCCR0 |= NORMAL_PORT_MASK;
    14b8:	a3 e5       	ldi	r26, 0x53	; 83
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e3 e5       	ldi	r30, 0x53	; 83
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	8c 93       	st	X, r24
    14c4:	1d c0       	rjmp	.+58     	; 0x1500 <M_void_Timer_Init+0x32e>
			break;
		case Inverting_Mode:
			TCCR0 &= CLEAR_WAVEG_MASK;
    14c6:	a3 e5       	ldi	r26, 0x53	; 83
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e3 e5       	ldi	r30, 0x53	; 83
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	8f 7c       	andi	r24, 0xCF	; 207
    14d2:	8c 93       	st	X, r24
			TCCR0 |= INVERTING_PHASE_MASK;
    14d4:	a3 e5       	ldi	r26, 0x53	; 83
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e3 e5       	ldi	r30, 0x53	; 83
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	80 63       	ori	r24, 0x30	; 48
    14e0:	8c 93       	st	X, r24
    14e2:	0e c0       	rjmp	.+28     	; 0x1500 <M_void_Timer_Init+0x32e>
			break;
		case Non_Invering_Mode:
			TCCR0 &= CLEAR_WAVEG_MASK;
    14e4:	a3 e5       	ldi	r26, 0x53	; 83
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e3 e5       	ldi	r30, 0x53	; 83
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	8f 7c       	andi	r24, 0xCF	; 207
    14f0:	8c 93       	st	X, r24
			TCCR0 |= NON_INVERTING_PHASE_MASK;
    14f2:	a3 e5       	ldi	r26, 0x53	; 83
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e3 e5       	ldi	r30, 0x53	; 83
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	80 62       	ori	r24, 0x20	; 32
    14fe:	8c 93       	st	X, r24
		default:
			break;
		}
		break;
	}
}
    1500:	2c 96       	adiw	r28, 0x0c	; 12
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	08 95       	ret

00001512 <M_void_Timer_start>:
void M_void_Timer_start(PRE_SCALLER Pre_scaller_select)
{
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	00 d0       	rcall	.+0      	; 0x1518 <M_void_Timer_start+0x6>
    1518:	0f 92       	push	r0
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	89 83       	std	Y+1, r24	; 0x01
	switch(Pre_scaller_select)
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	3b 83       	std	Y+3, r19	; 0x03
    1528:	2a 83       	std	Y+2, r18	; 0x02
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	9b 81       	ldd	r25, Y+3	; 0x03
    152e:	82 30       	cpi	r24, 0x02	; 2
    1530:	91 05       	cpc	r25, r1
    1532:	09 f4       	brne	.+2      	; 0x1536 <M_void_Timer_start+0x24>
    1534:	3e c0       	rjmp	.+124    	; 0x15b2 <M_void_Timer_start+0xa0>
    1536:	2a 81       	ldd	r18, Y+2	; 0x02
    1538:	3b 81       	ldd	r19, Y+3	; 0x03
    153a:	23 30       	cpi	r18, 0x03	; 3
    153c:	31 05       	cpc	r19, r1
    153e:	54 f4       	brge	.+20     	; 0x1554 <M_void_Timer_start+0x42>
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	9b 81       	ldd	r25, Y+3	; 0x03
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	c1 f0       	breq	.+48     	; 0x1578 <M_void_Timer_start+0x66>
    1548:	2a 81       	ldd	r18, Y+2	; 0x02
    154a:	3b 81       	ldd	r19, Y+3	; 0x03
    154c:	21 30       	cpi	r18, 0x01	; 1
    154e:	31 05       	cpc	r19, r1
    1550:	09 f1       	breq	.+66     	; 0x1594 <M_void_Timer_start+0x82>
    1552:	6a c0       	rjmp	.+212    	; 0x1628 <M_void_Timer_start+0x116>
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	9b 81       	ldd	r25, Y+3	; 0x03
    1558:	84 30       	cpi	r24, 0x04	; 4
    155a:	91 05       	cpc	r25, r1
    155c:	09 f4       	brne	.+2      	; 0x1560 <M_void_Timer_start+0x4e>
    155e:	47 c0       	rjmp	.+142    	; 0x15ee <M_void_Timer_start+0xdc>
    1560:	2a 81       	ldd	r18, Y+2	; 0x02
    1562:	3b 81       	ldd	r19, Y+3	; 0x03
    1564:	24 30       	cpi	r18, 0x04	; 4
    1566:	31 05       	cpc	r19, r1
    1568:	9c f1       	brlt	.+102    	; 0x15d0 <M_void_Timer_start+0xbe>
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	9b 81       	ldd	r25, Y+3	; 0x03
    156e:	85 30       	cpi	r24, 0x05	; 5
    1570:	91 05       	cpc	r25, r1
    1572:	09 f4       	brne	.+2      	; 0x1576 <M_void_Timer_start+0x64>
    1574:	4b c0       	rjmp	.+150    	; 0x160c <M_void_Timer_start+0xfa>
    1576:	58 c0       	rjmp	.+176    	; 0x1628 <M_void_Timer_start+0x116>
	{
	case No_CLK:
		TCCR0 &= CLEAR_PRESCALLER_MASK;
    1578:	a3 e5       	ldi	r26, 0x53	; 83
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e3 e5       	ldi	r30, 0x53	; 83
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	88 7f       	andi	r24, 0xF8	; 248
    1584:	8c 93       	st	X, r24
		TCCR0 |= NO_CLK_SOURCE;
    1586:	a3 e5       	ldi	r26, 0x53	; 83
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e3 e5       	ldi	r30, 0x53	; 83
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	8c 93       	st	X, r24
    1592:	4a c0       	rjmp	.+148    	; 0x1628 <M_void_Timer_start+0x116>
		break;
	case NO_PRESCALLING:
		TCCR0 &= CLEAR_PRESCALLER_MASK;
    1594:	a3 e5       	ldi	r26, 0x53	; 83
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e3 e5       	ldi	r30, 0x53	; 83
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	88 7f       	andi	r24, 0xF8	; 248
    15a0:	8c 93       	st	X, r24
		TCCR0 |= NO_CLK_PRESCALLER;
    15a2:	a3 e5       	ldi	r26, 0x53	; 83
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e3 e5       	ldi	r30, 0x53	; 83
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	81 60       	ori	r24, 0x01	; 1
    15ae:	8c 93       	st	X, r24
    15b0:	3b c0       	rjmp	.+118    	; 0x1628 <M_void_Timer_start+0x116>
		break;
	case CLK_8:
		TCCR0 &= CLEAR_PRESCALLER_MASK;
    15b2:	a3 e5       	ldi	r26, 0x53	; 83
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	e3 e5       	ldi	r30, 0x53	; 83
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	88 7f       	andi	r24, 0xF8	; 248
    15be:	8c 93       	st	X, r24
		TCCR0 |= CLK_8_PRESCALLER;
    15c0:	a3 e5       	ldi	r26, 0x53	; 83
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e3 e5       	ldi	r30, 0x53	; 83
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	82 60       	ori	r24, 0x02	; 2
    15cc:	8c 93       	st	X, r24
    15ce:	2c c0       	rjmp	.+88     	; 0x1628 <M_void_Timer_start+0x116>
		break;
	case CLK_64:
		TCCR0 &= CLEAR_PRESCALLER_MASK;
    15d0:	a3 e5       	ldi	r26, 0x53	; 83
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e3 e5       	ldi	r30, 0x53	; 83
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	88 7f       	andi	r24, 0xF8	; 248
    15dc:	8c 93       	st	X, r24
		TCCR0 |= CLK_64_PRESCALLER;
    15de:	a3 e5       	ldi	r26, 0x53	; 83
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e3 e5       	ldi	r30, 0x53	; 83
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	83 60       	ori	r24, 0x03	; 3
    15ea:	8c 93       	st	X, r24
    15ec:	1d c0       	rjmp	.+58     	; 0x1628 <M_void_Timer_start+0x116>
		break;
	case CLK_256:
		TCCR0 &= CLEAR_PRESCALLER_MASK;
    15ee:	a3 e5       	ldi	r26, 0x53	; 83
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e3 e5       	ldi	r30, 0x53	; 83
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	88 7f       	andi	r24, 0xF8	; 248
    15fa:	8c 93       	st	X, r24
		TCCR0 |= CLK_256_PRESCALLER;
    15fc:	a3 e5       	ldi	r26, 0x53	; 83
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e3 e5       	ldi	r30, 0x53	; 83
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	84 60       	ori	r24, 0x04	; 4
    1608:	8c 93       	st	X, r24
    160a:	0e c0       	rjmp	.+28     	; 0x1628 <M_void_Timer_start+0x116>
		break;
	case CLK_1024:
		TCCR0 &= CLEAR_PRESCALLER_MASK;
    160c:	a3 e5       	ldi	r26, 0x53	; 83
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e3 e5       	ldi	r30, 0x53	; 83
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	88 7f       	andi	r24, 0xF8	; 248
    1618:	8c 93       	st	X, r24
		TCCR0 |= CLK_1024_PRESCALLER;
    161a:	a3 e5       	ldi	r26, 0x53	; 83
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e3 e5       	ldi	r30, 0x53	; 83
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	85 60       	ori	r24, 0x05	; 5
    1626:	8c 93       	st	X, r24
		break;
	default:
		break;
	}

}
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <M_void_Timer_stop>:
void M_void_Timer_stop(void)
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= CLEAR_PRESCALLER_MASK;
    163c:	a3 e5       	ldi	r26, 0x53	; 83
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e3 e5       	ldi	r30, 0x53	; 83
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	88 7f       	andi	r24, 0xF8	; 248
    1648:	8c 93       	st	X, r24
	TCCR0 |= NO_CLK_SOURCE;
    164a:	a3 e5       	ldi	r26, 0x53	; 83
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	e3 e5       	ldi	r30, 0x53	; 83
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	8c 93       	st	X, r24
}
    1656:	cf 91       	pop	r28
    1658:	df 91       	pop	r29
    165a:	08 95       	ret

0000165c <Timer_u8__GetCounts>:

u8 Timer_u8__GetCounts(void)
{
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    1664:	e2 e5       	ldi	r30, 0x52	; 82
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
}
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <M_void_Timer_Set_Preload>:
void M_void_Timer_Set_Preload(u8 Pre_load)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	0f 92       	push	r0
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0= Pre_load;
    167c:	e2 e5       	ldi	r30, 0x52	; 82
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	80 83       	st	Z, r24
}
    1684:	0f 90       	pop	r0
    1686:	cf 91       	pop	r28
    1688:	df 91       	pop	r29
    168a:	08 95       	ret

0000168c <M_TIMER0_setDelayTimeMilliSec>:

void M_TIMER0_setDelayTimeMilliSec(u32 Local_DelayTime, Timer_Mode Local_Mode, PRE_SCALLER Local_Prescaller)
{
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	ac 97       	sbiw	r28, 0x2c	; 44
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	de bf       	out	0x3e, r29	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	cd bf       	out	0x3d, r28	; 61
    16a0:	6a a3       	std	Y+34, r22	; 0x22
    16a2:	7b a3       	std	Y+35, r23	; 0x23
    16a4:	8c a3       	std	Y+36, r24	; 0x24
    16a6:	9d a3       	std	Y+37, r25	; 0x25
    16a8:	4e a3       	std	Y+38, r20	; 0x26
    16aa:	2f a3       	std	Y+39, r18	; 0x27

	u32 Pre_scallers[5]={1,8,64,256,1024};
    16ac:	ce 01       	movw	r24, r28
    16ae:	0e 96       	adiw	r24, 0x0e	; 14
    16b0:	99 a7       	std	Y+41, r25	; 0x29
    16b2:	88 a7       	std	Y+40, r24	; 0x28
    16b4:	e9 ee       	ldi	r30, 0xE9	; 233
    16b6:	f1 e0       	ldi	r31, 0x01	; 1
    16b8:	fb a7       	std	Y+43, r31	; 0x2b
    16ba:	ea a7       	std	Y+42, r30	; 0x2a
    16bc:	f4 e1       	ldi	r31, 0x14	; 20
    16be:	fc a7       	std	Y+44, r31	; 0x2c
    16c0:	ea a5       	ldd	r30, Y+42	; 0x2a
    16c2:	fb a5       	ldd	r31, Y+43	; 0x2b
    16c4:	00 80       	ld	r0, Z
    16c6:	8a a5       	ldd	r24, Y+42	; 0x2a
    16c8:	9b a5       	ldd	r25, Y+43	; 0x2b
    16ca:	01 96       	adiw	r24, 0x01	; 1
    16cc:	9b a7       	std	Y+43, r25	; 0x2b
    16ce:	8a a7       	std	Y+42, r24	; 0x2a
    16d0:	e8 a5       	ldd	r30, Y+40	; 0x28
    16d2:	f9 a5       	ldd	r31, Y+41	; 0x29
    16d4:	00 82       	st	Z, r0
    16d6:	88 a5       	ldd	r24, Y+40	; 0x28
    16d8:	99 a5       	ldd	r25, Y+41	; 0x29
    16da:	01 96       	adiw	r24, 0x01	; 1
    16dc:	99 a7       	std	Y+41, r25	; 0x29
    16de:	88 a7       	std	Y+40, r24	; 0x28
    16e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    16e2:	91 50       	subi	r25, 0x01	; 1
    16e4:	9c a7       	std	Y+44, r25	; 0x2c
    16e6:	ec a5       	ldd	r30, Y+44	; 0x2c
    16e8:	ee 23       	and	r30, r30
    16ea:	51 f7       	brne	.-44     	; 0x16c0 <M_TIMER0_setDelayTimeMilliSec+0x34>
	f32 TickTime = (f32)Pre_scallers[1]/16;
    16ec:	8a 89       	ldd	r24, Y+18	; 0x12
    16ee:	9b 89       	ldd	r25, Y+19	; 0x13
    16f0:	ac 89       	ldd	r26, Y+20	; 0x14
    16f2:	bd 89       	ldd	r27, Y+21	; 0x15
    16f4:	bc 01       	movw	r22, r24
    16f6:	cd 01       	movw	r24, r26
    16f8:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	bc 01       	movw	r22, r24
    1702:	cd 01       	movw	r24, r26
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	40 e8       	ldi	r20, 0x80	; 128
    170a:	51 e4       	ldi	r21, 0x41	; 65
    170c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	8a 87       	std	Y+10, r24	; 0x0a
    1716:	9b 87       	std	Y+11, r25	; 0x0b
    1718:	ac 87       	std	Y+12, r26	; 0x0c
    171a:	bd 87       	std	Y+13, r27	; 0x0d

	u32 DesiredTickS = 0;
    171c:	1e 82       	std	Y+6, r1	; 0x06
    171e:	1f 82       	std	Y+7, r1	; 0x07
    1720:	18 86       	std	Y+8, r1	; 0x08
    1722:	19 86       	std	Y+9, r1	; 0x09
	u32 CTC_Value = 0 ;
    1724:	1a 82       	std	Y+2, r1	; 0x02
    1726:	1b 82       	std	Y+3, r1	; 0x03
    1728:	1c 82       	std	Y+4, r1	; 0x04
    172a:	1d 82       	std	Y+5, r1	; 0x05
	/* Calculate the desired Tick*/
	 DesiredTickS = (f32)Local_DelayTime*1000/ (TickTime) ;
    172c:	6a a1       	ldd	r22, Y+34	; 0x22
    172e:	7b a1       	ldd	r23, Y+35	; 0x23
    1730:	8c a1       	ldd	r24, Y+36	; 0x24
    1732:	9d a1       	ldd	r25, Y+37	; 0x25
    1734:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	bc 01       	movw	r22, r24
    173e:	cd 01       	movw	r24, r26
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	4a e7       	ldi	r20, 0x7A	; 122
    1746:	54 e4       	ldi	r21, 0x44	; 68
    1748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	bc 01       	movw	r22, r24
    1752:	cd 01       	movw	r24, r26
    1754:	2a 85       	ldd	r18, Y+10	; 0x0a
    1756:	3b 85       	ldd	r19, Y+11	; 0x0b
    1758:	4c 85       	ldd	r20, Y+12	; 0x0c
    175a:	5d 85       	ldd	r21, Y+13	; 0x0d
    175c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	bc 01       	movw	r22, r24
    1766:	cd 01       	movw	r24, r26
    1768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	8e 83       	std	Y+6, r24	; 0x06
    1772:	9f 83       	std	Y+7, r25	; 0x07
    1774:	a8 87       	std	Y+8, r26	; 0x08
    1776:	b9 87       	std	Y+9, r27	; 0x09
	if(Local_Mode == Normal_Mode)
    1778:	8e a1       	ldd	r24, Y+38	; 0x26
    177a:	88 23       	and	r24, r24
    177c:	c9 f5       	brne	.+114    	; 0x17f0 <M_TIMER0_setDelayTimeMilliSec+0x164>
	{
		 /*Store the numbers of over flow */
		 No_of_over_flows = DesiredTickS/ 256 ;
    177e:	8e 81       	ldd	r24, Y+6	; 0x06
    1780:	9f 81       	ldd	r25, Y+7	; 0x07
    1782:	a8 85       	ldd	r26, Y+8	; 0x08
    1784:	b9 85       	ldd	r27, Y+9	; 0x09
    1786:	89 2f       	mov	r24, r25
    1788:	9a 2f       	mov	r25, r26
    178a:	ab 2f       	mov	r26, r27
    178c:	bb 27       	eor	r27, r27
    178e:	80 93 94 02 	sts	0x0294, r24
    1792:	90 93 95 02 	sts	0x0295, r25
    1796:	a0 93 96 02 	sts	0x0296, r26
    179a:	b0 93 97 02 	sts	0x0297, r27
		 /* Store the Number of remaining if found */
		 No_of_Remaning = DesiredTickS % 256;
    179e:	8e 81       	ldd	r24, Y+6	; 0x06
    17a0:	80 93 98 02 	sts	0x0298, r24
		 /*if there is remaining then start from it */
		 if(DesiredTickS % 256 != 0)
    17a4:	8e 81       	ldd	r24, Y+6	; 0x06
    17a6:	9f 81       	ldd	r25, Y+7	; 0x07
    17a8:	a8 85       	ldd	r26, Y+8	; 0x08
    17aa:	b9 85       	ldd	r27, Y+9	; 0x09
    17ac:	90 70       	andi	r25, 0x00	; 0
    17ae:	a0 70       	andi	r26, 0x00	; 0
    17b0:	b0 70       	andi	r27, 0x00	; 0
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	a1 05       	cpc	r26, r1
    17b6:	b1 05       	cpc	r27, r1
    17b8:	09 f4       	brne	.+2      	; 0x17bc <M_TIMER0_setDelayTimeMilliSec+0x130>
    17ba:	57 c0       	rjmp	.+174    	; 0x186a <M_TIMER0_setDelayTimeMilliSec+0x1de>
		 {
			 TCNT0 = 256 - No_of_Remaning ;
    17bc:	e2 e5       	ldi	r30, 0x52	; 82
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 91 98 02 	lds	r24, 0x0298
    17c4:	81 95       	neg	r24
    17c6:	80 83       	st	Z, r24
			 No_of_over_flows ++ ;
    17c8:	80 91 94 02 	lds	r24, 0x0294
    17cc:	90 91 95 02 	lds	r25, 0x0295
    17d0:	a0 91 96 02 	lds	r26, 0x0296
    17d4:	b0 91 97 02 	lds	r27, 0x0297
    17d8:	01 96       	adiw	r24, 0x01	; 1
    17da:	a1 1d       	adc	r26, r1
    17dc:	b1 1d       	adc	r27, r1
    17de:	80 93 94 02 	sts	0x0294, r24
    17e2:	90 93 95 02 	sts	0x0295, r25
    17e6:	a0 93 96 02 	sts	0x0296, r26
    17ea:	b0 93 97 02 	sts	0x0297, r27
    17ee:	3d c0       	rjmp	.+122    	; 0x186a <M_TIMER0_setDelayTimeMilliSec+0x1de>
		 }

		 //H_LCD_void_gotoXY(2,10);
		// H_LCD_void_sendIntNum(No_of_Remaning);
	}
	else if(Local_Mode == CTC_Mode)
    17f0:	8e a1       	ldd	r24, Y+38	; 0x26
    17f2:	81 30       	cpi	r24, 0x01	; 1
    17f4:	d1 f5       	brne	.+116    	; 0x186a <M_TIMER0_setDelayTimeMilliSec+0x1de>
	{
		CTC_Value = 255 ;
    17f6:	8f ef       	ldi	r24, 0xFF	; 255
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	a0 e0       	ldi	r26, 0x00	; 0
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	8a 83       	std	Y+2, r24	; 0x02
    1800:	9b 83       	std	Y+3, r25	; 0x03
    1802:	ac 83       	std	Y+4, r26	; 0x04
    1804:	bd 83       	std	Y+5, r27	; 0x05
		u8 NoOfCompMatch = 0;
    1806:	19 82       	std	Y+1, r1	; 0x01
    1808:	0b c0       	rjmp	.+22     	; 0x1820 <M_TIMER0_setDelayTimeMilliSec+0x194>

		while(DesiredTickS % CTC_Value)
		{
			CTC_Value -- ;
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	9b 81       	ldd	r25, Y+3	; 0x03
    180e:	ac 81       	ldd	r26, Y+4	; 0x04
    1810:	bd 81       	ldd	r27, Y+5	; 0x05
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	a1 09       	sbc	r26, r1
    1816:	b1 09       	sbc	r27, r1
    1818:	8a 83       	std	Y+2, r24	; 0x02
    181a:	9b 83       	std	Y+3, r25	; 0x03
    181c:	ac 83       	std	Y+4, r26	; 0x04
    181e:	bd 83       	std	Y+5, r27	; 0x05
	else if(Local_Mode == CTC_Mode)
	{
		CTC_Value = 255 ;
		u8 NoOfCompMatch = 0;

		while(DesiredTickS % CTC_Value)
    1820:	8e 81       	ldd	r24, Y+6	; 0x06
    1822:	9f 81       	ldd	r25, Y+7	; 0x07
    1824:	a8 85       	ldd	r26, Y+8	; 0x08
    1826:	b9 85       	ldd	r27, Y+9	; 0x09
    1828:	2a 81       	ldd	r18, Y+2	; 0x02
    182a:	3b 81       	ldd	r19, Y+3	; 0x03
    182c:	4c 81       	ldd	r20, Y+4	; 0x04
    182e:	5d 81       	ldd	r21, Y+5	; 0x05
    1830:	bc 01       	movw	r22, r24
    1832:	cd 01       	movw	r24, r26
    1834:	0e 94 b8 28 	call	0x5170	; 0x5170 <__udivmodsi4>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	00 97       	sbiw	r24, 0x00	; 0
    183e:	a1 05       	cpc	r26, r1
    1840:	b1 05       	cpc	r27, r1
    1842:	19 f7       	brne	.-58     	; 0x180a <M_TIMER0_setDelayTimeMilliSec+0x17e>
		{
			CTC_Value -- ;
		}
		NoOfCompMatch = DesiredTickS % CTC_Value ;
    1844:	8e 81       	ldd	r24, Y+6	; 0x06
    1846:	9f 81       	ldd	r25, Y+7	; 0x07
    1848:	a8 85       	ldd	r26, Y+8	; 0x08
    184a:	b9 85       	ldd	r27, Y+9	; 0x09
    184c:	2a 81       	ldd	r18, Y+2	; 0x02
    184e:	3b 81       	ldd	r19, Y+3	; 0x03
    1850:	4c 81       	ldd	r20, Y+4	; 0x04
    1852:	5d 81       	ldd	r21, Y+5	; 0x05
    1854:	bc 01       	movw	r22, r24
    1856:	cd 01       	movw	r24, r26
    1858:	0e 94 b8 28 	call	0x5170	; 0x5170 <__udivmodsi4>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	89 83       	std	Y+1, r24	; 0x01
		OCR0 = NoOfCompMatch;
    1862:	ec e5       	ldi	r30, 0x5C	; 92
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	80 83       	st	Z, r24
	}
	M_void_Timer_start(Local_Prescaller);
    186a:	8f a1       	ldd	r24, Y+39	; 0x27
    186c:	0e 94 89 0a 	call	0x1512	; 0x1512 <M_void_Timer_start>
}
    1870:	ac 96       	adiw	r28, 0x2c	; 44
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	cd bf       	out	0x3d, r28	; 61
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	08 95       	ret

00001882 <M_void_EnableTIMERInt>:

void M_void_EnableTIMERInt(Timer_Mode T_MODE)
{
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	00 d0       	rcall	.+0      	; 0x1888 <M_void_EnableTIMERInt+0x6>
    1888:	0f 92       	push	r0
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	89 83       	std	Y+1, r24	; 0x01
	switch(T_MODE)
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	3b 83       	std	Y+3, r19	; 0x03
    1898:	2a 83       	std	Y+2, r18	; 0x02
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	9b 81       	ldd	r25, Y+3	; 0x03
    189e:	00 97       	sbiw	r24, 0x00	; 0
    18a0:	31 f0       	breq	.+12     	; 0x18ae <M_void_EnableTIMERInt+0x2c>
    18a2:	2a 81       	ldd	r18, Y+2	; 0x02
    18a4:	3b 81       	ldd	r19, Y+3	; 0x03
    18a6:	21 30       	cpi	r18, 0x01	; 1
    18a8:	31 05       	cpc	r19, r1
    18aa:	81 f0       	breq	.+32     	; 0x18cc <M_void_EnableTIMERInt+0x4a>
    18ac:	1d c0       	rjmp	.+58     	; 0x18e8 <M_void_EnableTIMERInt+0x66>
	{
	case Normal_Mode:
		TIMSK &= NORMAL_MODE_INTERRUPT_CLEAR;
    18ae:	a9 e5       	ldi	r26, 0x59	; 89
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	e9 e5       	ldi	r30, 0x59	; 89
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	8e 7f       	andi	r24, 0xFE	; 254
    18ba:	8c 93       	st	X, r24
		TIMSK |= NORMAL_MODE_INTERRUPT_SET;
    18bc:	a9 e5       	ldi	r26, 0x59	; 89
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	e9 e5       	ldi	r30, 0x59	; 89
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	81 60       	ori	r24, 0x01	; 1
    18c8:	8c 93       	st	X, r24
    18ca:	0e c0       	rjmp	.+28     	; 0x18e8 <M_void_EnableTIMERInt+0x66>
		break;
	case CTC_Mode:
		TIMSK &= CTC_MODE_INTERRUPT_CLEAR;
    18cc:	a9 e5       	ldi	r26, 0x59	; 89
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	e9 e5       	ldi	r30, 0x59	; 89
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	8d 7f       	andi	r24, 0xFD	; 253
    18d8:	8c 93       	st	X, r24
		TIMSK |= CTC_MODE_INTERRUPT_SET;
    18da:	a9 e5       	ldi	r26, 0x59	; 89
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e9 e5       	ldi	r30, 0x59	; 89
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	82 60       	ori	r24, 0x02	; 2
    18e6:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <M_void_DisableTIMERInt>:
void M_void_DisableTIMERInt(Timer_Mode T_MODE)
{
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	00 d0       	rcall	.+0      	; 0x18fa <M_void_DisableTIMERInt+0x6>
    18fa:	0f 92       	push	r0
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	89 83       	std	Y+1, r24	; 0x01
	switch(T_MODE)
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	28 2f       	mov	r18, r24
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	3b 83       	std	Y+3, r19	; 0x03
    190a:	2a 83       	std	Y+2, r18	; 0x02
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	9b 81       	ldd	r25, Y+3	; 0x03
    1910:	00 97       	sbiw	r24, 0x00	; 0
    1912:	31 f0       	breq	.+12     	; 0x1920 <M_void_DisableTIMERInt+0x2c>
    1914:	2a 81       	ldd	r18, Y+2	; 0x02
    1916:	3b 81       	ldd	r19, Y+3	; 0x03
    1918:	21 30       	cpi	r18, 0x01	; 1
    191a:	31 05       	cpc	r19, r1
    191c:	79 f0       	breq	.+30     	; 0x193c <M_void_DisableTIMERInt+0x48>
    191e:	1b c0       	rjmp	.+54     	; 0x1956 <M_void_DisableTIMERInt+0x62>
	{
	case Normal_Mode:
		TIMSK &= NORMAL_MODE_INTERRUPT_CLEAR;
    1920:	a9 e5       	ldi	r26, 0x59	; 89
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e9 e5       	ldi	r30, 0x59	; 89
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	8e 7f       	andi	r24, 0xFE	; 254
    192c:	8c 93       	st	X, r24
		TIMSK |= NORMAL_MODE_INTERRUPT_RESET;
    192e:	a9 e5       	ldi	r26, 0x59	; 89
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	e9 e5       	ldi	r30, 0x59	; 89
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	8c 93       	st	X, r24
    193a:	0d c0       	rjmp	.+26     	; 0x1956 <M_void_DisableTIMERInt+0x62>
		break;
	case CTC_Mode:
		TIMSK &= CTC_MODE_INTERRUPT_CLEAR;
    193c:	a9 e5       	ldi	r26, 0x59	; 89
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	e9 e5       	ldi	r30, 0x59	; 89
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	8d 7f       	andi	r24, 0xFD	; 253
    1948:	8c 93       	st	X, r24
		TIMSK |= CTC_MODE_INTERRUPT_RESET;
    194a:	a9 e5       	ldi	r26, 0x59	; 89
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	e9 e5       	ldi	r30, 0x59	; 89
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	08 95       	ret

00001962 <M_void_setCallBack>:

void M_void_setCallBack(Timer_Mode T_MODE,void (*Copy_pvINTFunc)(void))
{
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	00 d0       	rcall	.+0      	; 0x1968 <M_void_setCallBack+0x6>
    1968:	00 d0       	rcall	.+0      	; 0x196a <M_void_setCallBack+0x8>
    196a:	0f 92       	push	r0
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
    1970:	89 83       	std	Y+1, r24	; 0x01
    1972:	7b 83       	std	Y+3, r23	; 0x03
    1974:	6a 83       	std	Y+2, r22	; 0x02
	//u8 Local_u8ErrorStatus=NO_ERROR;
//	u8 Local_u8counter;
	switch(T_MODE)
    1976:	89 81       	ldd	r24, Y+1	; 0x01
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	3d 83       	std	Y+5, r19	; 0x05
    197e:	2c 83       	std	Y+4, r18	; 0x04
    1980:	8c 81       	ldd	r24, Y+4	; 0x04
    1982:	9d 81       	ldd	r25, Y+5	; 0x05
    1984:	00 97       	sbiw	r24, 0x00	; 0
    1986:	31 f0       	breq	.+12     	; 0x1994 <M_void_setCallBack+0x32>
    1988:	2c 81       	ldd	r18, Y+4	; 0x04
    198a:	3d 81       	ldd	r19, Y+5	; 0x05
    198c:	21 30       	cpi	r18, 0x01	; 1
    198e:	31 05       	cpc	r19, r1
    1990:	61 f0       	breq	.+24     	; 0x19aa <M_void_setCallBack+0x48>
    1992:	15 c0       	rjmp	.+42     	; 0x19be <M_void_setCallBack+0x5c>
	{
	case Normal_Mode:
		if(Copy_pvINTFunc!= NULL)
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	9b 81       	ldd	r25, Y+3	; 0x03
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	89 f0       	breq	.+34     	; 0x19be <M_void_setCallBack+0x5c>
		{
			EXTI_ARRCALLBACK2FUNC[0]=Copy_pvINTFunc;
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	9b 81       	ldd	r25, Y+3	; 0x03
    19a0:	90 93 91 02 	sts	0x0291, r25
    19a4:	80 93 90 02 	sts	0x0290, r24
    19a8:	0a c0       	rjmp	.+20     	; 0x19be <M_void_setCallBack+0x5c>
		}
		break;
	case CTC_Mode:
		if(Copy_pvINTFunc!= NULL)
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	9b 81       	ldd	r25, Y+3	; 0x03
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	31 f0       	breq	.+12     	; 0x19be <M_void_setCallBack+0x5c>
		{
			EXTI_ARRCALLBACK2FUNC[1]=Copy_pvINTFunc;
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	9b 81       	ldd	r25, Y+3	; 0x03
    19b6:	90 93 93 02 	sts	0x0293, r25
    19ba:	80 93 92 02 	sts	0x0292, r24
		}
		break;
	default:
		break;
	}
}
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	cf 91       	pop	r28
    19ca:	df 91       	pop	r29
    19cc:	08 95       	ret

000019ce <M_TIMER0_PHASE_PWM_SET>:

void M_TIMER0_PHASE_PWM_SET(Comp_Output_Mode PWM_TYPE,u32 PWM_FREQ, u8 Duty_Cycle)
{
    19ce:	df 93       	push	r29
    19d0:	cf 93       	push	r28
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	28 97       	sbiw	r28, 0x08	; 8
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	de bf       	out	0x3e, r29	; 62
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	cd bf       	out	0x3d, r28	; 61
    19e2:	89 83       	std	Y+1, r24	; 0x01
    19e4:	4a 83       	std	Y+2, r20	; 0x02
    19e6:	5b 83       	std	Y+3, r21	; 0x03
    19e8:	6c 83       	std	Y+4, r22	; 0x04
    19ea:	7d 83       	std	Y+5, r23	; 0x05
    19ec:	2e 83       	std	Y+6, r18	; 0x06
	/*Set duty cycle to OCR0*/
	switch(PWM_TYPE)
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
    19f0:	28 2f       	mov	r18, r24
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	38 87       	std	Y+8, r19	; 0x08
    19f6:	2f 83       	std	Y+7, r18	; 0x07
    19f8:	8f 81       	ldd	r24, Y+7	; 0x07
    19fa:	98 85       	ldd	r25, Y+8	; 0x08
    19fc:	84 30       	cpi	r24, 0x04	; 4
    19fe:	91 05       	cpc	r25, r1
    1a00:	31 f0       	breq	.+12     	; 0x1a0e <M_TIMER0_PHASE_PWM_SET+0x40>
    1a02:	2f 81       	ldd	r18, Y+7	; 0x07
    1a04:	38 85       	ldd	r19, Y+8	; 0x08
    1a06:	25 30       	cpi	r18, 0x05	; 5
    1a08:	31 05       	cpc	r19, r1
    1a0a:	89 f0       	breq	.+34     	; 0x1a2e <M_TIMER0_PHASE_PWM_SET+0x60>
    1a0c:	1b c0       	rjmp	.+54     	; 0x1a44 <M_TIMER0_PHASE_PWM_SET+0x76>
	{
	case Inverting_Mode:
		OCR0=(255-(3*Duty_Cycle));
    1a0e:	ec e5       	ldi	r30, 0x5C	; 92
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	8e 81       	ldd	r24, Y+6	; 0x06
    1a14:	28 2f       	mov	r18, r24
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	c9 01       	movw	r24, r18
    1a1a:	88 0f       	add	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	82 0f       	add	r24, r18
    1a20:	93 1f       	adc	r25, r19
    1a22:	90 95       	com	r25
    1a24:	81 95       	neg	r24
    1a26:	9f 4f       	sbci	r25, 0xFF	; 255
    1a28:	81 50       	subi	r24, 0x01	; 1
    1a2a:	80 83       	st	Z, r24
    1a2c:	0b c0       	rjmp	.+22     	; 0x1a44 <M_TIMER0_PHASE_PWM_SET+0x76>
		break;
	case Non_Invering_Mode:
		OCR0=(3*Duty_Cycle);
    1a2e:	ec e5       	ldi	r30, 0x5C	; 92
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	8e 81       	ldd	r24, Y+6	; 0x06
    1a34:	28 2f       	mov	r18, r24
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	c9 01       	movw	r24, r18
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	82 0f       	add	r24, r18
    1a40:	93 1f       	adc	r25, r19
    1a42:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
	/*Select PRE_SCALLER according to the giver frequency*/
	if((PWM_FREQ>31000))
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	9b 81       	ldd	r25, Y+3	; 0x03
    1a48:	ac 81       	ldd	r26, Y+4	; 0x04
    1a4a:	bd 81       	ldd	r27, Y+5	; 0x05
    1a4c:	89 31       	cpi	r24, 0x19	; 25
    1a4e:	39 e7       	ldi	r19, 0x79	; 121
    1a50:	93 07       	cpc	r25, r19
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	a3 07       	cpc	r26, r19
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	b3 07       	cpc	r27, r19
    1a5a:	20 f0       	brcs	.+8      	; 0x1a64 <M_TIMER0_PHASE_PWM_SET+0x96>
	{
		M_void_Timer_start(NO_PRESCALLING);
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	0e 94 89 0a 	call	0x1512	; 0x1512 <M_void_Timer_start>
    1a62:	7b c0       	rjmp	.+246    	; 0x1b5a <M_TIMER0_PHASE_PWM_SET+0x18c>
	}
	else if((PWM_FREQ<=31000) && (PWM_FREQ>3900))
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	9b 81       	ldd	r25, Y+3	; 0x03
    1a68:	ac 81       	ldd	r26, Y+4	; 0x04
    1a6a:	bd 81       	ldd	r27, Y+5	; 0x05
    1a6c:	89 31       	cpi	r24, 0x19	; 25
    1a6e:	29 e7       	ldi	r18, 0x79	; 121
    1a70:	92 07       	cpc	r25, r18
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	a2 07       	cpc	r26, r18
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	b2 07       	cpc	r27, r18
    1a7a:	80 f4       	brcc	.+32     	; 0x1a9c <M_TIMER0_PHASE_PWM_SET+0xce>
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a80:	ac 81       	ldd	r26, Y+4	; 0x04
    1a82:	bd 81       	ldd	r27, Y+5	; 0x05
    1a84:	8d 33       	cpi	r24, 0x3D	; 61
    1a86:	3f e0       	ldi	r19, 0x0F	; 15
    1a88:	93 07       	cpc	r25, r19
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	a3 07       	cpc	r26, r19
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	b3 07       	cpc	r27, r19
    1a92:	20 f0       	brcs	.+8      	; 0x1a9c <M_TIMER0_PHASE_PWM_SET+0xce>
	{
		M_void_Timer_start(CLK_8);
    1a94:	82 e0       	ldi	r24, 0x02	; 2
    1a96:	0e 94 89 0a 	call	0x1512	; 0x1512 <M_void_Timer_start>
    1a9a:	5f c0       	rjmp	.+190    	; 0x1b5a <M_TIMER0_PHASE_PWM_SET+0x18c>

	}
	else if((PWM_FREQ <= 3900) && (PWM_FREQ > 400))
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa0:	ac 81       	ldd	r26, Y+4	; 0x04
    1aa2:	bd 81       	ldd	r27, Y+5	; 0x05
    1aa4:	8d 33       	cpi	r24, 0x3D	; 61
    1aa6:	2f e0       	ldi	r18, 0x0F	; 15
    1aa8:	92 07       	cpc	r25, r18
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	a2 07       	cpc	r26, r18
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	b2 07       	cpc	r27, r18
    1ab2:	80 f4       	brcc	.+32     	; 0x1ad4 <M_TIMER0_PHASE_PWM_SET+0x106>
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ab8:	ac 81       	ldd	r26, Y+4	; 0x04
    1aba:	bd 81       	ldd	r27, Y+5	; 0x05
    1abc:	81 39       	cpi	r24, 0x91	; 145
    1abe:	31 e0       	ldi	r19, 0x01	; 1
    1ac0:	93 07       	cpc	r25, r19
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	a3 07       	cpc	r26, r19
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	b3 07       	cpc	r27, r19
    1aca:	20 f0       	brcs	.+8      	; 0x1ad4 <M_TIMER0_PHASE_PWM_SET+0x106>
	{
		M_void_Timer_start(CLK_64);
    1acc:	83 e0       	ldi	r24, 0x03	; 3
    1ace:	0e 94 89 0a 	call	0x1512	; 0x1512 <M_void_Timer_start>
    1ad2:	43 c0       	rjmp	.+134    	; 0x1b5a <M_TIMER0_PHASE_PWM_SET+0x18c>

	}
	else if((PWM_FREQ <= 400) && (PWM_FREQ >100))
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ad8:	ac 81       	ldd	r26, Y+4	; 0x04
    1ada:	bd 81       	ldd	r27, Y+5	; 0x05
    1adc:	81 39       	cpi	r24, 0x91	; 145
    1ade:	21 e0       	ldi	r18, 0x01	; 1
    1ae0:	92 07       	cpc	r25, r18
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	a2 07       	cpc	r26, r18
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	b2 07       	cpc	r27, r18
    1aea:	68 f4       	brcc	.+26     	; 0x1b06 <M_TIMER0_PHASE_PWM_SET+0x138>
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	9b 81       	ldd	r25, Y+3	; 0x03
    1af0:	ac 81       	ldd	r26, Y+4	; 0x04
    1af2:	bd 81       	ldd	r27, Y+5	; 0x05
    1af4:	85 36       	cpi	r24, 0x65	; 101
    1af6:	91 05       	cpc	r25, r1
    1af8:	a1 05       	cpc	r26, r1
    1afa:	b1 05       	cpc	r27, r1
    1afc:	20 f0       	brcs	.+8      	; 0x1b06 <M_TIMER0_PHASE_PWM_SET+0x138>
	{
		M_void_Timer_start(CLK_256);
    1afe:	84 e0       	ldi	r24, 0x04	; 4
    1b00:	0e 94 89 0a 	call	0x1512	; 0x1512 <M_void_Timer_start>
    1b04:	2a c0       	rjmp	.+84     	; 0x1b5a <M_TIMER0_PHASE_PWM_SET+0x18c>

	}
	else if((PWM_FREQ <=100) &&(PWM_FREQ >=30))
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	9b 81       	ldd	r25, Y+3	; 0x03
    1b0a:	ac 81       	ldd	r26, Y+4	; 0x04
    1b0c:	bd 81       	ldd	r27, Y+5	; 0x05
    1b0e:	85 36       	cpi	r24, 0x65	; 101
    1b10:	91 05       	cpc	r25, r1
    1b12:	a1 05       	cpc	r26, r1
    1b14:	b1 05       	cpc	r27, r1
    1b16:	68 f4       	brcc	.+26     	; 0x1b32 <M_TIMER0_PHASE_PWM_SET+0x164>
    1b18:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b1c:	ac 81       	ldd	r26, Y+4	; 0x04
    1b1e:	bd 81       	ldd	r27, Y+5	; 0x05
    1b20:	8e 31       	cpi	r24, 0x1E	; 30
    1b22:	91 05       	cpc	r25, r1
    1b24:	a1 05       	cpc	r26, r1
    1b26:	b1 05       	cpc	r27, r1
    1b28:	20 f0       	brcs	.+8      	; 0x1b32 <M_TIMER0_PHASE_PWM_SET+0x164>
	{
		M_void_Timer_start(CLK_1024);
    1b2a:	85 e0       	ldi	r24, 0x05	; 5
    1b2c:	0e 94 89 0a 	call	0x1512	; 0x1512 <M_void_Timer_start>
    1b30:	14 c0       	rjmp	.+40     	; 0x1b5a <M_TIMER0_PHASE_PWM_SET+0x18c>
	}
	else if((PWM_FREQ<30) && (PWM_FREQ >=0))
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	9b 81       	ldd	r25, Y+3	; 0x03
    1b36:	ac 81       	ldd	r26, Y+4	; 0x04
    1b38:	bd 81       	ldd	r27, Y+5	; 0x05
    1b3a:	8e 31       	cpi	r24, 0x1E	; 30
    1b3c:	91 05       	cpc	r25, r1
    1b3e:	a1 05       	cpc	r26, r1
    1b40:	b1 05       	cpc	r27, r1
    1b42:	58 f4       	brcc	.+22     	; 0x1b5a <M_TIMER0_PHASE_PWM_SET+0x18c>
	{
		M_void_Timer_Init(Phase_Correct_PWM,Normal_Port);
    1b44:	83 e0       	ldi	r24, 0x03	; 3
    1b46:	60 e0       	ldi	r22, 0x00	; 0
    1b48:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <M_void_Timer_Init>
		M_void_Timer_start(No_CLK);
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	0e 94 89 0a 	call	0x1512	; 0x1512 <M_void_Timer_start>
		M_Dio_void_setPinValue(DIO_PB3,DIO_LOW);
    1b52:	87 e1       	ldi	r24, 0x17	; 23
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
	}

}
    1b5a:	28 96       	adiw	r28, 0x08	; 8
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	f8 94       	cli
    1b60:	de bf       	out	0x3e, r29	; 62
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	cd bf       	out	0x3d, r28	; 61
    1b66:	cf 91       	pop	r28
    1b68:	df 91       	pop	r29
    1b6a:	08 95       	ret

00001b6c <M_TIMER0_FAST_PWM_SET>:

void M_TIMER0_FAST_PWM_SET(Comp_Output_Mode PWM_TYPE,u32 PWM_FREQ,u8 Duty_Cycle)
{
    1b6c:	0f 93       	push	r16
    1b6e:	1f 93       	push	r17
    1b70:	df 93       	push	r29
    1b72:	cf 93       	push	r28
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
    1b78:	2c 97       	sbiw	r28, 0x0c	; 12
    1b7a:	0f b6       	in	r0, 0x3f	; 63
    1b7c:	f8 94       	cli
    1b7e:	de bf       	out	0x3e, r29	; 62
    1b80:	0f be       	out	0x3f, r0	; 63
    1b82:	cd bf       	out	0x3d, r28	; 61
    1b84:	89 83       	std	Y+1, r24	; 0x01
    1b86:	4a 83       	std	Y+2, r20	; 0x02
    1b88:	5b 83       	std	Y+3, r21	; 0x03
    1b8a:	6c 83       	std	Y+4, r22	; 0x04
    1b8c:	7d 83       	std	Y+5, r23	; 0x05
    1b8e:	2e 83       	std	Y+6, r18	; 0x06
	/*Set duty cycle to OCR0*/
	switch(PWM_TYPE)
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	28 2f       	mov	r18, r24
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	38 87       	std	Y+8, r19	; 0x08
    1b98:	2f 83       	std	Y+7, r18	; 0x07
    1b9a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b9c:	98 85       	ldd	r25, Y+8	; 0x08
    1b9e:	84 30       	cpi	r24, 0x04	; 4
    1ba0:	91 05       	cpc	r25, r1
    1ba2:	31 f0       	breq	.+12     	; 0x1bb0 <M_TIMER0_FAST_PWM_SET+0x44>
    1ba4:	af 81       	ldd	r26, Y+7	; 0x07
    1ba6:	b8 85       	ldd	r27, Y+8	; 0x08
    1ba8:	a5 30       	cpi	r26, 0x05	; 5
    1baa:	b1 05       	cpc	r27, r1
    1bac:	69 f1       	breq	.+90     	; 0x1c08 <M_TIMER0_FAST_PWM_SET+0x9c>
    1bae:	57 c0       	rjmp	.+174    	; 0x1c5e <M_TIMER0_FAST_PWM_SET+0xf2>
	{
	case Inverting_Mode:
		OCR0=(255-(f32)(2.56*Duty_Cycle));
    1bb0:	0c e5       	ldi	r16, 0x5C	; 92
    1bb2:	10 e0       	ldi	r17, 0x00	; 0
    1bb4:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb6:	88 2f       	mov	r24, r24
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	aa 27       	eor	r26, r26
    1bbc:	97 fd       	sbrc	r25, 7
    1bbe:	a0 95       	com	r26
    1bc0:	ba 2f       	mov	r27, r26
    1bc2:	bc 01       	movw	r22, r24
    1bc4:	cd 01       	movw	r24, r26
    1bc6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	bc 01       	movw	r22, r24
    1bd0:	cd 01       	movw	r24, r26
    1bd2:	2a e0       	ldi	r18, 0x0A	; 10
    1bd4:	37 ed       	ldi	r19, 0xD7	; 215
    1bd6:	43 e2       	ldi	r20, 0x23	; 35
    1bd8:	50 ec       	ldi	r21, 0xC0	; 192
    1bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	bc 01       	movw	r22, r24
    1be4:	cd 01       	movw	r24, r26
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	4f e7       	ldi	r20, 0x7F	; 127
    1bec:	53 e4       	ldi	r21, 0x43	; 67
    1bee:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	bc 01       	movw	r22, r24
    1bf8:	cd 01       	movw	r24, r26
    1bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	f8 01       	movw	r30, r16
    1c04:	80 83       	st	Z, r24
    1c06:	2b c0       	rjmp	.+86     	; 0x1c5e <M_TIMER0_FAST_PWM_SET+0xf2>
		break;
	case Non_Invering_Mode:
		OCR0=(((f32)2.56*Duty_Cycle)-1);
    1c08:	0c e5       	ldi	r16, 0x5C	; 92
    1c0a:	10 e0       	ldi	r17, 0x00	; 0
    1c0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c0e:	88 2f       	mov	r24, r24
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	aa 27       	eor	r26, r26
    1c14:	97 fd       	sbrc	r25, 7
    1c16:	a0 95       	com	r26
    1c18:	ba 2f       	mov	r27, r26
    1c1a:	bc 01       	movw	r22, r24
    1c1c:	cd 01       	movw	r24, r26
    1c1e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	bc 01       	movw	r22, r24
    1c28:	cd 01       	movw	r24, r26
    1c2a:	2a e0       	ldi	r18, 0x0A	; 10
    1c2c:	37 ed       	ldi	r19, 0xD7	; 215
    1c2e:	43 e2       	ldi	r20, 0x23	; 35
    1c30:	50 e4       	ldi	r21, 0x40	; 64
    1c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	bc 01       	movw	r22, r24
    1c3c:	cd 01       	movw	r24, r26
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	40 e8       	ldi	r20, 0x80	; 128
    1c44:	5f e3       	ldi	r21, 0x3F	; 63
    1c46:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	bc 01       	movw	r22, r24
    1c50:	cd 01       	movw	r24, r26
    1c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	d8 01       	movw	r26, r16
    1c5c:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
	/*Select PRE_SCALLER according to the giver frequency*/
	switch(PWM_FREQ)
    1c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c60:	9b 81       	ldd	r25, Y+3	; 0x03
    1c62:	ac 81       	ldd	r26, Y+4	; 0x04
    1c64:	bd 81       	ldd	r27, Y+5	; 0x05
    1c66:	89 87       	std	Y+9, r24	; 0x09
    1c68:	9a 87       	std	Y+10, r25	; 0x0a
    1c6a:	ab 87       	std	Y+11, r26	; 0x0b
    1c6c:	bc 87       	std	Y+12, r27	; 0x0c
    1c6e:	89 85       	ldd	r24, Y+9	; 0x09
    1c70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c72:	ab 85       	ldd	r26, Y+11	; 0x0b
    1c74:	bc 85       	ldd	r27, Y+12	; 0x0c
    1c76:	81 3d       	cpi	r24, 0xD1	; 209
    1c78:	e3 e0       	ldi	r30, 0x03	; 3
    1c7a:	9e 07       	cpc	r25, r30
    1c7c:	e0 e0       	ldi	r30, 0x00	; 0
    1c7e:	ae 07       	cpc	r26, r30
    1c80:	e0 e0       	ldi	r30, 0x00	; 0
    1c82:	be 07       	cpc	r27, r30
    1c84:	09 f4       	brne	.+2      	; 0x1c88 <M_TIMER0_FAST_PWM_SET+0x11c>
    1c86:	3f c0       	rjmp	.+126    	; 0x1d06 <M_TIMER0_FAST_PWM_SET+0x19a>
    1c88:	89 85       	ldd	r24, Y+9	; 0x09
    1c8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c8c:	ab 85       	ldd	r26, Y+11	; 0x0b
    1c8e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1c90:	82 3d       	cpi	r24, 0xD2	; 210
    1c92:	e3 e0       	ldi	r30, 0x03	; 3
    1c94:	9e 07       	cpc	r25, r30
    1c96:	e0 e0       	ldi	r30, 0x00	; 0
    1c98:	ae 07       	cpc	r26, r30
    1c9a:	e0 e0       	ldi	r30, 0x00	; 0
    1c9c:	be 07       	cpc	r27, r30
    1c9e:	98 f4       	brcc	.+38     	; 0x1cc6 <M_TIMER0_FAST_PWM_SET+0x15a>
    1ca0:	89 85       	ldd	r24, Y+9	; 0x09
    1ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca4:	ab 85       	ldd	r26, Y+11	; 0x0b
    1ca6:	bc 85       	ldd	r27, Y+12	; 0x0c
    1ca8:	8d 33       	cpi	r24, 0x3D	; 61
    1caa:	91 05       	cpc	r25, r1
    1cac:	a1 05       	cpc	r26, r1
    1cae:	b1 05       	cpc	r27, r1
    1cb0:	91 f1       	breq	.+100    	; 0x1d16 <M_TIMER0_FAST_PWM_SET+0x1aa>
    1cb2:	89 85       	ldd	r24, Y+9	; 0x09
    1cb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb6:	ab 85       	ldd	r26, Y+11	; 0x0b
    1cb8:	bc 85       	ldd	r27, Y+12	; 0x0c
    1cba:	84 3f       	cpi	r24, 0xF4	; 244
    1cbc:	91 05       	cpc	r25, r1
    1cbe:	a1 05       	cpc	r26, r1
    1cc0:	b1 05       	cpc	r27, r1
    1cc2:	29 f1       	breq	.+74     	; 0x1d0e <M_TIMER0_FAST_PWM_SET+0x1a2>
    1cc4:	2b c0       	rjmp	.+86     	; 0x1d1c <M_TIMER0_FAST_PWM_SET+0x1b0>
    1cc6:	89 85       	ldd	r24, Y+9	; 0x09
    1cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cca:	ab 85       	ldd	r26, Y+11	; 0x0b
    1ccc:	bc 85       	ldd	r27, Y+12	; 0x0c
    1cce:	85 38       	cpi	r24, 0x85	; 133
    1cd0:	ee e1       	ldi	r30, 0x1E	; 30
    1cd2:	9e 07       	cpc	r25, r30
    1cd4:	e0 e0       	ldi	r30, 0x00	; 0
    1cd6:	ae 07       	cpc	r26, r30
    1cd8:	e0 e0       	ldi	r30, 0x00	; 0
    1cda:	be 07       	cpc	r27, r30
    1cdc:	81 f0       	breq	.+32     	; 0x1cfe <M_TIMER0_FAST_PWM_SET+0x192>
    1cde:	89 85       	ldd	r24, Y+9	; 0x09
    1ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce2:	ab 85       	ldd	r26, Y+11	; 0x0b
    1ce4:	bc 85       	ldd	r27, Y+12	; 0x0c
    1ce6:	84 32       	cpi	r24, 0x24	; 36
    1ce8:	e4 ef       	ldi	r30, 0xF4	; 244
    1cea:	9e 07       	cpc	r25, r30
    1cec:	e0 e0       	ldi	r30, 0x00	; 0
    1cee:	ae 07       	cpc	r26, r30
    1cf0:	e0 e0       	ldi	r30, 0x00	; 0
    1cf2:	be 07       	cpc	r27, r30
    1cf4:	99 f4       	brne	.+38     	; 0x1d1c <M_TIMER0_FAST_PWM_SET+0x1b0>
	{
	case FAST_PWM_NO_PRESC:
		M_void_Timer_start(NO_PRESCALLING);
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	0e 94 89 0a 	call	0x1512	; 0x1512 <M_void_Timer_start>
    1cfc:	0f c0       	rjmp	.+30     	; 0x1d1c <M_TIMER0_FAST_PWM_SET+0x1b0>
		break;
	case FAST_PWM_8_CLK:
		M_void_Timer_start(CLK_8);
    1cfe:	82 e0       	ldi	r24, 0x02	; 2
    1d00:	0e 94 89 0a 	call	0x1512	; 0x1512 <M_void_Timer_start>
    1d04:	0b c0       	rjmp	.+22     	; 0x1d1c <M_TIMER0_FAST_PWM_SET+0x1b0>
		break;
	case FAST_PWM_64_CLK:
		M_void_Timer_start(CLK_64);
    1d06:	83 e0       	ldi	r24, 0x03	; 3
    1d08:	0e 94 89 0a 	call	0x1512	; 0x1512 <M_void_Timer_start>
    1d0c:	07 c0       	rjmp	.+14     	; 0x1d1c <M_TIMER0_FAST_PWM_SET+0x1b0>
		break;
	case FAST_PWM_256_CLK:
		M_void_Timer_start(CLK_256);
    1d0e:	84 e0       	ldi	r24, 0x04	; 4
    1d10:	0e 94 89 0a 	call	0x1512	; 0x1512 <M_void_Timer_start>
    1d14:	03 c0       	rjmp	.+6      	; 0x1d1c <M_TIMER0_FAST_PWM_SET+0x1b0>
		break;
	case FAST_PWM_1024_CLK:
		M_void_Timer_start(CLK_1024);
    1d16:	85 e0       	ldi	r24, 0x05	; 5
    1d18:	0e 94 89 0a 	call	0x1512	; 0x1512 <M_void_Timer_start>
		break;
	default:
		break;
	}
}
    1d1c:	2c 96       	adiw	r28, 0x0c	; 12
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	f8 94       	cli
    1d22:	de bf       	out	0x3e, r29	; 62
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	cd bf       	out	0x3d, r28	; 61
    1d28:	cf 91       	pop	r28
    1d2a:	df 91       	pop	r29
    1d2c:	1f 91       	pop	r17
    1d2e:	0f 91       	pop	r16
    1d30:	08 95       	ret

00001d32 <__vector_11>:



ISR(TIMER0_OVF_vect)
{
    1d32:	1f 92       	push	r1
    1d34:	0f 92       	push	r0
    1d36:	0f b6       	in	r0, 0x3f	; 63
    1d38:	0f 92       	push	r0
    1d3a:	11 24       	eor	r1, r1
    1d3c:	2f 93       	push	r18
    1d3e:	3f 93       	push	r19
    1d40:	4f 93       	push	r20
    1d42:	5f 93       	push	r21
    1d44:	6f 93       	push	r22
    1d46:	7f 93       	push	r23
    1d48:	8f 93       	push	r24
    1d4a:	9f 93       	push	r25
    1d4c:	af 93       	push	r26
    1d4e:	bf 93       	push	r27
    1d50:	ef 93       	push	r30
    1d52:	ff 93       	push	r31
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
	Global_No_of_overflows++;
    1d5c:	80 91 99 02 	lds	r24, 0x0299
    1d60:	90 91 9a 02 	lds	r25, 0x029A
    1d64:	a0 91 9b 02 	lds	r26, 0x029B
    1d68:	b0 91 9c 02 	lds	r27, 0x029C
    1d6c:	01 96       	adiw	r24, 0x01	; 1
    1d6e:	a1 1d       	adc	r26, r1
    1d70:	b1 1d       	adc	r27, r1
    1d72:	80 93 99 02 	sts	0x0299, r24
    1d76:	90 93 9a 02 	sts	0x029A, r25
    1d7a:	a0 93 9b 02 	sts	0x029B, r26
    1d7e:	b0 93 9c 02 	sts	0x029C, r27
	if(EXTI_ARRCALLBACK2FUNC[0]!=NULL)
    1d82:	80 91 90 02 	lds	r24, 0x0290
    1d86:	90 91 91 02 	lds	r25, 0x0291
    1d8a:	00 97       	sbiw	r24, 0x00	; 0
    1d8c:	41 f1       	breq	.+80     	; 0x1dde <__vector_11+0xac>
	{
		if(Global_No_of_overflows==No_of_over_flows)
    1d8e:	20 91 99 02 	lds	r18, 0x0299
    1d92:	30 91 9a 02 	lds	r19, 0x029A
    1d96:	40 91 9b 02 	lds	r20, 0x029B
    1d9a:	50 91 9c 02 	lds	r21, 0x029C
    1d9e:	80 91 94 02 	lds	r24, 0x0294
    1da2:	90 91 95 02 	lds	r25, 0x0295
    1da6:	a0 91 96 02 	lds	r26, 0x0296
    1daa:	b0 91 97 02 	lds	r27, 0x0297
    1dae:	28 17       	cp	r18, r24
    1db0:	39 07       	cpc	r19, r25
    1db2:	4a 07       	cpc	r20, r26
    1db4:	5b 07       	cpc	r21, r27
    1db6:	99 f4       	brne	.+38     	; 0x1dde <__vector_11+0xac>
		{
			EXTI_ARRCALLBACK2FUNC[0]();
    1db8:	e0 91 90 02 	lds	r30, 0x0290
    1dbc:	f0 91 91 02 	lds	r31, 0x0291
    1dc0:	09 95       	icall
			Global_No_of_overflows=0;
    1dc2:	10 92 99 02 	sts	0x0299, r1
    1dc6:	10 92 9a 02 	sts	0x029A, r1
    1dca:	10 92 9b 02 	sts	0x029B, r1
    1dce:	10 92 9c 02 	sts	0x029C, r1
			TCNT0 = 256 - No_of_Remaning;
    1dd2:	e2 e5       	ldi	r30, 0x52	; 82
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 91 98 02 	lds	r24, 0x0298
    1dda:	81 95       	neg	r24
    1ddc:	80 83       	st	Z, r24
		}
	}

}
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	ff 91       	pop	r31
    1de4:	ef 91       	pop	r30
    1de6:	bf 91       	pop	r27
    1de8:	af 91       	pop	r26
    1dea:	9f 91       	pop	r25
    1dec:	8f 91       	pop	r24
    1dee:	7f 91       	pop	r23
    1df0:	6f 91       	pop	r22
    1df2:	5f 91       	pop	r21
    1df4:	4f 91       	pop	r20
    1df6:	3f 91       	pop	r19
    1df8:	2f 91       	pop	r18
    1dfa:	0f 90       	pop	r0
    1dfc:	0f be       	out	0x3f, r0	; 63
    1dfe:	0f 90       	pop	r0
    1e00:	1f 90       	pop	r1
    1e02:	18 95       	reti

00001e04 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
    1e04:	1f 92       	push	r1
    1e06:	0f 92       	push	r0
    1e08:	0f b6       	in	r0, 0x3f	; 63
    1e0a:	0f 92       	push	r0
    1e0c:	11 24       	eor	r1, r1
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62

}
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	0f 90       	pop	r0
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	0f 90       	pop	r0
    1e20:	1f 90       	pop	r1
    1e22:	18 95       	reti

00001e24 <Port_Init>:
  parameters (in)  :
  parameters (out) : none
  Return Value     : void
******************************************/
void Port_Init(const Port_ConfigType * ConfigPtr)
{
    1e24:	df 93       	push	r29
    1e26:	cf 93       	push	r28
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62
    1e2c:	2b 97       	sbiw	r28, 0x0b	; 11
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	f8 94       	cli
    1e32:	de bf       	out	0x3e, r29	; 62
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	cd bf       	out	0x3d, r28	; 61
    1e38:	9d 83       	std	Y+5, r25	; 0x05
    1e3a:	8c 83       	std	Y+4, r24	; 0x04

	if(ConfigPtr == NULL)
    1e3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	09 f4       	brne	.+2      	; 0x1e46 <Port_Init+0x22>
    1e44:	51 c2       	rjmp	.+1186   	; 0x22e8 <Port_Init+0x4c4>
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<PORT_PINS_CONFIG_ARR_SIZE;i++)
    1e46:	1b 82       	std	Y+3, r1	; 0x03
    1e48:	4b c2       	rjmp	.+1174   	; 0x22e0 <Port_Init+0x4bc>
			{
				Local_pin =(ConfigPtr[i].Port_PinNumber)%10 ;
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	88 2f       	mov	r24, r24
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	9c 01       	movw	r18, r24
    1e52:	22 0f       	add	r18, r18
    1e54:	33 1f       	adc	r19, r19
    1e56:	22 0f       	add	r18, r18
    1e58:	33 1f       	adc	r19, r19
    1e5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e5e:	fc 01       	movw	r30, r24
    1e60:	e2 0f       	add	r30, r18
    1e62:	f3 1f       	adc	r31, r19
    1e64:	80 81       	ld	r24, Z
    1e66:	9a e0       	ldi	r25, 0x0A	; 10
    1e68:	69 2f       	mov	r22, r25
    1e6a:	0e 94 98 28 	call	0x5130	; 0x5130 <__udivmodqi4>
    1e6e:	89 2f       	mov	r24, r25
    1e70:	8a 83       	std	Y+2, r24	; 0x02
				Local_port =(ConfigPtr[i].Port_PinNumber)/10 ;
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	88 2f       	mov	r24, r24
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	9c 01       	movw	r18, r24
    1e7a:	22 0f       	add	r18, r18
    1e7c:	33 1f       	adc	r19, r19
    1e7e:	22 0f       	add	r18, r18
    1e80:	33 1f       	adc	r19, r19
    1e82:	8c 81       	ldd	r24, Y+4	; 0x04
    1e84:	9d 81       	ldd	r25, Y+5	; 0x05
    1e86:	fc 01       	movw	r30, r24
    1e88:	e2 0f       	add	r30, r18
    1e8a:	f3 1f       	adc	r31, r19
    1e8c:	80 81       	ld	r24, Z
    1e8e:	9a e0       	ldi	r25, 0x0A	; 10
    1e90:	69 2f       	mov	r22, r25
    1e92:	0e 94 98 28 	call	0x5130	; 0x5130 <__udivmodqi4>
    1e96:	89 83       	std	Y+1, r24	; 0x01
				// step1 : set direction
				if(ConfigPtr[i].Port_PinDirection == PORT_PINDIR_INPUT || ConfigPtr[i].Port_PinDirection ==PORT_PINDIR_OUTPUT)
    1e98:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9a:	88 2f       	mov	r24, r24
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	9c 01       	movw	r18, r24
    1ea0:	22 0f       	add	r18, r18
    1ea2:	33 1f       	adc	r19, r19
    1ea4:	22 0f       	add	r18, r18
    1ea6:	33 1f       	adc	r19, r19
    1ea8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eaa:	9d 81       	ldd	r25, Y+5	; 0x05
    1eac:	fc 01       	movw	r30, r24
    1eae:	e2 0f       	add	r30, r18
    1eb0:	f3 1f       	adc	r31, r19
    1eb2:	82 81       	ldd	r24, Z+2	; 0x02
    1eb4:	88 23       	and	r24, r24
    1eb6:	89 f0       	breq	.+34     	; 0x1eda <Port_Init+0xb6>
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	88 2f       	mov	r24, r24
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	9c 01       	movw	r18, r24
    1ec0:	22 0f       	add	r18, r18
    1ec2:	33 1f       	adc	r19, r19
    1ec4:	22 0f       	add	r18, r18
    1ec6:	33 1f       	adc	r19, r19
    1ec8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eca:	9d 81       	ldd	r25, Y+5	; 0x05
    1ecc:	fc 01       	movw	r30, r24
    1ece:	e2 0f       	add	r30, r18
    1ed0:	f3 1f       	adc	r31, r19
    1ed2:	82 81       	ldd	r24, Z+2	; 0x02
    1ed4:	81 30       	cpi	r24, 0x01	; 1
    1ed6:	09 f0       	breq	.+2      	; 0x1eda <Port_Init+0xb6>
    1ed8:	00 c2       	rjmp	.+1024   	; 0x22da <Port_Init+0x4b6>
				{
					switch(Local_port)
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	28 2f       	mov	r18, r24
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	3b 87       	std	Y+11, r19	; 0x0b
    1ee2:	2a 87       	std	Y+10, r18	; 0x0a
    1ee4:	6a 85       	ldd	r22, Y+10	; 0x0a
    1ee6:	7b 85       	ldd	r23, Y+11	; 0x0b
    1ee8:	62 30       	cpi	r22, 0x02	; 2
    1eea:	71 05       	cpc	r23, r1
    1eec:	d1 f1       	breq	.+116    	; 0x1f62 <Port_Init+0x13e>
    1eee:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ef0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ef2:	83 30       	cpi	r24, 0x03	; 3
    1ef4:	91 05       	cpc	r25, r1
    1ef6:	34 f4       	brge	.+12     	; 0x1f04 <Port_Init+0xe0>
    1ef8:	2a 85       	ldd	r18, Y+10	; 0x0a
    1efa:	3b 85       	ldd	r19, Y+11	; 0x0b
    1efc:	21 30       	cpi	r18, 0x01	; 1
    1efe:	31 05       	cpc	r19, r1
    1f00:	71 f0       	breq	.+28     	; 0x1f1e <Port_Init+0xfa>
    1f02:	94 c0       	rjmp	.+296    	; 0x202c <Port_Init+0x208>
    1f04:	6a 85       	ldd	r22, Y+10	; 0x0a
    1f06:	7b 85       	ldd	r23, Y+11	; 0x0b
    1f08:	63 30       	cpi	r22, 0x03	; 3
    1f0a:	71 05       	cpc	r23, r1
    1f0c:	09 f4       	brne	.+2      	; 0x1f10 <Port_Init+0xec>
    1f0e:	4b c0       	rjmp	.+150    	; 0x1fa6 <Port_Init+0x182>
    1f10:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f12:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f14:	84 30       	cpi	r24, 0x04	; 4
    1f16:	91 05       	cpc	r25, r1
    1f18:	09 f4       	brne	.+2      	; 0x1f1c <Port_Init+0xf8>
    1f1a:	67 c0       	rjmp	.+206    	; 0x1fea <Port_Init+0x1c6>
    1f1c:	87 c0       	rjmp	.+270    	; 0x202c <Port_Init+0x208>
					{
					case PORT_PORTA:DDRA_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1f1e:	aa e3       	ldi	r26, 0x3A	; 58
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	ea e3       	ldi	r30, 0x3A	; 58
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	40 81       	ld	r20, Z
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	88 2f       	mov	r24, r24
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	9c 01       	movw	r18, r24
    1f30:	22 0f       	add	r18, r18
    1f32:	33 1f       	adc	r19, r19
    1f34:	22 0f       	add	r18, r18
    1f36:	33 1f       	adc	r19, r19
    1f38:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	e2 0f       	add	r30, r18
    1f40:	f3 1f       	adc	r31, r19
    1f42:	82 81       	ldd	r24, Z+2	; 0x02
    1f44:	28 2f       	mov	r18, r24
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	88 2f       	mov	r24, r24
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	b9 01       	movw	r22, r18
    1f50:	02 c0       	rjmp	.+4      	; 0x1f56 <Port_Init+0x132>
    1f52:	66 0f       	add	r22, r22
    1f54:	77 1f       	adc	r23, r23
    1f56:	8a 95       	dec	r24
    1f58:	e2 f7       	brpl	.-8      	; 0x1f52 <Port_Init+0x12e>
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	84 2b       	or	r24, r20
    1f5e:	8c 93       	st	X, r24
    1f60:	65 c0       	rjmp	.+202    	; 0x202c <Port_Init+0x208>
					case PORT_PORTB:DDRB_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1f62:	a7 e3       	ldi	r26, 0x37	; 55
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	e7 e3       	ldi	r30, 0x37	; 55
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	40 81       	ld	r20, Z
    1f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6e:	88 2f       	mov	r24, r24
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	9c 01       	movw	r18, r24
    1f74:	22 0f       	add	r18, r18
    1f76:	33 1f       	adc	r19, r19
    1f78:	22 0f       	add	r18, r18
    1f7a:	33 1f       	adc	r19, r19
    1f7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f80:	fc 01       	movw	r30, r24
    1f82:	e2 0f       	add	r30, r18
    1f84:	f3 1f       	adc	r31, r19
    1f86:	82 81       	ldd	r24, Z+2	; 0x02
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	88 2f       	mov	r24, r24
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	b9 01       	movw	r22, r18
    1f94:	02 c0       	rjmp	.+4      	; 0x1f9a <Port_Init+0x176>
    1f96:	66 0f       	add	r22, r22
    1f98:	77 1f       	adc	r23, r23
    1f9a:	8a 95       	dec	r24
    1f9c:	e2 f7       	brpl	.-8      	; 0x1f96 <Port_Init+0x172>
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	84 2b       	or	r24, r20
    1fa2:	8c 93       	st	X, r24
    1fa4:	43 c0       	rjmp	.+134    	; 0x202c <Port_Init+0x208>
					case PORT_PORTC:DDRC_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1fa6:	a4 e3       	ldi	r26, 0x34	; 52
    1fa8:	b0 e0       	ldi	r27, 0x00	; 0
    1faa:	e4 e3       	ldi	r30, 0x34	; 52
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	40 81       	ld	r20, Z
    1fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb2:	88 2f       	mov	r24, r24
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	9c 01       	movw	r18, r24
    1fb8:	22 0f       	add	r18, r18
    1fba:	33 1f       	adc	r19, r19
    1fbc:	22 0f       	add	r18, r18
    1fbe:	33 1f       	adc	r19, r19
    1fc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	e2 0f       	add	r30, r18
    1fc8:	f3 1f       	adc	r31, r19
    1fca:	82 81       	ldd	r24, Z+2	; 0x02
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd2:	88 2f       	mov	r24, r24
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	b9 01       	movw	r22, r18
    1fd8:	02 c0       	rjmp	.+4      	; 0x1fde <Port_Init+0x1ba>
    1fda:	66 0f       	add	r22, r22
    1fdc:	77 1f       	adc	r23, r23
    1fde:	8a 95       	dec	r24
    1fe0:	e2 f7       	brpl	.-8      	; 0x1fda <Port_Init+0x1b6>
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	84 2b       	or	r24, r20
    1fe6:	8c 93       	st	X, r24
    1fe8:	21 c0       	rjmp	.+66     	; 0x202c <Port_Init+0x208>
					case PORT_PORTD:DDRD_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1fea:	a1 e3       	ldi	r26, 0x31	; 49
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	e1 e3       	ldi	r30, 0x31	; 49
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	40 81       	ld	r20, Z
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	88 2f       	mov	r24, r24
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	9c 01       	movw	r18, r24
    1ffc:	22 0f       	add	r18, r18
    1ffe:	33 1f       	adc	r19, r19
    2000:	22 0f       	add	r18, r18
    2002:	33 1f       	adc	r19, r19
    2004:	8c 81       	ldd	r24, Y+4	; 0x04
    2006:	9d 81       	ldd	r25, Y+5	; 0x05
    2008:	fc 01       	movw	r30, r24
    200a:	e2 0f       	add	r30, r18
    200c:	f3 1f       	adc	r31, r19
    200e:	82 81       	ldd	r24, Z+2	; 0x02
    2010:	28 2f       	mov	r18, r24
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	8a 81       	ldd	r24, Y+2	; 0x02
    2016:	88 2f       	mov	r24, r24
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	b9 01       	movw	r22, r18
    201c:	02 c0       	rjmp	.+4      	; 0x2022 <Port_Init+0x1fe>
    201e:	66 0f       	add	r22, r22
    2020:	77 1f       	adc	r23, r23
    2022:	8a 95       	dec	r24
    2024:	e2 f7       	brpl	.-8      	; 0x201e <Port_Init+0x1fa>
    2026:	cb 01       	movw	r24, r22
    2028:	84 2b       	or	r24, r20
    202a:	8c 93       	st	X, r24

					}
					// step 2 : config initial pin value
					if(ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_LOW || ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_HIGH)
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	88 2f       	mov	r24, r24
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	9c 01       	movw	r18, r24
    2034:	22 0f       	add	r18, r18
    2036:	33 1f       	adc	r19, r19
    2038:	22 0f       	add	r18, r18
    203a:	33 1f       	adc	r19, r19
    203c:	8c 81       	ldd	r24, Y+4	; 0x04
    203e:	9d 81       	ldd	r25, Y+5	; 0x05
    2040:	fc 01       	movw	r30, r24
    2042:	e2 0f       	add	r30, r18
    2044:	f3 1f       	adc	r31, r19
    2046:	81 81       	ldd	r24, Z+1	; 0x01
    2048:	88 23       	and	r24, r24
    204a:	89 f0       	breq	.+34     	; 0x206e <Port_Init+0x24a>
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	88 2f       	mov	r24, r24
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	9c 01       	movw	r18, r24
    2054:	22 0f       	add	r18, r18
    2056:	33 1f       	adc	r19, r19
    2058:	22 0f       	add	r18, r18
    205a:	33 1f       	adc	r19, r19
    205c:	8c 81       	ldd	r24, Y+4	; 0x04
    205e:	9d 81       	ldd	r25, Y+5	; 0x05
    2060:	fc 01       	movw	r30, r24
    2062:	e2 0f       	add	r30, r18
    2064:	f3 1f       	adc	r31, r19
    2066:	81 81       	ldd	r24, Z+1	; 0x01
    2068:	81 30       	cpi	r24, 0x01	; 1
    206a:	09 f0       	breq	.+2      	; 0x206e <Port_Init+0x24a>
    206c:	36 c1       	rjmp	.+620    	; 0x22da <Port_Init+0x4b6>
					{
						switch(Local_port)
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	28 2f       	mov	r18, r24
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	39 87       	std	Y+9, r19	; 0x09
    2076:	28 87       	std	Y+8, r18	; 0x08
    2078:	68 85       	ldd	r22, Y+8	; 0x08
    207a:	79 85       	ldd	r23, Y+9	; 0x09
    207c:	62 30       	cpi	r22, 0x02	; 2
    207e:	71 05       	cpc	r23, r1
    2080:	d1 f1       	breq	.+116    	; 0x20f6 <Port_Init+0x2d2>
    2082:	88 85       	ldd	r24, Y+8	; 0x08
    2084:	99 85       	ldd	r25, Y+9	; 0x09
    2086:	83 30       	cpi	r24, 0x03	; 3
    2088:	91 05       	cpc	r25, r1
    208a:	34 f4       	brge	.+12     	; 0x2098 <Port_Init+0x274>
    208c:	28 85       	ldd	r18, Y+8	; 0x08
    208e:	39 85       	ldd	r19, Y+9	; 0x09
    2090:	21 30       	cpi	r18, 0x01	; 1
    2092:	31 05       	cpc	r19, r1
    2094:	71 f0       	breq	.+28     	; 0x20b2 <Port_Init+0x28e>
    2096:	94 c0       	rjmp	.+296    	; 0x21c0 <Port_Init+0x39c>
    2098:	68 85       	ldd	r22, Y+8	; 0x08
    209a:	79 85       	ldd	r23, Y+9	; 0x09
    209c:	63 30       	cpi	r22, 0x03	; 3
    209e:	71 05       	cpc	r23, r1
    20a0:	09 f4       	brne	.+2      	; 0x20a4 <Port_Init+0x280>
    20a2:	4b c0       	rjmp	.+150    	; 0x213a <Port_Init+0x316>
    20a4:	88 85       	ldd	r24, Y+8	; 0x08
    20a6:	99 85       	ldd	r25, Y+9	; 0x09
    20a8:	84 30       	cpi	r24, 0x04	; 4
    20aa:	91 05       	cpc	r25, r1
    20ac:	09 f4       	brne	.+2      	; 0x20b0 <Port_Init+0x28c>
    20ae:	67 c0       	rjmp	.+206    	; 0x217e <Port_Init+0x35a>
    20b0:	87 c0       	rjmp	.+270    	; 0x21c0 <Port_Init+0x39c>
						{
						case PORT_PORTA:  PORTA_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    20b2:	ab e3       	ldi	r26, 0x3B	; 59
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	eb e3       	ldi	r30, 0x3B	; 59
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	40 81       	ld	r20, Z
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	88 2f       	mov	r24, r24
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	9c 01       	movw	r18, r24
    20c4:	22 0f       	add	r18, r18
    20c6:	33 1f       	adc	r19, r19
    20c8:	22 0f       	add	r18, r18
    20ca:	33 1f       	adc	r19, r19
    20cc:	8c 81       	ldd	r24, Y+4	; 0x04
    20ce:	9d 81       	ldd	r25, Y+5	; 0x05
    20d0:	fc 01       	movw	r30, r24
    20d2:	e2 0f       	add	r30, r18
    20d4:	f3 1f       	adc	r31, r19
    20d6:	81 81       	ldd	r24, Z+1	; 0x01
    20d8:	28 2f       	mov	r18, r24
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
    20de:	88 2f       	mov	r24, r24
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	b9 01       	movw	r22, r18
    20e4:	02 c0       	rjmp	.+4      	; 0x20ea <Port_Init+0x2c6>
    20e6:	66 0f       	add	r22, r22
    20e8:	77 1f       	adc	r23, r23
    20ea:	8a 95       	dec	r24
    20ec:	e2 f7       	brpl	.-8      	; 0x20e6 <Port_Init+0x2c2>
    20ee:	cb 01       	movw	r24, r22
    20f0:	84 2b       	or	r24, r20
    20f2:	8c 93       	st	X, r24
    20f4:	65 c0       	rjmp	.+202    	; 0x21c0 <Port_Init+0x39c>
						case PORT_PORTB:  PORTB_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    20f6:	a8 e3       	ldi	r26, 0x38	; 56
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	e8 e3       	ldi	r30, 0x38	; 56
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	40 81       	ld	r20, Z
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	88 2f       	mov	r24, r24
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	9c 01       	movw	r18, r24
    2108:	22 0f       	add	r18, r18
    210a:	33 1f       	adc	r19, r19
    210c:	22 0f       	add	r18, r18
    210e:	33 1f       	adc	r19, r19
    2110:	8c 81       	ldd	r24, Y+4	; 0x04
    2112:	9d 81       	ldd	r25, Y+5	; 0x05
    2114:	fc 01       	movw	r30, r24
    2116:	e2 0f       	add	r30, r18
    2118:	f3 1f       	adc	r31, r19
    211a:	81 81       	ldd	r24, Z+1	; 0x01
    211c:	28 2f       	mov	r18, r24
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	8a 81       	ldd	r24, Y+2	; 0x02
    2122:	88 2f       	mov	r24, r24
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	b9 01       	movw	r22, r18
    2128:	02 c0       	rjmp	.+4      	; 0x212e <Port_Init+0x30a>
    212a:	66 0f       	add	r22, r22
    212c:	77 1f       	adc	r23, r23
    212e:	8a 95       	dec	r24
    2130:	e2 f7       	brpl	.-8      	; 0x212a <Port_Init+0x306>
    2132:	cb 01       	movw	r24, r22
    2134:	84 2b       	or	r24, r20
    2136:	8c 93       	st	X, r24
    2138:	43 c0       	rjmp	.+134    	; 0x21c0 <Port_Init+0x39c>
						case PORT_PORTC:  PORTC_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    213a:	a5 e3       	ldi	r26, 0x35	; 53
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	e5 e3       	ldi	r30, 0x35	; 53
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	40 81       	ld	r20, Z
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	88 2f       	mov	r24, r24
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	9c 01       	movw	r18, r24
    214c:	22 0f       	add	r18, r18
    214e:	33 1f       	adc	r19, r19
    2150:	22 0f       	add	r18, r18
    2152:	33 1f       	adc	r19, r19
    2154:	8c 81       	ldd	r24, Y+4	; 0x04
    2156:	9d 81       	ldd	r25, Y+5	; 0x05
    2158:	fc 01       	movw	r30, r24
    215a:	e2 0f       	add	r30, r18
    215c:	f3 1f       	adc	r31, r19
    215e:	81 81       	ldd	r24, Z+1	; 0x01
    2160:	28 2f       	mov	r18, r24
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	8a 81       	ldd	r24, Y+2	; 0x02
    2166:	88 2f       	mov	r24, r24
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	b9 01       	movw	r22, r18
    216c:	02 c0       	rjmp	.+4      	; 0x2172 <Port_Init+0x34e>
    216e:	66 0f       	add	r22, r22
    2170:	77 1f       	adc	r23, r23
    2172:	8a 95       	dec	r24
    2174:	e2 f7       	brpl	.-8      	; 0x216e <Port_Init+0x34a>
    2176:	cb 01       	movw	r24, r22
    2178:	84 2b       	or	r24, r20
    217a:	8c 93       	st	X, r24
    217c:	21 c0       	rjmp	.+66     	; 0x21c0 <Port_Init+0x39c>
						case PORT_PORTD:  PORTD_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    217e:	a2 e3       	ldi	r26, 0x32	; 50
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e2 e3       	ldi	r30, 0x32	; 50
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	40 81       	ld	r20, Z
    2188:	8b 81       	ldd	r24, Y+3	; 0x03
    218a:	88 2f       	mov	r24, r24
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	9c 01       	movw	r18, r24
    2190:	22 0f       	add	r18, r18
    2192:	33 1f       	adc	r19, r19
    2194:	22 0f       	add	r18, r18
    2196:	33 1f       	adc	r19, r19
    2198:	8c 81       	ldd	r24, Y+4	; 0x04
    219a:	9d 81       	ldd	r25, Y+5	; 0x05
    219c:	fc 01       	movw	r30, r24
    219e:	e2 0f       	add	r30, r18
    21a0:	f3 1f       	adc	r31, r19
    21a2:	81 81       	ldd	r24, Z+1	; 0x01
    21a4:	28 2f       	mov	r18, r24
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	88 2f       	mov	r24, r24
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	b9 01       	movw	r22, r18
    21b0:	02 c0       	rjmp	.+4      	; 0x21b6 <Port_Init+0x392>
    21b2:	66 0f       	add	r22, r22
    21b4:	77 1f       	adc	r23, r23
    21b6:	8a 95       	dec	r24
    21b8:	e2 f7       	brpl	.-8      	; 0x21b2 <Port_Init+0x38e>
    21ba:	cb 01       	movw	r24, r22
    21bc:	84 2b       	or	r24, r20
    21be:	8c 93       	st	X, r24

						}
						// step 3 : config Pin Internal Attach
						if(ConfigPtr[i].Port_PinDirection==PORT_PINDIR_OUTPUT && ConfigPtr[i].Port_PinInternalAttach == PORT_PIN_IN_ATTATCH_PULLUP)
    21c0:	8b 81       	ldd	r24, Y+3	; 0x03
    21c2:	88 2f       	mov	r24, r24
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	9c 01       	movw	r18, r24
    21c8:	22 0f       	add	r18, r18
    21ca:	33 1f       	adc	r19, r19
    21cc:	22 0f       	add	r18, r18
    21ce:	33 1f       	adc	r19, r19
    21d0:	8c 81       	ldd	r24, Y+4	; 0x04
    21d2:	9d 81       	ldd	r25, Y+5	; 0x05
    21d4:	fc 01       	movw	r30, r24
    21d6:	e2 0f       	add	r30, r18
    21d8:	f3 1f       	adc	r31, r19
    21da:	82 81       	ldd	r24, Z+2	; 0x02
    21dc:	81 30       	cpi	r24, 0x01	; 1
    21de:	09 f0       	breq	.+2      	; 0x21e2 <Port_Init+0x3be>
    21e0:	7c c0       	rjmp	.+248    	; 0x22da <Port_Init+0x4b6>
    21e2:	8b 81       	ldd	r24, Y+3	; 0x03
    21e4:	88 2f       	mov	r24, r24
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	9c 01       	movw	r18, r24
    21ea:	22 0f       	add	r18, r18
    21ec:	33 1f       	adc	r19, r19
    21ee:	22 0f       	add	r18, r18
    21f0:	33 1f       	adc	r19, r19
    21f2:	8c 81       	ldd	r24, Y+4	; 0x04
    21f4:	9d 81       	ldd	r25, Y+5	; 0x05
    21f6:	fc 01       	movw	r30, r24
    21f8:	e2 0f       	add	r30, r18
    21fa:	f3 1f       	adc	r31, r19
    21fc:	83 81       	ldd	r24, Z+3	; 0x03
    21fe:	88 23       	and	r24, r24
    2200:	09 f0       	breq	.+2      	; 0x2204 <Port_Init+0x3e0>
    2202:	6b c0       	rjmp	.+214    	; 0x22da <Port_Init+0x4b6>
						{
							switch(Local_port)
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	28 2f       	mov	r18, r24
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	3f 83       	std	Y+7, r19	; 0x07
    220c:	2e 83       	std	Y+6, r18	; 0x06
    220e:	6e 81       	ldd	r22, Y+6	; 0x06
    2210:	7f 81       	ldd	r23, Y+7	; 0x07
    2212:	62 30       	cpi	r22, 0x02	; 2
    2214:	71 05       	cpc	r23, r1
    2216:	49 f1       	breq	.+82     	; 0x226a <Port_Init+0x446>
    2218:	8e 81       	ldd	r24, Y+6	; 0x06
    221a:	9f 81       	ldd	r25, Y+7	; 0x07
    221c:	83 30       	cpi	r24, 0x03	; 3
    221e:	91 05       	cpc	r25, r1
    2220:	34 f4       	brge	.+12     	; 0x222e <Port_Init+0x40a>
    2222:	2e 81       	ldd	r18, Y+6	; 0x06
    2224:	3f 81       	ldd	r19, Y+7	; 0x07
    2226:	21 30       	cpi	r18, 0x01	; 1
    2228:	31 05       	cpc	r19, r1
    222a:	61 f0       	breq	.+24     	; 0x2244 <Port_Init+0x420>
    222c:	56 c0       	rjmp	.+172    	; 0x22da <Port_Init+0x4b6>
    222e:	6e 81       	ldd	r22, Y+6	; 0x06
    2230:	7f 81       	ldd	r23, Y+7	; 0x07
    2232:	63 30       	cpi	r22, 0x03	; 3
    2234:	71 05       	cpc	r23, r1
    2236:	61 f1       	breq	.+88     	; 0x2290 <Port_Init+0x46c>
    2238:	8e 81       	ldd	r24, Y+6	; 0x06
    223a:	9f 81       	ldd	r25, Y+7	; 0x07
    223c:	84 30       	cpi	r24, 0x04	; 4
    223e:	91 05       	cpc	r25, r1
    2240:	d1 f1       	breq	.+116    	; 0x22b6 <Port_Init+0x492>
    2242:	4b c0       	rjmp	.+150    	; 0x22da <Port_Init+0x4b6>
							{
							case PORT_PORTA:PORTA_REG |= (u8)(1<< Local_pin);break;
    2244:	ab e3       	ldi	r26, 0x3B	; 59
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	eb e3       	ldi	r30, 0x3B	; 59
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	40 81       	ld	r20, Z
    224e:	8a 81       	ldd	r24, Y+2	; 0x02
    2250:	28 2f       	mov	r18, r24
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	02 2e       	mov	r0, r18
    225a:	02 c0       	rjmp	.+4      	; 0x2260 <Port_Init+0x43c>
    225c:	88 0f       	add	r24, r24
    225e:	99 1f       	adc	r25, r25
    2260:	0a 94       	dec	r0
    2262:	e2 f7       	brpl	.-8      	; 0x225c <Port_Init+0x438>
    2264:	84 2b       	or	r24, r20
    2266:	8c 93       	st	X, r24
    2268:	38 c0       	rjmp	.+112    	; 0x22da <Port_Init+0x4b6>
							case PORT_PORTB:PORTB_REG |= (u8)(1<< Local_pin);break;
    226a:	a8 e3       	ldi	r26, 0x38	; 56
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	e8 e3       	ldi	r30, 0x38	; 56
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	40 81       	ld	r20, Z
    2274:	8a 81       	ldd	r24, Y+2	; 0x02
    2276:	28 2f       	mov	r18, r24
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	02 2e       	mov	r0, r18
    2280:	02 c0       	rjmp	.+4      	; 0x2286 <Port_Init+0x462>
    2282:	88 0f       	add	r24, r24
    2284:	99 1f       	adc	r25, r25
    2286:	0a 94       	dec	r0
    2288:	e2 f7       	brpl	.-8      	; 0x2282 <Port_Init+0x45e>
    228a:	84 2b       	or	r24, r20
    228c:	8c 93       	st	X, r24
    228e:	25 c0       	rjmp	.+74     	; 0x22da <Port_Init+0x4b6>
							case PORT_PORTC:PORTC_REG |= (u8)(1<< Local_pin);break;
    2290:	a5 e3       	ldi	r26, 0x35	; 53
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	e5 e3       	ldi	r30, 0x35	; 53
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	40 81       	ld	r20, Z
    229a:	8a 81       	ldd	r24, Y+2	; 0x02
    229c:	28 2f       	mov	r18, r24
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	02 2e       	mov	r0, r18
    22a6:	02 c0       	rjmp	.+4      	; 0x22ac <Port_Init+0x488>
    22a8:	88 0f       	add	r24, r24
    22aa:	99 1f       	adc	r25, r25
    22ac:	0a 94       	dec	r0
    22ae:	e2 f7       	brpl	.-8      	; 0x22a8 <Port_Init+0x484>
    22b0:	84 2b       	or	r24, r20
    22b2:	8c 93       	st	X, r24
    22b4:	12 c0       	rjmp	.+36     	; 0x22da <Port_Init+0x4b6>
							case PORT_PORTD:PORTD_REG |= (u8)(1<< Local_pin);break;
    22b6:	a2 e3       	ldi	r26, 0x32	; 50
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	e2 e3       	ldi	r30, 0x32	; 50
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	40 81       	ld	r20, Z
    22c0:	8a 81       	ldd	r24, Y+2	; 0x02
    22c2:	28 2f       	mov	r18, r24
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	02 2e       	mov	r0, r18
    22cc:	02 c0       	rjmp	.+4      	; 0x22d2 <Port_Init+0x4ae>
    22ce:	88 0f       	add	r24, r24
    22d0:	99 1f       	adc	r25, r25
    22d2:	0a 94       	dec	r0
    22d4:	e2 f7       	brpl	.-8      	; 0x22ce <Port_Init+0x4aa>
    22d6:	84 2b       	or	r24, r20
    22d8:	8c 93       	st	X, r24
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<PORT_PINS_CONFIG_ARR_SIZE;i++)
    22da:	8b 81       	ldd	r24, Y+3	; 0x03
    22dc:	8f 5f       	subi	r24, 0xFF	; 255
    22de:	8b 83       	std	Y+3, r24	; 0x03
    22e0:	8b 81       	ldd	r24, Y+3	; 0x03
    22e2:	80 32       	cpi	r24, 0x20	; 32
    22e4:	08 f4       	brcc	.+2      	; 0x22e8 <Port_Init+0x4c4>
    22e6:	b1 cd       	rjmp	.-1182   	; 0x1e4a <Port_Init+0x26>
					//report error
				}

		    }//for
		}//else
}
    22e8:	2b 96       	adiw	r28, 0x0b	; 11
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	f8 94       	cli
    22ee:	de bf       	out	0x3e, r29	; 62
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	cd bf       	out	0x3d, r28	; 61
    22f4:	cf 91       	pop	r28
    22f6:	df 91       	pop	r29
    22f8:	08 95       	ret

000022fa <GIE_voidEnable>:
#include"STD_TYPES.h"
#include"BIT_MATH.h"
#include"../Mcu_HW.h"

void GIE_voidEnable(void)
{
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
	//Enable GIE for External interrupt
	SET_BIT(SREG,SREG_I);
    2302:	af e5       	ldi	r26, 0x5F	; 95
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	ef e5       	ldi	r30, 0x5F	; 95
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	80 68       	ori	r24, 0x80	; 128
    230e:	8c 93       	st	X, r24
}
    2310:	cf 91       	pop	r28
    2312:	df 91       	pop	r29
    2314:	08 95       	ret

00002316 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    2316:	df 93       	push	r29
    2318:	cf 93       	push	r28
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
	//Disable GIE for external Interrupt
	CLR_BIT(SREG,SREG_I);
    231e:	af e5       	ldi	r26, 0x5F	; 95
    2320:	b0 e0       	ldi	r27, 0x00	; 0
    2322:	ef e5       	ldi	r30, 0x5F	; 95
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	80 81       	ld	r24, Z
    2328:	8f 77       	andi	r24, 0x7F	; 127
    232a:	8c 93       	st	X, r24
}
    232c:	cf 91       	pop	r28
    232e:	df 91       	pop	r29
    2330:	08 95       	ret

00002332 <Enable_Int>:
 */
static void (*EXTI_ARRCALLBACK2FUNC[3])(void) ={NULL_POINTER,NULL_POINTER,NULL_POINTER};


void Enable_Int(const EXT_I * ConfigArr)
{
    2332:	df 93       	push	r29
    2334:	cf 93       	push	r28
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
    233a:	2b 97       	sbiw	r28, 0x0b	; 11
    233c:	0f b6       	in	r0, 0x3f	; 63
    233e:	f8 94       	cli
    2340:	de bf       	out	0x3e, r29	; 62
    2342:	0f be       	out	0x3f, r0	; 63
    2344:	cd bf       	out	0x3d, r28	; 61
    2346:	9b 83       	std	Y+3, r25	; 0x03
    2348:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter;
	for(Local_u8Counter=0;Local_u8Counter<3;Local_u8Counter++)
    234a:	19 82       	std	Y+1, r1	; 0x01
    234c:	0e c1       	rjmp	.+540    	; 0x256a <Enable_Int+0x238>
	{
		switch(ConfigArr[Local_u8Counter].Interrupt_ID)
    234e:	89 81       	ldd	r24, Y+1	; 0x01
    2350:	88 2f       	mov	r24, r24
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	9c 01       	movw	r18, r24
    2356:	22 0f       	add	r18, r18
    2358:	33 1f       	adc	r19, r19
    235a:	8a 81       	ldd	r24, Y+2	; 0x02
    235c:	9b 81       	ldd	r25, Y+3	; 0x03
    235e:	fc 01       	movw	r30, r24
    2360:	e2 0f       	add	r30, r18
    2362:	f3 1f       	adc	r31, r19
    2364:	80 81       	ld	r24, Z
    2366:	28 2f       	mov	r18, r24
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	3b 87       	std	Y+11, r19	; 0x0b
    236c:	2a 87       	std	Y+10, r18	; 0x0a
    236e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2370:	9b 85       	ldd	r25, Y+11	; 0x0b
    2372:	81 30       	cpi	r24, 0x01	; 1
    2374:	91 05       	cpc	r25, r1
    2376:	09 f4       	brne	.+2      	; 0x237a <Enable_Int+0x48>
    2378:	4a c0       	rjmp	.+148    	; 0x240e <Enable_Int+0xdc>
    237a:	2a 85       	ldd	r18, Y+10	; 0x0a
    237c:	3b 85       	ldd	r19, Y+11	; 0x0b
    237e:	22 30       	cpi	r18, 0x02	; 2
    2380:	31 05       	cpc	r19, r1
    2382:	09 f4       	brne	.+2      	; 0x2386 <Enable_Int+0x54>
    2384:	b1 c0       	rjmp	.+354    	; 0x24e8 <Enable_Int+0x1b6>
    2386:	8a 85       	ldd	r24, Y+10	; 0x0a
    2388:	9b 85       	ldd	r25, Y+11	; 0x0b
    238a:	00 97       	sbiw	r24, 0x00	; 0
    238c:	09 f0       	breq	.+2      	; 0x2390 <Enable_Int+0x5e>
    238e:	ea c0       	rjmp	.+468    	; 0x2564 <Enable_Int+0x232>
		{
		case EXTI0:
			switch(ConfigArr[Local_u8Counter].Trigger_value)
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	88 2f       	mov	r24, r24
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	9c 01       	movw	r18, r24
    2398:	22 0f       	add	r18, r18
    239a:	33 1f       	adc	r19, r19
    239c:	8a 81       	ldd	r24, Y+2	; 0x02
    239e:	9b 81       	ldd	r25, Y+3	; 0x03
    23a0:	fc 01       	movw	r30, r24
    23a2:	e2 0f       	add	r30, r18
    23a4:	f3 1f       	adc	r31, r19
    23a6:	81 81       	ldd	r24, Z+1	; 0x01
    23a8:	28 2f       	mov	r18, r24
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	39 87       	std	Y+9, r19	; 0x09
    23ae:	28 87       	std	Y+8, r18	; 0x08
    23b0:	88 85       	ldd	r24, Y+8	; 0x08
    23b2:	99 85       	ldd	r25, Y+9	; 0x09
    23b4:	00 97       	sbiw	r24, 0x00	; 0
    23b6:	31 f0       	breq	.+12     	; 0x23c4 <Enable_Int+0x92>
    23b8:	28 85       	ldd	r18, Y+8	; 0x08
    23ba:	39 85       	ldd	r19, Y+9	; 0x09
    23bc:	21 30       	cpi	r18, 0x01	; 1
    23be:	31 05       	cpc	r19, r1
    23c0:	81 f0       	breq	.+32     	; 0x23e2 <Enable_Int+0xb0>
    23c2:	1d c0       	rjmp	.+58     	; 0x23fe <Enable_Int+0xcc>
			{
			case Low_level:
				/*set sense control for INT0 To Low level*/
				CLR_BIT(MCUCR,MCUCR_ISC01);
    23c4:	a5 e5       	ldi	r26, 0x55	; 85
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	e5 e5       	ldi	r30, 0x55	; 85
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	8d 7f       	andi	r24, 0xFD	; 253
    23d0:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC00);
    23d2:	a5 e5       	ldi	r26, 0x55	; 85
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	e5 e5       	ldi	r30, 0x55	; 85
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
    23dc:	8e 7f       	andi	r24, 0xFE	; 254
    23de:	8c 93       	st	X, r24
    23e0:	0e c0       	rjmp	.+28     	; 0x23fe <Enable_Int+0xcc>
				break;
			case On_change:
				/*set sense control for INT0 To On change*/
				CLR_BIT(MCUCR,MCUCR_ISC01);
    23e2:	a5 e5       	ldi	r26, 0x55	; 85
    23e4:	b0 e0       	ldi	r27, 0x00	; 0
    23e6:	e5 e5       	ldi	r30, 0x55	; 85
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	80 81       	ld	r24, Z
    23ec:	8d 7f       	andi	r24, 0xFD	; 253
    23ee:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC00);
    23f0:	a5 e5       	ldi	r26, 0x55	; 85
    23f2:	b0 e0       	ldi	r27, 0x00	; 0
    23f4:	e5 e5       	ldi	r30, 0x55	; 85
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	80 81       	ld	r24, Z
    23fa:	81 60       	ori	r24, 0x01	; 1
    23fc:	8c 93       	st	X, r24
				break;
			default:
				break;
			}
			/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER ENABLE BIT6*/
			SET_BIT(GICR,GICR_INT0);
    23fe:	ab e5       	ldi	r26, 0x5B	; 91
    2400:	b0 e0       	ldi	r27, 0x00	; 0
    2402:	eb e5       	ldi	r30, 0x5B	; 91
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	80 81       	ld	r24, Z
    2408:	80 64       	ori	r24, 0x40	; 64
    240a:	8c 93       	st	X, r24
    240c:	ab c0       	rjmp	.+342    	; 0x2564 <Enable_Int+0x232>
			break;
			case EXTI1:
				switch(ConfigArr[Local_u8Counter].Trigger_value)
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	88 2f       	mov	r24, r24
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	9c 01       	movw	r18, r24
    2416:	22 0f       	add	r18, r18
    2418:	33 1f       	adc	r19, r19
    241a:	8a 81       	ldd	r24, Y+2	; 0x02
    241c:	9b 81       	ldd	r25, Y+3	; 0x03
    241e:	fc 01       	movw	r30, r24
    2420:	e2 0f       	add	r30, r18
    2422:	f3 1f       	adc	r31, r19
    2424:	81 81       	ldd	r24, Z+1	; 0x01
    2426:	28 2f       	mov	r18, r24
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	3f 83       	std	Y+7, r19	; 0x07
    242c:	2e 83       	std	Y+6, r18	; 0x06
    242e:	8e 81       	ldd	r24, Y+6	; 0x06
    2430:	9f 81       	ldd	r25, Y+7	; 0x07
    2432:	81 30       	cpi	r24, 0x01	; 1
    2434:	91 05       	cpc	r25, r1
    2436:	21 f1       	breq	.+72     	; 0x2480 <Enable_Int+0x14e>
    2438:	2e 81       	ldd	r18, Y+6	; 0x06
    243a:	3f 81       	ldd	r19, Y+7	; 0x07
    243c:	22 30       	cpi	r18, 0x02	; 2
    243e:	31 05       	cpc	r19, r1
    2440:	2c f4       	brge	.+10     	; 0x244c <Enable_Int+0x11a>
    2442:	8e 81       	ldd	r24, Y+6	; 0x06
    2444:	9f 81       	ldd	r25, Y+7	; 0x07
    2446:	00 97       	sbiw	r24, 0x00	; 0
    2448:	61 f0       	breq	.+24     	; 0x2462 <Enable_Int+0x130>
    244a:	46 c0       	rjmp	.+140    	; 0x24d8 <Enable_Int+0x1a6>
    244c:	2e 81       	ldd	r18, Y+6	; 0x06
    244e:	3f 81       	ldd	r19, Y+7	; 0x07
    2450:	22 30       	cpi	r18, 0x02	; 2
    2452:	31 05       	cpc	r19, r1
    2454:	21 f1       	breq	.+72     	; 0x249e <Enable_Int+0x16c>
    2456:	8e 81       	ldd	r24, Y+6	; 0x06
    2458:	9f 81       	ldd	r25, Y+7	; 0x07
    245a:	83 30       	cpi	r24, 0x03	; 3
    245c:	91 05       	cpc	r25, r1
    245e:	71 f1       	breq	.+92     	; 0x24bc <Enable_Int+0x18a>
    2460:	3b c0       	rjmp	.+118    	; 0x24d8 <Enable_Int+0x1a6>
				{
				case Low_level:
					/*set sense control for INT0 To falling edge*/
					SET_BIT(MCUCR,MCUCR_ISC01);
    2462:	a5 e5       	ldi	r26, 0x55	; 85
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	e5 e5       	ldi	r30, 0x55	; 85
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	82 60       	ori	r24, 0x02	; 2
    246e:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,MCUCR_ISC00);
    2470:	a5 e5       	ldi	r26, 0x55	; 85
    2472:	b0 e0       	ldi	r27, 0x00	; 0
    2474:	e5 e5       	ldi	r30, 0x55	; 85
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	8e 7f       	andi	r24, 0xFE	; 254
    247c:	8c 93       	st	X, r24
    247e:	2c c0       	rjmp	.+88     	; 0x24d8 <Enable_Int+0x1a6>
					break;
				case On_change:
					/*set sense control for INT0 To On change*/
					CLR_BIT(MCUCR,MCUCR_ISC01);
    2480:	a5 e5       	ldi	r26, 0x55	; 85
    2482:	b0 e0       	ldi	r27, 0x00	; 0
    2484:	e5 e5       	ldi	r30, 0x55	; 85
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	80 81       	ld	r24, Z
    248a:	8d 7f       	andi	r24, 0xFD	; 253
    248c:	8c 93       	st	X, r24
					SET_BIT(MCUCR,MCUCR_ISC00);
    248e:	a5 e5       	ldi	r26, 0x55	; 85
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	e5 e5       	ldi	r30, 0x55	; 85
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	81 60       	ori	r24, 0x01	; 1
    249a:	8c 93       	st	X, r24
    249c:	1d c0       	rjmp	.+58     	; 0x24d8 <Enable_Int+0x1a6>
					break;
				case Falling_edge:
					/*set sense control for INT0 To falling edge*/
					SET_BIT(MCUCR,MCUCR_ISC01);
    249e:	a5 e5       	ldi	r26, 0x55	; 85
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	e5 e5       	ldi	r30, 0x55	; 85
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 81       	ld	r24, Z
    24a8:	82 60       	ori	r24, 0x02	; 2
    24aa:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,MCUCR_ISC00);
    24ac:	a5 e5       	ldi	r26, 0x55	; 85
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	e5 e5       	ldi	r30, 0x55	; 85
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	80 81       	ld	r24, Z
    24b6:	8e 7f       	andi	r24, 0xFE	; 254
    24b8:	8c 93       	st	X, r24
    24ba:	0e c0       	rjmp	.+28     	; 0x24d8 <Enable_Int+0x1a6>
					break;
				case Rising_edge:
					/*set sense control for INT0 To Rising edge*/
					SET_BIT(MCUCR,MCUCR_ISC01);
    24bc:	a5 e5       	ldi	r26, 0x55	; 85
    24be:	b0 e0       	ldi	r27, 0x00	; 0
    24c0:	e5 e5       	ldi	r30, 0x55	; 85
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	80 81       	ld	r24, Z
    24c6:	82 60       	ori	r24, 0x02	; 2
    24c8:	8c 93       	st	X, r24
					SET_BIT(MCUCR,MCUCR_ISC00);
    24ca:	a5 e5       	ldi	r26, 0x55	; 85
    24cc:	b0 e0       	ldi	r27, 0x00	; 0
    24ce:	e5 e5       	ldi	r30, 0x55	; 85
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	80 81       	ld	r24, Z
    24d4:	81 60       	ori	r24, 0x01	; 1
    24d6:	8c 93       	st	X, r24
					break;
				default:
					break;
				}
				/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER ENABLE BIT7*/
				SET_BIT(GICR,GICR_INT1);
    24d8:	ab e5       	ldi	r26, 0x5B	; 91
    24da:	b0 e0       	ldi	r27, 0x00	; 0
    24dc:	eb e5       	ldi	r30, 0x5B	; 91
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	80 81       	ld	r24, Z
    24e2:	80 68       	ori	r24, 0x80	; 128
    24e4:	8c 93       	st	X, r24
    24e6:	3e c0       	rjmp	.+124    	; 0x2564 <Enable_Int+0x232>
				break;
				case EXTI2:
					switch(ConfigArr[Local_u8Counter].Trigger_value)
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
    24ea:	88 2f       	mov	r24, r24
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	9c 01       	movw	r18, r24
    24f0:	22 0f       	add	r18, r18
    24f2:	33 1f       	adc	r19, r19
    24f4:	8a 81       	ldd	r24, Y+2	; 0x02
    24f6:	9b 81       	ldd	r25, Y+3	; 0x03
    24f8:	fc 01       	movw	r30, r24
    24fa:	e2 0f       	add	r30, r18
    24fc:	f3 1f       	adc	r31, r19
    24fe:	81 81       	ldd	r24, Z+1	; 0x01
    2500:	28 2f       	mov	r18, r24
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	3d 83       	std	Y+5, r19	; 0x05
    2506:	2c 83       	std	Y+4, r18	; 0x04
    2508:	8c 81       	ldd	r24, Y+4	; 0x04
    250a:	9d 81       	ldd	r25, Y+5	; 0x05
    250c:	00 97       	sbiw	r24, 0x00	; 0
    250e:	31 f0       	breq	.+12     	; 0x251c <Enable_Int+0x1ea>
    2510:	2c 81       	ldd	r18, Y+4	; 0x04
    2512:	3d 81       	ldd	r19, Y+5	; 0x05
    2514:	21 30       	cpi	r18, 0x01	; 1
    2516:	31 05       	cpc	r19, r1
    2518:	81 f0       	breq	.+32     	; 0x253a <Enable_Int+0x208>
    251a:	1d c0       	rjmp	.+58     	; 0x2556 <Enable_Int+0x224>
					{
					case Low_level:
						/*set sense control for INT0 To falling edge*/
						SET_BIT(MCUCR,MCUCR_ISC01);
    251c:	a5 e5       	ldi	r26, 0x55	; 85
    251e:	b0 e0       	ldi	r27, 0x00	; 0
    2520:	e5 e5       	ldi	r30, 0x55	; 85
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	80 81       	ld	r24, Z
    2526:	82 60       	ori	r24, 0x02	; 2
    2528:	8c 93       	st	X, r24
						CLR_BIT(MCUCR,MCUCR_ISC00);
    252a:	a5 e5       	ldi	r26, 0x55	; 85
    252c:	b0 e0       	ldi	r27, 0x00	; 0
    252e:	e5 e5       	ldi	r30, 0x55	; 85
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	8e 7f       	andi	r24, 0xFE	; 254
    2536:	8c 93       	st	X, r24
    2538:	0e c0       	rjmp	.+28     	; 0x2556 <Enable_Int+0x224>
						break;
					case On_change:
						/*set sense control for INT0 To On change*/
						CLR_BIT(MCUCR,MCUCR_ISC01);
    253a:	a5 e5       	ldi	r26, 0x55	; 85
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	e5 e5       	ldi	r30, 0x55	; 85
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	80 81       	ld	r24, Z
    2544:	8d 7f       	andi	r24, 0xFD	; 253
    2546:	8c 93       	st	X, r24
						SET_BIT(MCUCR,MCUCR_ISC00);
    2548:	a5 e5       	ldi	r26, 0x55	; 85
    254a:	b0 e0       	ldi	r27, 0x00	; 0
    254c:	e5 e5       	ldi	r30, 0x55	; 85
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	80 81       	ld	r24, Z
    2552:	81 60       	ori	r24, 0x01	; 1
    2554:	8c 93       	st	X, r24
						break;
					default:
						break;
					}
					/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER ENABLE BIT5*/
					SET_BIT(GICR,GICR_INT2);
    2556:	ab e5       	ldi	r26, 0x5B	; 91
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	eb e5       	ldi	r30, 0x5B	; 91
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	80 81       	ld	r24, Z
    2560:	80 62       	ori	r24, 0x20	; 32
    2562:	8c 93       	st	X, r24


void Enable_Int(const EXT_I * ConfigArr)
{
	u8 Local_u8Counter;
	for(Local_u8Counter=0;Local_u8Counter<3;Local_u8Counter++)
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	8f 5f       	subi	r24, 0xFF	; 255
    2568:	89 83       	std	Y+1, r24	; 0x01
    256a:	89 81       	ldd	r24, Y+1	; 0x01
    256c:	83 30       	cpi	r24, 0x03	; 3
    256e:	08 f4       	brcc	.+2      	; 0x2572 <Enable_Int+0x240>
    2570:	ee ce       	rjmp	.-548    	; 0x234e <Enable_Int+0x1c>
					SET_BIT(GICR,GICR_INT2);
					break;
		}
	}

}
    2572:	2b 96       	adiw	r28, 0x0b	; 11
    2574:	0f b6       	in	r0, 0x3f	; 63
    2576:	f8 94       	cli
    2578:	de bf       	out	0x3e, r29	; 62
    257a:	0f be       	out	0x3f, r0	; 63
    257c:	cd bf       	out	0x3d, r28	; 61
    257e:	cf 91       	pop	r28
    2580:	df 91       	pop	r29
    2582:	08 95       	ret

00002584 <Disable_Int>:

void Disable_Int(const EXT_I * ConfigArr)
{
    2584:	df 93       	push	r29
    2586:	cf 93       	push	r28
    2588:	00 d0       	rcall	.+0      	; 0x258a <Disable_Int+0x6>
    258a:	00 d0       	rcall	.+0      	; 0x258c <Disable_Int+0x8>
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	9a 83       	std	Y+2, r25	; 0x02
    2592:	89 83       	std	Y+1, r24	; 0x01
	switch(ConfigArr->Interrupt_ID)
    2594:	e9 81       	ldd	r30, Y+1	; 0x01
    2596:	fa 81       	ldd	r31, Y+2	; 0x02
    2598:	80 81       	ld	r24, Z
    259a:	28 2f       	mov	r18, r24
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	3c 83       	std	Y+4, r19	; 0x04
    25a0:	2b 83       	std	Y+3, r18	; 0x03
    25a2:	8b 81       	ldd	r24, Y+3	; 0x03
    25a4:	9c 81       	ldd	r25, Y+4	; 0x04
    25a6:	81 30       	cpi	r24, 0x01	; 1
    25a8:	91 05       	cpc	r25, r1
    25aa:	89 f0       	breq	.+34     	; 0x25ce <Disable_Int+0x4a>
    25ac:	2b 81       	ldd	r18, Y+3	; 0x03
    25ae:	3c 81       	ldd	r19, Y+4	; 0x04
    25b0:	22 30       	cpi	r18, 0x02	; 2
    25b2:	31 05       	cpc	r19, r1
    25b4:	a1 f0       	breq	.+40     	; 0x25de <Disable_Int+0x5a>
    25b6:	8b 81       	ldd	r24, Y+3	; 0x03
    25b8:	9c 81       	ldd	r25, Y+4	; 0x04
    25ba:	00 97       	sbiw	r24, 0x00	; 0
    25bc:	b9 f4       	brne	.+46     	; 0x25ec <Disable_Int+0x68>
	{
	case EXTI0:
		/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER DISABLE BIT6*/
		CLR_BIT(GICR,GICR_INT0);
    25be:	ab e5       	ldi	r26, 0x5B	; 91
    25c0:	b0 e0       	ldi	r27, 0x00	; 0
    25c2:	eb e5       	ldi	r30, 0x5B	; 91
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	80 81       	ld	r24, Z
    25c8:	8f 7b       	andi	r24, 0xBF	; 191
    25ca:	8c 93       	st	X, r24
    25cc:	0f c0       	rjmp	.+30     	; 0x25ec <Disable_Int+0x68>
		break;
	case EXTI1:
		/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER DISABLE BIT7*/
		CLR_BIT(GICR,GICR_INT1);
    25ce:	ab e5       	ldi	r26, 0x5B	; 91
    25d0:	b0 e0       	ldi	r27, 0x00	; 0
    25d2:	eb e5       	ldi	r30, 0x5B	; 91
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	8f 77       	andi	r24, 0x7F	; 127
    25da:	8c 93       	st	X, r24
    25dc:	07 c0       	rjmp	.+14     	; 0x25ec <Disable_Int+0x68>
		break;
	case EXTI2:
		/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER DISABLE BIT5*/
		CLR_BIT(GICR,GICR_INT2);
    25de:	ab e5       	ldi	r26, 0x5B	; 91
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	eb e5       	ldi	r30, 0x5B	; 91
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
    25e8:	8f 7d       	andi	r24, 0xDF	; 223
    25ea:	8c 93       	st	X, r24
		break;
	}
}
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	0f 90       	pop	r0
    25f2:	0f 90       	pop	r0
    25f4:	cf 91       	pop	r28
    25f6:	df 91       	pop	r29
    25f8:	08 95       	ret

000025fa <EXTI_u8INTSetCallBack>:
u8 EXTI_u8INTSetCallBack(const EXT_I * ConfigArr,void (*Copy_pvINTFunc)(void))
{
    25fa:	df 93       	push	r29
    25fc:	cf 93       	push	r28
    25fe:	cd b7       	in	r28, 0x3d	; 61
    2600:	de b7       	in	r29, 0x3e	; 62
    2602:	28 97       	sbiw	r28, 0x08	; 8
    2604:	0f b6       	in	r0, 0x3f	; 63
    2606:	f8 94       	cli
    2608:	de bf       	out	0x3e, r29	; 62
    260a:	0f be       	out	0x3f, r0	; 63
    260c:	cd bf       	out	0x3d, r28	; 61
    260e:	9c 83       	std	Y+4, r25	; 0x04
    2610:	8b 83       	std	Y+3, r24	; 0x03
    2612:	7e 83       	std	Y+6, r23	; 0x06
    2614:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8ErrorStatus=NO_ERROR;
    2616:	82 e0       	ldi	r24, 0x02	; 2
    2618:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8counter;
	for(Local_u8counter=0;Local_u8counter<3;Local_u8counter++)
    261a:	19 82       	std	Y+1, r1	; 0x01
    261c:	59 c0       	rjmp	.+178    	; 0x26d0 <EXTI_u8INTSetCallBack+0xd6>
	{
		switch(ConfigArr[Local_u8counter].Interrupt_ID)
    261e:	89 81       	ldd	r24, Y+1	; 0x01
    2620:	88 2f       	mov	r24, r24
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	9c 01       	movw	r18, r24
    2626:	22 0f       	add	r18, r18
    2628:	33 1f       	adc	r19, r19
    262a:	8b 81       	ldd	r24, Y+3	; 0x03
    262c:	9c 81       	ldd	r25, Y+4	; 0x04
    262e:	fc 01       	movw	r30, r24
    2630:	e2 0f       	add	r30, r18
    2632:	f3 1f       	adc	r31, r19
    2634:	80 81       	ld	r24, Z
    2636:	28 2f       	mov	r18, r24
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	38 87       	std	Y+8, r19	; 0x08
    263c:	2f 83       	std	Y+7, r18	; 0x07
    263e:	8f 81       	ldd	r24, Y+7	; 0x07
    2640:	98 85       	ldd	r25, Y+8	; 0x08
    2642:	81 30       	cpi	r24, 0x01	; 1
    2644:	91 05       	cpc	r25, r1
    2646:	e1 f0       	breq	.+56     	; 0x2680 <EXTI_u8INTSetCallBack+0x86>
    2648:	2f 81       	ldd	r18, Y+7	; 0x07
    264a:	38 85       	ldd	r19, Y+8	; 0x08
    264c:	22 30       	cpi	r18, 0x02	; 2
    264e:	31 05       	cpc	r19, r1
    2650:	51 f1       	breq	.+84     	; 0x26a6 <EXTI_u8INTSetCallBack+0xac>
    2652:	8f 81       	ldd	r24, Y+7	; 0x07
    2654:	98 85       	ldd	r25, Y+8	; 0x08
    2656:	00 97       	sbiw	r24, 0x00	; 0
    2658:	c1 f5       	brne	.+112    	; 0x26ca <EXTI_u8INTSetCallBack+0xd0>
		{
		case EXTI0:
			if(Copy_pvINTFunc != NULL)
    265a:	8d 81       	ldd	r24, Y+5	; 0x05
    265c:	9e 81       	ldd	r25, Y+6	; 0x06
    265e:	00 97       	sbiw	r24, 0x00	; 0
    2660:	69 f0       	breq	.+26     	; 0x267c <EXTI_u8INTSetCallBack+0x82>
			{
				EXTI_ARRCALLBACK2FUNC[Local_u8counter]=Copy_pvINTFunc;
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	88 2f       	mov	r24, r24
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	88 0f       	add	r24, r24
    266a:	99 1f       	adc	r25, r25
    266c:	fc 01       	movw	r30, r24
    266e:	e3 56       	subi	r30, 0x63	; 99
    2670:	fd 4f       	sbci	r31, 0xFD	; 253
    2672:	8d 81       	ldd	r24, Y+5	; 0x05
    2674:	9e 81       	ldd	r25, Y+6	; 0x06
    2676:	91 83       	std	Z+1, r25	; 0x01
    2678:	80 83       	st	Z, r24
    267a:	27 c0       	rjmp	.+78     	; 0x26ca <EXTI_u8INTSetCallBack+0xd0>
			}
			else
			{
				Local_u8ErrorStatus = NULL_POINTER;
    267c:	1a 82       	std	Y+2, r1	; 0x02
    267e:	25 c0       	rjmp	.+74     	; 0x26ca <EXTI_u8INTSetCallBack+0xd0>
			}
			break;
		case EXTI1:
			if(Copy_pvINTFunc != NULL)
    2680:	8d 81       	ldd	r24, Y+5	; 0x05
    2682:	9e 81       	ldd	r25, Y+6	; 0x06
    2684:	00 97       	sbiw	r24, 0x00	; 0
    2686:	69 f0       	breq	.+26     	; 0x26a2 <EXTI_u8INTSetCallBack+0xa8>
			{
				EXTI_ARRCALLBACK2FUNC[Local_u8counter]=Copy_pvINTFunc;
    2688:	89 81       	ldd	r24, Y+1	; 0x01
    268a:	88 2f       	mov	r24, r24
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	88 0f       	add	r24, r24
    2690:	99 1f       	adc	r25, r25
    2692:	fc 01       	movw	r30, r24
    2694:	e3 56       	subi	r30, 0x63	; 99
    2696:	fd 4f       	sbci	r31, 0xFD	; 253
    2698:	8d 81       	ldd	r24, Y+5	; 0x05
    269a:	9e 81       	ldd	r25, Y+6	; 0x06
    269c:	91 83       	std	Z+1, r25	; 0x01
    269e:	80 83       	st	Z, r24
    26a0:	14 c0       	rjmp	.+40     	; 0x26ca <EXTI_u8INTSetCallBack+0xd0>
			}
			else
			{
				Local_u8ErrorStatus = NULL_POINTER;
    26a2:	1a 82       	std	Y+2, r1	; 0x02
    26a4:	12 c0       	rjmp	.+36     	; 0x26ca <EXTI_u8INTSetCallBack+0xd0>
			}
			break;
		case EXTI2:
			if(Copy_pvINTFunc != NULL)
    26a6:	8d 81       	ldd	r24, Y+5	; 0x05
    26a8:	9e 81       	ldd	r25, Y+6	; 0x06
    26aa:	00 97       	sbiw	r24, 0x00	; 0
    26ac:	69 f0       	breq	.+26     	; 0x26c8 <EXTI_u8INTSetCallBack+0xce>
			{
				EXTI_ARRCALLBACK2FUNC[Local_u8counter]=Copy_pvINTFunc;
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	88 2f       	mov	r24, r24
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	88 0f       	add	r24, r24
    26b6:	99 1f       	adc	r25, r25
    26b8:	fc 01       	movw	r30, r24
    26ba:	e3 56       	subi	r30, 0x63	; 99
    26bc:	fd 4f       	sbci	r31, 0xFD	; 253
    26be:	8d 81       	ldd	r24, Y+5	; 0x05
    26c0:	9e 81       	ldd	r25, Y+6	; 0x06
    26c2:	91 83       	std	Z+1, r25	; 0x01
    26c4:	80 83       	st	Z, r24
    26c6:	01 c0       	rjmp	.+2      	; 0x26ca <EXTI_u8INTSetCallBack+0xd0>
			}
			else
			{
				Local_u8ErrorStatus = NULL_POINTER;
    26c8:	1a 82       	std	Y+2, r1	; 0x02
}
u8 EXTI_u8INTSetCallBack(const EXT_I * ConfigArr,void (*Copy_pvINTFunc)(void))
{
	u8 Local_u8ErrorStatus=NO_ERROR;
	u8 Local_u8counter;
	for(Local_u8counter=0;Local_u8counter<3;Local_u8counter++)
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	8f 5f       	subi	r24, 0xFF	; 255
    26ce:	89 83       	std	Y+1, r24	; 0x01
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	83 30       	cpi	r24, 0x03	; 3
    26d4:	08 f4       	brcc	.+2      	; 0x26d8 <EXTI_u8INTSetCallBack+0xde>
    26d6:	a3 cf       	rjmp	.-186    	; 0x261e <EXTI_u8INTSetCallBack+0x24>
			}
			break;
		}
	}

	return Local_u8ErrorStatus;
    26d8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    26da:	28 96       	adiw	r28, 0x08	; 8
    26dc:	0f b6       	in	r0, 0x3f	; 63
    26de:	f8 94       	cli
    26e0:	de bf       	out	0x3e, r29	; 62
    26e2:	0f be       	out	0x3f, r0	; 63
    26e4:	cd bf       	out	0x3d, r28	; 61
    26e6:	cf 91       	pop	r28
    26e8:	df 91       	pop	r29
    26ea:	08 95       	ret

000026ec <__vector_1>:

ISR(INT0_vect)
{
    26ec:	1f 92       	push	r1
    26ee:	0f 92       	push	r0
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	0f 92       	push	r0
    26f4:	11 24       	eor	r1, r1
    26f6:	2f 93       	push	r18
    26f8:	3f 93       	push	r19
    26fa:	4f 93       	push	r20
    26fc:	5f 93       	push	r21
    26fe:	6f 93       	push	r22
    2700:	7f 93       	push	r23
    2702:	8f 93       	push	r24
    2704:	9f 93       	push	r25
    2706:	af 93       	push	r26
    2708:	bf 93       	push	r27
    270a:	ef 93       	push	r30
    270c:	ff 93       	push	r31
    270e:	df 93       	push	r29
    2710:	cf 93       	push	r28
    2712:	cd b7       	in	r28, 0x3d	; 61
    2714:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ARRCALLBACK2FUNC[0] != NULL)
    2716:	80 91 9d 02 	lds	r24, 0x029D
    271a:	90 91 9e 02 	lds	r25, 0x029E
    271e:	00 97       	sbiw	r24, 0x00	; 0
    2720:	29 f0       	breq	.+10     	; 0x272c <__vector_1+0x40>
		{
		EXTI_ARRCALLBACK2FUNC[0]();
    2722:	e0 91 9d 02 	lds	r30, 0x029D
    2726:	f0 91 9e 02 	lds	r31, 0x029E
    272a:	09 95       	icall
		}
		else
		{
			/*Stop*/
		}
}
    272c:	cf 91       	pop	r28
    272e:	df 91       	pop	r29
    2730:	ff 91       	pop	r31
    2732:	ef 91       	pop	r30
    2734:	bf 91       	pop	r27
    2736:	af 91       	pop	r26
    2738:	9f 91       	pop	r25
    273a:	8f 91       	pop	r24
    273c:	7f 91       	pop	r23
    273e:	6f 91       	pop	r22
    2740:	5f 91       	pop	r21
    2742:	4f 91       	pop	r20
    2744:	3f 91       	pop	r19
    2746:	2f 91       	pop	r18
    2748:	0f 90       	pop	r0
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	0f 90       	pop	r0
    274e:	1f 90       	pop	r1
    2750:	18 95       	reti

00002752 <__vector_2>:
ISR(INT1_vect)
{
    2752:	1f 92       	push	r1
    2754:	0f 92       	push	r0
    2756:	0f b6       	in	r0, 0x3f	; 63
    2758:	0f 92       	push	r0
    275a:	11 24       	eor	r1, r1
    275c:	df 93       	push	r29
    275e:	cf 93       	push	r28
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62

}
    2764:	cf 91       	pop	r28
    2766:	df 91       	pop	r29
    2768:	0f 90       	pop	r0
    276a:	0f be       	out	0x3f, r0	; 63
    276c:	0f 90       	pop	r0
    276e:	1f 90       	pop	r1
    2770:	18 95       	reti

00002772 <__vector_3>:
ISR(INT2_vect)
{
    2772:	1f 92       	push	r1
    2774:	0f 92       	push	r0
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	0f 92       	push	r0
    277a:	11 24       	eor	r1, r1
    277c:	df 93       	push	r29
    277e:	cf 93       	push	r28
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62

}
    2784:	cf 91       	pop	r28
    2786:	df 91       	pop	r29
    2788:	0f 90       	pop	r0
    278a:	0f be       	out	0x3f, r0	; 63
    278c:	0f 90       	pop	r0
    278e:	1f 90       	pop	r1
    2790:	18 95       	reti

00002792 <M_Dio_en_getPinValue>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : Dio_HIGH or DIO_LOW
******************************************/
Dio_LevelType  M_Dio_en_getPinValue(Dio_ChannelType ChannelId)
{
    2792:	df 93       	push	r29
    2794:	cf 93       	push	r28
    2796:	00 d0       	rcall	.+0      	; 0x2798 <M_Dio_en_getPinValue+0x6>
    2798:	00 d0       	rcall	.+0      	; 0x279a <M_Dio_en_getPinValue+0x8>
    279a:	00 d0       	rcall	.+0      	; 0x279c <M_Dio_en_getPinValue+0xa>
    279c:	cd b7       	in	r28, 0x3d	; 61
    279e:	de b7       	in	r29, 0x3e	; 62
    27a0:	8c 83       	std	Y+4, r24	; 0x04
	u8 pin = ChannelId % 10;
    27a2:	8c 81       	ldd	r24, Y+4	; 0x04
    27a4:	9a e0       	ldi	r25, 0x0A	; 10
    27a6:	69 2f       	mov	r22, r25
    27a8:	0e 94 98 28 	call	0x5130	; 0x5130 <__udivmodqi4>
    27ac:	89 2f       	mov	r24, r25
    27ae:	8b 83       	std	Y+3, r24	; 0x03
	u8 port = ChannelId / 10;
    27b0:	8c 81       	ldd	r24, Y+4	; 0x04
    27b2:	9a e0       	ldi	r25, 0x0A	; 10
    27b4:	69 2f       	mov	r22, r25
    27b6:	0e 94 98 28 	call	0x5130	; 0x5130 <__udivmodqi4>
    27ba:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType Local_levelType;
	switch(port)
    27bc:	8a 81       	ldd	r24, Y+2	; 0x02
    27be:	28 2f       	mov	r18, r24
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	3e 83       	std	Y+6, r19	; 0x06
    27c4:	2d 83       	std	Y+5, r18	; 0x05
    27c6:	4d 81       	ldd	r20, Y+5	; 0x05
    27c8:	5e 81       	ldd	r21, Y+6	; 0x06
    27ca:	42 30       	cpi	r20, 0x02	; 2
    27cc:	51 05       	cpc	r21, r1
    27ce:	41 f1       	breq	.+80     	; 0x2820 <M_Dio_en_getPinValue+0x8e>
    27d0:	8d 81       	ldd	r24, Y+5	; 0x05
    27d2:	9e 81       	ldd	r25, Y+6	; 0x06
    27d4:	83 30       	cpi	r24, 0x03	; 3
    27d6:	91 05       	cpc	r25, r1
    27d8:	34 f4       	brge	.+12     	; 0x27e6 <M_Dio_en_getPinValue+0x54>
    27da:	2d 81       	ldd	r18, Y+5	; 0x05
    27dc:	3e 81       	ldd	r19, Y+6	; 0x06
    27de:	21 30       	cpi	r18, 0x01	; 1
    27e0:	31 05       	cpc	r19, r1
    27e2:	61 f0       	breq	.+24     	; 0x27fc <M_Dio_en_getPinValue+0x6a>
    27e4:	52 c0       	rjmp	.+164    	; 0x288a <M_Dio_en_getPinValue+0xf8>
    27e6:	4d 81       	ldd	r20, Y+5	; 0x05
    27e8:	5e 81       	ldd	r21, Y+6	; 0x06
    27ea:	43 30       	cpi	r20, 0x03	; 3
    27ec:	51 05       	cpc	r21, r1
    27ee:	51 f1       	breq	.+84     	; 0x2844 <M_Dio_en_getPinValue+0xb2>
    27f0:	8d 81       	ldd	r24, Y+5	; 0x05
    27f2:	9e 81       	ldd	r25, Y+6	; 0x06
    27f4:	84 30       	cpi	r24, 0x04	; 4
    27f6:	91 05       	cpc	r25, r1
    27f8:	b9 f1       	breq	.+110    	; 0x2868 <M_Dio_en_getPinValue+0xd6>
    27fa:	47 c0       	rjmp	.+142    	; 0x288a <M_Dio_en_getPinValue+0xf8>
	{
	case DIO_PORTA :Local_levelType = GET_BIT( PINA_REG,pin);break;
    27fc:	e9 e3       	ldi	r30, 0x39	; 57
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 81       	ld	r24, Z
    2802:	28 2f       	mov	r18, r24
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	8b 81       	ldd	r24, Y+3	; 0x03
    2808:	88 2f       	mov	r24, r24
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	a9 01       	movw	r20, r18
    280e:	02 c0       	rjmp	.+4      	; 0x2814 <M_Dio_en_getPinValue+0x82>
    2810:	55 95       	asr	r21
    2812:	47 95       	ror	r20
    2814:	8a 95       	dec	r24
    2816:	e2 f7       	brpl	.-8      	; 0x2810 <M_Dio_en_getPinValue+0x7e>
    2818:	ca 01       	movw	r24, r20
    281a:	81 70       	andi	r24, 0x01	; 1
    281c:	89 83       	std	Y+1, r24	; 0x01
    281e:	35 c0       	rjmp	.+106    	; 0x288a <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTB :Local_levelType = GET_BIT( PINB_REG,pin);break;
    2820:	e6 e3       	ldi	r30, 0x36	; 54
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	80 81       	ld	r24, Z
    2826:	28 2f       	mov	r18, r24
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	8b 81       	ldd	r24, Y+3	; 0x03
    282c:	88 2f       	mov	r24, r24
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	a9 01       	movw	r20, r18
    2832:	02 c0       	rjmp	.+4      	; 0x2838 <M_Dio_en_getPinValue+0xa6>
    2834:	55 95       	asr	r21
    2836:	47 95       	ror	r20
    2838:	8a 95       	dec	r24
    283a:	e2 f7       	brpl	.-8      	; 0x2834 <M_Dio_en_getPinValue+0xa2>
    283c:	ca 01       	movw	r24, r20
    283e:	81 70       	andi	r24, 0x01	; 1
    2840:	89 83       	std	Y+1, r24	; 0x01
    2842:	23 c0       	rjmp	.+70     	; 0x288a <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTC :Local_levelType = GET_BIT( PINC_REG,pin);break;
    2844:	e3 e3       	ldi	r30, 0x33	; 51
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	80 81       	ld	r24, Z
    284a:	28 2f       	mov	r18, r24
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	8b 81       	ldd	r24, Y+3	; 0x03
    2850:	88 2f       	mov	r24, r24
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	a9 01       	movw	r20, r18
    2856:	02 c0       	rjmp	.+4      	; 0x285c <M_Dio_en_getPinValue+0xca>
    2858:	55 95       	asr	r21
    285a:	47 95       	ror	r20
    285c:	8a 95       	dec	r24
    285e:	e2 f7       	brpl	.-8      	; 0x2858 <M_Dio_en_getPinValue+0xc6>
    2860:	ca 01       	movw	r24, r20
    2862:	81 70       	andi	r24, 0x01	; 1
    2864:	89 83       	std	Y+1, r24	; 0x01
    2866:	11 c0       	rjmp	.+34     	; 0x288a <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTD :Local_levelType = GET_BIT( PIND_REG,pin);break;
    2868:	e0 e3       	ldi	r30, 0x30	; 48
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	80 81       	ld	r24, Z
    286e:	28 2f       	mov	r18, r24
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	8b 81       	ldd	r24, Y+3	; 0x03
    2874:	88 2f       	mov	r24, r24
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	a9 01       	movw	r20, r18
    287a:	02 c0       	rjmp	.+4      	; 0x2880 <M_Dio_en_getPinValue+0xee>
    287c:	55 95       	asr	r21
    287e:	47 95       	ror	r20
    2880:	8a 95       	dec	r24
    2882:	e2 f7       	brpl	.-8      	; 0x287c <M_Dio_en_getPinValue+0xea>
    2884:	ca 01       	movw	r24, r20
    2886:	81 70       	andi	r24, 0x01	; 1
    2888:	89 83       	std	Y+1, r24	; 0x01
	}
    return Local_levelType ;
    288a:	89 81       	ldd	r24, Y+1	; 0x01
}
    288c:	26 96       	adiw	r28, 0x06	; 6
    288e:	0f b6       	in	r0, 0x3f	; 63
    2890:	f8 94       	cli
    2892:	de bf       	out	0x3e, r29	; 62
    2894:	0f be       	out	0x3f, r0	; 63
    2896:	cd bf       	out	0x3d, r28	; 61
    2898:	cf 91       	pop	r28
    289a:	df 91       	pop	r29
    289c:	08 95       	ret

0000289e <M_Dio_void_setPinValue>:
  parameters (in)  :  channelId (pin) ,Level (Dio_HIGH or Dio_LOW)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPinValue(Dio_ChannelType ChannelId,Dio_LevelType Level)
{
    289e:	df 93       	push	r29
    28a0:	cf 93       	push	r28
    28a2:	cd b7       	in	r28, 0x3d	; 61
    28a4:	de b7       	in	r29, 0x3e	; 62
    28a6:	28 97       	sbiw	r28, 0x08	; 8
    28a8:	0f b6       	in	r0, 0x3f	; 63
    28aa:	f8 94       	cli
    28ac:	de bf       	out	0x3e, r29	; 62
    28ae:	0f be       	out	0x3f, r0	; 63
    28b0:	cd bf       	out	0x3d, r28	; 61
    28b2:	8b 83       	std	Y+3, r24	; 0x03
    28b4:	6c 83       	std	Y+4, r22	; 0x04
	u8 pin = ChannelId % 10;
    28b6:	8b 81       	ldd	r24, Y+3	; 0x03
    28b8:	9a e0       	ldi	r25, 0x0A	; 10
    28ba:	69 2f       	mov	r22, r25
    28bc:	0e 94 98 28 	call	0x5130	; 0x5130 <__udivmodqi4>
    28c0:	89 2f       	mov	r24, r25
    28c2:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = ChannelId / 10;
    28c4:	8b 81       	ldd	r24, Y+3	; 0x03
    28c6:	9a e0       	ldi	r25, 0x0A	; 10
    28c8:	69 2f       	mov	r22, r25
    28ca:	0e 94 98 28 	call	0x5130	; 0x5130 <__udivmodqi4>
    28ce:	89 83       	std	Y+1, r24	; 0x01

	if(Level == DIO_HIGH)
    28d0:	8c 81       	ldd	r24, Y+4	; 0x04
    28d2:	81 30       	cpi	r24, 0x01	; 1
    28d4:	09 f0       	breq	.+2      	; 0x28d8 <M_Dio_void_setPinValue+0x3a>
    28d6:	70 c0       	rjmp	.+224    	; 0x29b8 <M_Dio_void_setPinValue+0x11a>
	{
		switch(port)
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	28 2f       	mov	r18, r24
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	38 87       	std	Y+8, r19	; 0x08
    28e0:	2f 83       	std	Y+7, r18	; 0x07
    28e2:	8f 81       	ldd	r24, Y+7	; 0x07
    28e4:	98 85       	ldd	r25, Y+8	; 0x08
    28e6:	82 30       	cpi	r24, 0x02	; 2
    28e8:	91 05       	cpc	r25, r1
    28ea:	51 f1       	breq	.+84     	; 0x2940 <M_Dio_void_setPinValue+0xa2>
    28ec:	2f 81       	ldd	r18, Y+7	; 0x07
    28ee:	38 85       	ldd	r19, Y+8	; 0x08
    28f0:	23 30       	cpi	r18, 0x03	; 3
    28f2:	31 05       	cpc	r19, r1
    28f4:	34 f4       	brge	.+12     	; 0x2902 <M_Dio_void_setPinValue+0x64>
    28f6:	8f 81       	ldd	r24, Y+7	; 0x07
    28f8:	98 85       	ldd	r25, Y+8	; 0x08
    28fa:	81 30       	cpi	r24, 0x01	; 1
    28fc:	91 05       	cpc	r25, r1
    28fe:	61 f0       	breq	.+24     	; 0x2918 <M_Dio_void_setPinValue+0x7a>
    2900:	d3 c0       	rjmp	.+422    	; 0x2aa8 <M_Dio_void_setPinValue+0x20a>
    2902:	2f 81       	ldd	r18, Y+7	; 0x07
    2904:	38 85       	ldd	r19, Y+8	; 0x08
    2906:	23 30       	cpi	r18, 0x03	; 3
    2908:	31 05       	cpc	r19, r1
    290a:	71 f1       	breq	.+92     	; 0x2968 <M_Dio_void_setPinValue+0xca>
    290c:	8f 81       	ldd	r24, Y+7	; 0x07
    290e:	98 85       	ldd	r25, Y+8	; 0x08
    2910:	84 30       	cpi	r24, 0x04	; 4
    2912:	91 05       	cpc	r25, r1
    2914:	e9 f1       	breq	.+122    	; 0x2990 <M_Dio_void_setPinValue+0xf2>
    2916:	c8 c0       	rjmp	.+400    	; 0x2aa8 <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : SET_BIT( PORTA_REG,pin);break;
    2918:	ab e3       	ldi	r26, 0x3B	; 59
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	eb e3       	ldi	r30, 0x3B	; 59
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	48 2f       	mov	r20, r24
    2924:	8a 81       	ldd	r24, Y+2	; 0x02
    2926:	28 2f       	mov	r18, r24
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	02 2e       	mov	r0, r18
    2930:	02 c0       	rjmp	.+4      	; 0x2936 <M_Dio_void_setPinValue+0x98>
    2932:	88 0f       	add	r24, r24
    2934:	99 1f       	adc	r25, r25
    2936:	0a 94       	dec	r0
    2938:	e2 f7       	brpl	.-8      	; 0x2932 <M_Dio_void_setPinValue+0x94>
    293a:	84 2b       	or	r24, r20
    293c:	8c 93       	st	X, r24
    293e:	b4 c0       	rjmp	.+360    	; 0x2aa8 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : SET_BIT( PORTB_REG,pin);break;
    2940:	a8 e3       	ldi	r26, 0x38	; 56
    2942:	b0 e0       	ldi	r27, 0x00	; 0
    2944:	e8 e3       	ldi	r30, 0x38	; 56
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	80 81       	ld	r24, Z
    294a:	48 2f       	mov	r20, r24
    294c:	8a 81       	ldd	r24, Y+2	; 0x02
    294e:	28 2f       	mov	r18, r24
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	02 2e       	mov	r0, r18
    2958:	02 c0       	rjmp	.+4      	; 0x295e <M_Dio_void_setPinValue+0xc0>
    295a:	88 0f       	add	r24, r24
    295c:	99 1f       	adc	r25, r25
    295e:	0a 94       	dec	r0
    2960:	e2 f7       	brpl	.-8      	; 0x295a <M_Dio_void_setPinValue+0xbc>
    2962:	84 2b       	or	r24, r20
    2964:	8c 93       	st	X, r24
    2966:	a0 c0       	rjmp	.+320    	; 0x2aa8 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : SET_BIT( PORTC_REG,pin);break;
    2968:	a5 e3       	ldi	r26, 0x35	; 53
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	e5 e3       	ldi	r30, 0x35	; 53
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	80 81       	ld	r24, Z
    2972:	48 2f       	mov	r20, r24
    2974:	8a 81       	ldd	r24, Y+2	; 0x02
    2976:	28 2f       	mov	r18, r24
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	02 2e       	mov	r0, r18
    2980:	02 c0       	rjmp	.+4      	; 0x2986 <M_Dio_void_setPinValue+0xe8>
    2982:	88 0f       	add	r24, r24
    2984:	99 1f       	adc	r25, r25
    2986:	0a 94       	dec	r0
    2988:	e2 f7       	brpl	.-8      	; 0x2982 <M_Dio_void_setPinValue+0xe4>
    298a:	84 2b       	or	r24, r20
    298c:	8c 93       	st	X, r24
    298e:	8c c0       	rjmp	.+280    	; 0x2aa8 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : SET_BIT( PORTD_REG,pin);break;
    2990:	a2 e3       	ldi	r26, 0x32	; 50
    2992:	b0 e0       	ldi	r27, 0x00	; 0
    2994:	e2 e3       	ldi	r30, 0x32	; 50
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	80 81       	ld	r24, Z
    299a:	48 2f       	mov	r20, r24
    299c:	8a 81       	ldd	r24, Y+2	; 0x02
    299e:	28 2f       	mov	r18, r24
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	02 2e       	mov	r0, r18
    29a8:	02 c0       	rjmp	.+4      	; 0x29ae <M_Dio_void_setPinValue+0x110>
    29aa:	88 0f       	add	r24, r24
    29ac:	99 1f       	adc	r25, r25
    29ae:	0a 94       	dec	r0
    29b0:	e2 f7       	brpl	.-8      	; 0x29aa <M_Dio_void_setPinValue+0x10c>
    29b2:	84 2b       	or	r24, r20
    29b4:	8c 93       	st	X, r24
    29b6:	78 c0       	rjmp	.+240    	; 0x2aa8 <M_Dio_void_setPinValue+0x20a>
		}

	}
	else if (Level == DIO_LOW)
    29b8:	8c 81       	ldd	r24, Y+4	; 0x04
    29ba:	88 23       	and	r24, r24
    29bc:	09 f0       	breq	.+2      	; 0x29c0 <M_Dio_void_setPinValue+0x122>
    29be:	74 c0       	rjmp	.+232    	; 0x2aa8 <M_Dio_void_setPinValue+0x20a>
	{
		switch(port)
    29c0:	89 81       	ldd	r24, Y+1	; 0x01
    29c2:	28 2f       	mov	r18, r24
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	3e 83       	std	Y+6, r19	; 0x06
    29c8:	2d 83       	std	Y+5, r18	; 0x05
    29ca:	8d 81       	ldd	r24, Y+5	; 0x05
    29cc:	9e 81       	ldd	r25, Y+6	; 0x06
    29ce:	82 30       	cpi	r24, 0x02	; 2
    29d0:	91 05       	cpc	r25, r1
    29d2:	61 f1       	breq	.+88     	; 0x2a2c <M_Dio_void_setPinValue+0x18e>
    29d4:	2d 81       	ldd	r18, Y+5	; 0x05
    29d6:	3e 81       	ldd	r19, Y+6	; 0x06
    29d8:	23 30       	cpi	r18, 0x03	; 3
    29da:	31 05       	cpc	r19, r1
    29dc:	34 f4       	brge	.+12     	; 0x29ea <M_Dio_void_setPinValue+0x14c>
    29de:	8d 81       	ldd	r24, Y+5	; 0x05
    29e0:	9e 81       	ldd	r25, Y+6	; 0x06
    29e2:	81 30       	cpi	r24, 0x01	; 1
    29e4:	91 05       	cpc	r25, r1
    29e6:	69 f0       	breq	.+26     	; 0x2a02 <M_Dio_void_setPinValue+0x164>
    29e8:	5f c0       	rjmp	.+190    	; 0x2aa8 <M_Dio_void_setPinValue+0x20a>
    29ea:	2d 81       	ldd	r18, Y+5	; 0x05
    29ec:	3e 81       	ldd	r19, Y+6	; 0x06
    29ee:	23 30       	cpi	r18, 0x03	; 3
    29f0:	31 05       	cpc	r19, r1
    29f2:	89 f1       	breq	.+98     	; 0x2a56 <M_Dio_void_setPinValue+0x1b8>
    29f4:	8d 81       	ldd	r24, Y+5	; 0x05
    29f6:	9e 81       	ldd	r25, Y+6	; 0x06
    29f8:	84 30       	cpi	r24, 0x04	; 4
    29fa:	91 05       	cpc	r25, r1
    29fc:	09 f4       	brne	.+2      	; 0x2a00 <M_Dio_void_setPinValue+0x162>
    29fe:	40 c0       	rjmp	.+128    	; 0x2a80 <M_Dio_void_setPinValue+0x1e2>
    2a00:	53 c0       	rjmp	.+166    	; 0x2aa8 <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : CLR_BIT( PORTA_REG,pin);break;
    2a02:	ab e3       	ldi	r26, 0x3B	; 59
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	eb e3       	ldi	r30, 0x3B	; 59
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	80 81       	ld	r24, Z
    2a0c:	48 2f       	mov	r20, r24
    2a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a10:	28 2f       	mov	r18, r24
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	02 2e       	mov	r0, r18
    2a1a:	02 c0       	rjmp	.+4      	; 0x2a20 <M_Dio_void_setPinValue+0x182>
    2a1c:	88 0f       	add	r24, r24
    2a1e:	99 1f       	adc	r25, r25
    2a20:	0a 94       	dec	r0
    2a22:	e2 f7       	brpl	.-8      	; 0x2a1c <M_Dio_void_setPinValue+0x17e>
    2a24:	80 95       	com	r24
    2a26:	84 23       	and	r24, r20
    2a28:	8c 93       	st	X, r24
    2a2a:	3e c0       	rjmp	.+124    	; 0x2aa8 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : CLR_BIT( PORTB_REG,pin);break;
    2a2c:	a8 e3       	ldi	r26, 0x38	; 56
    2a2e:	b0 e0       	ldi	r27, 0x00	; 0
    2a30:	e8 e3       	ldi	r30, 0x38	; 56
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	80 81       	ld	r24, Z
    2a36:	48 2f       	mov	r20, r24
    2a38:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3a:	28 2f       	mov	r18, r24
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	02 2e       	mov	r0, r18
    2a44:	02 c0       	rjmp	.+4      	; 0x2a4a <M_Dio_void_setPinValue+0x1ac>
    2a46:	88 0f       	add	r24, r24
    2a48:	99 1f       	adc	r25, r25
    2a4a:	0a 94       	dec	r0
    2a4c:	e2 f7       	brpl	.-8      	; 0x2a46 <M_Dio_void_setPinValue+0x1a8>
    2a4e:	80 95       	com	r24
    2a50:	84 23       	and	r24, r20
    2a52:	8c 93       	st	X, r24
    2a54:	29 c0       	rjmp	.+82     	; 0x2aa8 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : CLR_BIT( PORTC_REG,pin);break;
    2a56:	a5 e3       	ldi	r26, 0x35	; 53
    2a58:	b0 e0       	ldi	r27, 0x00	; 0
    2a5a:	e5 e3       	ldi	r30, 0x35	; 53
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	80 81       	ld	r24, Z
    2a60:	48 2f       	mov	r20, r24
    2a62:	8a 81       	ldd	r24, Y+2	; 0x02
    2a64:	28 2f       	mov	r18, r24
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	02 2e       	mov	r0, r18
    2a6e:	02 c0       	rjmp	.+4      	; 0x2a74 <M_Dio_void_setPinValue+0x1d6>
    2a70:	88 0f       	add	r24, r24
    2a72:	99 1f       	adc	r25, r25
    2a74:	0a 94       	dec	r0
    2a76:	e2 f7       	brpl	.-8      	; 0x2a70 <M_Dio_void_setPinValue+0x1d2>
    2a78:	80 95       	com	r24
    2a7a:	84 23       	and	r24, r20
    2a7c:	8c 93       	st	X, r24
    2a7e:	14 c0       	rjmp	.+40     	; 0x2aa8 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : CLR_BIT( PORTD_REG,pin);break;
    2a80:	a2 e3       	ldi	r26, 0x32	; 50
    2a82:	b0 e0       	ldi	r27, 0x00	; 0
    2a84:	e2 e3       	ldi	r30, 0x32	; 50
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	80 81       	ld	r24, Z
    2a8a:	48 2f       	mov	r20, r24
    2a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8e:	28 2f       	mov	r18, r24
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	02 2e       	mov	r0, r18
    2a98:	02 c0       	rjmp	.+4      	; 0x2a9e <M_Dio_void_setPinValue+0x200>
    2a9a:	88 0f       	add	r24, r24
    2a9c:	99 1f       	adc	r25, r25
    2a9e:	0a 94       	dec	r0
    2aa0:	e2 f7       	brpl	.-8      	; 0x2a9a <M_Dio_void_setPinValue+0x1fc>
    2aa2:	80 95       	com	r24
    2aa4:	84 23       	and	r24, r20
    2aa6:	8c 93       	st	X, r24
		}

	}

}
    2aa8:	28 96       	adiw	r28, 0x08	; 8
    2aaa:	0f b6       	in	r0, 0x3f	; 63
    2aac:	f8 94       	cli
    2aae:	de bf       	out	0x3e, r29	; 62
    2ab0:	0f be       	out	0x3f, r0	; 63
    2ab2:	cd bf       	out	0x3d, r28	; 61
    2ab4:	cf 91       	pop	r28
    2ab6:	df 91       	pop	r29
    2ab8:	08 95       	ret

00002aba <M_Dio_en_getPortValue>:
  parameters (in)  :  PortId
  parameters (out) :  Non
  Return Value     : Dio_PortLevelType
******************************************/
Dio_PortLevelType M_Dio_en_getPortValue(Dio_PortType PortId)
{
    2aba:	df 93       	push	r29
    2abc:	cf 93       	push	r28
    2abe:	00 d0       	rcall	.+0      	; 0x2ac0 <M_Dio_en_getPortValue+0x6>
    2ac0:	00 d0       	rcall	.+0      	; 0x2ac2 <M_Dio_en_getPortValue+0x8>
    2ac2:	cd b7       	in	r28, 0x3d	; 61
    2ac4:	de b7       	in	r29, 0x3e	; 62
    2ac6:	8a 83       	std	Y+2, r24	; 0x02
	Dio_PortLevelType Local_Reading;

	switch( PortId)
    2ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aca:	28 2f       	mov	r18, r24
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	3c 83       	std	Y+4, r19	; 0x04
    2ad0:	2b 83       	std	Y+3, r18	; 0x03
    2ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad6:	82 30       	cpi	r24, 0x02	; 2
    2ad8:	91 05       	cpc	r25, r1
    2ada:	d9 f0       	breq	.+54     	; 0x2b12 <M_Dio_en_getPortValue+0x58>
    2adc:	2b 81       	ldd	r18, Y+3	; 0x03
    2ade:	3c 81       	ldd	r19, Y+4	; 0x04
    2ae0:	23 30       	cpi	r18, 0x03	; 3
    2ae2:	31 05       	cpc	r19, r1
    2ae4:	34 f4       	brge	.+12     	; 0x2af2 <M_Dio_en_getPortValue+0x38>
    2ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aea:	81 30       	cpi	r24, 0x01	; 1
    2aec:	91 05       	cpc	r25, r1
    2aee:	61 f0       	breq	.+24     	; 0x2b08 <M_Dio_en_getPortValue+0x4e>
    2af0:	1e c0       	rjmp	.+60     	; 0x2b2e <M_Dio_en_getPortValue+0x74>
    2af2:	2b 81       	ldd	r18, Y+3	; 0x03
    2af4:	3c 81       	ldd	r19, Y+4	; 0x04
    2af6:	23 30       	cpi	r18, 0x03	; 3
    2af8:	31 05       	cpc	r19, r1
    2afa:	81 f0       	breq	.+32     	; 0x2b1c <M_Dio_en_getPortValue+0x62>
    2afc:	8b 81       	ldd	r24, Y+3	; 0x03
    2afe:	9c 81       	ldd	r25, Y+4	; 0x04
    2b00:	84 30       	cpi	r24, 0x04	; 4
    2b02:	91 05       	cpc	r25, r1
    2b04:	81 f0       	breq	.+32     	; 0x2b26 <M_Dio_en_getPortValue+0x6c>
    2b06:	13 c0       	rjmp	.+38     	; 0x2b2e <M_Dio_en_getPortValue+0x74>
	{
	case DIO_PORTA :Local_Reading =  PORTA_REG;break;
    2b08:	eb e3       	ldi	r30, 0x3B	; 59
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	80 81       	ld	r24, Z
    2b0e:	89 83       	std	Y+1, r24	; 0x01
    2b10:	0e c0       	rjmp	.+28     	; 0x2b2e <M_Dio_en_getPortValue+0x74>
	case DIO_PORTB :Local_Reading =  PORTB_REG;break;
    2b12:	e8 e3       	ldi	r30, 0x38	; 56
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 81       	ld	r24, Z
    2b18:	89 83       	std	Y+1, r24	; 0x01
    2b1a:	09 c0       	rjmp	.+18     	; 0x2b2e <M_Dio_en_getPortValue+0x74>
	case DIO_PORTC :Local_Reading =  PORTC_REG;break;
    2b1c:	e5 e3       	ldi	r30, 0x35	; 53
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	89 83       	std	Y+1, r24	; 0x01
    2b24:	04 c0       	rjmp	.+8      	; 0x2b2e <M_Dio_en_getPortValue+0x74>
	case DIO_PORTD :Local_Reading =  PORTD_REG;break;
    2b26:	e2 e3       	ldi	r30, 0x32	; 50
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	80 81       	ld	r24, Z
    2b2c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_Reading;
    2b2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b30:	0f 90       	pop	r0
    2b32:	0f 90       	pop	r0
    2b34:	0f 90       	pop	r0
    2b36:	0f 90       	pop	r0
    2b38:	cf 91       	pop	r28
    2b3a:	df 91       	pop	r29
    2b3c:	08 95       	ret

00002b3e <M_Dio_void_setPortValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPortValue(Dio_PortType PortId,Dio_PortLevelType Level)
{
    2b3e:	df 93       	push	r29
    2b40:	cf 93       	push	r28
    2b42:	00 d0       	rcall	.+0      	; 0x2b44 <M_Dio_void_setPortValue+0x6>
    2b44:	00 d0       	rcall	.+0      	; 0x2b46 <M_Dio_void_setPortValue+0x8>
    2b46:	cd b7       	in	r28, 0x3d	; 61
    2b48:	de b7       	in	r29, 0x3e	; 62
    2b4a:	89 83       	std	Y+1, r24	; 0x01
    2b4c:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortId)
    2b4e:	89 81       	ldd	r24, Y+1	; 0x01
    2b50:	28 2f       	mov	r18, r24
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	3c 83       	std	Y+4, r19	; 0x04
    2b56:	2b 83       	std	Y+3, r18	; 0x03
    2b58:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b5c:	82 30       	cpi	r24, 0x02	; 2
    2b5e:	91 05       	cpc	r25, r1
    2b60:	d9 f0       	breq	.+54     	; 0x2b98 <M_Dio_void_setPortValue+0x5a>
    2b62:	2b 81       	ldd	r18, Y+3	; 0x03
    2b64:	3c 81       	ldd	r19, Y+4	; 0x04
    2b66:	23 30       	cpi	r18, 0x03	; 3
    2b68:	31 05       	cpc	r19, r1
    2b6a:	34 f4       	brge	.+12     	; 0x2b78 <M_Dio_void_setPortValue+0x3a>
    2b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b70:	81 30       	cpi	r24, 0x01	; 1
    2b72:	91 05       	cpc	r25, r1
    2b74:	61 f0       	breq	.+24     	; 0x2b8e <M_Dio_void_setPortValue+0x50>
    2b76:	1e c0       	rjmp	.+60     	; 0x2bb4 <M_Dio_void_setPortValue+0x76>
    2b78:	2b 81       	ldd	r18, Y+3	; 0x03
    2b7a:	3c 81       	ldd	r19, Y+4	; 0x04
    2b7c:	23 30       	cpi	r18, 0x03	; 3
    2b7e:	31 05       	cpc	r19, r1
    2b80:	81 f0       	breq	.+32     	; 0x2ba2 <M_Dio_void_setPortValue+0x64>
    2b82:	8b 81       	ldd	r24, Y+3	; 0x03
    2b84:	9c 81       	ldd	r25, Y+4	; 0x04
    2b86:	84 30       	cpi	r24, 0x04	; 4
    2b88:	91 05       	cpc	r25, r1
    2b8a:	81 f0       	breq	.+32     	; 0x2bac <M_Dio_void_setPortValue+0x6e>
    2b8c:	13 c0       	rjmp	.+38     	; 0x2bb4 <M_Dio_void_setPortValue+0x76>
	{
    	case DIO_PORTA : PORTA_REG = Level;break;
    2b8e:	eb e3       	ldi	r30, 0x3B	; 59
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	8a 81       	ldd	r24, Y+2	; 0x02
    2b94:	80 83       	st	Z, r24
    2b96:	0e c0       	rjmp	.+28     	; 0x2bb4 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTB : PORTB_REG = Level;break;
    2b98:	e8 e3       	ldi	r30, 0x38	; 56
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9e:	80 83       	st	Z, r24
    2ba0:	09 c0       	rjmp	.+18     	; 0x2bb4 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTC : PORTC_REG = Level;break;
    2ba2:	e5 e3       	ldi	r30, 0x35	; 53
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba8:	80 83       	st	Z, r24
    2baa:	04 c0       	rjmp	.+8      	; 0x2bb4 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTD : PORTD_REG = Level;break;
    2bac:	e2 e3       	ldi	r30, 0x32	; 50
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb2:	80 83       	st	Z, r24
	}
}
    2bb4:	0f 90       	pop	r0
    2bb6:	0f 90       	pop	r0
    2bb8:	0f 90       	pop	r0
    2bba:	0f 90       	pop	r0
    2bbc:	cf 91       	pop	r28
    2bbe:	df 91       	pop	r29
    2bc0:	08 95       	ret

00002bc2 <M_Dio_void_togglePinValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_togglePinValue(Dio_ChannelType channelId)
{
    2bc2:	df 93       	push	r29
    2bc4:	cf 93       	push	r28
    2bc6:	00 d0       	rcall	.+0      	; 0x2bc8 <M_Dio_void_togglePinValue+0x6>
    2bc8:	00 d0       	rcall	.+0      	; 0x2bca <M_Dio_void_togglePinValue+0x8>
    2bca:	0f 92       	push	r0
    2bcc:	cd b7       	in	r28, 0x3d	; 61
    2bce:	de b7       	in	r29, 0x3e	; 62
    2bd0:	8b 83       	std	Y+3, r24	; 0x03
	u8 pin = channelId % 10;
    2bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd4:	9a e0       	ldi	r25, 0x0A	; 10
    2bd6:	69 2f       	mov	r22, r25
    2bd8:	0e 94 98 28 	call	0x5130	; 0x5130 <__udivmodqi4>
    2bdc:	89 2f       	mov	r24, r25
    2bde:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = channelId/ 10;
    2be0:	8b 81       	ldd	r24, Y+3	; 0x03
    2be2:	9a e0       	ldi	r25, 0x0A	; 10
    2be4:	69 2f       	mov	r22, r25
    2be6:	0e 94 98 28 	call	0x5130	; 0x5130 <__udivmodqi4>
    2bea:	89 83       	std	Y+1, r24	; 0x01

	switch(port)
    2bec:	89 81       	ldd	r24, Y+1	; 0x01
    2bee:	28 2f       	mov	r18, r24
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	3d 83       	std	Y+5, r19	; 0x05
    2bf4:	2c 83       	std	Y+4, r18	; 0x04
    2bf6:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf8:	9d 81       	ldd	r25, Y+5	; 0x05
    2bfa:	82 30       	cpi	r24, 0x02	; 2
    2bfc:	91 05       	cpc	r25, r1
    2bfe:	51 f1       	breq	.+84     	; 0x2c54 <M_Dio_void_togglePinValue+0x92>
    2c00:	2c 81       	ldd	r18, Y+4	; 0x04
    2c02:	3d 81       	ldd	r19, Y+5	; 0x05
    2c04:	23 30       	cpi	r18, 0x03	; 3
    2c06:	31 05       	cpc	r19, r1
    2c08:	34 f4       	brge	.+12     	; 0x2c16 <M_Dio_void_togglePinValue+0x54>
    2c0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c0c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c0e:	81 30       	cpi	r24, 0x01	; 1
    2c10:	91 05       	cpc	r25, r1
    2c12:	61 f0       	breq	.+24     	; 0x2c2c <M_Dio_void_togglePinValue+0x6a>
    2c14:	5a c0       	rjmp	.+180    	; 0x2cca <M_Dio_void_togglePinValue+0x108>
    2c16:	2c 81       	ldd	r18, Y+4	; 0x04
    2c18:	3d 81       	ldd	r19, Y+5	; 0x05
    2c1a:	23 30       	cpi	r18, 0x03	; 3
    2c1c:	31 05       	cpc	r19, r1
    2c1e:	71 f1       	breq	.+92     	; 0x2c7c <M_Dio_void_togglePinValue+0xba>
    2c20:	8c 81       	ldd	r24, Y+4	; 0x04
    2c22:	9d 81       	ldd	r25, Y+5	; 0x05
    2c24:	84 30       	cpi	r24, 0x04	; 4
    2c26:	91 05       	cpc	r25, r1
    2c28:	e9 f1       	breq	.+122    	; 0x2ca4 <M_Dio_void_togglePinValue+0xe2>
    2c2a:	4f c0       	rjmp	.+158    	; 0x2cca <M_Dio_void_togglePinValue+0x108>
	{
	case DIO_PORTA :TOG_BIT( PORTA_REG,pin);break;
    2c2c:	ab e3       	ldi	r26, 0x3B	; 59
    2c2e:	b0 e0       	ldi	r27, 0x00	; 0
    2c30:	eb e3       	ldi	r30, 0x3B	; 59
    2c32:	f0 e0       	ldi	r31, 0x00	; 0
    2c34:	80 81       	ld	r24, Z
    2c36:	48 2f       	mov	r20, r24
    2c38:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3a:	28 2f       	mov	r18, r24
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	02 2e       	mov	r0, r18
    2c44:	02 c0       	rjmp	.+4      	; 0x2c4a <M_Dio_void_togglePinValue+0x88>
    2c46:	88 0f       	add	r24, r24
    2c48:	99 1f       	adc	r25, r25
    2c4a:	0a 94       	dec	r0
    2c4c:	e2 f7       	brpl	.-8      	; 0x2c46 <M_Dio_void_togglePinValue+0x84>
    2c4e:	84 27       	eor	r24, r20
    2c50:	8c 93       	st	X, r24
    2c52:	3b c0       	rjmp	.+118    	; 0x2cca <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTB :TOG_BIT( PORTB_REG,pin);break;
    2c54:	a8 e3       	ldi	r26, 0x38	; 56
    2c56:	b0 e0       	ldi	r27, 0x00	; 0
    2c58:	e8 e3       	ldi	r30, 0x38	; 56
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	80 81       	ld	r24, Z
    2c5e:	48 2f       	mov	r20, r24
    2c60:	8a 81       	ldd	r24, Y+2	; 0x02
    2c62:	28 2f       	mov	r18, r24
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	02 2e       	mov	r0, r18
    2c6c:	02 c0       	rjmp	.+4      	; 0x2c72 <M_Dio_void_togglePinValue+0xb0>
    2c6e:	88 0f       	add	r24, r24
    2c70:	99 1f       	adc	r25, r25
    2c72:	0a 94       	dec	r0
    2c74:	e2 f7       	brpl	.-8      	; 0x2c6e <M_Dio_void_togglePinValue+0xac>
    2c76:	84 27       	eor	r24, r20
    2c78:	8c 93       	st	X, r24
    2c7a:	27 c0       	rjmp	.+78     	; 0x2cca <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTC :TOG_BIT( PORTC_REG,pin);break;
    2c7c:	a5 e3       	ldi	r26, 0x35	; 53
    2c7e:	b0 e0       	ldi	r27, 0x00	; 0
    2c80:	e5 e3       	ldi	r30, 0x35	; 53
    2c82:	f0 e0       	ldi	r31, 0x00	; 0
    2c84:	80 81       	ld	r24, Z
    2c86:	48 2f       	mov	r20, r24
    2c88:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8a:	28 2f       	mov	r18, r24
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	81 e0       	ldi	r24, 0x01	; 1
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	02 2e       	mov	r0, r18
    2c94:	02 c0       	rjmp	.+4      	; 0x2c9a <M_Dio_void_togglePinValue+0xd8>
    2c96:	88 0f       	add	r24, r24
    2c98:	99 1f       	adc	r25, r25
    2c9a:	0a 94       	dec	r0
    2c9c:	e2 f7       	brpl	.-8      	; 0x2c96 <M_Dio_void_togglePinValue+0xd4>
    2c9e:	84 27       	eor	r24, r20
    2ca0:	8c 93       	st	X, r24
    2ca2:	13 c0       	rjmp	.+38     	; 0x2cca <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTD :TOG_BIT( PORTD_REG,pin);break;
    2ca4:	a2 e3       	ldi	r26, 0x32	; 50
    2ca6:	b0 e0       	ldi	r27, 0x00	; 0
    2ca8:	e2 e3       	ldi	r30, 0x32	; 50
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	80 81       	ld	r24, Z
    2cae:	48 2f       	mov	r20, r24
    2cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb2:	28 2f       	mov	r18, r24
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	02 2e       	mov	r0, r18
    2cbc:	02 c0       	rjmp	.+4      	; 0x2cc2 <M_Dio_void_togglePinValue+0x100>
    2cbe:	88 0f       	add	r24, r24
    2cc0:	99 1f       	adc	r25, r25
    2cc2:	0a 94       	dec	r0
    2cc4:	e2 f7       	brpl	.-8      	; 0x2cbe <M_Dio_void_togglePinValue+0xfc>
    2cc6:	84 27       	eor	r24, r20
    2cc8:	8c 93       	st	X, r24
	}

}
    2cca:	0f 90       	pop	r0
    2ccc:	0f 90       	pop	r0
    2cce:	0f 90       	pop	r0
    2cd0:	0f 90       	pop	r0
    2cd2:	0f 90       	pop	r0
    2cd4:	cf 91       	pop	r28
    2cd6:	df 91       	pop	r29
    2cd8:	08 95       	ret

00002cda <ADC_Init>:
#include"CLCD/CLCD_Init.h"

static void (*ADC_ptr_FUNC)(void)=NULL;

void ADC_Init(ADC_ConfigType *Ptr_to_ADC)
{
    2cda:	df 93       	push	r29
    2cdc:	cf 93       	push	r28
    2cde:	cd b7       	in	r28, 0x3d	; 61
    2ce0:	de b7       	in	r29, 0x3e	; 62
    2ce2:	2a 97       	sbiw	r28, 0x0a	; 10
    2ce4:	0f b6       	in	r0, 0x3f	; 63
    2ce6:	f8 94       	cli
    2ce8:	de bf       	out	0x3e, r29	; 62
    2cea:	0f be       	out	0x3f, r0	; 63
    2cec:	cd bf       	out	0x3d, r28	; 61
    2cee:	9a 83       	std	Y+2, r25	; 0x02
    2cf0:	89 83       	std	Y+1, r24	; 0x01
	/*Select VCC*/
	switch(Ptr_to_ADC->Voltage_Ref_Value)
    2cf2:	e9 81       	ldd	r30, Y+1	; 0x01
    2cf4:	fa 81       	ldd	r31, Y+2	; 0x02
    2cf6:	80 81       	ld	r24, Z
    2cf8:	28 2f       	mov	r18, r24
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	3a 87       	std	Y+10, r19	; 0x0a
    2cfe:	29 87       	std	Y+9, r18	; 0x09
    2d00:	89 85       	ldd	r24, Y+9	; 0x09
    2d02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d04:	80 34       	cpi	r24, 0x40	; 64
    2d06:	91 05       	cpc	r25, r1
    2d08:	31 f0       	breq	.+12     	; 0x2d16 <ADC_Init+0x3c>
    2d0a:	29 85       	ldd	r18, Y+9	; 0x09
    2d0c:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d0e:	20 3c       	cpi	r18, 0xC0	; 192
    2d10:	31 05       	cpc	r19, r1
    2d12:	81 f0       	breq	.+32     	; 0x2d34 <ADC_Init+0x5a>
    2d14:	1d c0       	rjmp	.+58     	; 0x2d50 <ADC_Init+0x76>
	{
	case VCC_5V:
		CLR_BIT(ADMUX,ADMUX_REFS1);
    2d16:	a7 e2       	ldi	r26, 0x27	; 39
    2d18:	b0 e0       	ldi	r27, 0x00	; 0
    2d1a:	e7 e2       	ldi	r30, 0x27	; 39
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	80 81       	ld	r24, Z
    2d20:	8f 77       	andi	r24, 0x7F	; 127
    2d22:	8c 93       	st	X, r24
		SET_BIT(ADMUX,ADMUX_REFS0);
    2d24:	a7 e2       	ldi	r26, 0x27	; 39
    2d26:	b0 e0       	ldi	r27, 0x00	; 0
    2d28:	e7 e2       	ldi	r30, 0x27	; 39
    2d2a:	f0 e0       	ldi	r31, 0x00	; 0
    2d2c:	80 81       	ld	r24, Z
    2d2e:	80 64       	ori	r24, 0x40	; 64
    2d30:	8c 93       	st	X, r24
    2d32:	0e c0       	rjmp	.+28     	; 0x2d50 <ADC_Init+0x76>
		break;
	case VREF_2_5_V:
		SET_BIT(ADMUX,ADMUX_REFS1);
    2d34:	a7 e2       	ldi	r26, 0x27	; 39
    2d36:	b0 e0       	ldi	r27, 0x00	; 0
    2d38:	e7 e2       	ldi	r30, 0x27	; 39
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	80 81       	ld	r24, Z
    2d3e:	80 68       	ori	r24, 0x80	; 128
    2d40:	8c 93       	st	X, r24
		SET_BIT(ADMUX,ADMUX_REFS0);
    2d42:	a7 e2       	ldi	r26, 0x27	; 39
    2d44:	b0 e0       	ldi	r27, 0x00	; 0
    2d46:	e7 e2       	ldi	r30, 0x27	; 39
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	80 81       	ld	r24, Z
    2d4c:	80 64       	ori	r24, 0x40	; 64
    2d4e:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
	/*Select adjust type*/
	switch(Ptr_to_ADC->AdjustType)
    2d50:	e9 81       	ldd	r30, Y+1	; 0x01
    2d52:	fa 81       	ldd	r31, Y+2	; 0x02
    2d54:	82 81       	ldd	r24, Z+2	; 0x02
    2d56:	28 2f       	mov	r18, r24
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	38 87       	std	Y+8, r19	; 0x08
    2d5c:	2f 83       	std	Y+7, r18	; 0x07
    2d5e:	8f 81       	ldd	r24, Y+7	; 0x07
    2d60:	98 85       	ldd	r25, Y+8	; 0x08
    2d62:	00 97       	sbiw	r24, 0x00	; 0
    2d64:	31 f0       	breq	.+12     	; 0x2d72 <ADC_Init+0x98>
    2d66:	2f 81       	ldd	r18, Y+7	; 0x07
    2d68:	38 85       	ldd	r19, Y+8	; 0x08
    2d6a:	20 32       	cpi	r18, 0x20	; 32
    2d6c:	31 05       	cpc	r19, r1
    2d6e:	49 f0       	breq	.+18     	; 0x2d82 <ADC_Init+0xa8>
    2d70:	0f c0       	rjmp	.+30     	; 0x2d90 <ADC_Init+0xb6>
	{
	case Right_Adjust:
		CLR_BIT(ADMUX,ADMUX_ADLAR);
    2d72:	a7 e2       	ldi	r26, 0x27	; 39
    2d74:	b0 e0       	ldi	r27, 0x00	; 0
    2d76:	e7 e2       	ldi	r30, 0x27	; 39
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	80 81       	ld	r24, Z
    2d7c:	8f 7d       	andi	r24, 0xDF	; 223
    2d7e:	8c 93       	st	X, r24
    2d80:	07 c0       	rjmp	.+14     	; 0x2d90 <ADC_Init+0xb6>
		break;
	case Left_Adjust:
		SET_BIT(ADMUX,ADMUX_ADLAR);
    2d82:	a7 e2       	ldi	r26, 0x27	; 39
    2d84:	b0 e0       	ldi	r27, 0x00	; 0
    2d86:	e7 e2       	ldi	r30, 0x27	; 39
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	80 81       	ld	r24, Z
    2d8c:	80 62       	ori	r24, 0x20	; 32
    2d8e:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
	/*Select PRESCALLER*/
	switch(Ptr_to_ADC->Pre_Scaller)
    2d90:	e9 81       	ldd	r30, Y+1	; 0x01
    2d92:	fa 81       	ldd	r31, Y+2	; 0x02
    2d94:	81 81       	ldd	r24, Z+1	; 0x01
    2d96:	28 2f       	mov	r18, r24
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	3e 83       	std	Y+6, r19	; 0x06
    2d9c:	2d 83       	std	Y+5, r18	; 0x05
    2d9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2da0:	9e 81       	ldd	r25, Y+6	; 0x06
    2da2:	83 30       	cpi	r24, 0x03	; 3
    2da4:	91 05       	cpc	r25, r1
    2da6:	09 f4       	brne	.+2      	; 0x2daa <ADC_Init+0xd0>
    2da8:	70 c0       	rjmp	.+224    	; 0x2e8a <ADC_Init+0x1b0>
    2daa:	2d 81       	ldd	r18, Y+5	; 0x05
    2dac:	3e 81       	ldd	r19, Y+6	; 0x06
    2dae:	24 30       	cpi	r18, 0x04	; 4
    2db0:	31 05       	cpc	r19, r1
    2db2:	84 f4       	brge	.+32     	; 0x2dd4 <ADC_Init+0xfa>
    2db4:	8d 81       	ldd	r24, Y+5	; 0x05
    2db6:	9e 81       	ldd	r25, Y+6	; 0x06
    2db8:	81 30       	cpi	r24, 0x01	; 1
    2dba:	91 05       	cpc	r25, r1
    2dbc:	d1 f1       	breq	.+116    	; 0x2e32 <ADC_Init+0x158>
    2dbe:	2d 81       	ldd	r18, Y+5	; 0x05
    2dc0:	3e 81       	ldd	r19, Y+6	; 0x06
    2dc2:	22 30       	cpi	r18, 0x02	; 2
    2dc4:	31 05       	cpc	r19, r1
    2dc6:	0c f0       	brlt	.+2      	; 0x2dca <ADC_Init+0xf0>
    2dc8:	4a c0       	rjmp	.+148    	; 0x2e5e <ADC_Init+0x184>
    2dca:	8d 81       	ldd	r24, Y+5	; 0x05
    2dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dce:	00 97       	sbiw	r24, 0x00	; 0
    2dd0:	d1 f0       	breq	.+52     	; 0x2e06 <ADC_Init+0x12c>
    2dd2:	c8 c0       	rjmp	.+400    	; 0x2f64 <ADC_Init+0x28a>
    2dd4:	2d 81       	ldd	r18, Y+5	; 0x05
    2dd6:	3e 81       	ldd	r19, Y+6	; 0x06
    2dd8:	25 30       	cpi	r18, 0x05	; 5
    2dda:	31 05       	cpc	r19, r1
    2ddc:	09 f4       	brne	.+2      	; 0x2de0 <ADC_Init+0x106>
    2dde:	81 c0       	rjmp	.+258    	; 0x2ee2 <ADC_Init+0x208>
    2de0:	8d 81       	ldd	r24, Y+5	; 0x05
    2de2:	9e 81       	ldd	r25, Y+6	; 0x06
    2de4:	85 30       	cpi	r24, 0x05	; 5
    2de6:	91 05       	cpc	r25, r1
    2de8:	0c f4       	brge	.+2      	; 0x2dec <ADC_Init+0x112>
    2dea:	65 c0       	rjmp	.+202    	; 0x2eb6 <ADC_Init+0x1dc>
    2dec:	2d 81       	ldd	r18, Y+5	; 0x05
    2dee:	3e 81       	ldd	r19, Y+6	; 0x06
    2df0:	26 30       	cpi	r18, 0x06	; 6
    2df2:	31 05       	cpc	r19, r1
    2df4:	09 f4       	brne	.+2      	; 0x2df8 <ADC_Init+0x11e>
    2df6:	8b c0       	rjmp	.+278    	; 0x2f0e <ADC_Init+0x234>
    2df8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    2dfc:	87 30       	cpi	r24, 0x07	; 7
    2dfe:	91 05       	cpc	r25, r1
    2e00:	09 f4       	brne	.+2      	; 0x2e04 <ADC_Init+0x12a>
    2e02:	9b c0       	rjmp	.+310    	; 0x2f3a <ADC_Init+0x260>
    2e04:	af c0       	rjmp	.+350    	; 0x2f64 <ADC_Init+0x28a>
	{
	case DIV_BY_2_0:
		CLR_BIT(ADCSRA,ADCSRA_ADPS0);
    2e06:	a6 e2       	ldi	r26, 0x26	; 38
    2e08:	b0 e0       	ldi	r27, 0x00	; 0
    2e0a:	e6 e2       	ldi	r30, 0x26	; 38
    2e0c:	f0 e0       	ldi	r31, 0x00	; 0
    2e0e:	80 81       	ld	r24, Z
    2e10:	8e 7f       	andi	r24, 0xFE	; 254
    2e12:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADCSRA_ADPS1);
    2e14:	a6 e2       	ldi	r26, 0x26	; 38
    2e16:	b0 e0       	ldi	r27, 0x00	; 0
    2e18:	e6 e2       	ldi	r30, 0x26	; 38
    2e1a:	f0 e0       	ldi	r31, 0x00	; 0
    2e1c:	80 81       	ld	r24, Z
    2e1e:	8d 7f       	andi	r24, 0xFD	; 253
    2e20:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADCSRA_ADPS2);
    2e22:	a6 e2       	ldi	r26, 0x26	; 38
    2e24:	b0 e0       	ldi	r27, 0x00	; 0
    2e26:	e6 e2       	ldi	r30, 0x26	; 38
    2e28:	f0 e0       	ldi	r31, 0x00	; 0
    2e2a:	80 81       	ld	r24, Z
    2e2c:	8b 7f       	andi	r24, 0xFB	; 251
    2e2e:	8c 93       	st	X, r24
    2e30:	99 c0       	rjmp	.+306    	; 0x2f64 <ADC_Init+0x28a>
		break;
	case DIV_BY_2:
		SET_BIT(ADCSRA,ADCSRA_ADPS0);
    2e32:	a6 e2       	ldi	r26, 0x26	; 38
    2e34:	b0 e0       	ldi	r27, 0x00	; 0
    2e36:	e6 e2       	ldi	r30, 0x26	; 38
    2e38:	f0 e0       	ldi	r31, 0x00	; 0
    2e3a:	80 81       	ld	r24, Z
    2e3c:	81 60       	ori	r24, 0x01	; 1
    2e3e:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADCSRA_ADPS1);
    2e40:	a6 e2       	ldi	r26, 0x26	; 38
    2e42:	b0 e0       	ldi	r27, 0x00	; 0
    2e44:	e6 e2       	ldi	r30, 0x26	; 38
    2e46:	f0 e0       	ldi	r31, 0x00	; 0
    2e48:	80 81       	ld	r24, Z
    2e4a:	8d 7f       	andi	r24, 0xFD	; 253
    2e4c:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADCSRA_ADPS2);
    2e4e:	a6 e2       	ldi	r26, 0x26	; 38
    2e50:	b0 e0       	ldi	r27, 0x00	; 0
    2e52:	e6 e2       	ldi	r30, 0x26	; 38
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	80 81       	ld	r24, Z
    2e58:	8b 7f       	andi	r24, 0xFB	; 251
    2e5a:	8c 93       	st	X, r24
    2e5c:	83 c0       	rjmp	.+262    	; 0x2f64 <ADC_Init+0x28a>
		break;
	case DIV_BY_4:
		CLR_BIT(ADCSRA,ADCSRA_ADPS0);
    2e5e:	a6 e2       	ldi	r26, 0x26	; 38
    2e60:	b0 e0       	ldi	r27, 0x00	; 0
    2e62:	e6 e2       	ldi	r30, 0x26	; 38
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	80 81       	ld	r24, Z
    2e68:	8e 7f       	andi	r24, 0xFE	; 254
    2e6a:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS1);
    2e6c:	a6 e2       	ldi	r26, 0x26	; 38
    2e6e:	b0 e0       	ldi	r27, 0x00	; 0
    2e70:	e6 e2       	ldi	r30, 0x26	; 38
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	80 81       	ld	r24, Z
    2e76:	82 60       	ori	r24, 0x02	; 2
    2e78:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADCSRA_ADPS2);
    2e7a:	a6 e2       	ldi	r26, 0x26	; 38
    2e7c:	b0 e0       	ldi	r27, 0x00	; 0
    2e7e:	e6 e2       	ldi	r30, 0x26	; 38
    2e80:	f0 e0       	ldi	r31, 0x00	; 0
    2e82:	80 81       	ld	r24, Z
    2e84:	8b 7f       	andi	r24, 0xFB	; 251
    2e86:	8c 93       	st	X, r24
    2e88:	6d c0       	rjmp	.+218    	; 0x2f64 <ADC_Init+0x28a>
		break;
	case DIV_BY_8:
		SET_BIT(ADCSRA,ADCSRA_ADPS0);
    2e8a:	a6 e2       	ldi	r26, 0x26	; 38
    2e8c:	b0 e0       	ldi	r27, 0x00	; 0
    2e8e:	e6 e2       	ldi	r30, 0x26	; 38
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	80 81       	ld	r24, Z
    2e94:	81 60       	ori	r24, 0x01	; 1
    2e96:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS1);
    2e98:	a6 e2       	ldi	r26, 0x26	; 38
    2e9a:	b0 e0       	ldi	r27, 0x00	; 0
    2e9c:	e6 e2       	ldi	r30, 0x26	; 38
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	80 81       	ld	r24, Z
    2ea2:	82 60       	ori	r24, 0x02	; 2
    2ea4:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADCSRA_ADPS2);
    2ea6:	a6 e2       	ldi	r26, 0x26	; 38
    2ea8:	b0 e0       	ldi	r27, 0x00	; 0
    2eaa:	e6 e2       	ldi	r30, 0x26	; 38
    2eac:	f0 e0       	ldi	r31, 0x00	; 0
    2eae:	80 81       	ld	r24, Z
    2eb0:	8b 7f       	andi	r24, 0xFB	; 251
    2eb2:	8c 93       	st	X, r24
    2eb4:	57 c0       	rjmp	.+174    	; 0x2f64 <ADC_Init+0x28a>
		break;
	case DIV_BY_16:
		CLR_BIT(ADCSRA,ADCSRA_ADPS0);
    2eb6:	a6 e2       	ldi	r26, 0x26	; 38
    2eb8:	b0 e0       	ldi	r27, 0x00	; 0
    2eba:	e6 e2       	ldi	r30, 0x26	; 38
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	80 81       	ld	r24, Z
    2ec0:	8e 7f       	andi	r24, 0xFE	; 254
    2ec2:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADCSRA_ADPS1);
    2ec4:	a6 e2       	ldi	r26, 0x26	; 38
    2ec6:	b0 e0       	ldi	r27, 0x00	; 0
    2ec8:	e6 e2       	ldi	r30, 0x26	; 38
    2eca:	f0 e0       	ldi	r31, 0x00	; 0
    2ecc:	80 81       	ld	r24, Z
    2ece:	8d 7f       	andi	r24, 0xFD	; 253
    2ed0:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS2);
    2ed2:	a6 e2       	ldi	r26, 0x26	; 38
    2ed4:	b0 e0       	ldi	r27, 0x00	; 0
    2ed6:	e6 e2       	ldi	r30, 0x26	; 38
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	80 81       	ld	r24, Z
    2edc:	84 60       	ori	r24, 0x04	; 4
    2ede:	8c 93       	st	X, r24
    2ee0:	41 c0       	rjmp	.+130    	; 0x2f64 <ADC_Init+0x28a>
		break;
	case DIV_BY_32:
		SET_BIT(ADCSRA,ADCSRA_ADPS0);
    2ee2:	a6 e2       	ldi	r26, 0x26	; 38
    2ee4:	b0 e0       	ldi	r27, 0x00	; 0
    2ee6:	e6 e2       	ldi	r30, 0x26	; 38
    2ee8:	f0 e0       	ldi	r31, 0x00	; 0
    2eea:	80 81       	ld	r24, Z
    2eec:	81 60       	ori	r24, 0x01	; 1
    2eee:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADCSRA_ADPS1);
    2ef0:	a6 e2       	ldi	r26, 0x26	; 38
    2ef2:	b0 e0       	ldi	r27, 0x00	; 0
    2ef4:	e6 e2       	ldi	r30, 0x26	; 38
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	80 81       	ld	r24, Z
    2efa:	8d 7f       	andi	r24, 0xFD	; 253
    2efc:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS2);
    2efe:	a6 e2       	ldi	r26, 0x26	; 38
    2f00:	b0 e0       	ldi	r27, 0x00	; 0
    2f02:	e6 e2       	ldi	r30, 0x26	; 38
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	80 81       	ld	r24, Z
    2f08:	84 60       	ori	r24, 0x04	; 4
    2f0a:	8c 93       	st	X, r24
    2f0c:	2b c0       	rjmp	.+86     	; 0x2f64 <ADC_Init+0x28a>
		break;
	case DIV_BY_64:
		CLR_BIT(ADCSRA,ADCSRA_ADPS0);
    2f0e:	a6 e2       	ldi	r26, 0x26	; 38
    2f10:	b0 e0       	ldi	r27, 0x00	; 0
    2f12:	e6 e2       	ldi	r30, 0x26	; 38
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	80 81       	ld	r24, Z
    2f18:	8e 7f       	andi	r24, 0xFE	; 254
    2f1a:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS1);
    2f1c:	a6 e2       	ldi	r26, 0x26	; 38
    2f1e:	b0 e0       	ldi	r27, 0x00	; 0
    2f20:	e6 e2       	ldi	r30, 0x26	; 38
    2f22:	f0 e0       	ldi	r31, 0x00	; 0
    2f24:	80 81       	ld	r24, Z
    2f26:	82 60       	ori	r24, 0x02	; 2
    2f28:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS2);
    2f2a:	a6 e2       	ldi	r26, 0x26	; 38
    2f2c:	b0 e0       	ldi	r27, 0x00	; 0
    2f2e:	e6 e2       	ldi	r30, 0x26	; 38
    2f30:	f0 e0       	ldi	r31, 0x00	; 0
    2f32:	80 81       	ld	r24, Z
    2f34:	84 60       	ori	r24, 0x04	; 4
    2f36:	8c 93       	st	X, r24
    2f38:	15 c0       	rjmp	.+42     	; 0x2f64 <ADC_Init+0x28a>
		break;
	case DIV_BY_128:
		SET_BIT(ADCSRA,ADCSRA_ADPS0);
    2f3a:	a6 e2       	ldi	r26, 0x26	; 38
    2f3c:	b0 e0       	ldi	r27, 0x00	; 0
    2f3e:	e6 e2       	ldi	r30, 0x26	; 38
    2f40:	f0 e0       	ldi	r31, 0x00	; 0
    2f42:	80 81       	ld	r24, Z
    2f44:	81 60       	ori	r24, 0x01	; 1
    2f46:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS1);
    2f48:	a6 e2       	ldi	r26, 0x26	; 38
    2f4a:	b0 e0       	ldi	r27, 0x00	; 0
    2f4c:	e6 e2       	ldi	r30, 0x26	; 38
    2f4e:	f0 e0       	ldi	r31, 0x00	; 0
    2f50:	80 81       	ld	r24, Z
    2f52:	82 60       	ori	r24, 0x02	; 2
    2f54:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS2);
    2f56:	a6 e2       	ldi	r26, 0x26	; 38
    2f58:	b0 e0       	ldi	r27, 0x00	; 0
    2f5a:	e6 e2       	ldi	r30, 0x26	; 38
    2f5c:	f0 e0       	ldi	r31, 0x00	; 0
    2f5e:	80 81       	ld	r24, Z
    2f60:	84 60       	ori	r24, 0x04	; 4
    2f62:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
	/*Enable or Disable Auto trigger*/
	switch(Ptr_to_ADC->Trigger)
    2f64:	e9 81       	ldd	r30, Y+1	; 0x01
    2f66:	fa 81       	ldd	r31, Y+2	; 0x02
    2f68:	84 81       	ldd	r24, Z+4	; 0x04
    2f6a:	28 2f       	mov	r18, r24
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	3c 83       	std	Y+4, r19	; 0x04
    2f70:	2b 83       	std	Y+3, r18	; 0x03
    2f72:	8b 81       	ldd	r24, Y+3	; 0x03
    2f74:	9c 81       	ldd	r25, Y+4	; 0x04
    2f76:	00 97       	sbiw	r24, 0x00	; 0
    2f78:	31 f0       	breq	.+12     	; 0x2f86 <ADC_Init+0x2ac>
    2f7a:	2b 81       	ldd	r18, Y+3	; 0x03
    2f7c:	3c 81       	ldd	r19, Y+4	; 0x04
    2f7e:	21 30       	cpi	r18, 0x01	; 1
    2f80:	31 05       	cpc	r19, r1
    2f82:	49 f0       	breq	.+18     	; 0x2f96 <ADC_Init+0x2bc>
    2f84:	0f c0       	rjmp	.+30     	; 0x2fa4 <ADC_Init+0x2ca>
	{
	case AUTO_Trigger_Enable:
		SET_BIT(ADCSRA,ADCSRA_ADATE);
    2f86:	a6 e2       	ldi	r26, 0x26	; 38
    2f88:	b0 e0       	ldi	r27, 0x00	; 0
    2f8a:	e6 e2       	ldi	r30, 0x26	; 38
    2f8c:	f0 e0       	ldi	r31, 0x00	; 0
    2f8e:	80 81       	ld	r24, Z
    2f90:	80 62       	ori	r24, 0x20	; 32
    2f92:	8c 93       	st	X, r24
    2f94:	07 c0       	rjmp	.+14     	; 0x2fa4 <ADC_Init+0x2ca>
		break;
	case AUTO_Trigger_Disable:
		CLR_BIT(ADCSRA,ADCSRA_ADATE);
    2f96:	a6 e2       	ldi	r26, 0x26	; 38
    2f98:	b0 e0       	ldi	r27, 0x00	; 0
    2f9a:	e6 e2       	ldi	r30, 0x26	; 38
    2f9c:	f0 e0       	ldi	r31, 0x00	; 0
    2f9e:	80 81       	ld	r24, Z
    2fa0:	8f 7d       	andi	r24, 0xDF	; 223
    2fa2:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
	/*Trigger type*/
	switch(Ptr_to_ADC->Trigger_Type)
    2fa4:	e9 81       	ldd	r30, Y+1	; 0x01
    2fa6:	fa 81       	ldd	r31, Y+2	; 0x02
    2fa8:	85 81       	ldd	r24, Z+5	; 0x05
    2faa:	88 2f       	mov	r24, r24
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	00 97       	sbiw	r24, 0x00	; 0
    2fb0:	69 f4       	brne	.+26     	; 0x2fcc <ADC_Init+0x2f2>
	{
	case Free_Runnin_Mode:
		SFIOR &= SFIOR_ADC_FREE_RUNNING_MODE_CLEAR;
    2fb2:	a0 e5       	ldi	r26, 0x50	; 80
    2fb4:	b0 e0       	ldi	r27, 0x00	; 0
    2fb6:	e0 e5       	ldi	r30, 0x50	; 80
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	80 81       	ld	r24, Z
    2fbc:	8f 71       	andi	r24, 0x1F	; 31
    2fbe:	8c 93       	st	X, r24
		SFIOR |= SFIOR_ADC_FREE_RUNNING_MODE_SET;
    2fc0:	a0 e5       	ldi	r26, 0x50	; 80
    2fc2:	b0 e0       	ldi	r27, 0x00	; 0
    2fc4:	e0 e5       	ldi	r30, 0x50	; 80
    2fc6:	f0 e0       	ldi	r31, 0x00	; 0
    2fc8:	80 81       	ld	r24, Z
    2fca:	8c 93       	st	X, r24
	default:
		break;
	}

	/*ADC_ENABLE*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    2fcc:	a6 e2       	ldi	r26, 0x26	; 38
    2fce:	b0 e0       	ldi	r27, 0x00	; 0
    2fd0:	e6 e2       	ldi	r30, 0x26	; 38
    2fd2:	f0 e0       	ldi	r31, 0x00	; 0
    2fd4:	80 81       	ld	r24, Z
    2fd6:	80 68       	ori	r24, 0x80	; 128
    2fd8:	8c 93       	st	X, r24
}
    2fda:	2a 96       	adiw	r28, 0x0a	; 10
    2fdc:	0f b6       	in	r0, 0x3f	; 63
    2fde:	f8 94       	cli
    2fe0:	de bf       	out	0x3e, r29	; 62
    2fe2:	0f be       	out	0x3f, r0	; 63
    2fe4:	cd bf       	out	0x3d, r28	; 61
    2fe6:	cf 91       	pop	r28
    2fe8:	df 91       	pop	r29
    2fea:	08 95       	ret

00002fec <ADC_getDigitalValueSynchNonBlocking>:


u16 ADC_getDigitalValueSynchNonBlocking(Analog_Channel_Select Channel,ADC_Start ADC_Status)
{
    2fec:	df 93       	push	r29
    2fee:	cf 93       	push	r28
    2ff0:	cd b7       	in	r28, 0x3d	; 61
    2ff2:	de b7       	in	r29, 0x3e	; 62
    2ff4:	2a 97       	sbiw	r28, 0x0a	; 10
    2ff6:	0f b6       	in	r0, 0x3f	; 63
    2ff8:	f8 94       	cli
    2ffa:	de bf       	out	0x3e, r29	; 62
    2ffc:	0f be       	out	0x3f, r0	; 63
    2ffe:	cd bf       	out	0x3d, r28	; 61
    3000:	8d 83       	std	Y+5, r24	; 0x05
    3002:	6e 83       	std	Y+6, r22	; 0x06
	u16 Reading_value=0;
    3004:	1c 82       	std	Y+4, r1	; 0x04
    3006:	1b 82       	std	Y+3, r1	; 0x03
	u16 Counter=0;
    3008:	1a 82       	std	Y+2, r1	; 0x02
    300a:	19 82       	std	Y+1, r1	; 0x01

	/*Select ADC Port*/
	ADMUX &= ADMUX_MUX_CLEAR;
    300c:	a7 e2       	ldi	r26, 0x27	; 39
    300e:	b0 e0       	ldi	r27, 0x00	; 0
    3010:	e7 e2       	ldi	r30, 0x27	; 39
    3012:	f0 e0       	ldi	r31, 0x00	; 0
    3014:	80 81       	ld	r24, Z
    3016:	80 7e       	andi	r24, 0xE0	; 224
    3018:	8c 93       	st	X, r24
	ADMUX |= Channel;
    301a:	a7 e2       	ldi	r26, 0x27	; 39
    301c:	b0 e0       	ldi	r27, 0x00	; 0
    301e:	e7 e2       	ldi	r30, 0x27	; 39
    3020:	f0 e0       	ldi	r31, 0x00	; 0
    3022:	90 81       	ld	r25, Z
    3024:	8d 81       	ldd	r24, Y+5	; 0x05
    3026:	89 2b       	or	r24, r25
    3028:	8c 93       	st	X, r24
	/*Enable ADC*/
	switch(ADC_Status)
    302a:	8e 81       	ldd	r24, Y+6	; 0x06
    302c:	28 2f       	mov	r18, r24
    302e:	30 e0       	ldi	r19, 0x00	; 0
    3030:	3a 87       	std	Y+10, r19	; 0x0a
    3032:	29 87       	std	Y+9, r18	; 0x09
    3034:	89 85       	ldd	r24, Y+9	; 0x09
    3036:	9a 85       	ldd	r25, Y+10	; 0x0a
    3038:	00 97       	sbiw	r24, 0x00	; 0
    303a:	69 f0       	breq	.+26     	; 0x3056 <ADC_getDigitalValueSynchNonBlocking+0x6a>
    303c:	29 85       	ldd	r18, Y+9	; 0x09
    303e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3040:	21 30       	cpi	r18, 0x01	; 1
    3042:	31 05       	cpc	r19, r1
    3044:	79 f4       	brne	.+30     	; 0x3064 <ADC_getDigitalValueSynchNonBlocking+0x78>
	{
	case ENABLE:
		SET_BIT(ADCSRA,ADCSRA_ADEN);
    3046:	a6 e2       	ldi	r26, 0x26	; 38
    3048:	b0 e0       	ldi	r27, 0x00	; 0
    304a:	e6 e2       	ldi	r30, 0x26	; 38
    304c:	f0 e0       	ldi	r31, 0x00	; 0
    304e:	80 81       	ld	r24, Z
    3050:	80 68       	ori	r24, 0x80	; 128
    3052:	8c 93       	st	X, r24
    3054:	07 c0       	rjmp	.+14     	; 0x3064 <ADC_getDigitalValueSynchNonBlocking+0x78>
		break;
	case DISABLE:
		CLR_BIT(ADCSRA,ADCSRA_ADEN);
    3056:	a6 e2       	ldi	r26, 0x26	; 38
    3058:	b0 e0       	ldi	r27, 0x00	; 0
    305a:	e6 e2       	ldi	r30, 0x26	; 38
    305c:	f0 e0       	ldi	r31, 0x00	; 0
    305e:	80 81       	ld	r24, Z
    3060:	8f 77       	andi	r24, 0x7F	; 127
    3062:	8c 93       	st	X, r24
		break;
	}
	/*Start Conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    3064:	a6 e2       	ldi	r26, 0x26	; 38
    3066:	b0 e0       	ldi	r27, 0x00	; 0
    3068:	e6 e2       	ldi	r30, 0x26	; 38
    306a:	f0 e0       	ldi	r31, 0x00	; 0
    306c:	80 81       	ld	r24, Z
    306e:	80 64       	ori	r24, 0x40	; 64
    3070:	8c 93       	st	X, r24
    3072:	05 c0       	rjmp	.+10     	; 0x307e <ADC_getDigitalValueSynchNonBlocking+0x92>
	/*loop for the conversion to end*/
	while((GET_BIT(ADCSRA,ADCSRA_ADSC))==1 || Counter<MAX_DELAY)
	{
		Counter++;
    3074:	89 81       	ldd	r24, Y+1	; 0x01
    3076:	9a 81       	ldd	r25, Y+2	; 0x02
    3078:	01 96       	adiw	r24, 0x01	; 1
    307a:	9a 83       	std	Y+2, r25	; 0x02
    307c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/*Start Conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
	/*loop for the conversion to end*/
	while((GET_BIT(ADCSRA,ADCSRA_ADSC))==1 || Counter<MAX_DELAY)
    307e:	e6 e2       	ldi	r30, 0x26	; 38
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	80 81       	ld	r24, Z
    3084:	82 95       	swap	r24
    3086:	86 95       	lsr	r24
    3088:	86 95       	lsr	r24
    308a:	83 70       	andi	r24, 0x03	; 3
    308c:	88 2f       	mov	r24, r24
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	81 70       	andi	r24, 0x01	; 1
    3092:	90 70       	andi	r25, 0x00	; 0
    3094:	88 23       	and	r24, r24
    3096:	71 f7       	brne	.-36     	; 0x3074 <ADC_getDigitalValueSynchNonBlocking+0x88>
    3098:	89 81       	ldd	r24, Y+1	; 0x01
    309a:	9a 81       	ldd	r25, Y+2	; 0x02
    309c:	33 ec       	ldi	r19, 0xC3	; 195
    309e:	80 35       	cpi	r24, 0x50	; 80
    30a0:	93 07       	cpc	r25, r19
    30a2:	40 f3       	brcs	.-48     	; 0x3074 <ADC_getDigitalValueSynchNonBlocking+0x88>
	{
		Counter++;
	}
	if((GET_BIT(ADCSRA,ADCSRA_ADSC))==0)
    30a4:	e6 e2       	ldi	r30, 0x26	; 38
    30a6:	f0 e0       	ldi	r31, 0x00	; 0
    30a8:	80 81       	ld	r24, Z
    30aa:	82 95       	swap	r24
    30ac:	86 95       	lsr	r24
    30ae:	86 95       	lsr	r24
    30b0:	83 70       	andi	r24, 0x03	; 3
    30b2:	88 2f       	mov	r24, r24
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	81 70       	andi	r24, 0x01	; 1
    30b8:	90 70       	andi	r25, 0x00	; 0
    30ba:	00 97       	sbiw	r24, 0x00	; 0
    30bc:	39 f4       	brne	.+14     	; 0x30cc <ADC_getDigitalValueSynchNonBlocking+0xe0>
	{

		return ADCL_L;
    30be:	e4 e2       	ldi	r30, 0x24	; 36
    30c0:	f0 e0       	ldi	r31, 0x00	; 0
    30c2:	80 81       	ld	r24, Z
    30c4:	91 81       	ldd	r25, Z+1	; 0x01
    30c6:	98 87       	std	Y+8, r25	; 0x08
    30c8:	8f 83       	std	Y+7, r24	; 0x07
    30ca:	02 c0       	rjmp	.+4      	; 0x30d0 <ADC_getDigitalValueSynchNonBlocking+0xe4>
	}
	else
	{
		return 0;
    30cc:	18 86       	std	Y+8, r1	; 0x08
    30ce:	1f 82       	std	Y+7, r1	; 0x07
    30d0:	8f 81       	ldd	r24, Y+7	; 0x07
    30d2:	98 85       	ldd	r25, Y+8	; 0x08
	}
}
    30d4:	2a 96       	adiw	r28, 0x0a	; 10
    30d6:	0f b6       	in	r0, 0x3f	; 63
    30d8:	f8 94       	cli
    30da:	de bf       	out	0x3e, r29	; 62
    30dc:	0f be       	out	0x3f, r0	; 63
    30de:	cd bf       	out	0x3d, r28	; 61
    30e0:	cf 91       	pop	r28
    30e2:	df 91       	pop	r29
    30e4:	08 95       	ret

000030e6 <ADC_getDigitalValueAsynchCallBack>:


void ADC_getDigitalValueAsynchCallBack(Analog_Channel_Select Channel,ADC_Start ADC_Status,Interrupt_Status Interrupt_status)
{
    30e6:	df 93       	push	r29
    30e8:	cf 93       	push	r28
    30ea:	cd b7       	in	r28, 0x3d	; 61
    30ec:	de b7       	in	r29, 0x3e	; 62
    30ee:	27 97       	sbiw	r28, 0x07	; 7
    30f0:	0f b6       	in	r0, 0x3f	; 63
    30f2:	f8 94       	cli
    30f4:	de bf       	out	0x3e, r29	; 62
    30f6:	0f be       	out	0x3f, r0	; 63
    30f8:	cd bf       	out	0x3d, r28	; 61
    30fa:	89 83       	std	Y+1, r24	; 0x01
    30fc:	6a 83       	std	Y+2, r22	; 0x02
    30fe:	4b 83       	std	Y+3, r20	; 0x03

	/*Select ADC Port*/
	ADMUX &= ADMUX_MUX_CLEAR;
    3100:	a7 e2       	ldi	r26, 0x27	; 39
    3102:	b0 e0       	ldi	r27, 0x00	; 0
    3104:	e7 e2       	ldi	r30, 0x27	; 39
    3106:	f0 e0       	ldi	r31, 0x00	; 0
    3108:	80 81       	ld	r24, Z
    310a:	80 7e       	andi	r24, 0xE0	; 224
    310c:	8c 93       	st	X, r24
	ADMUX |= Channel;
    310e:	a7 e2       	ldi	r26, 0x27	; 39
    3110:	b0 e0       	ldi	r27, 0x00	; 0
    3112:	e7 e2       	ldi	r30, 0x27	; 39
    3114:	f0 e0       	ldi	r31, 0x00	; 0
    3116:	90 81       	ld	r25, Z
    3118:	89 81       	ldd	r24, Y+1	; 0x01
    311a:	89 2b       	or	r24, r25
    311c:	8c 93       	st	X, r24
	/*Enable ADC*/
	switch(ADC_Status)
    311e:	8a 81       	ldd	r24, Y+2	; 0x02
    3120:	28 2f       	mov	r18, r24
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	3f 83       	std	Y+7, r19	; 0x07
    3126:	2e 83       	std	Y+6, r18	; 0x06
    3128:	8e 81       	ldd	r24, Y+6	; 0x06
    312a:	9f 81       	ldd	r25, Y+7	; 0x07
    312c:	00 97       	sbiw	r24, 0x00	; 0
    312e:	a1 f0       	breq	.+40     	; 0x3158 <ADC_getDigitalValueAsynchCallBack+0x72>
    3130:	2e 81       	ldd	r18, Y+6	; 0x06
    3132:	3f 81       	ldd	r19, Y+7	; 0x07
    3134:	21 30       	cpi	r18, 0x01	; 1
    3136:	31 05       	cpc	r19, r1
    3138:	b1 f4       	brne	.+44     	; 0x3166 <ADC_getDigitalValueAsynchCallBack+0x80>
	{
	case ENABLE:
		ADCSRA &= ADCSRA_ADC_ENABLE_MASK_CLEAR;
    313a:	a6 e2       	ldi	r26, 0x26	; 38
    313c:	b0 e0       	ldi	r27, 0x00	; 0
    313e:	e6 e2       	ldi	r30, 0x26	; 38
    3140:	f0 e0       	ldi	r31, 0x00	; 0
    3142:	80 81       	ld	r24, Z
    3144:	8f 77       	andi	r24, 0x7F	; 127
    3146:	8c 93       	st	X, r24
		ADCSRA |= ADCSRA_ADC_ENABLE_MASK_SET;
    3148:	a6 e2       	ldi	r26, 0x26	; 38
    314a:	b0 e0       	ldi	r27, 0x00	; 0
    314c:	e6 e2       	ldi	r30, 0x26	; 38
    314e:	f0 e0       	ldi	r31, 0x00	; 0
    3150:	80 81       	ld	r24, Z
    3152:	80 68       	ori	r24, 0x80	; 128
    3154:	8c 93       	st	X, r24
    3156:	07 c0       	rjmp	.+14     	; 0x3166 <ADC_getDigitalValueAsynchCallBack+0x80>
		break;
	case DISABLE:
		ADCSRA &= ADCSRA_ADC_ENABLE_MASK_CLEAR;
    3158:	a6 e2       	ldi	r26, 0x26	; 38
    315a:	b0 e0       	ldi	r27, 0x00	; 0
    315c:	e6 e2       	ldi	r30, 0x26	; 38
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	80 81       	ld	r24, Z
    3162:	8f 77       	andi	r24, 0x7F	; 127
    3164:	8c 93       	st	X, r24
		break;
	}


	/*Enable Interrupt*/
	switch(Interrupt_status)
    3166:	8b 81       	ldd	r24, Y+3	; 0x03
    3168:	28 2f       	mov	r18, r24
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	3d 83       	std	Y+5, r19	; 0x05
    316e:	2c 83       	std	Y+4, r18	; 0x04
    3170:	8c 81       	ldd	r24, Y+4	; 0x04
    3172:	9d 81       	ldd	r25, Y+5	; 0x05
    3174:	00 97       	sbiw	r24, 0x00	; 0
    3176:	31 f0       	breq	.+12     	; 0x3184 <ADC_getDigitalValueAsynchCallBack+0x9e>
    3178:	2c 81       	ldd	r18, Y+4	; 0x04
    317a:	3d 81       	ldd	r19, Y+5	; 0x05
    317c:	21 30       	cpi	r18, 0x01	; 1
    317e:	31 05       	cpc	r19, r1
    3180:	81 f0       	breq	.+32     	; 0x31a2 <ADC_getDigitalValueAsynchCallBack+0xbc>
    3182:	16 c0       	rjmp	.+44     	; 0x31b0 <ADC_getDigitalValueAsynchCallBack+0xca>
	{
	case Interrupt_Enable:
		ADCSRA &= ADC_Interrupt_Clear_Mask;
    3184:	a6 e2       	ldi	r26, 0x26	; 38
    3186:	b0 e0       	ldi	r27, 0x00	; 0
    3188:	e6 e2       	ldi	r30, 0x26	; 38
    318a:	f0 e0       	ldi	r31, 0x00	; 0
    318c:	80 81       	ld	r24, Z
    318e:	87 7f       	andi	r24, 0xF7	; 247
    3190:	8c 93       	st	X, r24
		ADCSRA |= ADC_Interrupt_Set_Mask;
    3192:	a6 e2       	ldi	r26, 0x26	; 38
    3194:	b0 e0       	ldi	r27, 0x00	; 0
    3196:	e6 e2       	ldi	r30, 0x26	; 38
    3198:	f0 e0       	ldi	r31, 0x00	; 0
    319a:	80 81       	ld	r24, Z
    319c:	88 60       	ori	r24, 0x08	; 8
    319e:	8c 93       	st	X, r24
    31a0:	07 c0       	rjmp	.+14     	; 0x31b0 <ADC_getDigitalValueAsynchCallBack+0xca>
		break;
	case Interrupt_Disable:
		ADCSRA &= ADC_Interrupt_Clear_Mask;
    31a2:	a6 e2       	ldi	r26, 0x26	; 38
    31a4:	b0 e0       	ldi	r27, 0x00	; 0
    31a6:	e6 e2       	ldi	r30, 0x26	; 38
    31a8:	f0 e0       	ldi	r31, 0x00	; 0
    31aa:	80 81       	ld	r24, Z
    31ac:	87 7f       	andi	r24, 0xF7	; 247
    31ae:	8c 93       	st	X, r24
	default:
		break;
	}
	//SET_BIT(ADCSRA,ADCSRA_ADIE);
	/*Start Conversion*/
	ADCSRA &= ADCSRA_ADC_START_CONV_CLEAR;
    31b0:	a6 e2       	ldi	r26, 0x26	; 38
    31b2:	b0 e0       	ldi	r27, 0x00	; 0
    31b4:	e6 e2       	ldi	r30, 0x26	; 38
    31b6:	f0 e0       	ldi	r31, 0x00	; 0
    31b8:	80 81       	ld	r24, Z
    31ba:	8f 7b       	andi	r24, 0xBF	; 191
    31bc:	8c 93       	st	X, r24
	ADCSRA |= ADCSRA_ADC_START_CONV_SET;
    31be:	a6 e2       	ldi	r26, 0x26	; 38
    31c0:	b0 e0       	ldi	r27, 0x00	; 0
    31c2:	e6 e2       	ldi	r30, 0x26	; 38
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	80 81       	ld	r24, Z
    31c8:	80 64       	ori	r24, 0x40	; 64
    31ca:	8c 93       	st	X, r24

}
    31cc:	27 96       	adiw	r28, 0x07	; 7
    31ce:	0f b6       	in	r0, 0x3f	; 63
    31d0:	f8 94       	cli
    31d2:	de bf       	out	0x3e, r29	; 62
    31d4:	0f be       	out	0x3f, r0	; 63
    31d6:	cd bf       	out	0x3d, r28	; 61
    31d8:	cf 91       	pop	r28
    31da:	df 91       	pop	r29
    31dc:	08 95       	ret

000031de <ADC_Get_Value_Reading>:

u16 ADC_Get_Value_Reading(void)
{
    31de:	df 93       	push	r29
    31e0:	cf 93       	push	r28
    31e2:	cd b7       	in	r28, 0x3d	; 61
    31e4:	de b7       	in	r29, 0x3e	; 62
	return ADCL_L;
    31e6:	e4 e2       	ldi	r30, 0x24	; 36
    31e8:	f0 e0       	ldi	r31, 0x00	; 0
    31ea:	80 81       	ld	r24, Z
    31ec:	91 81       	ldd	r25, Z+1	; 0x01
}
    31ee:	cf 91       	pop	r28
    31f0:	df 91       	pop	r29
    31f2:	08 95       	ret

000031f4 <ADC_Interrupt_Enable>:
void ADC_Interrupt_Enable(void)
{
    31f4:	df 93       	push	r29
    31f6:	cf 93       	push	r28
    31f8:	cd b7       	in	r28, 0x3d	; 61
    31fa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADCSRA_ADIE);
    31fc:	a6 e2       	ldi	r26, 0x26	; 38
    31fe:	b0 e0       	ldi	r27, 0x00	; 0
    3200:	e6 e2       	ldi	r30, 0x26	; 38
    3202:	f0 e0       	ldi	r31, 0x00	; 0
    3204:	80 81       	ld	r24, Z
    3206:	88 60       	ori	r24, 0x08	; 8
    3208:	8c 93       	st	X, r24

}
    320a:	cf 91       	pop	r28
    320c:	df 91       	pop	r29
    320e:	08 95       	ret

00003210 <ADC_Interrupt_Disable>:
void ADC_Interrupt_Disable(void)
{
    3210:	df 93       	push	r29
    3212:	cf 93       	push	r28
    3214:	cd b7       	in	r28, 0x3d	; 61
    3216:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
    3218:	a6 e2       	ldi	r26, 0x26	; 38
    321a:	b0 e0       	ldi	r27, 0x00	; 0
    321c:	e6 e2       	ldi	r30, 0x26	; 38
    321e:	f0 e0       	ldi	r31, 0x00	; 0
    3220:	80 81       	ld	r24, Z
    3222:	87 7f       	andi	r24, 0xF7	; 247
    3224:	8c 93       	st	X, r24

}
    3226:	cf 91       	pop	r28
    3228:	df 91       	pop	r29
    322a:	08 95       	ret

0000322c <ADC_u8INTSetCallBack>:
void ADC_u8INTSetCallBack(void (*Copy_pvINTFunc)(void))
{
    322c:	df 93       	push	r29
    322e:	cf 93       	push	r28
    3230:	00 d0       	rcall	.+0      	; 0x3232 <ADC_u8INTSetCallBack+0x6>
    3232:	cd b7       	in	r28, 0x3d	; 61
    3234:	de b7       	in	r29, 0x3e	; 62
    3236:	9a 83       	std	Y+2, r25	; 0x02
    3238:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvINTFunc != NULL)
    323a:	89 81       	ldd	r24, Y+1	; 0x01
    323c:	9a 81       	ldd	r25, Y+2	; 0x02
    323e:	00 97       	sbiw	r24, 0x00	; 0
    3240:	31 f0       	breq	.+12     	; 0x324e <ADC_u8INTSetCallBack+0x22>
	{
		ADC_ptr_FUNC=Copy_pvINTFunc;
    3242:	89 81       	ldd	r24, Y+1	; 0x01
    3244:	9a 81       	ldd	r25, Y+2	; 0x02
    3246:	90 93 a4 02 	sts	0x02A4, r25
    324a:	80 93 a3 02 	sts	0x02A3, r24
	}
}
    324e:	0f 90       	pop	r0
    3250:	0f 90       	pop	r0
    3252:	cf 91       	pop	r28
    3254:	df 91       	pop	r29
    3256:	08 95       	ret

00003258 <__vector_16>:
void __vector_16 (void)  __attribute__((signal));
void __vector_16 (void)
{
    3258:	1f 92       	push	r1
    325a:	0f 92       	push	r0
    325c:	0f b6       	in	r0, 0x3f	; 63
    325e:	0f 92       	push	r0
    3260:	11 24       	eor	r1, r1
    3262:	2f 93       	push	r18
    3264:	3f 93       	push	r19
    3266:	4f 93       	push	r20
    3268:	5f 93       	push	r21
    326a:	6f 93       	push	r22
    326c:	7f 93       	push	r23
    326e:	8f 93       	push	r24
    3270:	9f 93       	push	r25
    3272:	af 93       	push	r26
    3274:	bf 93       	push	r27
    3276:	ef 93       	push	r30
    3278:	ff 93       	push	r31
    327a:	df 93       	push	r29
    327c:	cf 93       	push	r28
    327e:	cd b7       	in	r28, 0x3d	; 61
    3280:	de b7       	in	r29, 0x3e	; 62
	if(ADC_ptr_FUNC != NULL)
    3282:	80 91 a3 02 	lds	r24, 0x02A3
    3286:	90 91 a4 02 	lds	r25, 0x02A4
    328a:	00 97       	sbiw	r24, 0x00	; 0
    328c:	29 f0       	breq	.+10     	; 0x3298 <__vector_16+0x40>
	{
		ADC_ptr_FUNC();
    328e:	e0 91 a3 02 	lds	r30, 0x02A3
    3292:	f0 91 a4 02 	lds	r31, 0x02A4
    3296:	09 95       	icall
	}
	else
	{
		/*Stop*/
	}
}
    3298:	cf 91       	pop	r28
    329a:	df 91       	pop	r29
    329c:	ff 91       	pop	r31
    329e:	ef 91       	pop	r30
    32a0:	bf 91       	pop	r27
    32a2:	af 91       	pop	r26
    32a4:	9f 91       	pop	r25
    32a6:	8f 91       	pop	r24
    32a8:	7f 91       	pop	r23
    32aa:	6f 91       	pop	r22
    32ac:	5f 91       	pop	r21
    32ae:	4f 91       	pop	r20
    32b0:	3f 91       	pop	r19
    32b2:	2f 91       	pop	r18
    32b4:	0f 90       	pop	r0
    32b6:	0f be       	out	0x3f, r0	; 63
    32b8:	0f 90       	pop	r0
    32ba:	1f 90       	pop	r1
    32bc:	18 95       	reti

000032be <H_UltraSonic_Void_Init>:
static volatile u16 Reading_3=0;
static volatile u16 Distance=0;
static volatile u8 No_of_overflows=0;

void H_UltraSonic_Void_Init()
{
    32be:	df 93       	push	r29
    32c0:	cf 93       	push	r28
    32c2:	cd b7       	in	r28, 0x3d	; 61
    32c4:	de b7       	in	r29, 0x3e	; 62
    32c6:	68 97       	sbiw	r28, 0x18	; 24
    32c8:	0f b6       	in	r0, 0x3f	; 63
    32ca:	f8 94       	cli
    32cc:	de bf       	out	0x3e, r29	; 62
    32ce:	0f be       	out	0x3f, r0	; 63
    32d0:	cd bf       	out	0x3d, r28	; 61
	H_LCD_void_Init();
    32d2:	0e 94 8d 23 	call	0x471a	; 0x471a <H_LCD_void_Init>

	M_TIMER1_void_Init(TIMER_1_NM,TIMER_1_NWG);
    32d6:	80 e0       	ldi	r24, 0x00	; 0
    32d8:	60 e0       	ldi	r22, 0x00	; 0
    32da:	0e 94 da 07 	call	0xfb4	; 0xfb4 <M_TIMER1_void_Init>
	M_TIMER1_void_Start(TIMER1_CLK_8);
    32de:	82 e0       	ldi	r24, 0x02	; 2
    32e0:	0e 94 1c 08 	call	0x1038	; 0x1038 <M_TIMER1_void_Start>
	/*Trigger the ULTRA SONIC*/
	M_Dio_void_setPinValue(TRIGGER_PIN_OUT,DIO_HIGH);
    32e4:	88 e2       	ldi	r24, 0x28	; 40
    32e6:	61 e0       	ldi	r22, 0x01	; 1
    32e8:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
    32ec:	80 e0       	ldi	r24, 0x00	; 0
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	a0 e2       	ldi	r26, 0x20	; 32
    32f2:	b1 e4       	ldi	r27, 0x41	; 65
    32f4:	8d 8b       	std	Y+21, r24	; 0x15
    32f6:	9e 8b       	std	Y+22, r25	; 0x16
    32f8:	af 8b       	std	Y+23, r26	; 0x17
    32fa:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    32fc:	6d 89       	ldd	r22, Y+21	; 0x15
    32fe:	7e 89       	ldd	r23, Y+22	; 0x16
    3300:	8f 89       	ldd	r24, Y+23	; 0x17
    3302:	98 8d       	ldd	r25, Y+24	; 0x18
    3304:	2b ea       	ldi	r18, 0xAB	; 171
    3306:	3a ea       	ldi	r19, 0xAA	; 170
    3308:	4a ea       	ldi	r20, 0xAA	; 170
    330a:	50 e4       	ldi	r21, 0x40	; 64
    330c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3310:	dc 01       	movw	r26, r24
    3312:	cb 01       	movw	r24, r22
    3314:	89 8b       	std	Y+17, r24	; 0x11
    3316:	9a 8b       	std	Y+18, r25	; 0x12
    3318:	ab 8b       	std	Y+19, r26	; 0x13
    331a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    331c:	69 89       	ldd	r22, Y+17	; 0x11
    331e:	7a 89       	ldd	r23, Y+18	; 0x12
    3320:	8b 89       	ldd	r24, Y+19	; 0x13
    3322:	9c 89       	ldd	r25, Y+20	; 0x14
    3324:	20 e0       	ldi	r18, 0x00	; 0
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	40 e8       	ldi	r20, 0x80	; 128
    332a:	5f e3       	ldi	r21, 0x3F	; 63
    332c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3330:	88 23       	and	r24, r24
    3332:	1c f4       	brge	.+6      	; 0x333a <H_UltraSonic_Void_Init+0x7c>
		__ticks = 1;
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	88 8b       	std	Y+16, r24	; 0x10
    3338:	91 c0       	rjmp	.+290    	; 0x345c <H_UltraSonic_Void_Init+0x19e>
	else if (__tmp > 255)
    333a:	69 89       	ldd	r22, Y+17	; 0x11
    333c:	7a 89       	ldd	r23, Y+18	; 0x12
    333e:	8b 89       	ldd	r24, Y+19	; 0x13
    3340:	9c 89       	ldd	r25, Y+20	; 0x14
    3342:	20 e0       	ldi	r18, 0x00	; 0
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	4f e7       	ldi	r20, 0x7F	; 127
    3348:	53 e4       	ldi	r21, 0x43	; 67
    334a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    334e:	18 16       	cp	r1, r24
    3350:	0c f0       	brlt	.+2      	; 0x3354 <H_UltraSonic_Void_Init+0x96>
    3352:	7b c0       	rjmp	.+246    	; 0x344a <H_UltraSonic_Void_Init+0x18c>
	{
		_delay_ms(__us / 1000.0);
    3354:	6d 89       	ldd	r22, Y+21	; 0x15
    3356:	7e 89       	ldd	r23, Y+22	; 0x16
    3358:	8f 89       	ldd	r24, Y+23	; 0x17
    335a:	98 8d       	ldd	r25, Y+24	; 0x18
    335c:	20 e0       	ldi	r18, 0x00	; 0
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	4a e7       	ldi	r20, 0x7A	; 122
    3362:	54 e4       	ldi	r21, 0x44	; 68
    3364:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	8c 87       	std	Y+12, r24	; 0x0c
    336e:	9d 87       	std	Y+13, r25	; 0x0d
    3370:	ae 87       	std	Y+14, r26	; 0x0e
    3372:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3374:	6c 85       	ldd	r22, Y+12	; 0x0c
    3376:	7d 85       	ldd	r23, Y+13	; 0x0d
    3378:	8e 85       	ldd	r24, Y+14	; 0x0e
    337a:	9f 85       	ldd	r25, Y+15	; 0x0f
    337c:	20 e0       	ldi	r18, 0x00	; 0
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	4a e7       	ldi	r20, 0x7A	; 122
    3382:	55 e4       	ldi	r21, 0x45	; 69
    3384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3388:	dc 01       	movw	r26, r24
    338a:	cb 01       	movw	r24, r22
    338c:	88 87       	std	Y+8, r24	; 0x08
    338e:	99 87       	std	Y+9, r25	; 0x09
    3390:	aa 87       	std	Y+10, r26	; 0x0a
    3392:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3394:	68 85       	ldd	r22, Y+8	; 0x08
    3396:	79 85       	ldd	r23, Y+9	; 0x09
    3398:	8a 85       	ldd	r24, Y+10	; 0x0a
    339a:	9b 85       	ldd	r25, Y+11	; 0x0b
    339c:	20 e0       	ldi	r18, 0x00	; 0
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	40 e8       	ldi	r20, 0x80	; 128
    33a2:	5f e3       	ldi	r21, 0x3F	; 63
    33a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33a8:	88 23       	and	r24, r24
    33aa:	2c f4       	brge	.+10     	; 0x33b6 <H_UltraSonic_Void_Init+0xf8>
		__ticks = 1;
    33ac:	81 e0       	ldi	r24, 0x01	; 1
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	9f 83       	std	Y+7, r25	; 0x07
    33b2:	8e 83       	std	Y+6, r24	; 0x06
    33b4:	3f c0       	rjmp	.+126    	; 0x3434 <H_UltraSonic_Void_Init+0x176>
	else if (__tmp > 65535)
    33b6:	68 85       	ldd	r22, Y+8	; 0x08
    33b8:	79 85       	ldd	r23, Y+9	; 0x09
    33ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    33bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	3f ef       	ldi	r19, 0xFF	; 255
    33c2:	4f e7       	ldi	r20, 0x7F	; 127
    33c4:	57 e4       	ldi	r21, 0x47	; 71
    33c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33ca:	18 16       	cp	r1, r24
    33cc:	4c f5       	brge	.+82     	; 0x3420 <H_UltraSonic_Void_Init+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ce:	6c 85       	ldd	r22, Y+12	; 0x0c
    33d0:	7d 85       	ldd	r23, Y+13	; 0x0d
    33d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    33d4:	9f 85       	ldd	r25, Y+15	; 0x0f
    33d6:	20 e0       	ldi	r18, 0x00	; 0
    33d8:	30 e0       	ldi	r19, 0x00	; 0
    33da:	40 e2       	ldi	r20, 0x20	; 32
    33dc:	51 e4       	ldi	r21, 0x41	; 65
    33de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e2:	dc 01       	movw	r26, r24
    33e4:	cb 01       	movw	r24, r22
    33e6:	bc 01       	movw	r22, r24
    33e8:	cd 01       	movw	r24, r26
    33ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ee:	dc 01       	movw	r26, r24
    33f0:	cb 01       	movw	r24, r22
    33f2:	9f 83       	std	Y+7, r25	; 0x07
    33f4:	8e 83       	std	Y+6, r24	; 0x06
    33f6:	0f c0       	rjmp	.+30     	; 0x3416 <H_UltraSonic_Void_Init+0x158>
    33f8:	80 e9       	ldi	r24, 0x90	; 144
    33fa:	91 e0       	ldi	r25, 0x01	; 1
    33fc:	9d 83       	std	Y+5, r25	; 0x05
    33fe:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3400:	8c 81       	ldd	r24, Y+4	; 0x04
    3402:	9d 81       	ldd	r25, Y+5	; 0x05
    3404:	01 97       	sbiw	r24, 0x01	; 1
    3406:	f1 f7       	brne	.-4      	; 0x3404 <H_UltraSonic_Void_Init+0x146>
    3408:	9d 83       	std	Y+5, r25	; 0x05
    340a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    340c:	8e 81       	ldd	r24, Y+6	; 0x06
    340e:	9f 81       	ldd	r25, Y+7	; 0x07
    3410:	01 97       	sbiw	r24, 0x01	; 1
    3412:	9f 83       	std	Y+7, r25	; 0x07
    3414:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3416:	8e 81       	ldd	r24, Y+6	; 0x06
    3418:	9f 81       	ldd	r25, Y+7	; 0x07
    341a:	00 97       	sbiw	r24, 0x00	; 0
    341c:	69 f7       	brne	.-38     	; 0x33f8 <H_UltraSonic_Void_Init+0x13a>
    341e:	24 c0       	rjmp	.+72     	; 0x3468 <H_UltraSonic_Void_Init+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3420:	68 85       	ldd	r22, Y+8	; 0x08
    3422:	79 85       	ldd	r23, Y+9	; 0x09
    3424:	8a 85       	ldd	r24, Y+10	; 0x0a
    3426:	9b 85       	ldd	r25, Y+11	; 0x0b
    3428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    342c:	dc 01       	movw	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	9f 83       	std	Y+7, r25	; 0x07
    3432:	8e 83       	std	Y+6, r24	; 0x06
    3434:	8e 81       	ldd	r24, Y+6	; 0x06
    3436:	9f 81       	ldd	r25, Y+7	; 0x07
    3438:	9b 83       	std	Y+3, r25	; 0x03
    343a:	8a 83       	std	Y+2, r24	; 0x02
    343c:	8a 81       	ldd	r24, Y+2	; 0x02
    343e:	9b 81       	ldd	r25, Y+3	; 0x03
    3440:	01 97       	sbiw	r24, 0x01	; 1
    3442:	f1 f7       	brne	.-4      	; 0x3440 <H_UltraSonic_Void_Init+0x182>
    3444:	9b 83       	std	Y+3, r25	; 0x03
    3446:	8a 83       	std	Y+2, r24	; 0x02
    3448:	0f c0       	rjmp	.+30     	; 0x3468 <H_UltraSonic_Void_Init+0x1aa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    344a:	69 89       	ldd	r22, Y+17	; 0x11
    344c:	7a 89       	ldd	r23, Y+18	; 0x12
    344e:	8b 89       	ldd	r24, Y+19	; 0x13
    3450:	9c 89       	ldd	r25, Y+20	; 0x14
    3452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3456:	dc 01       	movw	r26, r24
    3458:	cb 01       	movw	r24, r22
    345a:	88 8b       	std	Y+16, r24	; 0x10
    345c:	88 89       	ldd	r24, Y+16	; 0x10
    345e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3460:	89 81       	ldd	r24, Y+1	; 0x01
    3462:	8a 95       	dec	r24
    3464:	f1 f7       	brne	.-4      	; 0x3462 <H_UltraSonic_Void_Init+0x1a4>
    3466:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	M_Dio_void_setPinValue(TRIGGER_PIN_OUT,DIO_LOW);
    3468:	88 e2       	ldi	r24, 0x28	; 40
    346a:	60 e0       	ldi	r22, 0x00	; 0
    346c:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>

}
    3470:	68 96       	adiw	r28, 0x18	; 24
    3472:	0f b6       	in	r0, 0x3f	; 63
    3474:	f8 94       	cli
    3476:	de bf       	out	0x3e, r29	; 62
    3478:	0f be       	out	0x3f, r0	; 63
    347a:	cd bf       	out	0x3d, r28	; 61
    347c:	cf 91       	pop	r28
    347e:	df 91       	pop	r29
    3480:	08 95       	ret

00003482 <H_ULTRASONIC_Get_Readings>:
void H_ULTRASONIC_Get_Readings(void)
{
    3482:	df 93       	push	r29
    3484:	cf 93       	push	r28
    3486:	cd b7       	in	r28, 0x3d	; 61
    3488:	de b7       	in	r29, 0x3e	; 62
	M_TIMER1_void_ICU_Enable();
    348a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <M_TIMER1_void_ICU_Enable>
	while((GET_BIT(TIFR,TIFR_ICF1))==0);
    348e:	e8 e5       	ldi	r30, 0x58	; 88
    3490:	f0 e0       	ldi	r31, 0x00	; 0
    3492:	80 81       	ld	r24, Z
    3494:	82 95       	swap	r24
    3496:	86 95       	lsr	r24
    3498:	87 70       	andi	r24, 0x07	; 7
    349a:	88 2f       	mov	r24, r24
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	81 70       	andi	r24, 0x01	; 1
    34a0:	90 70       	andi	r25, 0x00	; 0
    34a2:	00 97       	sbiw	r24, 0x00	; 0
    34a4:	a1 f3       	breq	.-24     	; 0x348e <H_ULTRASONIC_Get_Readings+0xc>
	M_TIMER1_u8_Reset_flag(TIMER1_ICU);
    34a6:	80 e0       	ldi	r24, 0x00	; 0
    34a8:	0e 94 c9 08 	call	0x1192	; 0x1192 <M_TIMER1_u8_Reset_flag>
	Reading_1 = M_TIMER1_void_ICU_Reading();
    34ac:	0e 94 b7 08 	call	0x116e	; 0x116e <M_TIMER1_void_ICU_Reading>
    34b0:	90 93 a6 02 	sts	0x02A6, r25
    34b4:	80 93 a5 02 	sts	0x02A5, r24
	M_TIMER1_void_ICU_TriggerSelect(ICU_FALLING);
    34b8:	80 e0       	ldi	r24, 0x00	; 0
    34ba:	0e 94 84 08 	call	0x1108	; 0x1108 <M_TIMER1_void_ICU_TriggerSelect>
    34be:	08 c0       	rjmp	.+16     	; 0x34d0 <H_ULTRASONIC_Get_Readings+0x4e>

	while((GET_BIT(TIFR,TIFR_TOV1))==1)
	{
		No_of_overflows++;
    34c0:	80 91 ad 02 	lds	r24, 0x02AD
    34c4:	8f 5f       	subi	r24, 0xFF	; 255
    34c6:	80 93 ad 02 	sts	0x02AD, r24
		M_TIMER1_u8_Reset_flag(TIMER1_OVF);
    34ca:	83 e0       	ldi	r24, 0x03	; 3
    34cc:	0e 94 c9 08 	call	0x1192	; 0x1192 <M_TIMER1_u8_Reset_flag>
	while((GET_BIT(TIFR,TIFR_ICF1))==0);
	M_TIMER1_u8_Reset_flag(TIMER1_ICU);
	Reading_1 = M_TIMER1_void_ICU_Reading();
	M_TIMER1_void_ICU_TriggerSelect(ICU_FALLING);

	while((GET_BIT(TIFR,TIFR_TOV1))==1)
    34d0:	e8 e5       	ldi	r30, 0x58	; 88
    34d2:	f0 e0       	ldi	r31, 0x00	; 0
    34d4:	80 81       	ld	r24, Z
    34d6:	86 95       	lsr	r24
    34d8:	86 95       	lsr	r24
    34da:	88 2f       	mov	r24, r24
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	81 70       	andi	r24, 0x01	; 1
    34e0:	90 70       	andi	r25, 0x00	; 0
    34e2:	88 23       	and	r24, r24
    34e4:	69 f7       	brne	.-38     	; 0x34c0 <H_ULTRASONIC_Get_Readings+0x3e>
	{
		No_of_overflows++;
		M_TIMER1_u8_Reset_flag(TIMER1_OVF);
	}
	while((GET_BIT(TIFR,TIFR_ICF1))==0);
    34e6:	e8 e5       	ldi	r30, 0x58	; 88
    34e8:	f0 e0       	ldi	r31, 0x00	; 0
    34ea:	80 81       	ld	r24, Z
    34ec:	82 95       	swap	r24
    34ee:	86 95       	lsr	r24
    34f0:	87 70       	andi	r24, 0x07	; 7
    34f2:	88 2f       	mov	r24, r24
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	81 70       	andi	r24, 0x01	; 1
    34f8:	90 70       	andi	r25, 0x00	; 0
    34fa:	00 97       	sbiw	r24, 0x00	; 0
    34fc:	a1 f3       	breq	.-24     	; 0x34e6 <H_ULTRASONIC_Get_Readings+0x64>
	M_TIMER1_u8_Reset_flag(TIMER1_ICU);
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	0e 94 c9 08 	call	0x1192	; 0x1192 <M_TIMER1_u8_Reset_flag>
	Reading_2= M_TIMER1_void_ICU_Reading();
    3504:	0e 94 b7 08 	call	0x116e	; 0x116e <M_TIMER1_void_ICU_Reading>
    3508:	90 93 a8 02 	sts	0x02A8, r25
    350c:	80 93 a7 02 	sts	0x02A7, r24
	M_TIMER1_void_ICU_TriggerSelect(ICU_RISING);
    3510:	81 e0       	ldi	r24, 0x01	; 1
    3512:	0e 94 84 08 	call	0x1108	; 0x1108 <M_TIMER1_void_ICU_TriggerSelect>



}
    3516:	cf 91       	pop	r28
    3518:	df 91       	pop	r29
    351a:	08 95       	ret

0000351c <H_UltraSonic_U16_ReadDistance>:
u16 H_UltraSonic_U16_ReadDistance()
{
    351c:	df 93       	push	r29
    351e:	cf 93       	push	r28
    3520:	00 d0       	rcall	.+0      	; 0x3522 <H_UltraSonic_U16_ReadDistance+0x6>
    3522:	00 d0       	rcall	.+0      	; 0x3524 <H_UltraSonic_U16_ReadDistance+0x8>
    3524:	cd b7       	in	r28, 0x3d	; 61
    3526:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_gotoXY(1,0);
    3528:	81 e0       	ldi	r24, 0x01	; 1
    352a:	60 e0       	ldi	r22, 0x00	; 0
    352c:	0e 94 ed 26 	call	0x4dda	; 0x4dda <H_LCD_void_gotoXY>
	H_LCD_void_sendIntNum(No_of_overflows);
    3530:	80 91 ad 02 	lds	r24, 0x02AD
    3534:	88 2f       	mov	r24, r24
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	a0 e0       	ldi	r26, 0x00	; 0
    353a:	b0 e0       	ldi	r27, 0x00	; 0
    353c:	bc 01       	movw	r22, r24
    353e:	cd 01       	movw	r24, r26
    3540:	0e 94 51 26 	call	0x4ca2	; 0x4ca2 <H_LCD_void_sendIntNum>
	H_LCD_void_gotoXY(1,6);
    3544:	81 e0       	ldi	r24, 0x01	; 1
    3546:	66 e0       	ldi	r22, 0x06	; 6
    3548:	0e 94 ed 26 	call	0x4dda	; 0x4dda <H_LCD_void_gotoXY>
	H_LCD_void_sendIntNum(Reading_1);
    354c:	80 91 a5 02 	lds	r24, 0x02A5
    3550:	90 91 a6 02 	lds	r25, 0x02A6
    3554:	cc 01       	movw	r24, r24
    3556:	a0 e0       	ldi	r26, 0x00	; 0
    3558:	b0 e0       	ldi	r27, 0x00	; 0
    355a:	bc 01       	movw	r22, r24
    355c:	cd 01       	movw	r24, r26
    355e:	0e 94 51 26 	call	0x4ca2	; 0x4ca2 <H_LCD_void_sendIntNum>
	H_LCD_void_gotoXY(2,0);
    3562:	82 e0       	ldi	r24, 0x02	; 2
    3564:	60 e0       	ldi	r22, 0x00	; 0
    3566:	0e 94 ed 26 	call	0x4dda	; 0x4dda <H_LCD_void_gotoXY>
	H_LCD_void_sendIntNum(Reading_2);
    356a:	80 91 a7 02 	lds	r24, 0x02A7
    356e:	90 91 a8 02 	lds	r25, 0x02A8
    3572:	cc 01       	movw	r24, r24
    3574:	a0 e0       	ldi	r26, 0x00	; 0
    3576:	b0 e0       	ldi	r27, 0x00	; 0
    3578:	bc 01       	movw	r22, r24
    357a:	cd 01       	movw	r24, r26
    357c:	0e 94 51 26 	call	0x4ca2	; 0x4ca2 <H_LCD_void_sendIntNum>

	u32 time=0;
    3580:	19 82       	std	Y+1, r1	; 0x01
    3582:	1a 82       	std	Y+2, r1	; 0x02
    3584:	1b 82       	std	Y+3, r1	; 0x03
    3586:	1c 82       	std	Y+4, r1	; 0x04
	if(No_of_overflows>0)
    3588:	80 91 ad 02 	lds	r24, 0x02AD
    358c:	88 23       	and	r24, r24
    358e:	09 f4       	brne	.+2      	; 0x3592 <H_UltraSonic_U16_ReadDistance+0x76>
    3590:	48 c0       	rjmp	.+144    	; 0x3622 <H_UltraSonic_U16_ReadDistance+0x106>
	{
		time = (65535-Reading_1);
    3592:	80 91 a5 02 	lds	r24, 0x02A5
    3596:	90 91 a6 02 	lds	r25, 0x02A6
    359a:	9c 01       	movw	r18, r24
    359c:	40 e0       	ldi	r20, 0x00	; 0
    359e:	50 e0       	ldi	r21, 0x00	; 0
    35a0:	8f ef       	ldi	r24, 0xFF	; 255
    35a2:	9f ef       	ldi	r25, 0xFF	; 255
    35a4:	a0 e0       	ldi	r26, 0x00	; 0
    35a6:	b0 e0       	ldi	r27, 0x00	; 0
    35a8:	82 1b       	sub	r24, r18
    35aa:	93 0b       	sbc	r25, r19
    35ac:	a4 0b       	sbc	r26, r20
    35ae:	b5 0b       	sbc	r27, r21
    35b0:	89 83       	std	Y+1, r24	; 0x01
    35b2:	9a 83       	std	Y+2, r25	; 0x02
    35b4:	ab 83       	std	Y+3, r26	; 0x03
    35b6:	bc 83       	std	Y+4, r27	; 0x04
		No_of_overflows--;
    35b8:	80 91 ad 02 	lds	r24, 0x02AD
    35bc:	81 50       	subi	r24, 0x01	; 1
    35be:	80 93 ad 02 	sts	0x02AD, r24
		time += ((u32)No_of_overflows*65535);
    35c2:	80 91 ad 02 	lds	r24, 0x02AD
    35c6:	88 2f       	mov	r24, r24
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	a0 e0       	ldi	r26, 0x00	; 0
    35cc:	b0 e0       	ldi	r27, 0x00	; 0
    35ce:	2f ef       	ldi	r18, 0xFF	; 255
    35d0:	3f ef       	ldi	r19, 0xFF	; 255
    35d2:	40 e0       	ldi	r20, 0x00	; 0
    35d4:	50 e0       	ldi	r21, 0x00	; 0
    35d6:	bc 01       	movw	r22, r24
    35d8:	cd 01       	movw	r24, r26
    35da:	0e 94 79 28 	call	0x50f2	; 0x50f2 <__mulsi3>
    35de:	9b 01       	movw	r18, r22
    35e0:	ac 01       	movw	r20, r24
    35e2:	89 81       	ldd	r24, Y+1	; 0x01
    35e4:	9a 81       	ldd	r25, Y+2	; 0x02
    35e6:	ab 81       	ldd	r26, Y+3	; 0x03
    35e8:	bc 81       	ldd	r27, Y+4	; 0x04
    35ea:	82 0f       	add	r24, r18
    35ec:	93 1f       	adc	r25, r19
    35ee:	a4 1f       	adc	r26, r20
    35f0:	b5 1f       	adc	r27, r21
    35f2:	89 83       	std	Y+1, r24	; 0x01
    35f4:	9a 83       	std	Y+2, r25	; 0x02
    35f6:	ab 83       	std	Y+3, r26	; 0x03
    35f8:	bc 83       	std	Y+4, r27	; 0x04
		time += Reading_2;
    35fa:	80 91 a7 02 	lds	r24, 0x02A7
    35fe:	90 91 a8 02 	lds	r25, 0x02A8
    3602:	9c 01       	movw	r18, r24
    3604:	40 e0       	ldi	r20, 0x00	; 0
    3606:	50 e0       	ldi	r21, 0x00	; 0
    3608:	89 81       	ldd	r24, Y+1	; 0x01
    360a:	9a 81       	ldd	r25, Y+2	; 0x02
    360c:	ab 81       	ldd	r26, Y+3	; 0x03
    360e:	bc 81       	ldd	r27, Y+4	; 0x04
    3610:	82 0f       	add	r24, r18
    3612:	93 1f       	adc	r25, r19
    3614:	a4 1f       	adc	r26, r20
    3616:	b5 1f       	adc	r27, r21
    3618:	89 83       	std	Y+1, r24	; 0x01
    361a:	9a 83       	std	Y+2, r25	; 0x02
    361c:	ab 83       	std	Y+3, r26	; 0x03
    361e:	bc 83       	std	Y+4, r27	; 0x04
    3620:	13 c0       	rjmp	.+38     	; 0x3648 <H_UltraSonic_U16_ReadDistance+0x12c>
	}
	else
	{
		time = Reading_2-Reading_1;
    3622:	20 91 a7 02 	lds	r18, 0x02A7
    3626:	30 91 a8 02 	lds	r19, 0x02A8
    362a:	80 91 a5 02 	lds	r24, 0x02A5
    362e:	90 91 a6 02 	lds	r25, 0x02A6
    3632:	a9 01       	movw	r20, r18
    3634:	48 1b       	sub	r20, r24
    3636:	59 0b       	sbc	r21, r25
    3638:	ca 01       	movw	r24, r20
    363a:	cc 01       	movw	r24, r24
    363c:	a0 e0       	ldi	r26, 0x00	; 0
    363e:	b0 e0       	ldi	r27, 0x00	; 0
    3640:	89 83       	std	Y+1, r24	; 0x01
    3642:	9a 83       	std	Y+2, r25	; 0x02
    3644:	ab 83       	std	Y+3, r26	; 0x03
    3646:	bc 83       	std	Y+4, r27	; 0x04
	}
	Reading_3= time /2;
    3648:	89 81       	ldd	r24, Y+1	; 0x01
    364a:	9a 81       	ldd	r25, Y+2	; 0x02
    364c:	ab 81       	ldd	r26, Y+3	; 0x03
    364e:	bc 81       	ldd	r27, Y+4	; 0x04
    3650:	b6 95       	lsr	r27
    3652:	a7 95       	ror	r26
    3654:	97 95       	ror	r25
    3656:	87 95       	ror	r24
    3658:	90 93 aa 02 	sts	0x02AA, r25
    365c:	80 93 a9 02 	sts	0x02A9, r24
	Distance = ((f32)SPEED_OF_SOUND/1000000)*(Reading_3);
    3660:	80 91 a9 02 	lds	r24, 0x02A9
    3664:	90 91 aa 02 	lds	r25, 0x02AA
    3668:	cc 01       	movw	r24, r24
    366a:	a0 e0       	ldi	r26, 0x00	; 0
    366c:	b0 e0       	ldi	r27, 0x00	; 0
    366e:	bc 01       	movw	r22, r24
    3670:	cd 01       	movw	r24, r26
    3672:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3676:	dc 01       	movw	r26, r24
    3678:	cb 01       	movw	r24, r22
    367a:	bc 01       	movw	r22, r24
    367c:	cd 01       	movw	r24, r26
    367e:	28 e2       	ldi	r18, 0x28	; 40
    3680:	3e e7       	ldi	r19, 0x7E	; 126
    3682:	4c e0       	ldi	r20, 0x0C	; 12
    3684:	5d e3       	ldi	r21, 0x3D	; 61
    3686:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    368a:	dc 01       	movw	r26, r24
    368c:	cb 01       	movw	r24, r22
    368e:	bc 01       	movw	r22, r24
    3690:	cd 01       	movw	r24, r26
    3692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3696:	dc 01       	movw	r26, r24
    3698:	cb 01       	movw	r24, r22
    369a:	90 93 ac 02 	sts	0x02AC, r25
    369e:	80 93 ab 02 	sts	0x02AB, r24
	H_LCD_void_gotoXY(2,6);
    36a2:	82 e0       	ldi	r24, 0x02	; 2
    36a4:	66 e0       	ldi	r22, 0x06	; 6
    36a6:	0e 94 ed 26 	call	0x4dda	; 0x4dda <H_LCD_void_gotoXY>
	H_LCD_void_sendIntNum(Distance);
    36aa:	80 91 ab 02 	lds	r24, 0x02AB
    36ae:	90 91 ac 02 	lds	r25, 0x02AC
    36b2:	cc 01       	movw	r24, r24
    36b4:	a0 e0       	ldi	r26, 0x00	; 0
    36b6:	b0 e0       	ldi	r27, 0x00	; 0
    36b8:	bc 01       	movw	r22, r24
    36ba:	cd 01       	movw	r24, r26
    36bc:	0e 94 51 26 	call	0x4ca2	; 0x4ca2 <H_LCD_void_sendIntNum>
	M_TIMER1_void_Stop();
    36c0:	0e 94 47 08 	call	0x108e	; 0x108e <M_TIMER1_void_Stop>

	return Distance;
    36c4:	80 91 ab 02 	lds	r24, 0x02AB
    36c8:	90 91 ac 02 	lds	r25, 0x02AC
}
    36cc:	0f 90       	pop	r0
    36ce:	0f 90       	pop	r0
    36d0:	0f 90       	pop	r0
    36d2:	0f 90       	pop	r0
    36d4:	cf 91       	pop	r28
    36d6:	df 91       	pop	r29
    36d8:	08 95       	ret

000036da <H_SSD_void_displayIntNumber>:
#include"SSD_CFG.h"
#include"SSD_int.h"
#include<util/delay.h>

void H_SSD_void_displayIntNumber(u16 Copy_number)
{
    36da:	0f 93       	push	r16
    36dc:	1f 93       	push	r17
    36de:	df 93       	push	r29
    36e0:	cf 93       	push	r28
    36e2:	cd b7       	in	r28, 0x3d	; 61
    36e4:	de b7       	in	r29, 0x3e	; 62
    36e6:	c0 54       	subi	r28, 0x40	; 64
    36e8:	d0 40       	sbci	r29, 0x00	; 0
    36ea:	0f b6       	in	r0, 0x3f	; 63
    36ec:	f8 94       	cli
    36ee:	de bf       	out	0x3e, r29	; 62
    36f0:	0f be       	out	0x3f, r0	; 63
    36f2:	cd bf       	out	0x3d, r28	; 61
    36f4:	fe 01       	movw	r30, r28
    36f6:	ff 96       	adiw	r30, 0x3f	; 63
    36f8:	91 83       	std	Z+1, r25	; 0x01
    36fa:	80 83       	st	Z, r24
	u8 arr[4]={0};
    36fc:	1b ae       	std	Y+59, r1	; 0x3b
    36fe:	1c ae       	std	Y+60, r1	; 0x3c
    3700:	1d ae       	std	Y+61, r1	; 0x3d
    3702:	1e ae       	std	Y+62, r1	; 0x3e
	u8 i=0;
    3704:	1a ae       	std	Y+58, r1	; 0x3a
    3706:	24 c0       	rjmp	.+72     	; 0x3750 <H_SSD_void_displayIntNumber+0x76>
	while(Copy_number >0 && i<4)
	{
		arr[i]= Copy_number %10;
    3708:	8a ad       	ldd	r24, Y+58	; 0x3a
    370a:	08 2f       	mov	r16, r24
    370c:	10 e0       	ldi	r17, 0x00	; 0
    370e:	fe 01       	movw	r30, r28
    3710:	ff 96       	adiw	r30, 0x3f	; 63
    3712:	80 81       	ld	r24, Z
    3714:	91 81       	ldd	r25, Z+1	; 0x01
    3716:	2a e0       	ldi	r18, 0x0A	; 10
    3718:	30 e0       	ldi	r19, 0x00	; 0
    371a:	b9 01       	movw	r22, r18
    371c:	0e 94 a4 28 	call	0x5148	; 0x5148 <__udivmodhi4>
    3720:	28 2f       	mov	r18, r24
    3722:	ce 01       	movw	r24, r28
    3724:	cb 96       	adiw	r24, 0x3b	; 59
    3726:	fc 01       	movw	r30, r24
    3728:	e0 0f       	add	r30, r16
    372a:	f1 1f       	adc	r31, r17
    372c:	20 83       	st	Z, r18
		Copy_number /= 10;
    372e:	fe 01       	movw	r30, r28
    3730:	ff 96       	adiw	r30, 0x3f	; 63
    3732:	80 81       	ld	r24, Z
    3734:	91 81       	ldd	r25, Z+1	; 0x01
    3736:	2a e0       	ldi	r18, 0x0A	; 10
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	b9 01       	movw	r22, r18
    373c:	0e 94 a4 28 	call	0x5148	; 0x5148 <__udivmodhi4>
    3740:	cb 01       	movw	r24, r22
    3742:	fe 01       	movw	r30, r28
    3744:	ff 96       	adiw	r30, 0x3f	; 63
    3746:	91 83       	std	Z+1, r25	; 0x01
    3748:	80 83       	st	Z, r24
		i++;
    374a:	8a ad       	ldd	r24, Y+58	; 0x3a
    374c:	8f 5f       	subi	r24, 0xFF	; 255
    374e:	8a af       	std	Y+58, r24	; 0x3a

void H_SSD_void_displayIntNumber(u16 Copy_number)
{
	u8 arr[4]={0};
	u8 i=0;
	while(Copy_number >0 && i<4)
    3750:	fe 01       	movw	r30, r28
    3752:	ff 96       	adiw	r30, 0x3f	; 63
    3754:	80 81       	ld	r24, Z
    3756:	91 81       	ldd	r25, Z+1	; 0x01
    3758:	00 97       	sbiw	r24, 0x00	; 0
    375a:	19 f0       	breq	.+6      	; 0x3762 <H_SSD_void_displayIntNumber+0x88>
    375c:	8a ad       	ldd	r24, Y+58	; 0x3a
    375e:	84 30       	cpi	r24, 0x04	; 4
    3760:	98 f2       	brcs	.-90     	; 0x3708 <H_SSD_void_displayIntNumber+0x2e>
		arr[i]= Copy_number %10;
		Copy_number /= 10;
		i++;
	}
	/*prepare units to be send to BCD(4bits)*/
	for(u8 j=0;j<SSD_DISPLAY_TIME*4;j++)
    3762:	19 ae       	std	Y+57, r1	; 0x39
	{
		/*prepare units to be send to BCD*/
		i=0;
    3764:	1a ae       	std	Y+58, r1	; 0x3a
		M_Dio_void_setPinValue(SSD_A_PIN,(arr[i]>>0)&1);
    3766:	8a ad       	ldd	r24, Y+58	; 0x3a
    3768:	28 2f       	mov	r18, r24
    376a:	30 e0       	ldi	r19, 0x00	; 0
    376c:	ce 01       	movw	r24, r28
    376e:	cb 96       	adiw	r24, 0x3b	; 59
    3770:	fc 01       	movw	r30, r24
    3772:	e2 0f       	add	r30, r18
    3774:	f3 1f       	adc	r31, r19
    3776:	80 81       	ld	r24, Z
    3778:	98 2f       	mov	r25, r24
    377a:	91 70       	andi	r25, 0x01	; 1
    377c:	84 e1       	ldi	r24, 0x14	; 20
    377e:	69 2f       	mov	r22, r25
    3780:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_B_PIN,(arr[i]>>1)&1);
    3784:	8a ad       	ldd	r24, Y+58	; 0x3a
    3786:	28 2f       	mov	r18, r24
    3788:	30 e0       	ldi	r19, 0x00	; 0
    378a:	ce 01       	movw	r24, r28
    378c:	cb 96       	adiw	r24, 0x3b	; 59
    378e:	fc 01       	movw	r30, r24
    3790:	e2 0f       	add	r30, r18
    3792:	f3 1f       	adc	r31, r19
    3794:	80 81       	ld	r24, Z
    3796:	86 95       	lsr	r24
    3798:	98 2f       	mov	r25, r24
    379a:	91 70       	andi	r25, 0x01	; 1
    379c:	85 e1       	ldi	r24, 0x15	; 21
    379e:	69 2f       	mov	r22, r25
    37a0:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_C_PIN,(arr[i]>>2)&1);
    37a4:	8a ad       	ldd	r24, Y+58	; 0x3a
    37a6:	28 2f       	mov	r18, r24
    37a8:	30 e0       	ldi	r19, 0x00	; 0
    37aa:	ce 01       	movw	r24, r28
    37ac:	cb 96       	adiw	r24, 0x3b	; 59
    37ae:	fc 01       	movw	r30, r24
    37b0:	e2 0f       	add	r30, r18
    37b2:	f3 1f       	adc	r31, r19
    37b4:	80 81       	ld	r24, Z
    37b6:	86 95       	lsr	r24
    37b8:	86 95       	lsr	r24
    37ba:	98 2f       	mov	r25, r24
    37bc:	91 70       	andi	r25, 0x01	; 1
    37be:	86 e1       	ldi	r24, 0x16	; 22
    37c0:	69 2f       	mov	r22, r25
    37c2:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_D_PIN,(arr[i]>>3)&1);
    37c6:	8a ad       	ldd	r24, Y+58	; 0x3a
    37c8:	28 2f       	mov	r18, r24
    37ca:	30 e0       	ldi	r19, 0x00	; 0
    37cc:	ce 01       	movw	r24, r28
    37ce:	cb 96       	adiw	r24, 0x3b	; 59
    37d0:	fc 01       	movw	r30, r24
    37d2:	e2 0f       	add	r30, r18
    37d4:	f3 1f       	adc	r31, r19
    37d6:	80 81       	ld	r24, Z
    37d8:	86 95       	lsr	r24
    37da:	86 95       	lsr	r24
    37dc:	86 95       	lsr	r24
    37de:	98 2f       	mov	r25, r24
    37e0:	91 70       	andi	r25, 0x01	; 1
    37e2:	88 e1       	ldi	r24, 0x18	; 24
    37e4:	69 2f       	mov	r22, r25
    37e6:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
		/*Enable digit 1 (remember it is pnp - active low*/
		M_Dio_void_setPinValue(SSD_DIG1_EN,DIO_LOW);
    37ea:	8d e0       	ldi	r24, 0x0D	; 13
    37ec:	60 e0       	ldi	r22, 0x00	; 0
    37ee:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
    37f2:	80 e0       	ldi	r24, 0x00	; 0
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	a0 e8       	ldi	r26, 0x80	; 128
    37f8:	bf e3       	ldi	r27, 0x3F	; 63
    37fa:	8d ab       	std	Y+53, r24	; 0x35
    37fc:	9e ab       	std	Y+54, r25	; 0x36
    37fe:	af ab       	std	Y+55, r26	; 0x37
    3800:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3802:	6d a9       	ldd	r22, Y+53	; 0x35
    3804:	7e a9       	ldd	r23, Y+54	; 0x36
    3806:	8f a9       	ldd	r24, Y+55	; 0x37
    3808:	98 ad       	ldd	r25, Y+56	; 0x38
    380a:	20 e0       	ldi	r18, 0x00	; 0
    380c:	30 e0       	ldi	r19, 0x00	; 0
    380e:	4a e7       	ldi	r20, 0x7A	; 122
    3810:	55 e4       	ldi	r21, 0x45	; 69
    3812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3816:	dc 01       	movw	r26, r24
    3818:	cb 01       	movw	r24, r22
    381a:	89 ab       	std	Y+49, r24	; 0x31
    381c:	9a ab       	std	Y+50, r25	; 0x32
    381e:	ab ab       	std	Y+51, r26	; 0x33
    3820:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3822:	69 a9       	ldd	r22, Y+49	; 0x31
    3824:	7a a9       	ldd	r23, Y+50	; 0x32
    3826:	8b a9       	ldd	r24, Y+51	; 0x33
    3828:	9c a9       	ldd	r25, Y+52	; 0x34
    382a:	20 e0       	ldi	r18, 0x00	; 0
    382c:	30 e0       	ldi	r19, 0x00	; 0
    382e:	40 e8       	ldi	r20, 0x80	; 128
    3830:	5f e3       	ldi	r21, 0x3F	; 63
    3832:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3836:	88 23       	and	r24, r24
    3838:	2c f4       	brge	.+10     	; 0x3844 <H_SSD_void_displayIntNumber+0x16a>
		__ticks = 1;
    383a:	81 e0       	ldi	r24, 0x01	; 1
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	98 ab       	std	Y+48, r25	; 0x30
    3840:	8f a7       	std	Y+47, r24	; 0x2f
    3842:	3f c0       	rjmp	.+126    	; 0x38c2 <H_SSD_void_displayIntNumber+0x1e8>
	else if (__tmp > 65535)
    3844:	69 a9       	ldd	r22, Y+49	; 0x31
    3846:	7a a9       	ldd	r23, Y+50	; 0x32
    3848:	8b a9       	ldd	r24, Y+51	; 0x33
    384a:	9c a9       	ldd	r25, Y+52	; 0x34
    384c:	20 e0       	ldi	r18, 0x00	; 0
    384e:	3f ef       	ldi	r19, 0xFF	; 255
    3850:	4f e7       	ldi	r20, 0x7F	; 127
    3852:	57 e4       	ldi	r21, 0x47	; 71
    3854:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3858:	18 16       	cp	r1, r24
    385a:	4c f5       	brge	.+82     	; 0x38ae <H_SSD_void_displayIntNumber+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    385c:	6d a9       	ldd	r22, Y+53	; 0x35
    385e:	7e a9       	ldd	r23, Y+54	; 0x36
    3860:	8f a9       	ldd	r24, Y+55	; 0x37
    3862:	98 ad       	ldd	r25, Y+56	; 0x38
    3864:	20 e0       	ldi	r18, 0x00	; 0
    3866:	30 e0       	ldi	r19, 0x00	; 0
    3868:	40 e2       	ldi	r20, 0x20	; 32
    386a:	51 e4       	ldi	r21, 0x41	; 65
    386c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3870:	dc 01       	movw	r26, r24
    3872:	cb 01       	movw	r24, r22
    3874:	bc 01       	movw	r22, r24
    3876:	cd 01       	movw	r24, r26
    3878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    387c:	dc 01       	movw	r26, r24
    387e:	cb 01       	movw	r24, r22
    3880:	98 ab       	std	Y+48, r25	; 0x30
    3882:	8f a7       	std	Y+47, r24	; 0x2f
    3884:	0f c0       	rjmp	.+30     	; 0x38a4 <H_SSD_void_displayIntNumber+0x1ca>
    3886:	80 e9       	ldi	r24, 0x90	; 144
    3888:	91 e0       	ldi	r25, 0x01	; 1
    388a:	9e a7       	std	Y+46, r25	; 0x2e
    388c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    388e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3890:	9e a5       	ldd	r25, Y+46	; 0x2e
    3892:	01 97       	sbiw	r24, 0x01	; 1
    3894:	f1 f7       	brne	.-4      	; 0x3892 <H_SSD_void_displayIntNumber+0x1b8>
    3896:	9e a7       	std	Y+46, r25	; 0x2e
    3898:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    389a:	8f a5       	ldd	r24, Y+47	; 0x2f
    389c:	98 a9       	ldd	r25, Y+48	; 0x30
    389e:	01 97       	sbiw	r24, 0x01	; 1
    38a0:	98 ab       	std	Y+48, r25	; 0x30
    38a2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    38a6:	98 a9       	ldd	r25, Y+48	; 0x30
    38a8:	00 97       	sbiw	r24, 0x00	; 0
    38aa:	69 f7       	brne	.-38     	; 0x3886 <H_SSD_void_displayIntNumber+0x1ac>
    38ac:	14 c0       	rjmp	.+40     	; 0x38d6 <H_SSD_void_displayIntNumber+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38ae:	69 a9       	ldd	r22, Y+49	; 0x31
    38b0:	7a a9       	ldd	r23, Y+50	; 0x32
    38b2:	8b a9       	ldd	r24, Y+51	; 0x33
    38b4:	9c a9       	ldd	r25, Y+52	; 0x34
    38b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ba:	dc 01       	movw	r26, r24
    38bc:	cb 01       	movw	r24, r22
    38be:	98 ab       	std	Y+48, r25	; 0x30
    38c0:	8f a7       	std	Y+47, r24	; 0x2f
    38c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    38c4:	98 a9       	ldd	r25, Y+48	; 0x30
    38c6:	9c a7       	std	Y+44, r25	; 0x2c
    38c8:	8b a7       	std	Y+43, r24	; 0x2b
    38ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    38cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    38ce:	01 97       	sbiw	r24, 0x01	; 1
    38d0:	f1 f7       	brne	.-4      	; 0x38ce <H_SSD_void_displayIntNumber+0x1f4>
    38d2:	9c a7       	std	Y+44, r25	; 0x2c
    38d4:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		M_Dio_void_setPinValue(SSD_DIG1_EN,DIO_HIGH);
    38d6:	8d e0       	ldi	r24, 0x0D	; 13
    38d8:	61 e0       	ldi	r22, 0x01	; 1
    38da:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
		/*prepare Tens to be send to BCD(4bits)*/
		i=1;
    38de:	81 e0       	ldi	r24, 0x01	; 1
    38e0:	8a af       	std	Y+58, r24	; 0x3a
		M_Dio_void_setPinValue(SSD_A_PIN,(arr[i]>>0)&1);
    38e2:	8a ad       	ldd	r24, Y+58	; 0x3a
    38e4:	28 2f       	mov	r18, r24
    38e6:	30 e0       	ldi	r19, 0x00	; 0
    38e8:	ce 01       	movw	r24, r28
    38ea:	cb 96       	adiw	r24, 0x3b	; 59
    38ec:	fc 01       	movw	r30, r24
    38ee:	e2 0f       	add	r30, r18
    38f0:	f3 1f       	adc	r31, r19
    38f2:	80 81       	ld	r24, Z
    38f4:	98 2f       	mov	r25, r24
    38f6:	91 70       	andi	r25, 0x01	; 1
    38f8:	84 e1       	ldi	r24, 0x14	; 20
    38fa:	69 2f       	mov	r22, r25
    38fc:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_B_PIN,(arr[i]>>1)&1);
    3900:	8a ad       	ldd	r24, Y+58	; 0x3a
    3902:	28 2f       	mov	r18, r24
    3904:	30 e0       	ldi	r19, 0x00	; 0
    3906:	ce 01       	movw	r24, r28
    3908:	cb 96       	adiw	r24, 0x3b	; 59
    390a:	fc 01       	movw	r30, r24
    390c:	e2 0f       	add	r30, r18
    390e:	f3 1f       	adc	r31, r19
    3910:	80 81       	ld	r24, Z
    3912:	86 95       	lsr	r24
    3914:	98 2f       	mov	r25, r24
    3916:	91 70       	andi	r25, 0x01	; 1
    3918:	85 e1       	ldi	r24, 0x15	; 21
    391a:	69 2f       	mov	r22, r25
    391c:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_C_PIN,(arr[i]>>2)&1);
    3920:	8a ad       	ldd	r24, Y+58	; 0x3a
    3922:	28 2f       	mov	r18, r24
    3924:	30 e0       	ldi	r19, 0x00	; 0
    3926:	ce 01       	movw	r24, r28
    3928:	cb 96       	adiw	r24, 0x3b	; 59
    392a:	fc 01       	movw	r30, r24
    392c:	e2 0f       	add	r30, r18
    392e:	f3 1f       	adc	r31, r19
    3930:	80 81       	ld	r24, Z
    3932:	86 95       	lsr	r24
    3934:	86 95       	lsr	r24
    3936:	98 2f       	mov	r25, r24
    3938:	91 70       	andi	r25, 0x01	; 1
    393a:	86 e1       	ldi	r24, 0x16	; 22
    393c:	69 2f       	mov	r22, r25
    393e:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_D_PIN,(arr[i]>>3)&1);
    3942:	8a ad       	ldd	r24, Y+58	; 0x3a
    3944:	28 2f       	mov	r18, r24
    3946:	30 e0       	ldi	r19, 0x00	; 0
    3948:	ce 01       	movw	r24, r28
    394a:	cb 96       	adiw	r24, 0x3b	; 59
    394c:	fc 01       	movw	r30, r24
    394e:	e2 0f       	add	r30, r18
    3950:	f3 1f       	adc	r31, r19
    3952:	80 81       	ld	r24, Z
    3954:	86 95       	lsr	r24
    3956:	86 95       	lsr	r24
    3958:	86 95       	lsr	r24
    395a:	98 2f       	mov	r25, r24
    395c:	91 70       	andi	r25, 0x01	; 1
    395e:	88 e1       	ldi	r24, 0x18	; 24
    3960:	69 2f       	mov	r22, r25
    3962:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
		/*Enable digit 2 (remember it is pnp - active low*/
		M_Dio_void_setPinValue(SSD_DIG2_EN,DIO_LOW);
    3966:	8c e0       	ldi	r24, 0x0C	; 12
    3968:	60 e0       	ldi	r22, 0x00	; 0
    396a:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
    396e:	80 e0       	ldi	r24, 0x00	; 0
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	a0 e8       	ldi	r26, 0x80	; 128
    3974:	bf e3       	ldi	r27, 0x3F	; 63
    3976:	8f a3       	std	Y+39, r24	; 0x27
    3978:	98 a7       	std	Y+40, r25	; 0x28
    397a:	a9 a7       	std	Y+41, r26	; 0x29
    397c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    397e:	6f a1       	ldd	r22, Y+39	; 0x27
    3980:	78 a5       	ldd	r23, Y+40	; 0x28
    3982:	89 a5       	ldd	r24, Y+41	; 0x29
    3984:	9a a5       	ldd	r25, Y+42	; 0x2a
    3986:	20 e0       	ldi	r18, 0x00	; 0
    3988:	30 e0       	ldi	r19, 0x00	; 0
    398a:	4a e7       	ldi	r20, 0x7A	; 122
    398c:	55 e4       	ldi	r21, 0x45	; 69
    398e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3992:	dc 01       	movw	r26, r24
    3994:	cb 01       	movw	r24, r22
    3996:	8b a3       	std	Y+35, r24	; 0x23
    3998:	9c a3       	std	Y+36, r25	; 0x24
    399a:	ad a3       	std	Y+37, r26	; 0x25
    399c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    399e:	6b a1       	ldd	r22, Y+35	; 0x23
    39a0:	7c a1       	ldd	r23, Y+36	; 0x24
    39a2:	8d a1       	ldd	r24, Y+37	; 0x25
    39a4:	9e a1       	ldd	r25, Y+38	; 0x26
    39a6:	20 e0       	ldi	r18, 0x00	; 0
    39a8:	30 e0       	ldi	r19, 0x00	; 0
    39aa:	40 e8       	ldi	r20, 0x80	; 128
    39ac:	5f e3       	ldi	r21, 0x3F	; 63
    39ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39b2:	88 23       	and	r24, r24
    39b4:	2c f4       	brge	.+10     	; 0x39c0 <H_SSD_void_displayIntNumber+0x2e6>
		__ticks = 1;
    39b6:	81 e0       	ldi	r24, 0x01	; 1
    39b8:	90 e0       	ldi	r25, 0x00	; 0
    39ba:	9a a3       	std	Y+34, r25	; 0x22
    39bc:	89 a3       	std	Y+33, r24	; 0x21
    39be:	3f c0       	rjmp	.+126    	; 0x3a3e <H_SSD_void_displayIntNumber+0x364>
	else if (__tmp > 65535)
    39c0:	6b a1       	ldd	r22, Y+35	; 0x23
    39c2:	7c a1       	ldd	r23, Y+36	; 0x24
    39c4:	8d a1       	ldd	r24, Y+37	; 0x25
    39c6:	9e a1       	ldd	r25, Y+38	; 0x26
    39c8:	20 e0       	ldi	r18, 0x00	; 0
    39ca:	3f ef       	ldi	r19, 0xFF	; 255
    39cc:	4f e7       	ldi	r20, 0x7F	; 127
    39ce:	57 e4       	ldi	r21, 0x47	; 71
    39d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39d4:	18 16       	cp	r1, r24
    39d6:	4c f5       	brge	.+82     	; 0x3a2a <H_SSD_void_displayIntNumber+0x350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39d8:	6f a1       	ldd	r22, Y+39	; 0x27
    39da:	78 a5       	ldd	r23, Y+40	; 0x28
    39dc:	89 a5       	ldd	r24, Y+41	; 0x29
    39de:	9a a5       	ldd	r25, Y+42	; 0x2a
    39e0:	20 e0       	ldi	r18, 0x00	; 0
    39e2:	30 e0       	ldi	r19, 0x00	; 0
    39e4:	40 e2       	ldi	r20, 0x20	; 32
    39e6:	51 e4       	ldi	r21, 0x41	; 65
    39e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ec:	dc 01       	movw	r26, r24
    39ee:	cb 01       	movw	r24, r22
    39f0:	bc 01       	movw	r22, r24
    39f2:	cd 01       	movw	r24, r26
    39f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f8:	dc 01       	movw	r26, r24
    39fa:	cb 01       	movw	r24, r22
    39fc:	9a a3       	std	Y+34, r25	; 0x22
    39fe:	89 a3       	std	Y+33, r24	; 0x21
    3a00:	0f c0       	rjmp	.+30     	; 0x3a20 <H_SSD_void_displayIntNumber+0x346>
    3a02:	80 e9       	ldi	r24, 0x90	; 144
    3a04:	91 e0       	ldi	r25, 0x01	; 1
    3a06:	98 a3       	std	Y+32, r25	; 0x20
    3a08:	8f 8f       	std	Y+31, r24	; 0x1f
    3a0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a0c:	98 a1       	ldd	r25, Y+32	; 0x20
    3a0e:	01 97       	sbiw	r24, 0x01	; 1
    3a10:	f1 f7       	brne	.-4      	; 0x3a0e <H_SSD_void_displayIntNumber+0x334>
    3a12:	98 a3       	std	Y+32, r25	; 0x20
    3a14:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a16:	89 a1       	ldd	r24, Y+33	; 0x21
    3a18:	9a a1       	ldd	r25, Y+34	; 0x22
    3a1a:	01 97       	sbiw	r24, 0x01	; 1
    3a1c:	9a a3       	std	Y+34, r25	; 0x22
    3a1e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a20:	89 a1       	ldd	r24, Y+33	; 0x21
    3a22:	9a a1       	ldd	r25, Y+34	; 0x22
    3a24:	00 97       	sbiw	r24, 0x00	; 0
    3a26:	69 f7       	brne	.-38     	; 0x3a02 <H_SSD_void_displayIntNumber+0x328>
    3a28:	14 c0       	rjmp	.+40     	; 0x3a52 <H_SSD_void_displayIntNumber+0x378>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a2a:	6b a1       	ldd	r22, Y+35	; 0x23
    3a2c:	7c a1       	ldd	r23, Y+36	; 0x24
    3a2e:	8d a1       	ldd	r24, Y+37	; 0x25
    3a30:	9e a1       	ldd	r25, Y+38	; 0x26
    3a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a36:	dc 01       	movw	r26, r24
    3a38:	cb 01       	movw	r24, r22
    3a3a:	9a a3       	std	Y+34, r25	; 0x22
    3a3c:	89 a3       	std	Y+33, r24	; 0x21
    3a3e:	89 a1       	ldd	r24, Y+33	; 0x21
    3a40:	9a a1       	ldd	r25, Y+34	; 0x22
    3a42:	9e 8f       	std	Y+30, r25	; 0x1e
    3a44:	8d 8f       	std	Y+29, r24	; 0x1d
    3a46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a48:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a4a:	01 97       	sbiw	r24, 0x01	; 1
    3a4c:	f1 f7       	brne	.-4      	; 0x3a4a <H_SSD_void_displayIntNumber+0x370>
    3a4e:	9e 8f       	std	Y+30, r25	; 0x1e
    3a50:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		M_Dio_void_setPinValue(SSD_DIG2_EN,DIO_HIGH);
    3a52:	8c e0       	ldi	r24, 0x0C	; 12
    3a54:	61 e0       	ldi	r22, 0x01	; 1
    3a56:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
		/*prepare hundreds to be send to BCD*/
		i=2;
    3a5a:	82 e0       	ldi	r24, 0x02	; 2
    3a5c:	8a af       	std	Y+58, r24	; 0x3a
		M_Dio_void_setPinValue(SSD_A_PIN,(arr[i]>>0)&1);
    3a5e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3a60:	28 2f       	mov	r18, r24
    3a62:	30 e0       	ldi	r19, 0x00	; 0
    3a64:	ce 01       	movw	r24, r28
    3a66:	cb 96       	adiw	r24, 0x3b	; 59
    3a68:	fc 01       	movw	r30, r24
    3a6a:	e2 0f       	add	r30, r18
    3a6c:	f3 1f       	adc	r31, r19
    3a6e:	80 81       	ld	r24, Z
    3a70:	98 2f       	mov	r25, r24
    3a72:	91 70       	andi	r25, 0x01	; 1
    3a74:	84 e1       	ldi	r24, 0x14	; 20
    3a76:	69 2f       	mov	r22, r25
    3a78:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_B_PIN,(arr[i]>>1)&1);
    3a7c:	8a ad       	ldd	r24, Y+58	; 0x3a
    3a7e:	28 2f       	mov	r18, r24
    3a80:	30 e0       	ldi	r19, 0x00	; 0
    3a82:	ce 01       	movw	r24, r28
    3a84:	cb 96       	adiw	r24, 0x3b	; 59
    3a86:	fc 01       	movw	r30, r24
    3a88:	e2 0f       	add	r30, r18
    3a8a:	f3 1f       	adc	r31, r19
    3a8c:	80 81       	ld	r24, Z
    3a8e:	86 95       	lsr	r24
    3a90:	98 2f       	mov	r25, r24
    3a92:	91 70       	andi	r25, 0x01	; 1
    3a94:	85 e1       	ldi	r24, 0x15	; 21
    3a96:	69 2f       	mov	r22, r25
    3a98:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_C_PIN,(arr[i]>>2)&1);
    3a9c:	8a ad       	ldd	r24, Y+58	; 0x3a
    3a9e:	28 2f       	mov	r18, r24
    3aa0:	30 e0       	ldi	r19, 0x00	; 0
    3aa2:	ce 01       	movw	r24, r28
    3aa4:	cb 96       	adiw	r24, 0x3b	; 59
    3aa6:	fc 01       	movw	r30, r24
    3aa8:	e2 0f       	add	r30, r18
    3aaa:	f3 1f       	adc	r31, r19
    3aac:	80 81       	ld	r24, Z
    3aae:	86 95       	lsr	r24
    3ab0:	86 95       	lsr	r24
    3ab2:	98 2f       	mov	r25, r24
    3ab4:	91 70       	andi	r25, 0x01	; 1
    3ab6:	86 e1       	ldi	r24, 0x16	; 22
    3ab8:	69 2f       	mov	r22, r25
    3aba:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_D_PIN,(arr[i]>>3)&1);
    3abe:	8a ad       	ldd	r24, Y+58	; 0x3a
    3ac0:	28 2f       	mov	r18, r24
    3ac2:	30 e0       	ldi	r19, 0x00	; 0
    3ac4:	ce 01       	movw	r24, r28
    3ac6:	cb 96       	adiw	r24, 0x3b	; 59
    3ac8:	fc 01       	movw	r30, r24
    3aca:	e2 0f       	add	r30, r18
    3acc:	f3 1f       	adc	r31, r19
    3ace:	80 81       	ld	r24, Z
    3ad0:	86 95       	lsr	r24
    3ad2:	86 95       	lsr	r24
    3ad4:	86 95       	lsr	r24
    3ad6:	98 2f       	mov	r25, r24
    3ad8:	91 70       	andi	r25, 0x01	; 1
    3ada:	88 e1       	ldi	r24, 0x18	; 24
    3adc:	69 2f       	mov	r22, r25
    3ade:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
		/*Enable digit 2 (remember it is pnp - active low*/
		M_Dio_void_setPinValue(SSD_DIG3_EN,DIO_LOW);
    3ae2:	89 e1       	ldi	r24, 0x19	; 25
    3ae4:	60 e0       	ldi	r22, 0x00	; 0
    3ae6:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
    3aea:	80 e0       	ldi	r24, 0x00	; 0
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	a0 e8       	ldi	r26, 0x80	; 128
    3af0:	bf e3       	ldi	r27, 0x3F	; 63
    3af2:	89 8f       	std	Y+25, r24	; 0x19
    3af4:	9a 8f       	std	Y+26, r25	; 0x1a
    3af6:	ab 8f       	std	Y+27, r26	; 0x1b
    3af8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3afa:	69 8d       	ldd	r22, Y+25	; 0x19
    3afc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3afe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b02:	20 e0       	ldi	r18, 0x00	; 0
    3b04:	30 e0       	ldi	r19, 0x00	; 0
    3b06:	4a e7       	ldi	r20, 0x7A	; 122
    3b08:	55 e4       	ldi	r21, 0x45	; 69
    3b0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b0e:	dc 01       	movw	r26, r24
    3b10:	cb 01       	movw	r24, r22
    3b12:	8d 8b       	std	Y+21, r24	; 0x15
    3b14:	9e 8b       	std	Y+22, r25	; 0x16
    3b16:	af 8b       	std	Y+23, r26	; 0x17
    3b18:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b1a:	6d 89       	ldd	r22, Y+21	; 0x15
    3b1c:	7e 89       	ldd	r23, Y+22	; 0x16
    3b1e:	8f 89       	ldd	r24, Y+23	; 0x17
    3b20:	98 8d       	ldd	r25, Y+24	; 0x18
    3b22:	20 e0       	ldi	r18, 0x00	; 0
    3b24:	30 e0       	ldi	r19, 0x00	; 0
    3b26:	40 e8       	ldi	r20, 0x80	; 128
    3b28:	5f e3       	ldi	r21, 0x3F	; 63
    3b2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b2e:	88 23       	and	r24, r24
    3b30:	2c f4       	brge	.+10     	; 0x3b3c <H_SSD_void_displayIntNumber+0x462>
		__ticks = 1;
    3b32:	81 e0       	ldi	r24, 0x01	; 1
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	9c 8b       	std	Y+20, r25	; 0x14
    3b38:	8b 8b       	std	Y+19, r24	; 0x13
    3b3a:	3f c0       	rjmp	.+126    	; 0x3bba <H_SSD_void_displayIntNumber+0x4e0>
	else if (__tmp > 65535)
    3b3c:	6d 89       	ldd	r22, Y+21	; 0x15
    3b3e:	7e 89       	ldd	r23, Y+22	; 0x16
    3b40:	8f 89       	ldd	r24, Y+23	; 0x17
    3b42:	98 8d       	ldd	r25, Y+24	; 0x18
    3b44:	20 e0       	ldi	r18, 0x00	; 0
    3b46:	3f ef       	ldi	r19, 0xFF	; 255
    3b48:	4f e7       	ldi	r20, 0x7F	; 127
    3b4a:	57 e4       	ldi	r21, 0x47	; 71
    3b4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b50:	18 16       	cp	r1, r24
    3b52:	4c f5       	brge	.+82     	; 0x3ba6 <H_SSD_void_displayIntNumber+0x4cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b54:	69 8d       	ldd	r22, Y+25	; 0x19
    3b56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b5c:	20 e0       	ldi	r18, 0x00	; 0
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
    3b60:	40 e2       	ldi	r20, 0x20	; 32
    3b62:	51 e4       	ldi	r21, 0x41	; 65
    3b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b68:	dc 01       	movw	r26, r24
    3b6a:	cb 01       	movw	r24, r22
    3b6c:	bc 01       	movw	r22, r24
    3b6e:	cd 01       	movw	r24, r26
    3b70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b74:	dc 01       	movw	r26, r24
    3b76:	cb 01       	movw	r24, r22
    3b78:	9c 8b       	std	Y+20, r25	; 0x14
    3b7a:	8b 8b       	std	Y+19, r24	; 0x13
    3b7c:	0f c0       	rjmp	.+30     	; 0x3b9c <H_SSD_void_displayIntNumber+0x4c2>
    3b7e:	80 e9       	ldi	r24, 0x90	; 144
    3b80:	91 e0       	ldi	r25, 0x01	; 1
    3b82:	9a 8b       	std	Y+18, r25	; 0x12
    3b84:	89 8b       	std	Y+17, r24	; 0x11
    3b86:	89 89       	ldd	r24, Y+17	; 0x11
    3b88:	9a 89       	ldd	r25, Y+18	; 0x12
    3b8a:	01 97       	sbiw	r24, 0x01	; 1
    3b8c:	f1 f7       	brne	.-4      	; 0x3b8a <H_SSD_void_displayIntNumber+0x4b0>
    3b8e:	9a 8b       	std	Y+18, r25	; 0x12
    3b90:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b92:	8b 89       	ldd	r24, Y+19	; 0x13
    3b94:	9c 89       	ldd	r25, Y+20	; 0x14
    3b96:	01 97       	sbiw	r24, 0x01	; 1
    3b98:	9c 8b       	std	Y+20, r25	; 0x14
    3b9a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b9c:	8b 89       	ldd	r24, Y+19	; 0x13
    3b9e:	9c 89       	ldd	r25, Y+20	; 0x14
    3ba0:	00 97       	sbiw	r24, 0x00	; 0
    3ba2:	69 f7       	brne	.-38     	; 0x3b7e <H_SSD_void_displayIntNumber+0x4a4>
    3ba4:	14 c0       	rjmp	.+40     	; 0x3bce <H_SSD_void_displayIntNumber+0x4f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ba6:	6d 89       	ldd	r22, Y+21	; 0x15
    3ba8:	7e 89       	ldd	r23, Y+22	; 0x16
    3baa:	8f 89       	ldd	r24, Y+23	; 0x17
    3bac:	98 8d       	ldd	r25, Y+24	; 0x18
    3bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bb2:	dc 01       	movw	r26, r24
    3bb4:	cb 01       	movw	r24, r22
    3bb6:	9c 8b       	std	Y+20, r25	; 0x14
    3bb8:	8b 8b       	std	Y+19, r24	; 0x13
    3bba:	8b 89       	ldd	r24, Y+19	; 0x13
    3bbc:	9c 89       	ldd	r25, Y+20	; 0x14
    3bbe:	98 8b       	std	Y+16, r25	; 0x10
    3bc0:	8f 87       	std	Y+15, r24	; 0x0f
    3bc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bc4:	98 89       	ldd	r25, Y+16	; 0x10
    3bc6:	01 97       	sbiw	r24, 0x01	; 1
    3bc8:	f1 f7       	brne	.-4      	; 0x3bc6 <H_SSD_void_displayIntNumber+0x4ec>
    3bca:	98 8b       	std	Y+16, r25	; 0x10
    3bcc:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		M_Dio_void_setPinValue(SSD_DIG3_EN,DIO_HIGH);
    3bce:	89 e1       	ldi	r24, 0x19	; 25
    3bd0:	61 e0       	ldi	r22, 0x01	; 1
    3bd2:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
		/*prepare hundreds to be send to BCD*/
		i=3;
    3bd6:	83 e0       	ldi	r24, 0x03	; 3
    3bd8:	8a af       	std	Y+58, r24	; 0x3a
		M_Dio_void_setPinValue(SSD_A_PIN,(arr[i]>>0)&1);
    3bda:	8a ad       	ldd	r24, Y+58	; 0x3a
    3bdc:	28 2f       	mov	r18, r24
    3bde:	30 e0       	ldi	r19, 0x00	; 0
    3be0:	ce 01       	movw	r24, r28
    3be2:	cb 96       	adiw	r24, 0x3b	; 59
    3be4:	fc 01       	movw	r30, r24
    3be6:	e2 0f       	add	r30, r18
    3be8:	f3 1f       	adc	r31, r19
    3bea:	80 81       	ld	r24, Z
    3bec:	98 2f       	mov	r25, r24
    3bee:	91 70       	andi	r25, 0x01	; 1
    3bf0:	84 e1       	ldi	r24, 0x14	; 20
    3bf2:	69 2f       	mov	r22, r25
    3bf4:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_B_PIN,(arr[i]>>1)&1);
    3bf8:	8a ad       	ldd	r24, Y+58	; 0x3a
    3bfa:	28 2f       	mov	r18, r24
    3bfc:	30 e0       	ldi	r19, 0x00	; 0
    3bfe:	ce 01       	movw	r24, r28
    3c00:	cb 96       	adiw	r24, 0x3b	; 59
    3c02:	fc 01       	movw	r30, r24
    3c04:	e2 0f       	add	r30, r18
    3c06:	f3 1f       	adc	r31, r19
    3c08:	80 81       	ld	r24, Z
    3c0a:	86 95       	lsr	r24
    3c0c:	98 2f       	mov	r25, r24
    3c0e:	91 70       	andi	r25, 0x01	; 1
    3c10:	85 e1       	ldi	r24, 0x15	; 21
    3c12:	69 2f       	mov	r22, r25
    3c14:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_C_PIN,(arr[i]>>2)&1);
    3c18:	8a ad       	ldd	r24, Y+58	; 0x3a
    3c1a:	28 2f       	mov	r18, r24
    3c1c:	30 e0       	ldi	r19, 0x00	; 0
    3c1e:	ce 01       	movw	r24, r28
    3c20:	cb 96       	adiw	r24, 0x3b	; 59
    3c22:	fc 01       	movw	r30, r24
    3c24:	e2 0f       	add	r30, r18
    3c26:	f3 1f       	adc	r31, r19
    3c28:	80 81       	ld	r24, Z
    3c2a:	86 95       	lsr	r24
    3c2c:	86 95       	lsr	r24
    3c2e:	98 2f       	mov	r25, r24
    3c30:	91 70       	andi	r25, 0x01	; 1
    3c32:	86 e1       	ldi	r24, 0x16	; 22
    3c34:	69 2f       	mov	r22, r25
    3c36:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_D_PIN,(arr[i]>>3)&1);
    3c3a:	8a ad       	ldd	r24, Y+58	; 0x3a
    3c3c:	28 2f       	mov	r18, r24
    3c3e:	30 e0       	ldi	r19, 0x00	; 0
    3c40:	ce 01       	movw	r24, r28
    3c42:	cb 96       	adiw	r24, 0x3b	; 59
    3c44:	fc 01       	movw	r30, r24
    3c46:	e2 0f       	add	r30, r18
    3c48:	f3 1f       	adc	r31, r19
    3c4a:	80 81       	ld	r24, Z
    3c4c:	86 95       	lsr	r24
    3c4e:	86 95       	lsr	r24
    3c50:	86 95       	lsr	r24
    3c52:	98 2f       	mov	r25, r24
    3c54:	91 70       	andi	r25, 0x01	; 1
    3c56:	88 e1       	ldi	r24, 0x18	; 24
    3c58:	69 2f       	mov	r22, r25
    3c5a:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
		/*Enable digit 2 (remember it is pnp - active low*/
		M_Dio_void_setPinValue(SSD_DIG4_EN,DIO_LOW);
    3c5e:	8a e1       	ldi	r24, 0x1A	; 26
    3c60:	60 e0       	ldi	r22, 0x00	; 0
    3c62:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
    3c66:	80 e0       	ldi	r24, 0x00	; 0
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	a0 e8       	ldi	r26, 0x80	; 128
    3c6c:	bf e3       	ldi	r27, 0x3F	; 63
    3c6e:	8b 87       	std	Y+11, r24	; 0x0b
    3c70:	9c 87       	std	Y+12, r25	; 0x0c
    3c72:	ad 87       	std	Y+13, r26	; 0x0d
    3c74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c76:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c78:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c7e:	20 e0       	ldi	r18, 0x00	; 0
    3c80:	30 e0       	ldi	r19, 0x00	; 0
    3c82:	4a e7       	ldi	r20, 0x7A	; 122
    3c84:	55 e4       	ldi	r21, 0x45	; 69
    3c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c8a:	dc 01       	movw	r26, r24
    3c8c:	cb 01       	movw	r24, r22
    3c8e:	8f 83       	std	Y+7, r24	; 0x07
    3c90:	98 87       	std	Y+8, r25	; 0x08
    3c92:	a9 87       	std	Y+9, r26	; 0x09
    3c94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c96:	6f 81       	ldd	r22, Y+7	; 0x07
    3c98:	78 85       	ldd	r23, Y+8	; 0x08
    3c9a:	89 85       	ldd	r24, Y+9	; 0x09
    3c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c9e:	20 e0       	ldi	r18, 0x00	; 0
    3ca0:	30 e0       	ldi	r19, 0x00	; 0
    3ca2:	40 e8       	ldi	r20, 0x80	; 128
    3ca4:	5f e3       	ldi	r21, 0x3F	; 63
    3ca6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3caa:	88 23       	and	r24, r24
    3cac:	2c f4       	brge	.+10     	; 0x3cb8 <H_SSD_void_displayIntNumber+0x5de>
		__ticks = 1;
    3cae:	81 e0       	ldi	r24, 0x01	; 1
    3cb0:	90 e0       	ldi	r25, 0x00	; 0
    3cb2:	9e 83       	std	Y+6, r25	; 0x06
    3cb4:	8d 83       	std	Y+5, r24	; 0x05
    3cb6:	3f c0       	rjmp	.+126    	; 0x3d36 <H_SSD_void_displayIntNumber+0x65c>
	else if (__tmp > 65535)
    3cb8:	6f 81       	ldd	r22, Y+7	; 0x07
    3cba:	78 85       	ldd	r23, Y+8	; 0x08
    3cbc:	89 85       	ldd	r24, Y+9	; 0x09
    3cbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cc0:	20 e0       	ldi	r18, 0x00	; 0
    3cc2:	3f ef       	ldi	r19, 0xFF	; 255
    3cc4:	4f e7       	ldi	r20, 0x7F	; 127
    3cc6:	57 e4       	ldi	r21, 0x47	; 71
    3cc8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ccc:	18 16       	cp	r1, r24
    3cce:	4c f5       	brge	.+82     	; 0x3d22 <H_SSD_void_displayIntNumber+0x648>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cd8:	20 e0       	ldi	r18, 0x00	; 0
    3cda:	30 e0       	ldi	r19, 0x00	; 0
    3cdc:	40 e2       	ldi	r20, 0x20	; 32
    3cde:	51 e4       	ldi	r21, 0x41	; 65
    3ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ce4:	dc 01       	movw	r26, r24
    3ce6:	cb 01       	movw	r24, r22
    3ce8:	bc 01       	movw	r22, r24
    3cea:	cd 01       	movw	r24, r26
    3cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cf0:	dc 01       	movw	r26, r24
    3cf2:	cb 01       	movw	r24, r22
    3cf4:	9e 83       	std	Y+6, r25	; 0x06
    3cf6:	8d 83       	std	Y+5, r24	; 0x05
    3cf8:	0f c0       	rjmp	.+30     	; 0x3d18 <H_SSD_void_displayIntNumber+0x63e>
    3cfa:	80 e9       	ldi	r24, 0x90	; 144
    3cfc:	91 e0       	ldi	r25, 0x01	; 1
    3cfe:	9c 83       	std	Y+4, r25	; 0x04
    3d00:	8b 83       	std	Y+3, r24	; 0x03
    3d02:	8b 81       	ldd	r24, Y+3	; 0x03
    3d04:	9c 81       	ldd	r25, Y+4	; 0x04
    3d06:	01 97       	sbiw	r24, 0x01	; 1
    3d08:	f1 f7       	brne	.-4      	; 0x3d06 <H_SSD_void_displayIntNumber+0x62c>
    3d0a:	9c 83       	std	Y+4, r25	; 0x04
    3d0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d10:	9e 81       	ldd	r25, Y+6	; 0x06
    3d12:	01 97       	sbiw	r24, 0x01	; 1
    3d14:	9e 83       	std	Y+6, r25	; 0x06
    3d16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d18:	8d 81       	ldd	r24, Y+5	; 0x05
    3d1a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d1c:	00 97       	sbiw	r24, 0x00	; 0
    3d1e:	69 f7       	brne	.-38     	; 0x3cfa <H_SSD_void_displayIntNumber+0x620>
    3d20:	14 c0       	rjmp	.+40     	; 0x3d4a <H_SSD_void_displayIntNumber+0x670>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d22:	6f 81       	ldd	r22, Y+7	; 0x07
    3d24:	78 85       	ldd	r23, Y+8	; 0x08
    3d26:	89 85       	ldd	r24, Y+9	; 0x09
    3d28:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d2e:	dc 01       	movw	r26, r24
    3d30:	cb 01       	movw	r24, r22
    3d32:	9e 83       	std	Y+6, r25	; 0x06
    3d34:	8d 83       	std	Y+5, r24	; 0x05
    3d36:	8d 81       	ldd	r24, Y+5	; 0x05
    3d38:	9e 81       	ldd	r25, Y+6	; 0x06
    3d3a:	9a 83       	std	Y+2, r25	; 0x02
    3d3c:	89 83       	std	Y+1, r24	; 0x01
    3d3e:	89 81       	ldd	r24, Y+1	; 0x01
    3d40:	9a 81       	ldd	r25, Y+2	; 0x02
    3d42:	01 97       	sbiw	r24, 0x01	; 1
    3d44:	f1 f7       	brne	.-4      	; 0x3d42 <H_SSD_void_displayIntNumber+0x668>
    3d46:	9a 83       	std	Y+2, r25	; 0x02
    3d48:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		M_Dio_void_setPinValue(SSD_DIG4_EN,DIO_HIGH);
    3d4a:	8a e1       	ldi	r24, 0x1A	; 26
    3d4c:	61 e0       	ldi	r22, 0x01	; 1
    3d4e:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
		arr[i]= Copy_number %10;
		Copy_number /= 10;
		i++;
	}
	/*prepare units to be send to BCD(4bits)*/
	for(u8 j=0;j<SSD_DISPLAY_TIME*4;j++)
    3d52:	89 ad       	ldd	r24, Y+57	; 0x39
    3d54:	8f 5f       	subi	r24, 0xFF	; 255
    3d56:	89 af       	std	Y+57, r24	; 0x39
    3d58:	05 cd       	rjmp	.-1526   	; 0x3764 <H_SSD_void_displayIntNumber+0x8a>

00003d5a <H_readPB>:
#include"PB_Types.h"
#include"PB_CFG.h"
#include"PB_Init.h"

PB_State H_readPB(PB_ID PushBID,PB_ActiveType Mode)
{
    3d5a:	df 93       	push	r29
    3d5c:	cf 93       	push	r28
    3d5e:	cd b7       	in	r28, 0x3d	; 61
    3d60:	de b7       	in	r29, 0x3e	; 62
    3d62:	64 97       	sbiw	r28, 0x14	; 20
    3d64:	0f b6       	in	r0, 0x3f	; 63
    3d66:	f8 94       	cli
    3d68:	de bf       	out	0x3e, r29	; 62
    3d6a:	0f be       	out	0x3f, r0	; 63
    3d6c:	cd bf       	out	0x3d, r28	; 61
    3d6e:	89 8b       	std	Y+17, r24	; 0x11
    3d70:	6a 8b       	std	Y+18, r22	; 0x12
	PB_State Button_state=PB_RELEASED;
    3d72:	81 e0       	ldi	r24, 0x01	; 1
    3d74:	88 8b       	std	Y+16, r24	; 0x10
	Dio_LevelType Local_pin_value;
	switch(PushBID)
    3d76:	89 89       	ldd	r24, Y+17	; 0x11
    3d78:	28 2f       	mov	r18, r24
    3d7a:	30 e0       	ldi	r19, 0x00	; 0
    3d7c:	3c 8b       	std	Y+20, r19	; 0x14
    3d7e:	2b 8b       	std	Y+19, r18	; 0x13
    3d80:	8b 89       	ldd	r24, Y+19	; 0x13
    3d82:	9c 89       	ldd	r25, Y+20	; 0x14
    3d84:	81 30       	cpi	r24, 0x01	; 1
    3d86:	91 05       	cpc	r25, r1
    3d88:	09 f4       	brne	.+2      	; 0x3d8c <H_readPB+0x32>
    3d8a:	9b c0       	rjmp	.+310    	; 0x3ec2 <H_readPB+0x168>
    3d8c:	2b 89       	ldd	r18, Y+19	; 0x13
    3d8e:	3c 89       	ldd	r19, Y+20	; 0x14
    3d90:	22 30       	cpi	r18, 0x02	; 2
    3d92:	31 05       	cpc	r19, r1
    3d94:	2c f4       	brge	.+10     	; 0x3da0 <H_readPB+0x46>
    3d96:	8b 89       	ldd	r24, Y+19	; 0x13
    3d98:	9c 89       	ldd	r25, Y+20	; 0x14
    3d9a:	00 97       	sbiw	r24, 0x00	; 0
    3d9c:	71 f0       	breq	.+28     	; 0x3dba <H_readPB+0x60>
    3d9e:	c3 c0       	rjmp	.+390    	; 0x3f26 <H_readPB+0x1cc>
    3da0:	2b 89       	ldd	r18, Y+19	; 0x13
    3da2:	3c 89       	ldd	r19, Y+20	; 0x14
    3da4:	22 30       	cpi	r18, 0x02	; 2
    3da6:	31 05       	cpc	r19, r1
    3da8:	09 f4       	brne	.+2      	; 0x3dac <H_readPB+0x52>
    3daa:	9c c0       	rjmp	.+312    	; 0x3ee4 <H_readPB+0x18a>
    3dac:	8b 89       	ldd	r24, Y+19	; 0x13
    3dae:	9c 89       	ldd	r25, Y+20	; 0x14
    3db0:	83 30       	cpi	r24, 0x03	; 3
    3db2:	91 05       	cpc	r25, r1
    3db4:	09 f4       	brne	.+2      	; 0x3db8 <H_readPB+0x5e>
    3db6:	a7 c0       	rjmp	.+334    	; 0x3f06 <H_readPB+0x1ac>
    3db8:	b6 c0       	rjmp	.+364    	; 0x3f26 <H_readPB+0x1cc>
	{
	case PB_ID1:
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW1);
    3dba:	8f e2       	ldi	r24, 0x2F	; 47
    3dbc:	0e 94 c9 13 	call	0x2792	; 0x2792 <M_Dio_en_getPinValue>
    3dc0:	8f 87       	std	Y+15, r24	; 0x0f
		if(Local_pin_value==PB_PRESSED_ACTL)
    3dc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dc4:	88 23       	and	r24, r24
    3dc6:	09 f0       	breq	.+2      	; 0x3dca <H_readPB+0x70>
    3dc8:	ae c0       	rjmp	.+348    	; 0x3f26 <H_readPB+0x1cc>
    3dca:	80 e0       	ldi	r24, 0x00	; 0
    3dcc:	90 e0       	ldi	r25, 0x00	; 0
    3dce:	a8 e4       	ldi	r26, 0x48	; 72
    3dd0:	b2 e4       	ldi	r27, 0x42	; 66
    3dd2:	8b 87       	std	Y+11, r24	; 0x0b
    3dd4:	9c 87       	std	Y+12, r25	; 0x0c
    3dd6:	ad 87       	std	Y+13, r26	; 0x0d
    3dd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dda:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ddc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dde:	8d 85       	ldd	r24, Y+13	; 0x0d
    3de0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3de2:	20 e0       	ldi	r18, 0x00	; 0
    3de4:	30 e0       	ldi	r19, 0x00	; 0
    3de6:	4a e7       	ldi	r20, 0x7A	; 122
    3de8:	55 e4       	ldi	r21, 0x45	; 69
    3dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dee:	dc 01       	movw	r26, r24
    3df0:	cb 01       	movw	r24, r22
    3df2:	8f 83       	std	Y+7, r24	; 0x07
    3df4:	98 87       	std	Y+8, r25	; 0x08
    3df6:	a9 87       	std	Y+9, r26	; 0x09
    3df8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dfa:	6f 81       	ldd	r22, Y+7	; 0x07
    3dfc:	78 85       	ldd	r23, Y+8	; 0x08
    3dfe:	89 85       	ldd	r24, Y+9	; 0x09
    3e00:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e02:	20 e0       	ldi	r18, 0x00	; 0
    3e04:	30 e0       	ldi	r19, 0x00	; 0
    3e06:	40 e8       	ldi	r20, 0x80	; 128
    3e08:	5f e3       	ldi	r21, 0x3F	; 63
    3e0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e0e:	88 23       	and	r24, r24
    3e10:	2c f4       	brge	.+10     	; 0x3e1c <H_readPB+0xc2>
		__ticks = 1;
    3e12:	81 e0       	ldi	r24, 0x01	; 1
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	9e 83       	std	Y+6, r25	; 0x06
    3e18:	8d 83       	std	Y+5, r24	; 0x05
    3e1a:	3f c0       	rjmp	.+126    	; 0x3e9a <H_readPB+0x140>
	else if (__tmp > 65535)
    3e1c:	6f 81       	ldd	r22, Y+7	; 0x07
    3e1e:	78 85       	ldd	r23, Y+8	; 0x08
    3e20:	89 85       	ldd	r24, Y+9	; 0x09
    3e22:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e24:	20 e0       	ldi	r18, 0x00	; 0
    3e26:	3f ef       	ldi	r19, 0xFF	; 255
    3e28:	4f e7       	ldi	r20, 0x7F	; 127
    3e2a:	57 e4       	ldi	r21, 0x47	; 71
    3e2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e30:	18 16       	cp	r1, r24
    3e32:	4c f5       	brge	.+82     	; 0x3e86 <H_readPB+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e34:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e36:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e38:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e3c:	20 e0       	ldi	r18, 0x00	; 0
    3e3e:	30 e0       	ldi	r19, 0x00	; 0
    3e40:	40 e2       	ldi	r20, 0x20	; 32
    3e42:	51 e4       	ldi	r21, 0x41	; 65
    3e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e48:	dc 01       	movw	r26, r24
    3e4a:	cb 01       	movw	r24, r22
    3e4c:	bc 01       	movw	r22, r24
    3e4e:	cd 01       	movw	r24, r26
    3e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e54:	dc 01       	movw	r26, r24
    3e56:	cb 01       	movw	r24, r22
    3e58:	9e 83       	std	Y+6, r25	; 0x06
    3e5a:	8d 83       	std	Y+5, r24	; 0x05
    3e5c:	0f c0       	rjmp	.+30     	; 0x3e7c <H_readPB+0x122>
    3e5e:	80 e9       	ldi	r24, 0x90	; 144
    3e60:	91 e0       	ldi	r25, 0x01	; 1
    3e62:	9c 83       	std	Y+4, r25	; 0x04
    3e64:	8b 83       	std	Y+3, r24	; 0x03
    3e66:	8b 81       	ldd	r24, Y+3	; 0x03
    3e68:	9c 81       	ldd	r25, Y+4	; 0x04
    3e6a:	01 97       	sbiw	r24, 0x01	; 1
    3e6c:	f1 f7       	brne	.-4      	; 0x3e6a <H_readPB+0x110>
    3e6e:	9c 83       	std	Y+4, r25	; 0x04
    3e70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e72:	8d 81       	ldd	r24, Y+5	; 0x05
    3e74:	9e 81       	ldd	r25, Y+6	; 0x06
    3e76:	01 97       	sbiw	r24, 0x01	; 1
    3e78:	9e 83       	std	Y+6, r25	; 0x06
    3e7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e80:	00 97       	sbiw	r24, 0x00	; 0
    3e82:	69 f7       	brne	.-38     	; 0x3e5e <H_readPB+0x104>
    3e84:	19 c0       	rjmp	.+50     	; 0x3eb8 <H_readPB+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e86:	6f 81       	ldd	r22, Y+7	; 0x07
    3e88:	78 85       	ldd	r23, Y+8	; 0x08
    3e8a:	89 85       	ldd	r24, Y+9	; 0x09
    3e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e92:	dc 01       	movw	r26, r24
    3e94:	cb 01       	movw	r24, r22
    3e96:	9e 83       	std	Y+6, r25	; 0x06
    3e98:	8d 83       	std	Y+5, r24	; 0x05
    3e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e9e:	9a 83       	std	Y+2, r25	; 0x02
    3ea0:	89 83       	std	Y+1, r24	; 0x01
    3ea2:	89 81       	ldd	r24, Y+1	; 0x01
    3ea4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ea6:	01 97       	sbiw	r24, 0x01	; 1
    3ea8:	f1 f7       	brne	.-4      	; 0x3ea6 <H_readPB+0x14c>
    3eaa:	9a 83       	std	Y+2, r25	; 0x02
    3eac:	89 83       	std	Y+1, r24	; 0x01
    3eae:	04 c0       	rjmp	.+8      	; 0x3eb8 <H_readPB+0x15e>
		{
			_delay_ms(50);
			while(Local_pin_value==PB_PRESSED_ACTL)
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW1);
    3eb0:	8f e2       	ldi	r24, 0x2F	; 47
    3eb2:	0e 94 c9 13 	call	0x2792	; 0x2792 <M_Dio_en_getPinValue>
    3eb6:	8f 87       	std	Y+15, r24	; 0x0f
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW1);
		if(Local_pin_value==PB_PRESSED_ACTL)
		{
			_delay_ms(50);
			while(Local_pin_value==PB_PRESSED_ACTL)
    3eb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3eba:	88 23       	and	r24, r24
    3ebc:	c9 f3       	breq	.-14     	; 0x3eb0 <H_readPB+0x156>
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW1);
			}
			Button_state=PB_PRESSED;
    3ebe:	18 8a       	std	Y+16, r1	; 0x10
    3ec0:	32 c0       	rjmp	.+100    	; 0x3f26 <H_readPB+0x1cc>
#error("Wrong Activation Mode")
#endif
	break;
	case PB_ID2:
#if(Mode == PB_ACTIVE_LOW)
			Local_pin_value=M_Dio_en_getPinValue(PB_SW2);
    3ec2:	8e e2       	ldi	r24, 0x2E	; 46
    3ec4:	0e 94 c9 13 	call	0x2792	; 0x2792 <M_Dio_en_getPinValue>
    3ec8:	8f 87       	std	Y+15, r24	; 0x0f
			if(Local_pin_value==PB_PRESSED_ACTL)
    3eca:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ecc:	88 23       	and	r24, r24
    3ece:	59 f5       	brne	.+86     	; 0x3f26 <H_readPB+0x1cc>
    3ed0:	04 c0       	rjmp	.+8      	; 0x3eda <H_readPB+0x180>
			{
				while(Local_pin_value==PB_PRESSED_ACTL)
				{
					Local_pin_value=M_Dio_en_getPinValue(PB_SW2);
    3ed2:	8e e2       	ldi	r24, 0x2E	; 46
    3ed4:	0e 94 c9 13 	call	0x2792	; 0x2792 <M_Dio_en_getPinValue>
    3ed8:	8f 87       	std	Y+15, r24	; 0x0f
	case PB_ID2:
#if(Mode == PB_ACTIVE_LOW)
			Local_pin_value=M_Dio_en_getPinValue(PB_SW2);
			if(Local_pin_value==PB_PRESSED_ACTL)
			{
				while(Local_pin_value==PB_PRESSED_ACTL)
    3eda:	8f 85       	ldd	r24, Y+15	; 0x0f
    3edc:	88 23       	and	r24, r24
    3ede:	c9 f3       	breq	.-14     	; 0x3ed2 <H_readPB+0x178>
				{
					Local_pin_value=M_Dio_en_getPinValue(PB_SW2);
				}
				Button_state=PB_PRESSED;
    3ee0:	18 8a       	std	Y+16, r1	; 0x10
    3ee2:	21 c0       	rjmp	.+66     	; 0x3f26 <H_readPB+0x1cc>
#error("Wrong Activation Mode")
#endif
		break;
		case PB_ID3:
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW3);
    3ee4:	8d e2       	ldi	r24, 0x2D	; 45
    3ee6:	0e 94 c9 13 	call	0x2792	; 0x2792 <M_Dio_en_getPinValue>
    3eea:	8f 87       	std	Y+15, r24	; 0x0f
		if(Local_pin_value==PB_PRESSED_ACTL)
    3eec:	8f 85       	ldd	r24, Y+15	; 0x0f
    3eee:	88 23       	and	r24, r24
    3ef0:	d1 f4       	brne	.+52     	; 0x3f26 <H_readPB+0x1cc>
    3ef2:	04 c0       	rjmp	.+8      	; 0x3efc <H_readPB+0x1a2>
		{
			while(Local_pin_value==PB_PRESSED_ACTL)
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW3);
    3ef4:	8d e2       	ldi	r24, 0x2D	; 45
    3ef6:	0e 94 c9 13 	call	0x2792	; 0x2792 <M_Dio_en_getPinValue>
    3efa:	8f 87       	std	Y+15, r24	; 0x0f
		case PB_ID3:
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW3);
		if(Local_pin_value==PB_PRESSED_ACTL)
		{
			while(Local_pin_value==PB_PRESSED_ACTL)
    3efc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3efe:	88 23       	and	r24, r24
    3f00:	c9 f3       	breq	.-14     	; 0x3ef4 <H_readPB+0x19a>
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW3);
			}
			Button_state=PB_PRESSED;
    3f02:	18 8a       	std	Y+16, r1	; 0x10
    3f04:	10 c0       	rjmp	.+32     	; 0x3f26 <H_readPB+0x1cc>
#error("Wrong Activation Mode")
#endif
	break;
	case PB_ID4:
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW4);
    3f06:	8b e2       	ldi	r24, 0x2B	; 43
    3f08:	0e 94 c9 13 	call	0x2792	; 0x2792 <M_Dio_en_getPinValue>
    3f0c:	8f 87       	std	Y+15, r24	; 0x0f
		if(Local_pin_value==PB_PRESSED_ACTL)
    3f0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f10:	88 23       	and	r24, r24
    3f12:	49 f4       	brne	.+18     	; 0x3f26 <H_readPB+0x1cc>
    3f14:	04 c0       	rjmp	.+8      	; 0x3f1e <H_readPB+0x1c4>
		{
			while(Local_pin_value==PB_PRESSED_ACTL)
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW4);
    3f16:	8b e2       	ldi	r24, 0x2B	; 43
    3f18:	0e 94 c9 13 	call	0x2792	; 0x2792 <M_Dio_en_getPinValue>
    3f1c:	8f 87       	std	Y+15, r24	; 0x0f
	case PB_ID4:
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW4);
		if(Local_pin_value==PB_PRESSED_ACTL)
		{
			while(Local_pin_value==PB_PRESSED_ACTL)
    3f1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f20:	88 23       	and	r24, r24
    3f22:	c9 f3       	breq	.-14     	; 0x3f16 <H_readPB+0x1bc>
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW4);
			}
			Button_state=PB_PRESSED;
    3f24:	18 8a       	std	Y+16, r1	; 0x10
#else
#error("Wrong Activation Mode")
#endif
	break;
	}
	return Button_state;
    3f26:	88 89       	ldd	r24, Y+16	; 0x10
}
    3f28:	64 96       	adiw	r28, 0x14	; 20
    3f2a:	0f b6       	in	r0, 0x3f	; 63
    3f2c:	f8 94       	cli
    3f2e:	de bf       	out	0x3e, r29	; 62
    3f30:	0f be       	out	0x3f, r0	; 63
    3f32:	cd bf       	out	0x3d, r28	; 61
    3f34:	cf 91       	pop	r28
    3f36:	df 91       	pop	r29
    3f38:	08 95       	ret

00003f3a <H_Temprature_void_Init>:



ADC_ConfigType ADC_OBJECT={VCC_5V,DIV_BY_8,Right_Adjust,ADC0,AUTO_Trigger_Enable,Free_Runnin_Mode};
void H_Temprature_void_Init(void)
{
    3f3a:	df 93       	push	r29
    3f3c:	cf 93       	push	r28
    3f3e:	cd b7       	in	r28, 0x3d	; 61
    3f40:	de b7       	in	r29, 0x3e	; 62
	ADC_Init(&ADC_OBJECT);
    3f42:	8d e9       	ldi	r24, 0x9D	; 157
    3f44:	91 e0       	ldi	r25, 0x01	; 1
    3f46:	0e 94 6d 16 	call	0x2cda	; 0x2cda <ADC_Init>


}
    3f4a:	cf 91       	pop	r28
    3f4c:	df 91       	pop	r29
    3f4e:	08 95       	ret

00003f50 <H_Temprature_u16_Read>:
u16 H_Temprature_u16_Read(void)
{
    3f50:	df 93       	push	r29
    3f52:	cf 93       	push	r28
    3f54:	00 d0       	rcall	.+0      	; 0x3f56 <H_Temprature_u16_Read+0x6>
    3f56:	00 d0       	rcall	.+0      	; 0x3f58 <H_Temprature_u16_Read+0x8>
    3f58:	cd b7       	in	r28, 0x3d	; 61
    3f5a:	de b7       	in	r29, 0x3e	; 62
	u16 Return_value=0;
    3f5c:	1c 82       	std	Y+4, r1	; 0x04
    3f5e:	1b 82       	std	Y+3, r1	; 0x03
	u16 Temp_value=0;
    3f60:	1a 82       	std	Y+2, r1	; 0x02
    3f62:	19 82       	std	Y+1, r1	; 0x01
	Return_value=ADC_getDigitalValueSynchNonBlocking(ADC0,ENABLE);
    3f64:	80 e0       	ldi	r24, 0x00	; 0
    3f66:	61 e0       	ldi	r22, 0x01	; 1
    3f68:	0e 94 f6 17 	call	0x2fec	; 0x2fec <ADC_getDigitalValueSynchNonBlocking>
    3f6c:	9c 83       	std	Y+4, r25	; 0x04
    3f6e:	8b 83       	std	Y+3, r24	; 0x03
	Temp_value=(((Return_value*5)/10)-1);
    3f70:	2b 81       	ldd	r18, Y+3	; 0x03
    3f72:	3c 81       	ldd	r19, Y+4	; 0x04
    3f74:	c9 01       	movw	r24, r18
    3f76:	88 0f       	add	r24, r24
    3f78:	99 1f       	adc	r25, r25
    3f7a:	88 0f       	add	r24, r24
    3f7c:	99 1f       	adc	r25, r25
    3f7e:	82 0f       	add	r24, r18
    3f80:	93 1f       	adc	r25, r19
    3f82:	2a e0       	ldi	r18, 0x0A	; 10
    3f84:	30 e0       	ldi	r19, 0x00	; 0
    3f86:	b9 01       	movw	r22, r18
    3f88:	0e 94 a4 28 	call	0x5148	; 0x5148 <__udivmodhi4>
    3f8c:	cb 01       	movw	r24, r22
    3f8e:	01 97       	sbiw	r24, 0x01	; 1
    3f90:	9a 83       	std	Y+2, r25	; 0x02
    3f92:	89 83       	std	Y+1, r24	; 0x01
	return Temp_value;
    3f94:	89 81       	ldd	r24, Y+1	; 0x01
    3f96:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3f98:	0f 90       	pop	r0
    3f9a:	0f 90       	pop	r0
    3f9c:	0f 90       	pop	r0
    3f9e:	0f 90       	pop	r0
    3fa0:	cf 91       	pop	r28
    3fa2:	df 91       	pop	r29
    3fa4:	08 95       	ret

00003fa6 <H_LED_void_Turn_on>:
#include"LED_CFG.h"
#include"LED_Init.h"


void H_LED_void_Turn_on(u8 ledID)
{
    3fa6:	df 93       	push	r29
    3fa8:	cf 93       	push	r28
    3faa:	00 d0       	rcall	.+0      	; 0x3fac <H_LED_void_Turn_on+0x6>
    3fac:	0f 92       	push	r0
    3fae:	cd b7       	in	r28, 0x3d	; 61
    3fb0:	de b7       	in	r29, 0x3e	; 62
    3fb2:	89 83       	std	Y+1, r24	; 0x01
	switch(ledID)
    3fb4:	89 81       	ldd	r24, Y+1	; 0x01
    3fb6:	28 2f       	mov	r18, r24
    3fb8:	30 e0       	ldi	r19, 0x00	; 0
    3fba:	3b 83       	std	Y+3, r19	; 0x03
    3fbc:	2a 83       	std	Y+2, r18	; 0x02
    3fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc0:	9b 81       	ldd	r25, Y+3	; 0x03
    3fc2:	81 30       	cpi	r24, 0x01	; 1
    3fc4:	91 05       	cpc	r25, r1
    3fc6:	f9 f0       	breq	.+62     	; 0x4006 <H_LED_void_Turn_on+0x60>
    3fc8:	2a 81       	ldd	r18, Y+2	; 0x02
    3fca:	3b 81       	ldd	r19, Y+3	; 0x03
    3fcc:	22 30       	cpi	r18, 0x02	; 2
    3fce:	31 05       	cpc	r19, r1
    3fd0:	2c f4       	brge	.+10     	; 0x3fdc <H_LED_void_Turn_on+0x36>
    3fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fd4:	9b 81       	ldd	r25, Y+3	; 0x03
    3fd6:	00 97       	sbiw	r24, 0x00	; 0
    3fd8:	61 f0       	breq	.+24     	; 0x3ff2 <H_LED_void_Turn_on+0x4c>
    3fda:	1e c0       	rjmp	.+60     	; 0x4018 <H_LED_void_Turn_on+0x72>
    3fdc:	2a 81       	ldd	r18, Y+2	; 0x02
    3fde:	3b 81       	ldd	r19, Y+3	; 0x03
    3fe0:	22 30       	cpi	r18, 0x02	; 2
    3fe2:	31 05       	cpc	r19, r1
    3fe4:	59 f0       	breq	.+22     	; 0x3ffc <H_LED_void_Turn_on+0x56>
    3fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    3fe8:	9b 81       	ldd	r25, Y+3	; 0x03
    3fea:	83 30       	cpi	r24, 0x03	; 3
    3fec:	91 05       	cpc	r25, r1
    3fee:	81 f0       	breq	.+32     	; 0x4010 <H_LED_void_Turn_on+0x6a>
    3ff0:	13 c0       	rjmp	.+38     	; 0x4018 <H_LED_void_Turn_on+0x72>
	{
	case LED_RED:
#if(LED_RED_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_RED_PIN,DIO_HIGH);
    3ff2:	8b e1       	ldi	r24, 0x1B	; 27
    3ff4:	61 e0       	ldi	r22, 0x01	; 1
    3ff6:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
    3ffa:	0e c0       	rjmp	.+28     	; 0x4018 <H_LED_void_Turn_on+0x72>
#error("Wrong Led direction")
#endif
		break;
	case LED_GREEN:
#if(LED_GREEN_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_GREEN_PIN,DIO_HIGH);
    3ffc:	8e e0       	ldi	r24, 0x0E	; 14
    3ffe:	61 e0       	ldi	r22, 0x01	; 1
    4000:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
    4004:	09 c0       	rjmp	.+18     	; 0x4018 <H_LED_void_Turn_on+0x72>
#error("Wrong Led direction")
#endif
		break;
	case LED_BLUE:
#if(LED_BLUE_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_BLUE_PIN,DIO_HIGH);
    4006:	8f e0       	ldi	r24, 0x0F	; 15
    4008:	61 e0       	ldi	r22, 0x01	; 1
    400a:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
    400e:	04 c0       	rjmp	.+8      	; 0x4018 <H_LED_void_Turn_on+0x72>
#error("Wrong Led direction")
#endif
		break;
	case LED_YELLOW:
#if(LED_YELLOW_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_YELLOW_PIN,DIO_HIGH);
    4010:	80 e1       	ldi	r24, 0x10	; 16
    4012:	61 e0       	ldi	r22, 0x01	; 1
    4014:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
#error("Wrong Led direction")
#endif
		break;

	}
}
    4018:	0f 90       	pop	r0
    401a:	0f 90       	pop	r0
    401c:	0f 90       	pop	r0
    401e:	cf 91       	pop	r28
    4020:	df 91       	pop	r29
    4022:	08 95       	ret

00004024 <H_LED_void_Turn_off>:
void H_LED_void_Turn_off(u8 ledID)
{
    4024:	df 93       	push	r29
    4026:	cf 93       	push	r28
    4028:	00 d0       	rcall	.+0      	; 0x402a <H_LED_void_Turn_off+0x6>
    402a:	0f 92       	push	r0
    402c:	cd b7       	in	r28, 0x3d	; 61
    402e:	de b7       	in	r29, 0x3e	; 62
    4030:	89 83       	std	Y+1, r24	; 0x01
	switch(ledID)
    4032:	89 81       	ldd	r24, Y+1	; 0x01
    4034:	28 2f       	mov	r18, r24
    4036:	30 e0       	ldi	r19, 0x00	; 0
    4038:	3b 83       	std	Y+3, r19	; 0x03
    403a:	2a 83       	std	Y+2, r18	; 0x02
    403c:	8a 81       	ldd	r24, Y+2	; 0x02
    403e:	9b 81       	ldd	r25, Y+3	; 0x03
    4040:	81 30       	cpi	r24, 0x01	; 1
    4042:	91 05       	cpc	r25, r1
    4044:	f9 f0       	breq	.+62     	; 0x4084 <H_LED_void_Turn_off+0x60>
    4046:	2a 81       	ldd	r18, Y+2	; 0x02
    4048:	3b 81       	ldd	r19, Y+3	; 0x03
    404a:	22 30       	cpi	r18, 0x02	; 2
    404c:	31 05       	cpc	r19, r1
    404e:	2c f4       	brge	.+10     	; 0x405a <H_LED_void_Turn_off+0x36>
    4050:	8a 81       	ldd	r24, Y+2	; 0x02
    4052:	9b 81       	ldd	r25, Y+3	; 0x03
    4054:	00 97       	sbiw	r24, 0x00	; 0
    4056:	61 f0       	breq	.+24     	; 0x4070 <H_LED_void_Turn_off+0x4c>
    4058:	1e c0       	rjmp	.+60     	; 0x4096 <H_LED_void_Turn_off+0x72>
    405a:	2a 81       	ldd	r18, Y+2	; 0x02
    405c:	3b 81       	ldd	r19, Y+3	; 0x03
    405e:	22 30       	cpi	r18, 0x02	; 2
    4060:	31 05       	cpc	r19, r1
    4062:	59 f0       	breq	.+22     	; 0x407a <H_LED_void_Turn_off+0x56>
    4064:	8a 81       	ldd	r24, Y+2	; 0x02
    4066:	9b 81       	ldd	r25, Y+3	; 0x03
    4068:	83 30       	cpi	r24, 0x03	; 3
    406a:	91 05       	cpc	r25, r1
    406c:	81 f0       	breq	.+32     	; 0x408e <H_LED_void_Turn_off+0x6a>
    406e:	13 c0       	rjmp	.+38     	; 0x4096 <H_LED_void_Turn_off+0x72>
		{
		case LED_RED:
#if(LED_RED_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_RED_PIN,DIO_LOW);
    4070:	8b e1       	ldi	r24, 0x1B	; 27
    4072:	60 e0       	ldi	r22, 0x00	; 0
    4074:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
    4078:	0e c0       	rjmp	.+28     	; 0x4096 <H_LED_void_Turn_off+0x72>
#error("Wrong Led direction")
#endif
		break;
		case LED_GREEN:
#if(LED_GREEN_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_GREEN_PIN,DIO_LOW);
    407a:	8e e0       	ldi	r24, 0x0E	; 14
    407c:	60 e0       	ldi	r22, 0x00	; 0
    407e:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
    4082:	09 c0       	rjmp	.+18     	; 0x4096 <H_LED_void_Turn_off+0x72>
#error("Wrong Led direction")
#endif
		break;
		case LED_BLUE:
#if(LED_BLUE_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_BLUE_PIN,DIO_LOW);
    4084:	8f e0       	ldi	r24, 0x0F	; 15
    4086:	60 e0       	ldi	r22, 0x00	; 0
    4088:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
    408c:	04 c0       	rjmp	.+8      	; 0x4096 <H_LED_void_Turn_off+0x72>
#error("Wrong Led direction")
#endif
		break;
		case LED_YELLOW:
#if(LED_YELLOW_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_YELLOW_PIN,DIO_LOW);
    408e:	80 e1       	ldi	r24, 0x10	; 16
    4090:	60 e0       	ldi	r22, 0x00	; 0
    4092:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
#error("Wrong Led direction")
#endif
		break;

		}
}
    4096:	0f 90       	pop	r0
    4098:	0f 90       	pop	r0
    409a:	0f 90       	pop	r0
    409c:	cf 91       	pop	r28
    409e:	df 91       	pop	r29
    40a0:	08 95       	ret

000040a2 <H_LED_void_Toggle>:

void H_LED_void_Toggle(u8 ledID)
{
    40a2:	df 93       	push	r29
    40a4:	cf 93       	push	r28
    40a6:	00 d0       	rcall	.+0      	; 0x40a8 <H_LED_void_Toggle+0x6>
    40a8:	0f 92       	push	r0
    40aa:	cd b7       	in	r28, 0x3d	; 61
    40ac:	de b7       	in	r29, 0x3e	; 62
    40ae:	89 83       	std	Y+1, r24	; 0x01
	switch(ledID)
    40b0:	89 81       	ldd	r24, Y+1	; 0x01
    40b2:	28 2f       	mov	r18, r24
    40b4:	30 e0       	ldi	r19, 0x00	; 0
    40b6:	3b 83       	std	Y+3, r19	; 0x03
    40b8:	2a 83       	std	Y+2, r18	; 0x02
    40ba:	8a 81       	ldd	r24, Y+2	; 0x02
    40bc:	9b 81       	ldd	r25, Y+3	; 0x03
    40be:	81 30       	cpi	r24, 0x01	; 1
    40c0:	91 05       	cpc	r25, r1
    40c2:	e9 f0       	breq	.+58     	; 0x40fe <H_LED_void_Toggle+0x5c>
    40c4:	2a 81       	ldd	r18, Y+2	; 0x02
    40c6:	3b 81       	ldd	r19, Y+3	; 0x03
    40c8:	22 30       	cpi	r18, 0x02	; 2
    40ca:	31 05       	cpc	r19, r1
    40cc:	2c f4       	brge	.+10     	; 0x40d8 <H_LED_void_Toggle+0x36>
    40ce:	8a 81       	ldd	r24, Y+2	; 0x02
    40d0:	9b 81       	ldd	r25, Y+3	; 0x03
    40d2:	00 97       	sbiw	r24, 0x00	; 0
    40d4:	61 f0       	breq	.+24     	; 0x40ee <H_LED_void_Toggle+0x4c>
    40d6:	1a c0       	rjmp	.+52     	; 0x410c <H_LED_void_Toggle+0x6a>
    40d8:	2a 81       	ldd	r18, Y+2	; 0x02
    40da:	3b 81       	ldd	r19, Y+3	; 0x03
    40dc:	22 30       	cpi	r18, 0x02	; 2
    40de:	31 05       	cpc	r19, r1
    40e0:	51 f0       	breq	.+20     	; 0x40f6 <H_LED_void_Toggle+0x54>
    40e2:	8a 81       	ldd	r24, Y+2	; 0x02
    40e4:	9b 81       	ldd	r25, Y+3	; 0x03
    40e6:	83 30       	cpi	r24, 0x03	; 3
    40e8:	91 05       	cpc	r25, r1
    40ea:	69 f0       	breq	.+26     	; 0x4106 <H_LED_void_Toggle+0x64>
    40ec:	0f c0       	rjmp	.+30     	; 0x410c <H_LED_void_Toggle+0x6a>
	{
		case LED_RED:
			M_Dio_void_togglePinValue(LED_RED_PIN);
    40ee:	8b e1       	ldi	r24, 0x1B	; 27
    40f0:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <M_Dio_void_togglePinValue>
    40f4:	0b c0       	rjmp	.+22     	; 0x410c <H_LED_void_Toggle+0x6a>
		break;
		case LED_GREEN:
			M_Dio_void_togglePinValue(LED_GREEN_PIN);
    40f6:	8e e0       	ldi	r24, 0x0E	; 14
    40f8:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <M_Dio_void_togglePinValue>
    40fc:	07 c0       	rjmp	.+14     	; 0x410c <H_LED_void_Toggle+0x6a>
		break;
		case LED_BLUE:
			M_Dio_void_togglePinValue(LED_BLUE_PIN);
    40fe:	8f e0       	ldi	r24, 0x0F	; 15
    4100:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <M_Dio_void_togglePinValue>
    4104:	03 c0       	rjmp	.+6      	; 0x410c <H_LED_void_Toggle+0x6a>
		break;
		case LED_YELLOW:
			M_Dio_void_togglePinValue(LED_YELLOW_PIN);
    4106:	80 e1       	ldi	r24, 0x10	; 16
    4108:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <M_Dio_void_togglePinValue>
		break;

	}
}
    410c:	0f 90       	pop	r0
    410e:	0f 90       	pop	r0
    4110:	0f 90       	pop	r0
    4112:	cf 91       	pop	r28
    4114:	df 91       	pop	r29
    4116:	08 95       	ret

00004118 <H_KEYPAD_u8_getPressedKey>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
u8 H_KEYPAD_u8_getPressedKey(void)
{
    4118:	df 93       	push	r29
    411a:	cf 93       	push	r28
    411c:	cd b7       	in	r28, 0x3d	; 61
    411e:	de b7       	in	r29, 0x3e	; 62
    4120:	62 97       	sbiw	r28, 0x12	; 18
    4122:	0f b6       	in	r0, 0x3f	; 63
    4124:	f8 94       	cli
    4126:	de bf       	out	0x3e, r29	; 62
    4128:	0f be       	out	0x3f, r0	; 63
    412a:	cd bf       	out	0x3d, r28	; 61
	u8 Local_Pressed_key=NO_PRESSED_KEY;
    412c:	19 8a       	std	Y+17, r1	; 0x11
	u8 ROW_Index;
	u8 COL_Index;
	for(ROW_Index=0;ROW_Index<4;ROW_Index++)
    412e:	18 8a       	std	Y+16, r1	; 0x10
    4130:	c8 c0       	rjmp	.+400    	; 0x42c2 <H_KEYPAD_u8_getPressedKey+0x1aa>
	{
		M_Dio_void_setPinValue(ROWS_ARR[0], DIO_HIGH);
    4132:	80 91 b3 01 	lds	r24, 0x01B3
    4136:	61 e0       	ldi	r22, 0x01	; 1
    4138:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(ROWS_ARR[1], DIO_HIGH);
    413c:	80 91 b4 01 	lds	r24, 0x01B4
    4140:	61 e0       	ldi	r22, 0x01	; 1
    4142:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(ROWS_ARR[2], DIO_HIGH);
    4146:	80 91 b5 01 	lds	r24, 0x01B5
    414a:	61 e0       	ldi	r22, 0x01	; 1
    414c:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(ROWS_ARR[3], DIO_HIGH);
    4150:	80 91 b6 01 	lds	r24, 0x01B6
    4154:	61 e0       	ldi	r22, 0x01	; 1
    4156:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>

		M_Dio_void_setPinValue(ROWS_ARR[ROW_Index],DIO_LOW);
    415a:	88 89       	ldd	r24, Y+16	; 0x10
    415c:	88 2f       	mov	r24, r24
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	fc 01       	movw	r30, r24
    4162:	ed 54       	subi	r30, 0x4D	; 77
    4164:	fe 4f       	sbci	r31, 0xFE	; 254
    4166:	80 81       	ld	r24, Z
    4168:	60 e0       	ldi	r22, 0x00	; 0
    416a:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
		for(COL_Index=0;COL_Index<4;COL_Index++)
    416e:	1f 86       	std	Y+15, r1	; 0x0f
    4170:	a1 c0       	rjmp	.+322    	; 0x42b4 <H_KEYPAD_u8_getPressedKey+0x19c>
		{
			if((M_Dio_en_getPinValue(COLS_ARR[COL_Index]))==DIO_LOW)
    4172:	8f 85       	ldd	r24, Y+15	; 0x0f
    4174:	88 2f       	mov	r24, r24
    4176:	90 e0       	ldi	r25, 0x00	; 0
    4178:	fc 01       	movw	r30, r24
    417a:	e9 54       	subi	r30, 0x49	; 73
    417c:	fe 4f       	sbci	r31, 0xFE	; 254
    417e:	80 81       	ld	r24, Z
    4180:	0e 94 c9 13 	call	0x2792	; 0x2792 <M_Dio_en_getPinValue>
    4184:	88 23       	and	r24, r24
    4186:	09 f0       	breq	.+2      	; 0x418a <H_KEYPAD_u8_getPressedKey+0x72>
    4188:	92 c0       	rjmp	.+292    	; 0x42ae <H_KEYPAD_u8_getPressedKey+0x196>
    418a:	80 e0       	ldi	r24, 0x00	; 0
    418c:	90 e0       	ldi	r25, 0x00	; 0
    418e:	a8 e4       	ldi	r26, 0x48	; 72
    4190:	b2 e4       	ldi	r27, 0x42	; 66
    4192:	8b 87       	std	Y+11, r24	; 0x0b
    4194:	9c 87       	std	Y+12, r25	; 0x0c
    4196:	ad 87       	std	Y+13, r26	; 0x0d
    4198:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    419a:	6b 85       	ldd	r22, Y+11	; 0x0b
    419c:	7c 85       	ldd	r23, Y+12	; 0x0c
    419e:	8d 85       	ldd	r24, Y+13	; 0x0d
    41a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    41a2:	20 e0       	ldi	r18, 0x00	; 0
    41a4:	30 e0       	ldi	r19, 0x00	; 0
    41a6:	4a e7       	ldi	r20, 0x7A	; 122
    41a8:	55 e4       	ldi	r21, 0x45	; 69
    41aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ae:	dc 01       	movw	r26, r24
    41b0:	cb 01       	movw	r24, r22
    41b2:	8f 83       	std	Y+7, r24	; 0x07
    41b4:	98 87       	std	Y+8, r25	; 0x08
    41b6:	a9 87       	std	Y+9, r26	; 0x09
    41b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41ba:	6f 81       	ldd	r22, Y+7	; 0x07
    41bc:	78 85       	ldd	r23, Y+8	; 0x08
    41be:	89 85       	ldd	r24, Y+9	; 0x09
    41c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    41c2:	20 e0       	ldi	r18, 0x00	; 0
    41c4:	30 e0       	ldi	r19, 0x00	; 0
    41c6:	40 e8       	ldi	r20, 0x80	; 128
    41c8:	5f e3       	ldi	r21, 0x3F	; 63
    41ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41ce:	88 23       	and	r24, r24
    41d0:	2c f4       	brge	.+10     	; 0x41dc <H_KEYPAD_u8_getPressedKey+0xc4>
		__ticks = 1;
    41d2:	81 e0       	ldi	r24, 0x01	; 1
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	9e 83       	std	Y+6, r25	; 0x06
    41d8:	8d 83       	std	Y+5, r24	; 0x05
    41da:	3f c0       	rjmp	.+126    	; 0x425a <H_KEYPAD_u8_getPressedKey+0x142>
	else if (__tmp > 65535)
    41dc:	6f 81       	ldd	r22, Y+7	; 0x07
    41de:	78 85       	ldd	r23, Y+8	; 0x08
    41e0:	89 85       	ldd	r24, Y+9	; 0x09
    41e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    41e4:	20 e0       	ldi	r18, 0x00	; 0
    41e6:	3f ef       	ldi	r19, 0xFF	; 255
    41e8:	4f e7       	ldi	r20, 0x7F	; 127
    41ea:	57 e4       	ldi	r21, 0x47	; 71
    41ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41f0:	18 16       	cp	r1, r24
    41f2:	4c f5       	brge	.+82     	; 0x4246 <H_KEYPAD_u8_getPressedKey+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    41f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    41f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    41fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    41fc:	20 e0       	ldi	r18, 0x00	; 0
    41fe:	30 e0       	ldi	r19, 0x00	; 0
    4200:	40 e2       	ldi	r20, 0x20	; 32
    4202:	51 e4       	ldi	r21, 0x41	; 65
    4204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4208:	dc 01       	movw	r26, r24
    420a:	cb 01       	movw	r24, r22
    420c:	bc 01       	movw	r22, r24
    420e:	cd 01       	movw	r24, r26
    4210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4214:	dc 01       	movw	r26, r24
    4216:	cb 01       	movw	r24, r22
    4218:	9e 83       	std	Y+6, r25	; 0x06
    421a:	8d 83       	std	Y+5, r24	; 0x05
    421c:	0f c0       	rjmp	.+30     	; 0x423c <H_KEYPAD_u8_getPressedKey+0x124>
    421e:	80 e9       	ldi	r24, 0x90	; 144
    4220:	91 e0       	ldi	r25, 0x01	; 1
    4222:	9c 83       	std	Y+4, r25	; 0x04
    4224:	8b 83       	std	Y+3, r24	; 0x03
    4226:	8b 81       	ldd	r24, Y+3	; 0x03
    4228:	9c 81       	ldd	r25, Y+4	; 0x04
    422a:	01 97       	sbiw	r24, 0x01	; 1
    422c:	f1 f7       	brne	.-4      	; 0x422a <H_KEYPAD_u8_getPressedKey+0x112>
    422e:	9c 83       	std	Y+4, r25	; 0x04
    4230:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4232:	8d 81       	ldd	r24, Y+5	; 0x05
    4234:	9e 81       	ldd	r25, Y+6	; 0x06
    4236:	01 97       	sbiw	r24, 0x01	; 1
    4238:	9e 83       	std	Y+6, r25	; 0x06
    423a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    423c:	8d 81       	ldd	r24, Y+5	; 0x05
    423e:	9e 81       	ldd	r25, Y+6	; 0x06
    4240:	00 97       	sbiw	r24, 0x00	; 0
    4242:	69 f7       	brne	.-38     	; 0x421e <H_KEYPAD_u8_getPressedKey+0x106>
    4244:	14 c0       	rjmp	.+40     	; 0x426e <H_KEYPAD_u8_getPressedKey+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4246:	6f 81       	ldd	r22, Y+7	; 0x07
    4248:	78 85       	ldd	r23, Y+8	; 0x08
    424a:	89 85       	ldd	r24, Y+9	; 0x09
    424c:	9a 85       	ldd	r25, Y+10	; 0x0a
    424e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4252:	dc 01       	movw	r26, r24
    4254:	cb 01       	movw	r24, r22
    4256:	9e 83       	std	Y+6, r25	; 0x06
    4258:	8d 83       	std	Y+5, r24	; 0x05
    425a:	8d 81       	ldd	r24, Y+5	; 0x05
    425c:	9e 81       	ldd	r25, Y+6	; 0x06
    425e:	9a 83       	std	Y+2, r25	; 0x02
    4260:	89 83       	std	Y+1, r24	; 0x01
    4262:	89 81       	ldd	r24, Y+1	; 0x01
    4264:	9a 81       	ldd	r25, Y+2	; 0x02
    4266:	01 97       	sbiw	r24, 0x01	; 1
    4268:	f1 f7       	brne	.-4      	; 0x4266 <H_KEYPAD_u8_getPressedKey+0x14e>
    426a:	9a 83       	std	Y+2, r25	; 0x02
    426c:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(50);
				while(M_Dio_en_getPinValue(COLS_ARR[COL_Index])==DIO_LOW);
    426e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4270:	88 2f       	mov	r24, r24
    4272:	90 e0       	ldi	r25, 0x00	; 0
    4274:	fc 01       	movw	r30, r24
    4276:	e9 54       	subi	r30, 0x49	; 73
    4278:	fe 4f       	sbci	r31, 0xFE	; 254
    427a:	80 81       	ld	r24, Z
    427c:	0e 94 c9 13 	call	0x2792	; 0x2792 <M_Dio_en_getPinValue>
    4280:	88 23       	and	r24, r24
    4282:	a9 f3       	breq	.-22     	; 0x426e <H_KEYPAD_u8_getPressedKey+0x156>
				Local_Pressed_key= KPD_KEYS_CALC[ROW_Index][COL_Index];
    4284:	88 89       	ldd	r24, Y+16	; 0x10
    4286:	48 2f       	mov	r20, r24
    4288:	50 e0       	ldi	r21, 0x00	; 0
    428a:	8f 85       	ldd	r24, Y+15	; 0x0f
    428c:	28 2f       	mov	r18, r24
    428e:	30 e0       	ldi	r19, 0x00	; 0
    4290:	ca 01       	movw	r24, r20
    4292:	88 0f       	add	r24, r24
    4294:	99 1f       	adc	r25, r25
    4296:	88 0f       	add	r24, r24
    4298:	99 1f       	adc	r25, r25
    429a:	82 0f       	add	r24, r18
    429c:	93 1f       	adc	r25, r19
    429e:	fc 01       	movw	r30, r24
    42a0:	ed 55       	subi	r30, 0x5D	; 93
    42a2:	fe 4f       	sbci	r31, 0xFE	; 254
    42a4:	80 81       	ld	r24, Z
    42a6:	89 8b       	std	Y+17, r24	; 0x11
				//M_Dio_void_setPinValue(DIO_PB7,DIO_HIGH);
				//_delay_ms(50);
				//M_Dio_void_setPinValue(DIO_PB7,DIO_LOW);
				return Local_Pressed_key;
    42a8:	89 89       	ldd	r24, Y+17	; 0x11
    42aa:	8a 8b       	std	Y+18, r24	; 0x12
    42ac:	10 c0       	rjmp	.+32     	; 0x42ce <H_KEYPAD_u8_getPressedKey+0x1b6>
		M_Dio_void_setPinValue(ROWS_ARR[1], DIO_HIGH);
		M_Dio_void_setPinValue(ROWS_ARR[2], DIO_HIGH);
		M_Dio_void_setPinValue(ROWS_ARR[3], DIO_HIGH);

		M_Dio_void_setPinValue(ROWS_ARR[ROW_Index],DIO_LOW);
		for(COL_Index=0;COL_Index<4;COL_Index++)
    42ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    42b0:	8f 5f       	subi	r24, 0xFF	; 255
    42b2:	8f 87       	std	Y+15, r24	; 0x0f
    42b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    42b6:	84 30       	cpi	r24, 0x04	; 4
    42b8:	08 f4       	brcc	.+2      	; 0x42bc <H_KEYPAD_u8_getPressedKey+0x1a4>
    42ba:	5b cf       	rjmp	.-330    	; 0x4172 <H_KEYPAD_u8_getPressedKey+0x5a>
u8 H_KEYPAD_u8_getPressedKey(void)
{
	u8 Local_Pressed_key=NO_PRESSED_KEY;
	u8 ROW_Index;
	u8 COL_Index;
	for(ROW_Index=0;ROW_Index<4;ROW_Index++)
    42bc:	88 89       	ldd	r24, Y+16	; 0x10
    42be:	8f 5f       	subi	r24, 0xFF	; 255
    42c0:	88 8b       	std	Y+16, r24	; 0x10
    42c2:	88 89       	ldd	r24, Y+16	; 0x10
    42c4:	84 30       	cpi	r24, 0x04	; 4
    42c6:	08 f4       	brcc	.+2      	; 0x42ca <H_KEYPAD_u8_getPressedKey+0x1b2>
    42c8:	34 cf       	rjmp	.-408    	; 0x4132 <H_KEYPAD_u8_getPressedKey+0x1a>
				//M_Dio_void_setPinValue(DIO_PB7,DIO_LOW);
				return Local_Pressed_key;
			}
		}
	}
	return Local_Pressed_key;
    42ca:	89 89       	ldd	r24, Y+17	; 0x11
    42cc:	8a 8b       	std	Y+18, r24	; 0x12
    42ce:	8a 89       	ldd	r24, Y+18	; 0x12
}
    42d0:	62 96       	adiw	r28, 0x12	; 18
    42d2:	0f b6       	in	r0, 0x3f	; 63
    42d4:	f8 94       	cli
    42d6:	de bf       	out	0x3e, r29	; 62
    42d8:	0f be       	out	0x3f, r0	; 63
    42da:	cd bf       	out	0x3d, r28	; 61
    42dc:	cf 91       	pop	r28
    42de:	df 91       	pop	r29
    42e0:	08 95       	ret

000042e2 <H_DC_MOTOR_START>:
#include"DC_MOTOR_Private.h"
#include"DC_MOTOR_Types.h"
#include"DC_MOTOR_Init.h"

void H_DC_MOTOR_START(u32 PWM_FREQ,u8 DUTY_CYCLE,DC_M_DIR MOTOR_DIRECTION)
{
    42e2:	df 93       	push	r29
    42e4:	cf 93       	push	r28
    42e6:	cd b7       	in	r28, 0x3d	; 61
    42e8:	de b7       	in	r29, 0x3e	; 62
    42ea:	28 97       	sbiw	r28, 0x08	; 8
    42ec:	0f b6       	in	r0, 0x3f	; 63
    42ee:	f8 94       	cli
    42f0:	de bf       	out	0x3e, r29	; 62
    42f2:	0f be       	out	0x3f, r0	; 63
    42f4:	cd bf       	out	0x3d, r28	; 61
    42f6:	69 83       	std	Y+1, r22	; 0x01
    42f8:	7a 83       	std	Y+2, r23	; 0x02
    42fa:	8b 83       	std	Y+3, r24	; 0x03
    42fc:	9c 83       	std	Y+4, r25	; 0x04
    42fe:	4d 83       	std	Y+5, r20	; 0x05
    4300:	2e 83       	std	Y+6, r18	; 0x06
	M_void_Timer_Init(Phase_Correct_PWM,Non_Invering_Mode);
    4302:	83 e0       	ldi	r24, 0x03	; 3
    4304:	65 e0       	ldi	r22, 0x05	; 5
    4306:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <M_void_Timer_Init>

	M_TIMER0_PHASE_PWM_SET(Non_Invering_Mode,PWM_FREQ,DUTY_CYCLE);
    430a:	29 81       	ldd	r18, Y+1	; 0x01
    430c:	3a 81       	ldd	r19, Y+2	; 0x02
    430e:	4b 81       	ldd	r20, Y+3	; 0x03
    4310:	5c 81       	ldd	r21, Y+4	; 0x04
    4312:	85 e0       	ldi	r24, 0x05	; 5
    4314:	ba 01       	movw	r22, r20
    4316:	a9 01       	movw	r20, r18
    4318:	2d 81       	ldd	r18, Y+5	; 0x05
    431a:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <M_TIMER0_PHASE_PWM_SET>
	switch(MOTOR_DIRECTION)
    431e:	8e 81       	ldd	r24, Y+6	; 0x06
    4320:	28 2f       	mov	r18, r24
    4322:	30 e0       	ldi	r19, 0x00	; 0
    4324:	38 87       	std	Y+8, r19	; 0x08
    4326:	2f 83       	std	Y+7, r18	; 0x07
    4328:	8f 81       	ldd	r24, Y+7	; 0x07
    432a:	98 85       	ldd	r25, Y+8	; 0x08
    432c:	81 30       	cpi	r24, 0x01	; 1
    432e:	91 05       	cpc	r25, r1
    4330:	31 f0       	breq	.+12     	; 0x433e <H_DC_MOTOR_START+0x5c>
    4332:	2f 81       	ldd	r18, Y+7	; 0x07
    4334:	38 85       	ldd	r19, Y+8	; 0x08
    4336:	22 30       	cpi	r18, 0x02	; 2
    4338:	31 05       	cpc	r19, r1
    433a:	51 f0       	breq	.+20     	; 0x4350 <H_DC_MOTOR_START+0x6e>
    433c:	11 c0       	rjmp	.+34     	; 0x4360 <H_DC_MOTOR_START+0x7e>
	{
	case FORWARD_DIRECTION:
		M_Dio_void_setPinValue(DIO_PD0,DIO_HIGH);
    433e:	88 e2       	ldi	r24, 0x28	; 40
    4340:	61 e0       	ldi	r22, 0x01	; 1
    4342:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(DIO_PD1,DIO_LOW);
    4346:	89 e2       	ldi	r24, 0x29	; 41
    4348:	60 e0       	ldi	r22, 0x00	; 0
    434a:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
    434e:	08 c0       	rjmp	.+16     	; 0x4360 <H_DC_MOTOR_START+0x7e>
		break;
	case BACKWARD_DIRECTION:
		M_Dio_void_setPinValue(DIO_PD0,DIO_LOW);
    4350:	88 e2       	ldi	r24, 0x28	; 40
    4352:	60 e0       	ldi	r22, 0x00	; 0
    4354:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(DIO_PD1,DIO_HIGH);
    4358:	89 e2       	ldi	r24, 0x29	; 41
    435a:	61 e0       	ldi	r22, 0x01	; 1
    435c:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
		break;
	default:
		break;
	}
}
    4360:	28 96       	adiw	r28, 0x08	; 8
    4362:	0f b6       	in	r0, 0x3f	; 63
    4364:	f8 94       	cli
    4366:	de bf       	out	0x3e, r29	; 62
    4368:	0f be       	out	0x3f, r0	; 63
    436a:	cd bf       	out	0x3d, r28	; 61
    436c:	cf 91       	pop	r28
    436e:	df 91       	pop	r29
    4370:	08 95       	ret

00004372 <H_DC_MOTOR_STOP>:
void H_DC_MOTOR_STOP(void)
{
    4372:	df 93       	push	r29
    4374:	cf 93       	push	r28
    4376:	cd b7       	in	r28, 0x3d	; 61
    4378:	de b7       	in	r29, 0x3e	; 62
	M_void_Timer_Init(Phase_Correct_PWM,Normal_Port);
    437a:	83 e0       	ldi	r24, 0x03	; 3
    437c:	60 e0       	ldi	r22, 0x00	; 0
    437e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <M_void_Timer_Init>
	M_void_Timer_stop();
    4382:	0e 94 1a 0b 	call	0x1634	; 0x1634 <M_void_Timer_stop>
}
    4386:	cf 91       	pop	r28
    4388:	df 91       	pop	r29
    438a:	08 95       	ret

0000438c <H_LCD_void_latchByte>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
    438c:	df 93       	push	r29
    438e:	cf 93       	push	r28
    4390:	cd b7       	in	r28, 0x3d	; 61
    4392:	de b7       	in	r29, 0x3e	; 62
    4394:	ab 97       	sbiw	r28, 0x2b	; 43
    4396:	0f b6       	in	r0, 0x3f	; 63
    4398:	f8 94       	cli
    439a:	de bf       	out	0x3e, r29	; 62
    439c:	0f be       	out	0x3f, r0	; 63
    439e:	cd bf       	out	0x3d, r28	; 61
    43a0:	8b a7       	std	Y+43, r24	; 0x2b
#if(LCD_MODE == _4_BIT_MODE)
	//enable = zero
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
    43a2:	8c e0       	ldi	r24, 0x0C	; 12
    43a4:	60 e0       	ldi	r22, 0x00	; 0
    43a6:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_D4,GET_BIT(copy_u8Byte,4));
    43aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    43ac:	82 95       	swap	r24
    43ae:	8f 70       	andi	r24, 0x0F	; 15
    43b0:	98 2f       	mov	r25, r24
    43b2:	91 70       	andi	r25, 0x01	; 1
    43b4:	84 e1       	ldi	r24, 0x14	; 20
    43b6:	69 2f       	mov	r22, r25
    43b8:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D5,GET_BIT(copy_u8Byte,5));
    43bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    43be:	82 95       	swap	r24
    43c0:	86 95       	lsr	r24
    43c2:	87 70       	andi	r24, 0x07	; 7
    43c4:	98 2f       	mov	r25, r24
    43c6:	91 70       	andi	r25, 0x01	; 1
    43c8:	85 e1       	ldi	r24, 0x15	; 21
    43ca:	69 2f       	mov	r22, r25
    43cc:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D6,GET_BIT(copy_u8Byte,6));
    43d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    43d2:	82 95       	swap	r24
    43d4:	86 95       	lsr	r24
    43d6:	86 95       	lsr	r24
    43d8:	83 70       	andi	r24, 0x03	; 3
    43da:	98 2f       	mov	r25, r24
    43dc:	91 70       	andi	r25, 0x01	; 1
    43de:	86 e1       	ldi	r24, 0x16	; 22
    43e0:	69 2f       	mov	r22, r25
    43e2:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D7,GET_BIT(copy_u8Byte,7));
    43e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    43e8:	98 2f       	mov	r25, r24
    43ea:	99 1f       	adc	r25, r25
    43ec:	99 27       	eor	r25, r25
    43ee:	99 1f       	adc	r25, r25
    43f0:	88 e1       	ldi	r24, 0x18	; 24
    43f2:	69 2f       	mov	r22, r25
    43f4:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_HIGH);
    43f8:	8c e0       	ldi	r24, 0x0C	; 12
    43fa:	61 e0       	ldi	r22, 0x01	; 1
    43fc:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
    4400:	80 e0       	ldi	r24, 0x00	; 0
    4402:	90 e0       	ldi	r25, 0x00	; 0
    4404:	a0 e8       	ldi	r26, 0x80	; 128
    4406:	bf e3       	ldi	r27, 0x3F	; 63
    4408:	8f a3       	std	Y+39, r24	; 0x27
    440a:	98 a7       	std	Y+40, r25	; 0x28
    440c:	a9 a7       	std	Y+41, r26	; 0x29
    440e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4410:	6f a1       	ldd	r22, Y+39	; 0x27
    4412:	78 a5       	ldd	r23, Y+40	; 0x28
    4414:	89 a5       	ldd	r24, Y+41	; 0x29
    4416:	9a a5       	ldd	r25, Y+42	; 0x2a
    4418:	20 e0       	ldi	r18, 0x00	; 0
    441a:	30 e0       	ldi	r19, 0x00	; 0
    441c:	4a e7       	ldi	r20, 0x7A	; 122
    441e:	55 e4       	ldi	r21, 0x45	; 69
    4420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4424:	dc 01       	movw	r26, r24
    4426:	cb 01       	movw	r24, r22
    4428:	8b a3       	std	Y+35, r24	; 0x23
    442a:	9c a3       	std	Y+36, r25	; 0x24
    442c:	ad a3       	std	Y+37, r26	; 0x25
    442e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4430:	6b a1       	ldd	r22, Y+35	; 0x23
    4432:	7c a1       	ldd	r23, Y+36	; 0x24
    4434:	8d a1       	ldd	r24, Y+37	; 0x25
    4436:	9e a1       	ldd	r25, Y+38	; 0x26
    4438:	20 e0       	ldi	r18, 0x00	; 0
    443a:	30 e0       	ldi	r19, 0x00	; 0
    443c:	40 e8       	ldi	r20, 0x80	; 128
    443e:	5f e3       	ldi	r21, 0x3F	; 63
    4440:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4444:	88 23       	and	r24, r24
    4446:	2c f4       	brge	.+10     	; 0x4452 <H_LCD_void_latchByte+0xc6>
		__ticks = 1;
    4448:	81 e0       	ldi	r24, 0x01	; 1
    444a:	90 e0       	ldi	r25, 0x00	; 0
    444c:	9a a3       	std	Y+34, r25	; 0x22
    444e:	89 a3       	std	Y+33, r24	; 0x21
    4450:	3f c0       	rjmp	.+126    	; 0x44d0 <H_LCD_void_latchByte+0x144>
	else if (__tmp > 65535)
    4452:	6b a1       	ldd	r22, Y+35	; 0x23
    4454:	7c a1       	ldd	r23, Y+36	; 0x24
    4456:	8d a1       	ldd	r24, Y+37	; 0x25
    4458:	9e a1       	ldd	r25, Y+38	; 0x26
    445a:	20 e0       	ldi	r18, 0x00	; 0
    445c:	3f ef       	ldi	r19, 0xFF	; 255
    445e:	4f e7       	ldi	r20, 0x7F	; 127
    4460:	57 e4       	ldi	r21, 0x47	; 71
    4462:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4466:	18 16       	cp	r1, r24
    4468:	4c f5       	brge	.+82     	; 0x44bc <H_LCD_void_latchByte+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    446a:	6f a1       	ldd	r22, Y+39	; 0x27
    446c:	78 a5       	ldd	r23, Y+40	; 0x28
    446e:	89 a5       	ldd	r24, Y+41	; 0x29
    4470:	9a a5       	ldd	r25, Y+42	; 0x2a
    4472:	20 e0       	ldi	r18, 0x00	; 0
    4474:	30 e0       	ldi	r19, 0x00	; 0
    4476:	40 e2       	ldi	r20, 0x20	; 32
    4478:	51 e4       	ldi	r21, 0x41	; 65
    447a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    447e:	dc 01       	movw	r26, r24
    4480:	cb 01       	movw	r24, r22
    4482:	bc 01       	movw	r22, r24
    4484:	cd 01       	movw	r24, r26
    4486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    448a:	dc 01       	movw	r26, r24
    448c:	cb 01       	movw	r24, r22
    448e:	9a a3       	std	Y+34, r25	; 0x22
    4490:	89 a3       	std	Y+33, r24	; 0x21
    4492:	0f c0       	rjmp	.+30     	; 0x44b2 <H_LCD_void_latchByte+0x126>
    4494:	80 e9       	ldi	r24, 0x90	; 144
    4496:	91 e0       	ldi	r25, 0x01	; 1
    4498:	98 a3       	std	Y+32, r25	; 0x20
    449a:	8f 8f       	std	Y+31, r24	; 0x1f
    449c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    449e:	98 a1       	ldd	r25, Y+32	; 0x20
    44a0:	01 97       	sbiw	r24, 0x01	; 1
    44a2:	f1 f7       	brne	.-4      	; 0x44a0 <H_LCD_void_latchByte+0x114>
    44a4:	98 a3       	std	Y+32, r25	; 0x20
    44a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44a8:	89 a1       	ldd	r24, Y+33	; 0x21
    44aa:	9a a1       	ldd	r25, Y+34	; 0x22
    44ac:	01 97       	sbiw	r24, 0x01	; 1
    44ae:	9a a3       	std	Y+34, r25	; 0x22
    44b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44b2:	89 a1       	ldd	r24, Y+33	; 0x21
    44b4:	9a a1       	ldd	r25, Y+34	; 0x22
    44b6:	00 97       	sbiw	r24, 0x00	; 0
    44b8:	69 f7       	brne	.-38     	; 0x4494 <H_LCD_void_latchByte+0x108>
    44ba:	14 c0       	rjmp	.+40     	; 0x44e4 <H_LCD_void_latchByte+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44bc:	6b a1       	ldd	r22, Y+35	; 0x23
    44be:	7c a1       	ldd	r23, Y+36	; 0x24
    44c0:	8d a1       	ldd	r24, Y+37	; 0x25
    44c2:	9e a1       	ldd	r25, Y+38	; 0x26
    44c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44c8:	dc 01       	movw	r26, r24
    44ca:	cb 01       	movw	r24, r22
    44cc:	9a a3       	std	Y+34, r25	; 0x22
    44ce:	89 a3       	std	Y+33, r24	; 0x21
    44d0:	89 a1       	ldd	r24, Y+33	; 0x21
    44d2:	9a a1       	ldd	r25, Y+34	; 0x22
    44d4:	9e 8f       	std	Y+30, r25	; 0x1e
    44d6:	8d 8f       	std	Y+29, r24	; 0x1d
    44d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    44da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    44dc:	01 97       	sbiw	r24, 0x01	; 1
    44de:	f1 f7       	brne	.-4      	; 0x44dc <H_LCD_void_latchByte+0x150>
    44e0:	9e 8f       	std	Y+30, r25	; 0x1e
    44e2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
    44e4:	8c e0       	ldi	r24, 0x0C	; 12
    44e6:	60 e0       	ldi	r22, 0x00	; 0
    44e8:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_D4,GET_BIT(copy_u8Byte,0));
    44ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    44ee:	98 2f       	mov	r25, r24
    44f0:	91 70       	andi	r25, 0x01	; 1
    44f2:	84 e1       	ldi	r24, 0x14	; 20
    44f4:	69 2f       	mov	r22, r25
    44f6:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D5,GET_BIT(copy_u8Byte,1));
    44fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    44fc:	86 95       	lsr	r24
    44fe:	98 2f       	mov	r25, r24
    4500:	91 70       	andi	r25, 0x01	; 1
    4502:	85 e1       	ldi	r24, 0x15	; 21
    4504:	69 2f       	mov	r22, r25
    4506:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D6,GET_BIT(copy_u8Byte,2));
    450a:	8b a5       	ldd	r24, Y+43	; 0x2b
    450c:	86 95       	lsr	r24
    450e:	86 95       	lsr	r24
    4510:	98 2f       	mov	r25, r24
    4512:	91 70       	andi	r25, 0x01	; 1
    4514:	86 e1       	ldi	r24, 0x16	; 22
    4516:	69 2f       	mov	r22, r25
    4518:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D7,GET_BIT(copy_u8Byte,3));
    451c:	8b a5       	ldd	r24, Y+43	; 0x2b
    451e:	86 95       	lsr	r24
    4520:	86 95       	lsr	r24
    4522:	86 95       	lsr	r24
    4524:	98 2f       	mov	r25, r24
    4526:	91 70       	andi	r25, 0x01	; 1
    4528:	88 e1       	ldi	r24, 0x18	; 24
    452a:	69 2f       	mov	r22, r25
    452c:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_HIGH);
    4530:	8c e0       	ldi	r24, 0x0C	; 12
    4532:	61 e0       	ldi	r22, 0x01	; 1
    4534:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
    4538:	80 e0       	ldi	r24, 0x00	; 0
    453a:	90 e0       	ldi	r25, 0x00	; 0
    453c:	a0 e8       	ldi	r26, 0x80	; 128
    453e:	bf e3       	ldi	r27, 0x3F	; 63
    4540:	89 8f       	std	Y+25, r24	; 0x19
    4542:	9a 8f       	std	Y+26, r25	; 0x1a
    4544:	ab 8f       	std	Y+27, r26	; 0x1b
    4546:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4548:	69 8d       	ldd	r22, Y+25	; 0x19
    454a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    454c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    454e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4550:	20 e0       	ldi	r18, 0x00	; 0
    4552:	30 e0       	ldi	r19, 0x00	; 0
    4554:	4a e7       	ldi	r20, 0x7A	; 122
    4556:	55 e4       	ldi	r21, 0x45	; 69
    4558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    455c:	dc 01       	movw	r26, r24
    455e:	cb 01       	movw	r24, r22
    4560:	8d 8b       	std	Y+21, r24	; 0x15
    4562:	9e 8b       	std	Y+22, r25	; 0x16
    4564:	af 8b       	std	Y+23, r26	; 0x17
    4566:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4568:	6d 89       	ldd	r22, Y+21	; 0x15
    456a:	7e 89       	ldd	r23, Y+22	; 0x16
    456c:	8f 89       	ldd	r24, Y+23	; 0x17
    456e:	98 8d       	ldd	r25, Y+24	; 0x18
    4570:	20 e0       	ldi	r18, 0x00	; 0
    4572:	30 e0       	ldi	r19, 0x00	; 0
    4574:	40 e8       	ldi	r20, 0x80	; 128
    4576:	5f e3       	ldi	r21, 0x3F	; 63
    4578:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    457c:	88 23       	and	r24, r24
    457e:	2c f4       	brge	.+10     	; 0x458a <H_LCD_void_latchByte+0x1fe>
		__ticks = 1;
    4580:	81 e0       	ldi	r24, 0x01	; 1
    4582:	90 e0       	ldi	r25, 0x00	; 0
    4584:	9c 8b       	std	Y+20, r25	; 0x14
    4586:	8b 8b       	std	Y+19, r24	; 0x13
    4588:	3f c0       	rjmp	.+126    	; 0x4608 <H_LCD_void_latchByte+0x27c>
	else if (__tmp > 65535)
    458a:	6d 89       	ldd	r22, Y+21	; 0x15
    458c:	7e 89       	ldd	r23, Y+22	; 0x16
    458e:	8f 89       	ldd	r24, Y+23	; 0x17
    4590:	98 8d       	ldd	r25, Y+24	; 0x18
    4592:	20 e0       	ldi	r18, 0x00	; 0
    4594:	3f ef       	ldi	r19, 0xFF	; 255
    4596:	4f e7       	ldi	r20, 0x7F	; 127
    4598:	57 e4       	ldi	r21, 0x47	; 71
    459a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    459e:	18 16       	cp	r1, r24
    45a0:	4c f5       	brge	.+82     	; 0x45f4 <H_LCD_void_latchByte+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45a2:	69 8d       	ldd	r22, Y+25	; 0x19
    45a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45aa:	20 e0       	ldi	r18, 0x00	; 0
    45ac:	30 e0       	ldi	r19, 0x00	; 0
    45ae:	40 e2       	ldi	r20, 0x20	; 32
    45b0:	51 e4       	ldi	r21, 0x41	; 65
    45b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45b6:	dc 01       	movw	r26, r24
    45b8:	cb 01       	movw	r24, r22
    45ba:	bc 01       	movw	r22, r24
    45bc:	cd 01       	movw	r24, r26
    45be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45c2:	dc 01       	movw	r26, r24
    45c4:	cb 01       	movw	r24, r22
    45c6:	9c 8b       	std	Y+20, r25	; 0x14
    45c8:	8b 8b       	std	Y+19, r24	; 0x13
    45ca:	0f c0       	rjmp	.+30     	; 0x45ea <H_LCD_void_latchByte+0x25e>
    45cc:	80 e9       	ldi	r24, 0x90	; 144
    45ce:	91 e0       	ldi	r25, 0x01	; 1
    45d0:	9a 8b       	std	Y+18, r25	; 0x12
    45d2:	89 8b       	std	Y+17, r24	; 0x11
    45d4:	89 89       	ldd	r24, Y+17	; 0x11
    45d6:	9a 89       	ldd	r25, Y+18	; 0x12
    45d8:	01 97       	sbiw	r24, 0x01	; 1
    45da:	f1 f7       	brne	.-4      	; 0x45d8 <H_LCD_void_latchByte+0x24c>
    45dc:	9a 8b       	std	Y+18, r25	; 0x12
    45de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45e0:	8b 89       	ldd	r24, Y+19	; 0x13
    45e2:	9c 89       	ldd	r25, Y+20	; 0x14
    45e4:	01 97       	sbiw	r24, 0x01	; 1
    45e6:	9c 8b       	std	Y+20, r25	; 0x14
    45e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45ea:	8b 89       	ldd	r24, Y+19	; 0x13
    45ec:	9c 89       	ldd	r25, Y+20	; 0x14
    45ee:	00 97       	sbiw	r24, 0x00	; 0
    45f0:	69 f7       	brne	.-38     	; 0x45cc <H_LCD_void_latchByte+0x240>
    45f2:	14 c0       	rjmp	.+40     	; 0x461c <H_LCD_void_latchByte+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45f4:	6d 89       	ldd	r22, Y+21	; 0x15
    45f6:	7e 89       	ldd	r23, Y+22	; 0x16
    45f8:	8f 89       	ldd	r24, Y+23	; 0x17
    45fa:	98 8d       	ldd	r25, Y+24	; 0x18
    45fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4600:	dc 01       	movw	r26, r24
    4602:	cb 01       	movw	r24, r22
    4604:	9c 8b       	std	Y+20, r25	; 0x14
    4606:	8b 8b       	std	Y+19, r24	; 0x13
    4608:	8b 89       	ldd	r24, Y+19	; 0x13
    460a:	9c 89       	ldd	r25, Y+20	; 0x14
    460c:	98 8b       	std	Y+16, r25	; 0x10
    460e:	8f 87       	std	Y+15, r24	; 0x0f
    4610:	8f 85       	ldd	r24, Y+15	; 0x0f
    4612:	98 89       	ldd	r25, Y+16	; 0x10
    4614:	01 97       	sbiw	r24, 0x01	; 1
    4616:	f1 f7       	brne	.-4      	; 0x4614 <H_LCD_void_latchByte+0x288>
    4618:	98 8b       	std	Y+16, r25	; 0x10
    461a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
    461c:	8c e0       	ldi	r24, 0x0C	; 12
    461e:	60 e0       	ldi	r22, 0x00	; 0
    4620:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
    4624:	80 e0       	ldi	r24, 0x00	; 0
    4626:	90 e0       	ldi	r25, 0x00	; 0
    4628:	a0 ef       	ldi	r26, 0xF0	; 240
    462a:	b1 e4       	ldi	r27, 0x41	; 65
    462c:	8b 87       	std	Y+11, r24	; 0x0b
    462e:	9c 87       	std	Y+12, r25	; 0x0c
    4630:	ad 87       	std	Y+13, r26	; 0x0d
    4632:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4634:	6b 85       	ldd	r22, Y+11	; 0x0b
    4636:	7c 85       	ldd	r23, Y+12	; 0x0c
    4638:	8d 85       	ldd	r24, Y+13	; 0x0d
    463a:	9e 85       	ldd	r25, Y+14	; 0x0e
    463c:	20 e0       	ldi	r18, 0x00	; 0
    463e:	30 e0       	ldi	r19, 0x00	; 0
    4640:	4a e7       	ldi	r20, 0x7A	; 122
    4642:	55 e4       	ldi	r21, 0x45	; 69
    4644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4648:	dc 01       	movw	r26, r24
    464a:	cb 01       	movw	r24, r22
    464c:	8f 83       	std	Y+7, r24	; 0x07
    464e:	98 87       	std	Y+8, r25	; 0x08
    4650:	a9 87       	std	Y+9, r26	; 0x09
    4652:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4654:	6f 81       	ldd	r22, Y+7	; 0x07
    4656:	78 85       	ldd	r23, Y+8	; 0x08
    4658:	89 85       	ldd	r24, Y+9	; 0x09
    465a:	9a 85       	ldd	r25, Y+10	; 0x0a
    465c:	20 e0       	ldi	r18, 0x00	; 0
    465e:	30 e0       	ldi	r19, 0x00	; 0
    4660:	40 e8       	ldi	r20, 0x80	; 128
    4662:	5f e3       	ldi	r21, 0x3F	; 63
    4664:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4668:	88 23       	and	r24, r24
    466a:	2c f4       	brge	.+10     	; 0x4676 <H_LCD_void_latchByte+0x2ea>
		__ticks = 1;
    466c:	81 e0       	ldi	r24, 0x01	; 1
    466e:	90 e0       	ldi	r25, 0x00	; 0
    4670:	9e 83       	std	Y+6, r25	; 0x06
    4672:	8d 83       	std	Y+5, r24	; 0x05
    4674:	3f c0       	rjmp	.+126    	; 0x46f4 <H_LCD_void_latchByte+0x368>
	else if (__tmp > 65535)
    4676:	6f 81       	ldd	r22, Y+7	; 0x07
    4678:	78 85       	ldd	r23, Y+8	; 0x08
    467a:	89 85       	ldd	r24, Y+9	; 0x09
    467c:	9a 85       	ldd	r25, Y+10	; 0x0a
    467e:	20 e0       	ldi	r18, 0x00	; 0
    4680:	3f ef       	ldi	r19, 0xFF	; 255
    4682:	4f e7       	ldi	r20, 0x7F	; 127
    4684:	57 e4       	ldi	r21, 0x47	; 71
    4686:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    468a:	18 16       	cp	r1, r24
    468c:	4c f5       	brge	.+82     	; 0x46e0 <H_LCD_void_latchByte+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    468e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4690:	7c 85       	ldd	r23, Y+12	; 0x0c
    4692:	8d 85       	ldd	r24, Y+13	; 0x0d
    4694:	9e 85       	ldd	r25, Y+14	; 0x0e
    4696:	20 e0       	ldi	r18, 0x00	; 0
    4698:	30 e0       	ldi	r19, 0x00	; 0
    469a:	40 e2       	ldi	r20, 0x20	; 32
    469c:	51 e4       	ldi	r21, 0x41	; 65
    469e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46a2:	dc 01       	movw	r26, r24
    46a4:	cb 01       	movw	r24, r22
    46a6:	bc 01       	movw	r22, r24
    46a8:	cd 01       	movw	r24, r26
    46aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46ae:	dc 01       	movw	r26, r24
    46b0:	cb 01       	movw	r24, r22
    46b2:	9e 83       	std	Y+6, r25	; 0x06
    46b4:	8d 83       	std	Y+5, r24	; 0x05
    46b6:	0f c0       	rjmp	.+30     	; 0x46d6 <H_LCD_void_latchByte+0x34a>
    46b8:	80 e9       	ldi	r24, 0x90	; 144
    46ba:	91 e0       	ldi	r25, 0x01	; 1
    46bc:	9c 83       	std	Y+4, r25	; 0x04
    46be:	8b 83       	std	Y+3, r24	; 0x03
    46c0:	8b 81       	ldd	r24, Y+3	; 0x03
    46c2:	9c 81       	ldd	r25, Y+4	; 0x04
    46c4:	01 97       	sbiw	r24, 0x01	; 1
    46c6:	f1 f7       	brne	.-4      	; 0x46c4 <H_LCD_void_latchByte+0x338>
    46c8:	9c 83       	std	Y+4, r25	; 0x04
    46ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46cc:	8d 81       	ldd	r24, Y+5	; 0x05
    46ce:	9e 81       	ldd	r25, Y+6	; 0x06
    46d0:	01 97       	sbiw	r24, 0x01	; 1
    46d2:	9e 83       	std	Y+6, r25	; 0x06
    46d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46d6:	8d 81       	ldd	r24, Y+5	; 0x05
    46d8:	9e 81       	ldd	r25, Y+6	; 0x06
    46da:	00 97       	sbiw	r24, 0x00	; 0
    46dc:	69 f7       	brne	.-38     	; 0x46b8 <H_LCD_void_latchByte+0x32c>
    46de:	14 c0       	rjmp	.+40     	; 0x4708 <H_LCD_void_latchByte+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46e0:	6f 81       	ldd	r22, Y+7	; 0x07
    46e2:	78 85       	ldd	r23, Y+8	; 0x08
    46e4:	89 85       	ldd	r24, Y+9	; 0x09
    46e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    46e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46ec:	dc 01       	movw	r26, r24
    46ee:	cb 01       	movw	r24, r22
    46f0:	9e 83       	std	Y+6, r25	; 0x06
    46f2:	8d 83       	std	Y+5, r24	; 0x05
    46f4:	8d 81       	ldd	r24, Y+5	; 0x05
    46f6:	9e 81       	ldd	r25, Y+6	; 0x06
    46f8:	9a 83       	std	Y+2, r25	; 0x02
    46fa:	89 83       	std	Y+1, r24	; 0x01
    46fc:	89 81       	ldd	r24, Y+1	; 0x01
    46fe:	9a 81       	ldd	r25, Y+2	; 0x02
    4700:	01 97       	sbiw	r24, 0x01	; 1
    4702:	f1 f7       	brne	.-4      	; 0x4700 <H_LCD_void_latchByte+0x374>
    4704:	9a 83       	std	Y+2, r25	; 0x02
    4706:	89 83       	std	Y+1, r24	; 0x01
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
	_delay_ms(30);

#endif

}
    4708:	ab 96       	adiw	r28, 0x2b	; 43
    470a:	0f b6       	in	r0, 0x3f	; 63
    470c:	f8 94       	cli
    470e:	de bf       	out	0x3e, r29	; 62
    4710:	0f be       	out	0x3f, r0	; 63
    4712:	cd bf       	out	0x3d, r28	; 61
    4714:	cf 91       	pop	r28
    4716:	df 91       	pop	r29
    4718:	08 95       	ret

0000471a <H_LCD_void_Init>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_Init(void)
{
    471a:	0f 93       	push	r16
    471c:	1f 93       	push	r17
    471e:	df 93       	push	r29
    4720:	cf 93       	push	r28
    4722:	cd b7       	in	r28, 0x3d	; 61
    4724:	de b7       	in	r29, 0x3e	; 62
    4726:	c6 54       	subi	r28, 0x46	; 70
    4728:	d0 40       	sbci	r29, 0x00	; 0
    472a:	0f b6       	in	r0, 0x3f	; 63
    472c:	f8 94       	cli
    472e:	de bf       	out	0x3e, r29	; 62
    4730:	0f be       	out	0x3f, r0	; 63
    4732:	cd bf       	out	0x3d, r28	; 61
    4734:	fe 01       	movw	r30, r28
    4736:	ed 5b       	subi	r30, 0xBD	; 189
    4738:	ff 4f       	sbci	r31, 0xFF	; 255
    473a:	80 e0       	ldi	r24, 0x00	; 0
    473c:	90 e0       	ldi	r25, 0x00	; 0
    473e:	a6 e1       	ldi	r26, 0x16	; 22
    4740:	b3 e4       	ldi	r27, 0x43	; 67
    4742:	80 83       	st	Z, r24
    4744:	91 83       	std	Z+1, r25	; 0x01
    4746:	a2 83       	std	Z+2, r26	; 0x02
    4748:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    474a:	8e 01       	movw	r16, r28
    474c:	01 5c       	subi	r16, 0xC1	; 193
    474e:	1f 4f       	sbci	r17, 0xFF	; 255
    4750:	fe 01       	movw	r30, r28
    4752:	ed 5b       	subi	r30, 0xBD	; 189
    4754:	ff 4f       	sbci	r31, 0xFF	; 255
    4756:	60 81       	ld	r22, Z
    4758:	71 81       	ldd	r23, Z+1	; 0x01
    475a:	82 81       	ldd	r24, Z+2	; 0x02
    475c:	93 81       	ldd	r25, Z+3	; 0x03
    475e:	20 e0       	ldi	r18, 0x00	; 0
    4760:	30 e0       	ldi	r19, 0x00	; 0
    4762:	4a e7       	ldi	r20, 0x7A	; 122
    4764:	55 e4       	ldi	r21, 0x45	; 69
    4766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    476a:	dc 01       	movw	r26, r24
    476c:	cb 01       	movw	r24, r22
    476e:	f8 01       	movw	r30, r16
    4770:	80 83       	st	Z, r24
    4772:	91 83       	std	Z+1, r25	; 0x01
    4774:	a2 83       	std	Z+2, r26	; 0x02
    4776:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4778:	fe 01       	movw	r30, r28
    477a:	ff 96       	adiw	r30, 0x3f	; 63
    477c:	60 81       	ld	r22, Z
    477e:	71 81       	ldd	r23, Z+1	; 0x01
    4780:	82 81       	ldd	r24, Z+2	; 0x02
    4782:	93 81       	ldd	r25, Z+3	; 0x03
    4784:	20 e0       	ldi	r18, 0x00	; 0
    4786:	30 e0       	ldi	r19, 0x00	; 0
    4788:	40 e8       	ldi	r20, 0x80	; 128
    478a:	5f e3       	ldi	r21, 0x3F	; 63
    478c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4790:	88 23       	and	r24, r24
    4792:	2c f4       	brge	.+10     	; 0x479e <H_LCD_void_Init+0x84>
		__ticks = 1;
    4794:	81 e0       	ldi	r24, 0x01	; 1
    4796:	90 e0       	ldi	r25, 0x00	; 0
    4798:	9e af       	std	Y+62, r25	; 0x3e
    479a:	8d af       	std	Y+61, r24	; 0x3d
    479c:	46 c0       	rjmp	.+140    	; 0x482a <H_LCD_void_Init+0x110>
	else if (__tmp > 65535)
    479e:	fe 01       	movw	r30, r28
    47a0:	ff 96       	adiw	r30, 0x3f	; 63
    47a2:	60 81       	ld	r22, Z
    47a4:	71 81       	ldd	r23, Z+1	; 0x01
    47a6:	82 81       	ldd	r24, Z+2	; 0x02
    47a8:	93 81       	ldd	r25, Z+3	; 0x03
    47aa:	20 e0       	ldi	r18, 0x00	; 0
    47ac:	3f ef       	ldi	r19, 0xFF	; 255
    47ae:	4f e7       	ldi	r20, 0x7F	; 127
    47b0:	57 e4       	ldi	r21, 0x47	; 71
    47b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47b6:	18 16       	cp	r1, r24
    47b8:	64 f5       	brge	.+88     	; 0x4812 <H_LCD_void_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47ba:	fe 01       	movw	r30, r28
    47bc:	ed 5b       	subi	r30, 0xBD	; 189
    47be:	ff 4f       	sbci	r31, 0xFF	; 255
    47c0:	60 81       	ld	r22, Z
    47c2:	71 81       	ldd	r23, Z+1	; 0x01
    47c4:	82 81       	ldd	r24, Z+2	; 0x02
    47c6:	93 81       	ldd	r25, Z+3	; 0x03
    47c8:	20 e0       	ldi	r18, 0x00	; 0
    47ca:	30 e0       	ldi	r19, 0x00	; 0
    47cc:	40 e2       	ldi	r20, 0x20	; 32
    47ce:	51 e4       	ldi	r21, 0x41	; 65
    47d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47d4:	dc 01       	movw	r26, r24
    47d6:	cb 01       	movw	r24, r22
    47d8:	bc 01       	movw	r22, r24
    47da:	cd 01       	movw	r24, r26
    47dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47e0:	dc 01       	movw	r26, r24
    47e2:	cb 01       	movw	r24, r22
    47e4:	9e af       	std	Y+62, r25	; 0x3e
    47e6:	8d af       	std	Y+61, r24	; 0x3d
    47e8:	0f c0       	rjmp	.+30     	; 0x4808 <H_LCD_void_Init+0xee>
    47ea:	80 e9       	ldi	r24, 0x90	; 144
    47ec:	91 e0       	ldi	r25, 0x01	; 1
    47ee:	9c af       	std	Y+60, r25	; 0x3c
    47f0:	8b af       	std	Y+59, r24	; 0x3b
    47f2:	8b ad       	ldd	r24, Y+59	; 0x3b
    47f4:	9c ad       	ldd	r25, Y+60	; 0x3c
    47f6:	01 97       	sbiw	r24, 0x01	; 1
    47f8:	f1 f7       	brne	.-4      	; 0x47f6 <H_LCD_void_Init+0xdc>
    47fa:	9c af       	std	Y+60, r25	; 0x3c
    47fc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    4800:	9e ad       	ldd	r25, Y+62	; 0x3e
    4802:	01 97       	sbiw	r24, 0x01	; 1
    4804:	9e af       	std	Y+62, r25	; 0x3e
    4806:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4808:	8d ad       	ldd	r24, Y+61	; 0x3d
    480a:	9e ad       	ldd	r25, Y+62	; 0x3e
    480c:	00 97       	sbiw	r24, 0x00	; 0
    480e:	69 f7       	brne	.-38     	; 0x47ea <H_LCD_void_Init+0xd0>
    4810:	16 c0       	rjmp	.+44     	; 0x483e <H_LCD_void_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4812:	fe 01       	movw	r30, r28
    4814:	ff 96       	adiw	r30, 0x3f	; 63
    4816:	60 81       	ld	r22, Z
    4818:	71 81       	ldd	r23, Z+1	; 0x01
    481a:	82 81       	ldd	r24, Z+2	; 0x02
    481c:	93 81       	ldd	r25, Z+3	; 0x03
    481e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4822:	dc 01       	movw	r26, r24
    4824:	cb 01       	movw	r24, r22
    4826:	9e af       	std	Y+62, r25	; 0x3e
    4828:	8d af       	std	Y+61, r24	; 0x3d
    482a:	8d ad       	ldd	r24, Y+61	; 0x3d
    482c:	9e ad       	ldd	r25, Y+62	; 0x3e
    482e:	9a af       	std	Y+58, r25	; 0x3a
    4830:	89 af       	std	Y+57, r24	; 0x39
    4832:	89 ad       	ldd	r24, Y+57	; 0x39
    4834:	9a ad       	ldd	r25, Y+58	; 0x3a
    4836:	01 97       	sbiw	r24, 0x01	; 1
    4838:	f1 f7       	brne	.-4      	; 0x4836 <H_LCD_void_Init+0x11c>
    483a:	9a af       	std	Y+58, r25	; 0x3a
    483c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(150);
	M_Dio_void_setPinValue(CLCD_RS_PIN,DIO_LOW);
    483e:	8d e0       	ldi	r24, 0x0D	; 13
    4840:	60 e0       	ldi	r22, 0x00	; 0
    4842:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
	/*Function set*/
#if(LCD_MODE == _4_BIT_MODE)
	H_LCD_void_sendCommand(CLCD_FUNCTION_SET_1);
    4846:	82 e0       	ldi	r24, 0x02	; 2
    4848:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <H_LCD_void_sendCommand>
    484c:	80 e0       	ldi	r24, 0x00	; 0
    484e:	90 e0       	ldi	r25, 0x00	; 0
    4850:	a0 ea       	ldi	r26, 0xA0	; 160
    4852:	b0 e4       	ldi	r27, 0x40	; 64
    4854:	8d ab       	std	Y+53, r24	; 0x35
    4856:	9e ab       	std	Y+54, r25	; 0x36
    4858:	af ab       	std	Y+55, r26	; 0x37
    485a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    485c:	6d a9       	ldd	r22, Y+53	; 0x35
    485e:	7e a9       	ldd	r23, Y+54	; 0x36
    4860:	8f a9       	ldd	r24, Y+55	; 0x37
    4862:	98 ad       	ldd	r25, Y+56	; 0x38
    4864:	20 e0       	ldi	r18, 0x00	; 0
    4866:	30 e0       	ldi	r19, 0x00	; 0
    4868:	4a e7       	ldi	r20, 0x7A	; 122
    486a:	55 e4       	ldi	r21, 0x45	; 69
    486c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4870:	dc 01       	movw	r26, r24
    4872:	cb 01       	movw	r24, r22
    4874:	89 ab       	std	Y+49, r24	; 0x31
    4876:	9a ab       	std	Y+50, r25	; 0x32
    4878:	ab ab       	std	Y+51, r26	; 0x33
    487a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    487c:	69 a9       	ldd	r22, Y+49	; 0x31
    487e:	7a a9       	ldd	r23, Y+50	; 0x32
    4880:	8b a9       	ldd	r24, Y+51	; 0x33
    4882:	9c a9       	ldd	r25, Y+52	; 0x34
    4884:	20 e0       	ldi	r18, 0x00	; 0
    4886:	30 e0       	ldi	r19, 0x00	; 0
    4888:	40 e8       	ldi	r20, 0x80	; 128
    488a:	5f e3       	ldi	r21, 0x3F	; 63
    488c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4890:	88 23       	and	r24, r24
    4892:	2c f4       	brge	.+10     	; 0x489e <H_LCD_void_Init+0x184>
		__ticks = 1;
    4894:	81 e0       	ldi	r24, 0x01	; 1
    4896:	90 e0       	ldi	r25, 0x00	; 0
    4898:	98 ab       	std	Y+48, r25	; 0x30
    489a:	8f a7       	std	Y+47, r24	; 0x2f
    489c:	3f c0       	rjmp	.+126    	; 0x491c <H_LCD_void_Init+0x202>
	else if (__tmp > 65535)
    489e:	69 a9       	ldd	r22, Y+49	; 0x31
    48a0:	7a a9       	ldd	r23, Y+50	; 0x32
    48a2:	8b a9       	ldd	r24, Y+51	; 0x33
    48a4:	9c a9       	ldd	r25, Y+52	; 0x34
    48a6:	20 e0       	ldi	r18, 0x00	; 0
    48a8:	3f ef       	ldi	r19, 0xFF	; 255
    48aa:	4f e7       	ldi	r20, 0x7F	; 127
    48ac:	57 e4       	ldi	r21, 0x47	; 71
    48ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48b2:	18 16       	cp	r1, r24
    48b4:	4c f5       	brge	.+82     	; 0x4908 <H_LCD_void_Init+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48b6:	6d a9       	ldd	r22, Y+53	; 0x35
    48b8:	7e a9       	ldd	r23, Y+54	; 0x36
    48ba:	8f a9       	ldd	r24, Y+55	; 0x37
    48bc:	98 ad       	ldd	r25, Y+56	; 0x38
    48be:	20 e0       	ldi	r18, 0x00	; 0
    48c0:	30 e0       	ldi	r19, 0x00	; 0
    48c2:	40 e2       	ldi	r20, 0x20	; 32
    48c4:	51 e4       	ldi	r21, 0x41	; 65
    48c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48ca:	dc 01       	movw	r26, r24
    48cc:	cb 01       	movw	r24, r22
    48ce:	bc 01       	movw	r22, r24
    48d0:	cd 01       	movw	r24, r26
    48d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48d6:	dc 01       	movw	r26, r24
    48d8:	cb 01       	movw	r24, r22
    48da:	98 ab       	std	Y+48, r25	; 0x30
    48dc:	8f a7       	std	Y+47, r24	; 0x2f
    48de:	0f c0       	rjmp	.+30     	; 0x48fe <H_LCD_void_Init+0x1e4>
    48e0:	80 e9       	ldi	r24, 0x90	; 144
    48e2:	91 e0       	ldi	r25, 0x01	; 1
    48e4:	9e a7       	std	Y+46, r25	; 0x2e
    48e6:	8d a7       	std	Y+45, r24	; 0x2d
    48e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    48ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    48ec:	01 97       	sbiw	r24, 0x01	; 1
    48ee:	f1 f7       	brne	.-4      	; 0x48ec <H_LCD_void_Init+0x1d2>
    48f0:	9e a7       	std	Y+46, r25	; 0x2e
    48f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    48f6:	98 a9       	ldd	r25, Y+48	; 0x30
    48f8:	01 97       	sbiw	r24, 0x01	; 1
    48fa:	98 ab       	std	Y+48, r25	; 0x30
    48fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    4900:	98 a9       	ldd	r25, Y+48	; 0x30
    4902:	00 97       	sbiw	r24, 0x00	; 0
    4904:	69 f7       	brne	.-38     	; 0x48e0 <H_LCD_void_Init+0x1c6>
    4906:	14 c0       	rjmp	.+40     	; 0x4930 <H_LCD_void_Init+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4908:	69 a9       	ldd	r22, Y+49	; 0x31
    490a:	7a a9       	ldd	r23, Y+50	; 0x32
    490c:	8b a9       	ldd	r24, Y+51	; 0x33
    490e:	9c a9       	ldd	r25, Y+52	; 0x34
    4910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4914:	dc 01       	movw	r26, r24
    4916:	cb 01       	movw	r24, r22
    4918:	98 ab       	std	Y+48, r25	; 0x30
    491a:	8f a7       	std	Y+47, r24	; 0x2f
    491c:	8f a5       	ldd	r24, Y+47	; 0x2f
    491e:	98 a9       	ldd	r25, Y+48	; 0x30
    4920:	9c a7       	std	Y+44, r25	; 0x2c
    4922:	8b a7       	std	Y+43, r24	; 0x2b
    4924:	8b a5       	ldd	r24, Y+43	; 0x2b
    4926:	9c a5       	ldd	r25, Y+44	; 0x2c
    4928:	01 97       	sbiw	r24, 0x01	; 1
    492a:	f1 f7       	brne	.-4      	; 0x4928 <H_LCD_void_Init+0x20e>
    492c:	9c a7       	std	Y+44, r25	; 0x2c
    492e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	H_LCD_void_sendCommand(CLCD_FUNCTION_SET_2);
    4930:	88 e2       	ldi	r24, 0x28	; 40
    4932:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <H_LCD_void_sendCommand>
    4936:	80 e0       	ldi	r24, 0x00	; 0
    4938:	90 e0       	ldi	r25, 0x00	; 0
    493a:	a0 ea       	ldi	r26, 0xA0	; 160
    493c:	b0 e4       	ldi	r27, 0x40	; 64
    493e:	8f a3       	std	Y+39, r24	; 0x27
    4940:	98 a7       	std	Y+40, r25	; 0x28
    4942:	a9 a7       	std	Y+41, r26	; 0x29
    4944:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4946:	6f a1       	ldd	r22, Y+39	; 0x27
    4948:	78 a5       	ldd	r23, Y+40	; 0x28
    494a:	89 a5       	ldd	r24, Y+41	; 0x29
    494c:	9a a5       	ldd	r25, Y+42	; 0x2a
    494e:	20 e0       	ldi	r18, 0x00	; 0
    4950:	30 e0       	ldi	r19, 0x00	; 0
    4952:	4a e7       	ldi	r20, 0x7A	; 122
    4954:	55 e4       	ldi	r21, 0x45	; 69
    4956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    495a:	dc 01       	movw	r26, r24
    495c:	cb 01       	movw	r24, r22
    495e:	8b a3       	std	Y+35, r24	; 0x23
    4960:	9c a3       	std	Y+36, r25	; 0x24
    4962:	ad a3       	std	Y+37, r26	; 0x25
    4964:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4966:	6b a1       	ldd	r22, Y+35	; 0x23
    4968:	7c a1       	ldd	r23, Y+36	; 0x24
    496a:	8d a1       	ldd	r24, Y+37	; 0x25
    496c:	9e a1       	ldd	r25, Y+38	; 0x26
    496e:	20 e0       	ldi	r18, 0x00	; 0
    4970:	30 e0       	ldi	r19, 0x00	; 0
    4972:	40 e8       	ldi	r20, 0x80	; 128
    4974:	5f e3       	ldi	r21, 0x3F	; 63
    4976:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    497a:	88 23       	and	r24, r24
    497c:	2c f4       	brge	.+10     	; 0x4988 <H_LCD_void_Init+0x26e>
		__ticks = 1;
    497e:	81 e0       	ldi	r24, 0x01	; 1
    4980:	90 e0       	ldi	r25, 0x00	; 0
    4982:	9a a3       	std	Y+34, r25	; 0x22
    4984:	89 a3       	std	Y+33, r24	; 0x21
    4986:	3f c0       	rjmp	.+126    	; 0x4a06 <H_LCD_void_Init+0x2ec>
	else if (__tmp > 65535)
    4988:	6b a1       	ldd	r22, Y+35	; 0x23
    498a:	7c a1       	ldd	r23, Y+36	; 0x24
    498c:	8d a1       	ldd	r24, Y+37	; 0x25
    498e:	9e a1       	ldd	r25, Y+38	; 0x26
    4990:	20 e0       	ldi	r18, 0x00	; 0
    4992:	3f ef       	ldi	r19, 0xFF	; 255
    4994:	4f e7       	ldi	r20, 0x7F	; 127
    4996:	57 e4       	ldi	r21, 0x47	; 71
    4998:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    499c:	18 16       	cp	r1, r24
    499e:	4c f5       	brge	.+82     	; 0x49f2 <H_LCD_void_Init+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49a0:	6f a1       	ldd	r22, Y+39	; 0x27
    49a2:	78 a5       	ldd	r23, Y+40	; 0x28
    49a4:	89 a5       	ldd	r24, Y+41	; 0x29
    49a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    49a8:	20 e0       	ldi	r18, 0x00	; 0
    49aa:	30 e0       	ldi	r19, 0x00	; 0
    49ac:	40 e2       	ldi	r20, 0x20	; 32
    49ae:	51 e4       	ldi	r21, 0x41	; 65
    49b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49b4:	dc 01       	movw	r26, r24
    49b6:	cb 01       	movw	r24, r22
    49b8:	bc 01       	movw	r22, r24
    49ba:	cd 01       	movw	r24, r26
    49bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49c0:	dc 01       	movw	r26, r24
    49c2:	cb 01       	movw	r24, r22
    49c4:	9a a3       	std	Y+34, r25	; 0x22
    49c6:	89 a3       	std	Y+33, r24	; 0x21
    49c8:	0f c0       	rjmp	.+30     	; 0x49e8 <H_LCD_void_Init+0x2ce>
    49ca:	80 e9       	ldi	r24, 0x90	; 144
    49cc:	91 e0       	ldi	r25, 0x01	; 1
    49ce:	98 a3       	std	Y+32, r25	; 0x20
    49d0:	8f 8f       	std	Y+31, r24	; 0x1f
    49d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    49d4:	98 a1       	ldd	r25, Y+32	; 0x20
    49d6:	01 97       	sbiw	r24, 0x01	; 1
    49d8:	f1 f7       	brne	.-4      	; 0x49d6 <H_LCD_void_Init+0x2bc>
    49da:	98 a3       	std	Y+32, r25	; 0x20
    49dc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49de:	89 a1       	ldd	r24, Y+33	; 0x21
    49e0:	9a a1       	ldd	r25, Y+34	; 0x22
    49e2:	01 97       	sbiw	r24, 0x01	; 1
    49e4:	9a a3       	std	Y+34, r25	; 0x22
    49e6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49e8:	89 a1       	ldd	r24, Y+33	; 0x21
    49ea:	9a a1       	ldd	r25, Y+34	; 0x22
    49ec:	00 97       	sbiw	r24, 0x00	; 0
    49ee:	69 f7       	brne	.-38     	; 0x49ca <H_LCD_void_Init+0x2b0>
    49f0:	14 c0       	rjmp	.+40     	; 0x4a1a <H_LCD_void_Init+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49f2:	6b a1       	ldd	r22, Y+35	; 0x23
    49f4:	7c a1       	ldd	r23, Y+36	; 0x24
    49f6:	8d a1       	ldd	r24, Y+37	; 0x25
    49f8:	9e a1       	ldd	r25, Y+38	; 0x26
    49fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49fe:	dc 01       	movw	r26, r24
    4a00:	cb 01       	movw	r24, r22
    4a02:	9a a3       	std	Y+34, r25	; 0x22
    4a04:	89 a3       	std	Y+33, r24	; 0x21
    4a06:	89 a1       	ldd	r24, Y+33	; 0x21
    4a08:	9a a1       	ldd	r25, Y+34	; 0x22
    4a0a:	9e 8f       	std	Y+30, r25	; 0x1e
    4a0c:	8d 8f       	std	Y+29, r24	; 0x1d
    4a0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4a10:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4a12:	01 97       	sbiw	r24, 0x01	; 1
    4a14:	f1 f7       	brne	.-4      	; 0x4a12 <H_LCD_void_Init+0x2f8>
    4a16:	9e 8f       	std	Y+30, r25	; 0x1e
    4a18:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	/*Display ON/OFF*/
	H_LCD_void_sendCommand(CLCD_DISPLAY);
    4a1a:	8c e0       	ldi	r24, 0x0C	; 12
    4a1c:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <H_LCD_void_sendCommand>
    4a20:	80 e0       	ldi	r24, 0x00	; 0
    4a22:	90 e0       	ldi	r25, 0x00	; 0
    4a24:	a0 ea       	ldi	r26, 0xA0	; 160
    4a26:	b0 e4       	ldi	r27, 0x40	; 64
    4a28:	89 8f       	std	Y+25, r24	; 0x19
    4a2a:	9a 8f       	std	Y+26, r25	; 0x1a
    4a2c:	ab 8f       	std	Y+27, r26	; 0x1b
    4a2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a30:	69 8d       	ldd	r22, Y+25	; 0x19
    4a32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a38:	20 e0       	ldi	r18, 0x00	; 0
    4a3a:	30 e0       	ldi	r19, 0x00	; 0
    4a3c:	4a e7       	ldi	r20, 0x7A	; 122
    4a3e:	55 e4       	ldi	r21, 0x45	; 69
    4a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a44:	dc 01       	movw	r26, r24
    4a46:	cb 01       	movw	r24, r22
    4a48:	8d 8b       	std	Y+21, r24	; 0x15
    4a4a:	9e 8b       	std	Y+22, r25	; 0x16
    4a4c:	af 8b       	std	Y+23, r26	; 0x17
    4a4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4a50:	6d 89       	ldd	r22, Y+21	; 0x15
    4a52:	7e 89       	ldd	r23, Y+22	; 0x16
    4a54:	8f 89       	ldd	r24, Y+23	; 0x17
    4a56:	98 8d       	ldd	r25, Y+24	; 0x18
    4a58:	20 e0       	ldi	r18, 0x00	; 0
    4a5a:	30 e0       	ldi	r19, 0x00	; 0
    4a5c:	40 e8       	ldi	r20, 0x80	; 128
    4a5e:	5f e3       	ldi	r21, 0x3F	; 63
    4a60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a64:	88 23       	and	r24, r24
    4a66:	2c f4       	brge	.+10     	; 0x4a72 <H_LCD_void_Init+0x358>
		__ticks = 1;
    4a68:	81 e0       	ldi	r24, 0x01	; 1
    4a6a:	90 e0       	ldi	r25, 0x00	; 0
    4a6c:	9c 8b       	std	Y+20, r25	; 0x14
    4a6e:	8b 8b       	std	Y+19, r24	; 0x13
    4a70:	3f c0       	rjmp	.+126    	; 0x4af0 <H_LCD_void_Init+0x3d6>
	else if (__tmp > 65535)
    4a72:	6d 89       	ldd	r22, Y+21	; 0x15
    4a74:	7e 89       	ldd	r23, Y+22	; 0x16
    4a76:	8f 89       	ldd	r24, Y+23	; 0x17
    4a78:	98 8d       	ldd	r25, Y+24	; 0x18
    4a7a:	20 e0       	ldi	r18, 0x00	; 0
    4a7c:	3f ef       	ldi	r19, 0xFF	; 255
    4a7e:	4f e7       	ldi	r20, 0x7F	; 127
    4a80:	57 e4       	ldi	r21, 0x47	; 71
    4a82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a86:	18 16       	cp	r1, r24
    4a88:	4c f5       	brge	.+82     	; 0x4adc <H_LCD_void_Init+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a8a:	69 8d       	ldd	r22, Y+25	; 0x19
    4a8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a92:	20 e0       	ldi	r18, 0x00	; 0
    4a94:	30 e0       	ldi	r19, 0x00	; 0
    4a96:	40 e2       	ldi	r20, 0x20	; 32
    4a98:	51 e4       	ldi	r21, 0x41	; 65
    4a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a9e:	dc 01       	movw	r26, r24
    4aa0:	cb 01       	movw	r24, r22
    4aa2:	bc 01       	movw	r22, r24
    4aa4:	cd 01       	movw	r24, r26
    4aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aaa:	dc 01       	movw	r26, r24
    4aac:	cb 01       	movw	r24, r22
    4aae:	9c 8b       	std	Y+20, r25	; 0x14
    4ab0:	8b 8b       	std	Y+19, r24	; 0x13
    4ab2:	0f c0       	rjmp	.+30     	; 0x4ad2 <H_LCD_void_Init+0x3b8>
    4ab4:	80 e9       	ldi	r24, 0x90	; 144
    4ab6:	91 e0       	ldi	r25, 0x01	; 1
    4ab8:	9a 8b       	std	Y+18, r25	; 0x12
    4aba:	89 8b       	std	Y+17, r24	; 0x11
    4abc:	89 89       	ldd	r24, Y+17	; 0x11
    4abe:	9a 89       	ldd	r25, Y+18	; 0x12
    4ac0:	01 97       	sbiw	r24, 0x01	; 1
    4ac2:	f1 f7       	brne	.-4      	; 0x4ac0 <H_LCD_void_Init+0x3a6>
    4ac4:	9a 8b       	std	Y+18, r25	; 0x12
    4ac6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ac8:	8b 89       	ldd	r24, Y+19	; 0x13
    4aca:	9c 89       	ldd	r25, Y+20	; 0x14
    4acc:	01 97       	sbiw	r24, 0x01	; 1
    4ace:	9c 8b       	std	Y+20, r25	; 0x14
    4ad0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ad2:	8b 89       	ldd	r24, Y+19	; 0x13
    4ad4:	9c 89       	ldd	r25, Y+20	; 0x14
    4ad6:	00 97       	sbiw	r24, 0x00	; 0
    4ad8:	69 f7       	brne	.-38     	; 0x4ab4 <H_LCD_void_Init+0x39a>
    4ada:	14 c0       	rjmp	.+40     	; 0x4b04 <H_LCD_void_Init+0x3ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4adc:	6d 89       	ldd	r22, Y+21	; 0x15
    4ade:	7e 89       	ldd	r23, Y+22	; 0x16
    4ae0:	8f 89       	ldd	r24, Y+23	; 0x17
    4ae2:	98 8d       	ldd	r25, Y+24	; 0x18
    4ae4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ae8:	dc 01       	movw	r26, r24
    4aea:	cb 01       	movw	r24, r22
    4aec:	9c 8b       	std	Y+20, r25	; 0x14
    4aee:	8b 8b       	std	Y+19, r24	; 0x13
    4af0:	8b 89       	ldd	r24, Y+19	; 0x13
    4af2:	9c 89       	ldd	r25, Y+20	; 0x14
    4af4:	98 8b       	std	Y+16, r25	; 0x10
    4af6:	8f 87       	std	Y+15, r24	; 0x0f
    4af8:	8f 85       	ldd	r24, Y+15	; 0x0f
    4afa:	98 89       	ldd	r25, Y+16	; 0x10
    4afc:	01 97       	sbiw	r24, 0x01	; 1
    4afe:	f1 f7       	brne	.-4      	; 0x4afc <H_LCD_void_Init+0x3e2>
    4b00:	98 8b       	std	Y+16, r25	; 0x10
    4b02:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	/*Display clear*/
	H_LCD_void_sendCommand(CLCD_CLEAR);
    4b04:	81 e0       	ldi	r24, 0x01	; 1
    4b06:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <H_LCD_void_sendCommand>
    4b0a:	80 e0       	ldi	r24, 0x00	; 0
    4b0c:	90 e0       	ldi	r25, 0x00	; 0
    4b0e:	a0 ea       	ldi	r26, 0xA0	; 160
    4b10:	b0 e4       	ldi	r27, 0x40	; 64
    4b12:	8b 87       	std	Y+11, r24	; 0x0b
    4b14:	9c 87       	std	Y+12, r25	; 0x0c
    4b16:	ad 87       	std	Y+13, r26	; 0x0d
    4b18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b20:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b22:	20 e0       	ldi	r18, 0x00	; 0
    4b24:	30 e0       	ldi	r19, 0x00	; 0
    4b26:	4a e7       	ldi	r20, 0x7A	; 122
    4b28:	55 e4       	ldi	r21, 0x45	; 69
    4b2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b2e:	dc 01       	movw	r26, r24
    4b30:	cb 01       	movw	r24, r22
    4b32:	8f 83       	std	Y+7, r24	; 0x07
    4b34:	98 87       	std	Y+8, r25	; 0x08
    4b36:	a9 87       	std	Y+9, r26	; 0x09
    4b38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b3a:	6f 81       	ldd	r22, Y+7	; 0x07
    4b3c:	78 85       	ldd	r23, Y+8	; 0x08
    4b3e:	89 85       	ldd	r24, Y+9	; 0x09
    4b40:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b42:	20 e0       	ldi	r18, 0x00	; 0
    4b44:	30 e0       	ldi	r19, 0x00	; 0
    4b46:	40 e8       	ldi	r20, 0x80	; 128
    4b48:	5f e3       	ldi	r21, 0x3F	; 63
    4b4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b4e:	88 23       	and	r24, r24
    4b50:	2c f4       	brge	.+10     	; 0x4b5c <H_LCD_void_Init+0x442>
		__ticks = 1;
    4b52:	81 e0       	ldi	r24, 0x01	; 1
    4b54:	90 e0       	ldi	r25, 0x00	; 0
    4b56:	9e 83       	std	Y+6, r25	; 0x06
    4b58:	8d 83       	std	Y+5, r24	; 0x05
    4b5a:	3f c0       	rjmp	.+126    	; 0x4bda <H_LCD_void_Init+0x4c0>
	else if (__tmp > 65535)
    4b5c:	6f 81       	ldd	r22, Y+7	; 0x07
    4b5e:	78 85       	ldd	r23, Y+8	; 0x08
    4b60:	89 85       	ldd	r24, Y+9	; 0x09
    4b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b64:	20 e0       	ldi	r18, 0x00	; 0
    4b66:	3f ef       	ldi	r19, 0xFF	; 255
    4b68:	4f e7       	ldi	r20, 0x7F	; 127
    4b6a:	57 e4       	ldi	r21, 0x47	; 71
    4b6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b70:	18 16       	cp	r1, r24
    4b72:	4c f5       	brge	.+82     	; 0x4bc6 <H_LCD_void_Init+0x4ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b74:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b76:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b78:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b7c:	20 e0       	ldi	r18, 0x00	; 0
    4b7e:	30 e0       	ldi	r19, 0x00	; 0
    4b80:	40 e2       	ldi	r20, 0x20	; 32
    4b82:	51 e4       	ldi	r21, 0x41	; 65
    4b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b88:	dc 01       	movw	r26, r24
    4b8a:	cb 01       	movw	r24, r22
    4b8c:	bc 01       	movw	r22, r24
    4b8e:	cd 01       	movw	r24, r26
    4b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b94:	dc 01       	movw	r26, r24
    4b96:	cb 01       	movw	r24, r22
    4b98:	9e 83       	std	Y+6, r25	; 0x06
    4b9a:	8d 83       	std	Y+5, r24	; 0x05
    4b9c:	0f c0       	rjmp	.+30     	; 0x4bbc <H_LCD_void_Init+0x4a2>
    4b9e:	80 e9       	ldi	r24, 0x90	; 144
    4ba0:	91 e0       	ldi	r25, 0x01	; 1
    4ba2:	9c 83       	std	Y+4, r25	; 0x04
    4ba4:	8b 83       	std	Y+3, r24	; 0x03
    4ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ba8:	9c 81       	ldd	r25, Y+4	; 0x04
    4baa:	01 97       	sbiw	r24, 0x01	; 1
    4bac:	f1 f7       	brne	.-4      	; 0x4baa <H_LCD_void_Init+0x490>
    4bae:	9c 83       	std	Y+4, r25	; 0x04
    4bb0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bb2:	8d 81       	ldd	r24, Y+5	; 0x05
    4bb4:	9e 81       	ldd	r25, Y+6	; 0x06
    4bb6:	01 97       	sbiw	r24, 0x01	; 1
    4bb8:	9e 83       	std	Y+6, r25	; 0x06
    4bba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    4bbe:	9e 81       	ldd	r25, Y+6	; 0x06
    4bc0:	00 97       	sbiw	r24, 0x00	; 0
    4bc2:	69 f7       	brne	.-38     	; 0x4b9e <H_LCD_void_Init+0x484>
    4bc4:	14 c0       	rjmp	.+40     	; 0x4bee <H_LCD_void_Init+0x4d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bc6:	6f 81       	ldd	r22, Y+7	; 0x07
    4bc8:	78 85       	ldd	r23, Y+8	; 0x08
    4bca:	89 85       	ldd	r24, Y+9	; 0x09
    4bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bd2:	dc 01       	movw	r26, r24
    4bd4:	cb 01       	movw	r24, r22
    4bd6:	9e 83       	std	Y+6, r25	; 0x06
    4bd8:	8d 83       	std	Y+5, r24	; 0x05
    4bda:	8d 81       	ldd	r24, Y+5	; 0x05
    4bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    4bde:	9a 83       	std	Y+2, r25	; 0x02
    4be0:	89 83       	std	Y+1, r24	; 0x01
    4be2:	89 81       	ldd	r24, Y+1	; 0x01
    4be4:	9a 81       	ldd	r25, Y+2	; 0x02
    4be6:	01 97       	sbiw	r24, 0x01	; 1
    4be8:	f1 f7       	brne	.-4      	; 0x4be6 <H_LCD_void_Init+0x4cc>
    4bea:	9a 83       	std	Y+2, r25	; 0x02
    4bec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	H_LCD_void_sendCommand(CLCD_ENTRY_MODE_SET);
    4bee:	86 e0       	ldi	r24, 0x06	; 6
    4bf0:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <H_LCD_void_sendCommand>
	/*clear display*/
	H_LCD_void_sendCommand(0b00000001);

#endif

}
    4bf4:	ca 5b       	subi	r28, 0xBA	; 186
    4bf6:	df 4f       	sbci	r29, 0xFF	; 255
    4bf8:	0f b6       	in	r0, 0x3f	; 63
    4bfa:	f8 94       	cli
    4bfc:	de bf       	out	0x3e, r29	; 62
    4bfe:	0f be       	out	0x3f, r0	; 63
    4c00:	cd bf       	out	0x3d, r28	; 61
    4c02:	cf 91       	pop	r28
    4c04:	df 91       	pop	r29
    4c06:	1f 91       	pop	r17
    4c08:	0f 91       	pop	r16
    4c0a:	08 95       	ret

00004c0c <H_LCD_void_sendData>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_sendData(u8 copy_u8data )
{
    4c0c:	df 93       	push	r29
    4c0e:	cf 93       	push	r28
    4c10:	0f 92       	push	r0
    4c12:	cd b7       	in	r28, 0x3d	; 61
    4c14:	de b7       	in	r29, 0x3e	; 62
    4c16:	89 83       	std	Y+1, r24	; 0x01
	/*SET RS TO ZERO*/
	M_Dio_void_setPinValue(CLCD_RS_PIN,DIO_HIGH);
    4c18:	8d e0       	ldi	r24, 0x0D	; 13
    4c1a:	61 e0       	ldi	r22, 0x01	; 1
    4c1c:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
	/*Write command*/
	H_LCD_void_latchByte(copy_u8data);
    4c20:	89 81       	ldd	r24, Y+1	; 0x01
    4c22:	0e 94 c6 21 	call	0x438c	; 0x438c <H_LCD_void_latchByte>

}
    4c26:	0f 90       	pop	r0
    4c28:	cf 91       	pop	r28
    4c2a:	df 91       	pop	r29
    4c2c:	08 95       	ret

00004c2e <H_LCD_void_sendCommand>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_sendCommand(u8 copy_u8command)
{
    4c2e:	df 93       	push	r29
    4c30:	cf 93       	push	r28
    4c32:	0f 92       	push	r0
    4c34:	cd b7       	in	r28, 0x3d	; 61
    4c36:	de b7       	in	r29, 0x3e	; 62
    4c38:	89 83       	std	Y+1, r24	; 0x01
	/*SET RS TO ZERO*/
	M_Dio_void_setPinValue(CLCD_RS_PIN,DIO_LOW);
    4c3a:	8d e0       	ldi	r24, 0x0D	; 13
    4c3c:	60 e0       	ldi	r22, 0x00	; 0
    4c3e:	0e 94 4f 14 	call	0x289e	; 0x289e <M_Dio_void_setPinValue>
	/*Write command*/
	H_LCD_void_latchByte(copy_u8command);
    4c42:	89 81       	ldd	r24, Y+1	; 0x01
    4c44:	0e 94 c6 21 	call	0x438c	; 0x438c <H_LCD_void_latchByte>

}
    4c48:	0f 90       	pop	r0
    4c4a:	cf 91       	pop	r28
    4c4c:	df 91       	pop	r29
    4c4e:	08 95       	ret

00004c50 <H_LCD_void_sendString>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_sendString(const s8 * pstr)
{
    4c50:	df 93       	push	r29
    4c52:	cf 93       	push	r28
    4c54:	00 d0       	rcall	.+0      	; 0x4c56 <H_LCD_void_sendString+0x6>
    4c56:	0f 92       	push	r0
    4c58:	cd b7       	in	r28, 0x3d	; 61
    4c5a:	de b7       	in	r29, 0x3e	; 62
    4c5c:	9b 83       	std	Y+3, r25	; 0x03
    4c5e:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter;
	for(counter=0;pstr[counter]!=0;counter++)
    4c60:	19 82       	std	Y+1, r1	; 0x01
    4c62:	0e c0       	rjmp	.+28     	; 0x4c80 <H_LCD_void_sendString+0x30>
	{
		H_LCD_void_sendData(pstr[counter]);
    4c64:	89 81       	ldd	r24, Y+1	; 0x01
    4c66:	28 2f       	mov	r18, r24
    4c68:	30 e0       	ldi	r19, 0x00	; 0
    4c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    4c6c:	9b 81       	ldd	r25, Y+3	; 0x03
    4c6e:	fc 01       	movw	r30, r24
    4c70:	e2 0f       	add	r30, r18
    4c72:	f3 1f       	adc	r31, r19
    4c74:	80 81       	ld	r24, Z
    4c76:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <H_LCD_void_sendData>
  Return Value     : void
******************************************/
void H_LCD_void_sendString(const s8 * pstr)
{
	u8 counter;
	for(counter=0;pstr[counter]!=0;counter++)
    4c7a:	89 81       	ldd	r24, Y+1	; 0x01
    4c7c:	8f 5f       	subi	r24, 0xFF	; 255
    4c7e:	89 83       	std	Y+1, r24	; 0x01
    4c80:	89 81       	ldd	r24, Y+1	; 0x01
    4c82:	28 2f       	mov	r18, r24
    4c84:	30 e0       	ldi	r19, 0x00	; 0
    4c86:	8a 81       	ldd	r24, Y+2	; 0x02
    4c88:	9b 81       	ldd	r25, Y+3	; 0x03
    4c8a:	fc 01       	movw	r30, r24
    4c8c:	e2 0f       	add	r30, r18
    4c8e:	f3 1f       	adc	r31, r19
    4c90:	80 81       	ld	r24, Z
    4c92:	88 23       	and	r24, r24
    4c94:	39 f7       	brne	.-50     	; 0x4c64 <H_LCD_void_sendString+0x14>
	{
		H_LCD_void_sendData(pstr[counter]);
	}
}
    4c96:	0f 90       	pop	r0
    4c98:	0f 90       	pop	r0
    4c9a:	0f 90       	pop	r0
    4c9c:	cf 91       	pop	r28
    4c9e:	df 91       	pop	r29
    4ca0:	08 95       	ret

00004ca2 <H_LCD_void_sendIntNum>:
	//H_LCD_void_sendData(copy_s32Num+'0');

}
*/
void H_LCD_void_sendIntNum(s32 copy_s32Num)
{
    4ca2:	0f 93       	push	r16
    4ca4:	1f 93       	push	r17
    4ca6:	df 93       	push	r29
    4ca8:	cf 93       	push	r28
    4caa:	cd b7       	in	r28, 0x3d	; 61
    4cac:	de b7       	in	r29, 0x3e	; 62
    4cae:	a5 97       	sbiw	r28, 0x25	; 37
    4cb0:	0f b6       	in	r0, 0x3f	; 63
    4cb2:	f8 94       	cli
    4cb4:	de bf       	out	0x3e, r29	; 62
    4cb6:	0f be       	out	0x3f, r0	; 63
    4cb8:	cd bf       	out	0x3d, r28	; 61
    4cba:	6a a3       	std	Y+34, r22	; 0x22
    4cbc:	7b a3       	std	Y+35, r23	; 0x23
    4cbe:	8c a3       	std	Y+36, r24	; 0x24
    4cc0:	9d a3       	std	Y+37, r25	; 0x25
	/* Local Variable to save the numbers digits*/
	s32 Local_Variable[8] = {0} ;
    4cc2:	80 e2       	ldi	r24, 0x20	; 32
    4cc4:	fe 01       	movw	r30, r28
    4cc6:	32 96       	adiw	r30, 0x02	; 2
    4cc8:	df 01       	movw	r26, r30
    4cca:	98 2f       	mov	r25, r24
    4ccc:	1d 92       	st	X+, r1
    4cce:	9a 95       	dec	r25
    4cd0:	e9 f7       	brne	.-6      	; 0x4ccc <H_LCD_void_sendIntNum+0x2a>
	u8 Local_Counter = 0 ;
    4cd2:	19 82       	std	Y+1, r1	; 0x01

	/* Check if the number is negative */
	if (copy_s32Num < 0)
    4cd4:	8a a1       	ldd	r24, Y+34	; 0x22
    4cd6:	9b a1       	ldd	r25, Y+35	; 0x23
    4cd8:	ac a1       	ldd	r26, Y+36	; 0x24
    4cda:	bd a1       	ldd	r27, Y+37	; 0x25
    4cdc:	bb 23       	and	r27, r27
    4cde:	0c f0       	brlt	.+2      	; 0x4ce2 <H_LCD_void_sendIntNum+0x40>
    4ce0:	4a c0       	rjmp	.+148    	; 0x4d76 <H_LCD_void_sendIntNum+0xd4>
	{
	/*Remove Negative Sign from number*/
	copy_s32Num = copy_s32Num * -1 ;
    4ce2:	8a a1       	ldd	r24, Y+34	; 0x22
    4ce4:	9b a1       	ldd	r25, Y+35	; 0x23
    4ce6:	ac a1       	ldd	r26, Y+36	; 0x24
    4ce8:	bd a1       	ldd	r27, Y+37	; 0x25
    4cea:	b0 95       	com	r27
    4cec:	a0 95       	com	r26
    4cee:	90 95       	com	r25
    4cf0:	81 95       	neg	r24
    4cf2:	9f 4f       	sbci	r25, 0xFF	; 255
    4cf4:	af 4f       	sbci	r26, 0xFF	; 255
    4cf6:	bf 4f       	sbci	r27, 0xFF	; 255
    4cf8:	8a a3       	std	Y+34, r24	; 0x22
    4cfa:	9b a3       	std	Y+35, r25	; 0x23
    4cfc:	ac a3       	std	Y+36, r26	; 0x24
    4cfe:	bd a3       	std	Y+37, r27	; 0x25
	/*Send Negative Sign */
	H_LCD_void_sendData('-');
    4d00:	8d e2       	ldi	r24, 0x2D	; 45
    4d02:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <H_LCD_void_sendData>
    4d06:	37 c0       	rjmp	.+110    	; 0x4d76 <H_LCD_void_sendIntNum+0xd4>
	}
	/* While loop to split the Numbers and save it in Local_Variable*/
	while (copy_s32Num != 0)
	{
	Local_Variable[Local_Counter] = copy_s32Num % 10 ;
    4d08:	89 81       	ldd	r24, Y+1	; 0x01
    4d0a:	08 2f       	mov	r16, r24
    4d0c:	10 e0       	ldi	r17, 0x00	; 0
    4d0e:	8a a1       	ldd	r24, Y+34	; 0x22
    4d10:	9b a1       	ldd	r25, Y+35	; 0x23
    4d12:	ac a1       	ldd	r26, Y+36	; 0x24
    4d14:	bd a1       	ldd	r27, Y+37	; 0x25
    4d16:	2a e0       	ldi	r18, 0x0A	; 10
    4d18:	30 e0       	ldi	r19, 0x00	; 0
    4d1a:	40 e0       	ldi	r20, 0x00	; 0
    4d1c:	50 e0       	ldi	r21, 0x00	; 0
    4d1e:	bc 01       	movw	r22, r24
    4d20:	cd 01       	movw	r24, r26
    4d22:	0e 94 da 28 	call	0x51b4	; 0x51b4 <__divmodsi4>
    4d26:	dc 01       	movw	r26, r24
    4d28:	cb 01       	movw	r24, r22
    4d2a:	ac 01       	movw	r20, r24
    4d2c:	bd 01       	movw	r22, r26
    4d2e:	98 01       	movw	r18, r16
    4d30:	22 0f       	add	r18, r18
    4d32:	33 1f       	adc	r19, r19
    4d34:	22 0f       	add	r18, r18
    4d36:	33 1f       	adc	r19, r19
    4d38:	ce 01       	movw	r24, r28
    4d3a:	01 96       	adiw	r24, 0x01	; 1
    4d3c:	82 0f       	add	r24, r18
    4d3e:	93 1f       	adc	r25, r19
    4d40:	fc 01       	movw	r30, r24
    4d42:	31 96       	adiw	r30, 0x01	; 1
    4d44:	40 83       	st	Z, r20
    4d46:	51 83       	std	Z+1, r21	; 0x01
    4d48:	62 83       	std	Z+2, r22	; 0x02
    4d4a:	73 83       	std	Z+3, r23	; 0x03
	copy_s32Num = copy_s32Num / 10 ;
    4d4c:	8a a1       	ldd	r24, Y+34	; 0x22
    4d4e:	9b a1       	ldd	r25, Y+35	; 0x23
    4d50:	ac a1       	ldd	r26, Y+36	; 0x24
    4d52:	bd a1       	ldd	r27, Y+37	; 0x25
    4d54:	2a e0       	ldi	r18, 0x0A	; 10
    4d56:	30 e0       	ldi	r19, 0x00	; 0
    4d58:	40 e0       	ldi	r20, 0x00	; 0
    4d5a:	50 e0       	ldi	r21, 0x00	; 0
    4d5c:	bc 01       	movw	r22, r24
    4d5e:	cd 01       	movw	r24, r26
    4d60:	0e 94 da 28 	call	0x51b4	; 0x51b4 <__divmodsi4>
    4d64:	da 01       	movw	r26, r20
    4d66:	c9 01       	movw	r24, r18
    4d68:	8a a3       	std	Y+34, r24	; 0x22
    4d6a:	9b a3       	std	Y+35, r25	; 0x23
    4d6c:	ac a3       	std	Y+36, r26	; 0x24
    4d6e:	bd a3       	std	Y+37, r27	; 0x25
	Local_Counter ++ ;
    4d70:	89 81       	ldd	r24, Y+1	; 0x01
    4d72:	8f 5f       	subi	r24, 0xFF	; 255
    4d74:	89 83       	std	Y+1, r24	; 0x01
	copy_s32Num = copy_s32Num * -1 ;
	/*Send Negative Sign */
	H_LCD_void_sendData('-');
	}
	/* While loop to split the Numbers and save it in Local_Variable*/
	while (copy_s32Num != 0)
    4d76:	8a a1       	ldd	r24, Y+34	; 0x22
    4d78:	9b a1       	ldd	r25, Y+35	; 0x23
    4d7a:	ac a1       	ldd	r26, Y+36	; 0x24
    4d7c:	bd a1       	ldd	r27, Y+37	; 0x25
    4d7e:	00 97       	sbiw	r24, 0x00	; 0
    4d80:	a1 05       	cpc	r26, r1
    4d82:	b1 05       	cpc	r27, r1
    4d84:	09 f6       	brne	.-126    	; 0x4d08 <H_LCD_void_sendIntNum+0x66>
	copy_s32Num = copy_s32Num / 10 ;
	Local_Counter ++ ;

	}
	/* For loop to send the numbers using SendData*/
	for (Local_Counter --; Local_Counter < '0' ; Local_Counter--)
    4d86:	89 81       	ldd	r24, Y+1	; 0x01
    4d88:	81 50       	subi	r24, 0x01	; 1
    4d8a:	89 83       	std	Y+1, r24	; 0x01
    4d8c:	18 c0       	rjmp	.+48     	; 0x4dbe <H_LCD_void_sendIntNum+0x11c>
	{
		 H_LCD_void_sendData('0' + Local_Variable[Local_Counter]);
    4d8e:	89 81       	ldd	r24, Y+1	; 0x01
    4d90:	88 2f       	mov	r24, r24
    4d92:	90 e0       	ldi	r25, 0x00	; 0
    4d94:	9c 01       	movw	r18, r24
    4d96:	22 0f       	add	r18, r18
    4d98:	33 1f       	adc	r19, r19
    4d9a:	22 0f       	add	r18, r18
    4d9c:	33 1f       	adc	r19, r19
    4d9e:	ce 01       	movw	r24, r28
    4da0:	01 96       	adiw	r24, 0x01	; 1
    4da2:	82 0f       	add	r24, r18
    4da4:	93 1f       	adc	r25, r19
    4da6:	fc 01       	movw	r30, r24
    4da8:	31 96       	adiw	r30, 0x01	; 1
    4daa:	80 81       	ld	r24, Z
    4dac:	91 81       	ldd	r25, Z+1	; 0x01
    4dae:	a2 81       	ldd	r26, Z+2	; 0x02
    4db0:	b3 81       	ldd	r27, Z+3	; 0x03
    4db2:	80 5d       	subi	r24, 0xD0	; 208
    4db4:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <H_LCD_void_sendData>
	copy_s32Num = copy_s32Num / 10 ;
	Local_Counter ++ ;

	}
	/* For loop to send the numbers using SendData*/
	for (Local_Counter --; Local_Counter < '0' ; Local_Counter--)
    4db8:	89 81       	ldd	r24, Y+1	; 0x01
    4dba:	81 50       	subi	r24, 0x01	; 1
    4dbc:	89 83       	std	Y+1, r24	; 0x01
    4dbe:	89 81       	ldd	r24, Y+1	; 0x01
    4dc0:	80 33       	cpi	r24, 0x30	; 48
    4dc2:	28 f3       	brcs	.-54     	; 0x4d8e <H_LCD_void_sendIntNum+0xec>
	{
		 H_LCD_void_sendData('0' + Local_Variable[Local_Counter]);
	}
}
    4dc4:	a5 96       	adiw	r28, 0x25	; 37
    4dc6:	0f b6       	in	r0, 0x3f	; 63
    4dc8:	f8 94       	cli
    4dca:	de bf       	out	0x3e, r29	; 62
    4dcc:	0f be       	out	0x3f, r0	; 63
    4dce:	cd bf       	out	0x3d, r28	; 61
    4dd0:	cf 91       	pop	r28
    4dd2:	df 91       	pop	r29
    4dd4:	1f 91       	pop	r17
    4dd6:	0f 91       	pop	r16
    4dd8:	08 95       	ret

00004dda <H_LCD_void_gotoXY>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col)
{
    4dda:	df 93       	push	r29
    4ddc:	cf 93       	push	r28
    4dde:	00 d0       	rcall	.+0      	; 0x4de0 <H_LCD_void_gotoXY+0x6>
    4de0:	0f 92       	push	r0
    4de2:	cd b7       	in	r28, 0x3d	; 61
    4de4:	de b7       	in	r29, 0x3e	; 62
    4de6:	8a 83       	std	Y+2, r24	; 0x02
    4de8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(copy_u8Row == 1)
    4dea:	8a 81       	ldd	r24, Y+2	; 0x02
    4dec:	81 30       	cpi	r24, 0x01	; 1
    4dee:	19 f4       	brne	.+6      	; 0x4df6 <H_LCD_void_gotoXY+0x1c>
	{
		Local_u8Address = copy_u8Col;
    4df0:	8b 81       	ldd	r24, Y+3	; 0x03
    4df2:	89 83       	std	Y+1, r24	; 0x01
    4df4:	14 c0       	rjmp	.+40     	; 0x4e1e <H_LCD_void_gotoXY+0x44>
	}
	else if(copy_u8Row == 2)
    4df6:	8a 81       	ldd	r24, Y+2	; 0x02
    4df8:	82 30       	cpi	r24, 0x02	; 2
    4dfa:	21 f4       	brne	.+8      	; 0x4e04 <H_LCD_void_gotoXY+0x2a>
	{
		Local_u8Address = copy_u8Col + 0x40;
    4dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    4dfe:	80 5c       	subi	r24, 0xC0	; 192
    4e00:	89 83       	std	Y+1, r24	; 0x01
    4e02:	0d c0       	rjmp	.+26     	; 0x4e1e <H_LCD_void_gotoXY+0x44>
	}
	else if(copy_u8Row == 3)
    4e04:	8a 81       	ldd	r24, Y+2	; 0x02
    4e06:	83 30       	cpi	r24, 0x03	; 3
    4e08:	21 f4       	brne	.+8      	; 0x4e12 <H_LCD_void_gotoXY+0x38>
	{
		Local_u8Address = copy_u8Col + 0x14;
    4e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    4e0c:	8c 5e       	subi	r24, 0xEC	; 236
    4e0e:	89 83       	std	Y+1, r24	; 0x01
    4e10:	06 c0       	rjmp	.+12     	; 0x4e1e <H_LCD_void_gotoXY+0x44>
	}
	else if(copy_u8Row == 4)
    4e12:	8a 81       	ldd	r24, Y+2	; 0x02
    4e14:	84 30       	cpi	r24, 0x04	; 4
    4e16:	19 f4       	brne	.+6      	; 0x4e1e <H_LCD_void_gotoXY+0x44>
	{
		Local_u8Address = copy_u8Col + 0x54;
    4e18:	8b 81       	ldd	r24, Y+3	; 0x03
    4e1a:	8c 5a       	subi	r24, 0xAC	; 172
    4e1c:	89 83       	std	Y+1, r24	; 0x01
	else
	{

	}
	//128 Is added to the address to set the most significant bit by 1 according to DDRAM address instruction
	H_LCD_void_sendCommand(Local_u8Address+128);
    4e1e:	89 81       	ldd	r24, Y+1	; 0x01
    4e20:	80 58       	subi	r24, 0x80	; 128
    4e22:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <H_LCD_void_sendCommand>
}
    4e26:	0f 90       	pop	r0
    4e28:	0f 90       	pop	r0
    4e2a:	0f 90       	pop	r0
    4e2c:	cf 91       	pop	r28
    4e2e:	df 91       	pop	r29
    4e30:	08 95       	ret

00004e32 <H_LCD_void_creatCustomChar>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_creatCustomChar (const u8 * ArrPattern,u8 copy_u8charCode)
{
    4e32:	df 93       	push	r29
    4e34:	cf 93       	push	r28
    4e36:	00 d0       	rcall	.+0      	; 0x4e38 <H_LCD_void_creatCustomChar+0x6>
    4e38:	00 d0       	rcall	.+0      	; 0x4e3a <H_LCD_void_creatCustomChar+0x8>
    4e3a:	0f 92       	push	r0
    4e3c:	cd b7       	in	r28, 0x3d	; 61
    4e3e:	de b7       	in	r29, 0x3e	; 62
    4e40:	9c 83       	std	Y+4, r25	; 0x04
    4e42:	8b 83       	std	Y+3, r24	; 0x03
    4e44:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_counter=0;
    4e46:	1a 82       	std	Y+2, r1	; 0x02
	/*first calculate CGRAM address since each block of address is 8bytes*/
	u8 Local_u8CGramaddress=0;
    4e48:	19 82       	std	Y+1, r1	; 0x01
	Local_u8CGramaddress = copy_u8charCode*8;
    4e4a:	8d 81       	ldd	r24, Y+5	; 0x05
    4e4c:	88 2f       	mov	r24, r24
    4e4e:	90 e0       	ldi	r25, 0x00	; 0
    4e50:	88 0f       	add	r24, r24
    4e52:	99 1f       	adc	r25, r25
    4e54:	88 0f       	add	r24, r24
    4e56:	99 1f       	adc	r25, r25
    4e58:	88 0f       	add	r24, r24
    4e5a:	99 1f       	adc	r25, r25
    4e5c:	89 83       	std	Y+1, r24	; 0x01
	/*Access CGRAM block using function Send command by setting bit 6 and clearing bit7*/
	H_LCD_void_sendCommand(Local_u8CGramaddress+64);
    4e5e:	89 81       	ldd	r24, Y+1	; 0x01
    4e60:	80 5c       	subi	r24, 0xC0	; 192
    4e62:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <H_LCD_void_sendCommand>
	/*write the pattern to the CG ram */
	for(Local_counter=0;Local_counter<8;Local_counter++) /*<8 since there are 8 memory locations only for cgram (64bytes)*/
    4e66:	1a 82       	std	Y+2, r1	; 0x02
    4e68:	0e c0       	rjmp	.+28     	; 0x4e86 <H_LCD_void_creatCustomChar+0x54>
	{
		H_LCD_void_sendData(ArrPattern[Local_counter]);
    4e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    4e6c:	28 2f       	mov	r18, r24
    4e6e:	30 e0       	ldi	r19, 0x00	; 0
    4e70:	8b 81       	ldd	r24, Y+3	; 0x03
    4e72:	9c 81       	ldd	r25, Y+4	; 0x04
    4e74:	fc 01       	movw	r30, r24
    4e76:	e2 0f       	add	r30, r18
    4e78:	f3 1f       	adc	r31, r19
    4e7a:	80 81       	ld	r24, Z
    4e7c:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <H_LCD_void_sendData>
	u8 Local_u8CGramaddress=0;
	Local_u8CGramaddress = copy_u8charCode*8;
	/*Access CGRAM block using function Send command by setting bit 6 and clearing bit7*/
	H_LCD_void_sendCommand(Local_u8CGramaddress+64);
	/*write the pattern to the CG ram */
	for(Local_counter=0;Local_counter<8;Local_counter++) /*<8 since there are 8 memory locations only for cgram (64bytes)*/
    4e80:	8a 81       	ldd	r24, Y+2	; 0x02
    4e82:	8f 5f       	subi	r24, 0xFF	; 255
    4e84:	8a 83       	std	Y+2, r24	; 0x02
    4e86:	8a 81       	ldd	r24, Y+2	; 0x02
    4e88:	88 30       	cpi	r24, 0x08	; 8
    4e8a:	78 f3       	brcs	.-34     	; 0x4e6a <H_LCD_void_creatCustomChar+0x38>
	{
		H_LCD_void_sendData(ArrPattern[Local_counter]);
	}
	H_LCD_void_gotoXY(1,0);
    4e8c:	81 e0       	ldi	r24, 0x01	; 1
    4e8e:	60 e0       	ldi	r22, 0x00	; 0
    4e90:	0e 94 ed 26 	call	0x4dda	; 0x4dda <H_LCD_void_gotoXY>
	H_LCD_void_sendData(copy_u8charCode);
    4e94:	8d 81       	ldd	r24, Y+5	; 0x05
    4e96:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <H_LCD_void_sendData>

}
    4e9a:	0f 90       	pop	r0
    4e9c:	0f 90       	pop	r0
    4e9e:	0f 90       	pop	r0
    4ea0:	0f 90       	pop	r0
    4ea2:	0f 90       	pop	r0
    4ea4:	cf 91       	pop	r28
    4ea6:	df 91       	pop	r29
    4ea8:	08 95       	ret

00004eaa <H_LCD_void_displayCustomChar>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_displayCustomChar (u8 copy_u8charCode)
{
    4eaa:	df 93       	push	r29
    4eac:	cf 93       	push	r28
    4eae:	0f 92       	push	r0
    4eb0:	cd b7       	in	r28, 0x3d	; 61
    4eb2:	de b7       	in	r29, 0x3e	; 62
    4eb4:	89 83       	std	Y+1, r24	; 0x01
	/*give the custom char number to send data*/
	H_LCD_void_sendData(copy_u8charCode);
    4eb6:	89 81       	ldd	r24, Y+1	; 0x01
    4eb8:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <H_LCD_void_sendData>
}
    4ebc:	0f 90       	pop	r0
    4ebe:	cf 91       	pop	r28
    4ec0:	df 91       	pop	r29
    4ec2:	08 95       	ret

00004ec4 <H_LCD_void_ClearDisplay>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_ClearDisplay(void)
{
    4ec4:	df 93       	push	r29
    4ec6:	cf 93       	push	r28
    4ec8:	cd b7       	in	r28, 0x3d	; 61
    4eca:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_sendCommand(CLCD_CLEAR);
    4ecc:	81 e0       	ldi	r24, 0x01	; 1
    4ece:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <H_LCD_void_sendCommand>
}
    4ed2:	cf 91       	pop	r28
    4ed4:	df 91       	pop	r29
    4ed6:	08 95       	ret

00004ed8 <APP_Init>:


extern const Port_ConfigType PORT_Config_Arr[PORT_PINS_CONFIG_ARR_SIZE];

void APP_Init(void)
{
    4ed8:	df 93       	push	r29
    4eda:	cf 93       	push	r28
    4edc:	cd b7       	in	r28, 0x3d	; 61
    4ede:	de b7       	in	r29, 0x3e	; 62
	Port_Init(PORT_Config_Arr);
    4ee0:	89 e0       	ldi	r24, 0x09	; 9
    4ee2:	92 e0       	ldi	r25, 0x02	; 2
    4ee4:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <Port_Init>
	H_LCD_void_Init();
    4ee8:	0e 94 8d 23 	call	0x471a	; 0x471a <H_LCD_void_Init>
	H_Temprature_void_Init();
    4eec:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <H_Temprature_void_Init>
}
    4ef0:	cf 91       	pop	r28
    4ef2:	df 91       	pop	r29
    4ef4:	08 95       	ret

00004ef6 <APP_Start>:

void APP_Start(void)
{
    4ef6:	df 93       	push	r29
    4ef8:	cf 93       	push	r28
    4efa:	00 d0       	rcall	.+0      	; 0x4efc <APP_Start+0x6>
    4efc:	cd b7       	in	r28, 0x3d	; 61
    4efe:	de b7       	in	r29, 0x3e	; 62
	u16 Temp_value=0;
    4f00:	1a 82       	std	Y+2, r1	; 0x02
    4f02:	19 82       	std	Y+1, r1	; 0x01
	Temp_value=H_Temprature_u16_Read();
    4f04:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <H_Temprature_u16_Read>
    4f08:	9a 83       	std	Y+2, r25	; 0x02
    4f0a:	89 83       	std	Y+1, r24	; 0x01
	if(Temp_value<25)
    4f0c:	89 81       	ldd	r24, Y+1	; 0x01
    4f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    4f10:	89 31       	cpi	r24, 0x19	; 25
    4f12:	91 05       	cpc	r25, r1
    4f14:	d0 f4       	brcc	.+52     	; 0x4f4a <APP_Start+0x54>
	{
		H_LCD_void_ClearDisplay();
    4f16:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <H_LCD_void_ClearDisplay>
		H_LCD_void_sendString("Temperature:");
    4f1a:	80 e6       	ldi	r24, 0x60	; 96
    4f1c:	90 e0       	ldi	r25, 0x00	; 0
    4f1e:	0e 94 28 26 	call	0x4c50	; 0x4c50 <H_LCD_void_sendString>
		H_LCD_void_sendIntNum(Temp_value);
    4f22:	89 81       	ldd	r24, Y+1	; 0x01
    4f24:	9a 81       	ldd	r25, Y+2	; 0x02
    4f26:	cc 01       	movw	r24, r24
    4f28:	a0 e0       	ldi	r26, 0x00	; 0
    4f2a:	b0 e0       	ldi	r27, 0x00	; 0
    4f2c:	bc 01       	movw	r22, r24
    4f2e:	cd 01       	movw	r24, r26
    4f30:	0e 94 51 26 	call	0x4ca2	; 0x4ca2 <H_LCD_void_sendIntNum>
		H_DC_MOTOR_STOP();
    4f34:	0e 94 b9 21 	call	0x4372	; 0x4372 <H_DC_MOTOR_STOP>
		H_LCD_void_gotoXY(2,0);
    4f38:	82 e0       	ldi	r24, 0x02	; 2
    4f3a:	60 e0       	ldi	r22, 0x00	; 0
    4f3c:	0e 94 ed 26 	call	0x4dda	; 0x4dda <H_LCD_void_gotoXY>
		H_LCD_void_sendString("Fan OFF");
    4f40:	8d e6       	ldi	r24, 0x6D	; 109
    4f42:	90 e0       	ldi	r25, 0x00	; 0
    4f44:	0e 94 28 26 	call	0x4c50	; 0x4c50 <H_LCD_void_sendString>
    4f48:	4e c0       	rjmp	.+156    	; 0x4fe6 <APP_Start+0xf0>
	}
	else if(Temp_value>25 && Temp_value <35)
    4f4a:	89 81       	ldd	r24, Y+1	; 0x01
    4f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    4f4e:	8a 31       	cpi	r24, 0x1A	; 26
    4f50:	91 05       	cpc	r25, r1
    4f52:	28 f1       	brcs	.+74     	; 0x4f9e <APP_Start+0xa8>
    4f54:	89 81       	ldd	r24, Y+1	; 0x01
    4f56:	9a 81       	ldd	r25, Y+2	; 0x02
    4f58:	83 32       	cpi	r24, 0x23	; 35
    4f5a:	91 05       	cpc	r25, r1
    4f5c:	00 f5       	brcc	.+64     	; 0x4f9e <APP_Start+0xa8>
	{
		H_LCD_void_ClearDisplay();
    4f5e:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <H_LCD_void_ClearDisplay>
		H_LCD_void_sendString("Temperature:");
    4f62:	80 e6       	ldi	r24, 0x60	; 96
    4f64:	90 e0       	ldi	r25, 0x00	; 0
    4f66:	0e 94 28 26 	call	0x4c50	; 0x4c50 <H_LCD_void_sendString>
		H_LCD_void_sendIntNum(Temp_value);
    4f6a:	89 81       	ldd	r24, Y+1	; 0x01
    4f6c:	9a 81       	ldd	r25, Y+2	; 0x02
    4f6e:	cc 01       	movw	r24, r24
    4f70:	a0 e0       	ldi	r26, 0x00	; 0
    4f72:	b0 e0       	ldi	r27, 0x00	; 0
    4f74:	bc 01       	movw	r22, r24
    4f76:	cd 01       	movw	r24, r26
    4f78:	0e 94 51 26 	call	0x4ca2	; 0x4ca2 <H_LCD_void_sendIntNum>
		H_DC_MOTOR_START(500,50,FORWARD_DIRECTION);
    4f7c:	64 ef       	ldi	r22, 0xF4	; 244
    4f7e:	71 e0       	ldi	r23, 0x01	; 1
    4f80:	80 e0       	ldi	r24, 0x00	; 0
    4f82:	90 e0       	ldi	r25, 0x00	; 0
    4f84:	42 e3       	ldi	r20, 0x32	; 50
    4f86:	21 e0       	ldi	r18, 0x01	; 1
    4f88:	0e 94 71 21 	call	0x42e2	; 0x42e2 <H_DC_MOTOR_START>
		H_LCD_void_gotoXY(2,0);
    4f8c:	82 e0       	ldi	r24, 0x02	; 2
    4f8e:	60 e0       	ldi	r22, 0x00	; 0
    4f90:	0e 94 ed 26 	call	0x4dda	; 0x4dda <H_LCD_void_gotoXY>
		H_LCD_void_sendString("FAN ON:DUTY 50%");
    4f94:	85 e7       	ldi	r24, 0x75	; 117
    4f96:	90 e0       	ldi	r25, 0x00	; 0
    4f98:	0e 94 28 26 	call	0x4c50	; 0x4c50 <H_LCD_void_sendString>
    4f9c:	24 c0       	rjmp	.+72     	; 0x4fe6 <APP_Start+0xf0>
	}
	else if(Temp_value>35)
    4f9e:	89 81       	ldd	r24, Y+1	; 0x01
    4fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    4fa2:	84 32       	cpi	r24, 0x24	; 36
    4fa4:	91 05       	cpc	r25, r1
    4fa6:	f8 f0       	brcs	.+62     	; 0x4fe6 <APP_Start+0xf0>
	{
		H_LCD_void_ClearDisplay();
    4fa8:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <H_LCD_void_ClearDisplay>
		H_LCD_void_sendString("Temperature:");
    4fac:	80 e6       	ldi	r24, 0x60	; 96
    4fae:	90 e0       	ldi	r25, 0x00	; 0
    4fb0:	0e 94 28 26 	call	0x4c50	; 0x4c50 <H_LCD_void_sendString>
		H_LCD_void_sendIntNum(Temp_value);
    4fb4:	89 81       	ldd	r24, Y+1	; 0x01
    4fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    4fb8:	cc 01       	movw	r24, r24
    4fba:	a0 e0       	ldi	r26, 0x00	; 0
    4fbc:	b0 e0       	ldi	r27, 0x00	; 0
    4fbe:	bc 01       	movw	r22, r24
    4fc0:	cd 01       	movw	r24, r26
    4fc2:	0e 94 51 26 	call	0x4ca2	; 0x4ca2 <H_LCD_void_sendIntNum>
		H_DC_MOTOR_START(100,80,FORWARD_DIRECTION);
    4fc6:	64 e6       	ldi	r22, 0x64	; 100
    4fc8:	70 e0       	ldi	r23, 0x00	; 0
    4fca:	80 e0       	ldi	r24, 0x00	; 0
    4fcc:	90 e0       	ldi	r25, 0x00	; 0
    4fce:	40 e5       	ldi	r20, 0x50	; 80
    4fd0:	21 e0       	ldi	r18, 0x01	; 1
    4fd2:	0e 94 71 21 	call	0x42e2	; 0x42e2 <H_DC_MOTOR_START>
		H_LCD_void_gotoXY(2,0);
    4fd6:	82 e0       	ldi	r24, 0x02	; 2
    4fd8:	60 e0       	ldi	r22, 0x00	; 0
    4fda:	0e 94 ed 26 	call	0x4dda	; 0x4dda <H_LCD_void_gotoXY>
		H_LCD_void_sendString("FAN ON:DUTY 80%");
    4fde:	85 e8       	ldi	r24, 0x85	; 133
    4fe0:	90 e0       	ldi	r25, 0x00	; 0
    4fe2:	0e 94 28 26 	call	0x4c50	; 0x4c50 <H_LCD_void_sendString>
	}

}
    4fe6:	0f 90       	pop	r0
    4fe8:	0f 90       	pop	r0
    4fea:	cf 91       	pop	r28
    4fec:	df 91       	pop	r29
    4fee:	08 95       	ret

00004ff0 <main>:
#include<util/delay.h>



int main(void)
{
    4ff0:	df 93       	push	r29
    4ff2:	cf 93       	push	r28
    4ff4:	cd b7       	in	r28, 0x3d	; 61
    4ff6:	de b7       	in	r29, 0x3e	; 62
    4ff8:	2e 97       	sbiw	r28, 0x0e	; 14
    4ffa:	0f b6       	in	r0, 0x3f	; 63
    4ffc:	f8 94       	cli
    4ffe:	de bf       	out	0x3e, r29	; 62
    5000:	0f be       	out	0x3f, r0	; 63
    5002:	cd bf       	out	0x3d, r28	; 61
	APP_Init();
    5004:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <APP_Init>
	while(1)
	{
		APP_Start();
    5008:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <APP_Start>
    500c:	80 e0       	ldi	r24, 0x00	; 0
    500e:	90 e4       	ldi	r25, 0x40	; 64
    5010:	ac e9       	ldi	r26, 0x9C	; 156
    5012:	b5 e4       	ldi	r27, 0x45	; 69
    5014:	8b 87       	std	Y+11, r24	; 0x0b
    5016:	9c 87       	std	Y+12, r25	; 0x0c
    5018:	ad 87       	std	Y+13, r26	; 0x0d
    501a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    501c:	6b 85       	ldd	r22, Y+11	; 0x0b
    501e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5020:	8d 85       	ldd	r24, Y+13	; 0x0d
    5022:	9e 85       	ldd	r25, Y+14	; 0x0e
    5024:	20 e0       	ldi	r18, 0x00	; 0
    5026:	30 e0       	ldi	r19, 0x00	; 0
    5028:	4a e7       	ldi	r20, 0x7A	; 122
    502a:	55 e4       	ldi	r21, 0x45	; 69
    502c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5030:	dc 01       	movw	r26, r24
    5032:	cb 01       	movw	r24, r22
    5034:	8f 83       	std	Y+7, r24	; 0x07
    5036:	98 87       	std	Y+8, r25	; 0x08
    5038:	a9 87       	std	Y+9, r26	; 0x09
    503a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    503c:	6f 81       	ldd	r22, Y+7	; 0x07
    503e:	78 85       	ldd	r23, Y+8	; 0x08
    5040:	89 85       	ldd	r24, Y+9	; 0x09
    5042:	9a 85       	ldd	r25, Y+10	; 0x0a
    5044:	20 e0       	ldi	r18, 0x00	; 0
    5046:	30 e0       	ldi	r19, 0x00	; 0
    5048:	40 e8       	ldi	r20, 0x80	; 128
    504a:	5f e3       	ldi	r21, 0x3F	; 63
    504c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5050:	88 23       	and	r24, r24
    5052:	2c f4       	brge	.+10     	; 0x505e <main+0x6e>
		__ticks = 1;
    5054:	81 e0       	ldi	r24, 0x01	; 1
    5056:	90 e0       	ldi	r25, 0x00	; 0
    5058:	9e 83       	std	Y+6, r25	; 0x06
    505a:	8d 83       	std	Y+5, r24	; 0x05
    505c:	3f c0       	rjmp	.+126    	; 0x50dc <main+0xec>
	else if (__tmp > 65535)
    505e:	6f 81       	ldd	r22, Y+7	; 0x07
    5060:	78 85       	ldd	r23, Y+8	; 0x08
    5062:	89 85       	ldd	r24, Y+9	; 0x09
    5064:	9a 85       	ldd	r25, Y+10	; 0x0a
    5066:	20 e0       	ldi	r18, 0x00	; 0
    5068:	3f ef       	ldi	r19, 0xFF	; 255
    506a:	4f e7       	ldi	r20, 0x7F	; 127
    506c:	57 e4       	ldi	r21, 0x47	; 71
    506e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5072:	18 16       	cp	r1, r24
    5074:	4c f5       	brge	.+82     	; 0x50c8 <main+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5076:	6b 85       	ldd	r22, Y+11	; 0x0b
    5078:	7c 85       	ldd	r23, Y+12	; 0x0c
    507a:	8d 85       	ldd	r24, Y+13	; 0x0d
    507c:	9e 85       	ldd	r25, Y+14	; 0x0e
    507e:	20 e0       	ldi	r18, 0x00	; 0
    5080:	30 e0       	ldi	r19, 0x00	; 0
    5082:	40 e2       	ldi	r20, 0x20	; 32
    5084:	51 e4       	ldi	r21, 0x41	; 65
    5086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    508a:	dc 01       	movw	r26, r24
    508c:	cb 01       	movw	r24, r22
    508e:	bc 01       	movw	r22, r24
    5090:	cd 01       	movw	r24, r26
    5092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5096:	dc 01       	movw	r26, r24
    5098:	cb 01       	movw	r24, r22
    509a:	9e 83       	std	Y+6, r25	; 0x06
    509c:	8d 83       	std	Y+5, r24	; 0x05
    509e:	0f c0       	rjmp	.+30     	; 0x50be <main+0xce>
    50a0:	80 e9       	ldi	r24, 0x90	; 144
    50a2:	91 e0       	ldi	r25, 0x01	; 1
    50a4:	9c 83       	std	Y+4, r25	; 0x04
    50a6:	8b 83       	std	Y+3, r24	; 0x03
    50a8:	8b 81       	ldd	r24, Y+3	; 0x03
    50aa:	9c 81       	ldd	r25, Y+4	; 0x04
    50ac:	01 97       	sbiw	r24, 0x01	; 1
    50ae:	f1 f7       	brne	.-4      	; 0x50ac <main+0xbc>
    50b0:	9c 83       	std	Y+4, r25	; 0x04
    50b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50b4:	8d 81       	ldd	r24, Y+5	; 0x05
    50b6:	9e 81       	ldd	r25, Y+6	; 0x06
    50b8:	01 97       	sbiw	r24, 0x01	; 1
    50ba:	9e 83       	std	Y+6, r25	; 0x06
    50bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50be:	8d 81       	ldd	r24, Y+5	; 0x05
    50c0:	9e 81       	ldd	r25, Y+6	; 0x06
    50c2:	00 97       	sbiw	r24, 0x00	; 0
    50c4:	69 f7       	brne	.-38     	; 0x50a0 <main+0xb0>
    50c6:	a0 cf       	rjmp	.-192    	; 0x5008 <main+0x18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50c8:	6f 81       	ldd	r22, Y+7	; 0x07
    50ca:	78 85       	ldd	r23, Y+8	; 0x08
    50cc:	89 85       	ldd	r24, Y+9	; 0x09
    50ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    50d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50d4:	dc 01       	movw	r26, r24
    50d6:	cb 01       	movw	r24, r22
    50d8:	9e 83       	std	Y+6, r25	; 0x06
    50da:	8d 83       	std	Y+5, r24	; 0x05
    50dc:	8d 81       	ldd	r24, Y+5	; 0x05
    50de:	9e 81       	ldd	r25, Y+6	; 0x06
    50e0:	9a 83       	std	Y+2, r25	; 0x02
    50e2:	89 83       	std	Y+1, r24	; 0x01
    50e4:	89 81       	ldd	r24, Y+1	; 0x01
    50e6:	9a 81       	ldd	r25, Y+2	; 0x02
    50e8:	01 97       	sbiw	r24, 0x01	; 1
    50ea:	f1 f7       	brne	.-4      	; 0x50e8 <main+0xf8>
    50ec:	9a 83       	std	Y+2, r25	; 0x02
    50ee:	89 83       	std	Y+1, r24	; 0x01
    50f0:	8b cf       	rjmp	.-234    	; 0x5008 <main+0x18>

000050f2 <__mulsi3>:
    50f2:	62 9f       	mul	r22, r18
    50f4:	d0 01       	movw	r26, r0
    50f6:	73 9f       	mul	r23, r19
    50f8:	f0 01       	movw	r30, r0
    50fa:	82 9f       	mul	r24, r18
    50fc:	e0 0d       	add	r30, r0
    50fe:	f1 1d       	adc	r31, r1
    5100:	64 9f       	mul	r22, r20
    5102:	e0 0d       	add	r30, r0
    5104:	f1 1d       	adc	r31, r1
    5106:	92 9f       	mul	r25, r18
    5108:	f0 0d       	add	r31, r0
    510a:	83 9f       	mul	r24, r19
    510c:	f0 0d       	add	r31, r0
    510e:	74 9f       	mul	r23, r20
    5110:	f0 0d       	add	r31, r0
    5112:	65 9f       	mul	r22, r21
    5114:	f0 0d       	add	r31, r0
    5116:	99 27       	eor	r25, r25
    5118:	72 9f       	mul	r23, r18
    511a:	b0 0d       	add	r27, r0
    511c:	e1 1d       	adc	r30, r1
    511e:	f9 1f       	adc	r31, r25
    5120:	63 9f       	mul	r22, r19
    5122:	b0 0d       	add	r27, r0
    5124:	e1 1d       	adc	r30, r1
    5126:	f9 1f       	adc	r31, r25
    5128:	bd 01       	movw	r22, r26
    512a:	cf 01       	movw	r24, r30
    512c:	11 24       	eor	r1, r1
    512e:	08 95       	ret

00005130 <__udivmodqi4>:
    5130:	99 1b       	sub	r25, r25
    5132:	79 e0       	ldi	r23, 0x09	; 9
    5134:	04 c0       	rjmp	.+8      	; 0x513e <__udivmodqi4_ep>

00005136 <__udivmodqi4_loop>:
    5136:	99 1f       	adc	r25, r25
    5138:	96 17       	cp	r25, r22
    513a:	08 f0       	brcs	.+2      	; 0x513e <__udivmodqi4_ep>
    513c:	96 1b       	sub	r25, r22

0000513e <__udivmodqi4_ep>:
    513e:	88 1f       	adc	r24, r24
    5140:	7a 95       	dec	r23
    5142:	c9 f7       	brne	.-14     	; 0x5136 <__udivmodqi4_loop>
    5144:	80 95       	com	r24
    5146:	08 95       	ret

00005148 <__udivmodhi4>:
    5148:	aa 1b       	sub	r26, r26
    514a:	bb 1b       	sub	r27, r27
    514c:	51 e1       	ldi	r21, 0x11	; 17
    514e:	07 c0       	rjmp	.+14     	; 0x515e <__udivmodhi4_ep>

00005150 <__udivmodhi4_loop>:
    5150:	aa 1f       	adc	r26, r26
    5152:	bb 1f       	adc	r27, r27
    5154:	a6 17       	cp	r26, r22
    5156:	b7 07       	cpc	r27, r23
    5158:	10 f0       	brcs	.+4      	; 0x515e <__udivmodhi4_ep>
    515a:	a6 1b       	sub	r26, r22
    515c:	b7 0b       	sbc	r27, r23

0000515e <__udivmodhi4_ep>:
    515e:	88 1f       	adc	r24, r24
    5160:	99 1f       	adc	r25, r25
    5162:	5a 95       	dec	r21
    5164:	a9 f7       	brne	.-22     	; 0x5150 <__udivmodhi4_loop>
    5166:	80 95       	com	r24
    5168:	90 95       	com	r25
    516a:	bc 01       	movw	r22, r24
    516c:	cd 01       	movw	r24, r26
    516e:	08 95       	ret

00005170 <__udivmodsi4>:
    5170:	a1 e2       	ldi	r26, 0x21	; 33
    5172:	1a 2e       	mov	r1, r26
    5174:	aa 1b       	sub	r26, r26
    5176:	bb 1b       	sub	r27, r27
    5178:	fd 01       	movw	r30, r26
    517a:	0d c0       	rjmp	.+26     	; 0x5196 <__udivmodsi4_ep>

0000517c <__udivmodsi4_loop>:
    517c:	aa 1f       	adc	r26, r26
    517e:	bb 1f       	adc	r27, r27
    5180:	ee 1f       	adc	r30, r30
    5182:	ff 1f       	adc	r31, r31
    5184:	a2 17       	cp	r26, r18
    5186:	b3 07       	cpc	r27, r19
    5188:	e4 07       	cpc	r30, r20
    518a:	f5 07       	cpc	r31, r21
    518c:	20 f0       	brcs	.+8      	; 0x5196 <__udivmodsi4_ep>
    518e:	a2 1b       	sub	r26, r18
    5190:	b3 0b       	sbc	r27, r19
    5192:	e4 0b       	sbc	r30, r20
    5194:	f5 0b       	sbc	r31, r21

00005196 <__udivmodsi4_ep>:
    5196:	66 1f       	adc	r22, r22
    5198:	77 1f       	adc	r23, r23
    519a:	88 1f       	adc	r24, r24
    519c:	99 1f       	adc	r25, r25
    519e:	1a 94       	dec	r1
    51a0:	69 f7       	brne	.-38     	; 0x517c <__udivmodsi4_loop>
    51a2:	60 95       	com	r22
    51a4:	70 95       	com	r23
    51a6:	80 95       	com	r24
    51a8:	90 95       	com	r25
    51aa:	9b 01       	movw	r18, r22
    51ac:	ac 01       	movw	r20, r24
    51ae:	bd 01       	movw	r22, r26
    51b0:	cf 01       	movw	r24, r30
    51b2:	08 95       	ret

000051b4 <__divmodsi4>:
    51b4:	97 fb       	bst	r25, 7
    51b6:	09 2e       	mov	r0, r25
    51b8:	05 26       	eor	r0, r21
    51ba:	0e d0       	rcall	.+28     	; 0x51d8 <__divmodsi4_neg1>
    51bc:	57 fd       	sbrc	r21, 7
    51be:	04 d0       	rcall	.+8      	; 0x51c8 <__divmodsi4_neg2>
    51c0:	d7 df       	rcall	.-82     	; 0x5170 <__udivmodsi4>
    51c2:	0a d0       	rcall	.+20     	; 0x51d8 <__divmodsi4_neg1>
    51c4:	00 1c       	adc	r0, r0
    51c6:	38 f4       	brcc	.+14     	; 0x51d6 <__divmodsi4_exit>

000051c8 <__divmodsi4_neg2>:
    51c8:	50 95       	com	r21
    51ca:	40 95       	com	r20
    51cc:	30 95       	com	r19
    51ce:	21 95       	neg	r18
    51d0:	3f 4f       	sbci	r19, 0xFF	; 255
    51d2:	4f 4f       	sbci	r20, 0xFF	; 255
    51d4:	5f 4f       	sbci	r21, 0xFF	; 255

000051d6 <__divmodsi4_exit>:
    51d6:	08 95       	ret

000051d8 <__divmodsi4_neg1>:
    51d8:	f6 f7       	brtc	.-4      	; 0x51d6 <__divmodsi4_exit>
    51da:	90 95       	com	r25
    51dc:	80 95       	com	r24
    51de:	70 95       	com	r23
    51e0:	61 95       	neg	r22
    51e2:	7f 4f       	sbci	r23, 0xFF	; 255
    51e4:	8f 4f       	sbci	r24, 0xFF	; 255
    51e6:	9f 4f       	sbci	r25, 0xFF	; 255
    51e8:	08 95       	ret

000051ea <__prologue_saves__>:
    51ea:	2f 92       	push	r2
    51ec:	3f 92       	push	r3
    51ee:	4f 92       	push	r4
    51f0:	5f 92       	push	r5
    51f2:	6f 92       	push	r6
    51f4:	7f 92       	push	r7
    51f6:	8f 92       	push	r8
    51f8:	9f 92       	push	r9
    51fa:	af 92       	push	r10
    51fc:	bf 92       	push	r11
    51fe:	cf 92       	push	r12
    5200:	df 92       	push	r13
    5202:	ef 92       	push	r14
    5204:	ff 92       	push	r15
    5206:	0f 93       	push	r16
    5208:	1f 93       	push	r17
    520a:	cf 93       	push	r28
    520c:	df 93       	push	r29
    520e:	cd b7       	in	r28, 0x3d	; 61
    5210:	de b7       	in	r29, 0x3e	; 62
    5212:	ca 1b       	sub	r28, r26
    5214:	db 0b       	sbc	r29, r27
    5216:	0f b6       	in	r0, 0x3f	; 63
    5218:	f8 94       	cli
    521a:	de bf       	out	0x3e, r29	; 62
    521c:	0f be       	out	0x3f, r0	; 63
    521e:	cd bf       	out	0x3d, r28	; 61
    5220:	09 94       	ijmp

00005222 <__epilogue_restores__>:
    5222:	2a 88       	ldd	r2, Y+18	; 0x12
    5224:	39 88       	ldd	r3, Y+17	; 0x11
    5226:	48 88       	ldd	r4, Y+16	; 0x10
    5228:	5f 84       	ldd	r5, Y+15	; 0x0f
    522a:	6e 84       	ldd	r6, Y+14	; 0x0e
    522c:	7d 84       	ldd	r7, Y+13	; 0x0d
    522e:	8c 84       	ldd	r8, Y+12	; 0x0c
    5230:	9b 84       	ldd	r9, Y+11	; 0x0b
    5232:	aa 84       	ldd	r10, Y+10	; 0x0a
    5234:	b9 84       	ldd	r11, Y+9	; 0x09
    5236:	c8 84       	ldd	r12, Y+8	; 0x08
    5238:	df 80       	ldd	r13, Y+7	; 0x07
    523a:	ee 80       	ldd	r14, Y+6	; 0x06
    523c:	fd 80       	ldd	r15, Y+5	; 0x05
    523e:	0c 81       	ldd	r16, Y+4	; 0x04
    5240:	1b 81       	ldd	r17, Y+3	; 0x03
    5242:	aa 81       	ldd	r26, Y+2	; 0x02
    5244:	b9 81       	ldd	r27, Y+1	; 0x01
    5246:	ce 0f       	add	r28, r30
    5248:	d1 1d       	adc	r29, r1
    524a:	0f b6       	in	r0, 0x3f	; 63
    524c:	f8 94       	cli
    524e:	de bf       	out	0x3e, r29	; 62
    5250:	0f be       	out	0x3f, r0	; 63
    5252:	cd bf       	out	0x3d, r28	; 61
    5254:	ed 01       	movw	r28, r26
    5256:	08 95       	ret

00005258 <_exit>:
    5258:	f8 94       	cli

0000525a <__stop_program>:
    525a:	ff cf       	rjmp	.-2      	; 0x525a <__stop_program>
