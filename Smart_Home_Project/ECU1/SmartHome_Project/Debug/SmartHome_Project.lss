
SmartHome_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005e3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003a2  00800060  00005e3e  00005ed2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  00800402  00800402  00006274  2**0
                  ALLOC
  3 .stab         00007620  00000000  00000000  00006274  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000048f4  00000000  00000000  0000d894  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00012188  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000122c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00012438  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00014081  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00014f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00015d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00015e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00016109  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000168d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e3       	ldi	r30, 0x3E	; 62
      68:	fe e5       	ldi	r31, 0x5E	; 94
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 30       	cpi	r26, 0x02	; 2
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a2 e0       	ldi	r26, 0x02	; 2
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 32       	cpi	r26, 0x26	; 38
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <main>
      8a:	0c 94 1d 2f 	jmp	0x5e3a	; 0x5e3a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e6 2e 	jmp	0x5dcc	; 0x5dcc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e5       	ldi	r26, 0x5E	; 94
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 02 2f 	jmp	0x5e04	; 0x5e04 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f2 2e 	jmp	0x5de4	; 0x5de4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0e 2f 	jmp	0x5e1c	; 0x5e1c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f2 2e 	jmp	0x5de4	; 0x5de4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0e 2f 	jmp	0x5e1c	; 0x5e1c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e6 2e 	jmp	0x5dcc	; 0x5dcc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e5       	ldi	r24, 0x5E	; 94
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 02 2f 	jmp	0x5e04	; 0x5e04 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f2 2e 	jmp	0x5de4	; 0x5de4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0e 2f 	jmp	0x5e1c	; 0x5e1c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f2 2e 	jmp	0x5de4	; 0x5de4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0e 2f 	jmp	0x5e1c	; 0x5e1c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f2 2e 	jmp	0x5de4	; 0x5de4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0e 2f 	jmp	0x5e1c	; 0x5e1c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f6 2e 	jmp	0x5dec	; 0x5dec <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 12 2f 	jmp	0x5e24	; 0x5e24 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_Init>:
#include<util/delay.h>

static void (*USART_PTR_FUNC)(void) =NULL;

void UART_Init(UART_CONFIG *Ptr_Copy_UART)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2b 97       	sbiw	r28, 0x0b	; 11
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9b 83       	std	Y+3, r25	; 0x03
     b5c:	8a 83       	std	Y+2, r24	; 0x02
	/*u8 variable to carry the values of UCSRC Register*/
	u8 Local_UCSRC=0;
     b5e:	19 82       	std	Y+1, r1	; 0x01

	/*Select Asynchronous mode*/
	Local_UCSRC &= UCSRC_UMSEL_ASYNCH_MASK_Clear;
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	8f 7b       	andi	r24, 0xBF	; 191
     b64:	89 83       	std	Y+1, r24	; 0x01
	/*Clear UCPOL bit in UCSRC*/
	Local_UCSRC &= UCSRC_UCPOL_CLEAR_MASK;
     b66:	89 81       	ldd	r24, Y+1	; 0x01
     b68:	8e 7f       	andi	r24, 0xFE	; 254
     b6a:	89 83       	std	Y+1, r24	; 0x01
	switch(Ptr_Copy_UART->Baud_NO)
     b6c:	ea 81       	ldd	r30, Y+2	; 0x02
     b6e:	fb 81       	ldd	r31, Y+3	; 0x03
     b70:	20 81       	ld	r18, Z
     b72:	31 81       	ldd	r19, Z+1	; 0x01
     b74:	3b 87       	std	Y+11, r19	; 0x0b
     b76:	2a 87       	std	Y+10, r18	; 0x0a
     b78:	8a 85       	ldd	r24, Y+10	; 0x0a
     b7a:	9b 85       	ldd	r25, Y+11	; 0x0b
     b7c:	87 36       	cpi	r24, 0x67	; 103
     b7e:	91 05       	cpc	r25, r1
     b80:	a9 f0       	breq	.+42     	; 0xbac <UART_Init+0x66>
     b82:	2a 85       	ldd	r18, Y+10	; 0x0a
     b84:	3b 85       	ldd	r19, Y+11	; 0x0b
     b86:	28 36       	cpi	r18, 0x68	; 104
     b88:	31 05       	cpc	r19, r1
     b8a:	30 f4       	brcc	.+12     	; 0xb98 <UART_Init+0x52>
     b8c:	8a 85       	ldd	r24, Y+10	; 0x0a
     b8e:	9b 85       	ldd	r25, Y+11	; 0x0b
     b90:	80 31       	cpi	r24, 0x10	; 16
     b92:	91 05       	cpc	r25, r1
     b94:	81 f0       	breq	.+32     	; 0xbb6 <UART_Init+0x70>
     b96:	13 c0       	rjmp	.+38     	; 0xbbe <UART_Init+0x78>
     b98:	2a 85       	ldd	r18, Y+10	; 0x0a
     b9a:	3b 85       	ldd	r19, Y+11	; 0x0b
     b9c:	2f 3c       	cpi	r18, 0xCF	; 207
     b9e:	31 05       	cpc	r19, r1
     ba0:	71 f4       	brne	.+28     	; 0xbbe <UART_Init+0x78>
	{
	case Baud_16MHz_2400:
		//UBBRL=Baud_16MHz_2400;
		break;
	case Baud_16MHz_4800:
		UBBRL= Baud_16MHz_4800;
     ba2:	e9 e2       	ldi	r30, 0x29	; 41
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	8f ec       	ldi	r24, 0xCF	; 207
     ba8:	80 83       	st	Z, r24
     baa:	09 c0       	rjmp	.+18     	; 0xbbe <UART_Init+0x78>
		break;
	case Baud_16MHz_9600:
		//UBBRL=Baud_16MHz_9600;
		UBBRL =8;
     bac:	e9 e2       	ldi	r30, 0x29	; 41
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	88 e0       	ldi	r24, 0x08	; 8
     bb2:	80 83       	st	Z, r24
     bb4:	04 c0       	rjmp	.+8      	; 0xbbe <UART_Init+0x78>
		break;
	case Baud_16MHz_57600:
		UBBRL= 16;
     bb6:	e9 e2       	ldi	r30, 0x29	; 41
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 e1       	ldi	r24, 0x10	; 16
     bbc:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
	switch(Ptr_Copy_UART->Word_size)
     bbe:	ea 81       	ldd	r30, Y+2	; 0x02
     bc0:	fb 81       	ldd	r31, Y+3	; 0x03
     bc2:	82 81       	ldd	r24, Z+2	; 0x02
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	39 87       	std	Y+9, r19	; 0x09
     bca:	28 87       	std	Y+8, r18	; 0x08
     bcc:	88 85       	ldd	r24, Y+8	; 0x08
     bce:	99 85       	ldd	r25, Y+9	; 0x09
     bd0:	82 30       	cpi	r24, 0x02	; 2
     bd2:	91 05       	cpc	r25, r1
     bd4:	b1 f1       	breq	.+108    	; 0xc42 <UART_Init+0xfc>
     bd6:	28 85       	ldd	r18, Y+8	; 0x08
     bd8:	39 85       	ldd	r19, Y+9	; 0x09
     bda:	23 30       	cpi	r18, 0x03	; 3
     bdc:	31 05       	cpc	r19, r1
     bde:	54 f4       	brge	.+20     	; 0xbf4 <UART_Init+0xae>
     be0:	88 85       	ldd	r24, Y+8	; 0x08
     be2:	99 85       	ldd	r25, Y+9	; 0x09
     be4:	00 97       	sbiw	r24, 0x00	; 0
     be6:	89 f0       	breq	.+34     	; 0xc0a <UART_Init+0xc4>
     be8:	28 85       	ldd	r18, Y+8	; 0x08
     bea:	39 85       	ldd	r19, Y+9	; 0x09
     bec:	21 30       	cpi	r18, 0x01	; 1
     bee:	31 05       	cpc	r19, r1
     bf0:	d1 f0       	breq	.+52     	; 0xc26 <UART_Init+0xe0>
     bf2:	50 c0       	rjmp	.+160    	; 0xc94 <UART_Init+0x14e>
     bf4:	88 85       	ldd	r24, Y+8	; 0x08
     bf6:	99 85       	ldd	r25, Y+9	; 0x09
     bf8:	83 30       	cpi	r24, 0x03	; 3
     bfa:	91 05       	cpc	r25, r1
     bfc:	81 f1       	breq	.+96     	; 0xc5e <UART_Init+0x118>
     bfe:	28 85       	ldd	r18, Y+8	; 0x08
     c00:	39 85       	ldd	r19, Y+9	; 0x09
     c02:	24 30       	cpi	r18, 0x04	; 4
     c04:	31 05       	cpc	r19, r1
     c06:	c9 f1       	breq	.+114    	; 0xc7a <UART_Init+0x134>
     c08:	45 c0       	rjmp	.+138    	; 0xc94 <UART_Init+0x14e>
	{
	case Word_Size_5:
		CLR_BIT(Local_UCSRC,UCSRC_UCSZ0);
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	8d 7f       	andi	r24, 0xFD	; 253
     c0e:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(Local_UCSRC,UCSRC_UCSZ1);
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	8b 7f       	andi	r24, 0xFB	; 251
     c14:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(UCSRB,UCSRB_UCSZ2);
     c16:	aa e2       	ldi	r26, 0x2A	; 42
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	ea e2       	ldi	r30, 0x2A	; 42
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	8b 7f       	andi	r24, 0xFB	; 251
     c22:	8c 93       	st	X, r24
     c24:	37 c0       	rjmp	.+110    	; 0xc94 <UART_Init+0x14e>
		break;
	case Word_Size_6:
		SET_BIT(Local_UCSRC,UCSRC_UCSZ0);
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	82 60       	ori	r24, 0x02	; 2
     c2a:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(Local_UCSRC,UCSRC_UCSZ1);
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	8b 7f       	andi	r24, 0xFB	; 251
     c30:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(UCSRB,UCSRB_UCSZ2);
     c32:	aa e2       	ldi	r26, 0x2A	; 42
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	ea e2       	ldi	r30, 0x2A	; 42
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	8b 7f       	andi	r24, 0xFB	; 251
     c3e:	8c 93       	st	X, r24
     c40:	29 c0       	rjmp	.+82     	; 0xc94 <UART_Init+0x14e>
		break;
	case Word_Size_7:
		CLR_BIT(Local_UCSRC,UCSRC_UCSZ0);
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	8d 7f       	andi	r24, 0xFD	; 253
     c46:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Local_UCSRC,UCSRC_UCSZ1);
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	84 60       	ori	r24, 0x04	; 4
     c4c:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(UCSRB,UCSRB_UCSZ2);
     c4e:	aa e2       	ldi	r26, 0x2A	; 42
     c50:	b0 e0       	ldi	r27, 0x00	; 0
     c52:	ea e2       	ldi	r30, 0x2A	; 42
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	8b 7f       	andi	r24, 0xFB	; 251
     c5a:	8c 93       	st	X, r24
     c5c:	1b c0       	rjmp	.+54     	; 0xc94 <UART_Init+0x14e>
		break;
	case Word_Size_8:
		SET_BIT(Local_UCSRC,UCSRC_UCSZ0);
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	82 60       	ori	r24, 0x02	; 2
     c62:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Local_UCSRC,UCSRC_UCSZ1);
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	84 60       	ori	r24, 0x04	; 4
     c68:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(UCSRB,UCSRB_UCSZ2);
     c6a:	aa e2       	ldi	r26, 0x2A	; 42
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	ea e2       	ldi	r30, 0x2A	; 42
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	8b 7f       	andi	r24, 0xFB	; 251
     c76:	8c 93       	st	X, r24
     c78:	0d c0       	rjmp	.+26     	; 0xc94 <UART_Init+0x14e>
		break;
	case Word_Size_9:
		SET_BIT(Local_UCSRC,UCSRC_UCSZ0);
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	82 60       	ori	r24, 0x02	; 2
     c7e:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Local_UCSRC,UCSRC_UCSZ1);
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	84 60       	ori	r24, 0x04	; 4
     c84:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(UCSRB,UCSRB_UCSZ2);
     c86:	aa e2       	ldi	r26, 0x2A	; 42
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	ea e2       	ldi	r30, 0x2A	; 42
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	84 60       	ori	r24, 0x04	; 4
     c92:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
	switch(Ptr_Copy_UART->Parity_type)
     c94:	ea 81       	ldd	r30, Y+2	; 0x02
     c96:	fb 81       	ldd	r31, Y+3	; 0x03
     c98:	83 81       	ldd	r24, Z+3	; 0x03
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	3f 83       	std	Y+7, r19	; 0x07
     ca0:	2e 83       	std	Y+6, r18	; 0x06
     ca2:	8e 81       	ldd	r24, Y+6	; 0x06
     ca4:	9f 81       	ldd	r25, Y+7	; 0x07
     ca6:	81 30       	cpi	r24, 0x01	; 1
     ca8:	91 05       	cpc	r25, r1
     caa:	69 f0       	breq	.+26     	; 0xcc6 <UART_Init+0x180>
     cac:	2e 81       	ldd	r18, Y+6	; 0x06
     cae:	3f 81       	ldd	r19, Y+7	; 0x07
     cb0:	22 30       	cpi	r18, 0x02	; 2
     cb2:	31 05       	cpc	r19, r1
     cb4:	79 f0       	breq	.+30     	; 0xcd4 <UART_Init+0x18e>
     cb6:	8e 81       	ldd	r24, Y+6	; 0x06
     cb8:	9f 81       	ldd	r25, Y+7	; 0x07
     cba:	00 97       	sbiw	r24, 0x00	; 0
     cbc:	89 f4       	brne	.+34     	; 0xce0 <UART_Init+0x19a>
	{
	case Disabled:
		Local_UCSRC &= PARITYBITS_MASK_CLEAR;
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	8f 7c       	andi	r24, 0xCF	; 207
     cc2:	89 83       	std	Y+1, r24	; 0x01
     cc4:	0d c0       	rjmp	.+26     	; 0xce0 <UART_Init+0x19a>
		break;
	case Enabled_Even_Parity:
		Local_UCSRC &= PARITYBITS_MASK_CLEAR;
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	8f 7c       	andi	r24, 0xCF	; 207
     cca:	89 83       	std	Y+1, r24	; 0x01
		Local_UCSRC |= PARITYBITS_EVEN_MASK_SET;
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	80 62       	ori	r24, 0x20	; 32
     cd0:	89 83       	std	Y+1, r24	; 0x01
     cd2:	06 c0       	rjmp	.+12     	; 0xce0 <UART_Init+0x19a>
		break;
	case Enabled_Odd_Parity:
		Local_UCSRC &= PARITYBITS_MASK_CLEAR;
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	8f 7c       	andi	r24, 0xCF	; 207
     cd8:	89 83       	std	Y+1, r24	; 0x01
		Local_UCSRC |= PARITYBITS_ODD_MASK_SET;
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	80 63       	ori	r24, 0x30	; 48
     cde:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	switch(Ptr_Copy_UART->Stop_bits_no)
     ce0:	ea 81       	ldd	r30, Y+2	; 0x02
     ce2:	fb 81       	ldd	r31, Y+3	; 0x03
     ce4:	84 81       	ldd	r24, Z+4	; 0x04
     ce6:	28 2f       	mov	r18, r24
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	3d 83       	std	Y+5, r19	; 0x05
     cec:	2c 83       	std	Y+4, r18	; 0x04
     cee:	8c 81       	ldd	r24, Y+4	; 0x04
     cf0:	9d 81       	ldd	r25, Y+5	; 0x05
     cf2:	00 97       	sbiw	r24, 0x00	; 0
     cf4:	31 f0       	breq	.+12     	; 0xd02 <UART_Init+0x1bc>
     cf6:	2c 81       	ldd	r18, Y+4	; 0x04
     cf8:	3d 81       	ldd	r19, Y+5	; 0x05
     cfa:	21 30       	cpi	r18, 0x01	; 1
     cfc:	31 05       	cpc	r19, r1
     cfe:	29 f0       	breq	.+10     	; 0xd0a <UART_Init+0x1c4>
     d00:	0a c0       	rjmp	.+20     	; 0xd16 <UART_Init+0x1d0>
	{
	case One_Stop_bit:
		Local_UCSRC &= STOP_BIT_CLEAR_1bit_MASK;
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	87 7f       	andi	r24, 0xF7	; 247
     d06:	89 83       	std	Y+1, r24	; 0x01
     d08:	06 c0       	rjmp	.+12     	; 0xd16 <UART_Init+0x1d0>
		break;
	case Two_Stop_Bit:
		Local_UCSRC &= STOP_BIT_CLEAR_1bit_MASK;
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
     d0c:	87 7f       	andi	r24, 0xF7	; 247
     d0e:	89 83       	std	Y+1, r24	; 0x01
		Local_UCSRC |= STOP_BIT_2bit_SET_MASK;
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	88 60       	ori	r24, 0x08	; 8
     d14:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	/*Set the selection bit to select UCSRC Register*/
	Local_UCSRC &= UCSRC_URSEL_REGSELECT_CLEAR;
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	8f 77       	andi	r24, 0x7F	; 127
     d1a:	89 83       	std	Y+1, r24	; 0x01
	Local_UCSRC |= UCSRC_URSEL_REGSELECT_SET;
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	80 68       	ori	r24, 0x80	; 128
     d20:	89 83       	std	Y+1, r24	; 0x01
	/*Set the UCSRC Register with the Local register*/
	UCSRC = Local_UCSRC;
     d22:	e0 e4       	ldi	r30, 0x40	; 64
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	89 81       	ldd	r24, Y+1	; 0x01
     d28:	80 83       	st	Z, r24
	//UBBRL = 51;
	//	UBBRH = Ptr_Copy_UART->Baud_NO >>8;


	/*Enable Transmitter*/
	SET_BIT(UCSRB,UCSRB_TXEN);
     d2a:	aa e2       	ldi	r26, 0x2A	; 42
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	ea e2       	ldi	r30, 0x2A	; 42
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	88 60       	ori	r24, 0x08	; 8
     d36:	8c 93       	st	X, r24
	/*Enable Receive interrupt*/
	SET_BIT(UCSRB,UCSRB_RXCIE);
     d38:	aa e2       	ldi	r26, 0x2A	; 42
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	ea e2       	ldi	r30, 0x2A	; 42
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	80 68       	ori	r24, 0x80	; 128
     d44:	8c 93       	st	X, r24
	/*Enable receiver*/
	SET_BIT(UCSRB,UCSRB_RXEN);
     d46:	aa e2       	ldi	r26, 0x2A	; 42
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	ea e2       	ldi	r30, 0x2A	; 42
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	80 61       	ori	r24, 0x10	; 16
     d52:	8c 93       	st	X, r24
}
     d54:	2b 96       	adiw	r28, 0x0b	; 11
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	de bf       	out	0x3e, r29	; 62
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	cd bf       	out	0x3d, r28	; 61
     d60:	cf 91       	pop	r28
     d62:	df 91       	pop	r29
     d64:	08 95       	ret

00000d66 <UART_SendByte>:


void UART_SendByte(u8 Copy_UART)
{
     d66:	df 93       	push	r29
     d68:	cf 93       	push	r28
     d6a:	0f 92       	push	r0
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	89 83       	std	Y+1, r24	; 0x01

	//u8 counter=0;
	/*WAIT until transmit buffer is empty*/
	while((GET_BIT(UCSRA,UCSRA_UDRE))==0);
     d72:	eb e2       	ldi	r30, 0x2B	; 43
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	82 95       	swap	r24
     d7a:	86 95       	lsr	r24
     d7c:	87 70       	andi	r24, 0x07	; 7
     d7e:	88 2f       	mov	r24, r24
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	81 70       	andi	r24, 0x01	; 1
     d84:	90 70       	andi	r25, 0x00	; 0
     d86:	00 97       	sbiw	r24, 0x00	; 0
     d88:	a1 f3       	breq	.-24     	; 0xd72 <UART_SendByte+0xc>
	UDR= Copy_UART;
     d8a:	ec e2       	ldi	r30, 0x2C	; 44
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	80 83       	st	Z, r24

}
     d92:	0f 90       	pop	r0
     d94:	cf 91       	pop	r28
     d96:	df 91       	pop	r29
     d98:	08 95       	ret

00000d9a <UART_SendString>:


void UART_SendString(u8 *Ptr_To_String)
{
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <UART_SendString+0x6>
     da0:	0f 92       	push	r0
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	9b 83       	std	Y+3, r25	; 0x03
     da8:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
     daa:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;Ptr_To_String[i] != '\0';i++)
     dac:	19 82       	std	Y+1, r1	; 0x01
     dae:	0e c0       	rjmp	.+28     	; 0xdcc <UART_SendString+0x32>
	{
		//_delay_ms(500);
		UART_SendByte(Ptr_To_String[i]);
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	9b 81       	ldd	r25, Y+3	; 0x03
     dba:	fc 01       	movw	r30, r24
     dbc:	e2 0f       	add	r30, r18
     dbe:	f3 1f       	adc	r31, r19
     dc0:	80 81       	ld	r24, Z
     dc2:	0e 94 b3 06 	call	0xd66	; 0xd66 <UART_SendByte>


void UART_SendString(u8 *Ptr_To_String)
{
	u8 i=0;
	for(i=0;Ptr_To_String[i] != '\0';i++)
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	8f 5f       	subi	r24, 0xFF	; 255
     dca:	89 83       	std	Y+1, r24	; 0x01
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	9b 81       	ldd	r25, Y+3	; 0x03
     dd6:	fc 01       	movw	r30, r24
     dd8:	e2 0f       	add	r30, r18
     dda:	f3 1f       	adc	r31, r19
     ddc:	80 81       	ld	r24, Z
     dde:	88 23       	and	r24, r24
     de0:	39 f7       	brne	.-50     	; 0xdb0 <UART_SendString+0x16>
	{
		//_delay_ms(500);
		UART_SendByte(Ptr_To_String[i]);
	}

}
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <UART_RecieveByteSynchNonBlocking>:
u8 UART_RecieveByteSynchNonBlocking(void)
{
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	0f 92       	push	r0
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62

	u8 counter=0;
     df8:	19 82       	std	Y+1, r1	; 0x01
	/*wait until receive is complete*/
	while((GET_BIT(UCSRA,UCSRA_RXC))==0 && counter <MAX_DELAY)
     dfa:	eb e2       	ldi	r30, 0x2B	; 43
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	88 23       	and	r24, r24
     e02:	24 f0       	brlt	.+8      	; 0xe0c <UART_RecieveByteSynchNonBlocking+0x1e>
	{
		counter++;
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	8f 5f       	subi	r24, 0xFF	; 255
     e08:	89 83       	std	Y+1, r24	; 0x01
     e0a:	f7 cf       	rjmp	.-18     	; 0xdfa <UART_RecieveByteSynchNonBlocking+0xc>
	}
	return UDR;
     e0c:	ec e2       	ldi	r30, 0x2C	; 44
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
}
     e12:	0f 90       	pop	r0
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	08 95       	ret

00000e1a <UART_RecieveByteASynchCallback>:
u8 UART_RecieveByteASynchCallback(void)
{
     e1a:	df 93       	push	r29
     e1c:	cf 93       	push	r28
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
	return UDR;
     e22:	ec e2       	ldi	r30, 0x2C	; 44
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z

}
     e28:	cf 91       	pop	r28
     e2a:	df 91       	pop	r29
     e2c:	08 95       	ret

00000e2e <UART_SetCallBack>:

u8 UART_SetCallBack(void (*Copy_pvINTFunc)(void))
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <UART_SetCallBack+0x6>
     e34:	0f 92       	push	r0
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9b 83       	std	Y+3, r25	; 0x03
     e3c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvINTFunc != NULL)
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	9b 81       	ldd	r25, Y+3	; 0x03
     e46:	00 97       	sbiw	r24, 0x00	; 0
     e48:	31 f0       	breq	.+12     	; 0xe56 <UART_SetCallBack+0x28>
	{
		USART_PTR_FUNC=Copy_pvINTFunc;
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	9b 81       	ldd	r25, Y+3	; 0x03
     e4e:	90 93 03 04 	sts	0x0403, r25
     e52:	80 93 02 04 	sts	0x0402, r24
	}

	return Local_u8ErrorStatus;
     e56:	89 81       	ldd	r24, Y+1	; 0x01
}
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <__vector_13>:
void __vector_13 (void)  __attribute__((signal));
void __vector_13 (void)
{
     e64:	1f 92       	push	r1
     e66:	0f 92       	push	r0
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	0f 92       	push	r0
     e6c:	11 24       	eor	r1, r1
     e6e:	2f 93       	push	r18
     e70:	3f 93       	push	r19
     e72:	4f 93       	push	r20
     e74:	5f 93       	push	r21
     e76:	6f 93       	push	r22
     e78:	7f 93       	push	r23
     e7a:	8f 93       	push	r24
     e7c:	9f 93       	push	r25
     e7e:	af 93       	push	r26
     e80:	bf 93       	push	r27
     e82:	ef 93       	push	r30
     e84:	ff 93       	push	r31
     e86:	df 93       	push	r29
     e88:	cf 93       	push	r28
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62

	if(USART_PTR_FUNC != NULL)
     e8e:	80 91 02 04 	lds	r24, 0x0402
     e92:	90 91 03 04 	lds	r25, 0x0403
     e96:	00 97       	sbiw	r24, 0x00	; 0
     e98:	29 f0       	breq	.+10     	; 0xea4 <__vector_13+0x40>
	{
		USART_PTR_FUNC();
     e9a:	e0 91 02 04 	lds	r30, 0x0402
     e9e:	f0 91 03 04 	lds	r31, 0x0403
     ea2:	09 95       	icall
	}
	else
	{
		/*Stop*/
	}
}
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	ff 91       	pop	r31
     eaa:	ef 91       	pop	r30
     eac:	bf 91       	pop	r27
     eae:	af 91       	pop	r26
     eb0:	9f 91       	pop	r25
     eb2:	8f 91       	pop	r24
     eb4:	7f 91       	pop	r23
     eb6:	6f 91       	pop	r22
     eb8:	5f 91       	pop	r21
     eba:	4f 91       	pop	r20
     ebc:	3f 91       	pop	r19
     ebe:	2f 91       	pop	r18
     ec0:	0f 90       	pop	r0
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	0f 90       	pop	r0
     ec6:	1f 90       	pop	r1
     ec8:	18 95       	reti

00000eca <M_TWI_Void_InitMaster>:
#include "TWI_types.h"
#include "Dio_int.h"
#include "TWI_init.h"

void M_TWI_Void_InitMaster(TWI_SCL_FREQUANCY Copy_Frequancy)
{
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	0f 92       	push	r0
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	89 83       	std	Y+1, r24	; 0x01
//	u8 Local_Check = 0 ;

	/* CLEAR prescaller */
	TWI_TWSR &= TWI_CLR_PRESCALLER ;
     ed6:	a1 e2       	ldi	r26, 0x21	; 33
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e1 e2       	ldi	r30, 0x21	; 33
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	88 7f       	andi	r24, 0xF8	; 248
     ee2:	8c 93       	st	X, r24
	/* Set Prescaller to 1*/
	TWI_TWSR |= 0x00 ;
     ee4:	a1 e2       	ldi	r26, 0x21	; 33
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e1 e2       	ldi	r30, 0x21	; 33
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	8c 93       	st	X, r24



		TWI_TWBR = Copy_Frequancy ; //TWI_SCL_400KHZ ;
     ef0:	e0 e2       	ldi	r30, 0x20	; 32
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	80 83       	st	Z, r24

	/* Enable TWI and Interrupt*/
	TWI_TWCR |= TWI_INIT_MASK;
     ef8:	a6 e5       	ldi	r26, 0x56	; 86
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e6 e5       	ldi	r30, 0x56	; 86
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	84 68       	ori	r24, 0x84	; 132
     f04:	8c 93       	st	X, r24
}
     f06:	0f 90       	pop	r0
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <M_TWI_Void_SendStartCondition>:


TWI_STATUS M_TWI_Void_SendStartCondition()
{
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
	/* Enable Interrupt, TWI, Start Condition*/
	TWI_TWCR = (1<<TWCR_TWINT)|(1<<TWCR_TWSTA)|(1<<TWCR_TWEN) ;
     f16:	e6 e5       	ldi	r30, 0x56	; 86
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	84 ea       	ldi	r24, 0xA4	; 164
     f1c:	80 83       	st	Z, r24

	/* Wait until interrupt flag raised again !(TWI_TWCR & (1<<TWCR_TWINT))*/
	while(GET_BIT(TWI_TWCR,TWCR_TWINT) == 0);
     f1e:	e6 e5       	ldi	r30, 0x56	; 86
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	88 23       	and	r24, r24
     f26:	dc f7       	brge	.-10     	; 0xf1e <M_TWI_Void_SendStartCondition+0x10>

	/* Wait until the TWI start ACK is complete */

	return M_TWI_U8_GetStatus() ;
     f28:	0e 94 13 08 	call	0x1026	; 0x1026 <M_TWI_U8_GetStatus>
}
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <M_TWI_Void_SetSlaveAddress>:


void M_TWI_Void_SetSlaveAddress(u8 Copy_SlaveAddress)
{
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	0f 92       	push	r0
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	89 83       	std	Y+1, r24	; 0x01
	TWI_TWAR = Copy_SlaveAddress ;
     f3e:	e2 e2       	ldi	r30, 0x22	; 34
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	80 83       	st	Z, r24
}
     f46:	0f 90       	pop	r0
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <M_TWI_Void_SendByte>:

TWI_STATUS M_TWI_Void_SendByte(u8 Copy_DataByte)
{
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	0f 92       	push	r0
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	89 83       	std	Y+1, r24	; 0x01
	/* Send Data to register*/
	TWI_TWDR = Copy_DataByte ;
     f5a:	e3 e2       	ldi	r30, 0x23	; 35
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	80 83       	st	Z, r24

	/* Clear interrupt flag To run the start condition and enable the TWEN PIN*/
	TWI_TWCR = (1<< TWCR_TWINT) | (1<< TWCR_TWEN) ;	//(1<< TWCR_TWINT) | (1<< TWCR_TWEN) ;
     f62:	e6 e5       	ldi	r30, 0x56	; 86
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	84 e8       	ldi	r24, 0x84	; 132
     f68:	80 83       	st	Z, r24

	/* Wait till complete TWDR byte transmitted */
	while (!(TWI_TWCR & (1<<TWCR_TWINT)));
     f6a:	e6 e5       	ldi	r30, 0x56	; 86
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	88 23       	and	r24, r24
     f72:	dc f7       	brge	.-10     	; 0xf6a <M_TWI_Void_SendByte+0x1c>

	return M_TWI_U8_GetStatus() ;
     f74:	0e 94 13 08 	call	0x1026	; 0x1026 <M_TWI_U8_GetStatus>
}
     f78:	0f 90       	pop	r0
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <M_TWI_Void_RecevieWithACK>:

void M_TWI_Void_RecevieWithACK(u8 *PTR_RecevedData)
{
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	00 d0       	rcall	.+0      	; 0xf86 <M_TWI_Void_RecevieWithACK+0x6>
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	9a 83       	std	Y+2, r25	; 0x02
     f8c:	89 83       	std	Y+1, r24	; 0x01
	/* Clear interrupt flag To run the start condition and enable the TWEN PIN*/
	TWI_TWCR |= TWI_RECEIVE_WITH_ACK_MASK ;		//
     f8e:	a6 e5       	ldi	r26, 0x56	; 86
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e6 e5       	ldi	r30, 0x56	; 86
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	84 6c       	ori	r24, 0xC4	; 196
     f9a:	8c 93       	st	X, r24

	/* Wait till complete TWDR byte transmitted */
	while (!(TWI_TWCR & (1<<TWCR_TWINT)));
     f9c:	e6 e5       	ldi	r30, 0x56	; 86
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	88 23       	and	r24, r24
     fa4:	dc f7       	brge	.-10     	; 0xf9c <M_TWI_Void_RecevieWithACK+0x1c>

//	Save the Received data
	*PTR_RecevedData = TWI_TWDR ;
     fa6:	e3 e2       	ldi	r30, 0x23	; 35
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	e9 81       	ldd	r30, Y+1	; 0x01
     fae:	fa 81       	ldd	r31, Y+2	; 0x02
     fb0:	80 83       	st	Z, r24
}
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <M_TWI_Void_RecevieWitNACK>:

void M_TWI_Void_RecevieWitNACK(u8 *PTR_RecevedData)
{
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <M_TWI_Void_RecevieWitNACK+0x6>
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	9a 83       	std	Y+2, r25	; 0x02
     fc8:	89 83       	std	Y+1, r24	; 0x01
//	M_Dio_void_setPinValue(DIO_PC0, DIO_HIGH);
	CLR_BIT(TWI_TWCR,TWCR_TWEA);
     fca:	a6 e5       	ldi	r26, 0x56	; 86
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e6 e5       	ldi	r30, 0x56	; 86
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	8f 7b       	andi	r24, 0xBF	; 191
     fd6:	8c 93       	st	X, r24
	/* Clear interrupt flag To run the start condition and enable the TWEN PIN*/
	TWI_TWCR = (1<<TWCR_TWINT) | (1<<TWCR_TWEN);
     fd8:	e6 e5       	ldi	r30, 0x56	; 86
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	84 e8       	ldi	r24, 0x84	; 132
     fde:	80 83       	st	Z, r24
	/* Wait till complete TWDR byte transmitted */
	while (!(TWI_TWCR & (1<<TWCR_TWINT)));
     fe0:	e6 e5       	ldi	r30, 0x56	; 86
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	88 23       	and	r24, r24
     fe8:	dc f7       	brge	.-10     	; 0xfe0 <M_TWI_Void_RecevieWitNACK+0x24>

//	Save the Received data
	*PTR_RecevedData = TWI_TWDR ;
     fea:	e3 e2       	ldi	r30, 0x23	; 35
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	e9 81       	ldd	r30, Y+1	; 0x01
     ff2:	fa 81       	ldd	r31, Y+2	; 0x02
     ff4:	80 83       	st	Z, r24
}
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <M_TWI_Void_GetStatus>:


void M_TWI_Void_GetStatus(u8* status)
{
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	00 d0       	rcall	.+0      	; 0x1006 <M_TWI_Void_GetStatus+0x6>
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	9a 83       	std	Y+2, r25	; 0x02
    100c:	89 83       	std	Y+1, r24	; 0x01
	*status = (TWI_TWSR & TWI_STATUS_MASK);
    100e:	e1 e2       	ldi	r30, 0x21	; 33
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	88 7f       	andi	r24, 0xF8	; 248
    1016:	e9 81       	ldd	r30, Y+1	; 0x01
    1018:	fa 81       	ldd	r31, Y+2	; 0x02
    101a:	80 83       	st	Z, r24
}
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <M_TWI_U8_GetStatus>:

u8 M_TWI_U8_GetStatus()
{
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
	return (TWI_TWSR & TWI_STATUS_MASK);
    102e:	e1 e2       	ldi	r30, 0x21	; 33
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	88 7f       	andi	r24, 0xF8	; 248
}
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	08 95       	ret

0000103c <M_TWI_Void_SendStopCondition>:


void M_TWI_Void_SendStopCondition()
{
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
	/* Stop condition */
	TWI_TWCR |= TWI_STOP_MASK ;
    1044:	a6 e5       	ldi	r26, 0x56	; 86
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e6 e5       	ldi	r30, 0x56	; 86
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	84 69       	ori	r24, 0x94	; 148
    1050:	8c 93       	st	X, r24
}
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <Port_Init>:
  parameters (in)  :
  parameters (out) : none
  Return Value     : void
******************************************/
void Port_Init(const Port_ConfigType * ConfigPtr)
{
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    1060:	2b 97       	sbiw	r28, 0x0b	; 11
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	de bf       	out	0x3e, r29	; 62
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	cd bf       	out	0x3d, r28	; 61
    106c:	9d 83       	std	Y+5, r25	; 0x05
    106e:	8c 83       	std	Y+4, r24	; 0x04

	if(ConfigPtr == NULL)
    1070:	8c 81       	ldd	r24, Y+4	; 0x04
    1072:	9d 81       	ldd	r25, Y+5	; 0x05
    1074:	00 97       	sbiw	r24, 0x00	; 0
    1076:	09 f4       	brne	.+2      	; 0x107a <Port_Init+0x22>
    1078:	51 c2       	rjmp	.+1186   	; 0x151c <Port_Init+0x4c4>
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<PORT_PINS_CONFIG_ARR_SIZE;i++)
    107a:	1b 82       	std	Y+3, r1	; 0x03
    107c:	4b c2       	rjmp	.+1174   	; 0x1514 <Port_Init+0x4bc>
			{
				Local_pin =(ConfigPtr[i].Port_PinNumber)%10 ;
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	88 2f       	mov	r24, r24
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	9c 01       	movw	r18, r24
    1086:	22 0f       	add	r18, r18
    1088:	33 1f       	adc	r19, r19
    108a:	22 0f       	add	r18, r18
    108c:	33 1f       	adc	r19, r19
    108e:	8c 81       	ldd	r24, Y+4	; 0x04
    1090:	9d 81       	ldd	r25, Y+5	; 0x05
    1092:	fc 01       	movw	r30, r24
    1094:	e2 0f       	add	r30, r18
    1096:	f3 1f       	adc	r31, r19
    1098:	80 81       	ld	r24, Z
    109a:	9a e0       	ldi	r25, 0x0A	; 10
    109c:	69 2f       	mov	r22, r25
    109e:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__udivmodqi4>
    10a2:	89 2f       	mov	r24, r25
    10a4:	8a 83       	std	Y+2, r24	; 0x02
				Local_port =(ConfigPtr[i].Port_PinNumber)/10 ;
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	88 2f       	mov	r24, r24
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	9c 01       	movw	r18, r24
    10ae:	22 0f       	add	r18, r18
    10b0:	33 1f       	adc	r19, r19
    10b2:	22 0f       	add	r18, r18
    10b4:	33 1f       	adc	r19, r19
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ba:	fc 01       	movw	r30, r24
    10bc:	e2 0f       	add	r30, r18
    10be:	f3 1f       	adc	r31, r19
    10c0:	80 81       	ld	r24, Z
    10c2:	9a e0       	ldi	r25, 0x0A	; 10
    10c4:	69 2f       	mov	r22, r25
    10c6:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__udivmodqi4>
    10ca:	89 83       	std	Y+1, r24	; 0x01
				// step1 : set direction
				if(ConfigPtr[i].Port_PinDirection == PORT_PINDIR_INPUT || ConfigPtr[i].Port_PinDirection ==PORT_PINDIR_OUTPUT)
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	88 2f       	mov	r24, r24
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	9c 01       	movw	r18, r24
    10d4:	22 0f       	add	r18, r18
    10d6:	33 1f       	adc	r19, r19
    10d8:	22 0f       	add	r18, r18
    10da:	33 1f       	adc	r19, r19
    10dc:	8c 81       	ldd	r24, Y+4	; 0x04
    10de:	9d 81       	ldd	r25, Y+5	; 0x05
    10e0:	fc 01       	movw	r30, r24
    10e2:	e2 0f       	add	r30, r18
    10e4:	f3 1f       	adc	r31, r19
    10e6:	82 81       	ldd	r24, Z+2	; 0x02
    10e8:	88 23       	and	r24, r24
    10ea:	89 f0       	breq	.+34     	; 0x110e <Port_Init+0xb6>
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	88 2f       	mov	r24, r24
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	9c 01       	movw	r18, r24
    10f4:	22 0f       	add	r18, r18
    10f6:	33 1f       	adc	r19, r19
    10f8:	22 0f       	add	r18, r18
    10fa:	33 1f       	adc	r19, r19
    10fc:	8c 81       	ldd	r24, Y+4	; 0x04
    10fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1100:	fc 01       	movw	r30, r24
    1102:	e2 0f       	add	r30, r18
    1104:	f3 1f       	adc	r31, r19
    1106:	82 81       	ldd	r24, Z+2	; 0x02
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	09 f0       	breq	.+2      	; 0x110e <Port_Init+0xb6>
    110c:	00 c2       	rjmp	.+1024   	; 0x150e <Port_Init+0x4b6>
				{
					switch(Local_port)
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	3b 87       	std	Y+11, r19	; 0x0b
    1116:	2a 87       	std	Y+10, r18	; 0x0a
    1118:	6a 85       	ldd	r22, Y+10	; 0x0a
    111a:	7b 85       	ldd	r23, Y+11	; 0x0b
    111c:	62 30       	cpi	r22, 0x02	; 2
    111e:	71 05       	cpc	r23, r1
    1120:	d1 f1       	breq	.+116    	; 0x1196 <Port_Init+0x13e>
    1122:	8a 85       	ldd	r24, Y+10	; 0x0a
    1124:	9b 85       	ldd	r25, Y+11	; 0x0b
    1126:	83 30       	cpi	r24, 0x03	; 3
    1128:	91 05       	cpc	r25, r1
    112a:	34 f4       	brge	.+12     	; 0x1138 <Port_Init+0xe0>
    112c:	2a 85       	ldd	r18, Y+10	; 0x0a
    112e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1130:	21 30       	cpi	r18, 0x01	; 1
    1132:	31 05       	cpc	r19, r1
    1134:	71 f0       	breq	.+28     	; 0x1152 <Port_Init+0xfa>
    1136:	94 c0       	rjmp	.+296    	; 0x1260 <Port_Init+0x208>
    1138:	6a 85       	ldd	r22, Y+10	; 0x0a
    113a:	7b 85       	ldd	r23, Y+11	; 0x0b
    113c:	63 30       	cpi	r22, 0x03	; 3
    113e:	71 05       	cpc	r23, r1
    1140:	09 f4       	brne	.+2      	; 0x1144 <Port_Init+0xec>
    1142:	4b c0       	rjmp	.+150    	; 0x11da <Port_Init+0x182>
    1144:	8a 85       	ldd	r24, Y+10	; 0x0a
    1146:	9b 85       	ldd	r25, Y+11	; 0x0b
    1148:	84 30       	cpi	r24, 0x04	; 4
    114a:	91 05       	cpc	r25, r1
    114c:	09 f4       	brne	.+2      	; 0x1150 <Port_Init+0xf8>
    114e:	67 c0       	rjmp	.+206    	; 0x121e <Port_Init+0x1c6>
    1150:	87 c0       	rjmp	.+270    	; 0x1260 <Port_Init+0x208>
					{
					case PORT_PORTA:DDRA_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1152:	aa e3       	ldi	r26, 0x3A	; 58
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	ea e3       	ldi	r30, 0x3A	; 58
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	40 81       	ld	r20, Z
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	88 2f       	mov	r24, r24
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	9c 01       	movw	r18, r24
    1164:	22 0f       	add	r18, r18
    1166:	33 1f       	adc	r19, r19
    1168:	22 0f       	add	r18, r18
    116a:	33 1f       	adc	r19, r19
    116c:	8c 81       	ldd	r24, Y+4	; 0x04
    116e:	9d 81       	ldd	r25, Y+5	; 0x05
    1170:	fc 01       	movw	r30, r24
    1172:	e2 0f       	add	r30, r18
    1174:	f3 1f       	adc	r31, r19
    1176:	82 81       	ldd	r24, Z+2	; 0x02
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	88 2f       	mov	r24, r24
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	b9 01       	movw	r22, r18
    1184:	02 c0       	rjmp	.+4      	; 0x118a <Port_Init+0x132>
    1186:	66 0f       	add	r22, r22
    1188:	77 1f       	adc	r23, r23
    118a:	8a 95       	dec	r24
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <Port_Init+0x12e>
    118e:	cb 01       	movw	r24, r22
    1190:	84 2b       	or	r24, r20
    1192:	8c 93       	st	X, r24
    1194:	65 c0       	rjmp	.+202    	; 0x1260 <Port_Init+0x208>
					case PORT_PORTB:DDRB_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1196:	a7 e3       	ldi	r26, 0x37	; 55
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e7 e3       	ldi	r30, 0x37	; 55
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	40 81       	ld	r20, Z
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	88 2f       	mov	r24, r24
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	9c 01       	movw	r18, r24
    11a8:	22 0f       	add	r18, r18
    11aa:	33 1f       	adc	r19, r19
    11ac:	22 0f       	add	r18, r18
    11ae:	33 1f       	adc	r19, r19
    11b0:	8c 81       	ldd	r24, Y+4	; 0x04
    11b2:	9d 81       	ldd	r25, Y+5	; 0x05
    11b4:	fc 01       	movw	r30, r24
    11b6:	e2 0f       	add	r30, r18
    11b8:	f3 1f       	adc	r31, r19
    11ba:	82 81       	ldd	r24, Z+2	; 0x02
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	88 2f       	mov	r24, r24
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	b9 01       	movw	r22, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <Port_Init+0x176>
    11ca:	66 0f       	add	r22, r22
    11cc:	77 1f       	adc	r23, r23
    11ce:	8a 95       	dec	r24
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <Port_Init+0x172>
    11d2:	cb 01       	movw	r24, r22
    11d4:	84 2b       	or	r24, r20
    11d6:	8c 93       	st	X, r24
    11d8:	43 c0       	rjmp	.+134    	; 0x1260 <Port_Init+0x208>
					case PORT_PORTC:DDRC_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    11da:	a4 e3       	ldi	r26, 0x34	; 52
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e4 e3       	ldi	r30, 0x34	; 52
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	40 81       	ld	r20, Z
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	88 2f       	mov	r24, r24
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	9c 01       	movw	r18, r24
    11ec:	22 0f       	add	r18, r18
    11ee:	33 1f       	adc	r19, r19
    11f0:	22 0f       	add	r18, r18
    11f2:	33 1f       	adc	r19, r19
    11f4:	8c 81       	ldd	r24, Y+4	; 0x04
    11f6:	9d 81       	ldd	r25, Y+5	; 0x05
    11f8:	fc 01       	movw	r30, r24
    11fa:	e2 0f       	add	r30, r18
    11fc:	f3 1f       	adc	r31, r19
    11fe:	82 81       	ldd	r24, Z+2	; 0x02
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	88 2f       	mov	r24, r24
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	b9 01       	movw	r22, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <Port_Init+0x1ba>
    120e:	66 0f       	add	r22, r22
    1210:	77 1f       	adc	r23, r23
    1212:	8a 95       	dec	r24
    1214:	e2 f7       	brpl	.-8      	; 0x120e <Port_Init+0x1b6>
    1216:	cb 01       	movw	r24, r22
    1218:	84 2b       	or	r24, r20
    121a:	8c 93       	st	X, r24
    121c:	21 c0       	rjmp	.+66     	; 0x1260 <Port_Init+0x208>
					case PORT_PORTD:DDRD_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    121e:	a1 e3       	ldi	r26, 0x31	; 49
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e1 e3       	ldi	r30, 0x31	; 49
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	40 81       	ld	r20, Z
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	88 2f       	mov	r24, r24
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	9c 01       	movw	r18, r24
    1230:	22 0f       	add	r18, r18
    1232:	33 1f       	adc	r19, r19
    1234:	22 0f       	add	r18, r18
    1236:	33 1f       	adc	r19, r19
    1238:	8c 81       	ldd	r24, Y+4	; 0x04
    123a:	9d 81       	ldd	r25, Y+5	; 0x05
    123c:	fc 01       	movw	r30, r24
    123e:	e2 0f       	add	r30, r18
    1240:	f3 1f       	adc	r31, r19
    1242:	82 81       	ldd	r24, Z+2	; 0x02
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	88 2f       	mov	r24, r24
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	b9 01       	movw	r22, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <Port_Init+0x1fe>
    1252:	66 0f       	add	r22, r22
    1254:	77 1f       	adc	r23, r23
    1256:	8a 95       	dec	r24
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <Port_Init+0x1fa>
    125a:	cb 01       	movw	r24, r22
    125c:	84 2b       	or	r24, r20
    125e:	8c 93       	st	X, r24

					}
					// step 2 : config initial pin value
					if(ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_LOW || ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_HIGH)
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	88 2f       	mov	r24, r24
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	9c 01       	movw	r18, r24
    1268:	22 0f       	add	r18, r18
    126a:	33 1f       	adc	r19, r19
    126c:	22 0f       	add	r18, r18
    126e:	33 1f       	adc	r19, r19
    1270:	8c 81       	ldd	r24, Y+4	; 0x04
    1272:	9d 81       	ldd	r25, Y+5	; 0x05
    1274:	fc 01       	movw	r30, r24
    1276:	e2 0f       	add	r30, r18
    1278:	f3 1f       	adc	r31, r19
    127a:	81 81       	ldd	r24, Z+1	; 0x01
    127c:	88 23       	and	r24, r24
    127e:	89 f0       	breq	.+34     	; 0x12a2 <Port_Init+0x24a>
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	88 2f       	mov	r24, r24
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	9c 01       	movw	r18, r24
    1288:	22 0f       	add	r18, r18
    128a:	33 1f       	adc	r19, r19
    128c:	22 0f       	add	r18, r18
    128e:	33 1f       	adc	r19, r19
    1290:	8c 81       	ldd	r24, Y+4	; 0x04
    1292:	9d 81       	ldd	r25, Y+5	; 0x05
    1294:	fc 01       	movw	r30, r24
    1296:	e2 0f       	add	r30, r18
    1298:	f3 1f       	adc	r31, r19
    129a:	81 81       	ldd	r24, Z+1	; 0x01
    129c:	81 30       	cpi	r24, 0x01	; 1
    129e:	09 f0       	breq	.+2      	; 0x12a2 <Port_Init+0x24a>
    12a0:	36 c1       	rjmp	.+620    	; 0x150e <Port_Init+0x4b6>
					{
						switch(Local_port)
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	39 87       	std	Y+9, r19	; 0x09
    12aa:	28 87       	std	Y+8, r18	; 0x08
    12ac:	68 85       	ldd	r22, Y+8	; 0x08
    12ae:	79 85       	ldd	r23, Y+9	; 0x09
    12b0:	62 30       	cpi	r22, 0x02	; 2
    12b2:	71 05       	cpc	r23, r1
    12b4:	d1 f1       	breq	.+116    	; 0x132a <Port_Init+0x2d2>
    12b6:	88 85       	ldd	r24, Y+8	; 0x08
    12b8:	99 85       	ldd	r25, Y+9	; 0x09
    12ba:	83 30       	cpi	r24, 0x03	; 3
    12bc:	91 05       	cpc	r25, r1
    12be:	34 f4       	brge	.+12     	; 0x12cc <Port_Init+0x274>
    12c0:	28 85       	ldd	r18, Y+8	; 0x08
    12c2:	39 85       	ldd	r19, Y+9	; 0x09
    12c4:	21 30       	cpi	r18, 0x01	; 1
    12c6:	31 05       	cpc	r19, r1
    12c8:	71 f0       	breq	.+28     	; 0x12e6 <Port_Init+0x28e>
    12ca:	94 c0       	rjmp	.+296    	; 0x13f4 <Port_Init+0x39c>
    12cc:	68 85       	ldd	r22, Y+8	; 0x08
    12ce:	79 85       	ldd	r23, Y+9	; 0x09
    12d0:	63 30       	cpi	r22, 0x03	; 3
    12d2:	71 05       	cpc	r23, r1
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <Port_Init+0x280>
    12d6:	4b c0       	rjmp	.+150    	; 0x136e <Port_Init+0x316>
    12d8:	88 85       	ldd	r24, Y+8	; 0x08
    12da:	99 85       	ldd	r25, Y+9	; 0x09
    12dc:	84 30       	cpi	r24, 0x04	; 4
    12de:	91 05       	cpc	r25, r1
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <Port_Init+0x28c>
    12e2:	67 c0       	rjmp	.+206    	; 0x13b2 <Port_Init+0x35a>
    12e4:	87 c0       	rjmp	.+270    	; 0x13f4 <Port_Init+0x39c>
						{
						case PORT_PORTA:  PORTA_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    12e6:	ab e3       	ldi	r26, 0x3B	; 59
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	eb e3       	ldi	r30, 0x3B	; 59
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	40 81       	ld	r20, Z
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	88 2f       	mov	r24, r24
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	9c 01       	movw	r18, r24
    12f8:	22 0f       	add	r18, r18
    12fa:	33 1f       	adc	r19, r19
    12fc:	22 0f       	add	r18, r18
    12fe:	33 1f       	adc	r19, r19
    1300:	8c 81       	ldd	r24, Y+4	; 0x04
    1302:	9d 81       	ldd	r25, Y+5	; 0x05
    1304:	fc 01       	movw	r30, r24
    1306:	e2 0f       	add	r30, r18
    1308:	f3 1f       	adc	r31, r19
    130a:	81 81       	ldd	r24, Z+1	; 0x01
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	88 2f       	mov	r24, r24
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	b9 01       	movw	r22, r18
    1318:	02 c0       	rjmp	.+4      	; 0x131e <Port_Init+0x2c6>
    131a:	66 0f       	add	r22, r22
    131c:	77 1f       	adc	r23, r23
    131e:	8a 95       	dec	r24
    1320:	e2 f7       	brpl	.-8      	; 0x131a <Port_Init+0x2c2>
    1322:	cb 01       	movw	r24, r22
    1324:	84 2b       	or	r24, r20
    1326:	8c 93       	st	X, r24
    1328:	65 c0       	rjmp	.+202    	; 0x13f4 <Port_Init+0x39c>
						case PORT_PORTB:  PORTB_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    132a:	a8 e3       	ldi	r26, 0x38	; 56
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	e8 e3       	ldi	r30, 0x38	; 56
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	40 81       	ld	r20, Z
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	88 2f       	mov	r24, r24
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	9c 01       	movw	r18, r24
    133c:	22 0f       	add	r18, r18
    133e:	33 1f       	adc	r19, r19
    1340:	22 0f       	add	r18, r18
    1342:	33 1f       	adc	r19, r19
    1344:	8c 81       	ldd	r24, Y+4	; 0x04
    1346:	9d 81       	ldd	r25, Y+5	; 0x05
    1348:	fc 01       	movw	r30, r24
    134a:	e2 0f       	add	r30, r18
    134c:	f3 1f       	adc	r31, r19
    134e:	81 81       	ldd	r24, Z+1	; 0x01
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	88 2f       	mov	r24, r24
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	b9 01       	movw	r22, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <Port_Init+0x30a>
    135e:	66 0f       	add	r22, r22
    1360:	77 1f       	adc	r23, r23
    1362:	8a 95       	dec	r24
    1364:	e2 f7       	brpl	.-8      	; 0x135e <Port_Init+0x306>
    1366:	cb 01       	movw	r24, r22
    1368:	84 2b       	or	r24, r20
    136a:	8c 93       	st	X, r24
    136c:	43 c0       	rjmp	.+134    	; 0x13f4 <Port_Init+0x39c>
						case PORT_PORTC:  PORTC_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    136e:	a5 e3       	ldi	r26, 0x35	; 53
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e5 e3       	ldi	r30, 0x35	; 53
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	40 81       	ld	r20, Z
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	88 2f       	mov	r24, r24
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	9c 01       	movw	r18, r24
    1380:	22 0f       	add	r18, r18
    1382:	33 1f       	adc	r19, r19
    1384:	22 0f       	add	r18, r18
    1386:	33 1f       	adc	r19, r19
    1388:	8c 81       	ldd	r24, Y+4	; 0x04
    138a:	9d 81       	ldd	r25, Y+5	; 0x05
    138c:	fc 01       	movw	r30, r24
    138e:	e2 0f       	add	r30, r18
    1390:	f3 1f       	adc	r31, r19
    1392:	81 81       	ldd	r24, Z+1	; 0x01
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	88 2f       	mov	r24, r24
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	b9 01       	movw	r22, r18
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <Port_Init+0x34e>
    13a2:	66 0f       	add	r22, r22
    13a4:	77 1f       	adc	r23, r23
    13a6:	8a 95       	dec	r24
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <Port_Init+0x34a>
    13aa:	cb 01       	movw	r24, r22
    13ac:	84 2b       	or	r24, r20
    13ae:	8c 93       	st	X, r24
    13b0:	21 c0       	rjmp	.+66     	; 0x13f4 <Port_Init+0x39c>
						case PORT_PORTD:  PORTD_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    13b2:	a2 e3       	ldi	r26, 0x32	; 50
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e2 e3       	ldi	r30, 0x32	; 50
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	40 81       	ld	r20, Z
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	88 2f       	mov	r24, r24
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	9c 01       	movw	r18, r24
    13c4:	22 0f       	add	r18, r18
    13c6:	33 1f       	adc	r19, r19
    13c8:	22 0f       	add	r18, r18
    13ca:	33 1f       	adc	r19, r19
    13cc:	8c 81       	ldd	r24, Y+4	; 0x04
    13ce:	9d 81       	ldd	r25, Y+5	; 0x05
    13d0:	fc 01       	movw	r30, r24
    13d2:	e2 0f       	add	r30, r18
    13d4:	f3 1f       	adc	r31, r19
    13d6:	81 81       	ldd	r24, Z+1	; 0x01
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	88 2f       	mov	r24, r24
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	b9 01       	movw	r22, r18
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <Port_Init+0x392>
    13e6:	66 0f       	add	r22, r22
    13e8:	77 1f       	adc	r23, r23
    13ea:	8a 95       	dec	r24
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <Port_Init+0x38e>
    13ee:	cb 01       	movw	r24, r22
    13f0:	84 2b       	or	r24, r20
    13f2:	8c 93       	st	X, r24

						}
						// step 3 : config Pin Internal Attach
						if(ConfigPtr[i].Port_PinDirection==PORT_PINDIR_OUTPUT && ConfigPtr[i].Port_PinInternalAttach == PORT_PIN_IN_ATTATCH_PULLUP)
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	88 2f       	mov	r24, r24
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	9c 01       	movw	r18, r24
    13fc:	22 0f       	add	r18, r18
    13fe:	33 1f       	adc	r19, r19
    1400:	22 0f       	add	r18, r18
    1402:	33 1f       	adc	r19, r19
    1404:	8c 81       	ldd	r24, Y+4	; 0x04
    1406:	9d 81       	ldd	r25, Y+5	; 0x05
    1408:	fc 01       	movw	r30, r24
    140a:	e2 0f       	add	r30, r18
    140c:	f3 1f       	adc	r31, r19
    140e:	82 81       	ldd	r24, Z+2	; 0x02
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	09 f0       	breq	.+2      	; 0x1416 <Port_Init+0x3be>
    1414:	7c c0       	rjmp	.+248    	; 0x150e <Port_Init+0x4b6>
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	88 2f       	mov	r24, r24
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	9c 01       	movw	r18, r24
    141e:	22 0f       	add	r18, r18
    1420:	33 1f       	adc	r19, r19
    1422:	22 0f       	add	r18, r18
    1424:	33 1f       	adc	r19, r19
    1426:	8c 81       	ldd	r24, Y+4	; 0x04
    1428:	9d 81       	ldd	r25, Y+5	; 0x05
    142a:	fc 01       	movw	r30, r24
    142c:	e2 0f       	add	r30, r18
    142e:	f3 1f       	adc	r31, r19
    1430:	83 81       	ldd	r24, Z+3	; 0x03
    1432:	88 23       	and	r24, r24
    1434:	09 f0       	breq	.+2      	; 0x1438 <Port_Init+0x3e0>
    1436:	6b c0       	rjmp	.+214    	; 0x150e <Port_Init+0x4b6>
						{
							switch(Local_port)
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	3f 83       	std	Y+7, r19	; 0x07
    1440:	2e 83       	std	Y+6, r18	; 0x06
    1442:	6e 81       	ldd	r22, Y+6	; 0x06
    1444:	7f 81       	ldd	r23, Y+7	; 0x07
    1446:	62 30       	cpi	r22, 0x02	; 2
    1448:	71 05       	cpc	r23, r1
    144a:	49 f1       	breq	.+82     	; 0x149e <Port_Init+0x446>
    144c:	8e 81       	ldd	r24, Y+6	; 0x06
    144e:	9f 81       	ldd	r25, Y+7	; 0x07
    1450:	83 30       	cpi	r24, 0x03	; 3
    1452:	91 05       	cpc	r25, r1
    1454:	34 f4       	brge	.+12     	; 0x1462 <Port_Init+0x40a>
    1456:	2e 81       	ldd	r18, Y+6	; 0x06
    1458:	3f 81       	ldd	r19, Y+7	; 0x07
    145a:	21 30       	cpi	r18, 0x01	; 1
    145c:	31 05       	cpc	r19, r1
    145e:	61 f0       	breq	.+24     	; 0x1478 <Port_Init+0x420>
    1460:	56 c0       	rjmp	.+172    	; 0x150e <Port_Init+0x4b6>
    1462:	6e 81       	ldd	r22, Y+6	; 0x06
    1464:	7f 81       	ldd	r23, Y+7	; 0x07
    1466:	63 30       	cpi	r22, 0x03	; 3
    1468:	71 05       	cpc	r23, r1
    146a:	61 f1       	breq	.+88     	; 0x14c4 <Port_Init+0x46c>
    146c:	8e 81       	ldd	r24, Y+6	; 0x06
    146e:	9f 81       	ldd	r25, Y+7	; 0x07
    1470:	84 30       	cpi	r24, 0x04	; 4
    1472:	91 05       	cpc	r25, r1
    1474:	d1 f1       	breq	.+116    	; 0x14ea <Port_Init+0x492>
    1476:	4b c0       	rjmp	.+150    	; 0x150e <Port_Init+0x4b6>
							{
							case PORT_PORTA:PORTA_REG |= (u8)(1<< Local_pin);break;
    1478:	ab e3       	ldi	r26, 0x3B	; 59
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	eb e3       	ldi	r30, 0x3B	; 59
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	40 81       	ld	r20, Z
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 2e       	mov	r0, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <Port_Init+0x43c>
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	0a 94       	dec	r0
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <Port_Init+0x438>
    1498:	84 2b       	or	r24, r20
    149a:	8c 93       	st	X, r24
    149c:	38 c0       	rjmp	.+112    	; 0x150e <Port_Init+0x4b6>
							case PORT_PORTB:PORTB_REG |= (u8)(1<< Local_pin);break;
    149e:	a8 e3       	ldi	r26, 0x38	; 56
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e8 e3       	ldi	r30, 0x38	; 56
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	40 81       	ld	r20, Z
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	02 2e       	mov	r0, r18
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <Port_Init+0x462>
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	0a 94       	dec	r0
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <Port_Init+0x45e>
    14be:	84 2b       	or	r24, r20
    14c0:	8c 93       	st	X, r24
    14c2:	25 c0       	rjmp	.+74     	; 0x150e <Port_Init+0x4b6>
							case PORT_PORTC:PORTC_REG |= (u8)(1<< Local_pin);break;
    14c4:	a5 e3       	ldi	r26, 0x35	; 53
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e5 e3       	ldi	r30, 0x35	; 53
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	40 81       	ld	r20, Z
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	02 2e       	mov	r0, r18
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <Port_Init+0x488>
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	0a 94       	dec	r0
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <Port_Init+0x484>
    14e4:	84 2b       	or	r24, r20
    14e6:	8c 93       	st	X, r24
    14e8:	12 c0       	rjmp	.+36     	; 0x150e <Port_Init+0x4b6>
							case PORT_PORTD:PORTD_REG |= (u8)(1<< Local_pin);break;
    14ea:	a2 e3       	ldi	r26, 0x32	; 50
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e2 e3       	ldi	r30, 0x32	; 50
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	40 81       	ld	r20, Z
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	02 2e       	mov	r0, r18
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <Port_Init+0x4ae>
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	0a 94       	dec	r0
    1508:	e2 f7       	brpl	.-8      	; 0x1502 <Port_Init+0x4aa>
    150a:	84 2b       	or	r24, r20
    150c:	8c 93       	st	X, r24
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<PORT_PINS_CONFIG_ARR_SIZE;i++)
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	8f 5f       	subi	r24, 0xFF	; 255
    1512:	8b 83       	std	Y+3, r24	; 0x03
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	80 32       	cpi	r24, 0x20	; 32
    1518:	08 f4       	brcc	.+2      	; 0x151c <Port_Init+0x4c4>
    151a:	b1 cd       	rjmp	.-1182   	; 0x107e <Port_Init+0x26>
					//report error
				}

		    }//for
		}//else
}
    151c:	2b 96       	adiw	r28, 0x0b	; 11
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	cd bf       	out	0x3d, r28	; 61
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	08 95       	ret

0000152e <M_GIE_Void_Enable>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "GIE_init.h"

void M_GIE_Void_Enable()
{
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GLI_SREG, SREG_GIE);
    1536:	af e5       	ldi	r26, 0x5F	; 95
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	ef e5       	ldi	r30, 0x5F	; 95
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	80 68       	ori	r24, 0x80	; 128
    1542:	8c 93       	st	X, r24
}
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <M_GIE_Void_Disable>:
void M_GIE_Void_Disable()
{
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GLI_SREG, SREG_GIE);
    1552:	af e5       	ldi	r26, 0x5F	; 95
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	ef e5       	ldi	r30, 0x5F	; 95
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	8f 77       	andi	r24, 0x7F	; 127
    155e:	8c 93       	st	X, r24
}
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <M_Dio_en_getPinValue>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : Dio_HIGH or DIO_LOW
******************************************/
Dio_LevelType  M_Dio_en_getPinValue(Dio_ChannelType ChannelId)
{
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	00 d0       	rcall	.+0      	; 0x156c <M_Dio_en_getPinValue+0x6>
    156c:	00 d0       	rcall	.+0      	; 0x156e <M_Dio_en_getPinValue+0x8>
    156e:	00 d0       	rcall	.+0      	; 0x1570 <M_Dio_en_getPinValue+0xa>
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	8c 83       	std	Y+4, r24	; 0x04
	u8 pin = ChannelId % 10;
    1576:	8c 81       	ldd	r24, Y+4	; 0x04
    1578:	9a e0       	ldi	r25, 0x0A	; 10
    157a:	69 2f       	mov	r22, r25
    157c:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__udivmodqi4>
    1580:	89 2f       	mov	r24, r25
    1582:	8b 83       	std	Y+3, r24	; 0x03
	u8 port = ChannelId / 10;
    1584:	8c 81       	ldd	r24, Y+4	; 0x04
    1586:	9a e0       	ldi	r25, 0x0A	; 10
    1588:	69 2f       	mov	r22, r25
    158a:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__udivmodqi4>
    158e:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType Local_levelType;
	switch(port)
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	3e 83       	std	Y+6, r19	; 0x06
    1598:	2d 83       	std	Y+5, r18	; 0x05
    159a:	4d 81       	ldd	r20, Y+5	; 0x05
    159c:	5e 81       	ldd	r21, Y+6	; 0x06
    159e:	42 30       	cpi	r20, 0x02	; 2
    15a0:	51 05       	cpc	r21, r1
    15a2:	41 f1       	breq	.+80     	; 0x15f4 <M_Dio_en_getPinValue+0x8e>
    15a4:	8d 81       	ldd	r24, Y+5	; 0x05
    15a6:	9e 81       	ldd	r25, Y+6	; 0x06
    15a8:	83 30       	cpi	r24, 0x03	; 3
    15aa:	91 05       	cpc	r25, r1
    15ac:	34 f4       	brge	.+12     	; 0x15ba <M_Dio_en_getPinValue+0x54>
    15ae:	2d 81       	ldd	r18, Y+5	; 0x05
    15b0:	3e 81       	ldd	r19, Y+6	; 0x06
    15b2:	21 30       	cpi	r18, 0x01	; 1
    15b4:	31 05       	cpc	r19, r1
    15b6:	61 f0       	breq	.+24     	; 0x15d0 <M_Dio_en_getPinValue+0x6a>
    15b8:	52 c0       	rjmp	.+164    	; 0x165e <M_Dio_en_getPinValue+0xf8>
    15ba:	4d 81       	ldd	r20, Y+5	; 0x05
    15bc:	5e 81       	ldd	r21, Y+6	; 0x06
    15be:	43 30       	cpi	r20, 0x03	; 3
    15c0:	51 05       	cpc	r21, r1
    15c2:	51 f1       	breq	.+84     	; 0x1618 <M_Dio_en_getPinValue+0xb2>
    15c4:	8d 81       	ldd	r24, Y+5	; 0x05
    15c6:	9e 81       	ldd	r25, Y+6	; 0x06
    15c8:	84 30       	cpi	r24, 0x04	; 4
    15ca:	91 05       	cpc	r25, r1
    15cc:	b9 f1       	breq	.+110    	; 0x163c <M_Dio_en_getPinValue+0xd6>
    15ce:	47 c0       	rjmp	.+142    	; 0x165e <M_Dio_en_getPinValue+0xf8>
	{
	case DIO_PORTA :Local_levelType = GET_BIT( PINA_REG,pin);break;
    15d0:	e9 e3       	ldi	r30, 0x39	; 57
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	88 2f       	mov	r24, r24
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	a9 01       	movw	r20, r18
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <M_Dio_en_getPinValue+0x82>
    15e4:	55 95       	asr	r21
    15e6:	47 95       	ror	r20
    15e8:	8a 95       	dec	r24
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <M_Dio_en_getPinValue+0x7e>
    15ec:	ca 01       	movw	r24, r20
    15ee:	81 70       	andi	r24, 0x01	; 1
    15f0:	89 83       	std	Y+1, r24	; 0x01
    15f2:	35 c0       	rjmp	.+106    	; 0x165e <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTB :Local_levelType = GET_BIT( PINB_REG,pin);break;
    15f4:	e6 e3       	ldi	r30, 0x36	; 54
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	88 2f       	mov	r24, r24
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	a9 01       	movw	r20, r18
    1606:	02 c0       	rjmp	.+4      	; 0x160c <M_Dio_en_getPinValue+0xa6>
    1608:	55 95       	asr	r21
    160a:	47 95       	ror	r20
    160c:	8a 95       	dec	r24
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <M_Dio_en_getPinValue+0xa2>
    1610:	ca 01       	movw	r24, r20
    1612:	81 70       	andi	r24, 0x01	; 1
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	23 c0       	rjmp	.+70     	; 0x165e <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTC :Local_levelType = GET_BIT( PINC_REG,pin);break;
    1618:	e3 e3       	ldi	r30, 0x33	; 51
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	88 2f       	mov	r24, r24
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	a9 01       	movw	r20, r18
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <M_Dio_en_getPinValue+0xca>
    162c:	55 95       	asr	r21
    162e:	47 95       	ror	r20
    1630:	8a 95       	dec	r24
    1632:	e2 f7       	brpl	.-8      	; 0x162c <M_Dio_en_getPinValue+0xc6>
    1634:	ca 01       	movw	r24, r20
    1636:	81 70       	andi	r24, 0x01	; 1
    1638:	89 83       	std	Y+1, r24	; 0x01
    163a:	11 c0       	rjmp	.+34     	; 0x165e <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTD :Local_levelType = GET_BIT( PIND_REG,pin);break;
    163c:	e0 e3       	ldi	r30, 0x30	; 48
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	88 2f       	mov	r24, r24
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	a9 01       	movw	r20, r18
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <M_Dio_en_getPinValue+0xee>
    1650:	55 95       	asr	r21
    1652:	47 95       	ror	r20
    1654:	8a 95       	dec	r24
    1656:	e2 f7       	brpl	.-8      	; 0x1650 <M_Dio_en_getPinValue+0xea>
    1658:	ca 01       	movw	r24, r20
    165a:	81 70       	andi	r24, 0x01	; 1
    165c:	89 83       	std	Y+1, r24	; 0x01
	}
    return Local_levelType ;
    165e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1660:	26 96       	adiw	r28, 0x06	; 6
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <M_Dio_void_setPinValue>:
  parameters (in)  :  channelId (pin) ,Level (Dio_HIGH or Dio_LOW)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPinValue(Dio_ChannelType ChannelId,Dio_LevelType Level)
{
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	28 97       	sbiw	r28, 0x08	; 8
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	de bf       	out	0x3e, r29	; 62
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	cd bf       	out	0x3d, r28	; 61
    1686:	8b 83       	std	Y+3, r24	; 0x03
    1688:	6c 83       	std	Y+4, r22	; 0x04
	u8 pin = ChannelId % 10;
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	9a e0       	ldi	r25, 0x0A	; 10
    168e:	69 2f       	mov	r22, r25
    1690:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__udivmodqi4>
    1694:	89 2f       	mov	r24, r25
    1696:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = ChannelId / 10;
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	9a e0       	ldi	r25, 0x0A	; 10
    169c:	69 2f       	mov	r22, r25
    169e:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__udivmodqi4>
    16a2:	89 83       	std	Y+1, r24	; 0x01

	if(Level == DIO_HIGH)
    16a4:	8c 81       	ldd	r24, Y+4	; 0x04
    16a6:	81 30       	cpi	r24, 0x01	; 1
    16a8:	09 f0       	breq	.+2      	; 0x16ac <M_Dio_void_setPinValue+0x3a>
    16aa:	70 c0       	rjmp	.+224    	; 0x178c <M_Dio_void_setPinValue+0x11a>
	{
		switch(port)
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	38 87       	std	Y+8, r19	; 0x08
    16b4:	2f 83       	std	Y+7, r18	; 0x07
    16b6:	8f 81       	ldd	r24, Y+7	; 0x07
    16b8:	98 85       	ldd	r25, Y+8	; 0x08
    16ba:	82 30       	cpi	r24, 0x02	; 2
    16bc:	91 05       	cpc	r25, r1
    16be:	51 f1       	breq	.+84     	; 0x1714 <M_Dio_void_setPinValue+0xa2>
    16c0:	2f 81       	ldd	r18, Y+7	; 0x07
    16c2:	38 85       	ldd	r19, Y+8	; 0x08
    16c4:	23 30       	cpi	r18, 0x03	; 3
    16c6:	31 05       	cpc	r19, r1
    16c8:	34 f4       	brge	.+12     	; 0x16d6 <M_Dio_void_setPinValue+0x64>
    16ca:	8f 81       	ldd	r24, Y+7	; 0x07
    16cc:	98 85       	ldd	r25, Y+8	; 0x08
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	91 05       	cpc	r25, r1
    16d2:	61 f0       	breq	.+24     	; 0x16ec <M_Dio_void_setPinValue+0x7a>
    16d4:	d3 c0       	rjmp	.+422    	; 0x187c <M_Dio_void_setPinValue+0x20a>
    16d6:	2f 81       	ldd	r18, Y+7	; 0x07
    16d8:	38 85       	ldd	r19, Y+8	; 0x08
    16da:	23 30       	cpi	r18, 0x03	; 3
    16dc:	31 05       	cpc	r19, r1
    16de:	71 f1       	breq	.+92     	; 0x173c <M_Dio_void_setPinValue+0xca>
    16e0:	8f 81       	ldd	r24, Y+7	; 0x07
    16e2:	98 85       	ldd	r25, Y+8	; 0x08
    16e4:	84 30       	cpi	r24, 0x04	; 4
    16e6:	91 05       	cpc	r25, r1
    16e8:	e9 f1       	breq	.+122    	; 0x1764 <M_Dio_void_setPinValue+0xf2>
    16ea:	c8 c0       	rjmp	.+400    	; 0x187c <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : SET_BIT( PORTA_REG,pin);break;
    16ec:	ab e3       	ldi	r26, 0x3B	; 59
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	eb e3       	ldi	r30, 0x3B	; 59
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	48 2f       	mov	r20, r24
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	28 2f       	mov	r18, r24
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	02 2e       	mov	r0, r18
    1704:	02 c0       	rjmp	.+4      	; 0x170a <M_Dio_void_setPinValue+0x98>
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	0a 94       	dec	r0
    170c:	e2 f7       	brpl	.-8      	; 0x1706 <M_Dio_void_setPinValue+0x94>
    170e:	84 2b       	or	r24, r20
    1710:	8c 93       	st	X, r24
    1712:	b4 c0       	rjmp	.+360    	; 0x187c <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : SET_BIT( PORTB_REG,pin);break;
    1714:	a8 e3       	ldi	r26, 0x38	; 56
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e8 e3       	ldi	r30, 0x38	; 56
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	48 2f       	mov	r20, r24
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	02 2e       	mov	r0, r18
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <M_Dio_void_setPinValue+0xc0>
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	0a 94       	dec	r0
    1734:	e2 f7       	brpl	.-8      	; 0x172e <M_Dio_void_setPinValue+0xbc>
    1736:	84 2b       	or	r24, r20
    1738:	8c 93       	st	X, r24
    173a:	a0 c0       	rjmp	.+320    	; 0x187c <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : SET_BIT( PORTC_REG,pin);break;
    173c:	a5 e3       	ldi	r26, 0x35	; 53
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e5 e3       	ldi	r30, 0x35	; 53
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	48 2f       	mov	r20, r24
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	02 2e       	mov	r0, r18
    1754:	02 c0       	rjmp	.+4      	; 0x175a <M_Dio_void_setPinValue+0xe8>
    1756:	88 0f       	add	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	0a 94       	dec	r0
    175c:	e2 f7       	brpl	.-8      	; 0x1756 <M_Dio_void_setPinValue+0xe4>
    175e:	84 2b       	or	r24, r20
    1760:	8c 93       	st	X, r24
    1762:	8c c0       	rjmp	.+280    	; 0x187c <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : SET_BIT( PORTD_REG,pin);break;
    1764:	a2 e3       	ldi	r26, 0x32	; 50
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	e2 e3       	ldi	r30, 0x32	; 50
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	48 2f       	mov	r20, r24
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	28 2f       	mov	r18, r24
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	02 2e       	mov	r0, r18
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <M_Dio_void_setPinValue+0x110>
    177e:	88 0f       	add	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	0a 94       	dec	r0
    1784:	e2 f7       	brpl	.-8      	; 0x177e <M_Dio_void_setPinValue+0x10c>
    1786:	84 2b       	or	r24, r20
    1788:	8c 93       	st	X, r24
    178a:	78 c0       	rjmp	.+240    	; 0x187c <M_Dio_void_setPinValue+0x20a>
		}

	}
	else if (Level == DIO_LOW)
    178c:	8c 81       	ldd	r24, Y+4	; 0x04
    178e:	88 23       	and	r24, r24
    1790:	09 f0       	breq	.+2      	; 0x1794 <M_Dio_void_setPinValue+0x122>
    1792:	74 c0       	rjmp	.+232    	; 0x187c <M_Dio_void_setPinValue+0x20a>
	{
		switch(port)
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	28 2f       	mov	r18, r24
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	3e 83       	std	Y+6, r19	; 0x06
    179c:	2d 83       	std	Y+5, r18	; 0x05
    179e:	8d 81       	ldd	r24, Y+5	; 0x05
    17a0:	9e 81       	ldd	r25, Y+6	; 0x06
    17a2:	82 30       	cpi	r24, 0x02	; 2
    17a4:	91 05       	cpc	r25, r1
    17a6:	61 f1       	breq	.+88     	; 0x1800 <M_Dio_void_setPinValue+0x18e>
    17a8:	2d 81       	ldd	r18, Y+5	; 0x05
    17aa:	3e 81       	ldd	r19, Y+6	; 0x06
    17ac:	23 30       	cpi	r18, 0x03	; 3
    17ae:	31 05       	cpc	r19, r1
    17b0:	34 f4       	brge	.+12     	; 0x17be <M_Dio_void_setPinValue+0x14c>
    17b2:	8d 81       	ldd	r24, Y+5	; 0x05
    17b4:	9e 81       	ldd	r25, Y+6	; 0x06
    17b6:	81 30       	cpi	r24, 0x01	; 1
    17b8:	91 05       	cpc	r25, r1
    17ba:	69 f0       	breq	.+26     	; 0x17d6 <M_Dio_void_setPinValue+0x164>
    17bc:	5f c0       	rjmp	.+190    	; 0x187c <M_Dio_void_setPinValue+0x20a>
    17be:	2d 81       	ldd	r18, Y+5	; 0x05
    17c0:	3e 81       	ldd	r19, Y+6	; 0x06
    17c2:	23 30       	cpi	r18, 0x03	; 3
    17c4:	31 05       	cpc	r19, r1
    17c6:	89 f1       	breq	.+98     	; 0x182a <M_Dio_void_setPinValue+0x1b8>
    17c8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ca:	9e 81       	ldd	r25, Y+6	; 0x06
    17cc:	84 30       	cpi	r24, 0x04	; 4
    17ce:	91 05       	cpc	r25, r1
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <M_Dio_void_setPinValue+0x162>
    17d2:	40 c0       	rjmp	.+128    	; 0x1854 <M_Dio_void_setPinValue+0x1e2>
    17d4:	53 c0       	rjmp	.+166    	; 0x187c <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : CLR_BIT( PORTA_REG,pin);break;
    17d6:	ab e3       	ldi	r26, 0x3B	; 59
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	eb e3       	ldi	r30, 0x3B	; 59
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	48 2f       	mov	r20, r24
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	02 2e       	mov	r0, r18
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <M_Dio_void_setPinValue+0x182>
    17f0:	88 0f       	add	r24, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	0a 94       	dec	r0
    17f6:	e2 f7       	brpl	.-8      	; 0x17f0 <M_Dio_void_setPinValue+0x17e>
    17f8:	80 95       	com	r24
    17fa:	84 23       	and	r24, r20
    17fc:	8c 93       	st	X, r24
    17fe:	3e c0       	rjmp	.+124    	; 0x187c <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : CLR_BIT( PORTB_REG,pin);break;
    1800:	a8 e3       	ldi	r26, 0x38	; 56
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e8 e3       	ldi	r30, 0x38	; 56
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	48 2f       	mov	r20, r24
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	02 2e       	mov	r0, r18
    1818:	02 c0       	rjmp	.+4      	; 0x181e <M_Dio_void_setPinValue+0x1ac>
    181a:	88 0f       	add	r24, r24
    181c:	99 1f       	adc	r25, r25
    181e:	0a 94       	dec	r0
    1820:	e2 f7       	brpl	.-8      	; 0x181a <M_Dio_void_setPinValue+0x1a8>
    1822:	80 95       	com	r24
    1824:	84 23       	and	r24, r20
    1826:	8c 93       	st	X, r24
    1828:	29 c0       	rjmp	.+82     	; 0x187c <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : CLR_BIT( PORTC_REG,pin);break;
    182a:	a5 e3       	ldi	r26, 0x35	; 53
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	e5 e3       	ldi	r30, 0x35	; 53
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	48 2f       	mov	r20, r24
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	02 2e       	mov	r0, r18
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <M_Dio_void_setPinValue+0x1d6>
    1844:	88 0f       	add	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	0a 94       	dec	r0
    184a:	e2 f7       	brpl	.-8      	; 0x1844 <M_Dio_void_setPinValue+0x1d2>
    184c:	80 95       	com	r24
    184e:	84 23       	and	r24, r20
    1850:	8c 93       	st	X, r24
    1852:	14 c0       	rjmp	.+40     	; 0x187c <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : CLR_BIT( PORTD_REG,pin);break;
    1854:	a2 e3       	ldi	r26, 0x32	; 50
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e2 e3       	ldi	r30, 0x32	; 50
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	48 2f       	mov	r20, r24
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	02 2e       	mov	r0, r18
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <M_Dio_void_setPinValue+0x200>
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	0a 94       	dec	r0
    1874:	e2 f7       	brpl	.-8      	; 0x186e <M_Dio_void_setPinValue+0x1fc>
    1876:	80 95       	com	r24
    1878:	84 23       	and	r24, r20
    187a:	8c 93       	st	X, r24
		}

	}

}
    187c:	28 96       	adiw	r28, 0x08	; 8
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <M_Dio_en_getPortValue>:
  parameters (in)  :  PortId
  parameters (out) :  Non
  Return Value     : Dio_PortLevelType
******************************************/
Dio_PortLevelType M_Dio_en_getPortValue(Dio_PortType PortId)
{
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	00 d0       	rcall	.+0      	; 0x1894 <M_Dio_en_getPortValue+0x6>
    1894:	00 d0       	rcall	.+0      	; 0x1896 <M_Dio_en_getPortValue+0x8>
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    189a:	8a 83       	std	Y+2, r24	; 0x02
	Dio_PortLevelType Local_Reading;

	switch( PortId)
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	3c 83       	std	Y+4, r19	; 0x04
    18a4:	2b 83       	std	Y+3, r18	; 0x03
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	9c 81       	ldd	r25, Y+4	; 0x04
    18aa:	82 30       	cpi	r24, 0x02	; 2
    18ac:	91 05       	cpc	r25, r1
    18ae:	d9 f0       	breq	.+54     	; 0x18e6 <M_Dio_en_getPortValue+0x58>
    18b0:	2b 81       	ldd	r18, Y+3	; 0x03
    18b2:	3c 81       	ldd	r19, Y+4	; 0x04
    18b4:	23 30       	cpi	r18, 0x03	; 3
    18b6:	31 05       	cpc	r19, r1
    18b8:	34 f4       	brge	.+12     	; 0x18c6 <M_Dio_en_getPortValue+0x38>
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	9c 81       	ldd	r25, Y+4	; 0x04
    18be:	81 30       	cpi	r24, 0x01	; 1
    18c0:	91 05       	cpc	r25, r1
    18c2:	61 f0       	breq	.+24     	; 0x18dc <M_Dio_en_getPortValue+0x4e>
    18c4:	1e c0       	rjmp	.+60     	; 0x1902 <M_Dio_en_getPortValue+0x74>
    18c6:	2b 81       	ldd	r18, Y+3	; 0x03
    18c8:	3c 81       	ldd	r19, Y+4	; 0x04
    18ca:	23 30       	cpi	r18, 0x03	; 3
    18cc:	31 05       	cpc	r19, r1
    18ce:	81 f0       	breq	.+32     	; 0x18f0 <M_Dio_en_getPortValue+0x62>
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	9c 81       	ldd	r25, Y+4	; 0x04
    18d4:	84 30       	cpi	r24, 0x04	; 4
    18d6:	91 05       	cpc	r25, r1
    18d8:	81 f0       	breq	.+32     	; 0x18fa <M_Dio_en_getPortValue+0x6c>
    18da:	13 c0       	rjmp	.+38     	; 0x1902 <M_Dio_en_getPortValue+0x74>
	{
	case DIO_PORTA :Local_Reading =  PORTA_REG;break;
    18dc:	eb e3       	ldi	r30, 0x3B	; 59
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	89 83       	std	Y+1, r24	; 0x01
    18e4:	0e c0       	rjmp	.+28     	; 0x1902 <M_Dio_en_getPortValue+0x74>
	case DIO_PORTB :Local_Reading =  PORTB_REG;break;
    18e6:	e8 e3       	ldi	r30, 0x38	; 56
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	89 83       	std	Y+1, r24	; 0x01
    18ee:	09 c0       	rjmp	.+18     	; 0x1902 <M_Dio_en_getPortValue+0x74>
	case DIO_PORTC :Local_Reading =  PORTC_REG;break;
    18f0:	e5 e3       	ldi	r30, 0x35	; 53
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	89 83       	std	Y+1, r24	; 0x01
    18f8:	04 c0       	rjmp	.+8      	; 0x1902 <M_Dio_en_getPortValue+0x74>
	case DIO_PORTD :Local_Reading =  PORTD_REG;break;
    18fa:	e2 e3       	ldi	r30, 0x32	; 50
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_Reading;
    1902:	89 81       	ldd	r24, Y+1	; 0x01
}
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	08 95       	ret

00001912 <M_Dio_void_setPortValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPortValue(Dio_PortType PortId,Dio_PortLevelType Level)
{
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	00 d0       	rcall	.+0      	; 0x1918 <M_Dio_void_setPortValue+0x6>
    1918:	00 d0       	rcall	.+0      	; 0x191a <M_Dio_void_setPortValue+0x8>
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
    191e:	89 83       	std	Y+1, r24	; 0x01
    1920:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortId)
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	28 2f       	mov	r18, r24
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	3c 83       	std	Y+4, r19	; 0x04
    192a:	2b 83       	std	Y+3, r18	; 0x03
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	9c 81       	ldd	r25, Y+4	; 0x04
    1930:	82 30       	cpi	r24, 0x02	; 2
    1932:	91 05       	cpc	r25, r1
    1934:	d9 f0       	breq	.+54     	; 0x196c <M_Dio_void_setPortValue+0x5a>
    1936:	2b 81       	ldd	r18, Y+3	; 0x03
    1938:	3c 81       	ldd	r19, Y+4	; 0x04
    193a:	23 30       	cpi	r18, 0x03	; 3
    193c:	31 05       	cpc	r19, r1
    193e:	34 f4       	brge	.+12     	; 0x194c <M_Dio_void_setPortValue+0x3a>
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	9c 81       	ldd	r25, Y+4	; 0x04
    1944:	81 30       	cpi	r24, 0x01	; 1
    1946:	91 05       	cpc	r25, r1
    1948:	61 f0       	breq	.+24     	; 0x1962 <M_Dio_void_setPortValue+0x50>
    194a:	1e c0       	rjmp	.+60     	; 0x1988 <M_Dio_void_setPortValue+0x76>
    194c:	2b 81       	ldd	r18, Y+3	; 0x03
    194e:	3c 81       	ldd	r19, Y+4	; 0x04
    1950:	23 30       	cpi	r18, 0x03	; 3
    1952:	31 05       	cpc	r19, r1
    1954:	81 f0       	breq	.+32     	; 0x1976 <M_Dio_void_setPortValue+0x64>
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	9c 81       	ldd	r25, Y+4	; 0x04
    195a:	84 30       	cpi	r24, 0x04	; 4
    195c:	91 05       	cpc	r25, r1
    195e:	81 f0       	breq	.+32     	; 0x1980 <M_Dio_void_setPortValue+0x6e>
    1960:	13 c0       	rjmp	.+38     	; 0x1988 <M_Dio_void_setPortValue+0x76>
	{
    	case DIO_PORTA : PORTA_REG = Level;break;
    1962:	eb e3       	ldi	r30, 0x3B	; 59
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	80 83       	st	Z, r24
    196a:	0e c0       	rjmp	.+28     	; 0x1988 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTB : PORTB_REG = Level;break;
    196c:	e8 e3       	ldi	r30, 0x38	; 56
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	80 83       	st	Z, r24
    1974:	09 c0       	rjmp	.+18     	; 0x1988 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTC : PORTC_REG = Level;break;
    1976:	e5 e3       	ldi	r30, 0x35	; 53
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	80 83       	st	Z, r24
    197e:	04 c0       	rjmp	.+8      	; 0x1988 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTD : PORTD_REG = Level;break;
    1980:	e2 e3       	ldi	r30, 0x32	; 50
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	80 83       	st	Z, r24
	}
}
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <M_Dio_void_togglePinValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_togglePinValue(Dio_ChannelType channelId)
{
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	00 d0       	rcall	.+0      	; 0x199c <M_Dio_void_togglePinValue+0x6>
    199c:	00 d0       	rcall	.+0      	; 0x199e <M_Dio_void_togglePinValue+0x8>
    199e:	0f 92       	push	r0
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	8b 83       	std	Y+3, r24	; 0x03
	u8 pin = channelId % 10;
    19a6:	8b 81       	ldd	r24, Y+3	; 0x03
    19a8:	9a e0       	ldi	r25, 0x0A	; 10
    19aa:	69 2f       	mov	r22, r25
    19ac:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__udivmodqi4>
    19b0:	89 2f       	mov	r24, r25
    19b2:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = channelId/ 10;
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	9a e0       	ldi	r25, 0x0A	; 10
    19b8:	69 2f       	mov	r22, r25
    19ba:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__udivmodqi4>
    19be:	89 83       	std	Y+1, r24	; 0x01

	switch(port)
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	3d 83       	std	Y+5, r19	; 0x05
    19c8:	2c 83       	std	Y+4, r18	; 0x04
    19ca:	8c 81       	ldd	r24, Y+4	; 0x04
    19cc:	9d 81       	ldd	r25, Y+5	; 0x05
    19ce:	82 30       	cpi	r24, 0x02	; 2
    19d0:	91 05       	cpc	r25, r1
    19d2:	51 f1       	breq	.+84     	; 0x1a28 <M_Dio_void_togglePinValue+0x92>
    19d4:	2c 81       	ldd	r18, Y+4	; 0x04
    19d6:	3d 81       	ldd	r19, Y+5	; 0x05
    19d8:	23 30       	cpi	r18, 0x03	; 3
    19da:	31 05       	cpc	r19, r1
    19dc:	34 f4       	brge	.+12     	; 0x19ea <M_Dio_void_togglePinValue+0x54>
    19de:	8c 81       	ldd	r24, Y+4	; 0x04
    19e0:	9d 81       	ldd	r25, Y+5	; 0x05
    19e2:	81 30       	cpi	r24, 0x01	; 1
    19e4:	91 05       	cpc	r25, r1
    19e6:	61 f0       	breq	.+24     	; 0x1a00 <M_Dio_void_togglePinValue+0x6a>
    19e8:	5a c0       	rjmp	.+180    	; 0x1a9e <M_Dio_void_togglePinValue+0x108>
    19ea:	2c 81       	ldd	r18, Y+4	; 0x04
    19ec:	3d 81       	ldd	r19, Y+5	; 0x05
    19ee:	23 30       	cpi	r18, 0x03	; 3
    19f0:	31 05       	cpc	r19, r1
    19f2:	71 f1       	breq	.+92     	; 0x1a50 <M_Dio_void_togglePinValue+0xba>
    19f4:	8c 81       	ldd	r24, Y+4	; 0x04
    19f6:	9d 81       	ldd	r25, Y+5	; 0x05
    19f8:	84 30       	cpi	r24, 0x04	; 4
    19fa:	91 05       	cpc	r25, r1
    19fc:	e9 f1       	breq	.+122    	; 0x1a78 <M_Dio_void_togglePinValue+0xe2>
    19fe:	4f c0       	rjmp	.+158    	; 0x1a9e <M_Dio_void_togglePinValue+0x108>
	{
	case DIO_PORTA :TOG_BIT( PORTA_REG,pin);break;
    1a00:	ab e3       	ldi	r26, 0x3B	; 59
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	eb e3       	ldi	r30, 0x3B	; 59
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	48 2f       	mov	r20, r24
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	28 2f       	mov	r18, r24
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	02 2e       	mov	r0, r18
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <M_Dio_void_togglePinValue+0x88>
    1a1a:	88 0f       	add	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	0a 94       	dec	r0
    1a20:	e2 f7       	brpl	.-8      	; 0x1a1a <M_Dio_void_togglePinValue+0x84>
    1a22:	84 27       	eor	r24, r20
    1a24:	8c 93       	st	X, r24
    1a26:	3b c0       	rjmp	.+118    	; 0x1a9e <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTB :TOG_BIT( PORTB_REG,pin);break;
    1a28:	a8 e3       	ldi	r26, 0x38	; 56
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	e8 e3       	ldi	r30, 0x38	; 56
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	48 2f       	mov	r20, r24
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	02 2e       	mov	r0, r18
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <M_Dio_void_togglePinValue+0xb0>
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	0a 94       	dec	r0
    1a48:	e2 f7       	brpl	.-8      	; 0x1a42 <M_Dio_void_togglePinValue+0xac>
    1a4a:	84 27       	eor	r24, r20
    1a4c:	8c 93       	st	X, r24
    1a4e:	27 c0       	rjmp	.+78     	; 0x1a9e <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTC :TOG_BIT( PORTC_REG,pin);break;
    1a50:	a5 e3       	ldi	r26, 0x35	; 53
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e5 e3       	ldi	r30, 0x35	; 53
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	48 2f       	mov	r20, r24
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	02 2e       	mov	r0, r18
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <M_Dio_void_togglePinValue+0xd8>
    1a6a:	88 0f       	add	r24, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	0a 94       	dec	r0
    1a70:	e2 f7       	brpl	.-8      	; 0x1a6a <M_Dio_void_togglePinValue+0xd4>
    1a72:	84 27       	eor	r24, r20
    1a74:	8c 93       	st	X, r24
    1a76:	13 c0       	rjmp	.+38     	; 0x1a9e <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTD :TOG_BIT( PORTD_REG,pin);break;
    1a78:	a2 e3       	ldi	r26, 0x32	; 50
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	e2 e3       	ldi	r30, 0x32	; 50
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	48 2f       	mov	r20, r24
    1a84:	8a 81       	ldd	r24, Y+2	; 0x02
    1a86:	28 2f       	mov	r18, r24
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	02 2e       	mov	r0, r18
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <M_Dio_void_togglePinValue+0x100>
    1a92:	88 0f       	add	r24, r24
    1a94:	99 1f       	adc	r25, r25
    1a96:	0a 94       	dec	r0
    1a98:	e2 f7       	brpl	.-8      	; 0x1a92 <M_Dio_void_togglePinValue+0xfc>
    1a9a:	84 27       	eor	r24, r20
    1a9c:	8c 93       	st	X, r24
	}

}
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	cf 91       	pop	r28
    1aaa:	df 91       	pop	r29
    1aac:	08 95       	ret

00001aae <H_Relay_Void_WorkOn>:
#include "Relay_Cfg.h"
#include "Relay_Int.h"
#include "Relay_Priv.h"

void H_Relay_Void_WorkOn(Realy_Type relay)
{
    1aae:	df 93       	push	r29
    1ab0:	cf 93       	push	r28
    1ab2:	00 d0       	rcall	.+0      	; 0x1ab4 <H_Relay_Void_WorkOn+0x6>
    1ab4:	0f 92       	push	r0
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	89 83       	std	Y+1, r24	; 0x01
	switch(relay)
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	3b 83       	std	Y+3, r19	; 0x03
    1ac4:	2a 83       	std	Y+2, r18	; 0x02
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aca:	81 30       	cpi	r24, 0x01	; 1
    1acc:	91 05       	cpc	r25, r1
    1ace:	31 f0       	breq	.+12     	; 0x1adc <H_Relay_Void_WorkOn+0x2e>
    1ad0:	2a 81       	ldd	r18, Y+2	; 0x02
    1ad2:	3b 81       	ldd	r19, Y+3	; 0x03
    1ad4:	22 30       	cpi	r18, 0x02	; 2
    1ad6:	31 05       	cpc	r19, r1
    1ad8:	31 f0       	breq	.+12     	; 0x1ae6 <H_Relay_Void_WorkOn+0x38>
    1ada:	09 c0       	rjmp	.+18     	; 0x1aee <H_Relay_Void_WorkOn+0x40>
	{
	case Relay_1:
		M_Dio_void_setPinValue(RELAY_1_PIN, DIO_HIGH);
    1adc:	85 e2       	ldi	r24, 0x25	; 37
    1ade:	61 e0       	ldi	r22, 0x01	; 1
    1ae0:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>
    1ae4:	04 c0       	rjmp	.+8      	; 0x1aee <H_Relay_Void_WorkOn+0x40>
	break;
	case Relay_2:
		M_Dio_void_setPinValue(RELAY_2_PIN, DIO_HIGH);
    1ae6:	81 e1       	ldi	r24, 0x11	; 17
    1ae8:	61 e0       	ldi	r22, 0x01	; 1
    1aea:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>
	break;
	}
}
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	08 95       	ret

00001afa <H_Relay_Void_WorkOff>:

void H_Relay_Void_WorkOff(Realy_Type relay)
{
    1afa:	df 93       	push	r29
    1afc:	cf 93       	push	r28
    1afe:	00 d0       	rcall	.+0      	; 0x1b00 <H_Relay_Void_WorkOff+0x6>
    1b00:	0f 92       	push	r0
    1b02:	cd b7       	in	r28, 0x3d	; 61
    1b04:	de b7       	in	r29, 0x3e	; 62
    1b06:	89 83       	std	Y+1, r24	; 0x01
	switch(relay)
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	3b 83       	std	Y+3, r19	; 0x03
    1b10:	2a 83       	std	Y+2, r18	; 0x02
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	9b 81       	ldd	r25, Y+3	; 0x03
    1b16:	81 30       	cpi	r24, 0x01	; 1
    1b18:	91 05       	cpc	r25, r1
    1b1a:	31 f0       	breq	.+12     	; 0x1b28 <H_Relay_Void_WorkOff+0x2e>
    1b1c:	2a 81       	ldd	r18, Y+2	; 0x02
    1b1e:	3b 81       	ldd	r19, Y+3	; 0x03
    1b20:	22 30       	cpi	r18, 0x02	; 2
    1b22:	31 05       	cpc	r19, r1
    1b24:	31 f0       	breq	.+12     	; 0x1b32 <H_Relay_Void_WorkOff+0x38>
    1b26:	09 c0       	rjmp	.+18     	; 0x1b3a <H_Relay_Void_WorkOff+0x40>
	{
	case Relay_1:
		M_Dio_void_setPinValue(RELAY_1_PIN, DIO_LOW);
    1b28:	85 e2       	ldi	r24, 0x25	; 37
    1b2a:	60 e0       	ldi	r22, 0x00	; 0
    1b2c:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>
    1b30:	04 c0       	rjmp	.+8      	; 0x1b3a <H_Relay_Void_WorkOff+0x40>
	break;
	case Relay_2:
		M_Dio_void_setPinValue(RELAY_2_PIN, DIO_LOW);
    1b32:	81 e1       	ldi	r24, 0x11	; 17
    1b34:	60 e0       	ldi	r22, 0x00	; 0
    1b36:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>
	break;
	}
}
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	08 95       	ret

00001b46 <H_RTC_Void_Init>:
#include "RTC_priv.h"
#include "TWI_init.h"
#include "RTC_types.h"

void H_RTC_Void_Init()
{
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
	M_TWI_Void_InitMaster(TWI_SCL_100KHZ);
    1b4e:	84 e2       	ldi	r24, 0x24	; 36
    1b50:	0e 94 65 07 	call	0xeca	; 0xeca <M_TWI_Void_InitMaster>
}
    1b54:	cf 91       	pop	r28
    1b56:	df 91       	pop	r29
    1b58:	08 95       	ret

00001b5a <H_RTC_Void_SetTime>:

void H_RTC_Void_SetTime(RTC_CONFIG_TIME *Copy_TimeConfig, u8 Copy_DayTime)
{
    1b5a:	df 93       	push	r29
    1b5c:	cf 93       	push	r28
    1b5e:	00 d0       	rcall	.+0      	; 0x1b60 <H_RTC_Void_SetTime+0x6>
    1b60:	00 d0       	rcall	.+0      	; 0x1b62 <H_RTC_Void_SetTime+0x8>
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
    1b66:	9b 83       	std	Y+3, r25	; 0x03
    1b68:	8a 83       	std	Y+2, r24	; 0x02
    1b6a:	6c 83       	std	Y+4, r22	; 0x04
	u8 Temp_Hours = Copy_TimeConfig->RTC_Hours ;
    1b6c:	ea 81       	ldd	r30, Y+2	; 0x02
    1b6e:	fb 81       	ldd	r31, Y+3	; 0x03
    1b70:	80 81       	ld	r24, Z
    1b72:	89 83       	std	Y+1, r24	; 0x01

	/* Send Start Condition*/
	M_TWI_Void_SendStartCondition();
    1b74:	0e 94 87 07 	call	0xf0e	; 0xf0e <M_TWI_Void_SendStartCondition>
	/* Send RTC Address with read*/
	M_TWI_Void_SendByte(RTC_ADDRESS_W);
    1b78:	80 ed       	ldi	r24, 0xD0	; 208
    1b7a:	0e 94 a7 07 	call	0xf4e	; 0xf4e <M_TWI_Void_SendByte>
	/* Send Date address */
	M_TWI_Void_SendByte(RTC_TIME_ADDRESS);
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	0e 94 a7 07 	call	0xf4e	; 0xf4e <M_TWI_Void_SendByte>
	/* Send Time */
	M_TWI_Void_SendByte(H_RTC_DEC_TO_BCD(Copy_TimeConfig->RTC_Seconed));
    1b84:	ea 81       	ldd	r30, Y+2	; 0x02
    1b86:	fb 81       	ldd	r31, Y+3	; 0x03
    1b88:	82 81       	ldd	r24, Z+2	; 0x02
    1b8a:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <H_RTC_DEC_TO_BCD>
    1b8e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <M_TWI_Void_SendByte>

	M_TWI_Void_SendByte(H_RTC_DEC_TO_BCD(Copy_TimeConfig->RTC_Minutes));
    1b92:	ea 81       	ldd	r30, Y+2	; 0x02
    1b94:	fb 81       	ldd	r31, Y+3	; 0x03
    1b96:	81 81       	ldd	r24, Z+1	; 0x01
    1b98:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <H_RTC_DEC_TO_BCD>
    1b9c:	0e 94 a7 07 	call	0xf4e	; 0xf4e <M_TWI_Void_SendByte>

	if (Copy_DayTime == RTC_PM)
    1ba0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba2:	8c 33       	cpi	r24, 0x3C	; 60
    1ba4:	21 f4       	brne	.+8      	; 0x1bae <H_RTC_Void_SetTime+0x54>
	{
		Temp_Hours |= RTC_PM_MASK ;
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
    1ba8:	80 66       	ori	r24, 0x60	; 96
    1baa:	89 83       	std	Y+1, r24	; 0x01
    1bac:	06 c0       	rjmp	.+12     	; 0x1bba <H_RTC_Void_SetTime+0x60>
	}
	else if(Copy_DayTime == RTC_AM)
    1bae:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb0:	88 32       	cpi	r24, 0x28	; 40
    1bb2:	19 f4       	brne	.+6      	; 0x1bba <H_RTC_Void_SetTime+0x60>
	{
		Temp_Hours |= RTC_AM_MASK ;
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
    1bb6:	80 64       	ori	r24, 0x40	; 64
    1bb8:	89 83       	std	Y+1, r24	; 0x01
	}

	M_TWI_Void_SendByte(Temp_Hours);
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	0e 94 a7 07 	call	0xf4e	; 0xf4e <M_TWI_Void_SendByte>

	M_TWI_Void_SendStopCondition();
    1bc0:	0e 94 1e 08 	call	0x103c	; 0x103c <M_TWI_Void_SendStopCondition>
}
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <H_RTC_Void_GetTime>:

RTC_CONFIG_TIME H_RTC_Void_GetTime()
{
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <H_RTC_Void_GetTime+0x6>
    1bd8:	00 d0       	rcall	.+0      	; 0x1bda <H_RTC_Void_GetTime+0x8>
    1bda:	00 d0       	rcall	.+0      	; 0x1bdc <H_RTC_Void_GetTime+0xa>
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
	RTC_CONFIG_TIME Time;
	u8 Temp_Holder ;
	u8 Temp_DayTime;
	/* Send Start Condition*/
	M_TWI_Void_SendStartCondition();
    1be0:	0e 94 87 07 	call	0xf0e	; 0xf0e <M_TWI_Void_SendStartCondition>
	/* Send RTC Address with read*/
	M_TWI_Void_SendByte(RTC_ADDRESS_W);
    1be4:	80 ed       	ldi	r24, 0xD0	; 208
    1be6:	0e 94 a7 07 	call	0xf4e	; 0xf4e <M_TWI_Void_SendByte>
	/* Send Date address */
	M_TWI_Void_SendByte(RTC_TIME_ADDRESS);
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	0e 94 a7 07 	call	0xf4e	; 0xf4e <M_TWI_Void_SendByte>
	/* Send Repeated Start Condition*/
	M_TWI_Void_SendStartCondition();
    1bf0:	0e 94 87 07 	call	0xf0e	; 0xf0e <M_TWI_Void_SendStartCondition>
	/* Send RTC Address with read*/
	M_TWI_Void_SendByte(RTC_ADDRESS_R);
    1bf4:	81 ed       	ldi	r24, 0xD1	; 209
    1bf6:	0e 94 a7 07 	call	0xf4e	; 0xf4e <M_TWI_Void_SendByte>

	/*
	 *  Read Seconed
	 * */
	M_TWI_Void_RecevieWithACK(&Temp_Holder);
    1bfa:	ce 01       	movw	r24, r28
    1bfc:	06 96       	adiw	r24, 0x06	; 6
    1bfe:	0e 94 c0 07 	call	0xf80	; 0xf80 <M_TWI_Void_RecevieWithACK>
	H_RTC_BCD_TO_DEC(Temp_Holder);
    1c02:	8e 81       	ldd	r24, Y+6	; 0x06
    1c04:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <H_RTC_BCD_TO_DEC>
	Time.RTC_Seconed= H_RTC_BCD_TO_DEC(Temp_Holder);
    1c08:	8e 81       	ldd	r24, Y+6	; 0x06
    1c0a:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <H_RTC_BCD_TO_DEC>
    1c0e:	8c 83       	std	Y+4, r24	; 0x04
	/*
	 *  Read Min
	 * */
	M_TWI_Void_RecevieWithACK(&Temp_Holder);
    1c10:	ce 01       	movw	r24, r28
    1c12:	06 96       	adiw	r24, 0x06	; 6
    1c14:	0e 94 c0 07 	call	0xf80	; 0xf80 <M_TWI_Void_RecevieWithACK>
	H_RTC_BCD_TO_DEC(Temp_Holder);
    1c18:	8e 81       	ldd	r24, Y+6	; 0x06
    1c1a:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <H_RTC_BCD_TO_DEC>
	Time.RTC_Minutes = H_RTC_BCD_TO_DEC(Temp_Holder);
    1c1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c20:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <H_RTC_BCD_TO_DEC>
    1c24:	8b 83       	std	Y+3, r24	; 0x03
	/*
	 *  Read Hour
	 * */
	M_TWI_Void_RecevieWitNACK(&Temp_Holder);
    1c26:	ce 01       	movw	r24, r28
    1c28:	06 96       	adiw	r24, 0x06	; 6
    1c2a:	0e 94 de 07 	call	0xfbc	; 0xfbc <M_TWI_Void_RecevieWitNACK>

	Temp_DayTime = Temp_Holder & 0xF0 ;
    1c2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c30:	80 7f       	andi	r24, 0xF0	; 240
    1c32:	89 83       	std	Y+1, r24	; 0x01
	Time.RTC_DayTime = H_RTC_BCD_TO_DEC(Temp_DayTime);
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
    1c36:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <H_RTC_BCD_TO_DEC>
    1c3a:	8d 83       	std	Y+5, r24	; 0x05

	Temp_Holder &= 0x0F;
    1c3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c3e:	8f 70       	andi	r24, 0x0F	; 15
    1c40:	8e 83       	std	Y+6, r24	; 0x06
	Time.RTC_Hours = H_RTC_BCD_TO_DEC(Temp_Holder);
    1c42:	8e 81       	ldd	r24, Y+6	; 0x06
    1c44:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <H_RTC_BCD_TO_DEC>
    1c48:	8a 83       	std	Y+2, r24	; 0x02

	/*
	 *  Send stop
	 * */
	M_TWI_Void_SendStopCondition();
    1c4a:	0e 94 1e 08 	call	0x103c	; 0x103c <M_TWI_Void_SendStopCondition>

	return Time ;
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	9b 81       	ldd	r25, Y+3	; 0x03
    1c52:	ac 81       	ldd	r26, Y+4	; 0x04
    1c54:	bd 81       	ldd	r27, Y+5	; 0x05
}
    1c56:	bc 01       	movw	r22, r24
    1c58:	cd 01       	movw	r24, r26
    1c5a:	26 96       	adiw	r28, 0x06	; 6
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	f8 94       	cli
    1c60:	de bf       	out	0x3e, r29	; 62
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	cd bf       	out	0x3d, r28	; 61
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	08 95       	ret

00001c6c <H_RTC_Void_SetDate>:


void H_RTC_Void_SetDate(RTC_CONFIG_DATE *Copy_DateConfig)
{
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	00 d0       	rcall	.+0      	; 0x1c72 <H_RTC_Void_SetDate+0x6>
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
    1c76:	9a 83       	std	Y+2, r25	; 0x02
    1c78:	89 83       	std	Y+1, r24	; 0x01
	/* Send Start Condition*/
	M_TWI_Void_SendStartCondition();
    1c7a:	0e 94 87 07 	call	0xf0e	; 0xf0e <M_TWI_Void_SendStartCondition>

	/* Send RTC Address with read*/
	M_TWI_Void_SendByte(RTC_ADDRESS_W);
    1c7e:	80 ed       	ldi	r24, 0xD0	; 208
    1c80:	0e 94 a7 07 	call	0xf4e	; 0xf4e <M_TWI_Void_SendByte>

	/* Send Date address */
	M_TWI_Void_SendByte(RTC_DATE_ADDRESS);
    1c84:	84 e0       	ldi	r24, 0x04	; 4
    1c86:	0e 94 a7 07 	call	0xf4e	; 0xf4e <M_TWI_Void_SendByte>

	/* Send Date for the day */
	M_TWI_Void_SendByte(H_RTC_DEC_TO_BCD(Copy_DateConfig->RTC_Day));
    1c8a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c8c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c8e:	80 81       	ld	r24, Z
    1c90:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <H_RTC_DEC_TO_BCD>
    1c94:	0e 94 a7 07 	call	0xf4e	; 0xf4e <M_TWI_Void_SendByte>

	M_TWI_Void_SendByte(H_RTC_DEC_TO_BCD(Copy_DateConfig->RTC_Month));
    1c98:	e9 81       	ldd	r30, Y+1	; 0x01
    1c9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c9c:	81 81       	ldd	r24, Z+1	; 0x01
    1c9e:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <H_RTC_DEC_TO_BCD>
    1ca2:	0e 94 a7 07 	call	0xf4e	; 0xf4e <M_TWI_Void_SendByte>

	M_TWI_Void_SendByte(H_RTC_DEC_TO_BCD(Copy_DateConfig->RTC_Year));
    1ca6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca8:	fa 81       	ldd	r31, Y+2	; 0x02
    1caa:	82 81       	ldd	r24, Z+2	; 0x02
    1cac:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <H_RTC_DEC_TO_BCD>
    1cb0:	0e 94 a7 07 	call	0xf4e	; 0xf4e <M_TWI_Void_SendByte>

	M_TWI_Void_SendStopCondition();
    1cb4:	0e 94 1e 08 	call	0x103c	; 0x103c <M_TWI_Void_SendStopCondition>
}
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	08 95       	ret

00001cc2 <H_RTC_Void_GetDate>:


RTC_CONFIG_DATE H_RTC_Void_GetDate()
{
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
    1cca:	60 97       	sbiw	r28, 0x10	; 16
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	de bf       	out	0x3e, r29	; 62
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	cd bf       	out	0x3d, r28	; 61
	RTC_CONFIG_DATE Date;
	u8 Holder ;

	/* Send Start Condition*/
	M_TWI_Void_SendStartCondition();
    1cd6:	0e 94 87 07 	call	0xf0e	; 0xf0e <M_TWI_Void_SendStartCondition>
	/* Send RTC Address with read*/
	M_TWI_Void_SendByte(RTC_ADDRESS_W);
    1cda:	80 ed       	ldi	r24, 0xD0	; 208
    1cdc:	0e 94 a7 07 	call	0xf4e	; 0xf4e <M_TWI_Void_SendByte>
	/* Send Date address */
	M_TWI_Void_SendByte(RTC_DATE_ADDRESS);
    1ce0:	84 e0       	ldi	r24, 0x04	; 4
    1ce2:	0e 94 a7 07 	call	0xf4e	; 0xf4e <M_TWI_Void_SendByte>
	/* Send Repeated Start Condition*/
	M_TWI_Void_SendStartCondition();
    1ce6:	0e 94 87 07 	call	0xf0e	; 0xf0e <M_TWI_Void_SendStartCondition>
	/* Send RTC Address with read*/
	M_TWI_Void_SendByte(RTC_ADDRESS_R);
    1cea:	81 ed       	ldi	r24, 0xD1	; 209
    1cec:	0e 94 a7 07 	call	0xf4e	; 0xf4e <M_TWI_Void_SendByte>
	/*
	 *  Read Day
	 * */
	M_TWI_Void_RecevieWithACK(&Holder);
    1cf0:	ce 01       	movw	r24, r28
    1cf2:	07 96       	adiw	r24, 0x07	; 7
    1cf4:	0e 94 c0 07 	call	0xf80	; 0xf80 <M_TWI_Void_RecevieWithACK>
	H_RTC_BCD_TO_DEC(Holder);
    1cf8:	8f 81       	ldd	r24, Y+7	; 0x07
    1cfa:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <H_RTC_BCD_TO_DEC>
	Date.RTC_Day= H_RTC_BCD_TO_DEC(Holder);
    1cfe:	8f 81       	ldd	r24, Y+7	; 0x07
    1d00:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <H_RTC_BCD_TO_DEC>
    1d04:	8c 83       	std	Y+4, r24	; 0x04
	/*
	 * Read Months
	 * */
	M_TWI_Void_RecevieWithACK(&Holder);
    1d06:	ce 01       	movw	r24, r28
    1d08:	07 96       	adiw	r24, 0x07	; 7
    1d0a:	0e 94 c0 07 	call	0xf80	; 0xf80 <M_TWI_Void_RecevieWithACK>
	H_RTC_BCD_TO_DEC(Holder);
    1d0e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d10:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <H_RTC_BCD_TO_DEC>
	Date.RTC_Month= H_RTC_BCD_TO_DEC(Holder);
    1d14:	8f 81       	ldd	r24, Y+7	; 0x07
    1d16:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <H_RTC_BCD_TO_DEC>
    1d1a:	8d 83       	std	Y+5, r24	; 0x05
	/*
	 * Read Years
	 * */
	M_TWI_Void_RecevieWitNACK(&Holder);
    1d1c:	ce 01       	movw	r24, r28
    1d1e:	07 96       	adiw	r24, 0x07	; 7
    1d20:	0e 94 de 07 	call	0xfbc	; 0xfbc <M_TWI_Void_RecevieWitNACK>
	H_RTC_BCD_TO_DEC(Holder);
    1d24:	8f 81       	ldd	r24, Y+7	; 0x07
    1d26:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <H_RTC_BCD_TO_DEC>
	Date.RTC_Year= H_RTC_BCD_TO_DEC(Holder);
    1d2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d2c:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <H_RTC_BCD_TO_DEC>
    1d30:	8e 83       	std	Y+6, r24	; 0x06

	/*
	 * STOP TWI
	 */
	M_TWI_Void_SendStopCondition();
    1d32:	0e 94 1e 08 	call	0x103c	; 0x103c <M_TWI_Void_SendStopCondition>

return Date;
    1d36:	ce 01       	movw	r24, r28
    1d38:	01 96       	adiw	r24, 0x01	; 1
    1d3a:	99 87       	std	Y+9, r25	; 0x09
    1d3c:	88 87       	std	Y+8, r24	; 0x08
    1d3e:	fe 01       	movw	r30, r28
    1d40:	34 96       	adiw	r30, 0x04	; 4
    1d42:	fb 87       	std	Y+11, r31	; 0x0b
    1d44:	ea 87       	std	Y+10, r30	; 0x0a
    1d46:	f3 e0       	ldi	r31, 0x03	; 3
    1d48:	fc 87       	std	Y+12, r31	; 0x0c
    1d4a:	ea 85       	ldd	r30, Y+10	; 0x0a
    1d4c:	fb 85       	ldd	r31, Y+11	; 0x0b
    1d4e:	00 80       	ld	r0, Z
    1d50:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d52:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d54:	01 96       	adiw	r24, 0x01	; 1
    1d56:	9b 87       	std	Y+11, r25	; 0x0b
    1d58:	8a 87       	std	Y+10, r24	; 0x0a
    1d5a:	e8 85       	ldd	r30, Y+8	; 0x08
    1d5c:	f9 85       	ldd	r31, Y+9	; 0x09
    1d5e:	00 82       	st	Z, r0
    1d60:	88 85       	ldd	r24, Y+8	; 0x08
    1d62:	99 85       	ldd	r25, Y+9	; 0x09
    1d64:	01 96       	adiw	r24, 0x01	; 1
    1d66:	99 87       	std	Y+9, r25	; 0x09
    1d68:	88 87       	std	Y+8, r24	; 0x08
    1d6a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d6c:	91 50       	subi	r25, 0x01	; 1
    1d6e:	9c 87       	std	Y+12, r25	; 0x0c
    1d70:	ec 85       	ldd	r30, Y+12	; 0x0c
    1d72:	ee 23       	and	r30, r30
    1d74:	51 f7       	brne	.-44     	; 0x1d4a <H_RTC_Void_GetDate+0x88>
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	29 81       	ldd	r18, Y+1	; 0x01
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	9b 81       	ldd	r25, Y+3	; 0x03
    1d82:	2d 87       	std	Y+13, r18	; 0x0d
    1d84:	8e 87       	std	Y+14, r24	; 0x0e
    1d86:	9f 87       	std	Y+15, r25	; 0x0f
    1d88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d8c:	af 85       	ldd	r26, Y+15	; 0x0f
    1d8e:	b8 89       	ldd	r27, Y+16	; 0x10
}
    1d90:	bc 01       	movw	r22, r24
    1d92:	cd 01       	movw	r24, r26
    1d94:	60 96       	adiw	r28, 0x10	; 16
    1d96:	0f b6       	in	r0, 0x3f	; 63
    1d98:	f8 94       	cli
    1d9a:	de bf       	out	0x3e, r29	; 62
    1d9c:	0f be       	out	0x3f, r0	; 63
    1d9e:	cd bf       	out	0x3d, r28	; 61
    1da0:	cf 91       	pop	r28
    1da2:	df 91       	pop	r29
    1da4:	08 95       	ret

00001da6 <H_RTC_DEC_TO_BCD>:

u8 H_RTC_DEC_TO_BCD(u8 Copy_Number)
{
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	00 d0       	rcall	.+0      	; 0x1dac <H_RTC_DEC_TO_BCD+0x6>
    1dac:	0f 92       	push	r0
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
    1db2:	8b 83       	std	Y+3, r24	; 0x03
	u8 Temp_Ones = 0 ;
    1db4:	1a 82       	std	Y+2, r1	; 0x02
	u8 Temp_Tens = 0 ;
    1db6:	19 82       	std	Y+1, r1	; 0x01

Temp_Ones = Copy_Number % 10;
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	9a e0       	ldi	r25, 0x0A	; 10
    1dbc:	69 2f       	mov	r22, r25
    1dbe:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__udivmodqi4>
    1dc2:	89 2f       	mov	r24, r25
    1dc4:	8a 83       	std	Y+2, r24	; 0x02

Temp_Tens = Copy_Number / 10;
    1dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc8:	9a e0       	ldi	r25, 0x0A	; 10
    1dca:	69 2f       	mov	r22, r25
    1dcc:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <__udivmodqi4>
    1dd0:	89 83       	std	Y+1, r24	; 0x01

Temp_Ones &= RTC_ONES_MASK ;
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	8f 70       	andi	r24, 0x0F	; 15
    1dd6:	8a 83       	std	Y+2, r24	; 0x02

Temp_Tens =  (Temp_Tens <<4) & RTC_TENS_MASK;
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	88 2f       	mov	r24, r24
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	82 95       	swap	r24
    1de0:	92 95       	swap	r25
    1de2:	90 7f       	andi	r25, 0xF0	; 240
    1de4:	98 27       	eor	r25, r24
    1de6:	80 7f       	andi	r24, 0xF0	; 240
    1de8:	98 27       	eor	r25, r24
    1dea:	80 77       	andi	r24, 0x70	; 112
    1dec:	89 83       	std	Y+1, r24	; 0x01

return Temp_Ones | Temp_Tens;
    1dee:	9a 81       	ldd	r25, Y+2	; 0x02
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	89 2b       	or	r24, r25
}
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <H_RTC_BCD_TO_DEC>:

u8 H_RTC_BCD_TO_DEC(u8 Copy_Number)
{
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	00 d0       	rcall	.+0      	; 0x1e06 <H_RTC_BCD_TO_DEC+0x6>
    1e06:	0f 92       	push	r0
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	8b 83       	std	Y+3, r24	; 0x03
	u8 Temp_Ones = 0 ;
    1e0e:	1a 82       	std	Y+2, r1	; 0x02
	u8 Temp_Tens = 0 ;
    1e10:	19 82       	std	Y+1, r1	; 0x01

	Temp_Ones = Copy_Number & RTC_ONES_BCD_MASK;
    1e12:	8b 81       	ldd	r24, Y+3	; 0x03
    1e14:	8f 70       	andi	r24, 0x0F	; 15
    1e16:	8a 83       	std	Y+2, r24	; 0x02

	Temp_Tens= Copy_Number & RTC_TENS_BCD_MASK;
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	80 7f       	andi	r24, 0xF0	; 240
    1e1c:	89 83       	std	Y+1, r24	; 0x01

	Temp_Tens = ((Temp_Tens>>4) * 10) ;
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	82 95       	swap	r24
    1e22:	8f 70       	andi	r24, 0x0F	; 15
    1e24:	88 2f       	mov	r24, r24
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	9c 01       	movw	r18, r24
    1e2a:	22 0f       	add	r18, r18
    1e2c:	33 1f       	adc	r19, r19
    1e2e:	c9 01       	movw	r24, r18
    1e30:	88 0f       	add	r24, r24
    1e32:	99 1f       	adc	r25, r25
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	82 0f       	add	r24, r18
    1e3a:	93 1f       	adc	r25, r19
    1e3c:	89 83       	std	Y+1, r24	; 0x01
//	H_LCD_void_sendIntNum((Temp_Ones + Temp_Tens));
	return (Temp_Ones + Temp_Tens);
    1e3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	89 0f       	add	r24, r25
}
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	cf 91       	pop	r28
    1e4c:	df 91       	pop	r29
    1e4e:	08 95       	ret

00001e50 <H_KEYPAD_u8_getPressedKey>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
u8 H_KEYPAD_u8_getPressedKey(void)
{
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
    1e58:	62 97       	sbiw	r28, 0x12	; 18
    1e5a:	0f b6       	in	r0, 0x3f	; 63
    1e5c:	f8 94       	cli
    1e5e:	de bf       	out	0x3e, r29	; 62
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	cd bf       	out	0x3d, r28	; 61
	u8 Local_Pressed_key=NO_PRESSED_KEY;
    1e64:	19 8a       	std	Y+17, r1	; 0x11
	u8 ROW_Index;
	u8 COL_Index;
	for(ROW_Index=0;ROW_Index<4;ROW_Index++)
    1e66:	18 8a       	std	Y+16, r1	; 0x10
    1e68:	c8 c0       	rjmp	.+400    	; 0x1ffa <H_KEYPAD_u8_getPressedKey+0x1aa>
	{
		M_Dio_void_setPinValue(ROWS_ARR[0], DIO_HIGH);
    1e6a:	80 91 76 02 	lds	r24, 0x0276
    1e6e:	61 e0       	ldi	r22, 0x01	; 1
    1e70:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(ROWS_ARR[1], DIO_HIGH);
    1e74:	80 91 77 02 	lds	r24, 0x0277
    1e78:	61 e0       	ldi	r22, 0x01	; 1
    1e7a:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(ROWS_ARR[2], DIO_HIGH);
    1e7e:	80 91 78 02 	lds	r24, 0x0278
    1e82:	61 e0       	ldi	r22, 0x01	; 1
    1e84:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(ROWS_ARR[3], DIO_HIGH);
    1e88:	80 91 79 02 	lds	r24, 0x0279
    1e8c:	61 e0       	ldi	r22, 0x01	; 1
    1e8e:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>

		M_Dio_void_setPinValue(ROWS_ARR[ROW_Index],DIO_LOW);
    1e92:	88 89       	ldd	r24, Y+16	; 0x10
    1e94:	88 2f       	mov	r24, r24
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	fc 01       	movw	r30, r24
    1e9a:	ea 58       	subi	r30, 0x8A	; 138
    1e9c:	fd 4f       	sbci	r31, 0xFD	; 253
    1e9e:	80 81       	ld	r24, Z
    1ea0:	60 e0       	ldi	r22, 0x00	; 0
    1ea2:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>
		for(COL_Index=0;COL_Index<4;COL_Index++)
    1ea6:	1f 86       	std	Y+15, r1	; 0x0f
    1ea8:	a1 c0       	rjmp	.+322    	; 0x1fec <H_KEYPAD_u8_getPressedKey+0x19c>
		{
			if((M_Dio_en_getPinValue(COLS_ARR[COL_Index]))==DIO_LOW)
    1eaa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eac:	88 2f       	mov	r24, r24
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	e6 58       	subi	r30, 0x86	; 134
    1eb4:	fd 4f       	sbci	r31, 0xFD	; 253
    1eb6:	80 81       	ld	r24, Z
    1eb8:	0e 94 b3 0a 	call	0x1566	; 0x1566 <M_Dio_en_getPinValue>
    1ebc:	88 23       	and	r24, r24
    1ebe:	09 f0       	breq	.+2      	; 0x1ec2 <H_KEYPAD_u8_getPressedKey+0x72>
    1ec0:	92 c0       	rjmp	.+292    	; 0x1fe6 <H_KEYPAD_u8_getPressedKey+0x196>
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	a8 e4       	ldi	r26, 0x48	; 72
    1ec8:	b2 e4       	ldi	r27, 0x42	; 66
    1eca:	8b 87       	std	Y+11, r24	; 0x0b
    1ecc:	9c 87       	std	Y+12, r25	; 0x0c
    1ece:	ad 87       	std	Y+13, r26	; 0x0d
    1ed0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	4a e7       	ldi	r20, 0x7A	; 122
    1ee0:	55 e4       	ldi	r21, 0x45	; 69
    1ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	8f 83       	std	Y+7, r24	; 0x07
    1eec:	98 87       	std	Y+8, r25	; 0x08
    1eee:	a9 87       	std	Y+9, r26	; 0x09
    1ef0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ef2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef4:	78 85       	ldd	r23, Y+8	; 0x08
    1ef6:	89 85       	ldd	r24, Y+9	; 0x09
    1ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	40 e8       	ldi	r20, 0x80	; 128
    1f00:	5f e3       	ldi	r21, 0x3F	; 63
    1f02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f06:	88 23       	and	r24, r24
    1f08:	2c f4       	brge	.+10     	; 0x1f14 <H_KEYPAD_u8_getPressedKey+0xc4>
		__ticks = 1;
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	9e 83       	std	Y+6, r25	; 0x06
    1f10:	8d 83       	std	Y+5, r24	; 0x05
    1f12:	3f c0       	rjmp	.+126    	; 0x1f92 <H_KEYPAD_u8_getPressedKey+0x142>
	else if (__tmp > 65535)
    1f14:	6f 81       	ldd	r22, Y+7	; 0x07
    1f16:	78 85       	ldd	r23, Y+8	; 0x08
    1f18:	89 85       	ldd	r24, Y+9	; 0x09
    1f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	3f ef       	ldi	r19, 0xFF	; 255
    1f20:	4f e7       	ldi	r20, 0x7F	; 127
    1f22:	57 e4       	ldi	r21, 0x47	; 71
    1f24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f28:	18 16       	cp	r1, r24
    1f2a:	4c f5       	brge	.+82     	; 0x1f7e <H_KEYPAD_u8_getPressedKey+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 e2       	ldi	r20, 0x20	; 32
    1f3a:	51 e4       	ldi	r21, 0x41	; 65
    1f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	bc 01       	movw	r22, r24
    1f46:	cd 01       	movw	r24, r26
    1f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	9e 83       	std	Y+6, r25	; 0x06
    1f52:	8d 83       	std	Y+5, r24	; 0x05
    1f54:	0f c0       	rjmp	.+30     	; 0x1f74 <H_KEYPAD_u8_getPressedKey+0x124>
    1f56:	80 e9       	ldi	r24, 0x90	; 144
    1f58:	91 e0       	ldi	r25, 0x01	; 1
    1f5a:	9c 83       	std	Y+4, r25	; 0x04
    1f5c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f60:	9c 81       	ldd	r25, Y+4	; 0x04
    1f62:	01 97       	sbiw	r24, 0x01	; 1
    1f64:	f1 f7       	brne	.-4      	; 0x1f62 <H_KEYPAD_u8_getPressedKey+0x112>
    1f66:	9c 83       	std	Y+4, r25	; 0x04
    1f68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	9e 83       	std	Y+6, r25	; 0x06
    1f72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f74:	8d 81       	ldd	r24, Y+5	; 0x05
    1f76:	9e 81       	ldd	r25, Y+6	; 0x06
    1f78:	00 97       	sbiw	r24, 0x00	; 0
    1f7a:	69 f7       	brne	.-38     	; 0x1f56 <H_KEYPAD_u8_getPressedKey+0x106>
    1f7c:	14 c0       	rjmp	.+40     	; 0x1fa6 <H_KEYPAD_u8_getPressedKey+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f80:	78 85       	ldd	r23, Y+8	; 0x08
    1f82:	89 85       	ldd	r24, Y+9	; 0x09
    1f84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	9e 83       	std	Y+6, r25	; 0x06
    1f90:	8d 83       	std	Y+5, r24	; 0x05
    1f92:	8d 81       	ldd	r24, Y+5	; 0x05
    1f94:	9e 81       	ldd	r25, Y+6	; 0x06
    1f96:	9a 83       	std	Y+2, r25	; 0x02
    1f98:	89 83       	std	Y+1, r24	; 0x01
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	f1 f7       	brne	.-4      	; 0x1f9e <H_KEYPAD_u8_getPressedKey+0x14e>
    1fa2:	9a 83       	std	Y+2, r25	; 0x02
    1fa4:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(50);
				while(M_Dio_en_getPinValue(COLS_ARR[COL_Index])==DIO_LOW);
    1fa6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fa8:	88 2f       	mov	r24, r24
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	fc 01       	movw	r30, r24
    1fae:	e6 58       	subi	r30, 0x86	; 134
    1fb0:	fd 4f       	sbci	r31, 0xFD	; 253
    1fb2:	80 81       	ld	r24, Z
    1fb4:	0e 94 b3 0a 	call	0x1566	; 0x1566 <M_Dio_en_getPinValue>
    1fb8:	88 23       	and	r24, r24
    1fba:	a9 f3       	breq	.-22     	; 0x1fa6 <H_KEYPAD_u8_getPressedKey+0x156>
				Local_Pressed_key= KPD_KEYS_CALC[ROW_Index][COL_Index];
    1fbc:	88 89       	ldd	r24, Y+16	; 0x10
    1fbe:	48 2f       	mov	r20, r24
    1fc0:	50 e0       	ldi	r21, 0x00	; 0
    1fc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc4:	28 2f       	mov	r18, r24
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	ca 01       	movw	r24, r20
    1fca:	88 0f       	add	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	88 0f       	add	r24, r24
    1fd0:	99 1f       	adc	r25, r25
    1fd2:	82 0f       	add	r24, r18
    1fd4:	93 1f       	adc	r25, r19
    1fd6:	fc 01       	movw	r30, r24
    1fd8:	ea 59       	subi	r30, 0x9A	; 154
    1fda:	fd 4f       	sbci	r31, 0xFD	; 253
    1fdc:	80 81       	ld	r24, Z
    1fde:	89 8b       	std	Y+17, r24	; 0x11
				//M_Dio_void_setPinValue(DIO_PB7,DIO_HIGH);
				//_delay_ms(50);
				//M_Dio_void_setPinValue(DIO_PB7,DIO_LOW);
				return Local_Pressed_key;
    1fe0:	89 89       	ldd	r24, Y+17	; 0x11
    1fe2:	8a 8b       	std	Y+18, r24	; 0x12
    1fe4:	10 c0       	rjmp	.+32     	; 0x2006 <H_KEYPAD_u8_getPressedKey+0x1b6>
		M_Dio_void_setPinValue(ROWS_ARR[1], DIO_HIGH);
		M_Dio_void_setPinValue(ROWS_ARR[2], DIO_HIGH);
		M_Dio_void_setPinValue(ROWS_ARR[3], DIO_HIGH);

		M_Dio_void_setPinValue(ROWS_ARR[ROW_Index],DIO_LOW);
		for(COL_Index=0;COL_Index<4;COL_Index++)
    1fe6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fe8:	8f 5f       	subi	r24, 0xFF	; 255
    1fea:	8f 87       	std	Y+15, r24	; 0x0f
    1fec:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fee:	84 30       	cpi	r24, 0x04	; 4
    1ff0:	08 f4       	brcc	.+2      	; 0x1ff4 <H_KEYPAD_u8_getPressedKey+0x1a4>
    1ff2:	5b cf       	rjmp	.-330    	; 0x1eaa <H_KEYPAD_u8_getPressedKey+0x5a>
u8 H_KEYPAD_u8_getPressedKey(void)
{
	u8 Local_Pressed_key=NO_PRESSED_KEY;
	u8 ROW_Index;
	u8 COL_Index;
	for(ROW_Index=0;ROW_Index<4;ROW_Index++)
    1ff4:	88 89       	ldd	r24, Y+16	; 0x10
    1ff6:	8f 5f       	subi	r24, 0xFF	; 255
    1ff8:	88 8b       	std	Y+16, r24	; 0x10
    1ffa:	88 89       	ldd	r24, Y+16	; 0x10
    1ffc:	84 30       	cpi	r24, 0x04	; 4
    1ffe:	08 f4       	brcc	.+2      	; 0x2002 <H_KEYPAD_u8_getPressedKey+0x1b2>
    2000:	34 cf       	rjmp	.-408    	; 0x1e6a <H_KEYPAD_u8_getPressedKey+0x1a>
				//M_Dio_void_setPinValue(DIO_PB7,DIO_LOW);
				return Local_Pressed_key;
			}
		}
	}
	return Local_Pressed_key;
    2002:	89 89       	ldd	r24, Y+17	; 0x11
    2004:	8a 8b       	std	Y+18, r24	; 0x12
    2006:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2008:	62 96       	adiw	r28, 0x12	; 18
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	f8 94       	cli
    200e:	de bf       	out	0x3e, r29	; 62
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	cd bf       	out	0x3d, r28	; 61
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	08 95       	ret

0000201a <Finger_Print_Init>:
static u8 Search_Flag=1;

static u8 Empty_Flag=0;

void Finger_Print_Init(void)
{
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
	Port_Init(PORT_Config_Arr);
    2022:	8d e7       	ldi	r24, 0x7D	; 125
    2024:	93 e0       	ldi	r25, 0x03	; 3
    2026:	0e 94 2c 08 	call	0x1058	; 0x1058 <Port_Init>
	H_LCD_void_Init();
    202a:	0e 94 04 18 	call	0x3008	; 0x3008 <H_LCD_void_Init>
	UART_Init(&ARR_UART_CFG_3);
    202e:	89 e3       	ldi	r24, 0x39	; 57
    2030:	93 e0       	ldi	r25, 0x03	; 3
    2032:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_Init>
	UART_SetCallBack(Display_data);
    2036:	8a e9       	ldi	r24, 0x9A	; 154
    2038:	95 e1       	ldi	r25, 0x15	; 21
    203a:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_SetCallBack>
	M_GIE_Void_Enable();
    203e:	0e 94 97 0a 	call	0x152e	; 0x152e <M_GIE_Void_Enable>
	Config_Led(Flashing_light,Purple_led,LED_SPEED,LED_COUNTS);
    2042:	82 e0       	ldi	r24, 0x02	; 2
    2044:	63 e0       	ldi	r22, 0x03	; 3
    2046:	4f e0       	ldi	r20, 0x0F	; 15
    2048:	2f e0       	ldi	r18, 0x0F	; 15
    204a:	0e 94 32 10 	call	0x2064	; 0x2064 <Config_Led>
	Config_Led(Light_always_on,Purple_led,LED_SPEED,LED_COUNTS);
    204e:	83 e0       	ldi	r24, 0x03	; 3
    2050:	63 e0       	ldi	r22, 0x03	; 3
    2052:	4f e0       	ldi	r20, 0x0F	; 15
    2054:	2f e0       	ldi	r18, 0x0F	; 15
    2056:	0e 94 32 10 	call	0x2064	; 0x2064 <Config_Led>
	Flush_Buffer();
    205a:	0e 94 57 15 	call	0x2aae	; 0x2aae <Flush_Buffer>
}
    205e:	cf 91       	pop	r28
    2060:	df 91       	pop	r29
    2062:	08 95       	ret

00002064 <Config_Led>:

void Config_Led(u8 CTRL, u8 LED_COLOR, u8 Speed, u8 Counts)
{
    2064:	df 93       	push	r29
    2066:	cf 93       	push	r28
    2068:	00 d0       	rcall	.+0      	; 0x206a <Config_Led+0x6>
    206a:	00 d0       	rcall	.+0      	; 0x206c <Config_Led+0x8>
    206c:	00 d0       	rcall	.+0      	; 0x206e <Config_Led+0xa>
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
    2072:	8b 83       	std	Y+3, r24	; 0x03
    2074:	6c 83       	std	Y+4, r22	; 0x04
    2076:	4d 83       	std	Y+5, r20	; 0x05
    2078:	2e 83       	std	Y+6, r18	; 0x06
	u8 Check_Sum_Value=0;
    207a:	1a 82       	std	Y+2, r1	; 0x02
	u8 Counter=0;
    207c:	19 82       	std	Y+1, r1	; 0x01
	AuraLedConfig_LED[10]=CTRL;
    207e:	8b 81       	ldd	r24, Y+3	; 0x03
    2080:	80 93 03 03 	sts	0x0303, r24
	AuraLedConfig_LED[11]=Speed;
    2084:	8d 81       	ldd	r24, Y+5	; 0x05
    2086:	80 93 04 03 	sts	0x0304, r24
	AuraLedConfig_LED[12]=LED_COLOR;
    208a:	8c 81       	ldd	r24, Y+4	; 0x04
    208c:	80 93 05 03 	sts	0x0305, r24
	AuraLedConfig_LED[13]=Counts;
    2090:	8e 81       	ldd	r24, Y+6	; 0x06
    2092:	80 93 06 03 	sts	0x0306, r24
	for(Counter=Package_Identifier;Counter<AURA_LED_LENGTH-2;Counter++)
    2096:	86 e0       	ldi	r24, 0x06	; 6
    2098:	89 83       	std	Y+1, r24	; 0x01
    209a:	0d c0       	rjmp	.+26     	; 0x20b6 <Config_Led+0x52>
	{
		Check_Sum_Value+=AuraLedConfig_LED[Counter];
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	88 2f       	mov	r24, r24
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	fc 01       	movw	r30, r24
    20a4:	e7 50       	subi	r30, 0x07	; 7
    20a6:	fd 4f       	sbci	r31, 0xFD	; 253
    20a8:	90 81       	ld	r25, Z
    20aa:	8a 81       	ldd	r24, Y+2	; 0x02
    20ac:	89 0f       	add	r24, r25
    20ae:	8a 83       	std	Y+2, r24	; 0x02
	u8 Counter=0;
	AuraLedConfig_LED[10]=CTRL;
	AuraLedConfig_LED[11]=Speed;
	AuraLedConfig_LED[12]=LED_COLOR;
	AuraLedConfig_LED[13]=Counts;
	for(Counter=Package_Identifier;Counter<AURA_LED_LENGTH-2;Counter++)
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	8f 5f       	subi	r24, 0xFF	; 255
    20b4:	89 83       	std	Y+1, r24	; 0x01
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
    20b8:	8e 30       	cpi	r24, 0x0E	; 14
    20ba:	80 f3       	brcs	.-32     	; 0x209c <Config_Led+0x38>
	{
		Check_Sum_Value+=AuraLedConfig_LED[Counter];
	}
	AuraLedConfig_LED[Check_Sum_Led_byte]=Check_Sum_Value;
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	80 93 08 03 	sts	0x0308, r24
	Finger_Print_Send_Led_Command(AuraLedConfig_LED);
    20c2:	89 ef       	ldi	r24, 0xF9	; 249
    20c4:	92 e0       	ldi	r25, 0x02	; 2
    20c6:	0e 94 6e 10 	call	0x20dc	; 0x20dc <Finger_Print_Send_Led_Command>

}
    20ca:	26 96       	adiw	r28, 0x06	; 6
    20cc:	0f b6       	in	r0, 0x3f	; 63
    20ce:	f8 94       	cli
    20d0:	de bf       	out	0x3e, r29	; 62
    20d2:	0f be       	out	0x3f, r0	; 63
    20d4:	cd bf       	out	0x3d, r28	; 61
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	08 95       	ret

000020dc <Finger_Print_Send_Led_Command>:
	Finger_Print_Send_Command(AuraLedConfig_Purble,AURA_LED_LENGTH);
}
*/

void Finger_Print_Send_Led_Command(u8 *Ptr_Package)
{
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
    20e4:	61 97       	sbiw	r28, 0x11	; 17
    20e6:	0f b6       	in	r0, 0x3f	; 63
    20e8:	f8 94       	cli
    20ea:	de bf       	out	0x3e, r29	; 62
    20ec:	0f be       	out	0x3f, r0	; 63
    20ee:	cd bf       	out	0x3d, r28	; 61
    20f0:	99 8b       	std	Y+17, r25	; 0x11
    20f2:	88 8b       	std	Y+16, r24	; 0x10
	u8 counter=0;
    20f4:	1f 86       	std	Y+15, r1	; 0x0f
	do
	{
		UART_SendByte(Ptr_Package[counter]);
    20f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    20f8:	28 2f       	mov	r18, r24
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	88 89       	ldd	r24, Y+16	; 0x10
    20fe:	99 89       	ldd	r25, Y+17	; 0x11
    2100:	fc 01       	movw	r30, r24
    2102:	e2 0f       	add	r30, r18
    2104:	f3 1f       	adc	r31, r19
    2106:	80 81       	ld	r24, Z
    2108:	0e 94 b3 06 	call	0xd66	; 0xd66 <UART_SendByte>
		counter++;
    210c:	8f 85       	ldd	r24, Y+15	; 0x0f
    210e:	8f 5f       	subi	r24, 0xFF	; 255
    2110:	8f 87       	std	Y+15, r24	; 0x0f
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	a8 e4       	ldi	r26, 0x48	; 72
    2118:	b2 e4       	ldi	r27, 0x42	; 66
    211a:	8b 87       	std	Y+11, r24	; 0x0b
    211c:	9c 87       	std	Y+12, r25	; 0x0c
    211e:	ad 87       	std	Y+13, r26	; 0x0d
    2120:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2122:	6b 85       	ldd	r22, Y+11	; 0x0b
    2124:	7c 85       	ldd	r23, Y+12	; 0x0c
    2126:	8d 85       	ldd	r24, Y+13	; 0x0d
    2128:	9e 85       	ldd	r25, Y+14	; 0x0e
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	4a e7       	ldi	r20, 0x7A	; 122
    2130:	55 e4       	ldi	r21, 0x45	; 69
    2132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	8f 83       	std	Y+7, r24	; 0x07
    213c:	98 87       	std	Y+8, r25	; 0x08
    213e:	a9 87       	std	Y+9, r26	; 0x09
    2140:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2142:	6f 81       	ldd	r22, Y+7	; 0x07
    2144:	78 85       	ldd	r23, Y+8	; 0x08
    2146:	89 85       	ldd	r24, Y+9	; 0x09
    2148:	9a 85       	ldd	r25, Y+10	; 0x0a
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e8       	ldi	r20, 0x80	; 128
    2150:	5f e3       	ldi	r21, 0x3F	; 63
    2152:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2156:	88 23       	and	r24, r24
    2158:	2c f4       	brge	.+10     	; 0x2164 <Finger_Print_Send_Led_Command+0x88>
		__ticks = 1;
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	9e 83       	std	Y+6, r25	; 0x06
    2160:	8d 83       	std	Y+5, r24	; 0x05
    2162:	3f c0       	rjmp	.+126    	; 0x21e2 <Finger_Print_Send_Led_Command+0x106>
	else if (__tmp > 65535)
    2164:	6f 81       	ldd	r22, Y+7	; 0x07
    2166:	78 85       	ldd	r23, Y+8	; 0x08
    2168:	89 85       	ldd	r24, Y+9	; 0x09
    216a:	9a 85       	ldd	r25, Y+10	; 0x0a
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	3f ef       	ldi	r19, 0xFF	; 255
    2170:	4f e7       	ldi	r20, 0x7F	; 127
    2172:	57 e4       	ldi	r21, 0x47	; 71
    2174:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2178:	18 16       	cp	r1, r24
    217a:	4c f5       	brge	.+82     	; 0x21ce <Finger_Print_Send_Led_Command+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217c:	6b 85       	ldd	r22, Y+11	; 0x0b
    217e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2180:	8d 85       	ldd	r24, Y+13	; 0x0d
    2182:	9e 85       	ldd	r25, Y+14	; 0x0e
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e2       	ldi	r20, 0x20	; 32
    218a:	51 e4       	ldi	r21, 0x41	; 65
    218c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	bc 01       	movw	r22, r24
    2196:	cd 01       	movw	r24, r26
    2198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	9e 83       	std	Y+6, r25	; 0x06
    21a2:	8d 83       	std	Y+5, r24	; 0x05
    21a4:	0f c0       	rjmp	.+30     	; 0x21c4 <Finger_Print_Send_Led_Command+0xe8>
    21a6:	80 e9       	ldi	r24, 0x90	; 144
    21a8:	91 e0       	ldi	r25, 0x01	; 1
    21aa:	9c 83       	std	Y+4, r25	; 0x04
    21ac:	8b 83       	std	Y+3, r24	; 0x03
    21ae:	8b 81       	ldd	r24, Y+3	; 0x03
    21b0:	9c 81       	ldd	r25, Y+4	; 0x04
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	f1 f7       	brne	.-4      	; 0x21b2 <Finger_Print_Send_Led_Command+0xd6>
    21b6:	9c 83       	std	Y+4, r25	; 0x04
    21b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ba:	8d 81       	ldd	r24, Y+5	; 0x05
    21bc:	9e 81       	ldd	r25, Y+6	; 0x06
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	9e 83       	std	Y+6, r25	; 0x06
    21c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c4:	8d 81       	ldd	r24, Y+5	; 0x05
    21c6:	9e 81       	ldd	r25, Y+6	; 0x06
    21c8:	00 97       	sbiw	r24, 0x00	; 0
    21ca:	69 f7       	brne	.-38     	; 0x21a6 <Finger_Print_Send_Led_Command+0xca>
    21cc:	14 c0       	rjmp	.+40     	; 0x21f6 <Finger_Print_Send_Led_Command+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ce:	6f 81       	ldd	r22, Y+7	; 0x07
    21d0:	78 85       	ldd	r23, Y+8	; 0x08
    21d2:	89 85       	ldd	r24, Y+9	; 0x09
    21d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	9e 83       	std	Y+6, r25	; 0x06
    21e0:	8d 83       	std	Y+5, r24	; 0x05
    21e2:	8d 81       	ldd	r24, Y+5	; 0x05
    21e4:	9e 81       	ldd	r25, Y+6	; 0x06
    21e6:	9a 83       	std	Y+2, r25	; 0x02
    21e8:	89 83       	std	Y+1, r24	; 0x01
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	9a 81       	ldd	r25, Y+2	; 0x02
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	f1 f7       	brne	.-4      	; 0x21ee <Finger_Print_Send_Led_Command+0x112>
    21f2:	9a 83       	std	Y+2, r25	; 0x02
    21f4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
	}while(counter<AURA_LED_LENGTH);
    21f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21f8:	80 31       	cpi	r24, 0x10	; 16
    21fa:	08 f4       	brcc	.+2      	; 0x21fe <Finger_Print_Send_Led_Command+0x122>
    21fc:	7c cf       	rjmp	.-264    	; 0x20f6 <Finger_Print_Send_Led_Command+0x1a>
}
    21fe:	61 96       	adiw	r28, 0x11	; 17
    2200:	0f b6       	in	r0, 0x3f	; 63
    2202:	f8 94       	cli
    2204:	de bf       	out	0x3e, r29	; 62
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	cd bf       	out	0x3d, r28	; 61
    220a:	cf 91       	pop	r28
    220c:	df 91       	pop	r29
    220e:	08 95       	ret

00002210 <Finger_Print_Send_Command>:
void Finger_Print_Send_Command(u8 *Ptr_Package,u8 Package_Length )
{
    2210:	df 93       	push	r29
    2212:	cf 93       	push	r28
    2214:	cd b7       	in	r28, 0x3d	; 61
    2216:	de b7       	in	r29, 0x3e	; 62
    2218:	a0 97       	sbiw	r28, 0x20	; 32
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	cd bf       	out	0x3d, r28	; 61
    2224:	9f 8f       	std	Y+31, r25	; 0x1f
    2226:	8e 8f       	std	Y+30, r24	; 0x1e
    2228:	68 a3       	std	Y+32, r22	; 0x20
	u8 counter=0;
    222a:	1d 8e       	std	Y+29, r1	; 0x1d
	do
	{
		UART_SendByte(Ptr_Package[counter]);
    222c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    222e:	28 2f       	mov	r18, r24
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2234:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2236:	fc 01       	movw	r30, r24
    2238:	e2 0f       	add	r30, r18
    223a:	f3 1f       	adc	r31, r19
    223c:	80 81       	ld	r24, Z
    223e:	0e 94 b3 06 	call	0xd66	; 0xd66 <UART_SendByte>
		counter++;
    2242:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2244:	8f 5f       	subi	r24, 0xFF	; 255
    2246:	8d 8f       	std	Y+29, r24	; 0x1d
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	a8 e4       	ldi	r26, 0x48	; 72
    224e:	b2 e4       	ldi	r27, 0x42	; 66
    2250:	89 8f       	std	Y+25, r24	; 0x19
    2252:	9a 8f       	std	Y+26, r25	; 0x1a
    2254:	ab 8f       	std	Y+27, r26	; 0x1b
    2256:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2258:	69 8d       	ldd	r22, Y+25	; 0x19
    225a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    225c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    225e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	4a e7       	ldi	r20, 0x7A	; 122
    2266:	55 e4       	ldi	r21, 0x45	; 69
    2268:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	8d 8b       	std	Y+21, r24	; 0x15
    2272:	9e 8b       	std	Y+22, r25	; 0x16
    2274:	af 8b       	std	Y+23, r26	; 0x17
    2276:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2278:	6d 89       	ldd	r22, Y+21	; 0x15
    227a:	7e 89       	ldd	r23, Y+22	; 0x16
    227c:	8f 89       	ldd	r24, Y+23	; 0x17
    227e:	98 8d       	ldd	r25, Y+24	; 0x18
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	40 e8       	ldi	r20, 0x80	; 128
    2286:	5f e3       	ldi	r21, 0x3F	; 63
    2288:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    228c:	88 23       	and	r24, r24
    228e:	2c f4       	brge	.+10     	; 0x229a <Finger_Print_Send_Command+0x8a>
		__ticks = 1;
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	9c 8b       	std	Y+20, r25	; 0x14
    2296:	8b 8b       	std	Y+19, r24	; 0x13
    2298:	3f c0       	rjmp	.+126    	; 0x2318 <Finger_Print_Send_Command+0x108>
	else if (__tmp > 65535)
    229a:	6d 89       	ldd	r22, Y+21	; 0x15
    229c:	7e 89       	ldd	r23, Y+22	; 0x16
    229e:	8f 89       	ldd	r24, Y+23	; 0x17
    22a0:	98 8d       	ldd	r25, Y+24	; 0x18
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	3f ef       	ldi	r19, 0xFF	; 255
    22a6:	4f e7       	ldi	r20, 0x7F	; 127
    22a8:	57 e4       	ldi	r21, 0x47	; 71
    22aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22ae:	18 16       	cp	r1, r24
    22b0:	4c f5       	brge	.+82     	; 0x2304 <Finger_Print_Send_Command+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b2:	69 8d       	ldd	r22, Y+25	; 0x19
    22b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	40 e2       	ldi	r20, 0x20	; 32
    22c0:	51 e4       	ldi	r21, 0x41	; 65
    22c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	bc 01       	movw	r22, r24
    22cc:	cd 01       	movw	r24, r26
    22ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	9c 8b       	std	Y+20, r25	; 0x14
    22d8:	8b 8b       	std	Y+19, r24	; 0x13
    22da:	0f c0       	rjmp	.+30     	; 0x22fa <Finger_Print_Send_Command+0xea>
    22dc:	80 e9       	ldi	r24, 0x90	; 144
    22de:	91 e0       	ldi	r25, 0x01	; 1
    22e0:	9a 8b       	std	Y+18, r25	; 0x12
    22e2:	89 8b       	std	Y+17, r24	; 0x11
    22e4:	89 89       	ldd	r24, Y+17	; 0x11
    22e6:	9a 89       	ldd	r25, Y+18	; 0x12
    22e8:	01 97       	sbiw	r24, 0x01	; 1
    22ea:	f1 f7       	brne	.-4      	; 0x22e8 <Finger_Print_Send_Command+0xd8>
    22ec:	9a 8b       	std	Y+18, r25	; 0x12
    22ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f0:	8b 89       	ldd	r24, Y+19	; 0x13
    22f2:	9c 89       	ldd	r25, Y+20	; 0x14
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	9c 8b       	std	Y+20, r25	; 0x14
    22f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22fa:	8b 89       	ldd	r24, Y+19	; 0x13
    22fc:	9c 89       	ldd	r25, Y+20	; 0x14
    22fe:	00 97       	sbiw	r24, 0x00	; 0
    2300:	69 f7       	brne	.-38     	; 0x22dc <Finger_Print_Send_Command+0xcc>
    2302:	14 c0       	rjmp	.+40     	; 0x232c <Finger_Print_Send_Command+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2304:	6d 89       	ldd	r22, Y+21	; 0x15
    2306:	7e 89       	ldd	r23, Y+22	; 0x16
    2308:	8f 89       	ldd	r24, Y+23	; 0x17
    230a:	98 8d       	ldd	r25, Y+24	; 0x18
    230c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	9c 8b       	std	Y+20, r25	; 0x14
    2316:	8b 8b       	std	Y+19, r24	; 0x13
    2318:	8b 89       	ldd	r24, Y+19	; 0x13
    231a:	9c 89       	ldd	r25, Y+20	; 0x14
    231c:	98 8b       	std	Y+16, r25	; 0x10
    231e:	8f 87       	std	Y+15, r24	; 0x0f
    2320:	8f 85       	ldd	r24, Y+15	; 0x0f
    2322:	98 89       	ldd	r25, Y+16	; 0x10
    2324:	01 97       	sbiw	r24, 0x01	; 1
    2326:	f1 f7       	brne	.-4      	; 0x2324 <Finger_Print_Send_Command+0x114>
    2328:	98 8b       	std	Y+16, r25	; 0x10
    232a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
	}while(counter<Package_Length);
    232c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    232e:	88 a1       	ldd	r24, Y+32	; 0x20
    2330:	98 17       	cp	r25, r24
    2332:	08 f4       	brcc	.+2      	; 0x2336 <Finger_Print_Send_Command+0x126>
    2334:	7b cf       	rjmp	.-266    	; 0x222c <Finger_Print_Send_Command+0x1c>
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	aa ef       	ldi	r26, 0xFA	; 250
    233c:	b3 e4       	ldi	r27, 0x43	; 67
    233e:	8b 87       	std	Y+11, r24	; 0x0b
    2340:	9c 87       	std	Y+12, r25	; 0x0c
    2342:	ad 87       	std	Y+13, r26	; 0x0d
    2344:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2346:	6b 85       	ldd	r22, Y+11	; 0x0b
    2348:	7c 85       	ldd	r23, Y+12	; 0x0c
    234a:	8d 85       	ldd	r24, Y+13	; 0x0d
    234c:	9e 85       	ldd	r25, Y+14	; 0x0e
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	4a e7       	ldi	r20, 0x7A	; 122
    2354:	55 e4       	ldi	r21, 0x45	; 69
    2356:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	8f 83       	std	Y+7, r24	; 0x07
    2360:	98 87       	std	Y+8, r25	; 0x08
    2362:	a9 87       	std	Y+9, r26	; 0x09
    2364:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2366:	6f 81       	ldd	r22, Y+7	; 0x07
    2368:	78 85       	ldd	r23, Y+8	; 0x08
    236a:	89 85       	ldd	r24, Y+9	; 0x09
    236c:	9a 85       	ldd	r25, Y+10	; 0x0a
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e8       	ldi	r20, 0x80	; 128
    2374:	5f e3       	ldi	r21, 0x3F	; 63
    2376:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    237a:	88 23       	and	r24, r24
    237c:	2c f4       	brge	.+10     	; 0x2388 <Finger_Print_Send_Command+0x178>
		__ticks = 1;
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	9e 83       	std	Y+6, r25	; 0x06
    2384:	8d 83       	std	Y+5, r24	; 0x05
    2386:	3f c0       	rjmp	.+126    	; 0x2406 <Finger_Print_Send_Command+0x1f6>
	else if (__tmp > 65535)
    2388:	6f 81       	ldd	r22, Y+7	; 0x07
    238a:	78 85       	ldd	r23, Y+8	; 0x08
    238c:	89 85       	ldd	r24, Y+9	; 0x09
    238e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	3f ef       	ldi	r19, 0xFF	; 255
    2394:	4f e7       	ldi	r20, 0x7F	; 127
    2396:	57 e4       	ldi	r21, 0x47	; 71
    2398:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    239c:	18 16       	cp	r1, r24
    239e:	4c f5       	brge	.+82     	; 0x23f2 <Finger_Print_Send_Command+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    23a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	40 e2       	ldi	r20, 0x20	; 32
    23ae:	51 e4       	ldi	r21, 0x41	; 65
    23b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	bc 01       	movw	r22, r24
    23ba:	cd 01       	movw	r24, r26
    23bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	9e 83       	std	Y+6, r25	; 0x06
    23c6:	8d 83       	std	Y+5, r24	; 0x05
    23c8:	0f c0       	rjmp	.+30     	; 0x23e8 <Finger_Print_Send_Command+0x1d8>
    23ca:	80 e9       	ldi	r24, 0x90	; 144
    23cc:	91 e0       	ldi	r25, 0x01	; 1
    23ce:	9c 83       	std	Y+4, r25	; 0x04
    23d0:	8b 83       	std	Y+3, r24	; 0x03
    23d2:	8b 81       	ldd	r24, Y+3	; 0x03
    23d4:	9c 81       	ldd	r25, Y+4	; 0x04
    23d6:	01 97       	sbiw	r24, 0x01	; 1
    23d8:	f1 f7       	brne	.-4      	; 0x23d6 <Finger_Print_Send_Command+0x1c6>
    23da:	9c 83       	std	Y+4, r25	; 0x04
    23dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23de:	8d 81       	ldd	r24, Y+5	; 0x05
    23e0:	9e 81       	ldd	r25, Y+6	; 0x06
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	9e 83       	std	Y+6, r25	; 0x06
    23e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ea:	9e 81       	ldd	r25, Y+6	; 0x06
    23ec:	00 97       	sbiw	r24, 0x00	; 0
    23ee:	69 f7       	brne	.-38     	; 0x23ca <Finger_Print_Send_Command+0x1ba>
    23f0:	14 c0       	rjmp	.+40     	; 0x241a <Finger_Print_Send_Command+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f2:	6f 81       	ldd	r22, Y+7	; 0x07
    23f4:	78 85       	ldd	r23, Y+8	; 0x08
    23f6:	89 85       	ldd	r24, Y+9	; 0x09
    23f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	9e 83       	std	Y+6, r25	; 0x06
    2404:	8d 83       	std	Y+5, r24	; 0x05
    2406:	8d 81       	ldd	r24, Y+5	; 0x05
    2408:	9e 81       	ldd	r25, Y+6	; 0x06
    240a:	9a 83       	std	Y+2, r25	; 0x02
    240c:	89 83       	std	Y+1, r24	; 0x01
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	9a 81       	ldd	r25, Y+2	; 0x02
    2412:	01 97       	sbiw	r24, 0x01	; 1
    2414:	f1 f7       	brne	.-4      	; 0x2412 <Finger_Print_Send_Command+0x202>
    2416:	9a 83       	std	Y+2, r25	; 0x02
    2418:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    241a:	a0 96       	adiw	r28, 0x20	; 32
    241c:	0f b6       	in	r0, 0x3f	; 63
    241e:	f8 94       	cli
    2420:	de bf       	out	0x3e, r29	; 62
    2422:	0f be       	out	0x3f, r0	; 63
    2424:	cd bf       	out	0x3d, r28	; 61
    2426:	cf 91       	pop	r28
    2428:	df 91       	pop	r29
    242a:	08 95       	ret

0000242c <Finger_Print_Enroll>:

Error_States_FB Finger_Print_Enroll(u8 FB_ID)
{
    242c:	df 93       	push	r29
    242e:	cf 93       	push	r28
    2430:	00 d0       	rcall	.+0      	; 0x2432 <Finger_Print_Enroll+0x6>
    2432:	00 d0       	rcall	.+0      	; 0x2434 <Finger_Print_Enroll+0x8>
    2434:	00 d0       	rcall	.+0      	; 0x2436 <Finger_Print_Enroll+0xa>
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
    243a:	8e 83       	std	Y+6, r24	; 0x06
	Image2Tz Return_Status_Char;
	REG_MODEL Return_Status_RegModel;
	STORE_TEMP Return_Status_Store;
	//Config_Led(Flashing_light,Blue_led,LED_SPEED,LED_COUNTS);
	//Config_Led(Light_always_on,Blue_led,LED_SPEED,LED_COUNTS);
	Return_Status_Gen=Generate_Image();
    243c:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <Generate_Image>
    2440:	8c 83       	std	Y+4, r24	; 0x04
	if(Return_Status_Gen==Finger_Collection_Success)
    2442:	8c 81       	ldd	r24, Y+4	; 0x04
    2444:	88 23       	and	r24, r24
    2446:	11 f5       	brne	.+68     	; 0x248c <Finger_Print_Enroll+0x60>
	{
		Return_Status_Char=Char_File_Generate(CharBuffer1);
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	0e 94 cc 12 	call	0x2598	; 0x2598 <Char_File_Generate>
    244e:	8b 83       	std	Y+3, r24	; 0x03
		if(Return_Status_Char==Generate_character_file_complete)
    2450:	8b 81       	ldd	r24, Y+3	; 0x03
    2452:	88 23       	and	r24, r24
    2454:	d9 f4       	brne	.+54     	; 0x248c <Finger_Print_Enroll+0x60>
		{
			Return_Status_Gen=Generate_Image();
    2456:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <Generate_Image>
    245a:	8c 83       	std	Y+4, r24	; 0x04
			if(Return_Status_Gen==Finger_Collection_Success)
    245c:	8c 81       	ldd	r24, Y+4	; 0x04
    245e:	88 23       	and	r24, r24
    2460:	a9 f4       	brne	.+42     	; 0x248c <Finger_Print_Enroll+0x60>
			{
				Return_Status_Char=Char_File_Generate(CharBuffer2);
    2462:	82 e0       	ldi	r24, 0x02	; 2
    2464:	0e 94 cc 12 	call	0x2598	; 0x2598 <Char_File_Generate>
    2468:	8b 83       	std	Y+3, r24	; 0x03
				if(Return_Status_Char==Generate_character_file_complete)
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	88 23       	and	r24, r24
    246e:	71 f4       	brne	.+28     	; 0x248c <Finger_Print_Enroll+0x60>
				{
					Return_Status_RegModel=Generate_Template();
    2470:	0e 94 0a 13 	call	0x2614	; 0x2614 <Generate_Template>
    2474:	8a 83       	std	Y+2, r24	; 0x02
					if(Return_Status_RegModel==Operation_Sucess)
    2476:	8a 81       	ldd	r24, Y+2	; 0x02
    2478:	88 23       	and	r24, r24
    247a:	41 f4       	brne	.+16     	; 0x248c <Finger_Print_Enroll+0x60>
					{
						Return_Status_Store=Store_Template(FB_ID);
    247c:	8e 81       	ldd	r24, Y+6	; 0x06
    247e:	0e 94 bc 13 	call	0x2778	; 0x2778 <Store_Template>
    2482:	89 83       	std	Y+1, r24	; 0x01
						if(Return_Status_Store==Storage_Success)
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	88 23       	and	r24, r24
    2488:	09 f4       	brne	.+2      	; 0x248c <Finger_Print_Enroll+0x60>
						{
							Status = No_Error;
    248a:	1d 82       	std	Y+5, r1	; 0x05
				}
			}
		}
	}

	return Status;
    248c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    248e:	26 96       	adiw	r28, 0x06	; 6
    2490:	0f b6       	in	r0, 0x3f	; 63
    2492:	f8 94       	cli
    2494:	de bf       	out	0x3e, r29	; 62
    2496:	0f be       	out	0x3f, r0	; 63
    2498:	cd bf       	out	0x3d, r28	; 61
    249a:	cf 91       	pop	r28
    249c:	df 91       	pop	r29
    249e:	08 95       	ret

000024a0 <Finger_Print_Match>:
u8 Finger_Print_Match(void)
{
    24a0:	df 93       	push	r29
    24a2:	cf 93       	push	r28
    24a4:	00 d0       	rcall	.+0      	; 0x24a6 <Finger_Print_Match+0x6>
    24a6:	00 d0       	rcall	.+0      	; 0x24a8 <Finger_Print_Match+0x8>
    24a8:	0f 92       	push	r0
    24aa:	cd b7       	in	r28, 0x3d	; 61
    24ac:	de b7       	in	r29, 0x3e	; 62
	GEN_Image Return_Status_Gen;
	Image2Tz Return_Status_Char;
	SEARCH_TEMP Return_Status_Search;
//	Config_Led(Flashing_light,Blue_led,LED_SPEED,LED_COUNTS);
	//Config_Led(Light_always_on,Blue_led,LED_SPEED,LED_COUNTS);
	Return_Status_Gen=Generate_Image();
    24ae:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <Generate_Image>
    24b2:	8b 83       	std	Y+3, r24	; 0x03
	if(Return_Status_Gen==Finger_Collection_Success)
    24b4:	8b 81       	ldd	r24, Y+3	; 0x03
    24b6:	88 23       	and	r24, r24
    24b8:	91 f4       	brne	.+36     	; 0x24de <Finger_Print_Match+0x3e>
	{
		Return_Status_Char=Char_File_Generate(CharBuffer1);
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	0e 94 cc 12 	call	0x2598	; 0x2598 <Char_File_Generate>
    24c0:	8a 83       	std	Y+2, r24	; 0x02
		if(Return_Status_Char==Generate_character_file_complete)
    24c2:	8a 81       	ldd	r24, Y+2	; 0x02
    24c4:	88 23       	and	r24, r24
    24c6:	59 f4       	brne	.+22     	; 0x24de <Finger_Print_Match+0x3e>
		{
			Return_Status_Search=Search_For_Template(&User_ID);
    24c8:	ce 01       	movw	r24, r28
    24ca:	04 96       	adiw	r24, 0x04	; 4
    24cc:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <Search_For_Template>
    24d0:	89 83       	std	Y+1, r24	; 0x01
			if(Return_Status_Search==Found_matching_finger)
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
    24d4:	88 23       	and	r24, r24
    24d6:	19 f4       	brne	.+6      	; 0x24de <Finger_Print_Match+0x3e>
			{
				return User_ID;
    24d8:	8c 81       	ldd	r24, Y+4	; 0x04
    24da:	8d 83       	std	Y+5, r24	; 0x05
    24dc:	02 c0       	rjmp	.+4      	; 0x24e2 <Finger_Print_Match+0x42>
			}
		}
	}
	return User_ID;
    24de:	8c 81       	ldd	r24, Y+4	; 0x04
    24e0:	8d 83       	std	Y+5, r24	; 0x05
    24e2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	0f 90       	pop	r0
    24ee:	cf 91       	pop	r28
    24f0:	df 91       	pop	r29
    24f2:	08 95       	ret

000024f4 <Generate_Image>:
GEN_Image Generate_Image(void)
{
    24f4:	df 93       	push	r29
    24f6:	cf 93       	push	r28
    24f8:	00 d0       	rcall	.+0      	; 0x24fa <Generate_Image+0x6>
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62
    24fe:	3f c0       	rjmp	.+126    	; 0x257e <Generate_Image+0x8a>
	GEN_Image Status;
	while(Gen_Img_Flag)
	{
		H_LCD_void_ClearDisplay();
    2500:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <H_LCD_void_ClearDisplay>
		H_LCD_void_sendString("Check Finger!");
    2504:	80 e6       	ldi	r24, 0x60	; 96
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
		//_delay_ms(2000);
		Finger_Print_Send_Command(GetImage,GEN_IMAGE_LENGTH);
    250c:	8a e9       	ldi	r24, 0x9A	; 154
    250e:	92 e0       	ldi	r25, 0x02	; 2
    2510:	6c e0       	ldi	r22, 0x0C	; 12
    2512:	0e 94 08 11 	call	0x2210	; 0x2210 <Finger_Print_Send_Command>
		if(Buffer[Confirmation_Code]==Finger_Collection_Success)
    2516:	80 91 0f 04 	lds	r24, 0x040F
    251a:	88 23       	and	r24, r24
    251c:	61 f4       	brne	.+24     	; 0x2536 <Generate_Image+0x42>
		{
				Status=Finger_Collection_Success;
    251e:	19 82       	std	Y+1, r1	; 0x01
				//H_LCD_void_ClearDisplay();
				//H_LCD_void_sendString("Check  done");
				//Config_Led(Flashing_light,Blue_led,LED_SPEED,LED_COUNTS);
				//Flush_Buffer();
				Config_Led(Light_always_on,Blue_led,LED_SPEED,LED_COUNTS);
    2520:	83 e0       	ldi	r24, 0x03	; 3
    2522:	62 e0       	ldi	r22, 0x02	; 2
    2524:	4f e0       	ldi	r20, 0x0F	; 15
    2526:	2f e0       	ldi	r18, 0x0F	; 15
    2528:	0e 94 32 10 	call	0x2064	; 0x2064 <Config_Led>
				Flush_Buffer();
    252c:	0e 94 57 15 	call	0x2aae	; 0x2aae <Flush_Buffer>
				return Status;
    2530:	89 81       	ldd	r24, Y+1	; 0x01
    2532:	8a 83       	std	Y+2, r24	; 0x02
    2534:	2b c0       	rjmp	.+86     	; 0x258c <Generate_Image+0x98>
		}
		else if(Buffer[Confirmation_Code]==Error_When_Receiving_Package_Gen)
    2536:	80 91 0f 04 	lds	r24, 0x040F
    253a:	81 30       	cpi	r24, 0x01	; 1
    253c:	49 f4       	brne	.+18     	; 0x2550 <Generate_Image+0x5c>
		{
			//Config_Led(Flashing_light,Red_led,LED_SPEED,LED_COUNTS);
			Config_Led(Light_always_on,Red_led,LED_SPEED,LED_COUNTS);
    253e:	83 e0       	ldi	r24, 0x03	; 3
    2540:	61 e0       	ldi	r22, 0x01	; 1
    2542:	4f e0       	ldi	r20, 0x0F	; 15
    2544:	2f e0       	ldi	r18, 0x0F	; 15
    2546:	0e 94 32 10 	call	0x2064	; 0x2064 <Config_Led>
			Flush_Buffer();
    254a:	0e 94 57 15 	call	0x2aae	; 0x2aae <Flush_Buffer>
    254e:	17 c0       	rjmp	.+46     	; 0x257e <Generate_Image+0x8a>

		}
		else if(Buffer[Confirmation_Code]==Can_not_detect_finger)
    2550:	80 91 0f 04 	lds	r24, 0x040F
    2554:	82 30       	cpi	r24, 0x02	; 2
    2556:	59 f4       	brne	.+22     	; 0x256e <Generate_Image+0x7a>
		{
		//	Flush_Buffer();
			H_LCD_void_ClearDisplay();
    2558:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <H_LCD_void_ClearDisplay>
			//H_LCD_void_sendString("Check Finger again");
			//Config_Led(Flashing_light,Red_led,LED_SPEED,LED_COUNTS);
			Config_Led(Light_always_on,Red_led,LED_SPEED,LED_COUNTS);
    255c:	83 e0       	ldi	r24, 0x03	; 3
    255e:	61 e0       	ldi	r22, 0x01	; 1
    2560:	4f e0       	ldi	r20, 0x0F	; 15
    2562:	2f e0       	ldi	r18, 0x0F	; 15
    2564:	0e 94 32 10 	call	0x2064	; 0x2064 <Config_Led>
			Flush_Buffer();
    2568:	0e 94 57 15 	call	0x2aae	; 0x2aae <Flush_Buffer>
    256c:	08 c0       	rjmp	.+16     	; 0x257e <Generate_Image+0x8a>
		else
		{
			//Config_Led(Flashing_light,Red_led,LED_SPEED,LED_COUNTS);
		//	Flush_Buffer();

			Config_Led(Light_always_on,Red_led,LED_SPEED,LED_COUNTS);
    256e:	83 e0       	ldi	r24, 0x03	; 3
    2570:	61 e0       	ldi	r22, 0x01	; 1
    2572:	4f e0       	ldi	r20, 0x0F	; 15
    2574:	2f e0       	ldi	r18, 0x0F	; 15
    2576:	0e 94 32 10 	call	0x2064	; 0x2064 <Config_Led>
			Flush_Buffer();
    257a:	0e 94 57 15 	call	0x2aae	; 0x2aae <Flush_Buffer>
	return User_ID;
}
GEN_Image Generate_Image(void)
{
	GEN_Image Status;
	while(Gen_Img_Flag)
    257e:	80 91 4d 03 	lds	r24, 0x034D
    2582:	88 23       	and	r24, r24
    2584:	09 f0       	breq	.+2      	; 0x2588 <Generate_Image+0x94>
    2586:	bc cf       	rjmp	.-136    	; 0x2500 <Generate_Image+0xc>

			Config_Led(Light_always_on,Red_led,LED_SPEED,LED_COUNTS);
			Flush_Buffer();
		}
	}
	return Status;
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	8a 83       	std	Y+2, r24	; 0x02
    258c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    258e:	0f 90       	pop	r0
    2590:	0f 90       	pop	r0
    2592:	cf 91       	pop	r28
    2594:	df 91       	pop	r29
    2596:	08 95       	ret

00002598 <Char_File_Generate>:
Image2Tz  Char_File_Generate(u8 Buffer_ID)
{
    2598:	df 93       	push	r29
    259a:	cf 93       	push	r28
    259c:	00 d0       	rcall	.+0      	; 0x259e <Char_File_Generate+0x6>
    259e:	0f 92       	push	r0
    25a0:	cd b7       	in	r28, 0x3d	; 61
    25a2:	de b7       	in	r29, 0x3e	; 62
    25a4:	8a 83       	std	Y+2, r24	; 0x02
    25a6:	29 c0       	rjmp	.+82     	; 0x25fa <Char_File_Generate+0x62>
	Image2Tz Status;
	while(Img_2_TZ_Flag)
	{
		if(Buffer_ID==CharBuffer1)
    25a8:	8a 81       	ldd	r24, Y+2	; 0x02
    25aa:	81 30       	cpi	r24, 0x01	; 1
    25ac:	31 f4       	brne	.+12     	; 0x25ba <Char_File_Generate+0x22>
		{
			Finger_Print_Send_Command(Img2TZ_1,IMAGE_2TZ_1_LENGTH);
    25ae:	86 ea       	ldi	r24, 0xA6	; 166
    25b0:	92 e0       	ldi	r25, 0x02	; 2
    25b2:	6d e0       	ldi	r22, 0x0D	; 13
    25b4:	0e 94 08 11 	call	0x2210	; 0x2210 <Finger_Print_Send_Command>
    25b8:	08 c0       	rjmp	.+16     	; 0x25ca <Char_File_Generate+0x32>
		}
		else if(Buffer_ID==CharBuffer2)
    25ba:	8a 81       	ldd	r24, Y+2	; 0x02
    25bc:	82 30       	cpi	r24, 0x02	; 2
    25be:	29 f4       	brne	.+10     	; 0x25ca <Char_File_Generate+0x32>
		{
			Finger_Print_Send_Command(Img2TZ_2,IMAGE_2TZ_2_LENGTH);
    25c0:	83 eb       	ldi	r24, 0xB3	; 179
    25c2:	92 e0       	ldi	r25, 0x02	; 2
    25c4:	6d e0       	ldi	r22, 0x0D	; 13
    25c6:	0e 94 08 11 	call	0x2210	; 0x2210 <Finger_Print_Send_Command>
		}
		if(Buffer[Confirmation_Code]==Generate_character_file_complete)
    25ca:	80 91 0f 04 	lds	r24, 0x040F
    25ce:	88 23       	and	r24, r24
    25d0:	61 f4       	brne	.+24     	; 0x25ea <Char_File_Generate+0x52>
		{
			Status = Generate_character_file_complete;
    25d2:	19 82       	std	Y+1, r1	; 0x01
			//H_LCD_void_sendString("Buffer done");
			//_delay_ms(1000);
			//Config_Led(Flashing_light,Blue_led,LED_SPEED,LED_COUNTS);
		//	Flush_Buffer();

			Config_Led(Light_always_on,Blue_led,LED_SPEED,LED_COUNTS);
    25d4:	83 e0       	ldi	r24, 0x03	; 3
    25d6:	62 e0       	ldi	r22, 0x02	; 2
    25d8:	4f e0       	ldi	r20, 0x0F	; 15
    25da:	2f e0       	ldi	r18, 0x0F	; 15
    25dc:	0e 94 32 10 	call	0x2064	; 0x2064 <Config_Led>
			Flush_Buffer();
    25e0:	0e 94 57 15 	call	0x2aae	; 0x2aae <Flush_Buffer>
			return Status;
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	8b 83       	std	Y+3, r24	; 0x03
    25e8:	0e c0       	rjmp	.+28     	; 0x2606 <Char_File_Generate+0x6e>
		else
		{
			//Config_Led(Flashing_light,Red_led,LED_SPEED,LED_COUNTS);
			//Flush_Buffer();

			Config_Led(Light_always_on,Red_led,LED_SPEED,LED_COUNTS);
    25ea:	83 e0       	ldi	r24, 0x03	; 3
    25ec:	61 e0       	ldi	r22, 0x01	; 1
    25ee:	4f e0       	ldi	r20, 0x0F	; 15
    25f0:	2f e0       	ldi	r18, 0x0F	; 15
    25f2:	0e 94 32 10 	call	0x2064	; 0x2064 <Config_Led>
			Flush_Buffer();
    25f6:	0e 94 57 15 	call	0x2aae	; 0x2aae <Flush_Buffer>
	return Status;
}
Image2Tz  Char_File_Generate(u8 Buffer_ID)
{
	Image2Tz Status;
	while(Img_2_TZ_Flag)
    25fa:	80 91 4e 03 	lds	r24, 0x034E
    25fe:	88 23       	and	r24, r24
    2600:	99 f6       	brne	.-90     	; 0x25a8 <Char_File_Generate+0x10>
			Config_Led(Light_always_on,Red_led,LED_SPEED,LED_COUNTS);
			Flush_Buffer();
			//_delay_ms(250);
		}
	}
	return Status;
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	8b 83       	std	Y+3, r24	; 0x03
    2606:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2608:	0f 90       	pop	r0
    260a:	0f 90       	pop	r0
    260c:	0f 90       	pop	r0
    260e:	cf 91       	pop	r28
    2610:	df 91       	pop	r29
    2612:	08 95       	ret

00002614 <Generate_Template>:

REG_MODEL Generate_Template(void)
{
    2614:	df 93       	push	r29
    2616:	cf 93       	push	r28
    2618:	cd b7       	in	r28, 0x3d	; 61
    261a:	de b7       	in	r29, 0x3e	; 62
    261c:	60 97       	sbiw	r28, 0x10	; 16
    261e:	0f b6       	in	r0, 0x3f	; 63
    2620:	f8 94       	cli
    2622:	de bf       	out	0x3e, r29	; 62
    2624:	0f be       	out	0x3f, r0	; 63
    2626:	cd bf       	out	0x3d, r28	; 61
    2628:	96 c0       	rjmp	.+300    	; 0x2756 <Generate_Template+0x142>
	REG_MODEL Status;
	while(Reg_Model_Flag)
	{
		Finger_Print_Send_Command(Reg_Model,REG_MODEL_LENGTH);
    262a:	80 ec       	ldi	r24, 0xC0	; 192
    262c:	92 e0       	ldi	r25, 0x02	; 2
    262e:	6c e0       	ldi	r22, 0x0C	; 12
    2630:	0e 94 08 11 	call	0x2210	; 0x2210 <Finger_Print_Send_Command>
		if(Buffer[Confirmation_Code]==Operation_Sucess)
    2634:	80 91 0f 04 	lds	r24, 0x040F
    2638:	88 23       	and	r24, r24
    263a:	09 f0       	breq	.+2      	; 0x263e <Generate_Template+0x2a>
    263c:	84 c0       	rjmp	.+264    	; 0x2746 <Generate_Template+0x132>
		{
			Status=Operation_Sucess;
    263e:	1f 86       	std	Y+15, r1	; 0x0f
			H_LCD_void_ClearDisplay();
    2640:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <H_LCD_void_ClearDisplay>
			//H_LCD_void_sendString("Register Model done");
			H_LCD_void_sendString("PLS Wait :)");
    2644:	8e e6       	ldi	r24, 0x6E	; 110
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	aa e7       	ldi	r26, 0x7A	; 122
    2652:	b4 e4       	ldi	r27, 0x44	; 68
    2654:	8b 87       	std	Y+11, r24	; 0x0b
    2656:	9c 87       	std	Y+12, r25	; 0x0c
    2658:	ad 87       	std	Y+13, r26	; 0x0d
    265a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    265c:	6b 85       	ldd	r22, Y+11	; 0x0b
    265e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2660:	8d 85       	ldd	r24, Y+13	; 0x0d
    2662:	9e 85       	ldd	r25, Y+14	; 0x0e
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	4a e7       	ldi	r20, 0x7A	; 122
    266a:	55 e4       	ldi	r21, 0x45	; 69
    266c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	8f 83       	std	Y+7, r24	; 0x07
    2676:	98 87       	std	Y+8, r25	; 0x08
    2678:	a9 87       	std	Y+9, r26	; 0x09
    267a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    267c:	6f 81       	ldd	r22, Y+7	; 0x07
    267e:	78 85       	ldd	r23, Y+8	; 0x08
    2680:	89 85       	ldd	r24, Y+9	; 0x09
    2682:	9a 85       	ldd	r25, Y+10	; 0x0a
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	40 e8       	ldi	r20, 0x80	; 128
    268a:	5f e3       	ldi	r21, 0x3F	; 63
    268c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2690:	88 23       	and	r24, r24
    2692:	2c f4       	brge	.+10     	; 0x269e <Generate_Template+0x8a>
		__ticks = 1;
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	9e 83       	std	Y+6, r25	; 0x06
    269a:	8d 83       	std	Y+5, r24	; 0x05
    269c:	3f c0       	rjmp	.+126    	; 0x271c <Generate_Template+0x108>
	else if (__tmp > 65535)
    269e:	6f 81       	ldd	r22, Y+7	; 0x07
    26a0:	78 85       	ldd	r23, Y+8	; 0x08
    26a2:	89 85       	ldd	r24, Y+9	; 0x09
    26a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	3f ef       	ldi	r19, 0xFF	; 255
    26aa:	4f e7       	ldi	r20, 0x7F	; 127
    26ac:	57 e4       	ldi	r21, 0x47	; 71
    26ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26b2:	18 16       	cp	r1, r24
    26b4:	4c f5       	brge	.+82     	; 0x2708 <Generate_Template+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    26bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	40 e2       	ldi	r20, 0x20	; 32
    26c4:	51 e4       	ldi	r21, 0x41	; 65
    26c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	bc 01       	movw	r22, r24
    26d0:	cd 01       	movw	r24, r26
    26d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	9e 83       	std	Y+6, r25	; 0x06
    26dc:	8d 83       	std	Y+5, r24	; 0x05
    26de:	0f c0       	rjmp	.+30     	; 0x26fe <Generate_Template+0xea>
    26e0:	80 e9       	ldi	r24, 0x90	; 144
    26e2:	91 e0       	ldi	r25, 0x01	; 1
    26e4:	9c 83       	std	Y+4, r25	; 0x04
    26e6:	8b 83       	std	Y+3, r24	; 0x03
    26e8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ea:	9c 81       	ldd	r25, Y+4	; 0x04
    26ec:	01 97       	sbiw	r24, 0x01	; 1
    26ee:	f1 f7       	brne	.-4      	; 0x26ec <Generate_Template+0xd8>
    26f0:	9c 83       	std	Y+4, r25	; 0x04
    26f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f4:	8d 81       	ldd	r24, Y+5	; 0x05
    26f6:	9e 81       	ldd	r25, Y+6	; 0x06
    26f8:	01 97       	sbiw	r24, 0x01	; 1
    26fa:	9e 83       	std	Y+6, r25	; 0x06
    26fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2700:	9e 81       	ldd	r25, Y+6	; 0x06
    2702:	00 97       	sbiw	r24, 0x00	; 0
    2704:	69 f7       	brne	.-38     	; 0x26e0 <Generate_Template+0xcc>
    2706:	14 c0       	rjmp	.+40     	; 0x2730 <Generate_Template+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2708:	6f 81       	ldd	r22, Y+7	; 0x07
    270a:	78 85       	ldd	r23, Y+8	; 0x08
    270c:	89 85       	ldd	r24, Y+9	; 0x09
    270e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	9e 83       	std	Y+6, r25	; 0x06
    271a:	8d 83       	std	Y+5, r24	; 0x05
    271c:	8d 81       	ldd	r24, Y+5	; 0x05
    271e:	9e 81       	ldd	r25, Y+6	; 0x06
    2720:	9a 83       	std	Y+2, r25	; 0x02
    2722:	89 83       	std	Y+1, r24	; 0x01
    2724:	89 81       	ldd	r24, Y+1	; 0x01
    2726:	9a 81       	ldd	r25, Y+2	; 0x02
    2728:	01 97       	sbiw	r24, 0x01	; 1
    272a:	f1 f7       	brne	.-4      	; 0x2728 <Generate_Template+0x114>
    272c:	9a 83       	std	Y+2, r25	; 0x02
    272e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			//Config_Led(Flashing_light,Blue_led,LED_SPEED,LED_COUNTS);
			//Flush_Buffer();

			Config_Led(Light_always_on,Blue_led,LED_SPEED,LED_COUNTS);
    2730:	83 e0       	ldi	r24, 0x03	; 3
    2732:	62 e0       	ldi	r22, 0x02	; 2
    2734:	4f e0       	ldi	r20, 0x0F	; 15
    2736:	2f e0       	ldi	r18, 0x0F	; 15
    2738:	0e 94 32 10 	call	0x2064	; 0x2064 <Config_Led>
			Flush_Buffer();
    273c:	0e 94 57 15 	call	0x2aae	; 0x2aae <Flush_Buffer>
			return Status;
    2740:	8f 85       	ldd	r24, Y+15	; 0x0f
    2742:	88 8b       	std	Y+16, r24	; 0x10
    2744:	0f c0       	rjmp	.+30     	; 0x2764 <Generate_Template+0x150>
		else
		{
			//Config_Led(Flashing_light,Red_led,LED_SPEED,LED_COUNTS);
			//Flush_Buffer();

			Config_Led(Light_always_on,Red_led,LED_SPEED,LED_COUNTS);
    2746:	83 e0       	ldi	r24, 0x03	; 3
    2748:	61 e0       	ldi	r22, 0x01	; 1
    274a:	4f e0       	ldi	r20, 0x0F	; 15
    274c:	2f e0       	ldi	r18, 0x0F	; 15
    274e:	0e 94 32 10 	call	0x2064	; 0x2064 <Config_Led>
			Flush_Buffer();
    2752:	0e 94 57 15 	call	0x2aae	; 0x2aae <Flush_Buffer>
}

REG_MODEL Generate_Template(void)
{
	REG_MODEL Status;
	while(Reg_Model_Flag)
    2756:	80 91 4f 03 	lds	r24, 0x034F
    275a:	88 23       	and	r24, r24
    275c:	09 f0       	breq	.+2      	; 0x2760 <Generate_Template+0x14c>
    275e:	65 cf       	rjmp	.-310    	; 0x262a <Generate_Template+0x16>
			Config_Led(Light_always_on,Red_led,LED_SPEED,LED_COUNTS);
			Flush_Buffer();
		}
	}

	return Status;
    2760:	8f 85       	ldd	r24, Y+15	; 0x0f
    2762:	88 8b       	std	Y+16, r24	; 0x10
    2764:	88 89       	ldd	r24, Y+16	; 0x10
}
    2766:	60 96       	adiw	r28, 0x10	; 16
    2768:	0f b6       	in	r0, 0x3f	; 63
    276a:	f8 94       	cli
    276c:	de bf       	out	0x3e, r29	; 62
    276e:	0f be       	out	0x3f, r0	; 63
    2770:	cd bf       	out	0x3d, r28	; 61
    2772:	cf 91       	pop	r28
    2774:	df 91       	pop	r29
    2776:	08 95       	ret

00002778 <Store_Template>:
STORE_TEMP Store_Template(u8 Page_ID)
{
    2778:	df 93       	push	r29
    277a:	cf 93       	push	r28
    277c:	00 d0       	rcall	.+0      	; 0x277e <Store_Template+0x6>
    277e:	0f 92       	push	r0
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
    2784:	8a 83       	std	Y+2, r24	; 0x02
    2786:	2a c0       	rjmp	.+84     	; 0x27dc <Store_Template+0x64>
	STORE_TEMP Status;
	while(Store_Flag)
	{
		Check_Sum(Page_ID);
    2788:	8a 81       	ldd	r24, Y+2	; 0x02
    278a:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <Check_Sum>
		Finger_Print_Send_Command(Store,STORE_LENGTH);
    278e:	8e e3       	ldi	r24, 0x3E	; 62
    2790:	93 e0       	ldi	r25, 0x03	; 3
    2792:	6f e0       	ldi	r22, 0x0F	; 15
    2794:	0e 94 08 11 	call	0x2210	; 0x2210 <Finger_Print_Send_Command>
		H_LCD_void_sendIntNum(Buffer[Confirmation_Code]);
    2798:	80 91 0f 04 	lds	r24, 0x040F
    279c:	88 2f       	mov	r24, r24
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	a0 e0       	ldi	r26, 0x00	; 0
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	bc 01       	movw	r22, r24
    27a6:	cd 01       	movw	r24, r26
    27a8:	0e 94 c8 1a 	call	0x3590	; 0x3590 <H_LCD_void_sendIntNum>
		if(Buffer[Confirmation_Code]==Storage_Success)
    27ac:	80 91 0f 04 	lds	r24, 0x040F
    27b0:	88 23       	and	r24, r24
    27b2:	61 f4       	brne	.+24     	; 0x27cc <Store_Template+0x54>
		{
			Status=Storage_Success;
    27b4:	19 82       	std	Y+1, r1	; 0x01
			//H_LCD_void_sendString("Storing done");
			//_delay_ms(1000);
			//Config_Led(Flashing_light,Blue_led,LED_SPEED,LED_COUNTS);
			//Flush_Buffer();

			Config_Led(Light_always_on,Blue_led,LED_SPEED,LED_COUNTS);
    27b6:	83 e0       	ldi	r24, 0x03	; 3
    27b8:	62 e0       	ldi	r22, 0x02	; 2
    27ba:	4f e0       	ldi	r20, 0x0F	; 15
    27bc:	2f e0       	ldi	r18, 0x0F	; 15
    27be:	0e 94 32 10 	call	0x2064	; 0x2064 <Config_Led>
			Flush_Buffer();
    27c2:	0e 94 57 15 	call	0x2aae	; 0x2aae <Flush_Buffer>
			return Status;
    27c6:	89 81       	ldd	r24, Y+1	; 0x01
    27c8:	8b 83       	std	Y+3, r24	; 0x03
    27ca:	0e c0       	rjmp	.+28     	; 0x27e8 <Store_Template+0x70>
		else
		{
			//Config_Led(Flashing_light,Red_led,LED_SPEED,LED_COUNTS);
			//Flush_Buffer();

			Config_Led(Light_always_on,Red_led,LED_SPEED,LED_COUNTS);
    27cc:	83 e0       	ldi	r24, 0x03	; 3
    27ce:	61 e0       	ldi	r22, 0x01	; 1
    27d0:	4f e0       	ldi	r20, 0x0F	; 15
    27d2:	2f e0       	ldi	r18, 0x0F	; 15
    27d4:	0e 94 32 10 	call	0x2064	; 0x2064 <Config_Led>
			Flush_Buffer();
    27d8:	0e 94 57 15 	call	0x2aae	; 0x2aae <Flush_Buffer>
	return Status;
}
STORE_TEMP Store_Template(u8 Page_ID)
{
	STORE_TEMP Status;
	while(Store_Flag)
    27dc:	80 91 50 03 	lds	r24, 0x0350
    27e0:	88 23       	and	r24, r24
    27e2:	91 f6       	brne	.-92     	; 0x2788 <Store_Template+0x10>
			Config_Led(Light_always_on,Red_led,LED_SPEED,LED_COUNTS);
			Flush_Buffer();
		}
	}

	return Status;
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	8b 83       	std	Y+3, r24	; 0x03
    27e8:	8b 81       	ldd	r24, Y+3	; 0x03

}
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	0f 90       	pop	r0
    27f0:	cf 91       	pop	r28
    27f2:	df 91       	pop	r29
    27f4:	08 95       	ret

000027f6 <Search_For_Template>:
SEARCH_TEMP Search_For_Template(u8 *Page_ID)
{
    27f6:	df 93       	push	r29
    27f8:	cf 93       	push	r28
    27fa:	00 d0       	rcall	.+0      	; 0x27fc <Search_For_Template+0x6>
    27fc:	00 d0       	rcall	.+0      	; 0x27fe <Search_For_Template+0x8>
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	9b 83       	std	Y+3, r25	; 0x03
    2804:	8a 83       	std	Y+2, r24	; 0x02
    2806:	2e c0       	rjmp	.+92     	; 0x2864 <Search_For_Template+0x6e>
	SEARCH_TEMP Status;
	while(Search_Flag)
	{
		Finger_Print_Send_Command(Search,SEARCH_LENGTH);
    2808:	8c ec       	ldi	r24, 0xCC	; 204
    280a:	92 e0       	ldi	r25, 0x02	; 2
    280c:	61 e1       	ldi	r22, 0x11	; 17
    280e:	0e 94 08 11 	call	0x2210	; 0x2210 <Finger_Print_Send_Command>
		if(Buffer[Confirmation_Code]==Found_matching_finger)
    2812:	80 91 0f 04 	lds	r24, 0x040F
    2816:	88 23       	and	r24, r24
    2818:	89 f4       	brne	.+34     	; 0x283c <Search_For_Template+0x46>
		{
			Status=Found_matching_finger;
    281a:	19 82       	std	Y+1, r1	; 0x01
			//H_LCD_void_ClearDisplay();
			//H_LCD_void_sendString("FingerPrint Found");
			//_delay_ms(2000);

			*Page_ID=Buffer[PAGE_ID];
    281c:	80 91 11 04 	lds	r24, 0x0411
    2820:	ea 81       	ldd	r30, Y+2	; 0x02
    2822:	fb 81       	ldd	r31, Y+3	; 0x03
    2824:	80 83       	st	Z, r24
			//Config_Led(Light_always_on,Blue_led,LED_SPEED,LED_COUNTS);
			//Flush_Buffer();
			//_delay_ms(1000);
			//_delay_ms(500);
			//Config_Led(Flashing_light,Purple_led,LED_SPEED,LED_COUNTS);
			Config_Led(Light_always_on,Purple_led,LED_SPEED,LED_COUNTS);
    2826:	83 e0       	ldi	r24, 0x03	; 3
    2828:	63 e0       	ldi	r22, 0x03	; 3
    282a:	4f e0       	ldi	r20, 0x0F	; 15
    282c:	2f e0       	ldi	r18, 0x0F	; 15
    282e:	0e 94 32 10 	call	0x2064	; 0x2064 <Config_Led>
			Flush_Buffer();
    2832:	0e 94 57 15 	call	0x2aae	; 0x2aae <Flush_Buffer>



			return Status;
    2836:	89 81       	ldd	r24, Y+1	; 0x01
    2838:	8c 83       	std	Y+4, r24	; 0x04
    283a:	1a c0       	rjmp	.+52     	; 0x2870 <Search_For_Template+0x7a>
		}
		else if(Buffer[Confirmation_Code]==No_matching_in_lib)
    283c:	80 91 0f 04 	lds	r24, 0x040F
    2840:	89 30       	cpi	r24, 0x09	; 9
    2842:	81 f4       	brne	.+32     	; 0x2864 <Search_For_Template+0x6e>
		{
			Status=No_matching_in_lib;
    2844:	89 e0       	ldi	r24, 0x09	; 9
    2846:	89 83       	std	Y+1, r24	; 0x01
			//H_LCD_void_ClearDisplay();
			//H_LCD_void_sendString("No matching Found");
			*Page_ID=NO_USER_RETURN;
    2848:	ea 81       	ldd	r30, Y+2	; 0x02
    284a:	fb 81       	ldd	r31, Y+3	; 0x03
    284c:	10 82       	st	Z, r1
			//Flush_Buffer();
			//_delay_ms(1000);
			//_delay_ms(500);
			//Config_Led(Flashing_light,Red_led,LED_SPEED,LED_COUNTS);
			Config_Led(Light_always_on,Red_led,LED_SPEED,LED_COUNTS);
    284e:	83 e0       	ldi	r24, 0x03	; 3
    2850:	61 e0       	ldi	r22, 0x01	; 1
    2852:	4f e0       	ldi	r20, 0x0F	; 15
    2854:	2f e0       	ldi	r18, 0x0F	; 15
    2856:	0e 94 32 10 	call	0x2064	; 0x2064 <Config_Led>
			Flush_Buffer();
    285a:	0e 94 57 15 	call	0x2aae	; 0x2aae <Flush_Buffer>


			return Status;
    285e:	89 81       	ldd	r24, Y+1	; 0x01
    2860:	8c 83       	std	Y+4, r24	; 0x04
    2862:	06 c0       	rjmp	.+12     	; 0x2870 <Search_For_Template+0x7a>

}
SEARCH_TEMP Search_For_Template(u8 *Page_ID)
{
	SEARCH_TEMP Status;
	while(Search_Flag)
    2864:	80 91 51 03 	lds	r24, 0x0351
    2868:	88 23       	and	r24, r24
    286a:	71 f6       	brne	.-100    	; 0x2808 <Search_For_Template+0x12>

			return Status;
		}
	}

	return Status;
    286c:	89 81       	ldd	r24, Y+1	; 0x01
    286e:	8c 83       	std	Y+4, r24	; 0x04
    2870:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2872:	0f 90       	pop	r0
    2874:	0f 90       	pop	r0
    2876:	0f 90       	pop	r0
    2878:	0f 90       	pop	r0
    287a:	cf 91       	pop	r28
    287c:	df 91       	pop	r29
    287e:	08 95       	ret

00002880 <Finger_Print_Empty_Templates>:

void Finger_Print_Empty_Templates(void)
{
    2880:	df 93       	push	r29
    2882:	cf 93       	push	r28
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
    2888:	6c 97       	sbiw	r28, 0x1c	; 28
    288a:	0f b6       	in	r0, 0x3f	; 63
    288c:	f8 94       	cli
    288e:	de bf       	out	0x3e, r29	; 62
    2890:	0f be       	out	0x3f, r0	; 63
    2892:	cd bf       	out	0x3d, r28	; 61
	Empty_Flag=1;
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	80 93 05 04 	sts	0x0405, r24
    289a:	fb c0       	rjmp	.+502    	; 0x2a92 <Finger_Print_Empty_Templates+0x212>
	while(Empty_Flag)
	{
		Finger_Print_Send_Command(Empty_Library,EMPTY_LIBRARY_LENGTH);
    289c:	8d ed       	ldi	r24, 0xDD	; 221
    289e:	92 e0       	ldi	r25, 0x02	; 2
    28a0:	6c e0       	ldi	r22, 0x0C	; 12
    28a2:	0e 94 08 11 	call	0x2210	; 0x2210 <Finger_Print_Send_Command>
		if(Buffer[Confirmation_Code]==Empty_success)
    28a6:	80 91 0f 04 	lds	r24, 0x040F
    28aa:	88 23       	and	r24, r24
    28ac:	09 f0       	breq	.+2      	; 0x28b0 <Finger_Print_Empty_Templates+0x30>
    28ae:	7d c0       	rjmp	.+250    	; 0x29aa <Finger_Print_Empty_Templates+0x12a>
		{
			H_LCD_void_ClearDisplay();
    28b0:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <H_LCD_void_ClearDisplay>
			H_LCD_void_sendString("Template list empty");
    28b4:	8a e7       	ldi	r24, 0x7A	; 122
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
			Flush_Buffer();
    28bc:	0e 94 57 15 	call	0x2aae	; 0x2aae <Flush_Buffer>
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	aa e7       	ldi	r26, 0x7A	; 122
    28c6:	b4 e4       	ldi	r27, 0x44	; 68
    28c8:	89 8f       	std	Y+25, r24	; 0x19
    28ca:	9a 8f       	std	Y+26, r25	; 0x1a
    28cc:	ab 8f       	std	Y+27, r26	; 0x1b
    28ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d0:	69 8d       	ldd	r22, Y+25	; 0x19
    28d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	4a e7       	ldi	r20, 0x7A	; 122
    28de:	55 e4       	ldi	r21, 0x45	; 69
    28e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	8d 8b       	std	Y+21, r24	; 0x15
    28ea:	9e 8b       	std	Y+22, r25	; 0x16
    28ec:	af 8b       	std	Y+23, r26	; 0x17
    28ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28f0:	6d 89       	ldd	r22, Y+21	; 0x15
    28f2:	7e 89       	ldd	r23, Y+22	; 0x16
    28f4:	8f 89       	ldd	r24, Y+23	; 0x17
    28f6:	98 8d       	ldd	r25, Y+24	; 0x18
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	40 e8       	ldi	r20, 0x80	; 128
    28fe:	5f e3       	ldi	r21, 0x3F	; 63
    2900:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2904:	88 23       	and	r24, r24
    2906:	2c f4       	brge	.+10     	; 0x2912 <Finger_Print_Empty_Templates+0x92>
		__ticks = 1;
    2908:	81 e0       	ldi	r24, 0x01	; 1
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	9c 8b       	std	Y+20, r25	; 0x14
    290e:	8b 8b       	std	Y+19, r24	; 0x13
    2910:	3f c0       	rjmp	.+126    	; 0x2990 <Finger_Print_Empty_Templates+0x110>
	else if (__tmp > 65535)
    2912:	6d 89       	ldd	r22, Y+21	; 0x15
    2914:	7e 89       	ldd	r23, Y+22	; 0x16
    2916:	8f 89       	ldd	r24, Y+23	; 0x17
    2918:	98 8d       	ldd	r25, Y+24	; 0x18
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	3f ef       	ldi	r19, 0xFF	; 255
    291e:	4f e7       	ldi	r20, 0x7F	; 127
    2920:	57 e4       	ldi	r21, 0x47	; 71
    2922:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2926:	18 16       	cp	r1, r24
    2928:	4c f5       	brge	.+82     	; 0x297c <Finger_Print_Empty_Templates+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    292a:	69 8d       	ldd	r22, Y+25	; 0x19
    292c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    292e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2930:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	40 e2       	ldi	r20, 0x20	; 32
    2938:	51 e4       	ldi	r21, 0x41	; 65
    293a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	bc 01       	movw	r22, r24
    2944:	cd 01       	movw	r24, r26
    2946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294a:	dc 01       	movw	r26, r24
    294c:	cb 01       	movw	r24, r22
    294e:	9c 8b       	std	Y+20, r25	; 0x14
    2950:	8b 8b       	std	Y+19, r24	; 0x13
    2952:	0f c0       	rjmp	.+30     	; 0x2972 <Finger_Print_Empty_Templates+0xf2>
    2954:	80 e9       	ldi	r24, 0x90	; 144
    2956:	91 e0       	ldi	r25, 0x01	; 1
    2958:	9a 8b       	std	Y+18, r25	; 0x12
    295a:	89 8b       	std	Y+17, r24	; 0x11
    295c:	89 89       	ldd	r24, Y+17	; 0x11
    295e:	9a 89       	ldd	r25, Y+18	; 0x12
    2960:	01 97       	sbiw	r24, 0x01	; 1
    2962:	f1 f7       	brne	.-4      	; 0x2960 <Finger_Print_Empty_Templates+0xe0>
    2964:	9a 8b       	std	Y+18, r25	; 0x12
    2966:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2968:	8b 89       	ldd	r24, Y+19	; 0x13
    296a:	9c 89       	ldd	r25, Y+20	; 0x14
    296c:	01 97       	sbiw	r24, 0x01	; 1
    296e:	9c 8b       	std	Y+20, r25	; 0x14
    2970:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2972:	8b 89       	ldd	r24, Y+19	; 0x13
    2974:	9c 89       	ldd	r25, Y+20	; 0x14
    2976:	00 97       	sbiw	r24, 0x00	; 0
    2978:	69 f7       	brne	.-38     	; 0x2954 <Finger_Print_Empty_Templates+0xd4>
    297a:	14 c0       	rjmp	.+40     	; 0x29a4 <Finger_Print_Empty_Templates+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    297c:	6d 89       	ldd	r22, Y+21	; 0x15
    297e:	7e 89       	ldd	r23, Y+22	; 0x16
    2980:	8f 89       	ldd	r24, Y+23	; 0x17
    2982:	98 8d       	ldd	r25, Y+24	; 0x18
    2984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	9c 8b       	std	Y+20, r25	; 0x14
    298e:	8b 8b       	std	Y+19, r24	; 0x13
    2990:	8b 89       	ldd	r24, Y+19	; 0x13
    2992:	9c 89       	ldd	r25, Y+20	; 0x14
    2994:	98 8b       	std	Y+16, r25	; 0x10
    2996:	8f 87       	std	Y+15, r24	; 0x0f
    2998:	8f 85       	ldd	r24, Y+15	; 0x0f
    299a:	98 89       	ldd	r25, Y+16	; 0x10
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	f1 f7       	brne	.-4      	; 0x299c <Finger_Print_Empty_Templates+0x11c>
    29a0:	98 8b       	std	Y+16, r25	; 0x10
    29a2:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			Empty_Flag=0;
    29a4:	10 92 05 04 	sts	0x0405, r1
    29a8:	74 c0       	rjmp	.+232    	; 0x2a92 <Finger_Print_Empty_Templates+0x212>
		}
		else
		{
			Flush_Buffer();
    29aa:	0e 94 57 15 	call	0x2aae	; 0x2aae <Flush_Buffer>
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	aa ef       	ldi	r26, 0xFA	; 250
    29b4:	b3 e4       	ldi	r27, 0x43	; 67
    29b6:	8b 87       	std	Y+11, r24	; 0x0b
    29b8:	9c 87       	std	Y+12, r25	; 0x0c
    29ba:	ad 87       	std	Y+13, r26	; 0x0d
    29bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29be:	6b 85       	ldd	r22, Y+11	; 0x0b
    29c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	4a e7       	ldi	r20, 0x7A	; 122
    29cc:	55 e4       	ldi	r21, 0x45	; 69
    29ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	8f 83       	std	Y+7, r24	; 0x07
    29d8:	98 87       	std	Y+8, r25	; 0x08
    29da:	a9 87       	std	Y+9, r26	; 0x09
    29dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29de:	6f 81       	ldd	r22, Y+7	; 0x07
    29e0:	78 85       	ldd	r23, Y+8	; 0x08
    29e2:	89 85       	ldd	r24, Y+9	; 0x09
    29e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	40 e8       	ldi	r20, 0x80	; 128
    29ec:	5f e3       	ldi	r21, 0x3F	; 63
    29ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29f2:	88 23       	and	r24, r24
    29f4:	2c f4       	brge	.+10     	; 0x2a00 <Finger_Print_Empty_Templates+0x180>
		__ticks = 1;
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	9e 83       	std	Y+6, r25	; 0x06
    29fc:	8d 83       	std	Y+5, r24	; 0x05
    29fe:	3f c0       	rjmp	.+126    	; 0x2a7e <Finger_Print_Empty_Templates+0x1fe>
	else if (__tmp > 65535)
    2a00:	6f 81       	ldd	r22, Y+7	; 0x07
    2a02:	78 85       	ldd	r23, Y+8	; 0x08
    2a04:	89 85       	ldd	r24, Y+9	; 0x09
    2a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	3f ef       	ldi	r19, 0xFF	; 255
    2a0c:	4f e7       	ldi	r20, 0x7F	; 127
    2a0e:	57 e4       	ldi	r21, 0x47	; 71
    2a10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a14:	18 16       	cp	r1, r24
    2a16:	4c f5       	brge	.+82     	; 0x2a6a <Finger_Print_Empty_Templates+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a18:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	40 e2       	ldi	r20, 0x20	; 32
    2a26:	51 e4       	ldi	r21, 0x41	; 65
    2a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	bc 01       	movw	r22, r24
    2a32:	cd 01       	movw	r24, r26
    2a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	9e 83       	std	Y+6, r25	; 0x06
    2a3e:	8d 83       	std	Y+5, r24	; 0x05
    2a40:	0f c0       	rjmp	.+30     	; 0x2a60 <Finger_Print_Empty_Templates+0x1e0>
    2a42:	80 e9       	ldi	r24, 0x90	; 144
    2a44:	91 e0       	ldi	r25, 0x01	; 1
    2a46:	9c 83       	std	Y+4, r25	; 0x04
    2a48:	8b 83       	std	Y+3, r24	; 0x03
    2a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4e:	01 97       	sbiw	r24, 0x01	; 1
    2a50:	f1 f7       	brne	.-4      	; 0x2a4e <Finger_Print_Empty_Templates+0x1ce>
    2a52:	9c 83       	std	Y+4, r25	; 0x04
    2a54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a56:	8d 81       	ldd	r24, Y+5	; 0x05
    2a58:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5a:	01 97       	sbiw	r24, 0x01	; 1
    2a5c:	9e 83       	std	Y+6, r25	; 0x06
    2a5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a60:	8d 81       	ldd	r24, Y+5	; 0x05
    2a62:	9e 81       	ldd	r25, Y+6	; 0x06
    2a64:	00 97       	sbiw	r24, 0x00	; 0
    2a66:	69 f7       	brne	.-38     	; 0x2a42 <Finger_Print_Empty_Templates+0x1c2>
    2a68:	14 c0       	rjmp	.+40     	; 0x2a92 <Finger_Print_Empty_Templates+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a6c:	78 85       	ldd	r23, Y+8	; 0x08
    2a6e:	89 85       	ldd	r24, Y+9	; 0x09
    2a70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	9e 83       	std	Y+6, r25	; 0x06
    2a7c:	8d 83       	std	Y+5, r24	; 0x05
    2a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a80:	9e 81       	ldd	r25, Y+6	; 0x06
    2a82:	9a 83       	std	Y+2, r25	; 0x02
    2a84:	89 83       	std	Y+1, r24	; 0x01
    2a86:	89 81       	ldd	r24, Y+1	; 0x01
    2a88:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8a:	01 97       	sbiw	r24, 0x01	; 1
    2a8c:	f1 f7       	brne	.-4      	; 0x2a8a <Finger_Print_Empty_Templates+0x20a>
    2a8e:	9a 83       	std	Y+2, r25	; 0x02
    2a90:	89 83       	std	Y+1, r24	; 0x01
}

void Finger_Print_Empty_Templates(void)
{
	Empty_Flag=1;
	while(Empty_Flag)
    2a92:	80 91 05 04 	lds	r24, 0x0405
    2a96:	88 23       	and	r24, r24
    2a98:	09 f0       	breq	.+2      	; 0x2a9c <Finger_Print_Empty_Templates+0x21c>
    2a9a:	00 cf       	rjmp	.-512    	; 0x289c <Finger_Print_Empty_Templates+0x1c>
			Flush_Buffer();
			_delay_ms(500);
		}
	}

}
    2a9c:	6c 96       	adiw	r28, 0x1c	; 28
    2a9e:	0f b6       	in	r0, 0x3f	; 63
    2aa0:	f8 94       	cli
    2aa2:	de bf       	out	0x3e, r29	; 62
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	cd bf       	out	0x3d, r28	; 61
    2aa8:	cf 91       	pop	r28
    2aaa:	df 91       	pop	r29
    2aac:	08 95       	ret

00002aae <Flush_Buffer>:
void Flush_Buffer(void)
{
    2aae:	df 93       	push	r29
    2ab0:	cf 93       	push	r28
    2ab2:	0f 92       	push	r0
    2ab4:	cd b7       	in	r28, 0x3d	; 61
    2ab6:	de b7       	in	r29, 0x3e	; 62
	Local_counter=0;
    2ab8:	10 92 04 04 	sts	0x0404, r1
	for(u8 i=0;i<30;i++)
    2abc:	19 82       	std	Y+1, r1	; 0x01
    2abe:	0b c0       	rjmp	.+22     	; 0x2ad6 <Flush_Buffer+0x28>
	{
		Buffer[i]=0xAA;
    2ac0:	89 81       	ldd	r24, Y+1	; 0x01
    2ac2:	88 2f       	mov	r24, r24
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	ea 5f       	subi	r30, 0xFA	; 250
    2aca:	fb 4f       	sbci	r31, 0xFB	; 251
    2acc:	8a ea       	ldi	r24, 0xAA	; 170
    2ace:	80 83       	st	Z, r24

}
void Flush_Buffer(void)
{
	Local_counter=0;
	for(u8 i=0;i<30;i++)
    2ad0:	89 81       	ldd	r24, Y+1	; 0x01
    2ad2:	8f 5f       	subi	r24, 0xFF	; 255
    2ad4:	89 83       	std	Y+1, r24	; 0x01
    2ad6:	89 81       	ldd	r24, Y+1	; 0x01
    2ad8:	8e 31       	cpi	r24, 0x1E	; 30
    2ada:	90 f3       	brcs	.-28     	; 0x2ac0 <Flush_Buffer+0x12>
	{
		Buffer[i]=0xAA;
	}
}
    2adc:	0f 90       	pop	r0
    2ade:	cf 91       	pop	r28
    2ae0:	df 91       	pop	r29
    2ae2:	08 95       	ret

00002ae4 <Check_Sum>:
void Check_Sum(u8 FB_ID)
{
    2ae4:	df 93       	push	r29
    2ae6:	cf 93       	push	r28
    2ae8:	00 d0       	rcall	.+0      	; 0x2aea <Check_Sum+0x6>
    2aea:	0f 92       	push	r0
    2aec:	cd b7       	in	r28, 0x3d	; 61
    2aee:	de b7       	in	r29, 0x3e	; 62
    2af0:	8b 83       	std	Y+3, r24	; 0x03
	u8 Check_Sum_Value=0;
    2af2:	1a 82       	std	Y+2, r1	; 0x02
	u8 Counter=0;
    2af4:	19 82       	std	Y+1, r1	; 0x01
	Store[PAGE_ID_STORE]=FB_ID;
    2af6:	8b 81       	ldd	r24, Y+3	; 0x03
    2af8:	80 93 4a 03 	sts	0x034A, r24
	for(Counter=Package_Identifier;Counter<STORE_LENGTH-2;Counter++)
    2afc:	86 e0       	ldi	r24, 0x06	; 6
    2afe:	89 83       	std	Y+1, r24	; 0x01
    2b00:	0d c0       	rjmp	.+26     	; 0x2b1c <Check_Sum+0x38>
	{
		Check_Sum_Value+=Store[Counter];
    2b02:	89 81       	ldd	r24, Y+1	; 0x01
    2b04:	88 2f       	mov	r24, r24
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	fc 01       	movw	r30, r24
    2b0a:	e2 5c       	subi	r30, 0xC2	; 194
    2b0c:	fc 4f       	sbci	r31, 0xFC	; 252
    2b0e:	90 81       	ld	r25, Z
    2b10:	8a 81       	ldd	r24, Y+2	; 0x02
    2b12:	89 0f       	add	r24, r25
    2b14:	8a 83       	std	Y+2, r24	; 0x02
void Check_Sum(u8 FB_ID)
{
	u8 Check_Sum_Value=0;
	u8 Counter=0;
	Store[PAGE_ID_STORE]=FB_ID;
	for(Counter=Package_Identifier;Counter<STORE_LENGTH-2;Counter++)
    2b16:	89 81       	ldd	r24, Y+1	; 0x01
    2b18:	8f 5f       	subi	r24, 0xFF	; 255
    2b1a:	89 83       	std	Y+1, r24	; 0x01
    2b1c:	89 81       	ldd	r24, Y+1	; 0x01
    2b1e:	8d 30       	cpi	r24, 0x0D	; 13
    2b20:	80 f3       	brcs	.-32     	; 0x2b02 <Check_Sum+0x1e>
	{
		Check_Sum_Value+=Store[Counter];
	}
	Store[Check_Sum_byte]=Check_Sum_Value;
    2b22:	8a 81       	ldd	r24, Y+2	; 0x02
    2b24:	80 93 4c 03 	sts	0x034C, r24
}
    2b28:	0f 90       	pop	r0
    2b2a:	0f 90       	pop	r0
    2b2c:	0f 90       	pop	r0
    2b2e:	cf 91       	pop	r28
    2b30:	df 91       	pop	r29
    2b32:	08 95       	ret

00002b34 <Display_data>:

void Display_data(void)
{
    2b34:	0f 93       	push	r16
    2b36:	1f 93       	push	r17
    2b38:	df 93       	push	r29
    2b3a:	cf 93       	push	r28
    2b3c:	cd b7       	in	r28, 0x3d	; 61
    2b3e:	de b7       	in	r29, 0x3e	; 62
	Buffer[Local_counter]=UART_RecieveByteASynchCallback();
    2b40:	80 91 04 04 	lds	r24, 0x0404
    2b44:	08 2f       	mov	r16, r24
    2b46:	10 e0       	ldi	r17, 0x00	; 0
    2b48:	0e 94 0d 07 	call	0xe1a	; 0xe1a <UART_RecieveByteASynchCallback>
    2b4c:	f8 01       	movw	r30, r16
    2b4e:	ea 5f       	subi	r30, 0xFA	; 250
    2b50:	fb 4f       	sbci	r31, 0xFB	; 251
    2b52:	80 83       	st	Z, r24
	Local_counter++;
    2b54:	80 91 04 04 	lds	r24, 0x0404
    2b58:	8f 5f       	subi	r24, 0xFF	; 255
    2b5a:	80 93 04 04 	sts	0x0404, r24
}
    2b5e:	cf 91       	pop	r28
    2b60:	df 91       	pop	r29
    2b62:	1f 91       	pop	r17
    2b64:	0f 91       	pop	r16
    2b66:	08 95       	ret

00002b68 <H_EEPROM_Void_Init>:
#include "EEPROM_priv.h"
#include "EEPROM_init.h"
#include "TWI_init.h"

void H_EEPROM_Void_Init()
{
    2b68:	df 93       	push	r29
    2b6a:	cf 93       	push	r28
    2b6c:	cd b7       	in	r28, 0x3d	; 61
    2b6e:	de b7       	in	r29, 0x3e	; 62
	M_TWI_Void_InitMaster(TWI_SCL_400KHZ);
    2b70:	8c e0       	ldi	r24, 0x0C	; 12
    2b72:	0e 94 65 07 	call	0xeca	; 0xeca <M_TWI_Void_InitMaster>
}
    2b76:	cf 91       	pop	r28
    2b78:	df 91       	pop	r29
    2b7a:	08 95       	ret

00002b7c <H_EEPROM_Void_WriteByte>:

ES_t H_EEPROM_Void_WriteByte(u16 Copy_ByteAddress, u8 Copy_DataByte)
{
    2b7c:	df 93       	push	r29
    2b7e:	cf 93       	push	r28
    2b80:	00 d0       	rcall	.+0      	; 0x2b82 <H_EEPROM_Void_WriteByte+0x6>
    2b82:	00 d0       	rcall	.+0      	; 0x2b84 <H_EEPROM_Void_WriteByte+0x8>
    2b84:	cd b7       	in	r28, 0x3d	; 61
    2b86:	de b7       	in	r29, 0x3e	; 62
    2b88:	9a 83       	std	Y+2, r25	; 0x02
    2b8a:	89 83       	std	Y+1, r24	; 0x01
    2b8c:	6b 83       	std	Y+3, r22	; 0x03
	/**
	 * Send START condition
	 **/
	M_TWI_Void_SendStartCondition();
    2b8e:	0e 94 87 07 	call	0xf0e	; 0xf0e <M_TWI_Void_SendStartCondition>
	if (M_TWI_U8_GetStatus() != TWI_STATUS_START )
    2b92:	0e 94 13 08 	call	0x1026	; 0x1026 <M_TWI_U8_GetStatus>
    2b96:	88 30       	cpi	r24, 0x08	; 8
    2b98:	19 f0       	breq	.+6      	; 0x2ba0 <H_EEPROM_Void_WriteByte+0x24>
	{
		return EEPROM_NOT_OK;
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	8c 83       	std	Y+4, r24	; 0x04
    2b9e:	11 c0       	rjmp	.+34     	; 0x2bc2 <H_EEPROM_Void_WriteByte+0x46>
		/**
		 * Send SLA+W :	1010 0000
		 * */

	/* Send EEPROM address*/
	M_TWI_Void_SendByte(((EEPROM_SLA_4MSB )| (Copy_ByteAddress>>8)) & (EEPROM_SLA_W ));
    2ba0:	89 81       	ldd	r24, Y+1	; 0x01
    2ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba4:	89 2f       	mov	r24, r25
    2ba6:	99 27       	eor	r25, r25
    2ba8:	8e 75       	andi	r24, 0x5E	; 94
    2baa:	80 6a       	ori	r24, 0xA0	; 160
    2bac:	0e 94 a7 07 	call	0xf4e	; 0xf4e <M_TWI_Void_SendByte>
#endif
	/**
	 *  Send rest of the address:
	 * */

	M_TWI_Void_SendByte((u8)Copy_ByteAddress);
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
    2bb2:	0e 94 a7 07 	call	0xf4e	; 0xf4e <M_TWI_Void_SendByte>
	}
#endif
	/***
	 * Send The data
	 */
	M_TWI_Void_SendByte(Copy_DataByte);
    2bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb8:	0e 94 a7 07 	call	0xf4e	; 0xf4e <M_TWI_Void_SendByte>
	/**
	 * STOP Condition
	 *
	 */

	M_TWI_Void_SendStopCondition();
    2bbc:	0e 94 1e 08 	call	0x103c	; 0x103c <M_TWI_Void_SendStopCondition>

	return EEPROM_OK ;
    2bc0:	1c 82       	std	Y+4, r1	; 0x04
    2bc2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2bc4:	0f 90       	pop	r0
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	0f 90       	pop	r0
    2bcc:	cf 91       	pop	r28
    2bce:	df 91       	pop	r29
    2bd0:	08 95       	ret

00002bd2 <H_EEPROM_Void_ReadByte>:
 *
 * */


ES_t H_EEPROM_Void_ReadByte(u16 Copy_ByteAddress, u8 *PTR_Byte)
{
    2bd2:	df 93       	push	r29
    2bd4:	cf 93       	push	r28
    2bd6:	00 d0       	rcall	.+0      	; 0x2bd8 <H_EEPROM_Void_ReadByte+0x6>
    2bd8:	00 d0       	rcall	.+0      	; 0x2bda <H_EEPROM_Void_ReadByte+0x8>
    2bda:	0f 92       	push	r0
    2bdc:	cd b7       	in	r28, 0x3d	; 61
    2bde:	de b7       	in	r29, 0x3e	; 62
    2be0:	9a 83       	std	Y+2, r25	; 0x02
    2be2:	89 83       	std	Y+1, r24	; 0x01
    2be4:	7c 83       	std	Y+4, r23	; 0x04
    2be6:	6b 83       	std	Y+3, r22	; 0x03
	/**
	 * Send START condition
	 **/
	M_TWI_Void_SendStartCondition();
    2be8:	0e 94 87 07 	call	0xf0e	; 0xf0e <M_TWI_Void_SendStartCondition>
	if (M_TWI_U8_GetStatus() != TWI_STATUS_START )
    2bec:	0e 94 13 08 	call	0x1026	; 0x1026 <M_TWI_U8_GetStatus>
    2bf0:	88 30       	cpi	r24, 0x08	; 8
    2bf2:	19 f0       	breq	.+6      	; 0x2bfa <H_EEPROM_Void_ReadByte+0x28>
	{
		return EEPROM_NOT_OK;
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	8d 83       	std	Y+5, r24	; 0x05
    2bf8:	37 c0       	rjmp	.+110    	; 0x2c68 <H_EEPROM_Void_ReadByte+0x96>

		/**
		 * Send SLA+W :	1010 0000
		 * */
	/* Send EEPROM address*/
	M_TWI_Void_SendByte( ((EEPROM_SLA_4MSB )| (Copy_ByteAddress>>8)) & (EEPROM_SLA_W ));
    2bfa:	89 81       	ldd	r24, Y+1	; 0x01
    2bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bfe:	89 2f       	mov	r24, r25
    2c00:	99 27       	eor	r25, r25
    2c02:	8e 75       	andi	r24, 0x5E	; 94
    2c04:	80 6a       	ori	r24, 0xA0	; 160
    2c06:	0e 94 a7 07 	call	0xf4e	; 0xf4e <M_TWI_Void_SendByte>
	if(M_TWI_U8_GetStatus()  != TWI_STATUS_SLA_ACK)
    2c0a:	0e 94 13 08 	call	0x1026	; 0x1026 <M_TWI_U8_GetStatus>
    2c0e:	88 31       	cpi	r24, 0x18	; 24
    2c10:	19 f0       	breq	.+6      	; 0x2c18 <H_EEPROM_Void_ReadByte+0x46>
	{
		return EEPROM_NOT_OK ;
    2c12:	81 e0       	ldi	r24, 0x01	; 1
    2c14:	8d 83       	std	Y+5, r24	; 0x05
    2c16:	28 c0       	rjmp	.+80     	; 0x2c68 <H_EEPROM_Void_ReadByte+0x96>
	}

	/**
	 *  Send rest of the address:
	 * */
	M_TWI_Void_SendByte((u8)Copy_ByteAddress);
    2c18:	89 81       	ldd	r24, Y+1	; 0x01
    2c1a:	0e 94 a7 07 	call	0xf4e	; 0xf4e <M_TWI_Void_SendByte>
	if(M_TWI_U8_GetStatus() != TWI_STATUS_DATA_SENT_ACK)
    2c1e:	0e 94 13 08 	call	0x1026	; 0x1026 <M_TWI_U8_GetStatus>
    2c22:	88 32       	cpi	r24, 0x28	; 40
    2c24:	19 f0       	breq	.+6      	; 0x2c2c <H_EEPROM_Void_ReadByte+0x5a>
	{
		return EEPROM_NOT_OK ;
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	8d 83       	std	Y+5, r24	; 0x05
    2c2a:	1e c0       	rjmp	.+60     	; 0x2c68 <H_EEPROM_Void_ReadByte+0x96>
	}
	/**
	 * Send Repeated START condition
	 **/
	M_TWI_Void_SendStartCondition();
    2c2c:	0e 94 87 07 	call	0xf0e	; 0xf0e <M_TWI_Void_SendStartCondition>
	if (M_TWI_U8_GetStatus() != TWI_STATUS_REP_START )
    2c30:	0e 94 13 08 	call	0x1026	; 0x1026 <M_TWI_U8_GetStatus>
    2c34:	80 31       	cpi	r24, 0x10	; 16
    2c36:	19 f0       	breq	.+6      	; 0x2c3e <H_EEPROM_Void_ReadByte+0x6c>
	{
		return EEPROM_NOT_OK;
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	8d 83       	std	Y+5, r24	; 0x05
    2c3c:	15 c0       	rjmp	.+42     	; 0x2c68 <H_EEPROM_Void_ReadByte+0x96>
	}
	/****
	 * Send EEPROM address
	 ****/
	M_TWI_Void_SendByte( ((EEPROM_SLA_4MSB )| (Copy_ByteAddress>>8)) | (EEPROM_SLA_R ));
    2c3e:	89 81       	ldd	r24, Y+1	; 0x01
    2c40:	9a 81       	ldd	r25, Y+2	; 0x02
    2c42:	89 2f       	mov	r24, r25
    2c44:	99 27       	eor	r25, r25
    2c46:	81 6a       	ori	r24, 0xA1	; 161
    2c48:	0e 94 a7 07 	call	0xf4e	; 0xf4e <M_TWI_Void_SendByte>
	if(M_TWI_U8_GetStatus()  != TWI_STATUS_SLA_ACK_R)
    2c4c:	0e 94 13 08 	call	0x1026	; 0x1026 <M_TWI_U8_GetStatus>
    2c50:	80 34       	cpi	r24, 0x40	; 64
    2c52:	19 f0       	breq	.+6      	; 0x2c5a <H_EEPROM_Void_ReadByte+0x88>
	{
		return EEPROM_NOT_OK ;
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	8d 83       	std	Y+5, r24	; 0x05
    2c58:	07 c0       	rjmp	.+14     	; 0x2c68 <H_EEPROM_Void_ReadByte+0x96>
	}

	M_TWI_Void_RecevieWitNACK(PTR_Byte);
    2c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5e:	0e 94 de 07 	call	0xfbc	; 0xfbc <M_TWI_Void_RecevieWitNACK>

	M_TWI_Void_SendStopCondition();
    2c62:	0e 94 1e 08 	call	0x103c	; 0x103c <M_TWI_Void_SendStopCondition>

	return EEPROM_OK ;
    2c66:	1d 82       	std	Y+5, r1	; 0x05
    2c68:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2c6a:	0f 90       	pop	r0
    2c6c:	0f 90       	pop	r0
    2c6e:	0f 90       	pop	r0
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	cf 91       	pop	r28
    2c76:	df 91       	pop	r29
    2c78:	08 95       	ret

00002c7a <H_LCD_void_latchByte>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
    2c7a:	df 93       	push	r29
    2c7c:	cf 93       	push	r28
    2c7e:	cd b7       	in	r28, 0x3d	; 61
    2c80:	de b7       	in	r29, 0x3e	; 62
    2c82:	ab 97       	sbiw	r28, 0x2b	; 43
    2c84:	0f b6       	in	r0, 0x3f	; 63
    2c86:	f8 94       	cli
    2c88:	de bf       	out	0x3e, r29	; 62
    2c8a:	0f be       	out	0x3f, r0	; 63
    2c8c:	cd bf       	out	0x3d, r28	; 61
    2c8e:	8b a7       	std	Y+43, r24	; 0x2b
#if(LCD_MODE == _4_BIT_MODE)
	//enable = zero
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
    2c90:	8c e0       	ldi	r24, 0x0C	; 12
    2c92:	60 e0       	ldi	r22, 0x00	; 0
    2c94:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_D4,GET_BIT(copy_u8Byte,4));
    2c98:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c9a:	82 95       	swap	r24
    2c9c:	8f 70       	andi	r24, 0x0F	; 15
    2c9e:	98 2f       	mov	r25, r24
    2ca0:	91 70       	andi	r25, 0x01	; 1
    2ca2:	84 e1       	ldi	r24, 0x14	; 20
    2ca4:	69 2f       	mov	r22, r25
    2ca6:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D5,GET_BIT(copy_u8Byte,5));
    2caa:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cac:	82 95       	swap	r24
    2cae:	86 95       	lsr	r24
    2cb0:	87 70       	andi	r24, 0x07	; 7
    2cb2:	98 2f       	mov	r25, r24
    2cb4:	91 70       	andi	r25, 0x01	; 1
    2cb6:	85 e1       	ldi	r24, 0x15	; 21
    2cb8:	69 2f       	mov	r22, r25
    2cba:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D6,GET_BIT(copy_u8Byte,6));
    2cbe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cc0:	82 95       	swap	r24
    2cc2:	86 95       	lsr	r24
    2cc4:	86 95       	lsr	r24
    2cc6:	83 70       	andi	r24, 0x03	; 3
    2cc8:	98 2f       	mov	r25, r24
    2cca:	91 70       	andi	r25, 0x01	; 1
    2ccc:	86 e1       	ldi	r24, 0x16	; 22
    2cce:	69 2f       	mov	r22, r25
    2cd0:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D7,GET_BIT(copy_u8Byte,7));
    2cd4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cd6:	98 2f       	mov	r25, r24
    2cd8:	99 1f       	adc	r25, r25
    2cda:	99 27       	eor	r25, r25
    2cdc:	99 1f       	adc	r25, r25
    2cde:	88 e1       	ldi	r24, 0x18	; 24
    2ce0:	69 2f       	mov	r22, r25
    2ce2:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_HIGH);
    2ce6:	8c e0       	ldi	r24, 0x0C	; 12
    2ce8:	61 e0       	ldi	r22, 0x01	; 1
    2cea:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>
    2cee:	80 e0       	ldi	r24, 0x00	; 0
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	a0 e8       	ldi	r26, 0x80	; 128
    2cf4:	bf e3       	ldi	r27, 0x3F	; 63
    2cf6:	8f a3       	std	Y+39, r24	; 0x27
    2cf8:	98 a7       	std	Y+40, r25	; 0x28
    2cfa:	a9 a7       	std	Y+41, r26	; 0x29
    2cfc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cfe:	6f a1       	ldd	r22, Y+39	; 0x27
    2d00:	78 a5       	ldd	r23, Y+40	; 0x28
    2d02:	89 a5       	ldd	r24, Y+41	; 0x29
    2d04:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	4a e7       	ldi	r20, 0x7A	; 122
    2d0c:	55 e4       	ldi	r21, 0x45	; 69
    2d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d12:	dc 01       	movw	r26, r24
    2d14:	cb 01       	movw	r24, r22
    2d16:	8b a3       	std	Y+35, r24	; 0x23
    2d18:	9c a3       	std	Y+36, r25	; 0x24
    2d1a:	ad a3       	std	Y+37, r26	; 0x25
    2d1c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d1e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d20:	7c a1       	ldd	r23, Y+36	; 0x24
    2d22:	8d a1       	ldd	r24, Y+37	; 0x25
    2d24:	9e a1       	ldd	r25, Y+38	; 0x26
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	40 e8       	ldi	r20, 0x80	; 128
    2d2c:	5f e3       	ldi	r21, 0x3F	; 63
    2d2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d32:	88 23       	and	r24, r24
    2d34:	2c f4       	brge	.+10     	; 0x2d40 <H_LCD_void_latchByte+0xc6>
		__ticks = 1;
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	9a a3       	std	Y+34, r25	; 0x22
    2d3c:	89 a3       	std	Y+33, r24	; 0x21
    2d3e:	3f c0       	rjmp	.+126    	; 0x2dbe <H_LCD_void_latchByte+0x144>
	else if (__tmp > 65535)
    2d40:	6b a1       	ldd	r22, Y+35	; 0x23
    2d42:	7c a1       	ldd	r23, Y+36	; 0x24
    2d44:	8d a1       	ldd	r24, Y+37	; 0x25
    2d46:	9e a1       	ldd	r25, Y+38	; 0x26
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	3f ef       	ldi	r19, 0xFF	; 255
    2d4c:	4f e7       	ldi	r20, 0x7F	; 127
    2d4e:	57 e4       	ldi	r21, 0x47	; 71
    2d50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d54:	18 16       	cp	r1, r24
    2d56:	4c f5       	brge	.+82     	; 0x2daa <H_LCD_void_latchByte+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d58:	6f a1       	ldd	r22, Y+39	; 0x27
    2d5a:	78 a5       	ldd	r23, Y+40	; 0x28
    2d5c:	89 a5       	ldd	r24, Y+41	; 0x29
    2d5e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	40 e2       	ldi	r20, 0x20	; 32
    2d66:	51 e4       	ldi	r21, 0x41	; 65
    2d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6c:	dc 01       	movw	r26, r24
    2d6e:	cb 01       	movw	r24, r22
    2d70:	bc 01       	movw	r22, r24
    2d72:	cd 01       	movw	r24, r26
    2d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d78:	dc 01       	movw	r26, r24
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	9a a3       	std	Y+34, r25	; 0x22
    2d7e:	89 a3       	std	Y+33, r24	; 0x21
    2d80:	0f c0       	rjmp	.+30     	; 0x2da0 <H_LCD_void_latchByte+0x126>
    2d82:	80 e9       	ldi	r24, 0x90	; 144
    2d84:	91 e0       	ldi	r25, 0x01	; 1
    2d86:	98 a3       	std	Y+32, r25	; 0x20
    2d88:	8f 8f       	std	Y+31, r24	; 0x1f
    2d8a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d8c:	98 a1       	ldd	r25, Y+32	; 0x20
    2d8e:	01 97       	sbiw	r24, 0x01	; 1
    2d90:	f1 f7       	brne	.-4      	; 0x2d8e <H_LCD_void_latchByte+0x114>
    2d92:	98 a3       	std	Y+32, r25	; 0x20
    2d94:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d96:	89 a1       	ldd	r24, Y+33	; 0x21
    2d98:	9a a1       	ldd	r25, Y+34	; 0x22
    2d9a:	01 97       	sbiw	r24, 0x01	; 1
    2d9c:	9a a3       	std	Y+34, r25	; 0x22
    2d9e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da0:	89 a1       	ldd	r24, Y+33	; 0x21
    2da2:	9a a1       	ldd	r25, Y+34	; 0x22
    2da4:	00 97       	sbiw	r24, 0x00	; 0
    2da6:	69 f7       	brne	.-38     	; 0x2d82 <H_LCD_void_latchByte+0x108>
    2da8:	14 c0       	rjmp	.+40     	; 0x2dd2 <H_LCD_void_latchByte+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2daa:	6b a1       	ldd	r22, Y+35	; 0x23
    2dac:	7c a1       	ldd	r23, Y+36	; 0x24
    2dae:	8d a1       	ldd	r24, Y+37	; 0x25
    2db0:	9e a1       	ldd	r25, Y+38	; 0x26
    2db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	9a a3       	std	Y+34, r25	; 0x22
    2dbc:	89 a3       	std	Y+33, r24	; 0x21
    2dbe:	89 a1       	ldd	r24, Y+33	; 0x21
    2dc0:	9a a1       	ldd	r25, Y+34	; 0x22
    2dc2:	9e 8f       	std	Y+30, r25	; 0x1e
    2dc4:	8d 8f       	std	Y+29, r24	; 0x1d
    2dc6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dc8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dca:	01 97       	sbiw	r24, 0x01	; 1
    2dcc:	f1 f7       	brne	.-4      	; 0x2dca <H_LCD_void_latchByte+0x150>
    2dce:	9e 8f       	std	Y+30, r25	; 0x1e
    2dd0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
    2dd2:	8c e0       	ldi	r24, 0x0C	; 12
    2dd4:	60 e0       	ldi	r22, 0x00	; 0
    2dd6:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_D4,GET_BIT(copy_u8Byte,0));
    2dda:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ddc:	98 2f       	mov	r25, r24
    2dde:	91 70       	andi	r25, 0x01	; 1
    2de0:	84 e1       	ldi	r24, 0x14	; 20
    2de2:	69 2f       	mov	r22, r25
    2de4:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D5,GET_BIT(copy_u8Byte,1));
    2de8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dea:	86 95       	lsr	r24
    2dec:	98 2f       	mov	r25, r24
    2dee:	91 70       	andi	r25, 0x01	; 1
    2df0:	85 e1       	ldi	r24, 0x15	; 21
    2df2:	69 2f       	mov	r22, r25
    2df4:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D6,GET_BIT(copy_u8Byte,2));
    2df8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dfa:	86 95       	lsr	r24
    2dfc:	86 95       	lsr	r24
    2dfe:	98 2f       	mov	r25, r24
    2e00:	91 70       	andi	r25, 0x01	; 1
    2e02:	86 e1       	ldi	r24, 0x16	; 22
    2e04:	69 2f       	mov	r22, r25
    2e06:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D7,GET_BIT(copy_u8Byte,3));
    2e0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e0c:	86 95       	lsr	r24
    2e0e:	86 95       	lsr	r24
    2e10:	86 95       	lsr	r24
    2e12:	98 2f       	mov	r25, r24
    2e14:	91 70       	andi	r25, 0x01	; 1
    2e16:	88 e1       	ldi	r24, 0x18	; 24
    2e18:	69 2f       	mov	r22, r25
    2e1a:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_HIGH);
    2e1e:	8c e0       	ldi	r24, 0x0C	; 12
    2e20:	61 e0       	ldi	r22, 0x01	; 1
    2e22:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>
    2e26:	80 e0       	ldi	r24, 0x00	; 0
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	a0 e8       	ldi	r26, 0x80	; 128
    2e2c:	bf e3       	ldi	r27, 0x3F	; 63
    2e2e:	89 8f       	std	Y+25, r24	; 0x19
    2e30:	9a 8f       	std	Y+26, r25	; 0x1a
    2e32:	ab 8f       	std	Y+27, r26	; 0x1b
    2e34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e36:	69 8d       	ldd	r22, Y+25	; 0x19
    2e38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e3e:	20 e0       	ldi	r18, 0x00	; 0
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	4a e7       	ldi	r20, 0x7A	; 122
    2e44:	55 e4       	ldi	r21, 0x45	; 69
    2e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e4a:	dc 01       	movw	r26, r24
    2e4c:	cb 01       	movw	r24, r22
    2e4e:	8d 8b       	std	Y+21, r24	; 0x15
    2e50:	9e 8b       	std	Y+22, r25	; 0x16
    2e52:	af 8b       	std	Y+23, r26	; 0x17
    2e54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e56:	6d 89       	ldd	r22, Y+21	; 0x15
    2e58:	7e 89       	ldd	r23, Y+22	; 0x16
    2e5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e5e:	20 e0       	ldi	r18, 0x00	; 0
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	40 e8       	ldi	r20, 0x80	; 128
    2e64:	5f e3       	ldi	r21, 0x3F	; 63
    2e66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e6a:	88 23       	and	r24, r24
    2e6c:	2c f4       	brge	.+10     	; 0x2e78 <H_LCD_void_latchByte+0x1fe>
		__ticks = 1;
    2e6e:	81 e0       	ldi	r24, 0x01	; 1
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	9c 8b       	std	Y+20, r25	; 0x14
    2e74:	8b 8b       	std	Y+19, r24	; 0x13
    2e76:	3f c0       	rjmp	.+126    	; 0x2ef6 <H_LCD_void_latchByte+0x27c>
	else if (__tmp > 65535)
    2e78:	6d 89       	ldd	r22, Y+21	; 0x15
    2e7a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	3f ef       	ldi	r19, 0xFF	; 255
    2e84:	4f e7       	ldi	r20, 0x7F	; 127
    2e86:	57 e4       	ldi	r21, 0x47	; 71
    2e88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e8c:	18 16       	cp	r1, r24
    2e8e:	4c f5       	brge	.+82     	; 0x2ee2 <H_LCD_void_latchByte+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e90:	69 8d       	ldd	r22, Y+25	; 0x19
    2e92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e98:	20 e0       	ldi	r18, 0x00	; 0
    2e9a:	30 e0       	ldi	r19, 0x00	; 0
    2e9c:	40 e2       	ldi	r20, 0x20	; 32
    2e9e:	51 e4       	ldi	r21, 0x41	; 65
    2ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea4:	dc 01       	movw	r26, r24
    2ea6:	cb 01       	movw	r24, r22
    2ea8:	bc 01       	movw	r22, r24
    2eaa:	cd 01       	movw	r24, r26
    2eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb0:	dc 01       	movw	r26, r24
    2eb2:	cb 01       	movw	r24, r22
    2eb4:	9c 8b       	std	Y+20, r25	; 0x14
    2eb6:	8b 8b       	std	Y+19, r24	; 0x13
    2eb8:	0f c0       	rjmp	.+30     	; 0x2ed8 <H_LCD_void_latchByte+0x25e>
    2eba:	80 e9       	ldi	r24, 0x90	; 144
    2ebc:	91 e0       	ldi	r25, 0x01	; 1
    2ebe:	9a 8b       	std	Y+18, r25	; 0x12
    2ec0:	89 8b       	std	Y+17, r24	; 0x11
    2ec2:	89 89       	ldd	r24, Y+17	; 0x11
    2ec4:	9a 89       	ldd	r25, Y+18	; 0x12
    2ec6:	01 97       	sbiw	r24, 0x01	; 1
    2ec8:	f1 f7       	brne	.-4      	; 0x2ec6 <H_LCD_void_latchByte+0x24c>
    2eca:	9a 8b       	std	Y+18, r25	; 0x12
    2ecc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ece:	8b 89       	ldd	r24, Y+19	; 0x13
    2ed0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ed2:	01 97       	sbiw	r24, 0x01	; 1
    2ed4:	9c 8b       	std	Y+20, r25	; 0x14
    2ed6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ed8:	8b 89       	ldd	r24, Y+19	; 0x13
    2eda:	9c 89       	ldd	r25, Y+20	; 0x14
    2edc:	00 97       	sbiw	r24, 0x00	; 0
    2ede:	69 f7       	brne	.-38     	; 0x2eba <H_LCD_void_latchByte+0x240>
    2ee0:	14 c0       	rjmp	.+40     	; 0x2f0a <H_LCD_void_latchByte+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ee4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ee6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ee8:	98 8d       	ldd	r25, Y+24	; 0x18
    2eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eee:	dc 01       	movw	r26, r24
    2ef0:	cb 01       	movw	r24, r22
    2ef2:	9c 8b       	std	Y+20, r25	; 0x14
    2ef4:	8b 8b       	std	Y+19, r24	; 0x13
    2ef6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ef8:	9c 89       	ldd	r25, Y+20	; 0x14
    2efa:	98 8b       	std	Y+16, r25	; 0x10
    2efc:	8f 87       	std	Y+15, r24	; 0x0f
    2efe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f00:	98 89       	ldd	r25, Y+16	; 0x10
    2f02:	01 97       	sbiw	r24, 0x01	; 1
    2f04:	f1 f7       	brne	.-4      	; 0x2f02 <H_LCD_void_latchByte+0x288>
    2f06:	98 8b       	std	Y+16, r25	; 0x10
    2f08:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
    2f0a:	8c e0       	ldi	r24, 0x0C	; 12
    2f0c:	60 e0       	ldi	r22, 0x00	; 0
    2f0e:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>
    2f12:	80 e0       	ldi	r24, 0x00	; 0
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	a0 ef       	ldi	r26, 0xF0	; 240
    2f18:	b1 e4       	ldi	r27, 0x41	; 65
    2f1a:	8b 87       	std	Y+11, r24	; 0x0b
    2f1c:	9c 87       	std	Y+12, r25	; 0x0c
    2f1e:	ad 87       	std	Y+13, r26	; 0x0d
    2f20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f22:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f24:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f26:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f28:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	4a e7       	ldi	r20, 0x7A	; 122
    2f30:	55 e4       	ldi	r21, 0x45	; 69
    2f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f36:	dc 01       	movw	r26, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	8f 83       	std	Y+7, r24	; 0x07
    2f3c:	98 87       	std	Y+8, r25	; 0x08
    2f3e:	a9 87       	std	Y+9, r26	; 0x09
    2f40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f42:	6f 81       	ldd	r22, Y+7	; 0x07
    2f44:	78 85       	ldd	r23, Y+8	; 0x08
    2f46:	89 85       	ldd	r24, Y+9	; 0x09
    2f48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	40 e8       	ldi	r20, 0x80	; 128
    2f50:	5f e3       	ldi	r21, 0x3F	; 63
    2f52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f56:	88 23       	and	r24, r24
    2f58:	2c f4       	brge	.+10     	; 0x2f64 <H_LCD_void_latchByte+0x2ea>
		__ticks = 1;
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	9e 83       	std	Y+6, r25	; 0x06
    2f60:	8d 83       	std	Y+5, r24	; 0x05
    2f62:	3f c0       	rjmp	.+126    	; 0x2fe2 <H_LCD_void_latchByte+0x368>
	else if (__tmp > 65535)
    2f64:	6f 81       	ldd	r22, Y+7	; 0x07
    2f66:	78 85       	ldd	r23, Y+8	; 0x08
    2f68:	89 85       	ldd	r24, Y+9	; 0x09
    2f6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	3f ef       	ldi	r19, 0xFF	; 255
    2f70:	4f e7       	ldi	r20, 0x7F	; 127
    2f72:	57 e4       	ldi	r21, 0x47	; 71
    2f74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f78:	18 16       	cp	r1, r24
    2f7a:	4c f5       	brge	.+82     	; 0x2fce <H_LCD_void_latchByte+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f80:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f82:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	40 e2       	ldi	r20, 0x20	; 32
    2f8a:	51 e4       	ldi	r21, 0x41	; 65
    2f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f90:	dc 01       	movw	r26, r24
    2f92:	cb 01       	movw	r24, r22
    2f94:	bc 01       	movw	r22, r24
    2f96:	cd 01       	movw	r24, r26
    2f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	9e 83       	std	Y+6, r25	; 0x06
    2fa2:	8d 83       	std	Y+5, r24	; 0x05
    2fa4:	0f c0       	rjmp	.+30     	; 0x2fc4 <H_LCD_void_latchByte+0x34a>
    2fa6:	80 e9       	ldi	r24, 0x90	; 144
    2fa8:	91 e0       	ldi	r25, 0x01	; 1
    2faa:	9c 83       	std	Y+4, r25	; 0x04
    2fac:	8b 83       	std	Y+3, r24	; 0x03
    2fae:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb2:	01 97       	sbiw	r24, 0x01	; 1
    2fb4:	f1 f7       	brne	.-4      	; 0x2fb2 <H_LCD_void_latchByte+0x338>
    2fb6:	9c 83       	std	Y+4, r25	; 0x04
    2fb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fba:	8d 81       	ldd	r24, Y+5	; 0x05
    2fbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2fbe:	01 97       	sbiw	r24, 0x01	; 1
    2fc0:	9e 83       	std	Y+6, r25	; 0x06
    2fc2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc8:	00 97       	sbiw	r24, 0x00	; 0
    2fca:	69 f7       	brne	.-38     	; 0x2fa6 <H_LCD_void_latchByte+0x32c>
    2fcc:	14 c0       	rjmp	.+40     	; 0x2ff6 <H_LCD_void_latchByte+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fce:	6f 81       	ldd	r22, Y+7	; 0x07
    2fd0:	78 85       	ldd	r23, Y+8	; 0x08
    2fd2:	89 85       	ldd	r24, Y+9	; 0x09
    2fd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fda:	dc 01       	movw	r26, r24
    2fdc:	cb 01       	movw	r24, r22
    2fde:	9e 83       	std	Y+6, r25	; 0x06
    2fe0:	8d 83       	std	Y+5, r24	; 0x05
    2fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe6:	9a 83       	std	Y+2, r25	; 0x02
    2fe8:	89 83       	std	Y+1, r24	; 0x01
    2fea:	89 81       	ldd	r24, Y+1	; 0x01
    2fec:	9a 81       	ldd	r25, Y+2	; 0x02
    2fee:	01 97       	sbiw	r24, 0x01	; 1
    2ff0:	f1 f7       	brne	.-4      	; 0x2fee <H_LCD_void_latchByte+0x374>
    2ff2:	9a 83       	std	Y+2, r25	; 0x02
    2ff4:	89 83       	std	Y+1, r24	; 0x01
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
	_delay_ms(30);

#endif

}
    2ff6:	ab 96       	adiw	r28, 0x2b	; 43
    2ff8:	0f b6       	in	r0, 0x3f	; 63
    2ffa:	f8 94       	cli
    2ffc:	de bf       	out	0x3e, r29	; 62
    2ffe:	0f be       	out	0x3f, r0	; 63
    3000:	cd bf       	out	0x3d, r28	; 61
    3002:	cf 91       	pop	r28
    3004:	df 91       	pop	r29
    3006:	08 95       	ret

00003008 <H_LCD_void_Init>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_Init(void)
{
    3008:	0f 93       	push	r16
    300a:	1f 93       	push	r17
    300c:	df 93       	push	r29
    300e:	cf 93       	push	r28
    3010:	cd b7       	in	r28, 0x3d	; 61
    3012:	de b7       	in	r29, 0x3e	; 62
    3014:	c6 54       	subi	r28, 0x46	; 70
    3016:	d0 40       	sbci	r29, 0x00	; 0
    3018:	0f b6       	in	r0, 0x3f	; 63
    301a:	f8 94       	cli
    301c:	de bf       	out	0x3e, r29	; 62
    301e:	0f be       	out	0x3f, r0	; 63
    3020:	cd bf       	out	0x3d, r28	; 61
    3022:	fe 01       	movw	r30, r28
    3024:	ed 5b       	subi	r30, 0xBD	; 189
    3026:	ff 4f       	sbci	r31, 0xFF	; 255
    3028:	80 e0       	ldi	r24, 0x00	; 0
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	a6 e1       	ldi	r26, 0x16	; 22
    302e:	b3 e4       	ldi	r27, 0x43	; 67
    3030:	80 83       	st	Z, r24
    3032:	91 83       	std	Z+1, r25	; 0x01
    3034:	a2 83       	std	Z+2, r26	; 0x02
    3036:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3038:	8e 01       	movw	r16, r28
    303a:	01 5c       	subi	r16, 0xC1	; 193
    303c:	1f 4f       	sbci	r17, 0xFF	; 255
    303e:	fe 01       	movw	r30, r28
    3040:	ed 5b       	subi	r30, 0xBD	; 189
    3042:	ff 4f       	sbci	r31, 0xFF	; 255
    3044:	60 81       	ld	r22, Z
    3046:	71 81       	ldd	r23, Z+1	; 0x01
    3048:	82 81       	ldd	r24, Z+2	; 0x02
    304a:	93 81       	ldd	r25, Z+3	; 0x03
    304c:	20 e0       	ldi	r18, 0x00	; 0
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	4a e7       	ldi	r20, 0x7A	; 122
    3052:	55 e4       	ldi	r21, 0x45	; 69
    3054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3058:	dc 01       	movw	r26, r24
    305a:	cb 01       	movw	r24, r22
    305c:	f8 01       	movw	r30, r16
    305e:	80 83       	st	Z, r24
    3060:	91 83       	std	Z+1, r25	; 0x01
    3062:	a2 83       	std	Z+2, r26	; 0x02
    3064:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3066:	fe 01       	movw	r30, r28
    3068:	ff 96       	adiw	r30, 0x3f	; 63
    306a:	60 81       	ld	r22, Z
    306c:	71 81       	ldd	r23, Z+1	; 0x01
    306e:	82 81       	ldd	r24, Z+2	; 0x02
    3070:	93 81       	ldd	r25, Z+3	; 0x03
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	40 e8       	ldi	r20, 0x80	; 128
    3078:	5f e3       	ldi	r21, 0x3F	; 63
    307a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    307e:	88 23       	and	r24, r24
    3080:	2c f4       	brge	.+10     	; 0x308c <H_LCD_void_Init+0x84>
		__ticks = 1;
    3082:	81 e0       	ldi	r24, 0x01	; 1
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	9e af       	std	Y+62, r25	; 0x3e
    3088:	8d af       	std	Y+61, r24	; 0x3d
    308a:	46 c0       	rjmp	.+140    	; 0x3118 <H_LCD_void_Init+0x110>
	else if (__tmp > 65535)
    308c:	fe 01       	movw	r30, r28
    308e:	ff 96       	adiw	r30, 0x3f	; 63
    3090:	60 81       	ld	r22, Z
    3092:	71 81       	ldd	r23, Z+1	; 0x01
    3094:	82 81       	ldd	r24, Z+2	; 0x02
    3096:	93 81       	ldd	r25, Z+3	; 0x03
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	3f ef       	ldi	r19, 0xFF	; 255
    309c:	4f e7       	ldi	r20, 0x7F	; 127
    309e:	57 e4       	ldi	r21, 0x47	; 71
    30a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30a4:	18 16       	cp	r1, r24
    30a6:	64 f5       	brge	.+88     	; 0x3100 <H_LCD_void_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a8:	fe 01       	movw	r30, r28
    30aa:	ed 5b       	subi	r30, 0xBD	; 189
    30ac:	ff 4f       	sbci	r31, 0xFF	; 255
    30ae:	60 81       	ld	r22, Z
    30b0:	71 81       	ldd	r23, Z+1	; 0x01
    30b2:	82 81       	ldd	r24, Z+2	; 0x02
    30b4:	93 81       	ldd	r25, Z+3	; 0x03
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	40 e2       	ldi	r20, 0x20	; 32
    30bc:	51 e4       	ldi	r21, 0x41	; 65
    30be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	bc 01       	movw	r22, r24
    30c8:	cd 01       	movw	r24, r26
    30ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ce:	dc 01       	movw	r26, r24
    30d0:	cb 01       	movw	r24, r22
    30d2:	9e af       	std	Y+62, r25	; 0x3e
    30d4:	8d af       	std	Y+61, r24	; 0x3d
    30d6:	0f c0       	rjmp	.+30     	; 0x30f6 <H_LCD_void_Init+0xee>
    30d8:	80 e9       	ldi	r24, 0x90	; 144
    30da:	91 e0       	ldi	r25, 0x01	; 1
    30dc:	9c af       	std	Y+60, r25	; 0x3c
    30de:	8b af       	std	Y+59, r24	; 0x3b
    30e0:	8b ad       	ldd	r24, Y+59	; 0x3b
    30e2:	9c ad       	ldd	r25, Y+60	; 0x3c
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	f1 f7       	brne	.-4      	; 0x30e4 <H_LCD_void_Init+0xdc>
    30e8:	9c af       	std	Y+60, r25	; 0x3c
    30ea:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    30ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    30f0:	01 97       	sbiw	r24, 0x01	; 1
    30f2:	9e af       	std	Y+62, r25	; 0x3e
    30f4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    30f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    30fa:	00 97       	sbiw	r24, 0x00	; 0
    30fc:	69 f7       	brne	.-38     	; 0x30d8 <H_LCD_void_Init+0xd0>
    30fe:	16 c0       	rjmp	.+44     	; 0x312c <H_LCD_void_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3100:	fe 01       	movw	r30, r28
    3102:	ff 96       	adiw	r30, 0x3f	; 63
    3104:	60 81       	ld	r22, Z
    3106:	71 81       	ldd	r23, Z+1	; 0x01
    3108:	82 81       	ldd	r24, Z+2	; 0x02
    310a:	93 81       	ldd	r25, Z+3	; 0x03
    310c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3110:	dc 01       	movw	r26, r24
    3112:	cb 01       	movw	r24, r22
    3114:	9e af       	std	Y+62, r25	; 0x3e
    3116:	8d af       	std	Y+61, r24	; 0x3d
    3118:	8d ad       	ldd	r24, Y+61	; 0x3d
    311a:	9e ad       	ldd	r25, Y+62	; 0x3e
    311c:	9a af       	std	Y+58, r25	; 0x3a
    311e:	89 af       	std	Y+57, r24	; 0x39
    3120:	89 ad       	ldd	r24, Y+57	; 0x39
    3122:	9a ad       	ldd	r25, Y+58	; 0x3a
    3124:	01 97       	sbiw	r24, 0x01	; 1
    3126:	f1 f7       	brne	.-4      	; 0x3124 <H_LCD_void_Init+0x11c>
    3128:	9a af       	std	Y+58, r25	; 0x3a
    312a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(150);
	M_Dio_void_setPinValue(CLCD_RS_PIN,DIO_LOW);
    312c:	8d e0       	ldi	r24, 0x0D	; 13
    312e:	60 e0       	ldi	r22, 0x00	; 0
    3130:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>
	/*Function set*/
#if(LCD_MODE == _4_BIT_MODE)
	H_LCD_void_sendCommand(CLCD_FUNCTION_SET_1);
    3134:	82 e0       	ldi	r24, 0x02	; 2
    3136:	0e 94 8e 1a 	call	0x351c	; 0x351c <H_LCD_void_sendCommand>
    313a:	80 e0       	ldi	r24, 0x00	; 0
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	a0 ea       	ldi	r26, 0xA0	; 160
    3140:	b0 e4       	ldi	r27, 0x40	; 64
    3142:	8d ab       	std	Y+53, r24	; 0x35
    3144:	9e ab       	std	Y+54, r25	; 0x36
    3146:	af ab       	std	Y+55, r26	; 0x37
    3148:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    314a:	6d a9       	ldd	r22, Y+53	; 0x35
    314c:	7e a9       	ldd	r23, Y+54	; 0x36
    314e:	8f a9       	ldd	r24, Y+55	; 0x37
    3150:	98 ad       	ldd	r25, Y+56	; 0x38
    3152:	20 e0       	ldi	r18, 0x00	; 0
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	4a e7       	ldi	r20, 0x7A	; 122
    3158:	55 e4       	ldi	r21, 0x45	; 69
    315a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
    3162:	89 ab       	std	Y+49, r24	; 0x31
    3164:	9a ab       	std	Y+50, r25	; 0x32
    3166:	ab ab       	std	Y+51, r26	; 0x33
    3168:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    316a:	69 a9       	ldd	r22, Y+49	; 0x31
    316c:	7a a9       	ldd	r23, Y+50	; 0x32
    316e:	8b a9       	ldd	r24, Y+51	; 0x33
    3170:	9c a9       	ldd	r25, Y+52	; 0x34
    3172:	20 e0       	ldi	r18, 0x00	; 0
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	40 e8       	ldi	r20, 0x80	; 128
    3178:	5f e3       	ldi	r21, 0x3F	; 63
    317a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    317e:	88 23       	and	r24, r24
    3180:	2c f4       	brge	.+10     	; 0x318c <H_LCD_void_Init+0x184>
		__ticks = 1;
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	98 ab       	std	Y+48, r25	; 0x30
    3188:	8f a7       	std	Y+47, r24	; 0x2f
    318a:	3f c0       	rjmp	.+126    	; 0x320a <H_LCD_void_Init+0x202>
	else if (__tmp > 65535)
    318c:	69 a9       	ldd	r22, Y+49	; 0x31
    318e:	7a a9       	ldd	r23, Y+50	; 0x32
    3190:	8b a9       	ldd	r24, Y+51	; 0x33
    3192:	9c a9       	ldd	r25, Y+52	; 0x34
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	3f ef       	ldi	r19, 0xFF	; 255
    3198:	4f e7       	ldi	r20, 0x7F	; 127
    319a:	57 e4       	ldi	r21, 0x47	; 71
    319c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31a0:	18 16       	cp	r1, r24
    31a2:	4c f5       	brge	.+82     	; 0x31f6 <H_LCD_void_Init+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a4:	6d a9       	ldd	r22, Y+53	; 0x35
    31a6:	7e a9       	ldd	r23, Y+54	; 0x36
    31a8:	8f a9       	ldd	r24, Y+55	; 0x37
    31aa:	98 ad       	ldd	r25, Y+56	; 0x38
    31ac:	20 e0       	ldi	r18, 0x00	; 0
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	40 e2       	ldi	r20, 0x20	; 32
    31b2:	51 e4       	ldi	r21, 0x41	; 65
    31b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b8:	dc 01       	movw	r26, r24
    31ba:	cb 01       	movw	r24, r22
    31bc:	bc 01       	movw	r22, r24
    31be:	cd 01       	movw	r24, r26
    31c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c4:	dc 01       	movw	r26, r24
    31c6:	cb 01       	movw	r24, r22
    31c8:	98 ab       	std	Y+48, r25	; 0x30
    31ca:	8f a7       	std	Y+47, r24	; 0x2f
    31cc:	0f c0       	rjmp	.+30     	; 0x31ec <H_LCD_void_Init+0x1e4>
    31ce:	80 e9       	ldi	r24, 0x90	; 144
    31d0:	91 e0       	ldi	r25, 0x01	; 1
    31d2:	9e a7       	std	Y+46, r25	; 0x2e
    31d4:	8d a7       	std	Y+45, r24	; 0x2d
    31d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    31d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    31da:	01 97       	sbiw	r24, 0x01	; 1
    31dc:	f1 f7       	brne	.-4      	; 0x31da <H_LCD_void_Init+0x1d2>
    31de:	9e a7       	std	Y+46, r25	; 0x2e
    31e0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    31e4:	98 a9       	ldd	r25, Y+48	; 0x30
    31e6:	01 97       	sbiw	r24, 0x01	; 1
    31e8:	98 ab       	std	Y+48, r25	; 0x30
    31ea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    31ee:	98 a9       	ldd	r25, Y+48	; 0x30
    31f0:	00 97       	sbiw	r24, 0x00	; 0
    31f2:	69 f7       	brne	.-38     	; 0x31ce <H_LCD_void_Init+0x1c6>
    31f4:	14 c0       	rjmp	.+40     	; 0x321e <H_LCD_void_Init+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31f6:	69 a9       	ldd	r22, Y+49	; 0x31
    31f8:	7a a9       	ldd	r23, Y+50	; 0x32
    31fa:	8b a9       	ldd	r24, Y+51	; 0x33
    31fc:	9c a9       	ldd	r25, Y+52	; 0x34
    31fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3202:	dc 01       	movw	r26, r24
    3204:	cb 01       	movw	r24, r22
    3206:	98 ab       	std	Y+48, r25	; 0x30
    3208:	8f a7       	std	Y+47, r24	; 0x2f
    320a:	8f a5       	ldd	r24, Y+47	; 0x2f
    320c:	98 a9       	ldd	r25, Y+48	; 0x30
    320e:	9c a7       	std	Y+44, r25	; 0x2c
    3210:	8b a7       	std	Y+43, r24	; 0x2b
    3212:	8b a5       	ldd	r24, Y+43	; 0x2b
    3214:	9c a5       	ldd	r25, Y+44	; 0x2c
    3216:	01 97       	sbiw	r24, 0x01	; 1
    3218:	f1 f7       	brne	.-4      	; 0x3216 <H_LCD_void_Init+0x20e>
    321a:	9c a7       	std	Y+44, r25	; 0x2c
    321c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	H_LCD_void_sendCommand(CLCD_FUNCTION_SET_2);
    321e:	88 e2       	ldi	r24, 0x28	; 40
    3220:	0e 94 8e 1a 	call	0x351c	; 0x351c <H_LCD_void_sendCommand>
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	a0 ea       	ldi	r26, 0xA0	; 160
    322a:	b0 e4       	ldi	r27, 0x40	; 64
    322c:	8f a3       	std	Y+39, r24	; 0x27
    322e:	98 a7       	std	Y+40, r25	; 0x28
    3230:	a9 a7       	std	Y+41, r26	; 0x29
    3232:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3234:	6f a1       	ldd	r22, Y+39	; 0x27
    3236:	78 a5       	ldd	r23, Y+40	; 0x28
    3238:	89 a5       	ldd	r24, Y+41	; 0x29
    323a:	9a a5       	ldd	r25, Y+42	; 0x2a
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	4a e7       	ldi	r20, 0x7A	; 122
    3242:	55 e4       	ldi	r21, 0x45	; 69
    3244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	8b a3       	std	Y+35, r24	; 0x23
    324e:	9c a3       	std	Y+36, r25	; 0x24
    3250:	ad a3       	std	Y+37, r26	; 0x25
    3252:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3254:	6b a1       	ldd	r22, Y+35	; 0x23
    3256:	7c a1       	ldd	r23, Y+36	; 0x24
    3258:	8d a1       	ldd	r24, Y+37	; 0x25
    325a:	9e a1       	ldd	r25, Y+38	; 0x26
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	40 e8       	ldi	r20, 0x80	; 128
    3262:	5f e3       	ldi	r21, 0x3F	; 63
    3264:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3268:	88 23       	and	r24, r24
    326a:	2c f4       	brge	.+10     	; 0x3276 <H_LCD_void_Init+0x26e>
		__ticks = 1;
    326c:	81 e0       	ldi	r24, 0x01	; 1
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	9a a3       	std	Y+34, r25	; 0x22
    3272:	89 a3       	std	Y+33, r24	; 0x21
    3274:	3f c0       	rjmp	.+126    	; 0x32f4 <H_LCD_void_Init+0x2ec>
	else if (__tmp > 65535)
    3276:	6b a1       	ldd	r22, Y+35	; 0x23
    3278:	7c a1       	ldd	r23, Y+36	; 0x24
    327a:	8d a1       	ldd	r24, Y+37	; 0x25
    327c:	9e a1       	ldd	r25, Y+38	; 0x26
    327e:	20 e0       	ldi	r18, 0x00	; 0
    3280:	3f ef       	ldi	r19, 0xFF	; 255
    3282:	4f e7       	ldi	r20, 0x7F	; 127
    3284:	57 e4       	ldi	r21, 0x47	; 71
    3286:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    328a:	18 16       	cp	r1, r24
    328c:	4c f5       	brge	.+82     	; 0x32e0 <H_LCD_void_Init+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    328e:	6f a1       	ldd	r22, Y+39	; 0x27
    3290:	78 a5       	ldd	r23, Y+40	; 0x28
    3292:	89 a5       	ldd	r24, Y+41	; 0x29
    3294:	9a a5       	ldd	r25, Y+42	; 0x2a
    3296:	20 e0       	ldi	r18, 0x00	; 0
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	40 e2       	ldi	r20, 0x20	; 32
    329c:	51 e4       	ldi	r21, 0x41	; 65
    329e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a2:	dc 01       	movw	r26, r24
    32a4:	cb 01       	movw	r24, r22
    32a6:	bc 01       	movw	r22, r24
    32a8:	cd 01       	movw	r24, r26
    32aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ae:	dc 01       	movw	r26, r24
    32b0:	cb 01       	movw	r24, r22
    32b2:	9a a3       	std	Y+34, r25	; 0x22
    32b4:	89 a3       	std	Y+33, r24	; 0x21
    32b6:	0f c0       	rjmp	.+30     	; 0x32d6 <H_LCD_void_Init+0x2ce>
    32b8:	80 e9       	ldi	r24, 0x90	; 144
    32ba:	91 e0       	ldi	r25, 0x01	; 1
    32bc:	98 a3       	std	Y+32, r25	; 0x20
    32be:	8f 8f       	std	Y+31, r24	; 0x1f
    32c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32c2:	98 a1       	ldd	r25, Y+32	; 0x20
    32c4:	01 97       	sbiw	r24, 0x01	; 1
    32c6:	f1 f7       	brne	.-4      	; 0x32c4 <H_LCD_void_Init+0x2bc>
    32c8:	98 a3       	std	Y+32, r25	; 0x20
    32ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32cc:	89 a1       	ldd	r24, Y+33	; 0x21
    32ce:	9a a1       	ldd	r25, Y+34	; 0x22
    32d0:	01 97       	sbiw	r24, 0x01	; 1
    32d2:	9a a3       	std	Y+34, r25	; 0x22
    32d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32d6:	89 a1       	ldd	r24, Y+33	; 0x21
    32d8:	9a a1       	ldd	r25, Y+34	; 0x22
    32da:	00 97       	sbiw	r24, 0x00	; 0
    32dc:	69 f7       	brne	.-38     	; 0x32b8 <H_LCD_void_Init+0x2b0>
    32de:	14 c0       	rjmp	.+40     	; 0x3308 <H_LCD_void_Init+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32e0:	6b a1       	ldd	r22, Y+35	; 0x23
    32e2:	7c a1       	ldd	r23, Y+36	; 0x24
    32e4:	8d a1       	ldd	r24, Y+37	; 0x25
    32e6:	9e a1       	ldd	r25, Y+38	; 0x26
    32e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ec:	dc 01       	movw	r26, r24
    32ee:	cb 01       	movw	r24, r22
    32f0:	9a a3       	std	Y+34, r25	; 0x22
    32f2:	89 a3       	std	Y+33, r24	; 0x21
    32f4:	89 a1       	ldd	r24, Y+33	; 0x21
    32f6:	9a a1       	ldd	r25, Y+34	; 0x22
    32f8:	9e 8f       	std	Y+30, r25	; 0x1e
    32fa:	8d 8f       	std	Y+29, r24	; 0x1d
    32fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3300:	01 97       	sbiw	r24, 0x01	; 1
    3302:	f1 f7       	brne	.-4      	; 0x3300 <H_LCD_void_Init+0x2f8>
    3304:	9e 8f       	std	Y+30, r25	; 0x1e
    3306:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	/*Display ON/OFF*/
	H_LCD_void_sendCommand(CLCD_DISPLAY);
    3308:	8c e0       	ldi	r24, 0x0C	; 12
    330a:	0e 94 8e 1a 	call	0x351c	; 0x351c <H_LCD_void_sendCommand>
    330e:	80 e0       	ldi	r24, 0x00	; 0
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	a0 ea       	ldi	r26, 0xA0	; 160
    3314:	b0 e4       	ldi	r27, 0x40	; 64
    3316:	89 8f       	std	Y+25, r24	; 0x19
    3318:	9a 8f       	std	Y+26, r25	; 0x1a
    331a:	ab 8f       	std	Y+27, r26	; 0x1b
    331c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    331e:	69 8d       	ldd	r22, Y+25	; 0x19
    3320:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3322:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3324:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	4a e7       	ldi	r20, 0x7A	; 122
    332c:	55 e4       	ldi	r21, 0x45	; 69
    332e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3332:	dc 01       	movw	r26, r24
    3334:	cb 01       	movw	r24, r22
    3336:	8d 8b       	std	Y+21, r24	; 0x15
    3338:	9e 8b       	std	Y+22, r25	; 0x16
    333a:	af 8b       	std	Y+23, r26	; 0x17
    333c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    333e:	6d 89       	ldd	r22, Y+21	; 0x15
    3340:	7e 89       	ldd	r23, Y+22	; 0x16
    3342:	8f 89       	ldd	r24, Y+23	; 0x17
    3344:	98 8d       	ldd	r25, Y+24	; 0x18
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	40 e8       	ldi	r20, 0x80	; 128
    334c:	5f e3       	ldi	r21, 0x3F	; 63
    334e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3352:	88 23       	and	r24, r24
    3354:	2c f4       	brge	.+10     	; 0x3360 <H_LCD_void_Init+0x358>
		__ticks = 1;
    3356:	81 e0       	ldi	r24, 0x01	; 1
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	9c 8b       	std	Y+20, r25	; 0x14
    335c:	8b 8b       	std	Y+19, r24	; 0x13
    335e:	3f c0       	rjmp	.+126    	; 0x33de <H_LCD_void_Init+0x3d6>
	else if (__tmp > 65535)
    3360:	6d 89       	ldd	r22, Y+21	; 0x15
    3362:	7e 89       	ldd	r23, Y+22	; 0x16
    3364:	8f 89       	ldd	r24, Y+23	; 0x17
    3366:	98 8d       	ldd	r25, Y+24	; 0x18
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	3f ef       	ldi	r19, 0xFF	; 255
    336c:	4f e7       	ldi	r20, 0x7F	; 127
    336e:	57 e4       	ldi	r21, 0x47	; 71
    3370:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3374:	18 16       	cp	r1, r24
    3376:	4c f5       	brge	.+82     	; 0x33ca <H_LCD_void_Init+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3378:	69 8d       	ldd	r22, Y+25	; 0x19
    337a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    337c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    337e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	40 e2       	ldi	r20, 0x20	; 32
    3386:	51 e4       	ldi	r21, 0x41	; 65
    3388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338c:	dc 01       	movw	r26, r24
    338e:	cb 01       	movw	r24, r22
    3390:	bc 01       	movw	r22, r24
    3392:	cd 01       	movw	r24, r26
    3394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3398:	dc 01       	movw	r26, r24
    339a:	cb 01       	movw	r24, r22
    339c:	9c 8b       	std	Y+20, r25	; 0x14
    339e:	8b 8b       	std	Y+19, r24	; 0x13
    33a0:	0f c0       	rjmp	.+30     	; 0x33c0 <H_LCD_void_Init+0x3b8>
    33a2:	80 e9       	ldi	r24, 0x90	; 144
    33a4:	91 e0       	ldi	r25, 0x01	; 1
    33a6:	9a 8b       	std	Y+18, r25	; 0x12
    33a8:	89 8b       	std	Y+17, r24	; 0x11
    33aa:	89 89       	ldd	r24, Y+17	; 0x11
    33ac:	9a 89       	ldd	r25, Y+18	; 0x12
    33ae:	01 97       	sbiw	r24, 0x01	; 1
    33b0:	f1 f7       	brne	.-4      	; 0x33ae <H_LCD_void_Init+0x3a6>
    33b2:	9a 8b       	std	Y+18, r25	; 0x12
    33b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33b6:	8b 89       	ldd	r24, Y+19	; 0x13
    33b8:	9c 89       	ldd	r25, Y+20	; 0x14
    33ba:	01 97       	sbiw	r24, 0x01	; 1
    33bc:	9c 8b       	std	Y+20, r25	; 0x14
    33be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33c0:	8b 89       	ldd	r24, Y+19	; 0x13
    33c2:	9c 89       	ldd	r25, Y+20	; 0x14
    33c4:	00 97       	sbiw	r24, 0x00	; 0
    33c6:	69 f7       	brne	.-38     	; 0x33a2 <H_LCD_void_Init+0x39a>
    33c8:	14 c0       	rjmp	.+40     	; 0x33f2 <H_LCD_void_Init+0x3ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ca:	6d 89       	ldd	r22, Y+21	; 0x15
    33cc:	7e 89       	ldd	r23, Y+22	; 0x16
    33ce:	8f 89       	ldd	r24, Y+23	; 0x17
    33d0:	98 8d       	ldd	r25, Y+24	; 0x18
    33d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d6:	dc 01       	movw	r26, r24
    33d8:	cb 01       	movw	r24, r22
    33da:	9c 8b       	std	Y+20, r25	; 0x14
    33dc:	8b 8b       	std	Y+19, r24	; 0x13
    33de:	8b 89       	ldd	r24, Y+19	; 0x13
    33e0:	9c 89       	ldd	r25, Y+20	; 0x14
    33e2:	98 8b       	std	Y+16, r25	; 0x10
    33e4:	8f 87       	std	Y+15, r24	; 0x0f
    33e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    33e8:	98 89       	ldd	r25, Y+16	; 0x10
    33ea:	01 97       	sbiw	r24, 0x01	; 1
    33ec:	f1 f7       	brne	.-4      	; 0x33ea <H_LCD_void_Init+0x3e2>
    33ee:	98 8b       	std	Y+16, r25	; 0x10
    33f0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	/*Display clear*/
	H_LCD_void_sendCommand(CLCD_CLEAR);
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	0e 94 8e 1a 	call	0x351c	; 0x351c <H_LCD_void_sendCommand>
    33f8:	80 e0       	ldi	r24, 0x00	; 0
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	a0 ea       	ldi	r26, 0xA0	; 160
    33fe:	b0 e4       	ldi	r27, 0x40	; 64
    3400:	8b 87       	std	Y+11, r24	; 0x0b
    3402:	9c 87       	std	Y+12, r25	; 0x0c
    3404:	ad 87       	std	Y+13, r26	; 0x0d
    3406:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3408:	6b 85       	ldd	r22, Y+11	; 0x0b
    340a:	7c 85       	ldd	r23, Y+12	; 0x0c
    340c:	8d 85       	ldd	r24, Y+13	; 0x0d
    340e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3410:	20 e0       	ldi	r18, 0x00	; 0
    3412:	30 e0       	ldi	r19, 0x00	; 0
    3414:	4a e7       	ldi	r20, 0x7A	; 122
    3416:	55 e4       	ldi	r21, 0x45	; 69
    3418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    341c:	dc 01       	movw	r26, r24
    341e:	cb 01       	movw	r24, r22
    3420:	8f 83       	std	Y+7, r24	; 0x07
    3422:	98 87       	std	Y+8, r25	; 0x08
    3424:	a9 87       	std	Y+9, r26	; 0x09
    3426:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3428:	6f 81       	ldd	r22, Y+7	; 0x07
    342a:	78 85       	ldd	r23, Y+8	; 0x08
    342c:	89 85       	ldd	r24, Y+9	; 0x09
    342e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3430:	20 e0       	ldi	r18, 0x00	; 0
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	40 e8       	ldi	r20, 0x80	; 128
    3436:	5f e3       	ldi	r21, 0x3F	; 63
    3438:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    343c:	88 23       	and	r24, r24
    343e:	2c f4       	brge	.+10     	; 0x344a <H_LCD_void_Init+0x442>
		__ticks = 1;
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	9e 83       	std	Y+6, r25	; 0x06
    3446:	8d 83       	std	Y+5, r24	; 0x05
    3448:	3f c0       	rjmp	.+126    	; 0x34c8 <H_LCD_void_Init+0x4c0>
	else if (__tmp > 65535)
    344a:	6f 81       	ldd	r22, Y+7	; 0x07
    344c:	78 85       	ldd	r23, Y+8	; 0x08
    344e:	89 85       	ldd	r24, Y+9	; 0x09
    3450:	9a 85       	ldd	r25, Y+10	; 0x0a
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	3f ef       	ldi	r19, 0xFF	; 255
    3456:	4f e7       	ldi	r20, 0x7F	; 127
    3458:	57 e4       	ldi	r21, 0x47	; 71
    345a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    345e:	18 16       	cp	r1, r24
    3460:	4c f5       	brge	.+82     	; 0x34b4 <H_LCD_void_Init+0x4ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3462:	6b 85       	ldd	r22, Y+11	; 0x0b
    3464:	7c 85       	ldd	r23, Y+12	; 0x0c
    3466:	8d 85       	ldd	r24, Y+13	; 0x0d
    3468:	9e 85       	ldd	r25, Y+14	; 0x0e
    346a:	20 e0       	ldi	r18, 0x00	; 0
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	40 e2       	ldi	r20, 0x20	; 32
    3470:	51 e4       	ldi	r21, 0x41	; 65
    3472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3476:	dc 01       	movw	r26, r24
    3478:	cb 01       	movw	r24, r22
    347a:	bc 01       	movw	r22, r24
    347c:	cd 01       	movw	r24, r26
    347e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3482:	dc 01       	movw	r26, r24
    3484:	cb 01       	movw	r24, r22
    3486:	9e 83       	std	Y+6, r25	; 0x06
    3488:	8d 83       	std	Y+5, r24	; 0x05
    348a:	0f c0       	rjmp	.+30     	; 0x34aa <H_LCD_void_Init+0x4a2>
    348c:	80 e9       	ldi	r24, 0x90	; 144
    348e:	91 e0       	ldi	r25, 0x01	; 1
    3490:	9c 83       	std	Y+4, r25	; 0x04
    3492:	8b 83       	std	Y+3, r24	; 0x03
    3494:	8b 81       	ldd	r24, Y+3	; 0x03
    3496:	9c 81       	ldd	r25, Y+4	; 0x04
    3498:	01 97       	sbiw	r24, 0x01	; 1
    349a:	f1 f7       	brne	.-4      	; 0x3498 <H_LCD_void_Init+0x490>
    349c:	9c 83       	std	Y+4, r25	; 0x04
    349e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a0:	8d 81       	ldd	r24, Y+5	; 0x05
    34a2:	9e 81       	ldd	r25, Y+6	; 0x06
    34a4:	01 97       	sbiw	r24, 0x01	; 1
    34a6:	9e 83       	std	Y+6, r25	; 0x06
    34a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34aa:	8d 81       	ldd	r24, Y+5	; 0x05
    34ac:	9e 81       	ldd	r25, Y+6	; 0x06
    34ae:	00 97       	sbiw	r24, 0x00	; 0
    34b0:	69 f7       	brne	.-38     	; 0x348c <H_LCD_void_Init+0x484>
    34b2:	14 c0       	rjmp	.+40     	; 0x34dc <H_LCD_void_Init+0x4d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34b4:	6f 81       	ldd	r22, Y+7	; 0x07
    34b6:	78 85       	ldd	r23, Y+8	; 0x08
    34b8:	89 85       	ldd	r24, Y+9	; 0x09
    34ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    34bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c0:	dc 01       	movw	r26, r24
    34c2:	cb 01       	movw	r24, r22
    34c4:	9e 83       	std	Y+6, r25	; 0x06
    34c6:	8d 83       	std	Y+5, r24	; 0x05
    34c8:	8d 81       	ldd	r24, Y+5	; 0x05
    34ca:	9e 81       	ldd	r25, Y+6	; 0x06
    34cc:	9a 83       	std	Y+2, r25	; 0x02
    34ce:	89 83       	std	Y+1, r24	; 0x01
    34d0:	89 81       	ldd	r24, Y+1	; 0x01
    34d2:	9a 81       	ldd	r25, Y+2	; 0x02
    34d4:	01 97       	sbiw	r24, 0x01	; 1
    34d6:	f1 f7       	brne	.-4      	; 0x34d4 <H_LCD_void_Init+0x4cc>
    34d8:	9a 83       	std	Y+2, r25	; 0x02
    34da:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	H_LCD_void_sendCommand(CLCD_ENTRY_MODE_SET);
    34dc:	86 e0       	ldi	r24, 0x06	; 6
    34de:	0e 94 8e 1a 	call	0x351c	; 0x351c <H_LCD_void_sendCommand>
	/*clear display*/
	H_LCD_void_sendCommand(0b00000001);

#endif

}
    34e2:	ca 5b       	subi	r28, 0xBA	; 186
    34e4:	df 4f       	sbci	r29, 0xFF	; 255
    34e6:	0f b6       	in	r0, 0x3f	; 63
    34e8:	f8 94       	cli
    34ea:	de bf       	out	0x3e, r29	; 62
    34ec:	0f be       	out	0x3f, r0	; 63
    34ee:	cd bf       	out	0x3d, r28	; 61
    34f0:	cf 91       	pop	r28
    34f2:	df 91       	pop	r29
    34f4:	1f 91       	pop	r17
    34f6:	0f 91       	pop	r16
    34f8:	08 95       	ret

000034fa <H_LCD_void_sendData>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_sendData(u8 copy_u8data )
{
    34fa:	df 93       	push	r29
    34fc:	cf 93       	push	r28
    34fe:	0f 92       	push	r0
    3500:	cd b7       	in	r28, 0x3d	; 61
    3502:	de b7       	in	r29, 0x3e	; 62
    3504:	89 83       	std	Y+1, r24	; 0x01
	/*SET RS TO ZERO*/
	M_Dio_void_setPinValue(CLCD_RS_PIN,DIO_HIGH);
    3506:	8d e0       	ldi	r24, 0x0D	; 13
    3508:	61 e0       	ldi	r22, 0x01	; 1
    350a:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>
	/*Write command*/
	H_LCD_void_latchByte(copy_u8data);
    350e:	89 81       	ldd	r24, Y+1	; 0x01
    3510:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <H_LCD_void_latchByte>

}
    3514:	0f 90       	pop	r0
    3516:	cf 91       	pop	r28
    3518:	df 91       	pop	r29
    351a:	08 95       	ret

0000351c <H_LCD_void_sendCommand>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_sendCommand(u8 copy_u8command)
{
    351c:	df 93       	push	r29
    351e:	cf 93       	push	r28
    3520:	0f 92       	push	r0
    3522:	cd b7       	in	r28, 0x3d	; 61
    3524:	de b7       	in	r29, 0x3e	; 62
    3526:	89 83       	std	Y+1, r24	; 0x01
	/*SET RS TO ZERO*/
	M_Dio_void_setPinValue(CLCD_RS_PIN,DIO_LOW);
    3528:	8d e0       	ldi	r24, 0x0D	; 13
    352a:	60 e0       	ldi	r22, 0x00	; 0
    352c:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>
	/*Write command*/
	H_LCD_void_latchByte(copy_u8command);
    3530:	89 81       	ldd	r24, Y+1	; 0x01
    3532:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <H_LCD_void_latchByte>

}
    3536:	0f 90       	pop	r0
    3538:	cf 91       	pop	r28
    353a:	df 91       	pop	r29
    353c:	08 95       	ret

0000353e <H_LCD_void_sendString>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_sendString(const char * pstr)
{
    353e:	df 93       	push	r29
    3540:	cf 93       	push	r28
    3542:	00 d0       	rcall	.+0      	; 0x3544 <H_LCD_void_sendString+0x6>
    3544:	0f 92       	push	r0
    3546:	cd b7       	in	r28, 0x3d	; 61
    3548:	de b7       	in	r29, 0x3e	; 62
    354a:	9b 83       	std	Y+3, r25	; 0x03
    354c:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter;
	for(counter=0;pstr[counter]!=0;counter++)
    354e:	19 82       	std	Y+1, r1	; 0x01
    3550:	0e c0       	rjmp	.+28     	; 0x356e <H_LCD_void_sendString+0x30>
	{
		H_LCD_void_sendData(pstr[counter]);
    3552:	89 81       	ldd	r24, Y+1	; 0x01
    3554:	28 2f       	mov	r18, r24
    3556:	30 e0       	ldi	r19, 0x00	; 0
    3558:	8a 81       	ldd	r24, Y+2	; 0x02
    355a:	9b 81       	ldd	r25, Y+3	; 0x03
    355c:	fc 01       	movw	r30, r24
    355e:	e2 0f       	add	r30, r18
    3560:	f3 1f       	adc	r31, r19
    3562:	80 81       	ld	r24, Z
    3564:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <H_LCD_void_sendData>
  Return Value     : void
******************************************/
void H_LCD_void_sendString(const char * pstr)
{
	u8 counter;
	for(counter=0;pstr[counter]!=0;counter++)
    3568:	89 81       	ldd	r24, Y+1	; 0x01
    356a:	8f 5f       	subi	r24, 0xFF	; 255
    356c:	89 83       	std	Y+1, r24	; 0x01
    356e:	89 81       	ldd	r24, Y+1	; 0x01
    3570:	28 2f       	mov	r18, r24
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	8a 81       	ldd	r24, Y+2	; 0x02
    3576:	9b 81       	ldd	r25, Y+3	; 0x03
    3578:	fc 01       	movw	r30, r24
    357a:	e2 0f       	add	r30, r18
    357c:	f3 1f       	adc	r31, r19
    357e:	80 81       	ld	r24, Z
    3580:	88 23       	and	r24, r24
    3582:	39 f7       	brne	.-50     	; 0x3552 <H_LCD_void_sendString+0x14>
	{
		H_LCD_void_sendData(pstr[counter]);
	}
}
    3584:	0f 90       	pop	r0
    3586:	0f 90       	pop	r0
    3588:	0f 90       	pop	r0
    358a:	cf 91       	pop	r28
    358c:	df 91       	pop	r29
    358e:	08 95       	ret

00003590 <H_LCD_void_sendIntNum>:
	//H_LCD_void_sendData(copy_s32Num+'0');

}
*/
void H_LCD_void_sendIntNum(s32 copy_s32Num)
{
    3590:	0f 93       	push	r16
    3592:	1f 93       	push	r17
    3594:	df 93       	push	r29
    3596:	cf 93       	push	r28
    3598:	cd b7       	in	r28, 0x3d	; 61
    359a:	de b7       	in	r29, 0x3e	; 62
    359c:	a5 97       	sbiw	r28, 0x25	; 37
    359e:	0f b6       	in	r0, 0x3f	; 63
    35a0:	f8 94       	cli
    35a2:	de bf       	out	0x3e, r29	; 62
    35a4:	0f be       	out	0x3f, r0	; 63
    35a6:	cd bf       	out	0x3d, r28	; 61
    35a8:	6a a3       	std	Y+34, r22	; 0x22
    35aa:	7b a3       	std	Y+35, r23	; 0x23
    35ac:	8c a3       	std	Y+36, r24	; 0x24
    35ae:	9d a3       	std	Y+37, r25	; 0x25
	/* Local Variable to save the numbers digits*/
	s32 Local_Variable[8] = {0} ;
    35b0:	80 e2       	ldi	r24, 0x20	; 32
    35b2:	fe 01       	movw	r30, r28
    35b4:	32 96       	adiw	r30, 0x02	; 2
    35b6:	df 01       	movw	r26, r30
    35b8:	98 2f       	mov	r25, r24
    35ba:	1d 92       	st	X+, r1
    35bc:	9a 95       	dec	r25
    35be:	e9 f7       	brne	.-6      	; 0x35ba <H_LCD_void_sendIntNum+0x2a>
	u8 Local_Counter = 0 ;
    35c0:	19 82       	std	Y+1, r1	; 0x01

	/* Check if the number is negative */
	if (copy_s32Num < 0)
    35c2:	8a a1       	ldd	r24, Y+34	; 0x22
    35c4:	9b a1       	ldd	r25, Y+35	; 0x23
    35c6:	ac a1       	ldd	r26, Y+36	; 0x24
    35c8:	bd a1       	ldd	r27, Y+37	; 0x25
    35ca:	bb 23       	and	r27, r27
    35cc:	0c f0       	brlt	.+2      	; 0x35d0 <H_LCD_void_sendIntNum+0x40>
    35ce:	4a c0       	rjmp	.+148    	; 0x3664 <H_LCD_void_sendIntNum+0xd4>
	{
	/*Remove Negative Sign from number*/
	copy_s32Num = copy_s32Num * -1 ;
    35d0:	8a a1       	ldd	r24, Y+34	; 0x22
    35d2:	9b a1       	ldd	r25, Y+35	; 0x23
    35d4:	ac a1       	ldd	r26, Y+36	; 0x24
    35d6:	bd a1       	ldd	r27, Y+37	; 0x25
    35d8:	b0 95       	com	r27
    35da:	a0 95       	com	r26
    35dc:	90 95       	com	r25
    35de:	81 95       	neg	r24
    35e0:	9f 4f       	sbci	r25, 0xFF	; 255
    35e2:	af 4f       	sbci	r26, 0xFF	; 255
    35e4:	bf 4f       	sbci	r27, 0xFF	; 255
    35e6:	8a a3       	std	Y+34, r24	; 0x22
    35e8:	9b a3       	std	Y+35, r25	; 0x23
    35ea:	ac a3       	std	Y+36, r26	; 0x24
    35ec:	bd a3       	std	Y+37, r27	; 0x25
	/*Send Negative Sign */
	H_LCD_void_sendData('-');
    35ee:	8d e2       	ldi	r24, 0x2D	; 45
    35f0:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <H_LCD_void_sendData>
    35f4:	37 c0       	rjmp	.+110    	; 0x3664 <H_LCD_void_sendIntNum+0xd4>
	}
	/* While loop to split the Numbers and save it in Local_Variable*/
	while (copy_s32Num != 0)
	{
	Local_Variable[Local_Counter] = copy_s32Num % 10 ;
    35f6:	89 81       	ldd	r24, Y+1	; 0x01
    35f8:	08 2f       	mov	r16, r24
    35fa:	10 e0       	ldi	r17, 0x00	; 0
    35fc:	8a a1       	ldd	r24, Y+34	; 0x22
    35fe:	9b a1       	ldd	r25, Y+35	; 0x23
    3600:	ac a1       	ldd	r26, Y+36	; 0x24
    3602:	bd a1       	ldd	r27, Y+37	; 0x25
    3604:	2a e0       	ldi	r18, 0x0A	; 10
    3606:	30 e0       	ldi	r19, 0x00	; 0
    3608:	40 e0       	ldi	r20, 0x00	; 0
    360a:	50 e0       	ldi	r21, 0x00	; 0
    360c:	bc 01       	movw	r22, r24
    360e:	cd 01       	movw	r24, r26
    3610:	0e 94 a9 2e 	call	0x5d52	; 0x5d52 <__divmodsi4>
    3614:	dc 01       	movw	r26, r24
    3616:	cb 01       	movw	r24, r22
    3618:	ac 01       	movw	r20, r24
    361a:	bd 01       	movw	r22, r26
    361c:	98 01       	movw	r18, r16
    361e:	22 0f       	add	r18, r18
    3620:	33 1f       	adc	r19, r19
    3622:	22 0f       	add	r18, r18
    3624:	33 1f       	adc	r19, r19
    3626:	ce 01       	movw	r24, r28
    3628:	01 96       	adiw	r24, 0x01	; 1
    362a:	82 0f       	add	r24, r18
    362c:	93 1f       	adc	r25, r19
    362e:	fc 01       	movw	r30, r24
    3630:	31 96       	adiw	r30, 0x01	; 1
    3632:	40 83       	st	Z, r20
    3634:	51 83       	std	Z+1, r21	; 0x01
    3636:	62 83       	std	Z+2, r22	; 0x02
    3638:	73 83       	std	Z+3, r23	; 0x03
	copy_s32Num = copy_s32Num / 10 ;
    363a:	8a a1       	ldd	r24, Y+34	; 0x22
    363c:	9b a1       	ldd	r25, Y+35	; 0x23
    363e:	ac a1       	ldd	r26, Y+36	; 0x24
    3640:	bd a1       	ldd	r27, Y+37	; 0x25
    3642:	2a e0       	ldi	r18, 0x0A	; 10
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	40 e0       	ldi	r20, 0x00	; 0
    3648:	50 e0       	ldi	r21, 0x00	; 0
    364a:	bc 01       	movw	r22, r24
    364c:	cd 01       	movw	r24, r26
    364e:	0e 94 a9 2e 	call	0x5d52	; 0x5d52 <__divmodsi4>
    3652:	da 01       	movw	r26, r20
    3654:	c9 01       	movw	r24, r18
    3656:	8a a3       	std	Y+34, r24	; 0x22
    3658:	9b a3       	std	Y+35, r25	; 0x23
    365a:	ac a3       	std	Y+36, r26	; 0x24
    365c:	bd a3       	std	Y+37, r27	; 0x25
	Local_Counter ++ ;
    365e:	89 81       	ldd	r24, Y+1	; 0x01
    3660:	8f 5f       	subi	r24, 0xFF	; 255
    3662:	89 83       	std	Y+1, r24	; 0x01
	copy_s32Num = copy_s32Num * -1 ;
	/*Send Negative Sign */
	H_LCD_void_sendData('-');
	}
	/* While loop to split the Numbers and save it in Local_Variable*/
	while (copy_s32Num != 0)
    3664:	8a a1       	ldd	r24, Y+34	; 0x22
    3666:	9b a1       	ldd	r25, Y+35	; 0x23
    3668:	ac a1       	ldd	r26, Y+36	; 0x24
    366a:	bd a1       	ldd	r27, Y+37	; 0x25
    366c:	00 97       	sbiw	r24, 0x00	; 0
    366e:	a1 05       	cpc	r26, r1
    3670:	b1 05       	cpc	r27, r1
    3672:	09 f6       	brne	.-126    	; 0x35f6 <H_LCD_void_sendIntNum+0x66>
	copy_s32Num = copy_s32Num / 10 ;
	Local_Counter ++ ;

	}
	/* For loop to send the numbers using SendData*/
	for (Local_Counter --; Local_Counter < '0' ; Local_Counter--)
    3674:	89 81       	ldd	r24, Y+1	; 0x01
    3676:	81 50       	subi	r24, 0x01	; 1
    3678:	89 83       	std	Y+1, r24	; 0x01
    367a:	18 c0       	rjmp	.+48     	; 0x36ac <H_LCD_void_sendIntNum+0x11c>
	{
		 H_LCD_void_sendData('0' + Local_Variable[Local_Counter]);
    367c:	89 81       	ldd	r24, Y+1	; 0x01
    367e:	88 2f       	mov	r24, r24
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	9c 01       	movw	r18, r24
    3684:	22 0f       	add	r18, r18
    3686:	33 1f       	adc	r19, r19
    3688:	22 0f       	add	r18, r18
    368a:	33 1f       	adc	r19, r19
    368c:	ce 01       	movw	r24, r28
    368e:	01 96       	adiw	r24, 0x01	; 1
    3690:	82 0f       	add	r24, r18
    3692:	93 1f       	adc	r25, r19
    3694:	fc 01       	movw	r30, r24
    3696:	31 96       	adiw	r30, 0x01	; 1
    3698:	80 81       	ld	r24, Z
    369a:	91 81       	ldd	r25, Z+1	; 0x01
    369c:	a2 81       	ldd	r26, Z+2	; 0x02
    369e:	b3 81       	ldd	r27, Z+3	; 0x03
    36a0:	80 5d       	subi	r24, 0xD0	; 208
    36a2:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <H_LCD_void_sendData>
	copy_s32Num = copy_s32Num / 10 ;
	Local_Counter ++ ;

	}
	/* For loop to send the numbers using SendData*/
	for (Local_Counter --; Local_Counter < '0' ; Local_Counter--)
    36a6:	89 81       	ldd	r24, Y+1	; 0x01
    36a8:	81 50       	subi	r24, 0x01	; 1
    36aa:	89 83       	std	Y+1, r24	; 0x01
    36ac:	89 81       	ldd	r24, Y+1	; 0x01
    36ae:	80 33       	cpi	r24, 0x30	; 48
    36b0:	28 f3       	brcs	.-54     	; 0x367c <H_LCD_void_sendIntNum+0xec>
	{
		 H_LCD_void_sendData('0' + Local_Variable[Local_Counter]);
	}
}
    36b2:	a5 96       	adiw	r28, 0x25	; 37
    36b4:	0f b6       	in	r0, 0x3f	; 63
    36b6:	f8 94       	cli
    36b8:	de bf       	out	0x3e, r29	; 62
    36ba:	0f be       	out	0x3f, r0	; 63
    36bc:	cd bf       	out	0x3d, r28	; 61
    36be:	cf 91       	pop	r28
    36c0:	df 91       	pop	r29
    36c2:	1f 91       	pop	r17
    36c4:	0f 91       	pop	r16
    36c6:	08 95       	ret

000036c8 <H_LCD_void_gotoXY>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col)
{
    36c8:	df 93       	push	r29
    36ca:	cf 93       	push	r28
    36cc:	00 d0       	rcall	.+0      	; 0x36ce <H_LCD_void_gotoXY+0x6>
    36ce:	0f 92       	push	r0
    36d0:	cd b7       	in	r28, 0x3d	; 61
    36d2:	de b7       	in	r29, 0x3e	; 62
    36d4:	8a 83       	std	Y+2, r24	; 0x02
    36d6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(copy_u8Row == 1)
    36d8:	8a 81       	ldd	r24, Y+2	; 0x02
    36da:	81 30       	cpi	r24, 0x01	; 1
    36dc:	19 f4       	brne	.+6      	; 0x36e4 <H_LCD_void_gotoXY+0x1c>
	{
		Local_u8Address = copy_u8Col;
    36de:	8b 81       	ldd	r24, Y+3	; 0x03
    36e0:	89 83       	std	Y+1, r24	; 0x01
    36e2:	14 c0       	rjmp	.+40     	; 0x370c <H_LCD_void_gotoXY+0x44>
	}
	else if(copy_u8Row == 2)
    36e4:	8a 81       	ldd	r24, Y+2	; 0x02
    36e6:	82 30       	cpi	r24, 0x02	; 2
    36e8:	21 f4       	brne	.+8      	; 0x36f2 <H_LCD_void_gotoXY+0x2a>
	{
		Local_u8Address = copy_u8Col + 0x40;
    36ea:	8b 81       	ldd	r24, Y+3	; 0x03
    36ec:	80 5c       	subi	r24, 0xC0	; 192
    36ee:	89 83       	std	Y+1, r24	; 0x01
    36f0:	0d c0       	rjmp	.+26     	; 0x370c <H_LCD_void_gotoXY+0x44>
	}
	else if(copy_u8Row == 3)
    36f2:	8a 81       	ldd	r24, Y+2	; 0x02
    36f4:	83 30       	cpi	r24, 0x03	; 3
    36f6:	21 f4       	brne	.+8      	; 0x3700 <H_LCD_void_gotoXY+0x38>
	{
		Local_u8Address = copy_u8Col + 0x14;
    36f8:	8b 81       	ldd	r24, Y+3	; 0x03
    36fa:	8c 5e       	subi	r24, 0xEC	; 236
    36fc:	89 83       	std	Y+1, r24	; 0x01
    36fe:	06 c0       	rjmp	.+12     	; 0x370c <H_LCD_void_gotoXY+0x44>
	}
	else if(copy_u8Row == 4)
    3700:	8a 81       	ldd	r24, Y+2	; 0x02
    3702:	84 30       	cpi	r24, 0x04	; 4
    3704:	19 f4       	brne	.+6      	; 0x370c <H_LCD_void_gotoXY+0x44>
	{
		Local_u8Address = copy_u8Col + 0x54;
    3706:	8b 81       	ldd	r24, Y+3	; 0x03
    3708:	8c 5a       	subi	r24, 0xAC	; 172
    370a:	89 83       	std	Y+1, r24	; 0x01
	else
	{

	}
	//128 Is added to the address to set the most significant bit by 1 according to DDRAM address instruction
	H_LCD_void_sendCommand(Local_u8Address+128);
    370c:	89 81       	ldd	r24, Y+1	; 0x01
    370e:	80 58       	subi	r24, 0x80	; 128
    3710:	0e 94 8e 1a 	call	0x351c	; 0x351c <H_LCD_void_sendCommand>
}
    3714:	0f 90       	pop	r0
    3716:	0f 90       	pop	r0
    3718:	0f 90       	pop	r0
    371a:	cf 91       	pop	r28
    371c:	df 91       	pop	r29
    371e:	08 95       	ret

00003720 <H_LCD_void_creatCustomChar>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_creatCustomChar (const u8 * ArrPattern,u8 copy_u8charCode)
{
    3720:	df 93       	push	r29
    3722:	cf 93       	push	r28
    3724:	00 d0       	rcall	.+0      	; 0x3726 <H_LCD_void_creatCustomChar+0x6>
    3726:	00 d0       	rcall	.+0      	; 0x3728 <H_LCD_void_creatCustomChar+0x8>
    3728:	0f 92       	push	r0
    372a:	cd b7       	in	r28, 0x3d	; 61
    372c:	de b7       	in	r29, 0x3e	; 62
    372e:	9c 83       	std	Y+4, r25	; 0x04
    3730:	8b 83       	std	Y+3, r24	; 0x03
    3732:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_counter=0;
    3734:	1a 82       	std	Y+2, r1	; 0x02
	/*first calculate CGRAM address since each block of address is 8bytes*/
	u8 Local_u8CGramaddress=0;
    3736:	19 82       	std	Y+1, r1	; 0x01
	Local_u8CGramaddress = copy_u8charCode*8;
    3738:	8d 81       	ldd	r24, Y+5	; 0x05
    373a:	88 2f       	mov	r24, r24
    373c:	90 e0       	ldi	r25, 0x00	; 0
    373e:	88 0f       	add	r24, r24
    3740:	99 1f       	adc	r25, r25
    3742:	88 0f       	add	r24, r24
    3744:	99 1f       	adc	r25, r25
    3746:	88 0f       	add	r24, r24
    3748:	99 1f       	adc	r25, r25
    374a:	89 83       	std	Y+1, r24	; 0x01
	/*Access CGRAM block using function Send command by setting bit 6 and clearing bit7*/
	H_LCD_void_sendCommand(Local_u8CGramaddress+64);
    374c:	89 81       	ldd	r24, Y+1	; 0x01
    374e:	80 5c       	subi	r24, 0xC0	; 192
    3750:	0e 94 8e 1a 	call	0x351c	; 0x351c <H_LCD_void_sendCommand>
	/*write the pattern to the CG ram */
	for(Local_counter=0;Local_counter<8;Local_counter++) /*<8 since there are 8 memory locations only for cgram (64bytes)*/
    3754:	1a 82       	std	Y+2, r1	; 0x02
    3756:	0e c0       	rjmp	.+28     	; 0x3774 <H_LCD_void_creatCustomChar+0x54>
	{
		H_LCD_void_sendData(ArrPattern[Local_counter]);
    3758:	8a 81       	ldd	r24, Y+2	; 0x02
    375a:	28 2f       	mov	r18, r24
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	8b 81       	ldd	r24, Y+3	; 0x03
    3760:	9c 81       	ldd	r25, Y+4	; 0x04
    3762:	fc 01       	movw	r30, r24
    3764:	e2 0f       	add	r30, r18
    3766:	f3 1f       	adc	r31, r19
    3768:	80 81       	ld	r24, Z
    376a:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <H_LCD_void_sendData>
	u8 Local_u8CGramaddress=0;
	Local_u8CGramaddress = copy_u8charCode*8;
	/*Access CGRAM block using function Send command by setting bit 6 and clearing bit7*/
	H_LCD_void_sendCommand(Local_u8CGramaddress+64);
	/*write the pattern to the CG ram */
	for(Local_counter=0;Local_counter<8;Local_counter++) /*<8 since there are 8 memory locations only for cgram (64bytes)*/
    376e:	8a 81       	ldd	r24, Y+2	; 0x02
    3770:	8f 5f       	subi	r24, 0xFF	; 255
    3772:	8a 83       	std	Y+2, r24	; 0x02
    3774:	8a 81       	ldd	r24, Y+2	; 0x02
    3776:	88 30       	cpi	r24, 0x08	; 8
    3778:	78 f3       	brcs	.-34     	; 0x3758 <H_LCD_void_creatCustomChar+0x38>
	{
		H_LCD_void_sendData(ArrPattern[Local_counter]);
	}
	H_LCD_void_gotoXY(1,0);
    377a:	81 e0       	ldi	r24, 0x01	; 1
    377c:	60 e0       	ldi	r22, 0x00	; 0
    377e:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <H_LCD_void_gotoXY>
	H_LCD_void_sendData(copy_u8charCode);
    3782:	8d 81       	ldd	r24, Y+5	; 0x05
    3784:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <H_LCD_void_sendData>

}
    3788:	0f 90       	pop	r0
    378a:	0f 90       	pop	r0
    378c:	0f 90       	pop	r0
    378e:	0f 90       	pop	r0
    3790:	0f 90       	pop	r0
    3792:	cf 91       	pop	r28
    3794:	df 91       	pop	r29
    3796:	08 95       	ret

00003798 <H_LCD_void_displayCustomChar>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_displayCustomChar (u8 copy_u8charCode)
{
    3798:	df 93       	push	r29
    379a:	cf 93       	push	r28
    379c:	0f 92       	push	r0
    379e:	cd b7       	in	r28, 0x3d	; 61
    37a0:	de b7       	in	r29, 0x3e	; 62
    37a2:	89 83       	std	Y+1, r24	; 0x01
	/*give the custom char number to send data*/
	H_LCD_void_sendData(copy_u8charCode);
    37a4:	89 81       	ldd	r24, Y+1	; 0x01
    37a6:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <H_LCD_void_sendData>
}
    37aa:	0f 90       	pop	r0
    37ac:	cf 91       	pop	r28
    37ae:	df 91       	pop	r29
    37b0:	08 95       	ret

000037b2 <H_LCD_void_ClearDisplay>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_ClearDisplay(void)
{
    37b2:	df 93       	push	r29
    37b4:	cf 93       	push	r28
    37b6:	cd b7       	in	r28, 0x3d	; 61
    37b8:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_sendCommand(CLCD_CLEAR);
    37ba:	81 e0       	ldi	r24, 0x01	; 1
    37bc:	0e 94 8e 1a 	call	0x351c	; 0x351c <H_LCD_void_sendCommand>
}
    37c0:	cf 91       	pop	r28
    37c2:	df 91       	pop	r29
    37c4:	08 95       	ret

000037c6 <H_BUZZER_Void_TurnOn>:
#include "Buzzer_Int.h"
#include "Buzzer_Types.h"
#include "Buzzer_Priv.h"

void H_BUZZER_Void_TurnOn(void)
{
    37c6:	df 93       	push	r29
    37c8:	cf 93       	push	r28
    37ca:	cd b7       	in	r28, 0x3d	; 61
    37cc:	de b7       	in	r29, 0x3e	; 62
	M_Dio_void_setPinValue(BUZZER_1_PIN, DIO_HIGH);
    37ce:	84 e2       	ldi	r24, 0x24	; 36
    37d0:	61 e0       	ldi	r22, 0x01	; 1
    37d2:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>
}
    37d6:	cf 91       	pop	r28
    37d8:	df 91       	pop	r29
    37da:	08 95       	ret

000037dc <H_BUZZER_Void_TurnOff>:
void H_BUZZER_Void_TurnOff(void)
{
    37dc:	df 93       	push	r29
    37de:	cf 93       	push	r28
    37e0:	cd b7       	in	r28, 0x3d	; 61
    37e2:	de b7       	in	r29, 0x3e	; 62
	M_Dio_void_setPinValue(BUZZER_1_PIN, DIO_LOW);
    37e4:	84 e2       	ldi	r24, 0x24	; 36
    37e6:	60 e0       	ldi	r22, 0x00	; 0
    37e8:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>
}
    37ec:	cf 91       	pop	r28
    37ee:	df 91       	pop	r29
    37f0:	08 95       	ret

000037f2 <APP_INIT>:

/**************************************************************************************************************
 *	Application Initlization
 *************************************************************************************************************/
void APP_INIT()
{
    37f2:	df 93       	push	r29
    37f4:	cf 93       	push	r28
    37f6:	cd b7       	in	r28, 0x3d	; 61
    37f8:	de b7       	in	r29, 0x3e	; 62
    37fa:	aa 97       	sbiw	r28, 0x2a	; 42
    37fc:	0f b6       	in	r0, 0x3f	; 63
    37fe:	f8 94       	cli
    3800:	de bf       	out	0x3e, r29	; 62
    3802:	0f be       	out	0x3f, r0	; 63
    3804:	cd bf       	out	0x3d, r28	; 61

	/***
	 * 	Initialize section
	 ****/
	Port_Init(PORT_Config_Arr);
    3806:	8d e7       	ldi	r24, 0x7D	; 125
    3808:	93 e0       	ldi	r25, 0x03	; 3
    380a:	0e 94 2c 08 	call	0x1058	; 0x1058 <Port_Init>
	H_LCD_void_Init();
    380e:	0e 94 04 18 	call	0x3008	; 0x3008 <H_LCD_void_Init>
	H_EEPROM_Void_Init();
    3812:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <H_EEPROM_Void_Init>
    3816:	80 e0       	ldi	r24, 0x00	; 0
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	a8 e4       	ldi	r26, 0x48	; 72
    381c:	b3 e4       	ldi	r27, 0x43	; 67
    381e:	8f a3       	std	Y+39, r24	; 0x27
    3820:	98 a7       	std	Y+40, r25	; 0x28
    3822:	a9 a7       	std	Y+41, r26	; 0x29
    3824:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3826:	6f a1       	ldd	r22, Y+39	; 0x27
    3828:	78 a5       	ldd	r23, Y+40	; 0x28
    382a:	89 a5       	ldd	r24, Y+41	; 0x29
    382c:	9a a5       	ldd	r25, Y+42	; 0x2a
    382e:	20 e0       	ldi	r18, 0x00	; 0
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	4a e7       	ldi	r20, 0x7A	; 122
    3834:	55 e4       	ldi	r21, 0x45	; 69
    3836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    383a:	dc 01       	movw	r26, r24
    383c:	cb 01       	movw	r24, r22
    383e:	8b a3       	std	Y+35, r24	; 0x23
    3840:	9c a3       	std	Y+36, r25	; 0x24
    3842:	ad a3       	std	Y+37, r26	; 0x25
    3844:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3846:	6b a1       	ldd	r22, Y+35	; 0x23
    3848:	7c a1       	ldd	r23, Y+36	; 0x24
    384a:	8d a1       	ldd	r24, Y+37	; 0x25
    384c:	9e a1       	ldd	r25, Y+38	; 0x26
    384e:	20 e0       	ldi	r18, 0x00	; 0
    3850:	30 e0       	ldi	r19, 0x00	; 0
    3852:	40 e8       	ldi	r20, 0x80	; 128
    3854:	5f e3       	ldi	r21, 0x3F	; 63
    3856:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    385a:	88 23       	and	r24, r24
    385c:	2c f4       	brge	.+10     	; 0x3868 <APP_INIT+0x76>
		__ticks = 1;
    385e:	81 e0       	ldi	r24, 0x01	; 1
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	9a a3       	std	Y+34, r25	; 0x22
    3864:	89 a3       	std	Y+33, r24	; 0x21
    3866:	3f c0       	rjmp	.+126    	; 0x38e6 <APP_INIT+0xf4>
	else if (__tmp > 65535)
    3868:	6b a1       	ldd	r22, Y+35	; 0x23
    386a:	7c a1       	ldd	r23, Y+36	; 0x24
    386c:	8d a1       	ldd	r24, Y+37	; 0x25
    386e:	9e a1       	ldd	r25, Y+38	; 0x26
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	3f ef       	ldi	r19, 0xFF	; 255
    3874:	4f e7       	ldi	r20, 0x7F	; 127
    3876:	57 e4       	ldi	r21, 0x47	; 71
    3878:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    387c:	18 16       	cp	r1, r24
    387e:	4c f5       	brge	.+82     	; 0x38d2 <APP_INIT+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3880:	6f a1       	ldd	r22, Y+39	; 0x27
    3882:	78 a5       	ldd	r23, Y+40	; 0x28
    3884:	89 a5       	ldd	r24, Y+41	; 0x29
    3886:	9a a5       	ldd	r25, Y+42	; 0x2a
    3888:	20 e0       	ldi	r18, 0x00	; 0
    388a:	30 e0       	ldi	r19, 0x00	; 0
    388c:	40 e2       	ldi	r20, 0x20	; 32
    388e:	51 e4       	ldi	r21, 0x41	; 65
    3890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3894:	dc 01       	movw	r26, r24
    3896:	cb 01       	movw	r24, r22
    3898:	bc 01       	movw	r22, r24
    389a:	cd 01       	movw	r24, r26
    389c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a0:	dc 01       	movw	r26, r24
    38a2:	cb 01       	movw	r24, r22
    38a4:	9a a3       	std	Y+34, r25	; 0x22
    38a6:	89 a3       	std	Y+33, r24	; 0x21
    38a8:	0f c0       	rjmp	.+30     	; 0x38c8 <APP_INIT+0xd6>
    38aa:	80 e9       	ldi	r24, 0x90	; 144
    38ac:	91 e0       	ldi	r25, 0x01	; 1
    38ae:	98 a3       	std	Y+32, r25	; 0x20
    38b0:	8f 8f       	std	Y+31, r24	; 0x1f
    38b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38b4:	98 a1       	ldd	r25, Y+32	; 0x20
    38b6:	01 97       	sbiw	r24, 0x01	; 1
    38b8:	f1 f7       	brne	.-4      	; 0x38b6 <APP_INIT+0xc4>
    38ba:	98 a3       	std	Y+32, r25	; 0x20
    38bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38be:	89 a1       	ldd	r24, Y+33	; 0x21
    38c0:	9a a1       	ldd	r25, Y+34	; 0x22
    38c2:	01 97       	sbiw	r24, 0x01	; 1
    38c4:	9a a3       	std	Y+34, r25	; 0x22
    38c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38c8:	89 a1       	ldd	r24, Y+33	; 0x21
    38ca:	9a a1       	ldd	r25, Y+34	; 0x22
    38cc:	00 97       	sbiw	r24, 0x00	; 0
    38ce:	69 f7       	brne	.-38     	; 0x38aa <APP_INIT+0xb8>
    38d0:	14 c0       	rjmp	.+40     	; 0x38fa <APP_INIT+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38d2:	6b a1       	ldd	r22, Y+35	; 0x23
    38d4:	7c a1       	ldd	r23, Y+36	; 0x24
    38d6:	8d a1       	ldd	r24, Y+37	; 0x25
    38d8:	9e a1       	ldd	r25, Y+38	; 0x26
    38da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38de:	dc 01       	movw	r26, r24
    38e0:	cb 01       	movw	r24, r22
    38e2:	9a a3       	std	Y+34, r25	; 0x22
    38e4:	89 a3       	std	Y+33, r24	; 0x21
    38e6:	89 a1       	ldd	r24, Y+33	; 0x21
    38e8:	9a a1       	ldd	r25, Y+34	; 0x22
    38ea:	9e 8f       	std	Y+30, r25	; 0x1e
    38ec:	8d 8f       	std	Y+29, r24	; 0x1d
    38ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38f2:	01 97       	sbiw	r24, 0x01	; 1
    38f4:	f1 f7       	brne	.-4      	; 0x38f2 <APP_INIT+0x100>
    38f6:	9e 8f       	std	Y+30, r25	; 0x1e
    38f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(200);
	H_RTC_Void_Init();
    38fa:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <H_RTC_Void_Init>
    38fe:	80 e0       	ldi	r24, 0x00	; 0
    3900:	90 e0       	ldi	r25, 0x00	; 0
    3902:	a8 e4       	ldi	r26, 0x48	; 72
    3904:	b3 e4       	ldi	r27, 0x43	; 67
    3906:	89 8f       	std	Y+25, r24	; 0x19
    3908:	9a 8f       	std	Y+26, r25	; 0x1a
    390a:	ab 8f       	std	Y+27, r26	; 0x1b
    390c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    390e:	69 8d       	ldd	r22, Y+25	; 0x19
    3910:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3912:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3914:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3916:	20 e0       	ldi	r18, 0x00	; 0
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	4a e7       	ldi	r20, 0x7A	; 122
    391c:	55 e4       	ldi	r21, 0x45	; 69
    391e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3922:	dc 01       	movw	r26, r24
    3924:	cb 01       	movw	r24, r22
    3926:	8d 8b       	std	Y+21, r24	; 0x15
    3928:	9e 8b       	std	Y+22, r25	; 0x16
    392a:	af 8b       	std	Y+23, r26	; 0x17
    392c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    392e:	6d 89       	ldd	r22, Y+21	; 0x15
    3930:	7e 89       	ldd	r23, Y+22	; 0x16
    3932:	8f 89       	ldd	r24, Y+23	; 0x17
    3934:	98 8d       	ldd	r25, Y+24	; 0x18
    3936:	20 e0       	ldi	r18, 0x00	; 0
    3938:	30 e0       	ldi	r19, 0x00	; 0
    393a:	40 e8       	ldi	r20, 0x80	; 128
    393c:	5f e3       	ldi	r21, 0x3F	; 63
    393e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3942:	88 23       	and	r24, r24
    3944:	2c f4       	brge	.+10     	; 0x3950 <APP_INIT+0x15e>
		__ticks = 1;
    3946:	81 e0       	ldi	r24, 0x01	; 1
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	9c 8b       	std	Y+20, r25	; 0x14
    394c:	8b 8b       	std	Y+19, r24	; 0x13
    394e:	3f c0       	rjmp	.+126    	; 0x39ce <APP_INIT+0x1dc>
	else if (__tmp > 65535)
    3950:	6d 89       	ldd	r22, Y+21	; 0x15
    3952:	7e 89       	ldd	r23, Y+22	; 0x16
    3954:	8f 89       	ldd	r24, Y+23	; 0x17
    3956:	98 8d       	ldd	r25, Y+24	; 0x18
    3958:	20 e0       	ldi	r18, 0x00	; 0
    395a:	3f ef       	ldi	r19, 0xFF	; 255
    395c:	4f e7       	ldi	r20, 0x7F	; 127
    395e:	57 e4       	ldi	r21, 0x47	; 71
    3960:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3964:	18 16       	cp	r1, r24
    3966:	4c f5       	brge	.+82     	; 0x39ba <APP_INIT+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3968:	69 8d       	ldd	r22, Y+25	; 0x19
    396a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    396c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    396e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3970:	20 e0       	ldi	r18, 0x00	; 0
    3972:	30 e0       	ldi	r19, 0x00	; 0
    3974:	40 e2       	ldi	r20, 0x20	; 32
    3976:	51 e4       	ldi	r21, 0x41	; 65
    3978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    397c:	dc 01       	movw	r26, r24
    397e:	cb 01       	movw	r24, r22
    3980:	bc 01       	movw	r22, r24
    3982:	cd 01       	movw	r24, r26
    3984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3988:	dc 01       	movw	r26, r24
    398a:	cb 01       	movw	r24, r22
    398c:	9c 8b       	std	Y+20, r25	; 0x14
    398e:	8b 8b       	std	Y+19, r24	; 0x13
    3990:	0f c0       	rjmp	.+30     	; 0x39b0 <APP_INIT+0x1be>
    3992:	80 e9       	ldi	r24, 0x90	; 144
    3994:	91 e0       	ldi	r25, 0x01	; 1
    3996:	9a 8b       	std	Y+18, r25	; 0x12
    3998:	89 8b       	std	Y+17, r24	; 0x11
    399a:	89 89       	ldd	r24, Y+17	; 0x11
    399c:	9a 89       	ldd	r25, Y+18	; 0x12
    399e:	01 97       	sbiw	r24, 0x01	; 1
    39a0:	f1 f7       	brne	.-4      	; 0x399e <APP_INIT+0x1ac>
    39a2:	9a 8b       	std	Y+18, r25	; 0x12
    39a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39a6:	8b 89       	ldd	r24, Y+19	; 0x13
    39a8:	9c 89       	ldd	r25, Y+20	; 0x14
    39aa:	01 97       	sbiw	r24, 0x01	; 1
    39ac:	9c 8b       	std	Y+20, r25	; 0x14
    39ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39b0:	8b 89       	ldd	r24, Y+19	; 0x13
    39b2:	9c 89       	ldd	r25, Y+20	; 0x14
    39b4:	00 97       	sbiw	r24, 0x00	; 0
    39b6:	69 f7       	brne	.-38     	; 0x3992 <APP_INIT+0x1a0>
    39b8:	14 c0       	rjmp	.+40     	; 0x39e2 <APP_INIT+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ba:	6d 89       	ldd	r22, Y+21	; 0x15
    39bc:	7e 89       	ldd	r23, Y+22	; 0x16
    39be:	8f 89       	ldd	r24, Y+23	; 0x17
    39c0:	98 8d       	ldd	r25, Y+24	; 0x18
    39c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c6:	dc 01       	movw	r26, r24
    39c8:	cb 01       	movw	r24, r22
    39ca:	9c 8b       	std	Y+20, r25	; 0x14
    39cc:	8b 8b       	std	Y+19, r24	; 0x13
    39ce:	8b 89       	ldd	r24, Y+19	; 0x13
    39d0:	9c 89       	ldd	r25, Y+20	; 0x14
    39d2:	98 8b       	std	Y+16, r25	; 0x10
    39d4:	8f 87       	std	Y+15, r24	; 0x0f
    39d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    39d8:	98 89       	ldd	r25, Y+16	; 0x10
    39da:	01 97       	sbiw	r24, 0x01	; 1
    39dc:	f1 f7       	brne	.-4      	; 0x39da <APP_INIT+0x1e8>
    39de:	98 8b       	std	Y+16, r25	; 0x10
    39e0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	Finger_Print_Init();
    39e2:	0e 94 0d 10 	call	0x201a	; 0x201a <Finger_Print_Init>

	/* Initial value will be Low */
    M_Dio_void_setPinValue(DIO_PA6, DIO_LOW);
    39e6:	80 e1       	ldi	r24, 0x10	; 16
    39e8:	60 e0       	ldi	r22, 0x00	; 0
    39ea:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>
    H_LCD_void_sendString("####################");
    39ee:	8e e8       	ldi	r24, 0x8E	; 142
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
    H_LCD_void_gotoXY(2, 5);
    39f6:	82 e0       	ldi	r24, 0x02	; 2
    39f8:	65 e0       	ldi	r22, 0x05	; 5
    39fa:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <H_LCD_void_gotoXY>
    H_LCD_void_sendString("WELCOME NTI");
    39fe:	83 ea       	ldi	r24, 0xA3	; 163
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
    H_LCD_void_gotoXY(3, 2);
    3a06:	83 e0       	ldi	r24, 0x03	; 3
    3a08:	62 e0       	ldi	r22, 0x02	; 2
    3a0a:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <H_LCD_void_gotoXY>
    H_LCD_void_sendString("SMART HOME SYSTEM");
    3a0e:	8f ea       	ldi	r24, 0xAF	; 175
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
    H_LCD_void_gotoXY(4, 0);
    3a16:	84 e0       	ldi	r24, 0x04	; 4
    3a18:	60 e0       	ldi	r22, 0x00	; 0
    3a1a:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <H_LCD_void_gotoXY>
    H_LCD_void_sendString("####################");
    3a1e:	8e e8       	ldi	r24, 0x8E	; 142
    3a20:	90 e0       	ldi	r25, 0x00	; 0
    3a22:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
    3a26:	80 e0       	ldi	r24, 0x00	; 0
    3a28:	90 e4       	ldi	r25, 0x40	; 64
    3a2a:	ac e9       	ldi	r26, 0x9C	; 156
    3a2c:	b5 e4       	ldi	r27, 0x45	; 69
    3a2e:	8b 87       	std	Y+11, r24	; 0x0b
    3a30:	9c 87       	std	Y+12, r25	; 0x0c
    3a32:	ad 87       	std	Y+13, r26	; 0x0d
    3a34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a36:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a38:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a3e:	20 e0       	ldi	r18, 0x00	; 0
    3a40:	30 e0       	ldi	r19, 0x00	; 0
    3a42:	4a e7       	ldi	r20, 0x7A	; 122
    3a44:	55 e4       	ldi	r21, 0x45	; 69
    3a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a4a:	dc 01       	movw	r26, r24
    3a4c:	cb 01       	movw	r24, r22
    3a4e:	8f 83       	std	Y+7, r24	; 0x07
    3a50:	98 87       	std	Y+8, r25	; 0x08
    3a52:	a9 87       	std	Y+9, r26	; 0x09
    3a54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a56:	6f 81       	ldd	r22, Y+7	; 0x07
    3a58:	78 85       	ldd	r23, Y+8	; 0x08
    3a5a:	89 85       	ldd	r24, Y+9	; 0x09
    3a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a5e:	20 e0       	ldi	r18, 0x00	; 0
    3a60:	30 e0       	ldi	r19, 0x00	; 0
    3a62:	40 e8       	ldi	r20, 0x80	; 128
    3a64:	5f e3       	ldi	r21, 0x3F	; 63
    3a66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a6a:	88 23       	and	r24, r24
    3a6c:	2c f4       	brge	.+10     	; 0x3a78 <APP_INIT+0x286>
		__ticks = 1;
    3a6e:	81 e0       	ldi	r24, 0x01	; 1
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	9e 83       	std	Y+6, r25	; 0x06
    3a74:	8d 83       	std	Y+5, r24	; 0x05
    3a76:	3f c0       	rjmp	.+126    	; 0x3af6 <APP_INIT+0x304>
	else if (__tmp > 65535)
    3a78:	6f 81       	ldd	r22, Y+7	; 0x07
    3a7a:	78 85       	ldd	r23, Y+8	; 0x08
    3a7c:	89 85       	ldd	r24, Y+9	; 0x09
    3a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a80:	20 e0       	ldi	r18, 0x00	; 0
    3a82:	3f ef       	ldi	r19, 0xFF	; 255
    3a84:	4f e7       	ldi	r20, 0x7F	; 127
    3a86:	57 e4       	ldi	r21, 0x47	; 71
    3a88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a8c:	18 16       	cp	r1, r24
    3a8e:	4c f5       	brge	.+82     	; 0x3ae2 <APP_INIT+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a90:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a92:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a94:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a96:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a98:	20 e0       	ldi	r18, 0x00	; 0
    3a9a:	30 e0       	ldi	r19, 0x00	; 0
    3a9c:	40 e2       	ldi	r20, 0x20	; 32
    3a9e:	51 e4       	ldi	r21, 0x41	; 65
    3aa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aa4:	dc 01       	movw	r26, r24
    3aa6:	cb 01       	movw	r24, r22
    3aa8:	bc 01       	movw	r22, r24
    3aaa:	cd 01       	movw	r24, r26
    3aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab0:	dc 01       	movw	r26, r24
    3ab2:	cb 01       	movw	r24, r22
    3ab4:	9e 83       	std	Y+6, r25	; 0x06
    3ab6:	8d 83       	std	Y+5, r24	; 0x05
    3ab8:	0f c0       	rjmp	.+30     	; 0x3ad8 <APP_INIT+0x2e6>
    3aba:	80 e9       	ldi	r24, 0x90	; 144
    3abc:	91 e0       	ldi	r25, 0x01	; 1
    3abe:	9c 83       	std	Y+4, r25	; 0x04
    3ac0:	8b 83       	std	Y+3, r24	; 0x03
    3ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ac6:	01 97       	sbiw	r24, 0x01	; 1
    3ac8:	f1 f7       	brne	.-4      	; 0x3ac6 <APP_INIT+0x2d4>
    3aca:	9c 83       	std	Y+4, r25	; 0x04
    3acc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ace:	8d 81       	ldd	r24, Y+5	; 0x05
    3ad0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ad2:	01 97       	sbiw	r24, 0x01	; 1
    3ad4:	9e 83       	std	Y+6, r25	; 0x06
    3ad6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    3ada:	9e 81       	ldd	r25, Y+6	; 0x06
    3adc:	00 97       	sbiw	r24, 0x00	; 0
    3ade:	69 f7       	brne	.-38     	; 0x3aba <APP_INIT+0x2c8>
    3ae0:	14 c0       	rjmp	.+40     	; 0x3b0a <APP_INIT+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ae2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ae4:	78 85       	ldd	r23, Y+8	; 0x08
    3ae6:	89 85       	ldd	r24, Y+9	; 0x09
    3ae8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aee:	dc 01       	movw	r26, r24
    3af0:	cb 01       	movw	r24, r22
    3af2:	9e 83       	std	Y+6, r25	; 0x06
    3af4:	8d 83       	std	Y+5, r24	; 0x05
    3af6:	8d 81       	ldd	r24, Y+5	; 0x05
    3af8:	9e 81       	ldd	r25, Y+6	; 0x06
    3afa:	9a 83       	std	Y+2, r25	; 0x02
    3afc:	89 83       	std	Y+1, r24	; 0x01
    3afe:	89 81       	ldd	r24, Y+1	; 0x01
    3b00:	9a 81       	ldd	r25, Y+2	; 0x02
    3b02:	01 97       	sbiw	r24, 0x01	; 1
    3b04:	f1 f7       	brne	.-4      	; 0x3b02 <APP_INIT+0x310>
    3b06:	9a 83       	std	Y+2, r25	; 0x02
    3b08:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(5000);
}
    3b0a:	aa 96       	adiw	r28, 0x2a	; 42
    3b0c:	0f b6       	in	r0, 0x3f	; 63
    3b0e:	f8 94       	cli
    3b10:	de bf       	out	0x3e, r29	; 62
    3b12:	0f be       	out	0x3f, r0	; 63
    3b14:	cd bf       	out	0x3d, r28	; 61
    3b16:	cf 91       	pop	r28
    3b18:	df 91       	pop	r29
    3b1a:	08 95       	ret

00003b1c <APP_Start>:

/**************************************************************************************************************
 *	 Start of Algorithm
 *************************************************************************************************************/
void APP_Start()
{
    3b1c:	df 93       	push	r29
    3b1e:	cf 93       	push	r28
    3b20:	cd b7       	in	r28, 0x3d	; 61
    3b22:	de b7       	in	r29, 0x3e	; 62
    3b24:	af 97       	sbiw	r28, 0x2f	; 47
    3b26:	0f b6       	in	r0, 0x3f	; 63
    3b28:	f8 94       	cli
    3b2a:	de bf       	out	0x3e, r29	; 62
    3b2c:	0f be       	out	0x3f, r0	; 63
    3b2e:	cd bf       	out	0x3d, r28	; 61
//	H_RTC_Void_SetTime(Set_TimeArr, RTC_PM);
 	u8 KeyPad_Value = 0 ;
    3b30:	1d a6       	std	Y+45, r1	; 0x2d
	u8 User_Status = 0 ;
    3b32:	1c a6       	std	Y+44, r1	; 0x2c
	u8 Temp_Holder = 0 ;
    3b34:	1b a6       	std	Y+43, r1	; 0x2b
	/*
	 * Starting Display
	 */
	H_LCD_void_ClearDisplay();
    3b36:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <H_LCD_void_ClearDisplay>
	APP_WelcomeDisplay();
    3b3a:	0e 94 20 2a 	call	0x5440	; 0x5440 <APP_WelcomeDisplay>
	/*
	 * Chose option
	 */
	do{
		KeyPad_Value = H_KEYPAD_u8_getPressedKey();
    3b3e:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <H_KEYPAD_u8_getPressedKey>
    3b42:	8d a7       	std	Y+45, r24	; 0x2d
	  }while(KeyPad_Value == NO_PRESSED_KEY);
    3b44:	8d a5       	ldd	r24, Y+45	; 0x2d
    3b46:	88 23       	and	r24, r24
    3b48:	d1 f3       	breq	.-12     	; 0x3b3e <APP_Start+0x22>

		/* Check the options*/
		switch(KeyPad_Value)
    3b4a:	8d a5       	ldd	r24, Y+45	; 0x2d
    3b4c:	28 2f       	mov	r18, r24
    3b4e:	30 e0       	ldi	r19, 0x00	; 0
    3b50:	3f a7       	std	Y+47, r19	; 0x2f
    3b52:	2e a7       	std	Y+46, r18	; 0x2e
    3b54:	8e a5       	ldd	r24, Y+46	; 0x2e
    3b56:	9f a5       	ldd	r25, Y+47	; 0x2f
    3b58:	82 33       	cpi	r24, 0x32	; 50
    3b5a:	91 05       	cpc	r25, r1
    3b5c:	59 f0       	breq	.+22     	; 0x3b74 <APP_Start+0x58>
    3b5e:	2e a5       	ldd	r18, Y+46	; 0x2e
    3b60:	3f a5       	ldd	r19, Y+47	; 0x2f
    3b62:	23 33       	cpi	r18, 0x33	; 51
    3b64:	31 05       	cpc	r19, r1
    3b66:	79 f0       	breq	.+30     	; 0x3b86 <APP_Start+0x6a>
    3b68:	8e a5       	ldd	r24, Y+46	; 0x2e
    3b6a:	9f a5       	ldd	r25, Y+47	; 0x2f
    3b6c:	81 33       	cpi	r24, 0x31	; 49
    3b6e:	91 05       	cpc	r25, r1
    3b70:	31 f0       	breq	.+12     	; 0x3b7e <APP_Start+0x62>
    3b72:	80 c0       	rjmp	.+256    	; 0x3c74 <APP_Start+0x158>
		{
		case USER_SIGN_UP:	User_Status = 2 ;User_Authentication_SignUp(); break;
    3b74:	82 e0       	ldi	r24, 0x02	; 2
    3b76:	8c a7       	std	Y+44, r24	; 0x2c
    3b78:	0e 94 21 20 	call	0x4042	; 0x4042 <User_Authentication_SignUp>
    3b7c:	7d c0       	rjmp	.+250    	; 0x3c78 <APP_Start+0x15c>
		case USER_SIGN_IN:	User_Status = User_Authentication_SignIn();
    3b7e:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <User_Authentication_SignIn>
    3b82:	8c a7       	std	Y+44, r24	; 0x2c
    3b84:	79 c0       	rjmp	.+242    	; 0x3c78 <APP_Start+0x15c>
							break;
		case USER_REST_ID:  User_Status = USER_REST_ID;
    3b86:	83 e3       	ldi	r24, 0x33	; 51
    3b88:	8c a7       	std	Y+44, r24	; 0x2c
							Rest_Password();
    3b8a:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <Rest_Password>
    3b8e:	80 e0       	ldi	r24, 0x00	; 0
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	a8 e4       	ldi	r26, 0x48	; 72
    3b94:	b3 e4       	ldi	r27, 0x43	; 67
    3b96:	8f a3       	std	Y+39, r24	; 0x27
    3b98:	98 a7       	std	Y+40, r25	; 0x28
    3b9a:	a9 a7       	std	Y+41, r26	; 0x29
    3b9c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b9e:	6f a1       	ldd	r22, Y+39	; 0x27
    3ba0:	78 a5       	ldd	r23, Y+40	; 0x28
    3ba2:	89 a5       	ldd	r24, Y+41	; 0x29
    3ba4:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ba6:	20 e0       	ldi	r18, 0x00	; 0
    3ba8:	30 e0       	ldi	r19, 0x00	; 0
    3baa:	4a e7       	ldi	r20, 0x7A	; 122
    3bac:	55 e4       	ldi	r21, 0x45	; 69
    3bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bb2:	dc 01       	movw	r26, r24
    3bb4:	cb 01       	movw	r24, r22
    3bb6:	8b a3       	std	Y+35, r24	; 0x23
    3bb8:	9c a3       	std	Y+36, r25	; 0x24
    3bba:	ad a3       	std	Y+37, r26	; 0x25
    3bbc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3bbe:	6b a1       	ldd	r22, Y+35	; 0x23
    3bc0:	7c a1       	ldd	r23, Y+36	; 0x24
    3bc2:	8d a1       	ldd	r24, Y+37	; 0x25
    3bc4:	9e a1       	ldd	r25, Y+38	; 0x26
    3bc6:	20 e0       	ldi	r18, 0x00	; 0
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	40 e8       	ldi	r20, 0x80	; 128
    3bcc:	5f e3       	ldi	r21, 0x3F	; 63
    3bce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bd2:	88 23       	and	r24, r24
    3bd4:	2c f4       	brge	.+10     	; 0x3be0 <APP_Start+0xc4>
		__ticks = 1;
    3bd6:	81 e0       	ldi	r24, 0x01	; 1
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	9a a3       	std	Y+34, r25	; 0x22
    3bdc:	89 a3       	std	Y+33, r24	; 0x21
    3bde:	3f c0       	rjmp	.+126    	; 0x3c5e <APP_Start+0x142>
	else if (__tmp > 65535)
    3be0:	6b a1       	ldd	r22, Y+35	; 0x23
    3be2:	7c a1       	ldd	r23, Y+36	; 0x24
    3be4:	8d a1       	ldd	r24, Y+37	; 0x25
    3be6:	9e a1       	ldd	r25, Y+38	; 0x26
    3be8:	20 e0       	ldi	r18, 0x00	; 0
    3bea:	3f ef       	ldi	r19, 0xFF	; 255
    3bec:	4f e7       	ldi	r20, 0x7F	; 127
    3bee:	57 e4       	ldi	r21, 0x47	; 71
    3bf0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bf4:	18 16       	cp	r1, r24
    3bf6:	4c f5       	brge	.+82     	; 0x3c4a <APP_Start+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bf8:	6f a1       	ldd	r22, Y+39	; 0x27
    3bfa:	78 a5       	ldd	r23, Y+40	; 0x28
    3bfc:	89 a5       	ldd	r24, Y+41	; 0x29
    3bfe:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c00:	20 e0       	ldi	r18, 0x00	; 0
    3c02:	30 e0       	ldi	r19, 0x00	; 0
    3c04:	40 e2       	ldi	r20, 0x20	; 32
    3c06:	51 e4       	ldi	r21, 0x41	; 65
    3c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c0c:	dc 01       	movw	r26, r24
    3c0e:	cb 01       	movw	r24, r22
    3c10:	bc 01       	movw	r22, r24
    3c12:	cd 01       	movw	r24, r26
    3c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c18:	dc 01       	movw	r26, r24
    3c1a:	cb 01       	movw	r24, r22
    3c1c:	9a a3       	std	Y+34, r25	; 0x22
    3c1e:	89 a3       	std	Y+33, r24	; 0x21
    3c20:	0f c0       	rjmp	.+30     	; 0x3c40 <APP_Start+0x124>
    3c22:	80 e9       	ldi	r24, 0x90	; 144
    3c24:	91 e0       	ldi	r25, 0x01	; 1
    3c26:	98 a3       	std	Y+32, r25	; 0x20
    3c28:	8f 8f       	std	Y+31, r24	; 0x1f
    3c2a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c2c:	98 a1       	ldd	r25, Y+32	; 0x20
    3c2e:	01 97       	sbiw	r24, 0x01	; 1
    3c30:	f1 f7       	brne	.-4      	; 0x3c2e <APP_Start+0x112>
    3c32:	98 a3       	std	Y+32, r25	; 0x20
    3c34:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c36:	89 a1       	ldd	r24, Y+33	; 0x21
    3c38:	9a a1       	ldd	r25, Y+34	; 0x22
    3c3a:	01 97       	sbiw	r24, 0x01	; 1
    3c3c:	9a a3       	std	Y+34, r25	; 0x22
    3c3e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c40:	89 a1       	ldd	r24, Y+33	; 0x21
    3c42:	9a a1       	ldd	r25, Y+34	; 0x22
    3c44:	00 97       	sbiw	r24, 0x00	; 0
    3c46:	69 f7       	brne	.-38     	; 0x3c22 <APP_Start+0x106>
    3c48:	17 c0       	rjmp	.+46     	; 0x3c78 <APP_Start+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c4a:	6b a1       	ldd	r22, Y+35	; 0x23
    3c4c:	7c a1       	ldd	r23, Y+36	; 0x24
    3c4e:	8d a1       	ldd	r24, Y+37	; 0x25
    3c50:	9e a1       	ldd	r25, Y+38	; 0x26
    3c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c56:	dc 01       	movw	r26, r24
    3c58:	cb 01       	movw	r24, r22
    3c5a:	9a a3       	std	Y+34, r25	; 0x22
    3c5c:	89 a3       	std	Y+33, r24	; 0x21
    3c5e:	89 a1       	ldd	r24, Y+33	; 0x21
    3c60:	9a a1       	ldd	r25, Y+34	; 0x22
    3c62:	9e 8f       	std	Y+30, r25	; 0x1e
    3c64:	8d 8f       	std	Y+29, r24	; 0x1d
    3c66:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c68:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c6a:	01 97       	sbiw	r24, 0x01	; 1
    3c6c:	f1 f7       	brne	.-4      	; 0x3c6a <APP_Start+0x14e>
    3c6e:	9e 8f       	std	Y+30, r25	; 0x1e
    3c70:	8d 8f       	std	Y+29, r24	; 0x1d
    3c72:	02 c0       	rjmp	.+4      	; 0x3c78 <APP_Start+0x15c>
							 _delay_ms(200);
							break;
		default: User_Status = OUT_OF_RANGE; break;
    3c74:	84 e6       	ldi	r24, 0x64	; 100
    3c76:	8c a7       	std	Y+44, r24	; 0x2c
		}

	/*
	 * in case of valid Login
	 */
	H_LCD_void_ClearDisplay();
    3c78:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <H_LCD_void_ClearDisplay>
	if (User_Status == VALID_LOGIN)
    3c7c:	8c a5       	ldd	r24, Y+44	; 0x2c
    3c7e:	81 30       	cpi	r24, 0x01	; 1
    3c80:	39 f4       	brne	.+14     	; 0x3c90 <APP_Start+0x174>
	{
		H_LCD_void_sendString("VALID_LOGIN");
    3c82:	81 ec       	ldi	r24, 0xC1	; 193
    3c84:	90 e0       	ldi	r25, 0x00	; 0
    3c86:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
		Successful_Authentication();
    3c8a:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <Successful_Authentication>
    3c8e:	0d c1       	rjmp	.+538    	; 0x3eaa <APP_Start+0x38e>
	}
	else if (User_Status == INVALID_LOGIN)
    3c90:	8c a5       	ldd	r24, Y+44	; 0x2c
    3c92:	88 23       	and	r24, r24
    3c94:	09 f0       	breq	.+2      	; 0x3c98 <APP_Start+0x17c>
    3c96:	09 c1       	rjmp	.+530    	; 0x3eaa <APP_Start+0x38e>
	{
		/* Loop to re-enter data */
		do
		{
		H_LCD_void_gotoXY(1, 0);
    3c98:	81 e0       	ldi	r24, 0x01	; 1
    3c9a:	60 e0       	ldi	r22, 0x00	; 0
    3c9c:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <H_LCD_void_gotoXY>
		H_LCD_void_sendString("Invalid Login");
    3ca0:	8d ec       	ldi	r24, 0xCD	; 205
    3ca2:	90 e0       	ldi	r25, 0x00	; 0
    3ca4:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
    3ca8:	80 e0       	ldi	r24, 0x00	; 0
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	aa e7       	ldi	r26, 0x7A	; 122
    3cae:	b4 e4       	ldi	r27, 0x44	; 68
    3cb0:	89 8f       	std	Y+25, r24	; 0x19
    3cb2:	9a 8f       	std	Y+26, r25	; 0x1a
    3cb4:	ab 8f       	std	Y+27, r26	; 0x1b
    3cb6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cb8:	69 8d       	ldd	r22, Y+25	; 0x19
    3cba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3cbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cc0:	20 e0       	ldi	r18, 0x00	; 0
    3cc2:	30 e0       	ldi	r19, 0x00	; 0
    3cc4:	4a e7       	ldi	r20, 0x7A	; 122
    3cc6:	55 e4       	ldi	r21, 0x45	; 69
    3cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ccc:	dc 01       	movw	r26, r24
    3cce:	cb 01       	movw	r24, r22
    3cd0:	8d 8b       	std	Y+21, r24	; 0x15
    3cd2:	9e 8b       	std	Y+22, r25	; 0x16
    3cd4:	af 8b       	std	Y+23, r26	; 0x17
    3cd6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3cd8:	6d 89       	ldd	r22, Y+21	; 0x15
    3cda:	7e 89       	ldd	r23, Y+22	; 0x16
    3cdc:	8f 89       	ldd	r24, Y+23	; 0x17
    3cde:	98 8d       	ldd	r25, Y+24	; 0x18
    3ce0:	20 e0       	ldi	r18, 0x00	; 0
    3ce2:	30 e0       	ldi	r19, 0x00	; 0
    3ce4:	40 e8       	ldi	r20, 0x80	; 128
    3ce6:	5f e3       	ldi	r21, 0x3F	; 63
    3ce8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cec:	88 23       	and	r24, r24
    3cee:	2c f4       	brge	.+10     	; 0x3cfa <APP_Start+0x1de>
		__ticks = 1;
    3cf0:	81 e0       	ldi	r24, 0x01	; 1
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
    3cf4:	9c 8b       	std	Y+20, r25	; 0x14
    3cf6:	8b 8b       	std	Y+19, r24	; 0x13
    3cf8:	3f c0       	rjmp	.+126    	; 0x3d78 <APP_Start+0x25c>
	else if (__tmp > 65535)
    3cfa:	6d 89       	ldd	r22, Y+21	; 0x15
    3cfc:	7e 89       	ldd	r23, Y+22	; 0x16
    3cfe:	8f 89       	ldd	r24, Y+23	; 0x17
    3d00:	98 8d       	ldd	r25, Y+24	; 0x18
    3d02:	20 e0       	ldi	r18, 0x00	; 0
    3d04:	3f ef       	ldi	r19, 0xFF	; 255
    3d06:	4f e7       	ldi	r20, 0x7F	; 127
    3d08:	57 e4       	ldi	r21, 0x47	; 71
    3d0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d0e:	18 16       	cp	r1, r24
    3d10:	4c f5       	brge	.+82     	; 0x3d64 <APP_Start+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d12:	69 8d       	ldd	r22, Y+25	; 0x19
    3d14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d1a:	20 e0       	ldi	r18, 0x00	; 0
    3d1c:	30 e0       	ldi	r19, 0x00	; 0
    3d1e:	40 e2       	ldi	r20, 0x20	; 32
    3d20:	51 e4       	ldi	r21, 0x41	; 65
    3d22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d26:	dc 01       	movw	r26, r24
    3d28:	cb 01       	movw	r24, r22
    3d2a:	bc 01       	movw	r22, r24
    3d2c:	cd 01       	movw	r24, r26
    3d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d32:	dc 01       	movw	r26, r24
    3d34:	cb 01       	movw	r24, r22
    3d36:	9c 8b       	std	Y+20, r25	; 0x14
    3d38:	8b 8b       	std	Y+19, r24	; 0x13
    3d3a:	0f c0       	rjmp	.+30     	; 0x3d5a <APP_Start+0x23e>
    3d3c:	80 e9       	ldi	r24, 0x90	; 144
    3d3e:	91 e0       	ldi	r25, 0x01	; 1
    3d40:	9a 8b       	std	Y+18, r25	; 0x12
    3d42:	89 8b       	std	Y+17, r24	; 0x11
    3d44:	89 89       	ldd	r24, Y+17	; 0x11
    3d46:	9a 89       	ldd	r25, Y+18	; 0x12
    3d48:	01 97       	sbiw	r24, 0x01	; 1
    3d4a:	f1 f7       	brne	.-4      	; 0x3d48 <APP_Start+0x22c>
    3d4c:	9a 8b       	std	Y+18, r25	; 0x12
    3d4e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d50:	8b 89       	ldd	r24, Y+19	; 0x13
    3d52:	9c 89       	ldd	r25, Y+20	; 0x14
    3d54:	01 97       	sbiw	r24, 0x01	; 1
    3d56:	9c 8b       	std	Y+20, r25	; 0x14
    3d58:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d5a:	8b 89       	ldd	r24, Y+19	; 0x13
    3d5c:	9c 89       	ldd	r25, Y+20	; 0x14
    3d5e:	00 97       	sbiw	r24, 0x00	; 0
    3d60:	69 f7       	brne	.-38     	; 0x3d3c <APP_Start+0x220>
    3d62:	14 c0       	rjmp	.+40     	; 0x3d8c <APP_Start+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d64:	6d 89       	ldd	r22, Y+21	; 0x15
    3d66:	7e 89       	ldd	r23, Y+22	; 0x16
    3d68:	8f 89       	ldd	r24, Y+23	; 0x17
    3d6a:	98 8d       	ldd	r25, Y+24	; 0x18
    3d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d70:	dc 01       	movw	r26, r24
    3d72:	cb 01       	movw	r24, r22
    3d74:	9c 8b       	std	Y+20, r25	; 0x14
    3d76:	8b 8b       	std	Y+19, r24	; 0x13
    3d78:	8b 89       	ldd	r24, Y+19	; 0x13
    3d7a:	9c 89       	ldd	r25, Y+20	; 0x14
    3d7c:	98 8b       	std	Y+16, r25	; 0x10
    3d7e:	8f 87       	std	Y+15, r24	; 0x0f
    3d80:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d82:	98 89       	ldd	r25, Y+16	; 0x10
    3d84:	01 97       	sbiw	r24, 0x01	; 1
    3d86:	f1 f7       	brne	.-4      	; 0x3d84 <APP_Start+0x268>
    3d88:	98 8b       	std	Y+16, r25	; 0x10
    3d8a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		Temp_Holder = Wrong_Authentication();
    3d8c:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <Wrong_Authentication>
    3d90:	8b a7       	std	Y+43, r24	; 0x2b
		H_LCD_void_ClearDisplay();
    3d92:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <H_LCD_void_ClearDisplay>
		if (Temp_Holder == Pass_Ok)
    3d96:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d98:	81 30       	cpi	r24, 0x01	; 1
    3d9a:	09 f0       	breq	.+2      	; 0x3d9e <APP_Start+0x282>
    3d9c:	79 c0       	rjmp	.+242    	; 0x3e90 <APP_Start+0x374>
		{
			H_LCD_void_sendString("VALID_LOGIN");
    3d9e:	81 ec       	ldi	r24, 0xC1	; 193
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
    3da6:	80 e0       	ldi	r24, 0x00	; 0
    3da8:	90 e0       	ldi	r25, 0x00	; 0
    3daa:	aa ef       	ldi	r26, 0xFA	; 250
    3dac:	b4 e4       	ldi	r27, 0x44	; 68
    3dae:	8b 87       	std	Y+11, r24	; 0x0b
    3db0:	9c 87       	std	Y+12, r25	; 0x0c
    3db2:	ad 87       	std	Y+13, r26	; 0x0d
    3db4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3db6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3db8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dba:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dbe:	20 e0       	ldi	r18, 0x00	; 0
    3dc0:	30 e0       	ldi	r19, 0x00	; 0
    3dc2:	4a e7       	ldi	r20, 0x7A	; 122
    3dc4:	55 e4       	ldi	r21, 0x45	; 69
    3dc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dca:	dc 01       	movw	r26, r24
    3dcc:	cb 01       	movw	r24, r22
    3dce:	8f 83       	std	Y+7, r24	; 0x07
    3dd0:	98 87       	std	Y+8, r25	; 0x08
    3dd2:	a9 87       	std	Y+9, r26	; 0x09
    3dd4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dd6:	6f 81       	ldd	r22, Y+7	; 0x07
    3dd8:	78 85       	ldd	r23, Y+8	; 0x08
    3dda:	89 85       	ldd	r24, Y+9	; 0x09
    3ddc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dde:	20 e0       	ldi	r18, 0x00	; 0
    3de0:	30 e0       	ldi	r19, 0x00	; 0
    3de2:	40 e8       	ldi	r20, 0x80	; 128
    3de4:	5f e3       	ldi	r21, 0x3F	; 63
    3de6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3dea:	88 23       	and	r24, r24
    3dec:	2c f4       	brge	.+10     	; 0x3df8 <APP_Start+0x2dc>
		__ticks = 1;
    3dee:	81 e0       	ldi	r24, 0x01	; 1
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	9e 83       	std	Y+6, r25	; 0x06
    3df4:	8d 83       	std	Y+5, r24	; 0x05
    3df6:	3f c0       	rjmp	.+126    	; 0x3e76 <APP_Start+0x35a>
	else if (__tmp > 65535)
    3df8:	6f 81       	ldd	r22, Y+7	; 0x07
    3dfa:	78 85       	ldd	r23, Y+8	; 0x08
    3dfc:	89 85       	ldd	r24, Y+9	; 0x09
    3dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e00:	20 e0       	ldi	r18, 0x00	; 0
    3e02:	3f ef       	ldi	r19, 0xFF	; 255
    3e04:	4f e7       	ldi	r20, 0x7F	; 127
    3e06:	57 e4       	ldi	r21, 0x47	; 71
    3e08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e0c:	18 16       	cp	r1, r24
    3e0e:	4c f5       	brge	.+82     	; 0x3e62 <APP_Start+0x346>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e10:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e12:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e14:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e16:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e18:	20 e0       	ldi	r18, 0x00	; 0
    3e1a:	30 e0       	ldi	r19, 0x00	; 0
    3e1c:	40 e2       	ldi	r20, 0x20	; 32
    3e1e:	51 e4       	ldi	r21, 0x41	; 65
    3e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e24:	dc 01       	movw	r26, r24
    3e26:	cb 01       	movw	r24, r22
    3e28:	bc 01       	movw	r22, r24
    3e2a:	cd 01       	movw	r24, r26
    3e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e30:	dc 01       	movw	r26, r24
    3e32:	cb 01       	movw	r24, r22
    3e34:	9e 83       	std	Y+6, r25	; 0x06
    3e36:	8d 83       	std	Y+5, r24	; 0x05
    3e38:	0f c0       	rjmp	.+30     	; 0x3e58 <APP_Start+0x33c>
    3e3a:	80 e9       	ldi	r24, 0x90	; 144
    3e3c:	91 e0       	ldi	r25, 0x01	; 1
    3e3e:	9c 83       	std	Y+4, r25	; 0x04
    3e40:	8b 83       	std	Y+3, r24	; 0x03
    3e42:	8b 81       	ldd	r24, Y+3	; 0x03
    3e44:	9c 81       	ldd	r25, Y+4	; 0x04
    3e46:	01 97       	sbiw	r24, 0x01	; 1
    3e48:	f1 f7       	brne	.-4      	; 0x3e46 <APP_Start+0x32a>
    3e4a:	9c 83       	std	Y+4, r25	; 0x04
    3e4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e50:	9e 81       	ldd	r25, Y+6	; 0x06
    3e52:	01 97       	sbiw	r24, 0x01	; 1
    3e54:	9e 83       	std	Y+6, r25	; 0x06
    3e56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e58:	8d 81       	ldd	r24, Y+5	; 0x05
    3e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e5c:	00 97       	sbiw	r24, 0x00	; 0
    3e5e:	69 f7       	brne	.-38     	; 0x3e3a <APP_Start+0x31e>
    3e60:	14 c0       	rjmp	.+40     	; 0x3e8a <APP_Start+0x36e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e62:	6f 81       	ldd	r22, Y+7	; 0x07
    3e64:	78 85       	ldd	r23, Y+8	; 0x08
    3e66:	89 85       	ldd	r24, Y+9	; 0x09
    3e68:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e6e:	dc 01       	movw	r26, r24
    3e70:	cb 01       	movw	r24, r22
    3e72:	9e 83       	std	Y+6, r25	; 0x06
    3e74:	8d 83       	std	Y+5, r24	; 0x05
    3e76:	8d 81       	ldd	r24, Y+5	; 0x05
    3e78:	9e 81       	ldd	r25, Y+6	; 0x06
    3e7a:	9a 83       	std	Y+2, r25	; 0x02
    3e7c:	89 83       	std	Y+1, r24	; 0x01
    3e7e:	89 81       	ldd	r24, Y+1	; 0x01
    3e80:	9a 81       	ldd	r25, Y+2	; 0x02
    3e82:	01 97       	sbiw	r24, 0x01	; 1
    3e84:	f1 f7       	brne	.-4      	; 0x3e82 <APP_Start+0x366>
    3e86:	9a 83       	std	Y+2, r25	; 0x02
    3e88:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2000);
			Successful_Authentication();
    3e8a:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <Successful_Authentication>
    3e8e:	0b c0       	rjmp	.+22     	; 0x3ea6 <APP_Start+0x38a>
			break;
		}
		/*Check if exceeded number of Trials or not */
		if(Global_PasswordCounter == MAX_TRIALS)
    3e90:	80 91 24 04 	lds	r24, 0x0424
    3e94:	82 30       	cpi	r24, 0x02	; 2
    3e96:	11 f4       	brne	.+4      	; 0x3e9c <APP_Start+0x380>
		{
			// System stop for 5 min
				SYSTEM_OFF();
    3e98:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <SYSTEM_OFF>
		}

		}while(Global_PasswordCounter != MAX_TRIALS);
    3e9c:	80 91 24 04 	lds	r24, 0x0424
    3ea0:	82 30       	cpi	r24, 0x02	; 2
    3ea2:	09 f0       	breq	.+2      	; 0x3ea6 <APP_Start+0x38a>
    3ea4:	f9 ce       	rjmp	.-526    	; 0x3c98 <APP_Start+0x17c>

		/*Clear Global Passowrd counter */
		Global_PasswordCounter = 0 ;
    3ea6:	10 92 24 04 	sts	0x0424, r1
	else if (User_Status == USER_REST_ID)
	{
		/* Password is rested  */
	}

}
    3eaa:	af 96       	adiw	r28, 0x2f	; 47
    3eac:	0f b6       	in	r0, 0x3f	; 63
    3eae:	f8 94       	cli
    3eb0:	de bf       	out	0x3e, r29	; 62
    3eb2:	0f be       	out	0x3f, r0	; 63
    3eb4:	cd bf       	out	0x3d, r28	; 61
    3eb6:	cf 91       	pop	r28
    3eb8:	df 91       	pop	r29
    3eba:	08 95       	ret

00003ebc <User_Authentication_SignIn>:

/**************************************************************************************************************
 *				Functions
 *************************************************************************************************************/
LOGIN_STATE User_Authentication_SignIn()
{
    3ebc:	df 93       	push	r29
    3ebe:	cf 93       	push	r28
    3ec0:	cd b7       	in	r28, 0x3d	; 61
    3ec2:	de b7       	in	r29, 0x3e	; 62
    3ec4:	65 97       	sbiw	r28, 0x15	; 21
    3ec6:	0f b6       	in	r0, 0x3f	; 63
    3ec8:	f8 94       	cli
    3eca:	de bf       	out	0x3e, r29	; 62
    3ecc:	0f be       	out	0x3f, r0	; 63
    3ece:	cd bf       	out	0x3d, r28	; 61
	/*
	 * Local Variables
	 */
	u8 checkTemp = 0 ;
    3ed0:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_PassWordArr[4] = {0};
    3ed2:	19 8a       	std	Y+17, r1	; 0x11
    3ed4:	1a 8a       	std	Y+18, r1	; 0x12
    3ed6:	1b 8a       	std	Y+19, r1	; 0x13
    3ed8:	1c 8a       	std	Y+20, r1	; 0x14
	u8 Local_ID = 0 ;
    3eda:	1f 86       	std	Y+15, r1	; 0x0f
	/*
	 * Scan the finger print
	 * each finger print will have ID
	 */

	Local_ID=Finger_Print_Match();
    3edc:	0e 94 50 12 	call	0x24a0	; 0x24a0 <Finger_Print_Match>
    3ee0:	8f 87       	std	Y+15, r24	; 0x0f

	/* Check ID*/
	if(Local_ID!=0)	// Correct finger print
    3ee2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ee4:	88 23       	and	r24, r24
    3ee6:	09 f4       	brne	.+2      	; 0x3eea <User_Authentication_SignIn+0x2e>
    3ee8:	96 c0       	rjmp	.+300    	; 0x4016 <User_Authentication_SignIn+0x15a>
	{
		H_LCD_void_ClearDisplay();
    3eea:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <H_LCD_void_ClearDisplay>
		H_LCD_void_sendString("Welcome ");
    3eee:	8b ed       	ldi	r24, 0xDB	; 219
    3ef0:	90 e0       	ldi	r25, 0x00	; 0
    3ef2:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
		H_LCD_void_sendData(Local_ID+'0');
    3ef6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ef8:	80 5d       	subi	r24, 0xD0	; 208
    3efa:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <H_LCD_void_sendData>
    3efe:	80 e0       	ldi	r24, 0x00	; 0
    3f00:	90 e0       	ldi	r25, 0x00	; 0
    3f02:	aa ef       	ldi	r26, 0xFA	; 250
    3f04:	b4 e4       	ldi	r27, 0x44	; 68
    3f06:	8b 87       	std	Y+11, r24	; 0x0b
    3f08:	9c 87       	std	Y+12, r25	; 0x0c
    3f0a:	ad 87       	std	Y+13, r26	; 0x0d
    3f0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f10:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f12:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f14:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f16:	20 e0       	ldi	r18, 0x00	; 0
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	4a e7       	ldi	r20, 0x7A	; 122
    3f1c:	55 e4       	ldi	r21, 0x45	; 69
    3f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f22:	dc 01       	movw	r26, r24
    3f24:	cb 01       	movw	r24, r22
    3f26:	8f 83       	std	Y+7, r24	; 0x07
    3f28:	98 87       	std	Y+8, r25	; 0x08
    3f2a:	a9 87       	std	Y+9, r26	; 0x09
    3f2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f2e:	6f 81       	ldd	r22, Y+7	; 0x07
    3f30:	78 85       	ldd	r23, Y+8	; 0x08
    3f32:	89 85       	ldd	r24, Y+9	; 0x09
    3f34:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f36:	20 e0       	ldi	r18, 0x00	; 0
    3f38:	30 e0       	ldi	r19, 0x00	; 0
    3f3a:	40 e8       	ldi	r20, 0x80	; 128
    3f3c:	5f e3       	ldi	r21, 0x3F	; 63
    3f3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f42:	88 23       	and	r24, r24
    3f44:	2c f4       	brge	.+10     	; 0x3f50 <User_Authentication_SignIn+0x94>
		__ticks = 1;
    3f46:	81 e0       	ldi	r24, 0x01	; 1
    3f48:	90 e0       	ldi	r25, 0x00	; 0
    3f4a:	9e 83       	std	Y+6, r25	; 0x06
    3f4c:	8d 83       	std	Y+5, r24	; 0x05
    3f4e:	3f c0       	rjmp	.+126    	; 0x3fce <User_Authentication_SignIn+0x112>
	else if (__tmp > 65535)
    3f50:	6f 81       	ldd	r22, Y+7	; 0x07
    3f52:	78 85       	ldd	r23, Y+8	; 0x08
    3f54:	89 85       	ldd	r24, Y+9	; 0x09
    3f56:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f58:	20 e0       	ldi	r18, 0x00	; 0
    3f5a:	3f ef       	ldi	r19, 0xFF	; 255
    3f5c:	4f e7       	ldi	r20, 0x7F	; 127
    3f5e:	57 e4       	ldi	r21, 0x47	; 71
    3f60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f64:	18 16       	cp	r1, r24
    3f66:	4c f5       	brge	.+82     	; 0x3fba <User_Authentication_SignIn+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f68:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f70:	20 e0       	ldi	r18, 0x00	; 0
    3f72:	30 e0       	ldi	r19, 0x00	; 0
    3f74:	40 e2       	ldi	r20, 0x20	; 32
    3f76:	51 e4       	ldi	r21, 0x41	; 65
    3f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f7c:	dc 01       	movw	r26, r24
    3f7e:	cb 01       	movw	r24, r22
    3f80:	bc 01       	movw	r22, r24
    3f82:	cd 01       	movw	r24, r26
    3f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f88:	dc 01       	movw	r26, r24
    3f8a:	cb 01       	movw	r24, r22
    3f8c:	9e 83       	std	Y+6, r25	; 0x06
    3f8e:	8d 83       	std	Y+5, r24	; 0x05
    3f90:	0f c0       	rjmp	.+30     	; 0x3fb0 <User_Authentication_SignIn+0xf4>
    3f92:	80 e9       	ldi	r24, 0x90	; 144
    3f94:	91 e0       	ldi	r25, 0x01	; 1
    3f96:	9c 83       	std	Y+4, r25	; 0x04
    3f98:	8b 83       	std	Y+3, r24	; 0x03
    3f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f9e:	01 97       	sbiw	r24, 0x01	; 1
    3fa0:	f1 f7       	brne	.-4      	; 0x3f9e <User_Authentication_SignIn+0xe2>
    3fa2:	9c 83       	std	Y+4, r25	; 0x04
    3fa4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fa6:	8d 81       	ldd	r24, Y+5	; 0x05
    3fa8:	9e 81       	ldd	r25, Y+6	; 0x06
    3faa:	01 97       	sbiw	r24, 0x01	; 1
    3fac:	9e 83       	std	Y+6, r25	; 0x06
    3fae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    3fb4:	00 97       	sbiw	r24, 0x00	; 0
    3fb6:	69 f7       	brne	.-38     	; 0x3f92 <User_Authentication_SignIn+0xd6>
    3fb8:	14 c0       	rjmp	.+40     	; 0x3fe2 <User_Authentication_SignIn+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fba:	6f 81       	ldd	r22, Y+7	; 0x07
    3fbc:	78 85       	ldd	r23, Y+8	; 0x08
    3fbe:	89 85       	ldd	r24, Y+9	; 0x09
    3fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fc6:	dc 01       	movw	r26, r24
    3fc8:	cb 01       	movw	r24, r22
    3fca:	9e 83       	std	Y+6, r25	; 0x06
    3fcc:	8d 83       	std	Y+5, r24	; 0x05
    3fce:	8d 81       	ldd	r24, Y+5	; 0x05
    3fd0:	9e 81       	ldd	r25, Y+6	; 0x06
    3fd2:	9a 83       	std	Y+2, r25	; 0x02
    3fd4:	89 83       	std	Y+1, r24	; 0x01
    3fd6:	89 81       	ldd	r24, Y+1	; 0x01
    3fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    3fda:	01 97       	sbiw	r24, 0x01	; 1
    3fdc:	f1 f7       	brne	.-4      	; 0x3fda <User_Authentication_SignIn+0x11e>
    3fde:	9a 83       	std	Y+2, r25	; 0x02
    3fe0:	89 83       	std	Y+1, r24	; 0x01
		H_LCD_void_sendString("No matching Found");
		return INVALID_LOGIN;
	}

	/* Enter Password */
	H_LCD_void_ClearDisplay();
    3fe2:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <H_LCD_void_ClearDisplay>
	H_LCD_void_sendString("Enter Password:");
    3fe6:	84 ee       	ldi	r24, 0xE4	; 228
    3fe8:	90 e0       	ldi	r25, 0x00	; 0
    3fea:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
	H_LCD_void_gotoXY(2, 0);
    3fee:	82 e0       	ldi	r24, 0x02	; 2
    3ff0:	60 e0       	ldi	r22, 0x00	; 0
    3ff2:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <H_LCD_void_gotoXY>
	KeyPad_EnterPassWord(Local_PassWordArr);
    3ff6:	ce 01       	movw	r24, r28
    3ff8:	41 96       	adiw	r24, 0x11	; 17
    3ffa:	0e 94 1c 2b 	call	0x5638	; 0x5638 <KeyPad_EnterPassWord>

	/*Call check password */
	H_LCD_void_ClearDisplay();
    3ffe:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <H_LCD_void_ClearDisplay>
	checkTemp = Check_Password(Local_PassWordArr,1);
    4002:	ce 01       	movw	r24, r28
    4004:	41 96       	adiw	r24, 0x11	; 17
    4006:	61 e0       	ldi	r22, 0x01	; 1
    4008:	0e 94 47 2a 	call	0x548e	; 0x548e <Check_Password>
    400c:	88 8b       	std	Y+16, r24	; 0x10

	/*if return call check password is correct then return valid else return IN VALID */
	if(checkTemp == CORRECT_PASS)
    400e:	88 89       	ldd	r24, Y+16	; 0x10
    4010:	81 30       	cpi	r24, 0x01	; 1
    4012:	49 f0       	breq	.+18     	; 0x4026 <User_Authentication_SignIn+0x16a>
    4014:	0b c0       	rjmp	.+22     	; 0x402c <User_Authentication_SignIn+0x170>
		H_LCD_void_sendData(Local_ID+'0');
		_delay_ms(2000);
	}
	else	// INCCORECT Finger Print
	{
		H_LCD_void_ClearDisplay();
    4016:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <H_LCD_void_ClearDisplay>
		H_LCD_void_sendString("No matching Found");
    401a:	84 ef       	ldi	r24, 0xF4	; 244
    401c:	90 e0       	ldi	r25, 0x00	; 0
    401e:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
		return INVALID_LOGIN;
    4022:	1d 8a       	std	Y+21, r1	; 0x15
    4024:	04 c0       	rjmp	.+8      	; 0x402e <User_Authentication_SignIn+0x172>
	checkTemp = Check_Password(Local_PassWordArr,1);

	/*if return call check password is correct then return valid else return IN VALID */
	if(checkTemp == CORRECT_PASS)
	{
		return VALID_LOGIN;
    4026:	81 e0       	ldi	r24, 0x01	; 1
    4028:	8d 8b       	std	Y+21, r24	; 0x15
    402a:	01 c0       	rjmp	.+2      	; 0x402e <User_Authentication_SignIn+0x172>
	}
	else
	{
		return INVALID_LOGIN;
    402c:	1d 8a       	std	Y+21, r1	; 0x15
    402e:	8d 89       	ldd	r24, Y+21	; 0x15
	}
}
    4030:	65 96       	adiw	r28, 0x15	; 21
    4032:	0f b6       	in	r0, 0x3f	; 63
    4034:	f8 94       	cli
    4036:	de bf       	out	0x3e, r29	; 62
    4038:	0f be       	out	0x3f, r0	; 63
    403a:	cd bf       	out	0x3d, r28	; 61
    403c:	cf 91       	pop	r28
    403e:	df 91       	pop	r29
    4040:	08 95       	ret

00004042 <User_Authentication_SignUp>:

void User_Authentication_SignUp()
{
    4042:	df 93       	push	r29
    4044:	cf 93       	push	r28
    4046:	cd b7       	in	r28, 0x3d	; 61
    4048:	de b7       	in	r29, 0x3e	; 62
    404a:	ef 97       	sbiw	r28, 0x3f	; 63
    404c:	0f b6       	in	r0, 0x3f	; 63
    404e:	f8 94       	cli
    4050:	de bf       	out	0x3e, r29	; 62
    4052:	0f be       	out	0x3f, r0	; 63
    4054:	cd bf       	out	0x3d, r28	; 61
	/*
	 * Local Variables
	 */
	u8 Local_PassWordArr[4] = {0};
    4056:	1b ae       	std	Y+59, r1	; 0x3b
    4058:	1c ae       	std	Y+60, r1	; 0x3c
    405a:	1d ae       	std	Y+61, r1	; 0x3d
    405c:	1e ae       	std	Y+62, r1	; 0x3e
	u8 User_ID = 0;
    405e:	1f ae       	std	Y+63, r1	; 0x3f
	u8 Local_Counter = 1;
    4060:	81 e0       	ldi	r24, 0x01	; 1
    4062:	8a af       	std	Y+58, r24	; 0x3a
	u8 Temp_Check = 0;
    4064:	19 ae       	std	Y+57, r1	; 0x39
	H_LCD_void_ClearDisplay();
    4066:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <H_LCD_void_ClearDisplay>
	/* Must Enter a valid Password to continue */
	H_LCD_void_gotoXY(1, 0);
    406a:	81 e0       	ldi	r24, 0x01	; 1
    406c:	60 e0       	ldi	r22, 0x00	; 0
    406e:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("Singing nUp: ");
    4072:	86 e0       	ldi	r24, 0x06	; 6
    4074:	91 e0       	ldi	r25, 0x01	; 1
    4076:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
	H_LCD_void_gotoXY(2, 0);
    407a:	82 e0       	ldi	r24, 0x02	; 2
    407c:	60 e0       	ldi	r22, 0x00	; 0
    407e:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("Enter Valid Password ");
    4082:	84 e1       	ldi	r24, 0x14	; 20
    4084:	91 e0       	ldi	r25, 0x01	; 1
    4086:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
	H_LCD_void_gotoXY(3, 1);
    408a:	83 e0       	ldi	r24, 0x03	; 3
    408c:	61 e0       	ldi	r22, 0x01	; 1
    408e:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <H_LCD_void_gotoXY>

	/* Enter Password*/
	KeyPad_EnterPassWord(Local_PassWordArr);
    4092:	ce 01       	movw	r24, r28
    4094:	cb 96       	adiw	r24, 0x3b	; 59
    4096:	0e 94 1c 2b 	call	0x5638	; 0x5638 <KeyPad_EnterPassWord>

	/* Search for Password*/
	do{
		Temp_Check = Check_Password(Local_PassWordArr, Local_Counter);
    409a:	ce 01       	movw	r24, r28
    409c:	cb 96       	adiw	r24, 0x3b	; 59
    409e:	6a ad       	ldd	r22, Y+58	; 0x3a
    40a0:	0e 94 47 2a 	call	0x548e	; 0x548e <Check_Password>
    40a4:	89 af       	std	Y+57, r24	; 0x39
		H_LCD_void_sendString(".");
    40a6:	8a e2       	ldi	r24, 0x2A	; 42
    40a8:	91 e0       	ldi	r25, 0x01	; 1
    40aa:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
    40ae:	80 e0       	ldi	r24, 0x00	; 0
    40b0:	90 e0       	ldi	r25, 0x00	; 0
    40b2:	aa e7       	ldi	r26, 0x7A	; 122
    40b4:	b4 e4       	ldi	r27, 0x44	; 68
    40b6:	8d ab       	std	Y+53, r24	; 0x35
    40b8:	9e ab       	std	Y+54, r25	; 0x36
    40ba:	af ab       	std	Y+55, r26	; 0x37
    40bc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40be:	6d a9       	ldd	r22, Y+53	; 0x35
    40c0:	7e a9       	ldd	r23, Y+54	; 0x36
    40c2:	8f a9       	ldd	r24, Y+55	; 0x37
    40c4:	98 ad       	ldd	r25, Y+56	; 0x38
    40c6:	20 e0       	ldi	r18, 0x00	; 0
    40c8:	30 e0       	ldi	r19, 0x00	; 0
    40ca:	4a e7       	ldi	r20, 0x7A	; 122
    40cc:	55 e4       	ldi	r21, 0x45	; 69
    40ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40d2:	dc 01       	movw	r26, r24
    40d4:	cb 01       	movw	r24, r22
    40d6:	89 ab       	std	Y+49, r24	; 0x31
    40d8:	9a ab       	std	Y+50, r25	; 0x32
    40da:	ab ab       	std	Y+51, r26	; 0x33
    40dc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    40de:	69 a9       	ldd	r22, Y+49	; 0x31
    40e0:	7a a9       	ldd	r23, Y+50	; 0x32
    40e2:	8b a9       	ldd	r24, Y+51	; 0x33
    40e4:	9c a9       	ldd	r25, Y+52	; 0x34
    40e6:	20 e0       	ldi	r18, 0x00	; 0
    40e8:	30 e0       	ldi	r19, 0x00	; 0
    40ea:	40 e8       	ldi	r20, 0x80	; 128
    40ec:	5f e3       	ldi	r21, 0x3F	; 63
    40ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40f2:	88 23       	and	r24, r24
    40f4:	2c f4       	brge	.+10     	; 0x4100 <User_Authentication_SignUp+0xbe>
		__ticks = 1;
    40f6:	81 e0       	ldi	r24, 0x01	; 1
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	98 ab       	std	Y+48, r25	; 0x30
    40fc:	8f a7       	std	Y+47, r24	; 0x2f
    40fe:	3f c0       	rjmp	.+126    	; 0x417e <User_Authentication_SignUp+0x13c>
	else if (__tmp > 65535)
    4100:	69 a9       	ldd	r22, Y+49	; 0x31
    4102:	7a a9       	ldd	r23, Y+50	; 0x32
    4104:	8b a9       	ldd	r24, Y+51	; 0x33
    4106:	9c a9       	ldd	r25, Y+52	; 0x34
    4108:	20 e0       	ldi	r18, 0x00	; 0
    410a:	3f ef       	ldi	r19, 0xFF	; 255
    410c:	4f e7       	ldi	r20, 0x7F	; 127
    410e:	57 e4       	ldi	r21, 0x47	; 71
    4110:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4114:	18 16       	cp	r1, r24
    4116:	4c f5       	brge	.+82     	; 0x416a <User_Authentication_SignUp+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4118:	6d a9       	ldd	r22, Y+53	; 0x35
    411a:	7e a9       	ldd	r23, Y+54	; 0x36
    411c:	8f a9       	ldd	r24, Y+55	; 0x37
    411e:	98 ad       	ldd	r25, Y+56	; 0x38
    4120:	20 e0       	ldi	r18, 0x00	; 0
    4122:	30 e0       	ldi	r19, 0x00	; 0
    4124:	40 e2       	ldi	r20, 0x20	; 32
    4126:	51 e4       	ldi	r21, 0x41	; 65
    4128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    412c:	dc 01       	movw	r26, r24
    412e:	cb 01       	movw	r24, r22
    4130:	bc 01       	movw	r22, r24
    4132:	cd 01       	movw	r24, r26
    4134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4138:	dc 01       	movw	r26, r24
    413a:	cb 01       	movw	r24, r22
    413c:	98 ab       	std	Y+48, r25	; 0x30
    413e:	8f a7       	std	Y+47, r24	; 0x2f
    4140:	0f c0       	rjmp	.+30     	; 0x4160 <User_Authentication_SignUp+0x11e>
    4142:	80 e9       	ldi	r24, 0x90	; 144
    4144:	91 e0       	ldi	r25, 0x01	; 1
    4146:	9e a7       	std	Y+46, r25	; 0x2e
    4148:	8d a7       	std	Y+45, r24	; 0x2d
    414a:	8d a5       	ldd	r24, Y+45	; 0x2d
    414c:	9e a5       	ldd	r25, Y+46	; 0x2e
    414e:	01 97       	sbiw	r24, 0x01	; 1
    4150:	f1 f7       	brne	.-4      	; 0x414e <User_Authentication_SignUp+0x10c>
    4152:	9e a7       	std	Y+46, r25	; 0x2e
    4154:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4156:	8f a5       	ldd	r24, Y+47	; 0x2f
    4158:	98 a9       	ldd	r25, Y+48	; 0x30
    415a:	01 97       	sbiw	r24, 0x01	; 1
    415c:	98 ab       	std	Y+48, r25	; 0x30
    415e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4160:	8f a5       	ldd	r24, Y+47	; 0x2f
    4162:	98 a9       	ldd	r25, Y+48	; 0x30
    4164:	00 97       	sbiw	r24, 0x00	; 0
    4166:	69 f7       	brne	.-38     	; 0x4142 <User_Authentication_SignUp+0x100>
    4168:	14 c0       	rjmp	.+40     	; 0x4192 <User_Authentication_SignUp+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    416a:	69 a9       	ldd	r22, Y+49	; 0x31
    416c:	7a a9       	ldd	r23, Y+50	; 0x32
    416e:	8b a9       	ldd	r24, Y+51	; 0x33
    4170:	9c a9       	ldd	r25, Y+52	; 0x34
    4172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4176:	dc 01       	movw	r26, r24
    4178:	cb 01       	movw	r24, r22
    417a:	98 ab       	std	Y+48, r25	; 0x30
    417c:	8f a7       	std	Y+47, r24	; 0x2f
    417e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4180:	98 a9       	ldd	r25, Y+48	; 0x30
    4182:	9c a7       	std	Y+44, r25	; 0x2c
    4184:	8b a7       	std	Y+43, r24	; 0x2b
    4186:	8b a5       	ldd	r24, Y+43	; 0x2b
    4188:	9c a5       	ldd	r25, Y+44	; 0x2c
    418a:	01 97       	sbiw	r24, 0x01	; 1
    418c:	f1 f7       	brne	.-4      	; 0x418a <User_Authentication_SignUp+0x148>
    418e:	9c a7       	std	Y+44, r25	; 0x2c
    4190:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1000);
		if (Temp_Check == CORRECT_PASS)
    4192:	89 ad       	ldd	r24, Y+57	; 0x39
    4194:	81 30       	cpi	r24, 0x01	; 1
    4196:	21 f4       	brne	.+8      	; 0x41a0 <User_Authentication_SignUp+0x15e>
		{
			Temp_Check = NUMBER_OF_USERS+1 ;
    4198:	83 e0       	ldi	r24, 0x03	; 3
    419a:	89 af       	std	Y+57, r24	; 0x39
			Local_Counter = 0 ;
    419c:	1a ae       	std	Y+58, r1	; 0x3a
    419e:	07 c0       	rjmp	.+14     	; 0x41ae <User_Authentication_SignUp+0x16c>
			break;
		}
		Local_Counter ++ ;
    41a0:	8a ad       	ldd	r24, Y+58	; 0x3a
    41a2:	8f 5f       	subi	r24, 0xFF	; 255
    41a4:	8a af       	std	Y+58, r24	; 0x3a
	}while(Local_Counter <= NUMBER_OF_USERS);
    41a6:	8a ad       	ldd	r24, Y+58	; 0x3a
    41a8:	83 30       	cpi	r24, 0x03	; 3
    41aa:	08 f4       	brcc	.+2      	; 0x41ae <User_Authentication_SignUp+0x16c>
    41ac:	76 cf       	rjmp	.-276    	; 0x409a <User_Authentication_SignUp+0x58>

	/* if Password not found exit the function*/
	H_LCD_void_ClearDisplay();
    41ae:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <H_LCD_void_ClearDisplay>
	if (Local_Counter != 0)
    41b2:	8a ad       	ldd	r24, Y+58	; 0x3a
    41b4:	88 23       	and	r24, r24
    41b6:	09 f4       	brne	.+2      	; 0x41ba <User_Authentication_SignUp+0x178>
    41b8:	77 c0       	rjmp	.+238    	; 0x42a8 <User_Authentication_SignUp+0x266>
	{
		H_LCD_void_sendString("Password Not Found");
    41ba:	8c e2       	ldi	r24, 0x2C	; 44
    41bc:	91 e0       	ldi	r25, 0x01	; 1
    41be:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
    41c2:	80 e0       	ldi	r24, 0x00	; 0
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	aa e7       	ldi	r26, 0x7A	; 122
    41c8:	b4 e4       	ldi	r27, 0x44	; 68
    41ca:	8f a3       	std	Y+39, r24	; 0x27
    41cc:	98 a7       	std	Y+40, r25	; 0x28
    41ce:	a9 a7       	std	Y+41, r26	; 0x29
    41d0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41d2:	6f a1       	ldd	r22, Y+39	; 0x27
    41d4:	78 a5       	ldd	r23, Y+40	; 0x28
    41d6:	89 a5       	ldd	r24, Y+41	; 0x29
    41d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    41da:	20 e0       	ldi	r18, 0x00	; 0
    41dc:	30 e0       	ldi	r19, 0x00	; 0
    41de:	4a e7       	ldi	r20, 0x7A	; 122
    41e0:	55 e4       	ldi	r21, 0x45	; 69
    41e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41e6:	dc 01       	movw	r26, r24
    41e8:	cb 01       	movw	r24, r22
    41ea:	8b a3       	std	Y+35, r24	; 0x23
    41ec:	9c a3       	std	Y+36, r25	; 0x24
    41ee:	ad a3       	std	Y+37, r26	; 0x25
    41f0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    41f2:	6b a1       	ldd	r22, Y+35	; 0x23
    41f4:	7c a1       	ldd	r23, Y+36	; 0x24
    41f6:	8d a1       	ldd	r24, Y+37	; 0x25
    41f8:	9e a1       	ldd	r25, Y+38	; 0x26
    41fa:	20 e0       	ldi	r18, 0x00	; 0
    41fc:	30 e0       	ldi	r19, 0x00	; 0
    41fe:	40 e8       	ldi	r20, 0x80	; 128
    4200:	5f e3       	ldi	r21, 0x3F	; 63
    4202:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4206:	88 23       	and	r24, r24
    4208:	2c f4       	brge	.+10     	; 0x4214 <User_Authentication_SignUp+0x1d2>
		__ticks = 1;
    420a:	81 e0       	ldi	r24, 0x01	; 1
    420c:	90 e0       	ldi	r25, 0x00	; 0
    420e:	9a a3       	std	Y+34, r25	; 0x22
    4210:	89 a3       	std	Y+33, r24	; 0x21
    4212:	3f c0       	rjmp	.+126    	; 0x4292 <User_Authentication_SignUp+0x250>
	else if (__tmp > 65535)
    4214:	6b a1       	ldd	r22, Y+35	; 0x23
    4216:	7c a1       	ldd	r23, Y+36	; 0x24
    4218:	8d a1       	ldd	r24, Y+37	; 0x25
    421a:	9e a1       	ldd	r25, Y+38	; 0x26
    421c:	20 e0       	ldi	r18, 0x00	; 0
    421e:	3f ef       	ldi	r19, 0xFF	; 255
    4220:	4f e7       	ldi	r20, 0x7F	; 127
    4222:	57 e4       	ldi	r21, 0x47	; 71
    4224:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4228:	18 16       	cp	r1, r24
    422a:	4c f5       	brge	.+82     	; 0x427e <User_Authentication_SignUp+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    422c:	6f a1       	ldd	r22, Y+39	; 0x27
    422e:	78 a5       	ldd	r23, Y+40	; 0x28
    4230:	89 a5       	ldd	r24, Y+41	; 0x29
    4232:	9a a5       	ldd	r25, Y+42	; 0x2a
    4234:	20 e0       	ldi	r18, 0x00	; 0
    4236:	30 e0       	ldi	r19, 0x00	; 0
    4238:	40 e2       	ldi	r20, 0x20	; 32
    423a:	51 e4       	ldi	r21, 0x41	; 65
    423c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4240:	dc 01       	movw	r26, r24
    4242:	cb 01       	movw	r24, r22
    4244:	bc 01       	movw	r22, r24
    4246:	cd 01       	movw	r24, r26
    4248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    424c:	dc 01       	movw	r26, r24
    424e:	cb 01       	movw	r24, r22
    4250:	9a a3       	std	Y+34, r25	; 0x22
    4252:	89 a3       	std	Y+33, r24	; 0x21
    4254:	0f c0       	rjmp	.+30     	; 0x4274 <User_Authentication_SignUp+0x232>
    4256:	80 e9       	ldi	r24, 0x90	; 144
    4258:	91 e0       	ldi	r25, 0x01	; 1
    425a:	98 a3       	std	Y+32, r25	; 0x20
    425c:	8f 8f       	std	Y+31, r24	; 0x1f
    425e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4260:	98 a1       	ldd	r25, Y+32	; 0x20
    4262:	01 97       	sbiw	r24, 0x01	; 1
    4264:	f1 f7       	brne	.-4      	; 0x4262 <User_Authentication_SignUp+0x220>
    4266:	98 a3       	std	Y+32, r25	; 0x20
    4268:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    426a:	89 a1       	ldd	r24, Y+33	; 0x21
    426c:	9a a1       	ldd	r25, Y+34	; 0x22
    426e:	01 97       	sbiw	r24, 0x01	; 1
    4270:	9a a3       	std	Y+34, r25	; 0x22
    4272:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4274:	89 a1       	ldd	r24, Y+33	; 0x21
    4276:	9a a1       	ldd	r25, Y+34	; 0x22
    4278:	00 97       	sbiw	r24, 0x00	; 0
    427a:	69 f7       	brne	.-38     	; 0x4256 <User_Authentication_SignUp+0x214>
    427c:	24 c1       	rjmp	.+584    	; 0x44c6 <User_Authentication_SignUp+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    427e:	6b a1       	ldd	r22, Y+35	; 0x23
    4280:	7c a1       	ldd	r23, Y+36	; 0x24
    4282:	8d a1       	ldd	r24, Y+37	; 0x25
    4284:	9e a1       	ldd	r25, Y+38	; 0x26
    4286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    428a:	dc 01       	movw	r26, r24
    428c:	cb 01       	movw	r24, r22
    428e:	9a a3       	std	Y+34, r25	; 0x22
    4290:	89 a3       	std	Y+33, r24	; 0x21
    4292:	89 a1       	ldd	r24, Y+33	; 0x21
    4294:	9a a1       	ldd	r25, Y+34	; 0x22
    4296:	9e 8f       	std	Y+30, r25	; 0x1e
    4298:	8d 8f       	std	Y+29, r24	; 0x1d
    429a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    429c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    429e:	01 97       	sbiw	r24, 0x01	; 1
    42a0:	f1 f7       	brne	.-4      	; 0x429e <User_Authentication_SignUp+0x25c>
    42a2:	9e 8f       	std	Y+30, r25	; 0x1e
    42a4:	8d 8f       	std	Y+29, r24	; 0x1d
    42a6:	0f c1       	rjmp	.+542    	; 0x44c6 <User_Authentication_SignUp+0x484>
		_delay_ms(1000);
		return;
	}


	H_LCD_void_gotoXY(1, 0);
    42a8:	81 e0       	ldi	r24, 0x01	; 1
    42aa:	60 e0       	ldi	r22, 0x00	; 0
    42ac:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("Adding New User...");
    42b0:	8f e3       	ldi	r24, 0x3F	; 63
    42b2:	91 e0       	ldi	r25, 0x01	; 1
    42b4:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
    42b8:	80 e0       	ldi	r24, 0x00	; 0
    42ba:	90 e0       	ldi	r25, 0x00	; 0
    42bc:	aa e7       	ldi	r26, 0x7A	; 122
    42be:	b4 e4       	ldi	r27, 0x44	; 68
    42c0:	89 8f       	std	Y+25, r24	; 0x19
    42c2:	9a 8f       	std	Y+26, r25	; 0x1a
    42c4:	ab 8f       	std	Y+27, r26	; 0x1b
    42c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42c8:	69 8d       	ldd	r22, Y+25	; 0x19
    42ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    42cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    42ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    42d0:	20 e0       	ldi	r18, 0x00	; 0
    42d2:	30 e0       	ldi	r19, 0x00	; 0
    42d4:	4a e7       	ldi	r20, 0x7A	; 122
    42d6:	55 e4       	ldi	r21, 0x45	; 69
    42d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42dc:	dc 01       	movw	r26, r24
    42de:	cb 01       	movw	r24, r22
    42e0:	8d 8b       	std	Y+21, r24	; 0x15
    42e2:	9e 8b       	std	Y+22, r25	; 0x16
    42e4:	af 8b       	std	Y+23, r26	; 0x17
    42e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    42e8:	6d 89       	ldd	r22, Y+21	; 0x15
    42ea:	7e 89       	ldd	r23, Y+22	; 0x16
    42ec:	8f 89       	ldd	r24, Y+23	; 0x17
    42ee:	98 8d       	ldd	r25, Y+24	; 0x18
    42f0:	20 e0       	ldi	r18, 0x00	; 0
    42f2:	30 e0       	ldi	r19, 0x00	; 0
    42f4:	40 e8       	ldi	r20, 0x80	; 128
    42f6:	5f e3       	ldi	r21, 0x3F	; 63
    42f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42fc:	88 23       	and	r24, r24
    42fe:	2c f4       	brge	.+10     	; 0x430a <User_Authentication_SignUp+0x2c8>
		__ticks = 1;
    4300:	81 e0       	ldi	r24, 0x01	; 1
    4302:	90 e0       	ldi	r25, 0x00	; 0
    4304:	9c 8b       	std	Y+20, r25	; 0x14
    4306:	8b 8b       	std	Y+19, r24	; 0x13
    4308:	3f c0       	rjmp	.+126    	; 0x4388 <User_Authentication_SignUp+0x346>
	else if (__tmp > 65535)
    430a:	6d 89       	ldd	r22, Y+21	; 0x15
    430c:	7e 89       	ldd	r23, Y+22	; 0x16
    430e:	8f 89       	ldd	r24, Y+23	; 0x17
    4310:	98 8d       	ldd	r25, Y+24	; 0x18
    4312:	20 e0       	ldi	r18, 0x00	; 0
    4314:	3f ef       	ldi	r19, 0xFF	; 255
    4316:	4f e7       	ldi	r20, 0x7F	; 127
    4318:	57 e4       	ldi	r21, 0x47	; 71
    431a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    431e:	18 16       	cp	r1, r24
    4320:	4c f5       	brge	.+82     	; 0x4374 <User_Authentication_SignUp+0x332>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4322:	69 8d       	ldd	r22, Y+25	; 0x19
    4324:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4326:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4328:	9c 8d       	ldd	r25, Y+28	; 0x1c
    432a:	20 e0       	ldi	r18, 0x00	; 0
    432c:	30 e0       	ldi	r19, 0x00	; 0
    432e:	40 e2       	ldi	r20, 0x20	; 32
    4330:	51 e4       	ldi	r21, 0x41	; 65
    4332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4336:	dc 01       	movw	r26, r24
    4338:	cb 01       	movw	r24, r22
    433a:	bc 01       	movw	r22, r24
    433c:	cd 01       	movw	r24, r26
    433e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4342:	dc 01       	movw	r26, r24
    4344:	cb 01       	movw	r24, r22
    4346:	9c 8b       	std	Y+20, r25	; 0x14
    4348:	8b 8b       	std	Y+19, r24	; 0x13
    434a:	0f c0       	rjmp	.+30     	; 0x436a <User_Authentication_SignUp+0x328>
    434c:	80 e9       	ldi	r24, 0x90	; 144
    434e:	91 e0       	ldi	r25, 0x01	; 1
    4350:	9a 8b       	std	Y+18, r25	; 0x12
    4352:	89 8b       	std	Y+17, r24	; 0x11
    4354:	89 89       	ldd	r24, Y+17	; 0x11
    4356:	9a 89       	ldd	r25, Y+18	; 0x12
    4358:	01 97       	sbiw	r24, 0x01	; 1
    435a:	f1 f7       	brne	.-4      	; 0x4358 <User_Authentication_SignUp+0x316>
    435c:	9a 8b       	std	Y+18, r25	; 0x12
    435e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4360:	8b 89       	ldd	r24, Y+19	; 0x13
    4362:	9c 89       	ldd	r25, Y+20	; 0x14
    4364:	01 97       	sbiw	r24, 0x01	; 1
    4366:	9c 8b       	std	Y+20, r25	; 0x14
    4368:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    436a:	8b 89       	ldd	r24, Y+19	; 0x13
    436c:	9c 89       	ldd	r25, Y+20	; 0x14
    436e:	00 97       	sbiw	r24, 0x00	; 0
    4370:	69 f7       	brne	.-38     	; 0x434c <User_Authentication_SignUp+0x30a>
    4372:	14 c0       	rjmp	.+40     	; 0x439c <User_Authentication_SignUp+0x35a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4374:	6d 89       	ldd	r22, Y+21	; 0x15
    4376:	7e 89       	ldd	r23, Y+22	; 0x16
    4378:	8f 89       	ldd	r24, Y+23	; 0x17
    437a:	98 8d       	ldd	r25, Y+24	; 0x18
    437c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4380:	dc 01       	movw	r26, r24
    4382:	cb 01       	movw	r24, r22
    4384:	9c 8b       	std	Y+20, r25	; 0x14
    4386:	8b 8b       	std	Y+19, r24	; 0x13
    4388:	8b 89       	ldd	r24, Y+19	; 0x13
    438a:	9c 89       	ldd	r25, Y+20	; 0x14
    438c:	98 8b       	std	Y+16, r25	; 0x10
    438e:	8f 87       	std	Y+15, r24	; 0x0f
    4390:	8f 85       	ldd	r24, Y+15	; 0x0f
    4392:	98 89       	ldd	r25, Y+16	; 0x10
    4394:	01 97       	sbiw	r24, 0x01	; 1
    4396:	f1 f7       	brne	.-4      	; 0x4394 <User_Authentication_SignUp+0x352>
    4398:	98 8b       	std	Y+16, r25	; 0x10
    439a:	8f 87       	std	Y+15, r24	; 0x0f
	/* Take the next ID*/
	_delay_ms(1000);
	H_EEPROM_Void_ReadByte(EEPROM_USER_ID, &User_ID);
    439c:	9e 01       	movw	r18, r28
    439e:	21 5c       	subi	r18, 0xC1	; 193
    43a0:	3f 4f       	sbci	r19, 0xFF	; 255
    43a2:	8f ef       	ldi	r24, 0xFF	; 255
    43a4:	90 e0       	ldi	r25, 0x00	; 0
    43a6:	b9 01       	movw	r22, r18
    43a8:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <H_EEPROM_Void_ReadByte>
    43ac:	80 e0       	ldi	r24, 0x00	; 0
    43ae:	90 e0       	ldi	r25, 0x00	; 0
    43b0:	a8 e4       	ldi	r26, 0x48	; 72
    43b2:	b3 e4       	ldi	r27, 0x43	; 67
    43b4:	8b 87       	std	Y+11, r24	; 0x0b
    43b6:	9c 87       	std	Y+12, r25	; 0x0c
    43b8:	ad 87       	std	Y+13, r26	; 0x0d
    43ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    43be:	7c 85       	ldd	r23, Y+12	; 0x0c
    43c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    43c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    43c4:	20 e0       	ldi	r18, 0x00	; 0
    43c6:	30 e0       	ldi	r19, 0x00	; 0
    43c8:	4a e7       	ldi	r20, 0x7A	; 122
    43ca:	55 e4       	ldi	r21, 0x45	; 69
    43cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43d0:	dc 01       	movw	r26, r24
    43d2:	cb 01       	movw	r24, r22
    43d4:	8f 83       	std	Y+7, r24	; 0x07
    43d6:	98 87       	std	Y+8, r25	; 0x08
    43d8:	a9 87       	std	Y+9, r26	; 0x09
    43da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43dc:	6f 81       	ldd	r22, Y+7	; 0x07
    43de:	78 85       	ldd	r23, Y+8	; 0x08
    43e0:	89 85       	ldd	r24, Y+9	; 0x09
    43e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    43e4:	20 e0       	ldi	r18, 0x00	; 0
    43e6:	30 e0       	ldi	r19, 0x00	; 0
    43e8:	40 e8       	ldi	r20, 0x80	; 128
    43ea:	5f e3       	ldi	r21, 0x3F	; 63
    43ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    43f0:	88 23       	and	r24, r24
    43f2:	2c f4       	brge	.+10     	; 0x43fe <User_Authentication_SignUp+0x3bc>
		__ticks = 1;
    43f4:	81 e0       	ldi	r24, 0x01	; 1
    43f6:	90 e0       	ldi	r25, 0x00	; 0
    43f8:	9e 83       	std	Y+6, r25	; 0x06
    43fa:	8d 83       	std	Y+5, r24	; 0x05
    43fc:	3f c0       	rjmp	.+126    	; 0x447c <User_Authentication_SignUp+0x43a>
	else if (__tmp > 65535)
    43fe:	6f 81       	ldd	r22, Y+7	; 0x07
    4400:	78 85       	ldd	r23, Y+8	; 0x08
    4402:	89 85       	ldd	r24, Y+9	; 0x09
    4404:	9a 85       	ldd	r25, Y+10	; 0x0a
    4406:	20 e0       	ldi	r18, 0x00	; 0
    4408:	3f ef       	ldi	r19, 0xFF	; 255
    440a:	4f e7       	ldi	r20, 0x7F	; 127
    440c:	57 e4       	ldi	r21, 0x47	; 71
    440e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4412:	18 16       	cp	r1, r24
    4414:	4c f5       	brge	.+82     	; 0x4468 <User_Authentication_SignUp+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4416:	6b 85       	ldd	r22, Y+11	; 0x0b
    4418:	7c 85       	ldd	r23, Y+12	; 0x0c
    441a:	8d 85       	ldd	r24, Y+13	; 0x0d
    441c:	9e 85       	ldd	r25, Y+14	; 0x0e
    441e:	20 e0       	ldi	r18, 0x00	; 0
    4420:	30 e0       	ldi	r19, 0x00	; 0
    4422:	40 e2       	ldi	r20, 0x20	; 32
    4424:	51 e4       	ldi	r21, 0x41	; 65
    4426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    442a:	dc 01       	movw	r26, r24
    442c:	cb 01       	movw	r24, r22
    442e:	bc 01       	movw	r22, r24
    4430:	cd 01       	movw	r24, r26
    4432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4436:	dc 01       	movw	r26, r24
    4438:	cb 01       	movw	r24, r22
    443a:	9e 83       	std	Y+6, r25	; 0x06
    443c:	8d 83       	std	Y+5, r24	; 0x05
    443e:	0f c0       	rjmp	.+30     	; 0x445e <User_Authentication_SignUp+0x41c>
    4440:	80 e9       	ldi	r24, 0x90	; 144
    4442:	91 e0       	ldi	r25, 0x01	; 1
    4444:	9c 83       	std	Y+4, r25	; 0x04
    4446:	8b 83       	std	Y+3, r24	; 0x03
    4448:	8b 81       	ldd	r24, Y+3	; 0x03
    444a:	9c 81       	ldd	r25, Y+4	; 0x04
    444c:	01 97       	sbiw	r24, 0x01	; 1
    444e:	f1 f7       	brne	.-4      	; 0x444c <User_Authentication_SignUp+0x40a>
    4450:	9c 83       	std	Y+4, r25	; 0x04
    4452:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4454:	8d 81       	ldd	r24, Y+5	; 0x05
    4456:	9e 81       	ldd	r25, Y+6	; 0x06
    4458:	01 97       	sbiw	r24, 0x01	; 1
    445a:	9e 83       	std	Y+6, r25	; 0x06
    445c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    445e:	8d 81       	ldd	r24, Y+5	; 0x05
    4460:	9e 81       	ldd	r25, Y+6	; 0x06
    4462:	00 97       	sbiw	r24, 0x00	; 0
    4464:	69 f7       	brne	.-38     	; 0x4440 <User_Authentication_SignUp+0x3fe>
    4466:	14 c0       	rjmp	.+40     	; 0x4490 <User_Authentication_SignUp+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4468:	6f 81       	ldd	r22, Y+7	; 0x07
    446a:	78 85       	ldd	r23, Y+8	; 0x08
    446c:	89 85       	ldd	r24, Y+9	; 0x09
    446e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4474:	dc 01       	movw	r26, r24
    4476:	cb 01       	movw	r24, r22
    4478:	9e 83       	std	Y+6, r25	; 0x06
    447a:	8d 83       	std	Y+5, r24	; 0x05
    447c:	8d 81       	ldd	r24, Y+5	; 0x05
    447e:	9e 81       	ldd	r25, Y+6	; 0x06
    4480:	9a 83       	std	Y+2, r25	; 0x02
    4482:	89 83       	std	Y+1, r24	; 0x01
    4484:	89 81       	ldd	r24, Y+1	; 0x01
    4486:	9a 81       	ldd	r25, Y+2	; 0x02
    4488:	01 97       	sbiw	r24, 0x01	; 1
    448a:	f1 f7       	brne	.-4      	; 0x4488 <User_Authentication_SignUp+0x446>
    448c:	9a 83       	std	Y+2, r25	; 0x02
    448e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);

	/*Scan finger print  */
	Finger_Print_Enroll(User_ID);
    4490:	8f ad       	ldd	r24, Y+63	; 0x3f
    4492:	0e 94 16 12 	call	0x242c	; 0x242c <Finger_Print_Enroll>

	H_LCD_void_ClearDisplay();
    4496:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <H_LCD_void_ClearDisplay>
	H_LCD_void_sendString("Enter Personal Pass: ");
    449a:	82 e5       	ldi	r24, 0x52	; 82
    449c:	91 e0       	ldi	r25, 0x01	; 1
    449e:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>

	/*Enter Password */
	H_LCD_void_gotoXY(2, 0);
    44a2:	82 e0       	ldi	r24, 0x02	; 2
    44a4:	60 e0       	ldi	r22, 0x00	; 0
    44a6:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <H_LCD_void_gotoXY>
	KeyPad_EnterPassWord(Local_PassWordArr);
    44aa:	ce 01       	movw	r24, r28
    44ac:	cb 96       	adiw	r24, 0x3b	; 59
    44ae:	0e 94 1c 2b 	call	0x5638	; 0x5638 <KeyPad_EnterPassWord>

	/*Save to EEPROM*/
	H_LCD_void_ClearDisplay();
    44b2:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <H_LCD_void_ClearDisplay>
	Save_NewPassword(Local_PassWordArr,User_ID);
    44b6:	2f ad       	ldd	r18, Y+63	; 0x3f
    44b8:	ce 01       	movw	r24, r28
    44ba:	cb 96       	adiw	r24, 0x3b	; 59
    44bc:	62 2f       	mov	r22, r18
    44be:	0e 94 4e 2b 	call	0x569c	; 0x569c <Save_NewPassword>
//	{
//		H_LCD_void_sendString(".");
//		_delay_ms(500);
//		Local_Counter ++ ;
//	}
	H_LCD_void_ClearDisplay();
    44c2:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <H_LCD_void_ClearDisplay>
}
    44c6:	ef 96       	adiw	r28, 0x3f	; 63
    44c8:	0f b6       	in	r0, 0x3f	; 63
    44ca:	f8 94       	cli
    44cc:	de bf       	out	0x3e, r29	; 62
    44ce:	0f be       	out	0x3f, r0	; 63
    44d0:	cd bf       	out	0x3d, r28	; 61
    44d2:	cf 91       	pop	r28
    44d4:	df 91       	pop	r29
    44d6:	08 95       	ret

000044d8 <Successful_Authentication>:

void Successful_Authentication(void)
{
    44d8:	df 93       	push	r29
    44da:	cf 93       	push	r28
    44dc:	cd b7       	in	r28, 0x3d	; 61
    44de:	de b7       	in	r29, 0x3e	; 62
    44e0:	6c 97       	sbiw	r28, 0x1c	; 28
    44e2:	0f b6       	in	r0, 0x3f	; 63
    44e4:	f8 94       	cli
    44e6:	de bf       	out	0x3e, r29	; 62
    44e8:	0f be       	out	0x3f, r0	; 63
    44ea:	cd bf       	out	0x3d, r28	; 61
	/*Open Relay and send signal to ECU2 */
    H_Relay_Void_WorkOn(Relay_1);
    44ec:	81 e0       	ldi	r24, 0x01	; 1
    44ee:	0e 94 57 0d 	call	0x1aae	; 0x1aae <H_Relay_Void_WorkOn>
    M_Dio_void_setPinValue(DIO_PA6, DIO_HIGH);
    44f2:	80 e1       	ldi	r24, 0x10	; 16
    44f4:	61 e0       	ldi	r22, 0x01	; 1
    44f6:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>
	H_LCD_void_gotoXY(1,0);
    44fa:	81 e0       	ldi	r24, 0x01	; 1
    44fc:	60 e0       	ldi	r22, 0x00	; 0
    44fe:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <H_LCD_void_gotoXY>
    H_LCD_void_sendString("Welcome to your House");
    4502:	88 e6       	ldi	r24, 0x68	; 104
    4504:	91 e0       	ldi	r25, 0x01	; 1
    4506:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
    H_LCD_void_gotoXY(2,0);
    450a:	82 e0       	ldi	r24, 0x02	; 2
    450c:	60 e0       	ldi	r22, 0x00	; 0
    450e:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <H_LCD_void_gotoXY>
    H_LCD_void_sendString("Last Login was:");
    4512:	8e e7       	ldi	r24, 0x7E	; 126
    4514:	91 e0       	ldi	r25, 0x01	; 1
    4516:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
    H_LCD_void_gotoXY(3,0);
    451a:	83 e0       	ldi	r24, 0x03	; 3
    451c:	60 e0       	ldi	r22, 0x00	; 0
    451e:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <H_LCD_void_gotoXY>
    Display_LastLogin();	// Show Last Login
    4522:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <Display_LastLogin>
    4526:	80 e0       	ldi	r24, 0x00	; 0
    4528:	90 e8       	ldi	r25, 0x80	; 128
    452a:	ab e3       	ldi	r26, 0x3B	; 59
    452c:	b5 e4       	ldi	r27, 0x45	; 69
    452e:	89 8f       	std	Y+25, r24	; 0x19
    4530:	9a 8f       	std	Y+26, r25	; 0x1a
    4532:	ab 8f       	std	Y+27, r26	; 0x1b
    4534:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4536:	69 8d       	ldd	r22, Y+25	; 0x19
    4538:	7a 8d       	ldd	r23, Y+26	; 0x1a
    453a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    453c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    453e:	20 e0       	ldi	r18, 0x00	; 0
    4540:	30 e0       	ldi	r19, 0x00	; 0
    4542:	4a e7       	ldi	r20, 0x7A	; 122
    4544:	55 e4       	ldi	r21, 0x45	; 69
    4546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    454a:	dc 01       	movw	r26, r24
    454c:	cb 01       	movw	r24, r22
    454e:	8d 8b       	std	Y+21, r24	; 0x15
    4550:	9e 8b       	std	Y+22, r25	; 0x16
    4552:	af 8b       	std	Y+23, r26	; 0x17
    4554:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4556:	6d 89       	ldd	r22, Y+21	; 0x15
    4558:	7e 89       	ldd	r23, Y+22	; 0x16
    455a:	8f 89       	ldd	r24, Y+23	; 0x17
    455c:	98 8d       	ldd	r25, Y+24	; 0x18
    455e:	20 e0       	ldi	r18, 0x00	; 0
    4560:	30 e0       	ldi	r19, 0x00	; 0
    4562:	40 e8       	ldi	r20, 0x80	; 128
    4564:	5f e3       	ldi	r21, 0x3F	; 63
    4566:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    456a:	88 23       	and	r24, r24
    456c:	2c f4       	brge	.+10     	; 0x4578 <Successful_Authentication+0xa0>
		__ticks = 1;
    456e:	81 e0       	ldi	r24, 0x01	; 1
    4570:	90 e0       	ldi	r25, 0x00	; 0
    4572:	9c 8b       	std	Y+20, r25	; 0x14
    4574:	8b 8b       	std	Y+19, r24	; 0x13
    4576:	3f c0       	rjmp	.+126    	; 0x45f6 <Successful_Authentication+0x11e>
	else if (__tmp > 65535)
    4578:	6d 89       	ldd	r22, Y+21	; 0x15
    457a:	7e 89       	ldd	r23, Y+22	; 0x16
    457c:	8f 89       	ldd	r24, Y+23	; 0x17
    457e:	98 8d       	ldd	r25, Y+24	; 0x18
    4580:	20 e0       	ldi	r18, 0x00	; 0
    4582:	3f ef       	ldi	r19, 0xFF	; 255
    4584:	4f e7       	ldi	r20, 0x7F	; 127
    4586:	57 e4       	ldi	r21, 0x47	; 71
    4588:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    458c:	18 16       	cp	r1, r24
    458e:	4c f5       	brge	.+82     	; 0x45e2 <Successful_Authentication+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4590:	69 8d       	ldd	r22, Y+25	; 0x19
    4592:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4594:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4596:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4598:	20 e0       	ldi	r18, 0x00	; 0
    459a:	30 e0       	ldi	r19, 0x00	; 0
    459c:	40 e2       	ldi	r20, 0x20	; 32
    459e:	51 e4       	ldi	r21, 0x41	; 65
    45a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45a4:	dc 01       	movw	r26, r24
    45a6:	cb 01       	movw	r24, r22
    45a8:	bc 01       	movw	r22, r24
    45aa:	cd 01       	movw	r24, r26
    45ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45b0:	dc 01       	movw	r26, r24
    45b2:	cb 01       	movw	r24, r22
    45b4:	9c 8b       	std	Y+20, r25	; 0x14
    45b6:	8b 8b       	std	Y+19, r24	; 0x13
    45b8:	0f c0       	rjmp	.+30     	; 0x45d8 <Successful_Authentication+0x100>
    45ba:	80 e9       	ldi	r24, 0x90	; 144
    45bc:	91 e0       	ldi	r25, 0x01	; 1
    45be:	9a 8b       	std	Y+18, r25	; 0x12
    45c0:	89 8b       	std	Y+17, r24	; 0x11
    45c2:	89 89       	ldd	r24, Y+17	; 0x11
    45c4:	9a 89       	ldd	r25, Y+18	; 0x12
    45c6:	01 97       	sbiw	r24, 0x01	; 1
    45c8:	f1 f7       	brne	.-4      	; 0x45c6 <Successful_Authentication+0xee>
    45ca:	9a 8b       	std	Y+18, r25	; 0x12
    45cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45ce:	8b 89       	ldd	r24, Y+19	; 0x13
    45d0:	9c 89       	ldd	r25, Y+20	; 0x14
    45d2:	01 97       	sbiw	r24, 0x01	; 1
    45d4:	9c 8b       	std	Y+20, r25	; 0x14
    45d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45d8:	8b 89       	ldd	r24, Y+19	; 0x13
    45da:	9c 89       	ldd	r25, Y+20	; 0x14
    45dc:	00 97       	sbiw	r24, 0x00	; 0
    45de:	69 f7       	brne	.-38     	; 0x45ba <Successful_Authentication+0xe2>
    45e0:	14 c0       	rjmp	.+40     	; 0x460a <Successful_Authentication+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45e2:	6d 89       	ldd	r22, Y+21	; 0x15
    45e4:	7e 89       	ldd	r23, Y+22	; 0x16
    45e6:	8f 89       	ldd	r24, Y+23	; 0x17
    45e8:	98 8d       	ldd	r25, Y+24	; 0x18
    45ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ee:	dc 01       	movw	r26, r24
    45f0:	cb 01       	movw	r24, r22
    45f2:	9c 8b       	std	Y+20, r25	; 0x14
    45f4:	8b 8b       	std	Y+19, r24	; 0x13
    45f6:	8b 89       	ldd	r24, Y+19	; 0x13
    45f8:	9c 89       	ldd	r25, Y+20	; 0x14
    45fa:	98 8b       	std	Y+16, r25	; 0x10
    45fc:	8f 87       	std	Y+15, r24	; 0x0f
    45fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    4600:	98 89       	ldd	r25, Y+16	; 0x10
    4602:	01 97       	sbiw	r24, 0x01	; 1
    4604:	f1 f7       	brne	.-4      	; 0x4602 <Successful_Authentication+0x12a>
    4606:	98 8b       	std	Y+16, r25	; 0x10
    4608:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(3000);
    H_LCD_void_ClearDisplay();
    460a:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <H_LCD_void_ClearDisplay>
    Time_Processing();
    460e:	0e 94 8d 23 	call	0x471a	; 0x471a <Time_Processing>
    4612:	80 e0       	ldi	r24, 0x00	; 0
    4614:	90 e4       	ldi	r25, 0x40	; 64
    4616:	ac e9       	ldi	r26, 0x9C	; 156
    4618:	b5 e4       	ldi	r27, 0x45	; 69
    461a:	8b 87       	std	Y+11, r24	; 0x0b
    461c:	9c 87       	std	Y+12, r25	; 0x0c
    461e:	ad 87       	std	Y+13, r26	; 0x0d
    4620:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4622:	6b 85       	ldd	r22, Y+11	; 0x0b
    4624:	7c 85       	ldd	r23, Y+12	; 0x0c
    4626:	8d 85       	ldd	r24, Y+13	; 0x0d
    4628:	9e 85       	ldd	r25, Y+14	; 0x0e
    462a:	20 e0       	ldi	r18, 0x00	; 0
    462c:	30 e0       	ldi	r19, 0x00	; 0
    462e:	4a e7       	ldi	r20, 0x7A	; 122
    4630:	55 e4       	ldi	r21, 0x45	; 69
    4632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4636:	dc 01       	movw	r26, r24
    4638:	cb 01       	movw	r24, r22
    463a:	8f 83       	std	Y+7, r24	; 0x07
    463c:	98 87       	std	Y+8, r25	; 0x08
    463e:	a9 87       	std	Y+9, r26	; 0x09
    4640:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4642:	6f 81       	ldd	r22, Y+7	; 0x07
    4644:	78 85       	ldd	r23, Y+8	; 0x08
    4646:	89 85       	ldd	r24, Y+9	; 0x09
    4648:	9a 85       	ldd	r25, Y+10	; 0x0a
    464a:	20 e0       	ldi	r18, 0x00	; 0
    464c:	30 e0       	ldi	r19, 0x00	; 0
    464e:	40 e8       	ldi	r20, 0x80	; 128
    4650:	5f e3       	ldi	r21, 0x3F	; 63
    4652:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4656:	88 23       	and	r24, r24
    4658:	2c f4       	brge	.+10     	; 0x4664 <Successful_Authentication+0x18c>
		__ticks = 1;
    465a:	81 e0       	ldi	r24, 0x01	; 1
    465c:	90 e0       	ldi	r25, 0x00	; 0
    465e:	9e 83       	std	Y+6, r25	; 0x06
    4660:	8d 83       	std	Y+5, r24	; 0x05
    4662:	3f c0       	rjmp	.+126    	; 0x46e2 <Successful_Authentication+0x20a>
	else if (__tmp > 65535)
    4664:	6f 81       	ldd	r22, Y+7	; 0x07
    4666:	78 85       	ldd	r23, Y+8	; 0x08
    4668:	89 85       	ldd	r24, Y+9	; 0x09
    466a:	9a 85       	ldd	r25, Y+10	; 0x0a
    466c:	20 e0       	ldi	r18, 0x00	; 0
    466e:	3f ef       	ldi	r19, 0xFF	; 255
    4670:	4f e7       	ldi	r20, 0x7F	; 127
    4672:	57 e4       	ldi	r21, 0x47	; 71
    4674:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4678:	18 16       	cp	r1, r24
    467a:	4c f5       	brge	.+82     	; 0x46ce <Successful_Authentication+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    467c:	6b 85       	ldd	r22, Y+11	; 0x0b
    467e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4680:	8d 85       	ldd	r24, Y+13	; 0x0d
    4682:	9e 85       	ldd	r25, Y+14	; 0x0e
    4684:	20 e0       	ldi	r18, 0x00	; 0
    4686:	30 e0       	ldi	r19, 0x00	; 0
    4688:	40 e2       	ldi	r20, 0x20	; 32
    468a:	51 e4       	ldi	r21, 0x41	; 65
    468c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4690:	dc 01       	movw	r26, r24
    4692:	cb 01       	movw	r24, r22
    4694:	bc 01       	movw	r22, r24
    4696:	cd 01       	movw	r24, r26
    4698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    469c:	dc 01       	movw	r26, r24
    469e:	cb 01       	movw	r24, r22
    46a0:	9e 83       	std	Y+6, r25	; 0x06
    46a2:	8d 83       	std	Y+5, r24	; 0x05
    46a4:	0f c0       	rjmp	.+30     	; 0x46c4 <Successful_Authentication+0x1ec>
    46a6:	80 e9       	ldi	r24, 0x90	; 144
    46a8:	91 e0       	ldi	r25, 0x01	; 1
    46aa:	9c 83       	std	Y+4, r25	; 0x04
    46ac:	8b 83       	std	Y+3, r24	; 0x03
    46ae:	8b 81       	ldd	r24, Y+3	; 0x03
    46b0:	9c 81       	ldd	r25, Y+4	; 0x04
    46b2:	01 97       	sbiw	r24, 0x01	; 1
    46b4:	f1 f7       	brne	.-4      	; 0x46b2 <Successful_Authentication+0x1da>
    46b6:	9c 83       	std	Y+4, r25	; 0x04
    46b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46ba:	8d 81       	ldd	r24, Y+5	; 0x05
    46bc:	9e 81       	ldd	r25, Y+6	; 0x06
    46be:	01 97       	sbiw	r24, 0x01	; 1
    46c0:	9e 83       	std	Y+6, r25	; 0x06
    46c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46c4:	8d 81       	ldd	r24, Y+5	; 0x05
    46c6:	9e 81       	ldd	r25, Y+6	; 0x06
    46c8:	00 97       	sbiw	r24, 0x00	; 0
    46ca:	69 f7       	brne	.-38     	; 0x46a6 <Successful_Authentication+0x1ce>
    46cc:	14 c0       	rjmp	.+40     	; 0x46f6 <Successful_Authentication+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46ce:	6f 81       	ldd	r22, Y+7	; 0x07
    46d0:	78 85       	ldd	r23, Y+8	; 0x08
    46d2:	89 85       	ldd	r24, Y+9	; 0x09
    46d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    46d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46da:	dc 01       	movw	r26, r24
    46dc:	cb 01       	movw	r24, r22
    46de:	9e 83       	std	Y+6, r25	; 0x06
    46e0:	8d 83       	std	Y+5, r24	; 0x05
    46e2:	8d 81       	ldd	r24, Y+5	; 0x05
    46e4:	9e 81       	ldd	r25, Y+6	; 0x06
    46e6:	9a 83       	std	Y+2, r25	; 0x02
    46e8:	89 83       	std	Y+1, r24	; 0x01
    46ea:	89 81       	ldd	r24, Y+1	; 0x01
    46ec:	9a 81       	ldd	r25, Y+2	; 0x02
    46ee:	01 97       	sbiw	r24, 0x01	; 1
    46f0:	f1 f7       	brne	.-4      	; 0x46ee <Successful_Authentication+0x216>
    46f2:	9a 83       	std	Y+2, r25	; 0x02
    46f4:	89 83       	std	Y+1, r24	; 0x01
	/* Open door for 5 sec then relay of and DIO PIN low*/
    _delay_ms(5000);
    H_Relay_Void_WorkOff(Relay_1);
    46f6:	81 e0       	ldi	r24, 0x01	; 1
    46f8:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <H_Relay_Void_WorkOff>
    H_LCD_void_ClearDisplay();
    46fc:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <H_LCD_void_ClearDisplay>
    M_Dio_void_setPinValue(DIO_PA6, DIO_LOW);
    4700:	80 e1       	ldi	r24, 0x10	; 16
    4702:	60 e0       	ldi	r22, 0x00	; 0
    4704:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_Dio_void_setPinValue>

}
    4708:	6c 96       	adiw	r28, 0x1c	; 28
    470a:	0f b6       	in	r0, 0x3f	; 63
    470c:	f8 94       	cli
    470e:	de bf       	out	0x3e, r29	; 62
    4710:	0f be       	out	0x3f, r0	; 63
    4712:	cd bf       	out	0x3d, r28	; 61
    4714:	cf 91       	pop	r28
    4716:	df 91       	pop	r29
    4718:	08 95       	ret

0000471a <Time_Processing>:

void Time_Processing(void)
{
    471a:	ff 92       	push	r15
    471c:	0f 93       	push	r16
    471e:	1f 93       	push	r17
    4720:	df 93       	push	r29
    4722:	cf 93       	push	r28
    4724:	cd b7       	in	r28, 0x3d	; 61
    4726:	de b7       	in	r29, 0x3e	; 62
    4728:	c2 54       	subi	r28, 0x42	; 66
    472a:	d0 40       	sbci	r29, 0x00	; 0
    472c:	0f b6       	in	r0, 0x3f	; 63
    472e:	f8 94       	cli
    4730:	de bf       	out	0x3e, r29	; 62
    4732:	0f be       	out	0x3f, r0	; 63
    4734:	cd bf       	out	0x3d, r28	; 61
	u8 Local_Counter = 0;
    4736:	1e 8e       	std	Y+30, r1	; 0x1e
	u8 Local_AddressCounter = 0;
    4738:	1d 8e       	std	Y+29, r1	; 0x1d
	u8 DateArray[3] = {H_RTC_Void_GetDate().RTC_Day,H_RTC_Void_GetDate().RTC_Month,H_RTC_Void_GetDate().RTC_Year};
    473a:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <H_RTC_Void_GetDate>
    473e:	6f a7       	std	Y+47, r22	; 0x2f
    4740:	78 ab       	std	Y+48, r23	; 0x30
    4742:	89 ab       	std	Y+49, r24	; 0x31
    4744:	ce 01       	movw	r24, r28
    4746:	85 96       	adiw	r24, 0x25	; 37
    4748:	9d ab       	std	Y+53, r25	; 0x35
    474a:	8c ab       	std	Y+52, r24	; 0x34
    474c:	fe 01       	movw	r30, r28
    474e:	bf 96       	adiw	r30, 0x2f	; 47
    4750:	ff ab       	std	Y+55, r31	; 0x37
    4752:	ee ab       	std	Y+54, r30	; 0x36
    4754:	f3 e0       	ldi	r31, 0x03	; 3
    4756:	f8 af       	std	Y+56, r31	; 0x38
    4758:	ee a9       	ldd	r30, Y+54	; 0x36
    475a:	ff a9       	ldd	r31, Y+55	; 0x37
    475c:	00 80       	ld	r0, Z
    475e:	8e a9       	ldd	r24, Y+54	; 0x36
    4760:	9f a9       	ldd	r25, Y+55	; 0x37
    4762:	01 96       	adiw	r24, 0x01	; 1
    4764:	9f ab       	std	Y+55, r25	; 0x37
    4766:	8e ab       	std	Y+54, r24	; 0x36
    4768:	ec a9       	ldd	r30, Y+52	; 0x34
    476a:	fd a9       	ldd	r31, Y+53	; 0x35
    476c:	00 82       	st	Z, r0
    476e:	8c a9       	ldd	r24, Y+52	; 0x34
    4770:	9d a9       	ldd	r25, Y+53	; 0x35
    4772:	01 96       	adiw	r24, 0x01	; 1
    4774:	9d ab       	std	Y+53, r25	; 0x35
    4776:	8c ab       	std	Y+52, r24	; 0x34
    4778:	98 ad       	ldd	r25, Y+56	; 0x38
    477a:	91 50       	subi	r25, 0x01	; 1
    477c:	98 af       	std	Y+56, r25	; 0x38
    477e:	e8 ad       	ldd	r30, Y+56	; 0x38
    4780:	ee 23       	and	r30, r30
    4782:	51 f7       	brne	.-44     	; 0x4758 <Time_Processing+0x3e>
    4784:	fd a1       	ldd	r31, Y+37	; 0x25
    4786:	fb ab       	std	Y+51, r31	; 0x33
    4788:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <H_RTC_Void_GetDate>
    478c:	6f a7       	std	Y+47, r22	; 0x2f
    478e:	78 ab       	std	Y+48, r23	; 0x30
    4790:	89 ab       	std	Y+49, r24	; 0x31
    4792:	ce 01       	movw	r24, r28
    4794:	82 96       	adiw	r24, 0x22	; 34
    4796:	9a af       	std	Y+58, r25	; 0x3a
    4798:	89 af       	std	Y+57, r24	; 0x39
    479a:	fe 01       	movw	r30, r28
    479c:	bf 96       	adiw	r30, 0x2f	; 47
    479e:	fc af       	std	Y+60, r31	; 0x3c
    47a0:	eb af       	std	Y+59, r30	; 0x3b
    47a2:	f3 e0       	ldi	r31, 0x03	; 3
    47a4:	fd af       	std	Y+61, r31	; 0x3d
    47a6:	eb ad       	ldd	r30, Y+59	; 0x3b
    47a8:	fc ad       	ldd	r31, Y+60	; 0x3c
    47aa:	00 80       	ld	r0, Z
    47ac:	8b ad       	ldd	r24, Y+59	; 0x3b
    47ae:	9c ad       	ldd	r25, Y+60	; 0x3c
    47b0:	01 96       	adiw	r24, 0x01	; 1
    47b2:	9c af       	std	Y+60, r25	; 0x3c
    47b4:	8b af       	std	Y+59, r24	; 0x3b
    47b6:	e9 ad       	ldd	r30, Y+57	; 0x39
    47b8:	fa ad       	ldd	r31, Y+58	; 0x3a
    47ba:	00 82       	st	Z, r0
    47bc:	89 ad       	ldd	r24, Y+57	; 0x39
    47be:	9a ad       	ldd	r25, Y+58	; 0x3a
    47c0:	01 96       	adiw	r24, 0x01	; 1
    47c2:	9a af       	std	Y+58, r25	; 0x3a
    47c4:	89 af       	std	Y+57, r24	; 0x39
    47c6:	9d ad       	ldd	r25, Y+61	; 0x3d
    47c8:	91 50       	subi	r25, 0x01	; 1
    47ca:	9d af       	std	Y+61, r25	; 0x3d
    47cc:	ed ad       	ldd	r30, Y+61	; 0x3d
    47ce:	ee 23       	and	r30, r30
    47d0:	51 f7       	brne	.-44     	; 0x47a6 <Time_Processing+0x8c>
    47d2:	fb a1       	ldd	r31, Y+35	; 0x23
    47d4:	fa ab       	std	Y+50, r31	; 0x32
    47d6:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <H_RTC_Void_GetDate>
    47da:	6f a7       	std	Y+47, r22	; 0x2f
    47dc:	78 ab       	std	Y+48, r23	; 0x30
    47de:	89 ab       	std	Y+49, r24	; 0x31
    47e0:	ce 01       	movw	r24, r28
    47e2:	4f 96       	adiw	r24, 0x1f	; 31
    47e4:	9f af       	std	Y+63, r25	; 0x3f
    47e6:	8e af       	std	Y+62, r24	; 0x3e
    47e8:	fe 01       	movw	r30, r28
    47ea:	bf 96       	adiw	r30, 0x2f	; 47
    47ec:	22 96       	adiw	r28, 0x02	; 2
    47ee:	ff af       	std	Y+63, r31	; 0x3f
    47f0:	ee af       	std	Y+62, r30	; 0x3e
    47f2:	22 97       	sbiw	r28, 0x02	; 2
    47f4:	f3 e0       	ldi	r31, 0x03	; 3
    47f6:	23 96       	adiw	r28, 0x03	; 3
    47f8:	ff af       	std	Y+63, r31	; 0x3f
    47fa:	23 97       	sbiw	r28, 0x03	; 3
    47fc:	22 96       	adiw	r28, 0x02	; 2
    47fe:	ee ad       	ldd	r30, Y+62	; 0x3e
    4800:	ff ad       	ldd	r31, Y+63	; 0x3f
    4802:	22 97       	sbiw	r28, 0x02	; 2
    4804:	00 80       	ld	r0, Z
    4806:	22 96       	adiw	r28, 0x02	; 2
    4808:	8e ad       	ldd	r24, Y+62	; 0x3e
    480a:	9f ad       	ldd	r25, Y+63	; 0x3f
    480c:	22 97       	sbiw	r28, 0x02	; 2
    480e:	01 96       	adiw	r24, 0x01	; 1
    4810:	22 96       	adiw	r28, 0x02	; 2
    4812:	9f af       	std	Y+63, r25	; 0x3f
    4814:	8e af       	std	Y+62, r24	; 0x3e
    4816:	22 97       	sbiw	r28, 0x02	; 2
    4818:	ee ad       	ldd	r30, Y+62	; 0x3e
    481a:	ff ad       	ldd	r31, Y+63	; 0x3f
    481c:	00 82       	st	Z, r0
    481e:	8e ad       	ldd	r24, Y+62	; 0x3e
    4820:	9f ad       	ldd	r25, Y+63	; 0x3f
    4822:	01 96       	adiw	r24, 0x01	; 1
    4824:	9f af       	std	Y+63, r25	; 0x3f
    4826:	8e af       	std	Y+62, r24	; 0x3e
    4828:	23 96       	adiw	r28, 0x03	; 3
    482a:	9f ad       	ldd	r25, Y+63	; 0x3f
    482c:	23 97       	sbiw	r28, 0x03	; 3
    482e:	91 50       	subi	r25, 0x01	; 1
    4830:	23 96       	adiw	r28, 0x03	; 3
    4832:	9f af       	std	Y+63, r25	; 0x3f
    4834:	23 97       	sbiw	r28, 0x03	; 3
    4836:	23 96       	adiw	r28, 0x03	; 3
    4838:	ef ad       	ldd	r30, Y+63	; 0x3f
    483a:	23 97       	sbiw	r28, 0x03	; 3
    483c:	ee 23       	and	r30, r30
    483e:	f1 f6       	brne	.-68     	; 0x47fc <Time_Processing+0xe2>
    4840:	89 a1       	ldd	r24, Y+33	; 0x21
    4842:	fb a9       	ldd	r31, Y+51	; 0x33
    4844:	f8 a7       	std	Y+40, r31	; 0x28
    4846:	9a a9       	ldd	r25, Y+50	; 0x32
    4848:	99 a7       	std	Y+41, r25	; 0x29
    484a:	8a a7       	std	Y+42, r24	; 0x2a
	u8 TimeArry[4] = {H_RTC_Void_GetTime().RTC_Hours,H_RTC_Void_GetTime().RTC_Minutes, H_RTC_Void_GetTime().RTC_Seconed,H_RTC_Void_GetTime().RTC_DayTime};
    484c:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <H_RTC_Void_GetTime>
    4850:	dc 01       	movw	r26, r24
    4852:	cb 01       	movw	r24, r22
    4854:	f8 2e       	mov	r15, r24
    4856:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <H_RTC_Void_GetTime>
    485a:	dc 01       	movw	r26, r24
    485c:	cb 01       	movw	r24, r22
    485e:	19 2f       	mov	r17, r25
    4860:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <H_RTC_Void_GetTime>
    4864:	dc 01       	movw	r26, r24
    4866:	cb 01       	movw	r24, r22
    4868:	0a 2f       	mov	r16, r26
    486a:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <H_RTC_Void_GetTime>
    486e:	dc 01       	movw	r26, r24
    4870:	cb 01       	movw	r24, r22
    4872:	8b 2f       	mov	r24, r27
    4874:	fb a6       	std	Y+43, r15	; 0x2b
    4876:	1c a7       	std	Y+44, r17	; 0x2c
    4878:	0d a7       	std	Y+45, r16	; 0x2d
    487a:	8e a7       	std	Y+46, r24	; 0x2e

	/*Display Date */
	H_LCD_void_gotoXY(2, 0);
    487c:	82 e0       	ldi	r24, 0x02	; 2
    487e:	60 e0       	ldi	r22, 0x00	; 0
    4880:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("Today is: ");
    4884:	8e e8       	ldi	r24, 0x8E	; 142
    4886:	91 e0       	ldi	r25, 0x01	; 1
    4888:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
	Local_AddressCounter = DATE_FIRST_ADDRESS ;
    488c:	88 e1       	ldi	r24, 0x18	; 24
    488e:	8d 8f       	std	Y+29, r24	; 0x1d
	for(Local_Counter = 0; Local_Counter < 3; Local_Counter++)
    4890:	1e 8e       	std	Y+30, r1	; 0x1e
    4892:	9c c0       	rjmp	.+312    	; 0x49cc <Time_Processing+0x2b2>
	{
		H_LCD_void_sendIntNum((u16)DateArray[Local_Counter]);
    4894:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4896:	28 2f       	mov	r18, r24
    4898:	30 e0       	ldi	r19, 0x00	; 0
    489a:	ce 01       	movw	r24, r28
    489c:	88 96       	adiw	r24, 0x28	; 40
    489e:	fc 01       	movw	r30, r24
    48a0:	e2 0f       	add	r30, r18
    48a2:	f3 1f       	adc	r31, r19
    48a4:	80 81       	ld	r24, Z
    48a6:	88 2f       	mov	r24, r24
    48a8:	90 e0       	ldi	r25, 0x00	; 0
    48aa:	a0 e0       	ldi	r26, 0x00	; 0
    48ac:	b0 e0       	ldi	r27, 0x00	; 0
    48ae:	bc 01       	movw	r22, r24
    48b0:	cd 01       	movw	r24, r26
    48b2:	0e 94 c8 1a 	call	0x3590	; 0x3590 <H_LCD_void_sendIntNum>
//		Save the date into the eeprom
		H_EEPROM_Void_WriteByte(Local_AddressCounter, DateArray[Local_Counter]) ;
    48b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    48b8:	48 2f       	mov	r20, r24
    48ba:	50 e0       	ldi	r21, 0x00	; 0
    48bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    48be:	28 2f       	mov	r18, r24
    48c0:	30 e0       	ldi	r19, 0x00	; 0
    48c2:	ce 01       	movw	r24, r28
    48c4:	88 96       	adiw	r24, 0x28	; 40
    48c6:	fc 01       	movw	r30, r24
    48c8:	e2 0f       	add	r30, r18
    48ca:	f3 1f       	adc	r31, r19
    48cc:	20 81       	ld	r18, Z
    48ce:	ca 01       	movw	r24, r20
    48d0:	62 2f       	mov	r22, r18
    48d2:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <H_EEPROM_Void_WriteByte>
		H_LCD_void_sendData('/');
    48d6:	8f e2       	ldi	r24, 0x2F	; 47
    48d8:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <H_LCD_void_sendData>
    48dc:	80 e0       	ldi	r24, 0x00	; 0
    48de:	90 e0       	ldi	r25, 0x00	; 0
    48e0:	a8 e4       	ldi	r26, 0x48	; 72
    48e2:	b3 e4       	ldi	r27, 0x43	; 67
    48e4:	89 8f       	std	Y+25, r24	; 0x19
    48e6:	9a 8f       	std	Y+26, r25	; 0x1a
    48e8:	ab 8f       	std	Y+27, r26	; 0x1b
    48ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48ec:	69 8d       	ldd	r22, Y+25	; 0x19
    48ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    48f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    48f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    48f4:	20 e0       	ldi	r18, 0x00	; 0
    48f6:	30 e0       	ldi	r19, 0x00	; 0
    48f8:	4a e7       	ldi	r20, 0x7A	; 122
    48fa:	55 e4       	ldi	r21, 0x45	; 69
    48fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4900:	dc 01       	movw	r26, r24
    4902:	cb 01       	movw	r24, r22
    4904:	8d 8b       	std	Y+21, r24	; 0x15
    4906:	9e 8b       	std	Y+22, r25	; 0x16
    4908:	af 8b       	std	Y+23, r26	; 0x17
    490a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    490c:	6d 89       	ldd	r22, Y+21	; 0x15
    490e:	7e 89       	ldd	r23, Y+22	; 0x16
    4910:	8f 89       	ldd	r24, Y+23	; 0x17
    4912:	98 8d       	ldd	r25, Y+24	; 0x18
    4914:	20 e0       	ldi	r18, 0x00	; 0
    4916:	30 e0       	ldi	r19, 0x00	; 0
    4918:	40 e8       	ldi	r20, 0x80	; 128
    491a:	5f e3       	ldi	r21, 0x3F	; 63
    491c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4920:	88 23       	and	r24, r24
    4922:	2c f4       	brge	.+10     	; 0x492e <Time_Processing+0x214>
		__ticks = 1;
    4924:	81 e0       	ldi	r24, 0x01	; 1
    4926:	90 e0       	ldi	r25, 0x00	; 0
    4928:	9c 8b       	std	Y+20, r25	; 0x14
    492a:	8b 8b       	std	Y+19, r24	; 0x13
    492c:	3f c0       	rjmp	.+126    	; 0x49ac <Time_Processing+0x292>
	else if (__tmp > 65535)
    492e:	6d 89       	ldd	r22, Y+21	; 0x15
    4930:	7e 89       	ldd	r23, Y+22	; 0x16
    4932:	8f 89       	ldd	r24, Y+23	; 0x17
    4934:	98 8d       	ldd	r25, Y+24	; 0x18
    4936:	20 e0       	ldi	r18, 0x00	; 0
    4938:	3f ef       	ldi	r19, 0xFF	; 255
    493a:	4f e7       	ldi	r20, 0x7F	; 127
    493c:	57 e4       	ldi	r21, 0x47	; 71
    493e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4942:	18 16       	cp	r1, r24
    4944:	4c f5       	brge	.+82     	; 0x4998 <Time_Processing+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4946:	69 8d       	ldd	r22, Y+25	; 0x19
    4948:	7a 8d       	ldd	r23, Y+26	; 0x1a
    494a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    494c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    494e:	20 e0       	ldi	r18, 0x00	; 0
    4950:	30 e0       	ldi	r19, 0x00	; 0
    4952:	40 e2       	ldi	r20, 0x20	; 32
    4954:	51 e4       	ldi	r21, 0x41	; 65
    4956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    495a:	dc 01       	movw	r26, r24
    495c:	cb 01       	movw	r24, r22
    495e:	bc 01       	movw	r22, r24
    4960:	cd 01       	movw	r24, r26
    4962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4966:	dc 01       	movw	r26, r24
    4968:	cb 01       	movw	r24, r22
    496a:	9c 8b       	std	Y+20, r25	; 0x14
    496c:	8b 8b       	std	Y+19, r24	; 0x13
    496e:	0f c0       	rjmp	.+30     	; 0x498e <Time_Processing+0x274>
    4970:	80 e9       	ldi	r24, 0x90	; 144
    4972:	91 e0       	ldi	r25, 0x01	; 1
    4974:	9a 8b       	std	Y+18, r25	; 0x12
    4976:	89 8b       	std	Y+17, r24	; 0x11
    4978:	89 89       	ldd	r24, Y+17	; 0x11
    497a:	9a 89       	ldd	r25, Y+18	; 0x12
    497c:	01 97       	sbiw	r24, 0x01	; 1
    497e:	f1 f7       	brne	.-4      	; 0x497c <Time_Processing+0x262>
    4980:	9a 8b       	std	Y+18, r25	; 0x12
    4982:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4984:	8b 89       	ldd	r24, Y+19	; 0x13
    4986:	9c 89       	ldd	r25, Y+20	; 0x14
    4988:	01 97       	sbiw	r24, 0x01	; 1
    498a:	9c 8b       	std	Y+20, r25	; 0x14
    498c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    498e:	8b 89       	ldd	r24, Y+19	; 0x13
    4990:	9c 89       	ldd	r25, Y+20	; 0x14
    4992:	00 97       	sbiw	r24, 0x00	; 0
    4994:	69 f7       	brne	.-38     	; 0x4970 <Time_Processing+0x256>
    4996:	14 c0       	rjmp	.+40     	; 0x49c0 <Time_Processing+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4998:	6d 89       	ldd	r22, Y+21	; 0x15
    499a:	7e 89       	ldd	r23, Y+22	; 0x16
    499c:	8f 89       	ldd	r24, Y+23	; 0x17
    499e:	98 8d       	ldd	r25, Y+24	; 0x18
    49a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49a4:	dc 01       	movw	r26, r24
    49a6:	cb 01       	movw	r24, r22
    49a8:	9c 8b       	std	Y+20, r25	; 0x14
    49aa:	8b 8b       	std	Y+19, r24	; 0x13
    49ac:	8b 89       	ldd	r24, Y+19	; 0x13
    49ae:	9c 89       	ldd	r25, Y+20	; 0x14
    49b0:	98 8b       	std	Y+16, r25	; 0x10
    49b2:	8f 87       	std	Y+15, r24	; 0x0f
    49b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    49b6:	98 89       	ldd	r25, Y+16	; 0x10
    49b8:	01 97       	sbiw	r24, 0x01	; 1
    49ba:	f1 f7       	brne	.-4      	; 0x49b8 <Time_Processing+0x29e>
    49bc:	98 8b       	std	Y+16, r25	; 0x10
    49be:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		Local_AddressCounter ++ ;
    49c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    49c2:	8f 5f       	subi	r24, 0xFF	; 255
    49c4:	8d 8f       	std	Y+29, r24	; 0x1d

	/*Display Date */
	H_LCD_void_gotoXY(2, 0);
	H_LCD_void_sendString("Today is: ");
	Local_AddressCounter = DATE_FIRST_ADDRESS ;
	for(Local_Counter = 0; Local_Counter < 3; Local_Counter++)
    49c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    49c8:	8f 5f       	subi	r24, 0xFF	; 255
    49ca:	8e 8f       	std	Y+30, r24	; 0x1e
    49cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    49ce:	83 30       	cpi	r24, 0x03	; 3
    49d0:	08 f4       	brcc	.+2      	; 0x49d4 <Time_Processing+0x2ba>
    49d2:	60 cf       	rjmp	.-320    	; 0x4894 <Time_Processing+0x17a>
		_delay_ms(200);
		Local_AddressCounter ++ ;
	}

	/*Display Time */
	H_LCD_void_gotoXY(3, 0);
    49d4:	83 e0       	ldi	r24, 0x03	; 3
    49d6:	60 e0       	ldi	r22, 0x00	; 0
    49d8:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("Time is: ");
    49dc:	89 e9       	ldi	r24, 0x99	; 153
    49de:	91 e0       	ldi	r25, 0x01	; 1
    49e0:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
	Local_AddressCounter = TIME_FIRST_ADDRESS ;
    49e4:	84 e1       	ldi	r24, 0x14	; 20
    49e6:	8d 8f       	std	Y+29, r24	; 0x1d
	for(Local_Counter = 0; Local_Counter < 4; Local_Counter++)
    49e8:	1e 8e       	std	Y+30, r1	; 0x1e
    49ea:	9f c0       	rjmp	.+318    	; 0x4b2a <Time_Processing+0x410>
	{
		if(Local_Counter != 3)
    49ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    49ee:	83 30       	cpi	r24, 0x03	; 3
    49f0:	a1 f0       	breq	.+40     	; 0x4a1a <Time_Processing+0x300>
		{
		H_LCD_void_sendIntNum((u16)TimeArry[Local_Counter]);
    49f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    49f4:	28 2f       	mov	r18, r24
    49f6:	30 e0       	ldi	r19, 0x00	; 0
    49f8:	ce 01       	movw	r24, r28
    49fa:	8b 96       	adiw	r24, 0x2b	; 43
    49fc:	fc 01       	movw	r30, r24
    49fe:	e2 0f       	add	r30, r18
    4a00:	f3 1f       	adc	r31, r19
    4a02:	80 81       	ld	r24, Z
    4a04:	88 2f       	mov	r24, r24
    4a06:	90 e0       	ldi	r25, 0x00	; 0
    4a08:	a0 e0       	ldi	r26, 0x00	; 0
    4a0a:	b0 e0       	ldi	r27, 0x00	; 0
    4a0c:	bc 01       	movw	r22, r24
    4a0e:	cd 01       	movw	r24, r26
    4a10:	0e 94 c8 1a 	call	0x3590	; 0x3590 <H_LCD_void_sendIntNum>
		H_LCD_void_sendData(':');
    4a14:	8a e3       	ldi	r24, 0x3A	; 58
    4a16:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <H_LCD_void_sendData>
		}
//		Save the date into the eeprom
		H_EEPROM_Void_WriteByte(Local_AddressCounter, TimeArry[Local_Counter]) ;
    4a1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4a1c:	48 2f       	mov	r20, r24
    4a1e:	50 e0       	ldi	r21, 0x00	; 0
    4a20:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4a22:	28 2f       	mov	r18, r24
    4a24:	30 e0       	ldi	r19, 0x00	; 0
    4a26:	ce 01       	movw	r24, r28
    4a28:	8b 96       	adiw	r24, 0x2b	; 43
    4a2a:	fc 01       	movw	r30, r24
    4a2c:	e2 0f       	add	r30, r18
    4a2e:	f3 1f       	adc	r31, r19
    4a30:	20 81       	ld	r18, Z
    4a32:	ca 01       	movw	r24, r20
    4a34:	62 2f       	mov	r22, r18
    4a36:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <H_EEPROM_Void_WriteByte>
    4a3a:	80 e0       	ldi	r24, 0x00	; 0
    4a3c:	90 e0       	ldi	r25, 0x00	; 0
    4a3e:	a8 e4       	ldi	r26, 0x48	; 72
    4a40:	b3 e4       	ldi	r27, 0x43	; 67
    4a42:	8b 87       	std	Y+11, r24	; 0x0b
    4a44:	9c 87       	std	Y+12, r25	; 0x0c
    4a46:	ad 87       	std	Y+13, r26	; 0x0d
    4a48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a50:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a52:	20 e0       	ldi	r18, 0x00	; 0
    4a54:	30 e0       	ldi	r19, 0x00	; 0
    4a56:	4a e7       	ldi	r20, 0x7A	; 122
    4a58:	55 e4       	ldi	r21, 0x45	; 69
    4a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a5e:	dc 01       	movw	r26, r24
    4a60:	cb 01       	movw	r24, r22
    4a62:	8f 83       	std	Y+7, r24	; 0x07
    4a64:	98 87       	std	Y+8, r25	; 0x08
    4a66:	a9 87       	std	Y+9, r26	; 0x09
    4a68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a6a:	6f 81       	ldd	r22, Y+7	; 0x07
    4a6c:	78 85       	ldd	r23, Y+8	; 0x08
    4a6e:	89 85       	ldd	r24, Y+9	; 0x09
    4a70:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a72:	20 e0       	ldi	r18, 0x00	; 0
    4a74:	30 e0       	ldi	r19, 0x00	; 0
    4a76:	40 e8       	ldi	r20, 0x80	; 128
    4a78:	5f e3       	ldi	r21, 0x3F	; 63
    4a7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4a7e:	88 23       	and	r24, r24
    4a80:	2c f4       	brge	.+10     	; 0x4a8c <Time_Processing+0x372>
		__ticks = 1;
    4a82:	81 e0       	ldi	r24, 0x01	; 1
    4a84:	90 e0       	ldi	r25, 0x00	; 0
    4a86:	9e 83       	std	Y+6, r25	; 0x06
    4a88:	8d 83       	std	Y+5, r24	; 0x05
    4a8a:	3f c0       	rjmp	.+126    	; 0x4b0a <Time_Processing+0x3f0>
	else if (__tmp > 65535)
    4a8c:	6f 81       	ldd	r22, Y+7	; 0x07
    4a8e:	78 85       	ldd	r23, Y+8	; 0x08
    4a90:	89 85       	ldd	r24, Y+9	; 0x09
    4a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a94:	20 e0       	ldi	r18, 0x00	; 0
    4a96:	3f ef       	ldi	r19, 0xFF	; 255
    4a98:	4f e7       	ldi	r20, 0x7F	; 127
    4a9a:	57 e4       	ldi	r21, 0x47	; 71
    4a9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4aa0:	18 16       	cp	r1, r24
    4aa2:	4c f5       	brge	.+82     	; 0x4af6 <Time_Processing+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4aa4:	6b 85       	ldd	r22, Y+11	; 0x0b
    4aa6:	7c 85       	ldd	r23, Y+12	; 0x0c
    4aa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4aaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    4aac:	20 e0       	ldi	r18, 0x00	; 0
    4aae:	30 e0       	ldi	r19, 0x00	; 0
    4ab0:	40 e2       	ldi	r20, 0x20	; 32
    4ab2:	51 e4       	ldi	r21, 0x41	; 65
    4ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ab8:	dc 01       	movw	r26, r24
    4aba:	cb 01       	movw	r24, r22
    4abc:	bc 01       	movw	r22, r24
    4abe:	cd 01       	movw	r24, r26
    4ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ac4:	dc 01       	movw	r26, r24
    4ac6:	cb 01       	movw	r24, r22
    4ac8:	9e 83       	std	Y+6, r25	; 0x06
    4aca:	8d 83       	std	Y+5, r24	; 0x05
    4acc:	0f c0       	rjmp	.+30     	; 0x4aec <Time_Processing+0x3d2>
    4ace:	80 e9       	ldi	r24, 0x90	; 144
    4ad0:	91 e0       	ldi	r25, 0x01	; 1
    4ad2:	9c 83       	std	Y+4, r25	; 0x04
    4ad4:	8b 83       	std	Y+3, r24	; 0x03
    4ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    4ada:	01 97       	sbiw	r24, 0x01	; 1
    4adc:	f1 f7       	brne	.-4      	; 0x4ada <Time_Processing+0x3c0>
    4ade:	9c 83       	std	Y+4, r25	; 0x04
    4ae0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    4ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    4ae6:	01 97       	sbiw	r24, 0x01	; 1
    4ae8:	9e 83       	std	Y+6, r25	; 0x06
    4aea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aec:	8d 81       	ldd	r24, Y+5	; 0x05
    4aee:	9e 81       	ldd	r25, Y+6	; 0x06
    4af0:	00 97       	sbiw	r24, 0x00	; 0
    4af2:	69 f7       	brne	.-38     	; 0x4ace <Time_Processing+0x3b4>
    4af4:	14 c0       	rjmp	.+40     	; 0x4b1e <Time_Processing+0x404>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4af6:	6f 81       	ldd	r22, Y+7	; 0x07
    4af8:	78 85       	ldd	r23, Y+8	; 0x08
    4afa:	89 85       	ldd	r24, Y+9	; 0x09
    4afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b02:	dc 01       	movw	r26, r24
    4b04:	cb 01       	movw	r24, r22
    4b06:	9e 83       	std	Y+6, r25	; 0x06
    4b08:	8d 83       	std	Y+5, r24	; 0x05
    4b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    4b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    4b0e:	9a 83       	std	Y+2, r25	; 0x02
    4b10:	89 83       	std	Y+1, r24	; 0x01
    4b12:	89 81       	ldd	r24, Y+1	; 0x01
    4b14:	9a 81       	ldd	r25, Y+2	; 0x02
    4b16:	01 97       	sbiw	r24, 0x01	; 1
    4b18:	f1 f7       	brne	.-4      	; 0x4b16 <Time_Processing+0x3fc>
    4b1a:	9a 83       	std	Y+2, r25	; 0x02
    4b1c:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(200);
		Local_AddressCounter ++ ;
    4b1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b20:	8f 5f       	subi	r24, 0xFF	; 255
    4b22:	8d 8f       	std	Y+29, r24	; 0x1d

	/*Display Time */
	H_LCD_void_gotoXY(3, 0);
	H_LCD_void_sendString("Time is: ");
	Local_AddressCounter = TIME_FIRST_ADDRESS ;
	for(Local_Counter = 0; Local_Counter < 4; Local_Counter++)
    4b24:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4b26:	8f 5f       	subi	r24, 0xFF	; 255
    4b28:	8e 8f       	std	Y+30, r24	; 0x1e
    4b2a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4b2c:	84 30       	cpi	r24, 0x04	; 4
    4b2e:	08 f4       	brcc	.+2      	; 0x4b32 <Time_Processing+0x418>
    4b30:	5d cf       	rjmp	.-326    	; 0x49ec <Time_Processing+0x2d2>

		_delay_ms(200);
		Local_AddressCounter ++ ;
	}
	/* Check PM/AM */
	if(H_RTC_Void_GetTime().RTC_DayTime == RTC_AM)
    4b32:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <H_RTC_Void_GetTime>
    4b36:	dc 01       	movw	r26, r24
    4b38:	cb 01       	movw	r24, r22
    4b3a:	8b 2f       	mov	r24, r27
    4b3c:	88 32       	cpi	r24, 0x28	; 40
    4b3e:	29 f4       	brne	.+10     	; 0x4b4a <Time_Processing+0x430>
	{
		H_LCD_void_sendString(" AM");
    4b40:	83 ea       	ldi	r24, 0xA3	; 163
    4b42:	91 e0       	ldi	r25, 0x01	; 1
    4b44:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
    4b48:	0b c0       	rjmp	.+22     	; 0x4b60 <Time_Processing+0x446>
	}
	else if(H_RTC_Void_GetTime().RTC_DayTime == RTC_PM)
    4b4a:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <H_RTC_Void_GetTime>
    4b4e:	dc 01       	movw	r26, r24
    4b50:	cb 01       	movw	r24, r22
    4b52:	8b 2f       	mov	r24, r27
    4b54:	8c 33       	cpi	r24, 0x3C	; 60
    4b56:	21 f4       	brne	.+8      	; 0x4b60 <Time_Processing+0x446>
	{
		H_LCD_void_sendString(" PM");
    4b58:	87 ea       	ldi	r24, 0xA7	; 167
    4b5a:	91 e0       	ldi	r25, 0x01	; 1
    4b5c:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
	}
}
    4b60:	ce 5b       	subi	r28, 0xBE	; 190
    4b62:	df 4f       	sbci	r29, 0xFF	; 255
    4b64:	0f b6       	in	r0, 0x3f	; 63
    4b66:	f8 94       	cli
    4b68:	de bf       	out	0x3e, r29	; 62
    4b6a:	0f be       	out	0x3f, r0	; 63
    4b6c:	cd bf       	out	0x3d, r28	; 61
    4b6e:	cf 91       	pop	r28
    4b70:	df 91       	pop	r29
    4b72:	1f 91       	pop	r17
    4b74:	0f 91       	pop	r16
    4b76:	ff 90       	pop	r15
    4b78:	08 95       	ret

00004b7a <Display_LastLogin>:

void Display_LastLogin(void)
{
    4b7a:	df 93       	push	r29
    4b7c:	cf 93       	push	r28
    4b7e:	cd b7       	in	r28, 0x3d	; 61
    4b80:	de b7       	in	r29, 0x3e	; 62
    4b82:	ac 97       	sbiw	r28, 0x2c	; 44
    4b84:	0f b6       	in	r0, 0x3f	; 63
    4b86:	f8 94       	cli
    4b88:	de bf       	out	0x3e, r29	; 62
    4b8a:	0f be       	out	0x3f, r0	; 63
    4b8c:	cd bf       	out	0x3d, r28	; 61
	u8 datat;
	u8 AddressCounter = 0;
    4b8e:	1b a6       	std	Y+43, r1	; 0x2b
	H_LCD_void_gotoXY(3,0);
    4b90:	83 e0       	ldi	r24, 0x03	; 3
    4b92:	60 e0       	ldi	r22, 0x00	; 0
    4b94:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <H_LCD_void_gotoXY>
    4b98:	80 e0       	ldi	r24, 0x00	; 0
    4b9a:	90 e0       	ldi	r25, 0x00	; 0
    4b9c:	a8 e4       	ldi	r26, 0x48	; 72
    4b9e:	b3 e4       	ldi	r27, 0x43	; 67
    4ba0:	8f a3       	std	Y+39, r24	; 0x27
    4ba2:	98 a7       	std	Y+40, r25	; 0x28
    4ba4:	a9 a7       	std	Y+41, r26	; 0x29
    4ba6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ba8:	6f a1       	ldd	r22, Y+39	; 0x27
    4baa:	78 a5       	ldd	r23, Y+40	; 0x28
    4bac:	89 a5       	ldd	r24, Y+41	; 0x29
    4bae:	9a a5       	ldd	r25, Y+42	; 0x2a
    4bb0:	20 e0       	ldi	r18, 0x00	; 0
    4bb2:	30 e0       	ldi	r19, 0x00	; 0
    4bb4:	4a e7       	ldi	r20, 0x7A	; 122
    4bb6:	55 e4       	ldi	r21, 0x45	; 69
    4bb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bbc:	dc 01       	movw	r26, r24
    4bbe:	cb 01       	movw	r24, r22
    4bc0:	8b a3       	std	Y+35, r24	; 0x23
    4bc2:	9c a3       	std	Y+36, r25	; 0x24
    4bc4:	ad a3       	std	Y+37, r26	; 0x25
    4bc6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4bc8:	6b a1       	ldd	r22, Y+35	; 0x23
    4bca:	7c a1       	ldd	r23, Y+36	; 0x24
    4bcc:	8d a1       	ldd	r24, Y+37	; 0x25
    4bce:	9e a1       	ldd	r25, Y+38	; 0x26
    4bd0:	20 e0       	ldi	r18, 0x00	; 0
    4bd2:	30 e0       	ldi	r19, 0x00	; 0
    4bd4:	40 e8       	ldi	r20, 0x80	; 128
    4bd6:	5f e3       	ldi	r21, 0x3F	; 63
    4bd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4bdc:	88 23       	and	r24, r24
    4bde:	2c f4       	brge	.+10     	; 0x4bea <Display_LastLogin+0x70>
		__ticks = 1;
    4be0:	81 e0       	ldi	r24, 0x01	; 1
    4be2:	90 e0       	ldi	r25, 0x00	; 0
    4be4:	9a a3       	std	Y+34, r25	; 0x22
    4be6:	89 a3       	std	Y+33, r24	; 0x21
    4be8:	3f c0       	rjmp	.+126    	; 0x4c68 <Display_LastLogin+0xee>
	else if (__tmp > 65535)
    4bea:	6b a1       	ldd	r22, Y+35	; 0x23
    4bec:	7c a1       	ldd	r23, Y+36	; 0x24
    4bee:	8d a1       	ldd	r24, Y+37	; 0x25
    4bf0:	9e a1       	ldd	r25, Y+38	; 0x26
    4bf2:	20 e0       	ldi	r18, 0x00	; 0
    4bf4:	3f ef       	ldi	r19, 0xFF	; 255
    4bf6:	4f e7       	ldi	r20, 0x7F	; 127
    4bf8:	57 e4       	ldi	r21, 0x47	; 71
    4bfa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4bfe:	18 16       	cp	r1, r24
    4c00:	4c f5       	brge	.+82     	; 0x4c54 <Display_LastLogin+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c02:	6f a1       	ldd	r22, Y+39	; 0x27
    4c04:	78 a5       	ldd	r23, Y+40	; 0x28
    4c06:	89 a5       	ldd	r24, Y+41	; 0x29
    4c08:	9a a5       	ldd	r25, Y+42	; 0x2a
    4c0a:	20 e0       	ldi	r18, 0x00	; 0
    4c0c:	30 e0       	ldi	r19, 0x00	; 0
    4c0e:	40 e2       	ldi	r20, 0x20	; 32
    4c10:	51 e4       	ldi	r21, 0x41	; 65
    4c12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c16:	dc 01       	movw	r26, r24
    4c18:	cb 01       	movw	r24, r22
    4c1a:	bc 01       	movw	r22, r24
    4c1c:	cd 01       	movw	r24, r26
    4c1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c22:	dc 01       	movw	r26, r24
    4c24:	cb 01       	movw	r24, r22
    4c26:	9a a3       	std	Y+34, r25	; 0x22
    4c28:	89 a3       	std	Y+33, r24	; 0x21
    4c2a:	0f c0       	rjmp	.+30     	; 0x4c4a <Display_LastLogin+0xd0>
    4c2c:	80 e9       	ldi	r24, 0x90	; 144
    4c2e:	91 e0       	ldi	r25, 0x01	; 1
    4c30:	98 a3       	std	Y+32, r25	; 0x20
    4c32:	8f 8f       	std	Y+31, r24	; 0x1f
    4c34:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4c36:	98 a1       	ldd	r25, Y+32	; 0x20
    4c38:	01 97       	sbiw	r24, 0x01	; 1
    4c3a:	f1 f7       	brne	.-4      	; 0x4c38 <Display_LastLogin+0xbe>
    4c3c:	98 a3       	std	Y+32, r25	; 0x20
    4c3e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c40:	89 a1       	ldd	r24, Y+33	; 0x21
    4c42:	9a a1       	ldd	r25, Y+34	; 0x22
    4c44:	01 97       	sbiw	r24, 0x01	; 1
    4c46:	9a a3       	std	Y+34, r25	; 0x22
    4c48:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c4a:	89 a1       	ldd	r24, Y+33	; 0x21
    4c4c:	9a a1       	ldd	r25, Y+34	; 0x22
    4c4e:	00 97       	sbiw	r24, 0x00	; 0
    4c50:	69 f7       	brne	.-38     	; 0x4c2c <Display_LastLogin+0xb2>
    4c52:	14 c0       	rjmp	.+40     	; 0x4c7c <Display_LastLogin+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c54:	6b a1       	ldd	r22, Y+35	; 0x23
    4c56:	7c a1       	ldd	r23, Y+36	; 0x24
    4c58:	8d a1       	ldd	r24, Y+37	; 0x25
    4c5a:	9e a1       	ldd	r25, Y+38	; 0x26
    4c5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c60:	dc 01       	movw	r26, r24
    4c62:	cb 01       	movw	r24, r22
    4c64:	9a a3       	std	Y+34, r25	; 0x22
    4c66:	89 a3       	std	Y+33, r24	; 0x21
    4c68:	89 a1       	ldd	r24, Y+33	; 0x21
    4c6a:	9a a1       	ldd	r25, Y+34	; 0x22
    4c6c:	9e 8f       	std	Y+30, r25	; 0x1e
    4c6e:	8d 8f       	std	Y+29, r24	; 0x1d
    4c70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4c72:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4c74:	01 97       	sbiw	r24, 0x01	; 1
    4c76:	f1 f7       	brne	.-4      	; 0x4c74 <Display_LastLogin+0xfa>
    4c78:	9e 8f       	std	Y+30, r25	; 0x1e
    4c7a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(200);

	/* Display Date */
	H_LCD_void_gotoXY(3,0);
    4c7c:	83 e0       	ldi	r24, 0x03	; 3
    4c7e:	60 e0       	ldi	r22, 0x00	; 0
    4c80:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <H_LCD_void_gotoXY>
	for(AddressCounter = 24; AddressCounter <= 26; AddressCounter++)
    4c84:	88 e1       	ldi	r24, 0x18	; 24
    4c86:	8b a7       	std	Y+43, r24	; 0x2b
    4c88:	8a c0       	rjmp	.+276    	; 0x4d9e <Display_LastLogin+0x224>
	{
		H_EEPROM_Void_ReadByte(AddressCounter, &datat);
    4c8a:	8b a5       	ldd	r24, Y+43	; 0x2b
    4c8c:	88 2f       	mov	r24, r24
    4c8e:	90 e0       	ldi	r25, 0x00	; 0
    4c90:	9e 01       	movw	r18, r28
    4c92:	24 5d       	subi	r18, 0xD4	; 212
    4c94:	3f 4f       	sbci	r19, 0xFF	; 255
    4c96:	b9 01       	movw	r22, r18
    4c98:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <H_EEPROM_Void_ReadByte>
		H_LCD_void_sendIntNum((u16)datat);
    4c9c:	8c a5       	ldd	r24, Y+44	; 0x2c
    4c9e:	88 2f       	mov	r24, r24
    4ca0:	90 e0       	ldi	r25, 0x00	; 0
    4ca2:	a0 e0       	ldi	r26, 0x00	; 0
    4ca4:	b0 e0       	ldi	r27, 0x00	; 0
    4ca6:	bc 01       	movw	r22, r24
    4ca8:	cd 01       	movw	r24, r26
    4caa:	0e 94 c8 1a 	call	0x3590	; 0x3590 <H_LCD_void_sendIntNum>
		H_LCD_void_sendData('/');
    4cae:	8f e2       	ldi	r24, 0x2F	; 47
    4cb0:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <H_LCD_void_sendData>
    4cb4:	80 e0       	ldi	r24, 0x00	; 0
    4cb6:	90 e0       	ldi	r25, 0x00	; 0
    4cb8:	a8 e4       	ldi	r26, 0x48	; 72
    4cba:	b3 e4       	ldi	r27, 0x43	; 67
    4cbc:	89 8f       	std	Y+25, r24	; 0x19
    4cbe:	9a 8f       	std	Y+26, r25	; 0x1a
    4cc0:	ab 8f       	std	Y+27, r26	; 0x1b
    4cc2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cc4:	69 8d       	ldd	r22, Y+25	; 0x19
    4cc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4cc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4cca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ccc:	20 e0       	ldi	r18, 0x00	; 0
    4cce:	30 e0       	ldi	r19, 0x00	; 0
    4cd0:	4a e7       	ldi	r20, 0x7A	; 122
    4cd2:	55 e4       	ldi	r21, 0x45	; 69
    4cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cd8:	dc 01       	movw	r26, r24
    4cda:	cb 01       	movw	r24, r22
    4cdc:	8d 8b       	std	Y+21, r24	; 0x15
    4cde:	9e 8b       	std	Y+22, r25	; 0x16
    4ce0:	af 8b       	std	Y+23, r26	; 0x17
    4ce2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4ce4:	6d 89       	ldd	r22, Y+21	; 0x15
    4ce6:	7e 89       	ldd	r23, Y+22	; 0x16
    4ce8:	8f 89       	ldd	r24, Y+23	; 0x17
    4cea:	98 8d       	ldd	r25, Y+24	; 0x18
    4cec:	20 e0       	ldi	r18, 0x00	; 0
    4cee:	30 e0       	ldi	r19, 0x00	; 0
    4cf0:	40 e8       	ldi	r20, 0x80	; 128
    4cf2:	5f e3       	ldi	r21, 0x3F	; 63
    4cf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4cf8:	88 23       	and	r24, r24
    4cfa:	2c f4       	brge	.+10     	; 0x4d06 <Display_LastLogin+0x18c>
		__ticks = 1;
    4cfc:	81 e0       	ldi	r24, 0x01	; 1
    4cfe:	90 e0       	ldi	r25, 0x00	; 0
    4d00:	9c 8b       	std	Y+20, r25	; 0x14
    4d02:	8b 8b       	std	Y+19, r24	; 0x13
    4d04:	3f c0       	rjmp	.+126    	; 0x4d84 <Display_LastLogin+0x20a>
	else if (__tmp > 65535)
    4d06:	6d 89       	ldd	r22, Y+21	; 0x15
    4d08:	7e 89       	ldd	r23, Y+22	; 0x16
    4d0a:	8f 89       	ldd	r24, Y+23	; 0x17
    4d0c:	98 8d       	ldd	r25, Y+24	; 0x18
    4d0e:	20 e0       	ldi	r18, 0x00	; 0
    4d10:	3f ef       	ldi	r19, 0xFF	; 255
    4d12:	4f e7       	ldi	r20, 0x7F	; 127
    4d14:	57 e4       	ldi	r21, 0x47	; 71
    4d16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4d1a:	18 16       	cp	r1, r24
    4d1c:	4c f5       	brge	.+82     	; 0x4d70 <Display_LastLogin+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d1e:	69 8d       	ldd	r22, Y+25	; 0x19
    4d20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d26:	20 e0       	ldi	r18, 0x00	; 0
    4d28:	30 e0       	ldi	r19, 0x00	; 0
    4d2a:	40 e2       	ldi	r20, 0x20	; 32
    4d2c:	51 e4       	ldi	r21, 0x41	; 65
    4d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d32:	dc 01       	movw	r26, r24
    4d34:	cb 01       	movw	r24, r22
    4d36:	bc 01       	movw	r22, r24
    4d38:	cd 01       	movw	r24, r26
    4d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d3e:	dc 01       	movw	r26, r24
    4d40:	cb 01       	movw	r24, r22
    4d42:	9c 8b       	std	Y+20, r25	; 0x14
    4d44:	8b 8b       	std	Y+19, r24	; 0x13
    4d46:	0f c0       	rjmp	.+30     	; 0x4d66 <Display_LastLogin+0x1ec>
    4d48:	80 e9       	ldi	r24, 0x90	; 144
    4d4a:	91 e0       	ldi	r25, 0x01	; 1
    4d4c:	9a 8b       	std	Y+18, r25	; 0x12
    4d4e:	89 8b       	std	Y+17, r24	; 0x11
    4d50:	89 89       	ldd	r24, Y+17	; 0x11
    4d52:	9a 89       	ldd	r25, Y+18	; 0x12
    4d54:	01 97       	sbiw	r24, 0x01	; 1
    4d56:	f1 f7       	brne	.-4      	; 0x4d54 <Display_LastLogin+0x1da>
    4d58:	9a 8b       	std	Y+18, r25	; 0x12
    4d5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d5c:	8b 89       	ldd	r24, Y+19	; 0x13
    4d5e:	9c 89       	ldd	r25, Y+20	; 0x14
    4d60:	01 97       	sbiw	r24, 0x01	; 1
    4d62:	9c 8b       	std	Y+20, r25	; 0x14
    4d64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d66:	8b 89       	ldd	r24, Y+19	; 0x13
    4d68:	9c 89       	ldd	r25, Y+20	; 0x14
    4d6a:	00 97       	sbiw	r24, 0x00	; 0
    4d6c:	69 f7       	brne	.-38     	; 0x4d48 <Display_LastLogin+0x1ce>
    4d6e:	14 c0       	rjmp	.+40     	; 0x4d98 <Display_LastLogin+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d70:	6d 89       	ldd	r22, Y+21	; 0x15
    4d72:	7e 89       	ldd	r23, Y+22	; 0x16
    4d74:	8f 89       	ldd	r24, Y+23	; 0x17
    4d76:	98 8d       	ldd	r25, Y+24	; 0x18
    4d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d7c:	dc 01       	movw	r26, r24
    4d7e:	cb 01       	movw	r24, r22
    4d80:	9c 8b       	std	Y+20, r25	; 0x14
    4d82:	8b 8b       	std	Y+19, r24	; 0x13
    4d84:	8b 89       	ldd	r24, Y+19	; 0x13
    4d86:	9c 89       	ldd	r25, Y+20	; 0x14
    4d88:	98 8b       	std	Y+16, r25	; 0x10
    4d8a:	8f 87       	std	Y+15, r24	; 0x0f
    4d8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d8e:	98 89       	ldd	r25, Y+16	; 0x10
    4d90:	01 97       	sbiw	r24, 0x01	; 1
    4d92:	f1 f7       	brne	.-4      	; 0x4d90 <Display_LastLogin+0x216>
    4d94:	98 8b       	std	Y+16, r25	; 0x10
    4d96:	8f 87       	std	Y+15, r24	; 0x0f
	H_LCD_void_gotoXY(3,0);
	_delay_ms(200);

	/* Display Date */
	H_LCD_void_gotoXY(3,0);
	for(AddressCounter = 24; AddressCounter <= 26; AddressCounter++)
    4d98:	8b a5       	ldd	r24, Y+43	; 0x2b
    4d9a:	8f 5f       	subi	r24, 0xFF	; 255
    4d9c:	8b a7       	std	Y+43, r24	; 0x2b
    4d9e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4da0:	8b 31       	cpi	r24, 0x1B	; 27
    4da2:	08 f4       	brcc	.+2      	; 0x4da6 <Display_LastLogin+0x22c>
    4da4:	72 cf       	rjmp	.-284    	; 0x4c8a <Display_LastLogin+0x110>
		H_LCD_void_sendData('/');
		_delay_ms(200);
	}

	/* Display Time */
	H_LCD_void_gotoXY(4,0);
    4da6:	84 e0       	ldi	r24, 0x04	; 4
    4da8:	60 e0       	ldi	r22, 0x00	; 0
    4daa:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <H_LCD_void_gotoXY>
	for(AddressCounter = 20; AddressCounter < 23; AddressCounter++)
    4dae:	84 e1       	ldi	r24, 0x14	; 20
    4db0:	8b a7       	std	Y+43, r24	; 0x2b
    4db2:	8a c0       	rjmp	.+276    	; 0x4ec8 <Display_LastLogin+0x34e>
	{
		H_EEPROM_Void_ReadByte(AddressCounter, &datat);
    4db4:	8b a5       	ldd	r24, Y+43	; 0x2b
    4db6:	88 2f       	mov	r24, r24
    4db8:	90 e0       	ldi	r25, 0x00	; 0
    4dba:	9e 01       	movw	r18, r28
    4dbc:	24 5d       	subi	r18, 0xD4	; 212
    4dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    4dc0:	b9 01       	movw	r22, r18
    4dc2:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <H_EEPROM_Void_ReadByte>
		H_LCD_void_sendIntNum((u16)datat);
    4dc6:	8c a5       	ldd	r24, Y+44	; 0x2c
    4dc8:	88 2f       	mov	r24, r24
    4dca:	90 e0       	ldi	r25, 0x00	; 0
    4dcc:	a0 e0       	ldi	r26, 0x00	; 0
    4dce:	b0 e0       	ldi	r27, 0x00	; 0
    4dd0:	bc 01       	movw	r22, r24
    4dd2:	cd 01       	movw	r24, r26
    4dd4:	0e 94 c8 1a 	call	0x3590	; 0x3590 <H_LCD_void_sendIntNum>
		H_LCD_void_sendData(':');
    4dd8:	8a e3       	ldi	r24, 0x3A	; 58
    4dda:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <H_LCD_void_sendData>
    4dde:	80 e0       	ldi	r24, 0x00	; 0
    4de0:	90 e0       	ldi	r25, 0x00	; 0
    4de2:	a8 e4       	ldi	r26, 0x48	; 72
    4de4:	b3 e4       	ldi	r27, 0x43	; 67
    4de6:	8b 87       	std	Y+11, r24	; 0x0b
    4de8:	9c 87       	std	Y+12, r25	; 0x0c
    4dea:	ad 87       	std	Y+13, r26	; 0x0d
    4dec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dee:	6b 85       	ldd	r22, Y+11	; 0x0b
    4df0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4df2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4df4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4df6:	20 e0       	ldi	r18, 0x00	; 0
    4df8:	30 e0       	ldi	r19, 0x00	; 0
    4dfa:	4a e7       	ldi	r20, 0x7A	; 122
    4dfc:	55 e4       	ldi	r21, 0x45	; 69
    4dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e02:	dc 01       	movw	r26, r24
    4e04:	cb 01       	movw	r24, r22
    4e06:	8f 83       	std	Y+7, r24	; 0x07
    4e08:	98 87       	std	Y+8, r25	; 0x08
    4e0a:	a9 87       	std	Y+9, r26	; 0x09
    4e0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e0e:	6f 81       	ldd	r22, Y+7	; 0x07
    4e10:	78 85       	ldd	r23, Y+8	; 0x08
    4e12:	89 85       	ldd	r24, Y+9	; 0x09
    4e14:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e16:	20 e0       	ldi	r18, 0x00	; 0
    4e18:	30 e0       	ldi	r19, 0x00	; 0
    4e1a:	40 e8       	ldi	r20, 0x80	; 128
    4e1c:	5f e3       	ldi	r21, 0x3F	; 63
    4e1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e22:	88 23       	and	r24, r24
    4e24:	2c f4       	brge	.+10     	; 0x4e30 <Display_LastLogin+0x2b6>
		__ticks = 1;
    4e26:	81 e0       	ldi	r24, 0x01	; 1
    4e28:	90 e0       	ldi	r25, 0x00	; 0
    4e2a:	9e 83       	std	Y+6, r25	; 0x06
    4e2c:	8d 83       	std	Y+5, r24	; 0x05
    4e2e:	3f c0       	rjmp	.+126    	; 0x4eae <Display_LastLogin+0x334>
	else if (__tmp > 65535)
    4e30:	6f 81       	ldd	r22, Y+7	; 0x07
    4e32:	78 85       	ldd	r23, Y+8	; 0x08
    4e34:	89 85       	ldd	r24, Y+9	; 0x09
    4e36:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e38:	20 e0       	ldi	r18, 0x00	; 0
    4e3a:	3f ef       	ldi	r19, 0xFF	; 255
    4e3c:	4f e7       	ldi	r20, 0x7F	; 127
    4e3e:	57 e4       	ldi	r21, 0x47	; 71
    4e40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4e44:	18 16       	cp	r1, r24
    4e46:	4c f5       	brge	.+82     	; 0x4e9a <Display_LastLogin+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e48:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e50:	20 e0       	ldi	r18, 0x00	; 0
    4e52:	30 e0       	ldi	r19, 0x00	; 0
    4e54:	40 e2       	ldi	r20, 0x20	; 32
    4e56:	51 e4       	ldi	r21, 0x41	; 65
    4e58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e5c:	dc 01       	movw	r26, r24
    4e5e:	cb 01       	movw	r24, r22
    4e60:	bc 01       	movw	r22, r24
    4e62:	cd 01       	movw	r24, r26
    4e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e68:	dc 01       	movw	r26, r24
    4e6a:	cb 01       	movw	r24, r22
    4e6c:	9e 83       	std	Y+6, r25	; 0x06
    4e6e:	8d 83       	std	Y+5, r24	; 0x05
    4e70:	0f c0       	rjmp	.+30     	; 0x4e90 <Display_LastLogin+0x316>
    4e72:	80 e9       	ldi	r24, 0x90	; 144
    4e74:	91 e0       	ldi	r25, 0x01	; 1
    4e76:	9c 83       	std	Y+4, r25	; 0x04
    4e78:	8b 83       	std	Y+3, r24	; 0x03
    4e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    4e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    4e7e:	01 97       	sbiw	r24, 0x01	; 1
    4e80:	f1 f7       	brne	.-4      	; 0x4e7e <Display_LastLogin+0x304>
    4e82:	9c 83       	std	Y+4, r25	; 0x04
    4e84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e86:	8d 81       	ldd	r24, Y+5	; 0x05
    4e88:	9e 81       	ldd	r25, Y+6	; 0x06
    4e8a:	01 97       	sbiw	r24, 0x01	; 1
    4e8c:	9e 83       	std	Y+6, r25	; 0x06
    4e8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e90:	8d 81       	ldd	r24, Y+5	; 0x05
    4e92:	9e 81       	ldd	r25, Y+6	; 0x06
    4e94:	00 97       	sbiw	r24, 0x00	; 0
    4e96:	69 f7       	brne	.-38     	; 0x4e72 <Display_LastLogin+0x2f8>
    4e98:	14 c0       	rjmp	.+40     	; 0x4ec2 <Display_LastLogin+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e9a:	6f 81       	ldd	r22, Y+7	; 0x07
    4e9c:	78 85       	ldd	r23, Y+8	; 0x08
    4e9e:	89 85       	ldd	r24, Y+9	; 0x09
    4ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ea6:	dc 01       	movw	r26, r24
    4ea8:	cb 01       	movw	r24, r22
    4eaa:	9e 83       	std	Y+6, r25	; 0x06
    4eac:	8d 83       	std	Y+5, r24	; 0x05
    4eae:	8d 81       	ldd	r24, Y+5	; 0x05
    4eb0:	9e 81       	ldd	r25, Y+6	; 0x06
    4eb2:	9a 83       	std	Y+2, r25	; 0x02
    4eb4:	89 83       	std	Y+1, r24	; 0x01
    4eb6:	89 81       	ldd	r24, Y+1	; 0x01
    4eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    4eba:	01 97       	sbiw	r24, 0x01	; 1
    4ebc:	f1 f7       	brne	.-4      	; 0x4eba <Display_LastLogin+0x340>
    4ebe:	9a 83       	std	Y+2, r25	; 0x02
    4ec0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
	}

	/* Display Time */
	H_LCD_void_gotoXY(4,0);
	for(AddressCounter = 20; AddressCounter < 23; AddressCounter++)
    4ec2:	8b a5       	ldd	r24, Y+43	; 0x2b
    4ec4:	8f 5f       	subi	r24, 0xFF	; 255
    4ec6:	8b a7       	std	Y+43, r24	; 0x2b
    4ec8:	8b a5       	ldd	r24, Y+43	; 0x2b
    4eca:	87 31       	cpi	r24, 0x17	; 23
    4ecc:	08 f4       	brcc	.+2      	; 0x4ed0 <Display_LastLogin+0x356>
    4ece:	72 cf       	rjmp	.-284    	; 0x4db4 <Display_LastLogin+0x23a>
		H_EEPROM_Void_ReadByte(AddressCounter, &datat);
		H_LCD_void_sendIntNum((u16)datat);
		H_LCD_void_sendData(':');
		_delay_ms(200);
	}
	H_EEPROM_Void_ReadByte(23, &datat);
    4ed0:	9e 01       	movw	r18, r28
    4ed2:	24 5d       	subi	r18, 0xD4	; 212
    4ed4:	3f 4f       	sbci	r19, 0xFF	; 255
    4ed6:	87 e1       	ldi	r24, 0x17	; 23
    4ed8:	90 e0       	ldi	r25, 0x00	; 0
    4eda:	b9 01       	movw	r22, r18
    4edc:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <H_EEPROM_Void_ReadByte>
	if (datat == RTC_PM)
    4ee0:	8c a5       	ldd	r24, Y+44	; 0x2c
    4ee2:	8c 33       	cpi	r24, 0x3C	; 60
    4ee4:	29 f4       	brne	.+10     	; 0x4ef0 <Display_LastLogin+0x376>
	{
		H_LCD_void_sendString(" PM");
    4ee6:	87 ea       	ldi	r24, 0xA7	; 167
    4ee8:	91 e0       	ldi	r25, 0x01	; 1
    4eea:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
    4eee:	04 c0       	rjmp	.+8      	; 0x4ef8 <Display_LastLogin+0x37e>
	}
	else
	{
		H_LCD_void_sendString(" AM");
    4ef0:	83 ea       	ldi	r24, 0xA3	; 163
    4ef2:	91 e0       	ldi	r25, 0x01	; 1
    4ef4:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
	}
}
    4ef8:	ac 96       	adiw	r28, 0x2c	; 44
    4efa:	0f b6       	in	r0, 0x3f	; 63
    4efc:	f8 94       	cli
    4efe:	de bf       	out	0x3e, r29	; 62
    4f00:	0f be       	out	0x3f, r0	; 63
    4f02:	cd bf       	out	0x3d, r28	; 61
    4f04:	cf 91       	pop	r28
    4f06:	df 91       	pop	r29
    4f08:	08 95       	ret

00004f0a <SYSTEM_OFF>:

void SYSTEM_OFF(void)
{
    4f0a:	df 93       	push	r29
    4f0c:	cf 93       	push	r28
    4f0e:	cd b7       	in	r28, 0x3d	; 61
    4f10:	de b7       	in	r29, 0x3e	; 62
    4f12:	e9 97       	sbiw	r28, 0x39	; 57
    4f14:	0f b6       	in	r0, 0x3f	; 63
    4f16:	f8 94       	cli
    4f18:	de bf       	out	0x3e, r29	; 62
    4f1a:	0f be       	out	0x3f, r0	; 63
    4f1c:	cd bf       	out	0x3d, r28	; 61
	u8 counter = 0 ;
    4f1e:	19 ae       	std	Y+57, r1	; 0x39
	H_LCD_void_sendString("System Stop");
    4f20:	8b ea       	ldi	r24, 0xAB	; 171
    4f22:	91 e0       	ldi	r25, 0x01	; 1
    4f24:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
	H_BUZZER_Void_TurnOn();
    4f28:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <H_BUZZER_Void_TurnOn>
	do
	{
		H_BUZZER_Void_TurnOn();
    4f2c:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <H_BUZZER_Void_TurnOn>
    4f30:	80 e0       	ldi	r24, 0x00	; 0
    4f32:	90 e0       	ldi	r25, 0x00	; 0
    4f34:	aa e7       	ldi	r26, 0x7A	; 122
    4f36:	b3 e4       	ldi	r27, 0x43	; 67
    4f38:	8d ab       	std	Y+53, r24	; 0x35
    4f3a:	9e ab       	std	Y+54, r25	; 0x36
    4f3c:	af ab       	std	Y+55, r26	; 0x37
    4f3e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f40:	6d a9       	ldd	r22, Y+53	; 0x35
    4f42:	7e a9       	ldd	r23, Y+54	; 0x36
    4f44:	8f a9       	ldd	r24, Y+55	; 0x37
    4f46:	98 ad       	ldd	r25, Y+56	; 0x38
    4f48:	20 e0       	ldi	r18, 0x00	; 0
    4f4a:	30 e0       	ldi	r19, 0x00	; 0
    4f4c:	4a e7       	ldi	r20, 0x7A	; 122
    4f4e:	55 e4       	ldi	r21, 0x45	; 69
    4f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f54:	dc 01       	movw	r26, r24
    4f56:	cb 01       	movw	r24, r22
    4f58:	89 ab       	std	Y+49, r24	; 0x31
    4f5a:	9a ab       	std	Y+50, r25	; 0x32
    4f5c:	ab ab       	std	Y+51, r26	; 0x33
    4f5e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4f60:	69 a9       	ldd	r22, Y+49	; 0x31
    4f62:	7a a9       	ldd	r23, Y+50	; 0x32
    4f64:	8b a9       	ldd	r24, Y+51	; 0x33
    4f66:	9c a9       	ldd	r25, Y+52	; 0x34
    4f68:	20 e0       	ldi	r18, 0x00	; 0
    4f6a:	30 e0       	ldi	r19, 0x00	; 0
    4f6c:	40 e8       	ldi	r20, 0x80	; 128
    4f6e:	5f e3       	ldi	r21, 0x3F	; 63
    4f70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4f74:	88 23       	and	r24, r24
    4f76:	2c f4       	brge	.+10     	; 0x4f82 <SYSTEM_OFF+0x78>
		__ticks = 1;
    4f78:	81 e0       	ldi	r24, 0x01	; 1
    4f7a:	90 e0       	ldi	r25, 0x00	; 0
    4f7c:	98 ab       	std	Y+48, r25	; 0x30
    4f7e:	8f a7       	std	Y+47, r24	; 0x2f
    4f80:	3f c0       	rjmp	.+126    	; 0x5000 <SYSTEM_OFF+0xf6>
	else if (__tmp > 65535)
    4f82:	69 a9       	ldd	r22, Y+49	; 0x31
    4f84:	7a a9       	ldd	r23, Y+50	; 0x32
    4f86:	8b a9       	ldd	r24, Y+51	; 0x33
    4f88:	9c a9       	ldd	r25, Y+52	; 0x34
    4f8a:	20 e0       	ldi	r18, 0x00	; 0
    4f8c:	3f ef       	ldi	r19, 0xFF	; 255
    4f8e:	4f e7       	ldi	r20, 0x7F	; 127
    4f90:	57 e4       	ldi	r21, 0x47	; 71
    4f92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4f96:	18 16       	cp	r1, r24
    4f98:	4c f5       	brge	.+82     	; 0x4fec <SYSTEM_OFF+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f9a:	6d a9       	ldd	r22, Y+53	; 0x35
    4f9c:	7e a9       	ldd	r23, Y+54	; 0x36
    4f9e:	8f a9       	ldd	r24, Y+55	; 0x37
    4fa0:	98 ad       	ldd	r25, Y+56	; 0x38
    4fa2:	20 e0       	ldi	r18, 0x00	; 0
    4fa4:	30 e0       	ldi	r19, 0x00	; 0
    4fa6:	40 e2       	ldi	r20, 0x20	; 32
    4fa8:	51 e4       	ldi	r21, 0x41	; 65
    4faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fae:	dc 01       	movw	r26, r24
    4fb0:	cb 01       	movw	r24, r22
    4fb2:	bc 01       	movw	r22, r24
    4fb4:	cd 01       	movw	r24, r26
    4fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fba:	dc 01       	movw	r26, r24
    4fbc:	cb 01       	movw	r24, r22
    4fbe:	98 ab       	std	Y+48, r25	; 0x30
    4fc0:	8f a7       	std	Y+47, r24	; 0x2f
    4fc2:	0f c0       	rjmp	.+30     	; 0x4fe2 <SYSTEM_OFF+0xd8>
    4fc4:	80 e9       	ldi	r24, 0x90	; 144
    4fc6:	91 e0       	ldi	r25, 0x01	; 1
    4fc8:	9e a7       	std	Y+46, r25	; 0x2e
    4fca:	8d a7       	std	Y+45, r24	; 0x2d
    4fcc:	8d a5       	ldd	r24, Y+45	; 0x2d
    4fce:	9e a5       	ldd	r25, Y+46	; 0x2e
    4fd0:	01 97       	sbiw	r24, 0x01	; 1
    4fd2:	f1 f7       	brne	.-4      	; 0x4fd0 <SYSTEM_OFF+0xc6>
    4fd4:	9e a7       	std	Y+46, r25	; 0x2e
    4fd6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    4fda:	98 a9       	ldd	r25, Y+48	; 0x30
    4fdc:	01 97       	sbiw	r24, 0x01	; 1
    4fde:	98 ab       	std	Y+48, r25	; 0x30
    4fe0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fe2:	8f a5       	ldd	r24, Y+47	; 0x2f
    4fe4:	98 a9       	ldd	r25, Y+48	; 0x30
    4fe6:	00 97       	sbiw	r24, 0x00	; 0
    4fe8:	69 f7       	brne	.-38     	; 0x4fc4 <SYSTEM_OFF+0xba>
    4fea:	14 c0       	rjmp	.+40     	; 0x5014 <SYSTEM_OFF+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fec:	69 a9       	ldd	r22, Y+49	; 0x31
    4fee:	7a a9       	ldd	r23, Y+50	; 0x32
    4ff0:	8b a9       	ldd	r24, Y+51	; 0x33
    4ff2:	9c a9       	ldd	r25, Y+52	; 0x34
    4ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ff8:	dc 01       	movw	r26, r24
    4ffa:	cb 01       	movw	r24, r22
    4ffc:	98 ab       	std	Y+48, r25	; 0x30
    4ffe:	8f a7       	std	Y+47, r24	; 0x2f
    5000:	8f a5       	ldd	r24, Y+47	; 0x2f
    5002:	98 a9       	ldd	r25, Y+48	; 0x30
    5004:	9c a7       	std	Y+44, r25	; 0x2c
    5006:	8b a7       	std	Y+43, r24	; 0x2b
    5008:	8b a5       	ldd	r24, Y+43	; 0x2b
    500a:	9c a5       	ldd	r25, Y+44	; 0x2c
    500c:	01 97       	sbiw	r24, 0x01	; 1
    500e:	f1 f7       	brne	.-4      	; 0x500c <SYSTEM_OFF+0x102>
    5010:	9c a7       	std	Y+44, r25	; 0x2c
    5012:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(250);
		H_BUZZER_Void_TurnOff();
    5014:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <H_BUZZER_Void_TurnOff>
    5018:	80 e0       	ldi	r24, 0x00	; 0
    501a:	90 e0       	ldi	r25, 0x00	; 0
    501c:	aa e7       	ldi	r26, 0x7A	; 122
    501e:	b3 e4       	ldi	r27, 0x43	; 67
    5020:	8f a3       	std	Y+39, r24	; 0x27
    5022:	98 a7       	std	Y+40, r25	; 0x28
    5024:	a9 a7       	std	Y+41, r26	; 0x29
    5026:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5028:	6f a1       	ldd	r22, Y+39	; 0x27
    502a:	78 a5       	ldd	r23, Y+40	; 0x28
    502c:	89 a5       	ldd	r24, Y+41	; 0x29
    502e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5030:	20 e0       	ldi	r18, 0x00	; 0
    5032:	30 e0       	ldi	r19, 0x00	; 0
    5034:	4a e7       	ldi	r20, 0x7A	; 122
    5036:	55 e4       	ldi	r21, 0x45	; 69
    5038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    503c:	dc 01       	movw	r26, r24
    503e:	cb 01       	movw	r24, r22
    5040:	8b a3       	std	Y+35, r24	; 0x23
    5042:	9c a3       	std	Y+36, r25	; 0x24
    5044:	ad a3       	std	Y+37, r26	; 0x25
    5046:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5048:	6b a1       	ldd	r22, Y+35	; 0x23
    504a:	7c a1       	ldd	r23, Y+36	; 0x24
    504c:	8d a1       	ldd	r24, Y+37	; 0x25
    504e:	9e a1       	ldd	r25, Y+38	; 0x26
    5050:	20 e0       	ldi	r18, 0x00	; 0
    5052:	30 e0       	ldi	r19, 0x00	; 0
    5054:	40 e8       	ldi	r20, 0x80	; 128
    5056:	5f e3       	ldi	r21, 0x3F	; 63
    5058:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    505c:	88 23       	and	r24, r24
    505e:	2c f4       	brge	.+10     	; 0x506a <SYSTEM_OFF+0x160>
		__ticks = 1;
    5060:	81 e0       	ldi	r24, 0x01	; 1
    5062:	90 e0       	ldi	r25, 0x00	; 0
    5064:	9a a3       	std	Y+34, r25	; 0x22
    5066:	89 a3       	std	Y+33, r24	; 0x21
    5068:	3f c0       	rjmp	.+126    	; 0x50e8 <SYSTEM_OFF+0x1de>
	else if (__tmp > 65535)
    506a:	6b a1       	ldd	r22, Y+35	; 0x23
    506c:	7c a1       	ldd	r23, Y+36	; 0x24
    506e:	8d a1       	ldd	r24, Y+37	; 0x25
    5070:	9e a1       	ldd	r25, Y+38	; 0x26
    5072:	20 e0       	ldi	r18, 0x00	; 0
    5074:	3f ef       	ldi	r19, 0xFF	; 255
    5076:	4f e7       	ldi	r20, 0x7F	; 127
    5078:	57 e4       	ldi	r21, 0x47	; 71
    507a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    507e:	18 16       	cp	r1, r24
    5080:	4c f5       	brge	.+82     	; 0x50d4 <SYSTEM_OFF+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5082:	6f a1       	ldd	r22, Y+39	; 0x27
    5084:	78 a5       	ldd	r23, Y+40	; 0x28
    5086:	89 a5       	ldd	r24, Y+41	; 0x29
    5088:	9a a5       	ldd	r25, Y+42	; 0x2a
    508a:	20 e0       	ldi	r18, 0x00	; 0
    508c:	30 e0       	ldi	r19, 0x00	; 0
    508e:	40 e2       	ldi	r20, 0x20	; 32
    5090:	51 e4       	ldi	r21, 0x41	; 65
    5092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5096:	dc 01       	movw	r26, r24
    5098:	cb 01       	movw	r24, r22
    509a:	bc 01       	movw	r22, r24
    509c:	cd 01       	movw	r24, r26
    509e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50a2:	dc 01       	movw	r26, r24
    50a4:	cb 01       	movw	r24, r22
    50a6:	9a a3       	std	Y+34, r25	; 0x22
    50a8:	89 a3       	std	Y+33, r24	; 0x21
    50aa:	0f c0       	rjmp	.+30     	; 0x50ca <SYSTEM_OFF+0x1c0>
    50ac:	80 e9       	ldi	r24, 0x90	; 144
    50ae:	91 e0       	ldi	r25, 0x01	; 1
    50b0:	98 a3       	std	Y+32, r25	; 0x20
    50b2:	8f 8f       	std	Y+31, r24	; 0x1f
    50b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    50b6:	98 a1       	ldd	r25, Y+32	; 0x20
    50b8:	01 97       	sbiw	r24, 0x01	; 1
    50ba:	f1 f7       	brne	.-4      	; 0x50b8 <SYSTEM_OFF+0x1ae>
    50bc:	98 a3       	std	Y+32, r25	; 0x20
    50be:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50c0:	89 a1       	ldd	r24, Y+33	; 0x21
    50c2:	9a a1       	ldd	r25, Y+34	; 0x22
    50c4:	01 97       	sbiw	r24, 0x01	; 1
    50c6:	9a a3       	std	Y+34, r25	; 0x22
    50c8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50ca:	89 a1       	ldd	r24, Y+33	; 0x21
    50cc:	9a a1       	ldd	r25, Y+34	; 0x22
    50ce:	00 97       	sbiw	r24, 0x00	; 0
    50d0:	69 f7       	brne	.-38     	; 0x50ac <SYSTEM_OFF+0x1a2>
    50d2:	14 c0       	rjmp	.+40     	; 0x50fc <SYSTEM_OFF+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50d4:	6b a1       	ldd	r22, Y+35	; 0x23
    50d6:	7c a1       	ldd	r23, Y+36	; 0x24
    50d8:	8d a1       	ldd	r24, Y+37	; 0x25
    50da:	9e a1       	ldd	r25, Y+38	; 0x26
    50dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50e0:	dc 01       	movw	r26, r24
    50e2:	cb 01       	movw	r24, r22
    50e4:	9a a3       	std	Y+34, r25	; 0x22
    50e6:	89 a3       	std	Y+33, r24	; 0x21
    50e8:	89 a1       	ldd	r24, Y+33	; 0x21
    50ea:	9a a1       	ldd	r25, Y+34	; 0x22
    50ec:	9e 8f       	std	Y+30, r25	; 0x1e
    50ee:	8d 8f       	std	Y+29, r24	; 0x1d
    50f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    50f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    50f4:	01 97       	sbiw	r24, 0x01	; 1
    50f6:	f1 f7       	brne	.-4      	; 0x50f4 <SYSTEM_OFF+0x1ea>
    50f8:	9e 8f       	std	Y+30, r25	; 0x1e
    50fa:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(250);
		H_BUZZER_Void_TurnOn();
    50fc:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <H_BUZZER_Void_TurnOn>
    5100:	80 e0       	ldi	r24, 0x00	; 0
    5102:	90 e0       	ldi	r25, 0x00	; 0
    5104:	a8 e4       	ldi	r26, 0x48	; 72
    5106:	b4 e4       	ldi	r27, 0x44	; 68
    5108:	89 8f       	std	Y+25, r24	; 0x19
    510a:	9a 8f       	std	Y+26, r25	; 0x1a
    510c:	ab 8f       	std	Y+27, r26	; 0x1b
    510e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5110:	69 8d       	ldd	r22, Y+25	; 0x19
    5112:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5114:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5116:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5118:	20 e0       	ldi	r18, 0x00	; 0
    511a:	30 e0       	ldi	r19, 0x00	; 0
    511c:	4a e7       	ldi	r20, 0x7A	; 122
    511e:	55 e4       	ldi	r21, 0x45	; 69
    5120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5124:	dc 01       	movw	r26, r24
    5126:	cb 01       	movw	r24, r22
    5128:	8d 8b       	std	Y+21, r24	; 0x15
    512a:	9e 8b       	std	Y+22, r25	; 0x16
    512c:	af 8b       	std	Y+23, r26	; 0x17
    512e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5130:	6d 89       	ldd	r22, Y+21	; 0x15
    5132:	7e 89       	ldd	r23, Y+22	; 0x16
    5134:	8f 89       	ldd	r24, Y+23	; 0x17
    5136:	98 8d       	ldd	r25, Y+24	; 0x18
    5138:	20 e0       	ldi	r18, 0x00	; 0
    513a:	30 e0       	ldi	r19, 0x00	; 0
    513c:	40 e8       	ldi	r20, 0x80	; 128
    513e:	5f e3       	ldi	r21, 0x3F	; 63
    5140:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5144:	88 23       	and	r24, r24
    5146:	2c f4       	brge	.+10     	; 0x5152 <SYSTEM_OFF+0x248>
		__ticks = 1;
    5148:	81 e0       	ldi	r24, 0x01	; 1
    514a:	90 e0       	ldi	r25, 0x00	; 0
    514c:	9c 8b       	std	Y+20, r25	; 0x14
    514e:	8b 8b       	std	Y+19, r24	; 0x13
    5150:	3f c0       	rjmp	.+126    	; 0x51d0 <SYSTEM_OFF+0x2c6>
	else if (__tmp > 65535)
    5152:	6d 89       	ldd	r22, Y+21	; 0x15
    5154:	7e 89       	ldd	r23, Y+22	; 0x16
    5156:	8f 89       	ldd	r24, Y+23	; 0x17
    5158:	98 8d       	ldd	r25, Y+24	; 0x18
    515a:	20 e0       	ldi	r18, 0x00	; 0
    515c:	3f ef       	ldi	r19, 0xFF	; 255
    515e:	4f e7       	ldi	r20, 0x7F	; 127
    5160:	57 e4       	ldi	r21, 0x47	; 71
    5162:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5166:	18 16       	cp	r1, r24
    5168:	4c f5       	brge	.+82     	; 0x51bc <SYSTEM_OFF+0x2b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    516a:	69 8d       	ldd	r22, Y+25	; 0x19
    516c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    516e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5170:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5172:	20 e0       	ldi	r18, 0x00	; 0
    5174:	30 e0       	ldi	r19, 0x00	; 0
    5176:	40 e2       	ldi	r20, 0x20	; 32
    5178:	51 e4       	ldi	r21, 0x41	; 65
    517a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    517e:	dc 01       	movw	r26, r24
    5180:	cb 01       	movw	r24, r22
    5182:	bc 01       	movw	r22, r24
    5184:	cd 01       	movw	r24, r26
    5186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    518a:	dc 01       	movw	r26, r24
    518c:	cb 01       	movw	r24, r22
    518e:	9c 8b       	std	Y+20, r25	; 0x14
    5190:	8b 8b       	std	Y+19, r24	; 0x13
    5192:	0f c0       	rjmp	.+30     	; 0x51b2 <SYSTEM_OFF+0x2a8>
    5194:	80 e9       	ldi	r24, 0x90	; 144
    5196:	91 e0       	ldi	r25, 0x01	; 1
    5198:	9a 8b       	std	Y+18, r25	; 0x12
    519a:	89 8b       	std	Y+17, r24	; 0x11
    519c:	89 89       	ldd	r24, Y+17	; 0x11
    519e:	9a 89       	ldd	r25, Y+18	; 0x12
    51a0:	01 97       	sbiw	r24, 0x01	; 1
    51a2:	f1 f7       	brne	.-4      	; 0x51a0 <SYSTEM_OFF+0x296>
    51a4:	9a 8b       	std	Y+18, r25	; 0x12
    51a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51a8:	8b 89       	ldd	r24, Y+19	; 0x13
    51aa:	9c 89       	ldd	r25, Y+20	; 0x14
    51ac:	01 97       	sbiw	r24, 0x01	; 1
    51ae:	9c 8b       	std	Y+20, r25	; 0x14
    51b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51b2:	8b 89       	ldd	r24, Y+19	; 0x13
    51b4:	9c 89       	ldd	r25, Y+20	; 0x14
    51b6:	00 97       	sbiw	r24, 0x00	; 0
    51b8:	69 f7       	brne	.-38     	; 0x5194 <SYSTEM_OFF+0x28a>
    51ba:	14 c0       	rjmp	.+40     	; 0x51e4 <SYSTEM_OFF+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51bc:	6d 89       	ldd	r22, Y+21	; 0x15
    51be:	7e 89       	ldd	r23, Y+22	; 0x16
    51c0:	8f 89       	ldd	r24, Y+23	; 0x17
    51c2:	98 8d       	ldd	r25, Y+24	; 0x18
    51c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51c8:	dc 01       	movw	r26, r24
    51ca:	cb 01       	movw	r24, r22
    51cc:	9c 8b       	std	Y+20, r25	; 0x14
    51ce:	8b 8b       	std	Y+19, r24	; 0x13
    51d0:	8b 89       	ldd	r24, Y+19	; 0x13
    51d2:	9c 89       	ldd	r25, Y+20	; 0x14
    51d4:	98 8b       	std	Y+16, r25	; 0x10
    51d6:	8f 87       	std	Y+15, r24	; 0x0f
    51d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    51da:	98 89       	ldd	r25, Y+16	; 0x10
    51dc:	01 97       	sbiw	r24, 0x01	; 1
    51de:	f1 f7       	brne	.-4      	; 0x51dc <SYSTEM_OFF+0x2d2>
    51e0:	98 8b       	std	Y+16, r25	; 0x10
    51e2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(800);
		H_BUZZER_Void_TurnOff();
    51e4:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <H_BUZZER_Void_TurnOff>
    51e8:	80 e0       	ldi	r24, 0x00	; 0
    51ea:	90 e0       	ldi	r25, 0x00	; 0
    51ec:	aa e7       	ldi	r26, 0x7A	; 122
    51ee:	b3 e4       	ldi	r27, 0x43	; 67
    51f0:	8b 87       	std	Y+11, r24	; 0x0b
    51f2:	9c 87       	std	Y+12, r25	; 0x0c
    51f4:	ad 87       	std	Y+13, r26	; 0x0d
    51f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    51fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    51fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    51fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    5200:	20 e0       	ldi	r18, 0x00	; 0
    5202:	30 e0       	ldi	r19, 0x00	; 0
    5204:	4a e7       	ldi	r20, 0x7A	; 122
    5206:	55 e4       	ldi	r21, 0x45	; 69
    5208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    520c:	dc 01       	movw	r26, r24
    520e:	cb 01       	movw	r24, r22
    5210:	8f 83       	std	Y+7, r24	; 0x07
    5212:	98 87       	std	Y+8, r25	; 0x08
    5214:	a9 87       	std	Y+9, r26	; 0x09
    5216:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5218:	6f 81       	ldd	r22, Y+7	; 0x07
    521a:	78 85       	ldd	r23, Y+8	; 0x08
    521c:	89 85       	ldd	r24, Y+9	; 0x09
    521e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5220:	20 e0       	ldi	r18, 0x00	; 0
    5222:	30 e0       	ldi	r19, 0x00	; 0
    5224:	40 e8       	ldi	r20, 0x80	; 128
    5226:	5f e3       	ldi	r21, 0x3F	; 63
    5228:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    522c:	88 23       	and	r24, r24
    522e:	2c f4       	brge	.+10     	; 0x523a <SYSTEM_OFF+0x330>
		__ticks = 1;
    5230:	81 e0       	ldi	r24, 0x01	; 1
    5232:	90 e0       	ldi	r25, 0x00	; 0
    5234:	9e 83       	std	Y+6, r25	; 0x06
    5236:	8d 83       	std	Y+5, r24	; 0x05
    5238:	3f c0       	rjmp	.+126    	; 0x52b8 <SYSTEM_OFF+0x3ae>
	else if (__tmp > 65535)
    523a:	6f 81       	ldd	r22, Y+7	; 0x07
    523c:	78 85       	ldd	r23, Y+8	; 0x08
    523e:	89 85       	ldd	r24, Y+9	; 0x09
    5240:	9a 85       	ldd	r25, Y+10	; 0x0a
    5242:	20 e0       	ldi	r18, 0x00	; 0
    5244:	3f ef       	ldi	r19, 0xFF	; 255
    5246:	4f e7       	ldi	r20, 0x7F	; 127
    5248:	57 e4       	ldi	r21, 0x47	; 71
    524a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    524e:	18 16       	cp	r1, r24
    5250:	4c f5       	brge	.+82     	; 0x52a4 <SYSTEM_OFF+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5252:	6b 85       	ldd	r22, Y+11	; 0x0b
    5254:	7c 85       	ldd	r23, Y+12	; 0x0c
    5256:	8d 85       	ldd	r24, Y+13	; 0x0d
    5258:	9e 85       	ldd	r25, Y+14	; 0x0e
    525a:	20 e0       	ldi	r18, 0x00	; 0
    525c:	30 e0       	ldi	r19, 0x00	; 0
    525e:	40 e2       	ldi	r20, 0x20	; 32
    5260:	51 e4       	ldi	r21, 0x41	; 65
    5262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5266:	dc 01       	movw	r26, r24
    5268:	cb 01       	movw	r24, r22
    526a:	bc 01       	movw	r22, r24
    526c:	cd 01       	movw	r24, r26
    526e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5272:	dc 01       	movw	r26, r24
    5274:	cb 01       	movw	r24, r22
    5276:	9e 83       	std	Y+6, r25	; 0x06
    5278:	8d 83       	std	Y+5, r24	; 0x05
    527a:	0f c0       	rjmp	.+30     	; 0x529a <SYSTEM_OFF+0x390>
    527c:	80 e9       	ldi	r24, 0x90	; 144
    527e:	91 e0       	ldi	r25, 0x01	; 1
    5280:	9c 83       	std	Y+4, r25	; 0x04
    5282:	8b 83       	std	Y+3, r24	; 0x03
    5284:	8b 81       	ldd	r24, Y+3	; 0x03
    5286:	9c 81       	ldd	r25, Y+4	; 0x04
    5288:	01 97       	sbiw	r24, 0x01	; 1
    528a:	f1 f7       	brne	.-4      	; 0x5288 <SYSTEM_OFF+0x37e>
    528c:	9c 83       	std	Y+4, r25	; 0x04
    528e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5290:	8d 81       	ldd	r24, Y+5	; 0x05
    5292:	9e 81       	ldd	r25, Y+6	; 0x06
    5294:	01 97       	sbiw	r24, 0x01	; 1
    5296:	9e 83       	std	Y+6, r25	; 0x06
    5298:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    529a:	8d 81       	ldd	r24, Y+5	; 0x05
    529c:	9e 81       	ldd	r25, Y+6	; 0x06
    529e:	00 97       	sbiw	r24, 0x00	; 0
    52a0:	69 f7       	brne	.-38     	; 0x527c <SYSTEM_OFF+0x372>
    52a2:	14 c0       	rjmp	.+40     	; 0x52cc <SYSTEM_OFF+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52a4:	6f 81       	ldd	r22, Y+7	; 0x07
    52a6:	78 85       	ldd	r23, Y+8	; 0x08
    52a8:	89 85       	ldd	r24, Y+9	; 0x09
    52aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    52ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52b0:	dc 01       	movw	r26, r24
    52b2:	cb 01       	movw	r24, r22
    52b4:	9e 83       	std	Y+6, r25	; 0x06
    52b6:	8d 83       	std	Y+5, r24	; 0x05
    52b8:	8d 81       	ldd	r24, Y+5	; 0x05
    52ba:	9e 81       	ldd	r25, Y+6	; 0x06
    52bc:	9a 83       	std	Y+2, r25	; 0x02
    52be:	89 83       	std	Y+1, r24	; 0x01
    52c0:	89 81       	ldd	r24, Y+1	; 0x01
    52c2:	9a 81       	ldd	r25, Y+2	; 0x02
    52c4:	01 97       	sbiw	r24, 0x01	; 1
    52c6:	f1 f7       	brne	.-4      	; 0x52c4 <SYSTEM_OFF+0x3ba>
    52c8:	9a 83       	std	Y+2, r25	; 0x02
    52ca:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		counter ++ ;
    52cc:	89 ad       	ldd	r24, Y+57	; 0x39
    52ce:	8f 5f       	subi	r24, 0xFF	; 255
    52d0:	89 af       	std	Y+57, r24	; 0x39

	}while (counter != 10);
    52d2:	89 ad       	ldd	r24, Y+57	; 0x39
    52d4:	8a 30       	cpi	r24, 0x0A	; 10
    52d6:	09 f0       	breq	.+2      	; 0x52da <SYSTEM_OFF+0x3d0>
    52d8:	29 ce       	rjmp	.-942    	; 0x4f2c <SYSTEM_OFF+0x22>
	H_BUZZER_Void_TurnOff();
    52da:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <H_BUZZER_Void_TurnOff>
//	_delay_ms(5000);
	H_LCD_void_ClearDisplay();
    52de:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <H_LCD_void_ClearDisplay>
	M_GIE_Void_Disable();
    52e2:	0e 94 a5 0a 	call	0x154a	; 0x154a <M_GIE_Void_Disable>
}
    52e6:	e9 96       	adiw	r28, 0x39	; 57
    52e8:	0f b6       	in	r0, 0x3f	; 63
    52ea:	f8 94       	cli
    52ec:	de bf       	out	0x3e, r29	; 62
    52ee:	0f be       	out	0x3f, r0	; 63
    52f0:	cd bf       	out	0x3d, r28	; 61
    52f2:	cf 91       	pop	r28
    52f4:	df 91       	pop	r29
    52f6:	08 95       	ret

000052f8 <Wrong_Authentication>:

Pass_State Wrong_Authentication(void)
{
    52f8:	df 93       	push	r29
    52fa:	cf 93       	push	r28
    52fc:	cd b7       	in	r28, 0x3d	; 61
    52fe:	de b7       	in	r29, 0x3e	; 62
    5300:	60 97       	sbiw	r28, 0x10	; 16
    5302:	0f b6       	in	r0, 0x3f	; 63
    5304:	f8 94       	cli
    5306:	de bf       	out	0x3e, r29	; 62
    5308:	0f be       	out	0x3f, r0	; 63
    530a:	cd bf       	out	0x3d, r28	; 61
	Login_State Pass = Pass_Ok;
    530c:	81 e0       	ldi	r24, 0x01	; 1
    530e:	88 8b       	std	Y+16, r24	; 0x10
	u8 Local_Holder=0;
    5310:	1f 86       	std	Y+15, r1	; 0x0f

	/*Increment global counter */
	Global_PasswordCounter ++ ;
    5312:	80 91 24 04 	lds	r24, 0x0424
    5316:	8f 5f       	subi	r24, 0xFF	; 255
    5318:	80 93 24 04 	sts	0x0424, r24
	H_LCD_void_gotoXY(2,0);
    531c:	82 e0       	ldi	r24, 0x02	; 2
    531e:	60 e0       	ldi	r22, 0x00	; 0
    5320:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <H_LCD_void_gotoXY>
    H_LCD_void_sendString("Re-enter ur data");
    5324:	87 eb       	ldi	r24, 0xB7	; 183
    5326:	91 e0       	ldi	r25, 0x01	; 1
    5328:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
    532c:	80 e0       	ldi	r24, 0x00	; 0
    532e:	90 e0       	ldi	r25, 0x00	; 0
    5330:	aa e7       	ldi	r26, 0x7A	; 122
    5332:	b4 e4       	ldi	r27, 0x44	; 68
    5334:	8b 87       	std	Y+11, r24	; 0x0b
    5336:	9c 87       	std	Y+12, r25	; 0x0c
    5338:	ad 87       	std	Y+13, r26	; 0x0d
    533a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    533c:	6b 85       	ldd	r22, Y+11	; 0x0b
    533e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5340:	8d 85       	ldd	r24, Y+13	; 0x0d
    5342:	9e 85       	ldd	r25, Y+14	; 0x0e
    5344:	20 e0       	ldi	r18, 0x00	; 0
    5346:	30 e0       	ldi	r19, 0x00	; 0
    5348:	4a e7       	ldi	r20, 0x7A	; 122
    534a:	55 e4       	ldi	r21, 0x45	; 69
    534c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5350:	dc 01       	movw	r26, r24
    5352:	cb 01       	movw	r24, r22
    5354:	8f 83       	std	Y+7, r24	; 0x07
    5356:	98 87       	std	Y+8, r25	; 0x08
    5358:	a9 87       	std	Y+9, r26	; 0x09
    535a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    535c:	6f 81       	ldd	r22, Y+7	; 0x07
    535e:	78 85       	ldd	r23, Y+8	; 0x08
    5360:	89 85       	ldd	r24, Y+9	; 0x09
    5362:	9a 85       	ldd	r25, Y+10	; 0x0a
    5364:	20 e0       	ldi	r18, 0x00	; 0
    5366:	30 e0       	ldi	r19, 0x00	; 0
    5368:	40 e8       	ldi	r20, 0x80	; 128
    536a:	5f e3       	ldi	r21, 0x3F	; 63
    536c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5370:	88 23       	and	r24, r24
    5372:	2c f4       	brge	.+10     	; 0x537e <Wrong_Authentication+0x86>
		__ticks = 1;
    5374:	81 e0       	ldi	r24, 0x01	; 1
    5376:	90 e0       	ldi	r25, 0x00	; 0
    5378:	9e 83       	std	Y+6, r25	; 0x06
    537a:	8d 83       	std	Y+5, r24	; 0x05
    537c:	3f c0       	rjmp	.+126    	; 0x53fc <Wrong_Authentication+0x104>
	else if (__tmp > 65535)
    537e:	6f 81       	ldd	r22, Y+7	; 0x07
    5380:	78 85       	ldd	r23, Y+8	; 0x08
    5382:	89 85       	ldd	r24, Y+9	; 0x09
    5384:	9a 85       	ldd	r25, Y+10	; 0x0a
    5386:	20 e0       	ldi	r18, 0x00	; 0
    5388:	3f ef       	ldi	r19, 0xFF	; 255
    538a:	4f e7       	ldi	r20, 0x7F	; 127
    538c:	57 e4       	ldi	r21, 0x47	; 71
    538e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5392:	18 16       	cp	r1, r24
    5394:	4c f5       	brge	.+82     	; 0x53e8 <Wrong_Authentication+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5396:	6b 85       	ldd	r22, Y+11	; 0x0b
    5398:	7c 85       	ldd	r23, Y+12	; 0x0c
    539a:	8d 85       	ldd	r24, Y+13	; 0x0d
    539c:	9e 85       	ldd	r25, Y+14	; 0x0e
    539e:	20 e0       	ldi	r18, 0x00	; 0
    53a0:	30 e0       	ldi	r19, 0x00	; 0
    53a2:	40 e2       	ldi	r20, 0x20	; 32
    53a4:	51 e4       	ldi	r21, 0x41	; 65
    53a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53aa:	dc 01       	movw	r26, r24
    53ac:	cb 01       	movw	r24, r22
    53ae:	bc 01       	movw	r22, r24
    53b0:	cd 01       	movw	r24, r26
    53b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53b6:	dc 01       	movw	r26, r24
    53b8:	cb 01       	movw	r24, r22
    53ba:	9e 83       	std	Y+6, r25	; 0x06
    53bc:	8d 83       	std	Y+5, r24	; 0x05
    53be:	0f c0       	rjmp	.+30     	; 0x53de <Wrong_Authentication+0xe6>
    53c0:	80 e9       	ldi	r24, 0x90	; 144
    53c2:	91 e0       	ldi	r25, 0x01	; 1
    53c4:	9c 83       	std	Y+4, r25	; 0x04
    53c6:	8b 83       	std	Y+3, r24	; 0x03
    53c8:	8b 81       	ldd	r24, Y+3	; 0x03
    53ca:	9c 81       	ldd	r25, Y+4	; 0x04
    53cc:	01 97       	sbiw	r24, 0x01	; 1
    53ce:	f1 f7       	brne	.-4      	; 0x53cc <Wrong_Authentication+0xd4>
    53d0:	9c 83       	std	Y+4, r25	; 0x04
    53d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53d4:	8d 81       	ldd	r24, Y+5	; 0x05
    53d6:	9e 81       	ldd	r25, Y+6	; 0x06
    53d8:	01 97       	sbiw	r24, 0x01	; 1
    53da:	9e 83       	std	Y+6, r25	; 0x06
    53dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53de:	8d 81       	ldd	r24, Y+5	; 0x05
    53e0:	9e 81       	ldd	r25, Y+6	; 0x06
    53e2:	00 97       	sbiw	r24, 0x00	; 0
    53e4:	69 f7       	brne	.-38     	; 0x53c0 <Wrong_Authentication+0xc8>
    53e6:	14 c0       	rjmp	.+40     	; 0x5410 <Wrong_Authentication+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53e8:	6f 81       	ldd	r22, Y+7	; 0x07
    53ea:	78 85       	ldd	r23, Y+8	; 0x08
    53ec:	89 85       	ldd	r24, Y+9	; 0x09
    53ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    53f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53f4:	dc 01       	movw	r26, r24
    53f6:	cb 01       	movw	r24, r22
    53f8:	9e 83       	std	Y+6, r25	; 0x06
    53fa:	8d 83       	std	Y+5, r24	; 0x05
    53fc:	8d 81       	ldd	r24, Y+5	; 0x05
    53fe:	9e 81       	ldd	r25, Y+6	; 0x06
    5400:	9a 83       	std	Y+2, r25	; 0x02
    5402:	89 83       	std	Y+1, r24	; 0x01
    5404:	89 81       	ldd	r24, Y+1	; 0x01
    5406:	9a 81       	ldd	r25, Y+2	; 0x02
    5408:	01 97       	sbiw	r24, 0x01	; 1
    540a:	f1 f7       	brne	.-4      	; 0x5408 <Wrong_Authentication+0x110>
    540c:	9a 83       	std	Y+2, r25	; 0x02
    540e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1000);
    Local_Holder = User_Authentication_SignIn();
    5410:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <User_Authentication_SignIn>
    5414:	8f 87       	std	Y+15, r24	; 0x0f

    H_LCD_void_ClearDisplay();
    5416:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <H_LCD_void_ClearDisplay>
	if(Local_Holder== Login_Ok)
    541a:	8f 85       	ldd	r24, Y+15	; 0x0f
    541c:	81 30       	cpi	r24, 0x01	; 1
    541e:	11 f4       	brne	.+4      	; 0x5424 <Wrong_Authentication+0x12c>
	{
	    Pass = Login_Ok;
    5420:	81 e0       	ldi	r24, 0x01	; 1
    5422:	88 8b       	std	Y+16, r24	; 0x10
	}
	if(Local_Holder== Login_Nok)
    5424:	8f 85       	ldd	r24, Y+15	; 0x0f
    5426:	88 23       	and	r24, r24
    5428:	09 f4       	brne	.+2      	; 0x542c <Wrong_Authentication+0x134>
	{
		 Pass = Login_Nok;
    542a:	18 8a       	std	Y+16, r1	; 0x10
	}
	return Pass;
    542c:	88 89       	ldd	r24, Y+16	; 0x10
}
    542e:	60 96       	adiw	r28, 0x10	; 16
    5430:	0f b6       	in	r0, 0x3f	; 63
    5432:	f8 94       	cli
    5434:	de bf       	out	0x3e, r29	; 62
    5436:	0f be       	out	0x3f, r0	; 63
    5438:	cd bf       	out	0x3d, r28	; 61
    543a:	cf 91       	pop	r28
    543c:	df 91       	pop	r29
    543e:	08 95       	ret

00005440 <APP_WelcomeDisplay>:

void APP_WelcomeDisplay()
{
    5440:	df 93       	push	r29
    5442:	cf 93       	push	r28
    5444:	cd b7       	in	r28, 0x3d	; 61
    5446:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_gotoXY(1, 0);
    5448:	81 e0       	ldi	r24, 0x01	; 1
    544a:	60 e0       	ldi	r22, 0x00	; 0
    544c:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("#Smart Home System#");
    5450:	88 ec       	ldi	r24, 0xC8	; 200
    5452:	91 e0       	ldi	r25, 0x01	; 1
    5454:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
	H_LCD_void_gotoXY(2, 0);
    5458:	82 e0       	ldi	r24, 0x02	; 2
    545a:	60 e0       	ldi	r22, 0x00	; 0
    545c:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("Chose Option:");
    5460:	8c ed       	ldi	r24, 0xDC	; 220
    5462:	91 e0       	ldi	r25, 0x01	; 1
    5464:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
	H_LCD_void_gotoXY(3, 0);
    5468:	83 e0       	ldi	r24, 0x03	; 3
    546a:	60 e0       	ldi	r22, 0x00	; 0
    546c:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("1-SignIn | 2-SingUp");
    5470:	8a ee       	ldi	r24, 0xEA	; 234
    5472:	91 e0       	ldi	r25, 0x01	; 1
    5474:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
	H_LCD_void_gotoXY(4, 0);
    5478:	84 e0       	ldi	r24, 0x04	; 4
    547a:	60 e0       	ldi	r22, 0x00	; 0
    547c:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("3-Factory Rest");
    5480:	8e ef       	ldi	r24, 0xFE	; 254
    5482:	91 e0       	ldi	r25, 0x01	; 1
    5484:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
}
    5488:	cf 91       	pop	r28
    548a:	df 91       	pop	r29
    548c:	08 95       	ret

0000548e <Check_Password>:

PASS_STATE Check_Password(u8 *Copy_Password, u8 Copy_ID)
{
    548e:	df 93       	push	r29
    5490:	cf 93       	push	r28
    5492:	cd b7       	in	r28, 0x3d	; 61
    5494:	de b7       	in	r29, 0x3e	; 62
    5496:	67 97       	sbiw	r28, 0x17	; 23
    5498:	0f b6       	in	r0, 0x3f	; 63
    549a:	f8 94       	cli
    549c:	de bf       	out	0x3e, r29	; 62
    549e:	0f be       	out	0x3f, r0	; 63
    54a0:	cd bf       	out	0x3d, r28	; 61
    54a2:	9b 8b       	std	Y+19, r25	; 0x13
    54a4:	8a 8b       	std	Y+18, r24	; 0x12
    54a6:	6c 8b       	std	Y+20, r22	; 0x14
	u8 Local_Counter = 0;
    54a8:	18 8a       	std	Y+16, r1	; 0x10
	u8 AddressCounter = 0 ;
    54aa:	1f 86       	std	Y+15, r1	; 0x0f
	u8 Temp_Holder = 0;
    54ac:	19 8a       	std	Y+17, r1	; 0x11

	switch(Copy_ID)
    54ae:	8c 89       	ldd	r24, Y+20	; 0x14
    54b0:	28 2f       	mov	r18, r24
    54b2:	30 e0       	ldi	r19, 0x00	; 0
    54b4:	3f 8b       	std	Y+23, r19	; 0x17
    54b6:	2e 8b       	std	Y+22, r18	; 0x16
    54b8:	8e 89       	ldd	r24, Y+22	; 0x16
    54ba:	9f 89       	ldd	r25, Y+23	; 0x17
    54bc:	81 30       	cpi	r24, 0x01	; 1
    54be:	91 05       	cpc	r25, r1
    54c0:	31 f0       	breq	.+12     	; 0x54ce <Check_Password+0x40>
    54c2:	2e 89       	ldd	r18, Y+22	; 0x16
    54c4:	3f 89       	ldd	r19, Y+23	; 0x17
    54c6:	22 30       	cpi	r18, 0x02	; 2
    54c8:	31 05       	cpc	r19, r1
    54ca:	39 f0       	breq	.+14     	; 0x54da <Check_Password+0x4c>
    54cc:	0d c0       	rjmp	.+26     	; 0x54e8 <Check_Password+0x5a>
	{
	case 1:
		AddressCounter = 0 ;
    54ce:	1f 86       	std	Y+15, r1	; 0x0f
		H_LCD_void_sendString("ID_1");
    54d0:	8d e0       	ldi	r24, 0x0D	; 13
    54d2:	92 e0       	ldi	r25, 0x02	; 2
    54d4:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
    54d8:	0d c0       	rjmp	.+26     	; 0x54f4 <Check_Password+0x66>
		break;
	case 2:
		AddressCounter = 4 ;
    54da:	84 e0       	ldi	r24, 0x04	; 4
    54dc:	8f 87       	std	Y+15, r24	; 0x0f
		H_LCD_void_sendString("ID_2");
    54de:	82 e1       	ldi	r24, 0x12	; 18
    54e0:	92 e0       	ldi	r25, 0x02	; 2
    54e2:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
    54e6:	06 c0       	rjmp	.+12     	; 0x54f4 <Check_Password+0x66>
		break;
	default:
		H_LCD_void_sendString("ID Not found"); return INCORRECT_PASS ;break;
    54e8:	87 e1       	ldi	r24, 0x17	; 23
    54ea:	92 e0       	ldi	r25, 0x02	; 2
    54ec:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
    54f0:	1d 8a       	std	Y+21, r1	; 0x15
    54f2:	98 c0       	rjmp	.+304    	; 0x5624 <Check_Password+0x196>
	}

	for(Local_Counter = 0; Local_Counter < 4; Local_Counter++)
    54f4:	18 8a       	std	Y+16, r1	; 0x10
    54f6:	8f c0       	rjmp	.+286    	; 0x5616 <Check_Password+0x188>
    54f8:	80 e0       	ldi	r24, 0x00	; 0
    54fa:	90 e0       	ldi	r25, 0x00	; 0
    54fc:	a8 e4       	ldi	r26, 0x48	; 72
    54fe:	b3 e4       	ldi	r27, 0x43	; 67
    5500:	8b 87       	std	Y+11, r24	; 0x0b
    5502:	9c 87       	std	Y+12, r25	; 0x0c
    5504:	ad 87       	std	Y+13, r26	; 0x0d
    5506:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5508:	6b 85       	ldd	r22, Y+11	; 0x0b
    550a:	7c 85       	ldd	r23, Y+12	; 0x0c
    550c:	8d 85       	ldd	r24, Y+13	; 0x0d
    550e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5510:	20 e0       	ldi	r18, 0x00	; 0
    5512:	30 e0       	ldi	r19, 0x00	; 0
    5514:	4a e7       	ldi	r20, 0x7A	; 122
    5516:	55 e4       	ldi	r21, 0x45	; 69
    5518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    551c:	dc 01       	movw	r26, r24
    551e:	cb 01       	movw	r24, r22
    5520:	8f 83       	std	Y+7, r24	; 0x07
    5522:	98 87       	std	Y+8, r25	; 0x08
    5524:	a9 87       	std	Y+9, r26	; 0x09
    5526:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5528:	6f 81       	ldd	r22, Y+7	; 0x07
    552a:	78 85       	ldd	r23, Y+8	; 0x08
    552c:	89 85       	ldd	r24, Y+9	; 0x09
    552e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5530:	20 e0       	ldi	r18, 0x00	; 0
    5532:	30 e0       	ldi	r19, 0x00	; 0
    5534:	40 e8       	ldi	r20, 0x80	; 128
    5536:	5f e3       	ldi	r21, 0x3F	; 63
    5538:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    553c:	88 23       	and	r24, r24
    553e:	2c f4       	brge	.+10     	; 0x554a <Check_Password+0xbc>
		__ticks = 1;
    5540:	81 e0       	ldi	r24, 0x01	; 1
    5542:	90 e0       	ldi	r25, 0x00	; 0
    5544:	9e 83       	std	Y+6, r25	; 0x06
    5546:	8d 83       	std	Y+5, r24	; 0x05
    5548:	3f c0       	rjmp	.+126    	; 0x55c8 <Check_Password+0x13a>
	else if (__tmp > 65535)
    554a:	6f 81       	ldd	r22, Y+7	; 0x07
    554c:	78 85       	ldd	r23, Y+8	; 0x08
    554e:	89 85       	ldd	r24, Y+9	; 0x09
    5550:	9a 85       	ldd	r25, Y+10	; 0x0a
    5552:	20 e0       	ldi	r18, 0x00	; 0
    5554:	3f ef       	ldi	r19, 0xFF	; 255
    5556:	4f e7       	ldi	r20, 0x7F	; 127
    5558:	57 e4       	ldi	r21, 0x47	; 71
    555a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    555e:	18 16       	cp	r1, r24
    5560:	4c f5       	brge	.+82     	; 0x55b4 <Check_Password+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5562:	6b 85       	ldd	r22, Y+11	; 0x0b
    5564:	7c 85       	ldd	r23, Y+12	; 0x0c
    5566:	8d 85       	ldd	r24, Y+13	; 0x0d
    5568:	9e 85       	ldd	r25, Y+14	; 0x0e
    556a:	20 e0       	ldi	r18, 0x00	; 0
    556c:	30 e0       	ldi	r19, 0x00	; 0
    556e:	40 e2       	ldi	r20, 0x20	; 32
    5570:	51 e4       	ldi	r21, 0x41	; 65
    5572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5576:	dc 01       	movw	r26, r24
    5578:	cb 01       	movw	r24, r22
    557a:	bc 01       	movw	r22, r24
    557c:	cd 01       	movw	r24, r26
    557e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5582:	dc 01       	movw	r26, r24
    5584:	cb 01       	movw	r24, r22
    5586:	9e 83       	std	Y+6, r25	; 0x06
    5588:	8d 83       	std	Y+5, r24	; 0x05
    558a:	0f c0       	rjmp	.+30     	; 0x55aa <Check_Password+0x11c>
    558c:	80 e9       	ldi	r24, 0x90	; 144
    558e:	91 e0       	ldi	r25, 0x01	; 1
    5590:	9c 83       	std	Y+4, r25	; 0x04
    5592:	8b 83       	std	Y+3, r24	; 0x03
    5594:	8b 81       	ldd	r24, Y+3	; 0x03
    5596:	9c 81       	ldd	r25, Y+4	; 0x04
    5598:	01 97       	sbiw	r24, 0x01	; 1
    559a:	f1 f7       	brne	.-4      	; 0x5598 <Check_Password+0x10a>
    559c:	9c 83       	std	Y+4, r25	; 0x04
    559e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55a0:	8d 81       	ldd	r24, Y+5	; 0x05
    55a2:	9e 81       	ldd	r25, Y+6	; 0x06
    55a4:	01 97       	sbiw	r24, 0x01	; 1
    55a6:	9e 83       	std	Y+6, r25	; 0x06
    55a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55aa:	8d 81       	ldd	r24, Y+5	; 0x05
    55ac:	9e 81       	ldd	r25, Y+6	; 0x06
    55ae:	00 97       	sbiw	r24, 0x00	; 0
    55b0:	69 f7       	brne	.-38     	; 0x558c <Check_Password+0xfe>
    55b2:	14 c0       	rjmp	.+40     	; 0x55dc <Check_Password+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55b4:	6f 81       	ldd	r22, Y+7	; 0x07
    55b6:	78 85       	ldd	r23, Y+8	; 0x08
    55b8:	89 85       	ldd	r24, Y+9	; 0x09
    55ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    55bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55c0:	dc 01       	movw	r26, r24
    55c2:	cb 01       	movw	r24, r22
    55c4:	9e 83       	std	Y+6, r25	; 0x06
    55c6:	8d 83       	std	Y+5, r24	; 0x05
    55c8:	8d 81       	ldd	r24, Y+5	; 0x05
    55ca:	9e 81       	ldd	r25, Y+6	; 0x06
    55cc:	9a 83       	std	Y+2, r25	; 0x02
    55ce:	89 83       	std	Y+1, r24	; 0x01
    55d0:	89 81       	ldd	r24, Y+1	; 0x01
    55d2:	9a 81       	ldd	r25, Y+2	; 0x02
    55d4:	01 97       	sbiw	r24, 0x01	; 1
    55d6:	f1 f7       	brne	.-4      	; 0x55d4 <Check_Password+0x146>
    55d8:	9a 83       	std	Y+2, r25	; 0x02
    55da:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(200);
		H_EEPROM_Void_ReadByte(AddressCounter, &Temp_Holder);
    55dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    55de:	88 2f       	mov	r24, r24
    55e0:	90 e0       	ldi	r25, 0x00	; 0
    55e2:	9e 01       	movw	r18, r28
    55e4:	2f 5e       	subi	r18, 0xEF	; 239
    55e6:	3f 4f       	sbci	r19, 0xFF	; 255
    55e8:	b9 01       	movw	r22, r18
    55ea:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <H_EEPROM_Void_ReadByte>

		/*If there is incorrect number  */
		if(Temp_Holder != Copy_Password[Local_Counter])
    55ee:	88 89       	ldd	r24, Y+16	; 0x10
    55f0:	28 2f       	mov	r18, r24
    55f2:	30 e0       	ldi	r19, 0x00	; 0
    55f4:	8a 89       	ldd	r24, Y+18	; 0x12
    55f6:	9b 89       	ldd	r25, Y+19	; 0x13
    55f8:	fc 01       	movw	r30, r24
    55fa:	e2 0f       	add	r30, r18
    55fc:	f3 1f       	adc	r31, r19
    55fe:	90 81       	ld	r25, Z
    5600:	89 89       	ldd	r24, Y+17	; 0x11
    5602:	98 17       	cp	r25, r24
    5604:	11 f0       	breq	.+4      	; 0x560a <Check_Password+0x17c>
		{
			return INCORRECT_PASS ;
    5606:	1d 8a       	std	Y+21, r1	; 0x15
    5608:	0d c0       	rjmp	.+26     	; 0x5624 <Check_Password+0x196>
		}
		AddressCounter ++ ;
    560a:	8f 85       	ldd	r24, Y+15	; 0x0f
    560c:	8f 5f       	subi	r24, 0xFF	; 255
    560e:	8f 87       	std	Y+15, r24	; 0x0f
		break;
	default:
		H_LCD_void_sendString("ID Not found"); return INCORRECT_PASS ;break;
	}

	for(Local_Counter = 0; Local_Counter < 4; Local_Counter++)
    5610:	88 89       	ldd	r24, Y+16	; 0x10
    5612:	8f 5f       	subi	r24, 0xFF	; 255
    5614:	88 8b       	std	Y+16, r24	; 0x10
    5616:	88 89       	ldd	r24, Y+16	; 0x10
    5618:	84 30       	cpi	r24, 0x04	; 4
    561a:	08 f4       	brcc	.+2      	; 0x561e <Check_Password+0x190>
    561c:	6d cf       	rjmp	.-294    	; 0x54f8 <Check_Password+0x6a>
		{
			return INCORRECT_PASS ;
		}
		AddressCounter ++ ;
	}
	AddressCounter = 0 ;
    561e:	1f 86       	std	Y+15, r1	; 0x0f
	return CORRECT_PASS ;
    5620:	31 e0       	ldi	r19, 0x01	; 1
    5622:	3d 8b       	std	Y+21, r19	; 0x15
    5624:	8d 89       	ldd	r24, Y+21	; 0x15
}
    5626:	67 96       	adiw	r28, 0x17	; 23
    5628:	0f b6       	in	r0, 0x3f	; 63
    562a:	f8 94       	cli
    562c:	de bf       	out	0x3e, r29	; 62
    562e:	0f be       	out	0x3f, r0	; 63
    5630:	cd bf       	out	0x3d, r28	; 61
    5632:	cf 91       	pop	r28
    5634:	df 91       	pop	r29
    5636:	08 95       	ret

00005638 <KeyPad_EnterPassWord>:

void KeyPad_EnterPassWord(u8 *Copy_PasswordArr)
{
    5638:	df 93       	push	r29
    563a:	cf 93       	push	r28
    563c:	00 d0       	rcall	.+0      	; 0x563e <KeyPad_EnterPassWord+0x6>
    563e:	00 d0       	rcall	.+0      	; 0x5640 <KeyPad_EnterPassWord+0x8>
    5640:	cd b7       	in	r28, 0x3d	; 61
    5642:	de b7       	in	r29, 0x3e	; 62
    5644:	9c 83       	std	Y+4, r25	; 0x04
    5646:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_Counter = 0 ;
    5648:	1a 82       	std	Y+2, r1	; 0x02
	u8 KPD_Value = 0;
    564a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Enter Password
	 */
	do{
		KPD_Value = H_KEYPAD_u8_getPressedKey() ;
    564c:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <H_KEYPAD_u8_getPressedKey>
    5650:	89 83       	std	Y+1, r24	; 0x01
		if( KPD_Value != '\0')
    5652:	89 81       	ldd	r24, Y+1	; 0x01
    5654:	88 23       	and	r24, r24
    5656:	c1 f0       	breq	.+48     	; 0x5688 <KeyPad_EnterPassWord+0x50>
		{
			Copy_PasswordArr[Local_Counter] = KPD_Value;
    5658:	8a 81       	ldd	r24, Y+2	; 0x02
    565a:	28 2f       	mov	r18, r24
    565c:	30 e0       	ldi	r19, 0x00	; 0
    565e:	8b 81       	ldd	r24, Y+3	; 0x03
    5660:	9c 81       	ldd	r25, Y+4	; 0x04
    5662:	fc 01       	movw	r30, r24
    5664:	e2 0f       	add	r30, r18
    5666:	f3 1f       	adc	r31, r19
    5668:	89 81       	ldd	r24, Y+1	; 0x01
    566a:	80 83       	st	Z, r24
			H_LCD_void_sendData(Copy_PasswordArr[Local_Counter]);
    566c:	8a 81       	ldd	r24, Y+2	; 0x02
    566e:	28 2f       	mov	r18, r24
    5670:	30 e0       	ldi	r19, 0x00	; 0
    5672:	8b 81       	ldd	r24, Y+3	; 0x03
    5674:	9c 81       	ldd	r25, Y+4	; 0x04
    5676:	fc 01       	movw	r30, r24
    5678:	e2 0f       	add	r30, r18
    567a:	f3 1f       	adc	r31, r19
    567c:	80 81       	ld	r24, Z
    567e:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <H_LCD_void_sendData>
			Local_Counter ++ ;
    5682:	8a 81       	ldd	r24, Y+2	; 0x02
    5684:	8f 5f       	subi	r24, 0xFF	; 255
    5686:	8a 83       	std	Y+2, r24	; 0x02
		}

	}while(Local_Counter != 4);
    5688:	8a 81       	ldd	r24, Y+2	; 0x02
    568a:	84 30       	cpi	r24, 0x04	; 4
    568c:	f9 f6       	brne	.-66     	; 0x564c <KeyPad_EnterPassWord+0x14>
}
    568e:	0f 90       	pop	r0
    5690:	0f 90       	pop	r0
    5692:	0f 90       	pop	r0
    5694:	0f 90       	pop	r0
    5696:	cf 91       	pop	r28
    5698:	df 91       	pop	r29
    569a:	08 95       	ret

0000569c <Save_NewPassword>:

void Save_NewPassword(u8 *Copy_NewPassword, u8 Copy_ID)
{
    569c:	df 93       	push	r29
    569e:	cf 93       	push	r28
    56a0:	cd b7       	in	r28, 0x3d	; 61
    56a2:	de b7       	in	r29, 0x3e	; 62
    56a4:	e1 97       	sbiw	r28, 0x31	; 49
    56a6:	0f b6       	in	r0, 0x3f	; 63
    56a8:	f8 94       	cli
    56aa:	de bf       	out	0x3e, r29	; 62
    56ac:	0f be       	out	0x3f, r0	; 63
    56ae:	cd bf       	out	0x3d, r28	; 61
    56b0:	9e a7       	std	Y+46, r25	; 0x2e
    56b2:	8d a7       	std	Y+45, r24	; 0x2d
    56b4:	6f a7       	std	Y+47, r22	; 0x2f
	u8 AddressCounter = 0 ;
    56b6:	1c a6       	std	Y+44, r1	; 0x2c
	u8 LocalCounter = 0;
    56b8:	1b a6       	std	Y+43, r1	; 0x2b

		/*Check ID number */
	switch(Copy_ID)
    56ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    56bc:	28 2f       	mov	r18, r24
    56be:	30 e0       	ldi	r19, 0x00	; 0
    56c0:	39 ab       	std	Y+49, r19	; 0x31
    56c2:	28 ab       	std	Y+48, r18	; 0x30
    56c4:	88 a9       	ldd	r24, Y+48	; 0x30
    56c6:	99 a9       	ldd	r25, Y+49	; 0x31
    56c8:	81 30       	cpi	r24, 0x01	; 1
    56ca:	91 05       	cpc	r25, r1
    56cc:	31 f0       	breq	.+12     	; 0x56da <Save_NewPassword+0x3e>
    56ce:	28 a9       	ldd	r18, Y+48	; 0x30
    56d0:	39 a9       	ldd	r19, Y+49	; 0x31
    56d2:	22 30       	cpi	r18, 0x02	; 2
    56d4:	31 05       	cpc	r19, r1
    56d6:	39 f0       	breq	.+14     	; 0x56e6 <Save_NewPassword+0x4a>
    56d8:	0c c0       	rjmp	.+24     	; 0x56f2 <Save_NewPassword+0x56>
	{
		case 1:
			AddressCounter = 0 ;
    56da:	1c a6       	std	Y+44, r1	; 0x2c
			H_LCD_void_sendString("ID_1 ");
    56dc:	84 e2       	ldi	r24, 0x24	; 36
    56de:	92 e0       	ldi	r25, 0x02	; 2
    56e0:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
    56e4:	06 c0       	rjmp	.+12     	; 0x56f2 <Save_NewPassword+0x56>
			break ;
		case 2:
			AddressCounter = 4 ;
    56e6:	84 e0       	ldi	r24, 0x04	; 4
    56e8:	8c a7       	std	Y+44, r24	; 0x2c
			H_LCD_void_sendString("ID_2 ");
    56ea:	8a e2       	ldi	r24, 0x2A	; 42
    56ec:	92 e0       	ldi	r25, 0x02	; 2
    56ee:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
		break ;
	}

		if(Copy_ID <= 2)
    56f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    56f4:	83 30       	cpi	r24, 0x03	; 3
    56f6:	08 f0       	brcs	.+2      	; 0x56fa <Save_NewPassword+0x5e>
    56f8:	11 c1       	rjmp	.+546    	; 0x591c <Save_NewPassword+0x280>
		{
		/*Enter the array to the eeprom */
		H_LCD_void_sendString("Saving data");
    56fa:	80 e3       	ldi	r24, 0x30	; 48
    56fc:	92 e0       	ldi	r25, 0x02	; 2
    56fe:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
		for(LocalCounter = 0 ; LocalCounter < 4 ; LocalCounter ++)
    5702:	1b a6       	std	Y+43, r1	; 0x2b
    5704:	8c c0       	rjmp	.+280    	; 0x581e <Save_NewPassword+0x182>
    5706:	80 e0       	ldi	r24, 0x00	; 0
    5708:	90 e0       	ldi	r25, 0x00	; 0
    570a:	a8 e4       	ldi	r26, 0x48	; 72
    570c:	b3 e4       	ldi	r27, 0x43	; 67
    570e:	8f a3       	std	Y+39, r24	; 0x27
    5710:	98 a7       	std	Y+40, r25	; 0x28
    5712:	a9 a7       	std	Y+41, r26	; 0x29
    5714:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5716:	6f a1       	ldd	r22, Y+39	; 0x27
    5718:	78 a5       	ldd	r23, Y+40	; 0x28
    571a:	89 a5       	ldd	r24, Y+41	; 0x29
    571c:	9a a5       	ldd	r25, Y+42	; 0x2a
    571e:	20 e0       	ldi	r18, 0x00	; 0
    5720:	30 e0       	ldi	r19, 0x00	; 0
    5722:	4a e7       	ldi	r20, 0x7A	; 122
    5724:	55 e4       	ldi	r21, 0x45	; 69
    5726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    572a:	dc 01       	movw	r26, r24
    572c:	cb 01       	movw	r24, r22
    572e:	8b a3       	std	Y+35, r24	; 0x23
    5730:	9c a3       	std	Y+36, r25	; 0x24
    5732:	ad a3       	std	Y+37, r26	; 0x25
    5734:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5736:	6b a1       	ldd	r22, Y+35	; 0x23
    5738:	7c a1       	ldd	r23, Y+36	; 0x24
    573a:	8d a1       	ldd	r24, Y+37	; 0x25
    573c:	9e a1       	ldd	r25, Y+38	; 0x26
    573e:	20 e0       	ldi	r18, 0x00	; 0
    5740:	30 e0       	ldi	r19, 0x00	; 0
    5742:	40 e8       	ldi	r20, 0x80	; 128
    5744:	5f e3       	ldi	r21, 0x3F	; 63
    5746:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    574a:	88 23       	and	r24, r24
    574c:	2c f4       	brge	.+10     	; 0x5758 <Save_NewPassword+0xbc>
		__ticks = 1;
    574e:	81 e0       	ldi	r24, 0x01	; 1
    5750:	90 e0       	ldi	r25, 0x00	; 0
    5752:	9a a3       	std	Y+34, r25	; 0x22
    5754:	89 a3       	std	Y+33, r24	; 0x21
    5756:	3f c0       	rjmp	.+126    	; 0x57d6 <Save_NewPassword+0x13a>
	else if (__tmp > 65535)
    5758:	6b a1       	ldd	r22, Y+35	; 0x23
    575a:	7c a1       	ldd	r23, Y+36	; 0x24
    575c:	8d a1       	ldd	r24, Y+37	; 0x25
    575e:	9e a1       	ldd	r25, Y+38	; 0x26
    5760:	20 e0       	ldi	r18, 0x00	; 0
    5762:	3f ef       	ldi	r19, 0xFF	; 255
    5764:	4f e7       	ldi	r20, 0x7F	; 127
    5766:	57 e4       	ldi	r21, 0x47	; 71
    5768:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    576c:	18 16       	cp	r1, r24
    576e:	4c f5       	brge	.+82     	; 0x57c2 <Save_NewPassword+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5770:	6f a1       	ldd	r22, Y+39	; 0x27
    5772:	78 a5       	ldd	r23, Y+40	; 0x28
    5774:	89 a5       	ldd	r24, Y+41	; 0x29
    5776:	9a a5       	ldd	r25, Y+42	; 0x2a
    5778:	20 e0       	ldi	r18, 0x00	; 0
    577a:	30 e0       	ldi	r19, 0x00	; 0
    577c:	40 e2       	ldi	r20, 0x20	; 32
    577e:	51 e4       	ldi	r21, 0x41	; 65
    5780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5784:	dc 01       	movw	r26, r24
    5786:	cb 01       	movw	r24, r22
    5788:	bc 01       	movw	r22, r24
    578a:	cd 01       	movw	r24, r26
    578c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5790:	dc 01       	movw	r26, r24
    5792:	cb 01       	movw	r24, r22
    5794:	9a a3       	std	Y+34, r25	; 0x22
    5796:	89 a3       	std	Y+33, r24	; 0x21
    5798:	0f c0       	rjmp	.+30     	; 0x57b8 <Save_NewPassword+0x11c>
    579a:	80 e9       	ldi	r24, 0x90	; 144
    579c:	91 e0       	ldi	r25, 0x01	; 1
    579e:	98 a3       	std	Y+32, r25	; 0x20
    57a0:	8f 8f       	std	Y+31, r24	; 0x1f
    57a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    57a4:	98 a1       	ldd	r25, Y+32	; 0x20
    57a6:	01 97       	sbiw	r24, 0x01	; 1
    57a8:	f1 f7       	brne	.-4      	; 0x57a6 <Save_NewPassword+0x10a>
    57aa:	98 a3       	std	Y+32, r25	; 0x20
    57ac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57ae:	89 a1       	ldd	r24, Y+33	; 0x21
    57b0:	9a a1       	ldd	r25, Y+34	; 0x22
    57b2:	01 97       	sbiw	r24, 0x01	; 1
    57b4:	9a a3       	std	Y+34, r25	; 0x22
    57b6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57b8:	89 a1       	ldd	r24, Y+33	; 0x21
    57ba:	9a a1       	ldd	r25, Y+34	; 0x22
    57bc:	00 97       	sbiw	r24, 0x00	; 0
    57be:	69 f7       	brne	.-38     	; 0x579a <Save_NewPassword+0xfe>
    57c0:	14 c0       	rjmp	.+40     	; 0x57ea <Save_NewPassword+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57c2:	6b a1       	ldd	r22, Y+35	; 0x23
    57c4:	7c a1       	ldd	r23, Y+36	; 0x24
    57c6:	8d a1       	ldd	r24, Y+37	; 0x25
    57c8:	9e a1       	ldd	r25, Y+38	; 0x26
    57ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57ce:	dc 01       	movw	r26, r24
    57d0:	cb 01       	movw	r24, r22
    57d2:	9a a3       	std	Y+34, r25	; 0x22
    57d4:	89 a3       	std	Y+33, r24	; 0x21
    57d6:	89 a1       	ldd	r24, Y+33	; 0x21
    57d8:	9a a1       	ldd	r25, Y+34	; 0x22
    57da:	9e 8f       	std	Y+30, r25	; 0x1e
    57dc:	8d 8f       	std	Y+29, r24	; 0x1d
    57de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    57e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    57e2:	01 97       	sbiw	r24, 0x01	; 1
    57e4:	f1 f7       	brne	.-4      	; 0x57e2 <Save_NewPassword+0x146>
    57e6:	9e 8f       	std	Y+30, r25	; 0x1e
    57e8:	8d 8f       	std	Y+29, r24	; 0x1d
		{
		_delay_ms(200);
		H_EEPROM_Void_WriteByte(AddressCounter, Copy_NewPassword[LocalCounter]);
    57ea:	8c a5       	ldd	r24, Y+44	; 0x2c
    57ec:	48 2f       	mov	r20, r24
    57ee:	50 e0       	ldi	r21, 0x00	; 0
    57f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    57f2:	28 2f       	mov	r18, r24
    57f4:	30 e0       	ldi	r19, 0x00	; 0
    57f6:	8d a5       	ldd	r24, Y+45	; 0x2d
    57f8:	9e a5       	ldd	r25, Y+46	; 0x2e
    57fa:	fc 01       	movw	r30, r24
    57fc:	e2 0f       	add	r30, r18
    57fe:	f3 1f       	adc	r31, r19
    5800:	20 81       	ld	r18, Z
    5802:	ca 01       	movw	r24, r20
    5804:	62 2f       	mov	r22, r18
    5806:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <H_EEPROM_Void_WriteByte>
		H_LCD_void_sendString(".");
    580a:	8a e2       	ldi	r24, 0x2A	; 42
    580c:	91 e0       	ldi	r25, 0x01	; 1
    580e:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
		AddressCounter ++ ;
    5812:	8c a5       	ldd	r24, Y+44	; 0x2c
    5814:	8f 5f       	subi	r24, 0xFF	; 255
    5816:	8c a7       	std	Y+44, r24	; 0x2c

		if(Copy_ID <= 2)
		{
		/*Enter the array to the eeprom */
		H_LCD_void_sendString("Saving data");
		for(LocalCounter = 0 ; LocalCounter < 4 ; LocalCounter ++)
    5818:	8b a5       	ldd	r24, Y+43	; 0x2b
    581a:	8f 5f       	subi	r24, 0xFF	; 255
    581c:	8b a7       	std	Y+43, r24	; 0x2b
    581e:	8b a5       	ldd	r24, Y+43	; 0x2b
    5820:	84 30       	cpi	r24, 0x04	; 4
    5822:	08 f4       	brcc	.+2      	; 0x5826 <Save_NewPassword+0x18a>
    5824:	70 cf       	rjmp	.-288    	; 0x5706 <Save_NewPassword+0x6a>
		H_LCD_void_sendString(".");
		AddressCounter ++ ;
		}

		/*Increment the User ID */
		Copy_ID += 1 ;
    5826:	8f a5       	ldd	r24, Y+47	; 0x2f
    5828:	8f 5f       	subi	r24, 0xFF	; 255
    582a:	8f a7       	std	Y+47, r24	; 0x2f
    582c:	80 e0       	ldi	r24, 0x00	; 0
    582e:	90 e0       	ldi	r25, 0x00	; 0
    5830:	a8 e4       	ldi	r26, 0x48	; 72
    5832:	b3 e4       	ldi	r27, 0x43	; 67
    5834:	89 8f       	std	Y+25, r24	; 0x19
    5836:	9a 8f       	std	Y+26, r25	; 0x1a
    5838:	ab 8f       	std	Y+27, r26	; 0x1b
    583a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    583c:	69 8d       	ldd	r22, Y+25	; 0x19
    583e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5840:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5842:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5844:	20 e0       	ldi	r18, 0x00	; 0
    5846:	30 e0       	ldi	r19, 0x00	; 0
    5848:	4a e7       	ldi	r20, 0x7A	; 122
    584a:	55 e4       	ldi	r21, 0x45	; 69
    584c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5850:	dc 01       	movw	r26, r24
    5852:	cb 01       	movw	r24, r22
    5854:	8d 8b       	std	Y+21, r24	; 0x15
    5856:	9e 8b       	std	Y+22, r25	; 0x16
    5858:	af 8b       	std	Y+23, r26	; 0x17
    585a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    585c:	6d 89       	ldd	r22, Y+21	; 0x15
    585e:	7e 89       	ldd	r23, Y+22	; 0x16
    5860:	8f 89       	ldd	r24, Y+23	; 0x17
    5862:	98 8d       	ldd	r25, Y+24	; 0x18
    5864:	20 e0       	ldi	r18, 0x00	; 0
    5866:	30 e0       	ldi	r19, 0x00	; 0
    5868:	40 e8       	ldi	r20, 0x80	; 128
    586a:	5f e3       	ldi	r21, 0x3F	; 63
    586c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5870:	88 23       	and	r24, r24
    5872:	2c f4       	brge	.+10     	; 0x587e <Save_NewPassword+0x1e2>
		__ticks = 1;
    5874:	81 e0       	ldi	r24, 0x01	; 1
    5876:	90 e0       	ldi	r25, 0x00	; 0
    5878:	9c 8b       	std	Y+20, r25	; 0x14
    587a:	8b 8b       	std	Y+19, r24	; 0x13
    587c:	3f c0       	rjmp	.+126    	; 0x58fc <Save_NewPassword+0x260>
	else if (__tmp > 65535)
    587e:	6d 89       	ldd	r22, Y+21	; 0x15
    5880:	7e 89       	ldd	r23, Y+22	; 0x16
    5882:	8f 89       	ldd	r24, Y+23	; 0x17
    5884:	98 8d       	ldd	r25, Y+24	; 0x18
    5886:	20 e0       	ldi	r18, 0x00	; 0
    5888:	3f ef       	ldi	r19, 0xFF	; 255
    588a:	4f e7       	ldi	r20, 0x7F	; 127
    588c:	57 e4       	ldi	r21, 0x47	; 71
    588e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5892:	18 16       	cp	r1, r24
    5894:	4c f5       	brge	.+82     	; 0x58e8 <Save_NewPassword+0x24c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5896:	69 8d       	ldd	r22, Y+25	; 0x19
    5898:	7a 8d       	ldd	r23, Y+26	; 0x1a
    589a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    589c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    589e:	20 e0       	ldi	r18, 0x00	; 0
    58a0:	30 e0       	ldi	r19, 0x00	; 0
    58a2:	40 e2       	ldi	r20, 0x20	; 32
    58a4:	51 e4       	ldi	r21, 0x41	; 65
    58a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58aa:	dc 01       	movw	r26, r24
    58ac:	cb 01       	movw	r24, r22
    58ae:	bc 01       	movw	r22, r24
    58b0:	cd 01       	movw	r24, r26
    58b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58b6:	dc 01       	movw	r26, r24
    58b8:	cb 01       	movw	r24, r22
    58ba:	9c 8b       	std	Y+20, r25	; 0x14
    58bc:	8b 8b       	std	Y+19, r24	; 0x13
    58be:	0f c0       	rjmp	.+30     	; 0x58de <Save_NewPassword+0x242>
    58c0:	80 e9       	ldi	r24, 0x90	; 144
    58c2:	91 e0       	ldi	r25, 0x01	; 1
    58c4:	9a 8b       	std	Y+18, r25	; 0x12
    58c6:	89 8b       	std	Y+17, r24	; 0x11
    58c8:	89 89       	ldd	r24, Y+17	; 0x11
    58ca:	9a 89       	ldd	r25, Y+18	; 0x12
    58cc:	01 97       	sbiw	r24, 0x01	; 1
    58ce:	f1 f7       	brne	.-4      	; 0x58cc <Save_NewPassword+0x230>
    58d0:	9a 8b       	std	Y+18, r25	; 0x12
    58d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58d4:	8b 89       	ldd	r24, Y+19	; 0x13
    58d6:	9c 89       	ldd	r25, Y+20	; 0x14
    58d8:	01 97       	sbiw	r24, 0x01	; 1
    58da:	9c 8b       	std	Y+20, r25	; 0x14
    58dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58de:	8b 89       	ldd	r24, Y+19	; 0x13
    58e0:	9c 89       	ldd	r25, Y+20	; 0x14
    58e2:	00 97       	sbiw	r24, 0x00	; 0
    58e4:	69 f7       	brne	.-38     	; 0x58c0 <Save_NewPassword+0x224>
    58e6:	14 c0       	rjmp	.+40     	; 0x5910 <Save_NewPassword+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58e8:	6d 89       	ldd	r22, Y+21	; 0x15
    58ea:	7e 89       	ldd	r23, Y+22	; 0x16
    58ec:	8f 89       	ldd	r24, Y+23	; 0x17
    58ee:	98 8d       	ldd	r25, Y+24	; 0x18
    58f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58f4:	dc 01       	movw	r26, r24
    58f6:	cb 01       	movw	r24, r22
    58f8:	9c 8b       	std	Y+20, r25	; 0x14
    58fa:	8b 8b       	std	Y+19, r24	; 0x13
    58fc:	8b 89       	ldd	r24, Y+19	; 0x13
    58fe:	9c 89       	ldd	r25, Y+20	; 0x14
    5900:	98 8b       	std	Y+16, r25	; 0x10
    5902:	8f 87       	std	Y+15, r24	; 0x0f
    5904:	8f 85       	ldd	r24, Y+15	; 0x0f
    5906:	98 89       	ldd	r25, Y+16	; 0x10
    5908:	01 97       	sbiw	r24, 0x01	; 1
    590a:	f1 f7       	brne	.-4      	; 0x5908 <Save_NewPassword+0x26c>
    590c:	98 8b       	std	Y+16, r25	; 0x10
    590e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		H_EEPROM_Void_WriteByte(EEPROM_USER_ID,Copy_ID);
    5910:	8f ef       	ldi	r24, 0xFF	; 255
    5912:	90 e0       	ldi	r25, 0x00	; 0
    5914:	6f a5       	ldd	r22, Y+47	; 0x2f
    5916:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <H_EEPROM_Void_WriteByte>
    591a:	78 c0       	rjmp	.+240    	; 0x5a0c <Save_NewPassword+0x370>
		}
		else /* Exceeded the max number of users */
		{
			H_LCD_void_sendString("Exceeded Max Number");
    591c:	8c e3       	ldi	r24, 0x3C	; 60
    591e:	92 e0       	ldi	r25, 0x02	; 2
    5920:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
    5924:	80 e0       	ldi	r24, 0x00	; 0
    5926:	90 e0       	ldi	r25, 0x00	; 0
    5928:	aa ef       	ldi	r26, 0xFA	; 250
    592a:	b4 e4       	ldi	r27, 0x44	; 68
    592c:	8b 87       	std	Y+11, r24	; 0x0b
    592e:	9c 87       	std	Y+12, r25	; 0x0c
    5930:	ad 87       	std	Y+13, r26	; 0x0d
    5932:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5934:	6b 85       	ldd	r22, Y+11	; 0x0b
    5936:	7c 85       	ldd	r23, Y+12	; 0x0c
    5938:	8d 85       	ldd	r24, Y+13	; 0x0d
    593a:	9e 85       	ldd	r25, Y+14	; 0x0e
    593c:	20 e0       	ldi	r18, 0x00	; 0
    593e:	30 e0       	ldi	r19, 0x00	; 0
    5940:	4a e7       	ldi	r20, 0x7A	; 122
    5942:	55 e4       	ldi	r21, 0x45	; 69
    5944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5948:	dc 01       	movw	r26, r24
    594a:	cb 01       	movw	r24, r22
    594c:	8f 83       	std	Y+7, r24	; 0x07
    594e:	98 87       	std	Y+8, r25	; 0x08
    5950:	a9 87       	std	Y+9, r26	; 0x09
    5952:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5954:	6f 81       	ldd	r22, Y+7	; 0x07
    5956:	78 85       	ldd	r23, Y+8	; 0x08
    5958:	89 85       	ldd	r24, Y+9	; 0x09
    595a:	9a 85       	ldd	r25, Y+10	; 0x0a
    595c:	20 e0       	ldi	r18, 0x00	; 0
    595e:	30 e0       	ldi	r19, 0x00	; 0
    5960:	40 e8       	ldi	r20, 0x80	; 128
    5962:	5f e3       	ldi	r21, 0x3F	; 63
    5964:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5968:	88 23       	and	r24, r24
    596a:	2c f4       	brge	.+10     	; 0x5976 <Save_NewPassword+0x2da>
		__ticks = 1;
    596c:	81 e0       	ldi	r24, 0x01	; 1
    596e:	90 e0       	ldi	r25, 0x00	; 0
    5970:	9e 83       	std	Y+6, r25	; 0x06
    5972:	8d 83       	std	Y+5, r24	; 0x05
    5974:	3f c0       	rjmp	.+126    	; 0x59f4 <Save_NewPassword+0x358>
	else if (__tmp > 65535)
    5976:	6f 81       	ldd	r22, Y+7	; 0x07
    5978:	78 85       	ldd	r23, Y+8	; 0x08
    597a:	89 85       	ldd	r24, Y+9	; 0x09
    597c:	9a 85       	ldd	r25, Y+10	; 0x0a
    597e:	20 e0       	ldi	r18, 0x00	; 0
    5980:	3f ef       	ldi	r19, 0xFF	; 255
    5982:	4f e7       	ldi	r20, 0x7F	; 127
    5984:	57 e4       	ldi	r21, 0x47	; 71
    5986:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    598a:	18 16       	cp	r1, r24
    598c:	4c f5       	brge	.+82     	; 0x59e0 <Save_NewPassword+0x344>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    598e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5990:	7c 85       	ldd	r23, Y+12	; 0x0c
    5992:	8d 85       	ldd	r24, Y+13	; 0x0d
    5994:	9e 85       	ldd	r25, Y+14	; 0x0e
    5996:	20 e0       	ldi	r18, 0x00	; 0
    5998:	30 e0       	ldi	r19, 0x00	; 0
    599a:	40 e2       	ldi	r20, 0x20	; 32
    599c:	51 e4       	ldi	r21, 0x41	; 65
    599e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59a2:	dc 01       	movw	r26, r24
    59a4:	cb 01       	movw	r24, r22
    59a6:	bc 01       	movw	r22, r24
    59a8:	cd 01       	movw	r24, r26
    59aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59ae:	dc 01       	movw	r26, r24
    59b0:	cb 01       	movw	r24, r22
    59b2:	9e 83       	std	Y+6, r25	; 0x06
    59b4:	8d 83       	std	Y+5, r24	; 0x05
    59b6:	0f c0       	rjmp	.+30     	; 0x59d6 <Save_NewPassword+0x33a>
    59b8:	80 e9       	ldi	r24, 0x90	; 144
    59ba:	91 e0       	ldi	r25, 0x01	; 1
    59bc:	9c 83       	std	Y+4, r25	; 0x04
    59be:	8b 83       	std	Y+3, r24	; 0x03
    59c0:	8b 81       	ldd	r24, Y+3	; 0x03
    59c2:	9c 81       	ldd	r25, Y+4	; 0x04
    59c4:	01 97       	sbiw	r24, 0x01	; 1
    59c6:	f1 f7       	brne	.-4      	; 0x59c4 <Save_NewPassword+0x328>
    59c8:	9c 83       	std	Y+4, r25	; 0x04
    59ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59cc:	8d 81       	ldd	r24, Y+5	; 0x05
    59ce:	9e 81       	ldd	r25, Y+6	; 0x06
    59d0:	01 97       	sbiw	r24, 0x01	; 1
    59d2:	9e 83       	std	Y+6, r25	; 0x06
    59d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59d6:	8d 81       	ldd	r24, Y+5	; 0x05
    59d8:	9e 81       	ldd	r25, Y+6	; 0x06
    59da:	00 97       	sbiw	r24, 0x00	; 0
    59dc:	69 f7       	brne	.-38     	; 0x59b8 <Save_NewPassword+0x31c>
    59de:	14 c0       	rjmp	.+40     	; 0x5a08 <Save_NewPassword+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59e0:	6f 81       	ldd	r22, Y+7	; 0x07
    59e2:	78 85       	ldd	r23, Y+8	; 0x08
    59e4:	89 85       	ldd	r24, Y+9	; 0x09
    59e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    59e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59ec:	dc 01       	movw	r26, r24
    59ee:	cb 01       	movw	r24, r22
    59f0:	9e 83       	std	Y+6, r25	; 0x06
    59f2:	8d 83       	std	Y+5, r24	; 0x05
    59f4:	8d 81       	ldd	r24, Y+5	; 0x05
    59f6:	9e 81       	ldd	r25, Y+6	; 0x06
    59f8:	9a 83       	std	Y+2, r25	; 0x02
    59fa:	89 83       	std	Y+1, r24	; 0x01
    59fc:	89 81       	ldd	r24, Y+1	; 0x01
    59fe:	9a 81       	ldd	r25, Y+2	; 0x02
    5a00:	01 97       	sbiw	r24, 0x01	; 1
    5a02:	f1 f7       	brne	.-4      	; 0x5a00 <Save_NewPassword+0x364>
    5a04:	9a 83       	std	Y+2, r25	; 0x02
    5a06:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2000);
			H_LCD_void_ClearDisplay();
    5a08:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <H_LCD_void_ClearDisplay>
		}

}
    5a0c:	e1 96       	adiw	r28, 0x31	; 49
    5a0e:	0f b6       	in	r0, 0x3f	; 63
    5a10:	f8 94       	cli
    5a12:	de bf       	out	0x3e, r29	; 62
    5a14:	0f be       	out	0x3f, r0	; 63
    5a16:	cd bf       	out	0x3d, r28	; 61
    5a18:	cf 91       	pop	r28
    5a1a:	df 91       	pop	r29
    5a1c:	08 95       	ret

00005a1e <Rest_Password>:
//
//
//}

void Rest_Password()
{
    5a1e:	df 93       	push	r29
    5a20:	cf 93       	push	r28
    5a22:	cd b7       	in	r28, 0x3d	; 61
    5a24:	de b7       	in	r29, 0x3e	; 62
    5a26:	af 97       	sbiw	r28, 0x2f	; 47
    5a28:	0f b6       	in	r0, 0x3f	; 63
    5a2a:	f8 94       	cli
    5a2c:	de bf       	out	0x3e, r29	; 62
    5a2e:	0f be       	out	0x3f, r0	; 63
    5a30:	cd bf       	out	0x3d, r28	; 61
	u8 RestPassword[4] = {'1','2','3','4'};
    5a32:	81 e3       	ldi	r24, 0x31	; 49
    5a34:	8c a7       	std	Y+44, r24	; 0x2c
    5a36:	82 e3       	ldi	r24, 0x32	; 50
    5a38:	8d a7       	std	Y+45, r24	; 0x2d
    5a3a:	83 e3       	ldi	r24, 0x33	; 51
    5a3c:	8e a7       	std	Y+46, r24	; 0x2e
    5a3e:	84 e3       	ldi	r24, 0x34	; 52
    5a40:	8f a7       	std	Y+47, r24	; 0x2f
	u8 ID = 1 ;
    5a42:	81 e0       	ldi	r24, 0x01	; 1
    5a44:	8b a7       	std	Y+43, r24	; 0x2b
	H_LCD_void_ClearDisplay();
    5a46:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <H_LCD_void_ClearDisplay>
	Save_NewPassword(RestPassword, ID);
    5a4a:	ce 01       	movw	r24, r28
    5a4c:	8c 96       	adiw	r24, 0x2c	; 44
    5a4e:	6b a5       	ldd	r22, Y+43	; 0x2b
    5a50:	0e 94 4e 2b 	call	0x569c	; 0x569c <Save_NewPassword>
    5a54:	80 e0       	ldi	r24, 0x00	; 0
    5a56:	90 e0       	ldi	r25, 0x00	; 0
    5a58:	a8 e4       	ldi	r26, 0x48	; 72
    5a5a:	b3 e4       	ldi	r27, 0x43	; 67
    5a5c:	8f a3       	std	Y+39, r24	; 0x27
    5a5e:	98 a7       	std	Y+40, r25	; 0x28
    5a60:	a9 a7       	std	Y+41, r26	; 0x29
    5a62:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a64:	6f a1       	ldd	r22, Y+39	; 0x27
    5a66:	78 a5       	ldd	r23, Y+40	; 0x28
    5a68:	89 a5       	ldd	r24, Y+41	; 0x29
    5a6a:	9a a5       	ldd	r25, Y+42	; 0x2a
    5a6c:	20 e0       	ldi	r18, 0x00	; 0
    5a6e:	30 e0       	ldi	r19, 0x00	; 0
    5a70:	4a e7       	ldi	r20, 0x7A	; 122
    5a72:	55 e4       	ldi	r21, 0x45	; 69
    5a74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a78:	dc 01       	movw	r26, r24
    5a7a:	cb 01       	movw	r24, r22
    5a7c:	8b a3       	std	Y+35, r24	; 0x23
    5a7e:	9c a3       	std	Y+36, r25	; 0x24
    5a80:	ad a3       	std	Y+37, r26	; 0x25
    5a82:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5a84:	6b a1       	ldd	r22, Y+35	; 0x23
    5a86:	7c a1       	ldd	r23, Y+36	; 0x24
    5a88:	8d a1       	ldd	r24, Y+37	; 0x25
    5a8a:	9e a1       	ldd	r25, Y+38	; 0x26
    5a8c:	20 e0       	ldi	r18, 0x00	; 0
    5a8e:	30 e0       	ldi	r19, 0x00	; 0
    5a90:	40 e8       	ldi	r20, 0x80	; 128
    5a92:	5f e3       	ldi	r21, 0x3F	; 63
    5a94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5a98:	88 23       	and	r24, r24
    5a9a:	2c f4       	brge	.+10     	; 0x5aa6 <Rest_Password+0x88>
		__ticks = 1;
    5a9c:	81 e0       	ldi	r24, 0x01	; 1
    5a9e:	90 e0       	ldi	r25, 0x00	; 0
    5aa0:	9a a3       	std	Y+34, r25	; 0x22
    5aa2:	89 a3       	std	Y+33, r24	; 0x21
    5aa4:	3f c0       	rjmp	.+126    	; 0x5b24 <Rest_Password+0x106>
	else if (__tmp > 65535)
    5aa6:	6b a1       	ldd	r22, Y+35	; 0x23
    5aa8:	7c a1       	ldd	r23, Y+36	; 0x24
    5aaa:	8d a1       	ldd	r24, Y+37	; 0x25
    5aac:	9e a1       	ldd	r25, Y+38	; 0x26
    5aae:	20 e0       	ldi	r18, 0x00	; 0
    5ab0:	3f ef       	ldi	r19, 0xFF	; 255
    5ab2:	4f e7       	ldi	r20, 0x7F	; 127
    5ab4:	57 e4       	ldi	r21, 0x47	; 71
    5ab6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5aba:	18 16       	cp	r1, r24
    5abc:	4c f5       	brge	.+82     	; 0x5b10 <Rest_Password+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5abe:	6f a1       	ldd	r22, Y+39	; 0x27
    5ac0:	78 a5       	ldd	r23, Y+40	; 0x28
    5ac2:	89 a5       	ldd	r24, Y+41	; 0x29
    5ac4:	9a a5       	ldd	r25, Y+42	; 0x2a
    5ac6:	20 e0       	ldi	r18, 0x00	; 0
    5ac8:	30 e0       	ldi	r19, 0x00	; 0
    5aca:	40 e2       	ldi	r20, 0x20	; 32
    5acc:	51 e4       	ldi	r21, 0x41	; 65
    5ace:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ad2:	dc 01       	movw	r26, r24
    5ad4:	cb 01       	movw	r24, r22
    5ad6:	bc 01       	movw	r22, r24
    5ad8:	cd 01       	movw	r24, r26
    5ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ade:	dc 01       	movw	r26, r24
    5ae0:	cb 01       	movw	r24, r22
    5ae2:	9a a3       	std	Y+34, r25	; 0x22
    5ae4:	89 a3       	std	Y+33, r24	; 0x21
    5ae6:	0f c0       	rjmp	.+30     	; 0x5b06 <Rest_Password+0xe8>
    5ae8:	80 e9       	ldi	r24, 0x90	; 144
    5aea:	91 e0       	ldi	r25, 0x01	; 1
    5aec:	98 a3       	std	Y+32, r25	; 0x20
    5aee:	8f 8f       	std	Y+31, r24	; 0x1f
    5af0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5af2:	98 a1       	ldd	r25, Y+32	; 0x20
    5af4:	01 97       	sbiw	r24, 0x01	; 1
    5af6:	f1 f7       	brne	.-4      	; 0x5af4 <Rest_Password+0xd6>
    5af8:	98 a3       	std	Y+32, r25	; 0x20
    5afa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5afc:	89 a1       	ldd	r24, Y+33	; 0x21
    5afe:	9a a1       	ldd	r25, Y+34	; 0x22
    5b00:	01 97       	sbiw	r24, 0x01	; 1
    5b02:	9a a3       	std	Y+34, r25	; 0x22
    5b04:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b06:	89 a1       	ldd	r24, Y+33	; 0x21
    5b08:	9a a1       	ldd	r25, Y+34	; 0x22
    5b0a:	00 97       	sbiw	r24, 0x00	; 0
    5b0c:	69 f7       	brne	.-38     	; 0x5ae8 <Rest_Password+0xca>
    5b0e:	14 c0       	rjmp	.+40     	; 0x5b38 <Rest_Password+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b10:	6b a1       	ldd	r22, Y+35	; 0x23
    5b12:	7c a1       	ldd	r23, Y+36	; 0x24
    5b14:	8d a1       	ldd	r24, Y+37	; 0x25
    5b16:	9e a1       	ldd	r25, Y+38	; 0x26
    5b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b1c:	dc 01       	movw	r26, r24
    5b1e:	cb 01       	movw	r24, r22
    5b20:	9a a3       	std	Y+34, r25	; 0x22
    5b22:	89 a3       	std	Y+33, r24	; 0x21
    5b24:	89 a1       	ldd	r24, Y+33	; 0x21
    5b26:	9a a1       	ldd	r25, Y+34	; 0x22
    5b28:	9e 8f       	std	Y+30, r25	; 0x1e
    5b2a:	8d 8f       	std	Y+29, r24	; 0x1d
    5b2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5b2e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5b30:	01 97       	sbiw	r24, 0x01	; 1
    5b32:	f1 f7       	brne	.-4      	; 0x5b30 <Rest_Password+0x112>
    5b34:	9e 8f       	std	Y+30, r25	; 0x1e
    5b36:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(200);
	H_EEPROM_Void_WriteByte(EEPROM_USER_ID, 1);
    5b38:	8f ef       	ldi	r24, 0xFF	; 255
    5b3a:	90 e0       	ldi	r25, 0x00	; 0
    5b3c:	61 e0       	ldi	r22, 0x01	; 1
    5b3e:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <H_EEPROM_Void_WriteByte>
    5b42:	80 e0       	ldi	r24, 0x00	; 0
    5b44:	90 e0       	ldi	r25, 0x00	; 0
    5b46:	a8 e4       	ldi	r26, 0x48	; 72
    5b48:	b3 e4       	ldi	r27, 0x43	; 67
    5b4a:	89 8f       	std	Y+25, r24	; 0x19
    5b4c:	9a 8f       	std	Y+26, r25	; 0x1a
    5b4e:	ab 8f       	std	Y+27, r26	; 0x1b
    5b50:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b52:	69 8d       	ldd	r22, Y+25	; 0x19
    5b54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5b56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5b5a:	20 e0       	ldi	r18, 0x00	; 0
    5b5c:	30 e0       	ldi	r19, 0x00	; 0
    5b5e:	4a e7       	ldi	r20, 0x7A	; 122
    5b60:	55 e4       	ldi	r21, 0x45	; 69
    5b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b66:	dc 01       	movw	r26, r24
    5b68:	cb 01       	movw	r24, r22
    5b6a:	8d 8b       	std	Y+21, r24	; 0x15
    5b6c:	9e 8b       	std	Y+22, r25	; 0x16
    5b6e:	af 8b       	std	Y+23, r26	; 0x17
    5b70:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5b72:	6d 89       	ldd	r22, Y+21	; 0x15
    5b74:	7e 89       	ldd	r23, Y+22	; 0x16
    5b76:	8f 89       	ldd	r24, Y+23	; 0x17
    5b78:	98 8d       	ldd	r25, Y+24	; 0x18
    5b7a:	20 e0       	ldi	r18, 0x00	; 0
    5b7c:	30 e0       	ldi	r19, 0x00	; 0
    5b7e:	40 e8       	ldi	r20, 0x80	; 128
    5b80:	5f e3       	ldi	r21, 0x3F	; 63
    5b82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5b86:	88 23       	and	r24, r24
    5b88:	2c f4       	brge	.+10     	; 0x5b94 <Rest_Password+0x176>
		__ticks = 1;
    5b8a:	81 e0       	ldi	r24, 0x01	; 1
    5b8c:	90 e0       	ldi	r25, 0x00	; 0
    5b8e:	9c 8b       	std	Y+20, r25	; 0x14
    5b90:	8b 8b       	std	Y+19, r24	; 0x13
    5b92:	3f c0       	rjmp	.+126    	; 0x5c12 <Rest_Password+0x1f4>
	else if (__tmp > 65535)
    5b94:	6d 89       	ldd	r22, Y+21	; 0x15
    5b96:	7e 89       	ldd	r23, Y+22	; 0x16
    5b98:	8f 89       	ldd	r24, Y+23	; 0x17
    5b9a:	98 8d       	ldd	r25, Y+24	; 0x18
    5b9c:	20 e0       	ldi	r18, 0x00	; 0
    5b9e:	3f ef       	ldi	r19, 0xFF	; 255
    5ba0:	4f e7       	ldi	r20, 0x7F	; 127
    5ba2:	57 e4       	ldi	r21, 0x47	; 71
    5ba4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5ba8:	18 16       	cp	r1, r24
    5baa:	4c f5       	brge	.+82     	; 0x5bfe <Rest_Password+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5bac:	69 8d       	ldd	r22, Y+25	; 0x19
    5bae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5bb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5bb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5bb4:	20 e0       	ldi	r18, 0x00	; 0
    5bb6:	30 e0       	ldi	r19, 0x00	; 0
    5bb8:	40 e2       	ldi	r20, 0x20	; 32
    5bba:	51 e4       	ldi	r21, 0x41	; 65
    5bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bc0:	dc 01       	movw	r26, r24
    5bc2:	cb 01       	movw	r24, r22
    5bc4:	bc 01       	movw	r22, r24
    5bc6:	cd 01       	movw	r24, r26
    5bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bcc:	dc 01       	movw	r26, r24
    5bce:	cb 01       	movw	r24, r22
    5bd0:	9c 8b       	std	Y+20, r25	; 0x14
    5bd2:	8b 8b       	std	Y+19, r24	; 0x13
    5bd4:	0f c0       	rjmp	.+30     	; 0x5bf4 <Rest_Password+0x1d6>
    5bd6:	80 e9       	ldi	r24, 0x90	; 144
    5bd8:	91 e0       	ldi	r25, 0x01	; 1
    5bda:	9a 8b       	std	Y+18, r25	; 0x12
    5bdc:	89 8b       	std	Y+17, r24	; 0x11
    5bde:	89 89       	ldd	r24, Y+17	; 0x11
    5be0:	9a 89       	ldd	r25, Y+18	; 0x12
    5be2:	01 97       	sbiw	r24, 0x01	; 1
    5be4:	f1 f7       	brne	.-4      	; 0x5be2 <Rest_Password+0x1c4>
    5be6:	9a 8b       	std	Y+18, r25	; 0x12
    5be8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5bea:	8b 89       	ldd	r24, Y+19	; 0x13
    5bec:	9c 89       	ldd	r25, Y+20	; 0x14
    5bee:	01 97       	sbiw	r24, 0x01	; 1
    5bf0:	9c 8b       	std	Y+20, r25	; 0x14
    5bf2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5bf4:	8b 89       	ldd	r24, Y+19	; 0x13
    5bf6:	9c 89       	ldd	r25, Y+20	; 0x14
    5bf8:	00 97       	sbiw	r24, 0x00	; 0
    5bfa:	69 f7       	brne	.-38     	; 0x5bd6 <Rest_Password+0x1b8>
    5bfc:	14 c0       	rjmp	.+40     	; 0x5c26 <Rest_Password+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bfe:	6d 89       	ldd	r22, Y+21	; 0x15
    5c00:	7e 89       	ldd	r23, Y+22	; 0x16
    5c02:	8f 89       	ldd	r24, Y+23	; 0x17
    5c04:	98 8d       	ldd	r25, Y+24	; 0x18
    5c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c0a:	dc 01       	movw	r26, r24
    5c0c:	cb 01       	movw	r24, r22
    5c0e:	9c 8b       	std	Y+20, r25	; 0x14
    5c10:	8b 8b       	std	Y+19, r24	; 0x13
    5c12:	8b 89       	ldd	r24, Y+19	; 0x13
    5c14:	9c 89       	ldd	r25, Y+20	; 0x14
    5c16:	98 8b       	std	Y+16, r25	; 0x10
    5c18:	8f 87       	std	Y+15, r24	; 0x0f
    5c1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    5c1c:	98 89       	ldd	r25, Y+16	; 0x10
    5c1e:	01 97       	sbiw	r24, 0x01	; 1
    5c20:	f1 f7       	brne	.-4      	; 0x5c1e <Rest_Password+0x200>
    5c22:	98 8b       	std	Y+16, r25	; 0x10
    5c24:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	H_LCD_void_ClearDisplay();
    5c26:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <H_LCD_void_ClearDisplay>

	H_LCD_void_sendString("Rest Password");
    5c2a:	80 e5       	ldi	r24, 0x50	; 80
    5c2c:	92 e0       	ldi	r25, 0x02	; 2
    5c2e:	0e 94 9f 1a 	call	0x353e	; 0x353e <H_LCD_void_sendString>
    5c32:	80 e0       	ldi	r24, 0x00	; 0
    5c34:	90 e0       	ldi	r25, 0x00	; 0
    5c36:	aa e7       	ldi	r26, 0x7A	; 122
    5c38:	b4 e4       	ldi	r27, 0x44	; 68
    5c3a:	8b 87       	std	Y+11, r24	; 0x0b
    5c3c:	9c 87       	std	Y+12, r25	; 0x0c
    5c3e:	ad 87       	std	Y+13, r26	; 0x0d
    5c40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c42:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c44:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c46:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c48:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c4a:	20 e0       	ldi	r18, 0x00	; 0
    5c4c:	30 e0       	ldi	r19, 0x00	; 0
    5c4e:	4a e7       	ldi	r20, 0x7A	; 122
    5c50:	55 e4       	ldi	r21, 0x45	; 69
    5c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c56:	dc 01       	movw	r26, r24
    5c58:	cb 01       	movw	r24, r22
    5c5a:	8f 83       	std	Y+7, r24	; 0x07
    5c5c:	98 87       	std	Y+8, r25	; 0x08
    5c5e:	a9 87       	std	Y+9, r26	; 0x09
    5c60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5c62:	6f 81       	ldd	r22, Y+7	; 0x07
    5c64:	78 85       	ldd	r23, Y+8	; 0x08
    5c66:	89 85       	ldd	r24, Y+9	; 0x09
    5c68:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c6a:	20 e0       	ldi	r18, 0x00	; 0
    5c6c:	30 e0       	ldi	r19, 0x00	; 0
    5c6e:	40 e8       	ldi	r20, 0x80	; 128
    5c70:	5f e3       	ldi	r21, 0x3F	; 63
    5c72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5c76:	88 23       	and	r24, r24
    5c78:	2c f4       	brge	.+10     	; 0x5c84 <Rest_Password+0x266>
		__ticks = 1;
    5c7a:	81 e0       	ldi	r24, 0x01	; 1
    5c7c:	90 e0       	ldi	r25, 0x00	; 0
    5c7e:	9e 83       	std	Y+6, r25	; 0x06
    5c80:	8d 83       	std	Y+5, r24	; 0x05
    5c82:	3f c0       	rjmp	.+126    	; 0x5d02 <Rest_Password+0x2e4>
	else if (__tmp > 65535)
    5c84:	6f 81       	ldd	r22, Y+7	; 0x07
    5c86:	78 85       	ldd	r23, Y+8	; 0x08
    5c88:	89 85       	ldd	r24, Y+9	; 0x09
    5c8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c8c:	20 e0       	ldi	r18, 0x00	; 0
    5c8e:	3f ef       	ldi	r19, 0xFF	; 255
    5c90:	4f e7       	ldi	r20, 0x7F	; 127
    5c92:	57 e4       	ldi	r21, 0x47	; 71
    5c94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5c98:	18 16       	cp	r1, r24
    5c9a:	4c f5       	brge	.+82     	; 0x5cee <Rest_Password+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ca0:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ca2:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ca4:	20 e0       	ldi	r18, 0x00	; 0
    5ca6:	30 e0       	ldi	r19, 0x00	; 0
    5ca8:	40 e2       	ldi	r20, 0x20	; 32
    5caa:	51 e4       	ldi	r21, 0x41	; 65
    5cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cb0:	dc 01       	movw	r26, r24
    5cb2:	cb 01       	movw	r24, r22
    5cb4:	bc 01       	movw	r22, r24
    5cb6:	cd 01       	movw	r24, r26
    5cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cbc:	dc 01       	movw	r26, r24
    5cbe:	cb 01       	movw	r24, r22
    5cc0:	9e 83       	std	Y+6, r25	; 0x06
    5cc2:	8d 83       	std	Y+5, r24	; 0x05
    5cc4:	0f c0       	rjmp	.+30     	; 0x5ce4 <Rest_Password+0x2c6>
    5cc6:	80 e9       	ldi	r24, 0x90	; 144
    5cc8:	91 e0       	ldi	r25, 0x01	; 1
    5cca:	9c 83       	std	Y+4, r25	; 0x04
    5ccc:	8b 83       	std	Y+3, r24	; 0x03
    5cce:	8b 81       	ldd	r24, Y+3	; 0x03
    5cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    5cd2:	01 97       	sbiw	r24, 0x01	; 1
    5cd4:	f1 f7       	brne	.-4      	; 0x5cd2 <Rest_Password+0x2b4>
    5cd6:	9c 83       	std	Y+4, r25	; 0x04
    5cd8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cda:	8d 81       	ldd	r24, Y+5	; 0x05
    5cdc:	9e 81       	ldd	r25, Y+6	; 0x06
    5cde:	01 97       	sbiw	r24, 0x01	; 1
    5ce0:	9e 83       	std	Y+6, r25	; 0x06
    5ce2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    5ce6:	9e 81       	ldd	r25, Y+6	; 0x06
    5ce8:	00 97       	sbiw	r24, 0x00	; 0
    5cea:	69 f7       	brne	.-38     	; 0x5cc6 <Rest_Password+0x2a8>
    5cec:	14 c0       	rjmp	.+40     	; 0x5d16 <Rest_Password+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cee:	6f 81       	ldd	r22, Y+7	; 0x07
    5cf0:	78 85       	ldd	r23, Y+8	; 0x08
    5cf2:	89 85       	ldd	r24, Y+9	; 0x09
    5cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cfa:	dc 01       	movw	r26, r24
    5cfc:	cb 01       	movw	r24, r22
    5cfe:	9e 83       	std	Y+6, r25	; 0x06
    5d00:	8d 83       	std	Y+5, r24	; 0x05
    5d02:	8d 81       	ldd	r24, Y+5	; 0x05
    5d04:	9e 81       	ldd	r25, Y+6	; 0x06
    5d06:	9a 83       	std	Y+2, r25	; 0x02
    5d08:	89 83       	std	Y+1, r24	; 0x01
    5d0a:	89 81       	ldd	r24, Y+1	; 0x01
    5d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    5d0e:	01 97       	sbiw	r24, 0x01	; 1
    5d10:	f1 f7       	brne	.-4      	; 0x5d0e <Rest_Password+0x2f0>
    5d12:	9a 83       	std	Y+2, r25	; 0x02
    5d14:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    5d16:	af 96       	adiw	r28, 0x2f	; 47
    5d18:	0f b6       	in	r0, 0x3f	; 63
    5d1a:	f8 94       	cli
    5d1c:	de bf       	out	0x3e, r29	; 62
    5d1e:	0f be       	out	0x3f, r0	; 63
    5d20:	cd bf       	out	0x3d, r28	; 61
    5d22:	cf 91       	pop	r28
    5d24:	df 91       	pop	r29
    5d26:	08 95       	ret

00005d28 <main>:
//#include "RTC_cfg.h"
#include "APP_init.h"
//#include "EEPROM_init.h"

void main()
{
    5d28:	df 93       	push	r29
    5d2a:	cf 93       	push	r28
    5d2c:	cd b7       	in	r28, 0x3d	; 61
    5d2e:	de b7       	in	r29, 0x3e	; 62
	APP_INIT();
    5d30:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <APP_INIT>



	while(1)
	{
		APP_Start();
    5d34:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <APP_Start>
    5d38:	fd cf       	rjmp	.-6      	; 0x5d34 <main+0xc>

00005d3a <__udivmodqi4>:
    5d3a:	99 1b       	sub	r25, r25
    5d3c:	79 e0       	ldi	r23, 0x09	; 9
    5d3e:	04 c0       	rjmp	.+8      	; 0x5d48 <__udivmodqi4_ep>

00005d40 <__udivmodqi4_loop>:
    5d40:	99 1f       	adc	r25, r25
    5d42:	96 17       	cp	r25, r22
    5d44:	08 f0       	brcs	.+2      	; 0x5d48 <__udivmodqi4_ep>
    5d46:	96 1b       	sub	r25, r22

00005d48 <__udivmodqi4_ep>:
    5d48:	88 1f       	adc	r24, r24
    5d4a:	7a 95       	dec	r23
    5d4c:	c9 f7       	brne	.-14     	; 0x5d40 <__udivmodqi4_loop>
    5d4e:	80 95       	com	r24
    5d50:	08 95       	ret

00005d52 <__divmodsi4>:
    5d52:	97 fb       	bst	r25, 7
    5d54:	09 2e       	mov	r0, r25
    5d56:	05 26       	eor	r0, r21
    5d58:	0e d0       	rcall	.+28     	; 0x5d76 <__divmodsi4_neg1>
    5d5a:	57 fd       	sbrc	r21, 7
    5d5c:	04 d0       	rcall	.+8      	; 0x5d66 <__divmodsi4_neg2>
    5d5e:	14 d0       	rcall	.+40     	; 0x5d88 <__udivmodsi4>
    5d60:	0a d0       	rcall	.+20     	; 0x5d76 <__divmodsi4_neg1>
    5d62:	00 1c       	adc	r0, r0
    5d64:	38 f4       	brcc	.+14     	; 0x5d74 <__divmodsi4_exit>

00005d66 <__divmodsi4_neg2>:
    5d66:	50 95       	com	r21
    5d68:	40 95       	com	r20
    5d6a:	30 95       	com	r19
    5d6c:	21 95       	neg	r18
    5d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    5d70:	4f 4f       	sbci	r20, 0xFF	; 255
    5d72:	5f 4f       	sbci	r21, 0xFF	; 255

00005d74 <__divmodsi4_exit>:
    5d74:	08 95       	ret

00005d76 <__divmodsi4_neg1>:
    5d76:	f6 f7       	brtc	.-4      	; 0x5d74 <__divmodsi4_exit>
    5d78:	90 95       	com	r25
    5d7a:	80 95       	com	r24
    5d7c:	70 95       	com	r23
    5d7e:	61 95       	neg	r22
    5d80:	7f 4f       	sbci	r23, 0xFF	; 255
    5d82:	8f 4f       	sbci	r24, 0xFF	; 255
    5d84:	9f 4f       	sbci	r25, 0xFF	; 255
    5d86:	08 95       	ret

00005d88 <__udivmodsi4>:
    5d88:	a1 e2       	ldi	r26, 0x21	; 33
    5d8a:	1a 2e       	mov	r1, r26
    5d8c:	aa 1b       	sub	r26, r26
    5d8e:	bb 1b       	sub	r27, r27
    5d90:	fd 01       	movw	r30, r26
    5d92:	0d c0       	rjmp	.+26     	; 0x5dae <__udivmodsi4_ep>

00005d94 <__udivmodsi4_loop>:
    5d94:	aa 1f       	adc	r26, r26
    5d96:	bb 1f       	adc	r27, r27
    5d98:	ee 1f       	adc	r30, r30
    5d9a:	ff 1f       	adc	r31, r31
    5d9c:	a2 17       	cp	r26, r18
    5d9e:	b3 07       	cpc	r27, r19
    5da0:	e4 07       	cpc	r30, r20
    5da2:	f5 07       	cpc	r31, r21
    5da4:	20 f0       	brcs	.+8      	; 0x5dae <__udivmodsi4_ep>
    5da6:	a2 1b       	sub	r26, r18
    5da8:	b3 0b       	sbc	r27, r19
    5daa:	e4 0b       	sbc	r30, r20
    5dac:	f5 0b       	sbc	r31, r21

00005dae <__udivmodsi4_ep>:
    5dae:	66 1f       	adc	r22, r22
    5db0:	77 1f       	adc	r23, r23
    5db2:	88 1f       	adc	r24, r24
    5db4:	99 1f       	adc	r25, r25
    5db6:	1a 94       	dec	r1
    5db8:	69 f7       	brne	.-38     	; 0x5d94 <__udivmodsi4_loop>
    5dba:	60 95       	com	r22
    5dbc:	70 95       	com	r23
    5dbe:	80 95       	com	r24
    5dc0:	90 95       	com	r25
    5dc2:	9b 01       	movw	r18, r22
    5dc4:	ac 01       	movw	r20, r24
    5dc6:	bd 01       	movw	r22, r26
    5dc8:	cf 01       	movw	r24, r30
    5dca:	08 95       	ret

00005dcc <__prologue_saves__>:
    5dcc:	2f 92       	push	r2
    5dce:	3f 92       	push	r3
    5dd0:	4f 92       	push	r4
    5dd2:	5f 92       	push	r5
    5dd4:	6f 92       	push	r6
    5dd6:	7f 92       	push	r7
    5dd8:	8f 92       	push	r8
    5dda:	9f 92       	push	r9
    5ddc:	af 92       	push	r10
    5dde:	bf 92       	push	r11
    5de0:	cf 92       	push	r12
    5de2:	df 92       	push	r13
    5de4:	ef 92       	push	r14
    5de6:	ff 92       	push	r15
    5de8:	0f 93       	push	r16
    5dea:	1f 93       	push	r17
    5dec:	cf 93       	push	r28
    5dee:	df 93       	push	r29
    5df0:	cd b7       	in	r28, 0x3d	; 61
    5df2:	de b7       	in	r29, 0x3e	; 62
    5df4:	ca 1b       	sub	r28, r26
    5df6:	db 0b       	sbc	r29, r27
    5df8:	0f b6       	in	r0, 0x3f	; 63
    5dfa:	f8 94       	cli
    5dfc:	de bf       	out	0x3e, r29	; 62
    5dfe:	0f be       	out	0x3f, r0	; 63
    5e00:	cd bf       	out	0x3d, r28	; 61
    5e02:	09 94       	ijmp

00005e04 <__epilogue_restores__>:
    5e04:	2a 88       	ldd	r2, Y+18	; 0x12
    5e06:	39 88       	ldd	r3, Y+17	; 0x11
    5e08:	48 88       	ldd	r4, Y+16	; 0x10
    5e0a:	5f 84       	ldd	r5, Y+15	; 0x0f
    5e0c:	6e 84       	ldd	r6, Y+14	; 0x0e
    5e0e:	7d 84       	ldd	r7, Y+13	; 0x0d
    5e10:	8c 84       	ldd	r8, Y+12	; 0x0c
    5e12:	9b 84       	ldd	r9, Y+11	; 0x0b
    5e14:	aa 84       	ldd	r10, Y+10	; 0x0a
    5e16:	b9 84       	ldd	r11, Y+9	; 0x09
    5e18:	c8 84       	ldd	r12, Y+8	; 0x08
    5e1a:	df 80       	ldd	r13, Y+7	; 0x07
    5e1c:	ee 80       	ldd	r14, Y+6	; 0x06
    5e1e:	fd 80       	ldd	r15, Y+5	; 0x05
    5e20:	0c 81       	ldd	r16, Y+4	; 0x04
    5e22:	1b 81       	ldd	r17, Y+3	; 0x03
    5e24:	aa 81       	ldd	r26, Y+2	; 0x02
    5e26:	b9 81       	ldd	r27, Y+1	; 0x01
    5e28:	ce 0f       	add	r28, r30
    5e2a:	d1 1d       	adc	r29, r1
    5e2c:	0f b6       	in	r0, 0x3f	; 63
    5e2e:	f8 94       	cli
    5e30:	de bf       	out	0x3e, r29	; 62
    5e32:	0f be       	out	0x3f, r0	; 63
    5e34:	cd bf       	out	0x3d, r28	; 61
    5e36:	ed 01       	movw	r28, r26
    5e38:	08 95       	ret

00005e3a <_exit>:
    5e3a:	f8 94       	cli

00005e3c <__stop_program>:
    5e3c:	ff cf       	rjmp	.-2      	; 0x5e3c <__stop_program>
