
smartHome_proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007300  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000408  00800060  00007300  00007394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000021c  00800468  00800468  0000779c  2**0
                  ALLOC
  3 .stab         00008b8c  00000000  00000000  0000779c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000072b2  00000000  00000000  00010328  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  000175da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0001779a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  000179ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00019fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0001b48e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0001c79c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0001c97c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0001cc83  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001d69d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b3 12 	jmp	0x2566	; 0x2566 <__vector_1>
       8:	0c 94 e6 12 	jmp	0x25cc	; 0x25cc <__vector_2>
       c:	0c 94 19 13 	jmp	0x2632	; 0x2632 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 c3 0e 	jmp	0x1d86	; 0x1d86 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 04 09 	jmp	0x1208	; 0x1208 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 a7 18 	jmp	0x314e	; 0x314e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	f3 e7       	ldi	r31, 0x73	; 115
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	16 e0       	ldi	r17, 0x06	; 6
      78:	a8 e6       	ldi	r26, 0x68	; 104
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 38       	cpi	r26, 0x84	; 132
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f4 2f 	call	0x5fe8	; 0x5fe8 <main>
      8a:	0c 94 7e 39 	jmp	0x72fc	; 0x72fc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 47 36 	jmp	0x6c8e	; 0x6c8e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e9       	ldi	r26, 0x9E	; 158
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 63 36 	jmp	0x6cc6	; 0x6cc6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 53 36 	jmp	0x6ca6	; 0x6ca6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6f 36 	jmp	0x6cde	; 0x6cde <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 53 36 	jmp	0x6ca6	; 0x6ca6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6f 36 	jmp	0x6cde	; 0x6cde <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 47 36 	jmp	0x6c8e	; 0x6c8e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e9       	ldi	r24, 0x9E	; 158
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 63 36 	jmp	0x6cc6	; 0x6cc6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4f 36 	jmp	0x6c9e	; 0x6c9e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e9       	ldi	r22, 0x9E	; 158
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 6b 36 	jmp	0x6cd6	; 0x6cd6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 53 36 	jmp	0x6ca6	; 0x6ca6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 6f 36 	jmp	0x6cde	; 0x6cde <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 53 36 	jmp	0x6ca6	; 0x6ca6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 6f 36 	jmp	0x6cde	; 0x6cde <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 53 36 	jmp	0x6ca6	; 0x6ca6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 6f 36 	jmp	0x6cde	; 0x6cde <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 50 36 	jmp	0x6ca0	; 0x6ca0 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 6c 36 	jmp	0x6cd8	; 0x6cd8 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 57 36 	jmp	0x6cae	; 0x6cae <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 73 36 	jmp	0x6ce6	; 0x6ce6 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 4f 36 	jmp	0x6c9e	; 0x6c9e <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 6b 36 	jmp	0x6cd6	; 0x6cd6 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ea 55       	subi	r30, 0x5A	; 90
     b86:	fd 4f       	sbci	r31, 0xFD	; 253
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <UART_Init>:

static void(*UART_CallBack)(void) = NULL;


void UART_Init(UART_Config_t  UART_CONFIG)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <UART_Init+0x6>
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <UART_Init+0x8>
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	69 83       	std	Y+1, r22	; 0x01
     ef8:	7a 83       	std	Y+2, r23	; 0x02
     efa:	8b 83       	std	Y+3, r24	; 0x03
     efc:	9c 83       	std	Y+4, r25	; 0x04
		
	/* Set baud rate  */
	//PtrUBRRL->UBRRL_BIT = UART_CONFIG.BuadRate;
	PtrUBRRL->UBRRL_BIT =8;
     efe:	e0 91 b0 03 	lds	r30, 0x03B0
     f02:	f0 91 b1 03 	lds	r31, 0x03B1
     f06:	88 e0       	ldi	r24, 0x08	; 8
     f08:	80 83       	st	Z, r24
	
	/* select word size "not more than 8bits "*/
	
	//PtrUCSRC->UCSZ_BIT = UART_CONFIG.WordSize;
	
	UART_UCSRC_REG = 0X86;
     f0a:	e0 e4       	ldi	r30, 0x40	; 64
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	86 e8       	ldi	r24, 0x86	; 134
     f10:	80 83       	st	Z, r24

	
	//PtrUBRRH->UBRRH_BIT =0;
	
	/* Enable Tx  */
	PtrUCSRB->TXEN_BIT = Enable;
     f12:	e0 91 aa 03 	lds	r30, 0x03AA
     f16:	f0 91 ab 03 	lds	r31, 0x03AB
     f1a:	80 81       	ld	r24, Z
     f1c:	88 60       	ori	r24, 0x08	; 8
     f1e:	80 83       	st	Z, r24
	
	/* Enable Rx  */
	PtrUCSRB->RXEN_BIT = Enable;
     f20:	e0 91 aa 03 	lds	r30, 0x03AA
     f24:	f0 91 ab 03 	lds	r31, 0x03AB
     f28:	80 81       	ld	r24, Z
     f2a:	80 61       	ori	r24, 0x10	; 16
     f2c:	80 83       	st	Z, r24
    PtrUCSRB->RXCIE_BIT = Enable;
     f2e:	e0 91 aa 03 	lds	r30, 0x03AA
     f32:	f0 91 ab 03 	lds	r31, 0x03AB
     f36:	80 81       	ld	r24, Z
     f38:	80 68       	ori	r24, 0x80	; 128
     f3a:	80 83       	st	Z, r24
}
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <UART_sendByte>:

void UART_sendByte( u8 Data)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	0f 92       	push	r0
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	89 83       	std	Y+1, r24	; 0x01
	
	/* Enable Tx  */
	PtrUCSRB->TXEN_BIT = Enable;
     f56:	e0 91 aa 03 	lds	r30, 0x03AA
     f5a:	f0 91 ab 03 	lds	r31, 0x03AB
     f5e:	80 81       	ld	r24, Z
     f60:	88 60       	ori	r24, 0x08	; 8
     f62:	80 83       	st	Z, r24
	
	while(PtrUCSRA->UDRE_BIT == 0);
     f64:	e0 91 a8 03 	lds	r30, 0x03A8
     f68:	f0 91 a9 03 	lds	r31, 0x03A9
     f6c:	80 81       	ld	r24, Z
     f6e:	80 72       	andi	r24, 0x20	; 32
     f70:	88 23       	and	r24, r24
     f72:	c1 f3       	breq	.-16     	; 0xf64 <UART_sendByte+0x1a>
	
	/* write data to UDR register  */
	PtrUDR->UDR_REG = Data;
     f74:	e0 91 a6 03 	lds	r30, 0x03A6
     f78:	f0 91 a7 03 	lds	r31, 0x03A7
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	80 83       	st	Z, r24
}
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <UART_sendString>:

void UART_sendString(u8 *String)
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <UART_sendString+0x6>
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	9a 83       	std	Y+2, r25	; 0x02
     f94:	89 83       	std	Y+1, r24	; 0x01
     f96:	15 c0       	rjmp	.+42     	; 0xfc2 <UART_sendString+0x3a>
	while(*String != '\0')
	{
		PtrUDR->UDR_REG =*String;
     f98:	e0 91 a6 03 	lds	r30, 0x03A6
     f9c:	f0 91 a7 03 	lds	r31, 0x03A7
     fa0:	a9 81       	ldd	r26, Y+1	; 0x01
     fa2:	ba 81       	ldd	r27, Y+2	; 0x02
     fa4:	8c 91       	ld	r24, X
     fa6:	80 83       	st	Z, r24
		/* wait until UDR reg is ready to write new data  */
		while(PtrUCSRA->UDRE_BIT == 0);
     fa8:	e0 91 a8 03 	lds	r30, 0x03A8
     fac:	f0 91 a9 03 	lds	r31, 0x03A9
     fb0:	80 81       	ld	r24, Z
     fb2:	80 72       	andi	r24, 0x20	; 32
     fb4:	88 23       	and	r24, r24
     fb6:	c1 f3       	breq	.-16     	; 0xfa8 <UART_sendString+0x20>
		
		String++;
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	9a 81       	ldd	r25, Y+2	; 0x02
     fbc:	01 96       	adiw	r24, 0x01	; 1
     fbe:	9a 83       	std	Y+2, r25	; 0x02
     fc0:	89 83       	std	Y+1, r24	; 0x01
	PtrUDR->UDR_REG = Data;
}

void UART_sendString(u8 *String)
{
	while(*String != '\0')
     fc2:	e9 81       	ldd	r30, Y+1	; 0x01
     fc4:	fa 81       	ldd	r31, Y+2	; 0x02
     fc6:	80 81       	ld	r24, Z
     fc8:	88 23       	and	r24, r24
     fca:	31 f7       	brne	.-52     	; 0xf98 <UART_sendString+0x10>
		
		String++;
	}
	
	//PtrUDR->UDR_REG = '\0';
}
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <UART_receiveByteSynchNonBlocking>:


void UART_receiveByteSynchNonBlocking(u8 *data)
{
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	00 d0       	rcall	.+0      	; 0xfdc <UART_receiveByteSynchNonBlocking+0x6>
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	9a 83       	std	Y+2, r25	; 0x02
     fe2:	89 83       	std	Y+1, r24	; 0x01
	while(PtrUCSRA->RXC_BIT == 0 && Time_Out2 > 0)
	{
		Time_Out2--;
	}
	*/
	while(PtrUCSRA->RXC_BIT == 0);
     fe4:	e0 91 a8 03 	lds	r30, 0x03A8
     fe8:	f0 91 a9 03 	lds	r31, 0x03A9
     fec:	80 81       	ld	r24, Z
     fee:	80 78       	andi	r24, 0x80	; 128
     ff0:	88 23       	and	r24, r24
     ff2:	c1 f3       	breq	.-16     	; 0xfe4 <UART_receiveByteSynchNonBlocking+0xe>

	*data = PtrUDR->UDR_REG;
     ff4:	e0 91 a6 03 	lds	r30, 0x03A6
     ff8:	f0 91 a7 03 	lds	r31, 0x03A7
     ffc:	80 81       	ld	r24, Z
     ffe:	e9 81       	ldd	r30, Y+1	; 0x01
    1000:	fa 81       	ldd	r31, Y+2	; 0x02
    1002:	80 83       	st	Z, r24
}
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <UART_receiveByteSynchNonBlocking2>:

volatile u8 Time_Out3 = 200;


u8 UART_receiveByteSynchNonBlocking2()
{
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	68 97       	sbiw	r28, 0x18	; 24
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	c3 c0       	rjmp	.+390    	; 0x11aa <UART_receiveByteSynchNonBlocking2+0x19c>

	while(PtrUCSRA->RXC_BIT == 0 && Time_Out3 > 0)
	{
		Time_Out3--;
    1024:	80 91 b6 03 	lds	r24, 0x03B6
    1028:	81 50       	subi	r24, 0x01	; 1
    102a:	80 93 b6 03 	sts	0x03B6, r24
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	a0 ea       	ldi	r26, 0xA0	; 160
    1034:	b0 e4       	ldi	r27, 0x40	; 64
    1036:	8d 8b       	std	Y+21, r24	; 0x15
    1038:	9e 8b       	std	Y+22, r25	; 0x16
    103a:	af 8b       	std	Y+23, r26	; 0x17
    103c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    103e:	6d 89       	ldd	r22, Y+21	; 0x15
    1040:	7e 89       	ldd	r23, Y+22	; 0x16
    1042:	8f 89       	ldd	r24, Y+23	; 0x17
    1044:	98 8d       	ldd	r25, Y+24	; 0x18
    1046:	2b ea       	ldi	r18, 0xAB	; 171
    1048:	3a ea       	ldi	r19, 0xAA	; 170
    104a:	4a ea       	ldi	r20, 0xAA	; 170
    104c:	50 e4       	ldi	r21, 0x40	; 64
    104e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	89 8b       	std	Y+17, r24	; 0x11
    1058:	9a 8b       	std	Y+18, r25	; 0x12
    105a:	ab 8b       	std	Y+19, r26	; 0x13
    105c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    105e:	69 89       	ldd	r22, Y+17	; 0x11
    1060:	7a 89       	ldd	r23, Y+18	; 0x12
    1062:	8b 89       	ldd	r24, Y+19	; 0x13
    1064:	9c 89       	ldd	r25, Y+20	; 0x14
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	40 e8       	ldi	r20, 0x80	; 128
    106c:	5f e3       	ldi	r21, 0x3F	; 63
    106e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1072:	88 23       	and	r24, r24
    1074:	1c f4       	brge	.+6      	; 0x107c <UART_receiveByteSynchNonBlocking2+0x6e>
		__ticks = 1;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	88 8b       	std	Y+16, r24	; 0x10
    107a:	91 c0       	rjmp	.+290    	; 0x119e <UART_receiveByteSynchNonBlocking2+0x190>
	else if (__tmp > 255)
    107c:	69 89       	ldd	r22, Y+17	; 0x11
    107e:	7a 89       	ldd	r23, Y+18	; 0x12
    1080:	8b 89       	ldd	r24, Y+19	; 0x13
    1082:	9c 89       	ldd	r25, Y+20	; 0x14
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	4f e7       	ldi	r20, 0x7F	; 127
    108a:	53 e4       	ldi	r21, 0x43	; 67
    108c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1090:	18 16       	cp	r1, r24
    1092:	0c f0       	brlt	.+2      	; 0x1096 <UART_receiveByteSynchNonBlocking2+0x88>
    1094:	7b c0       	rjmp	.+246    	; 0x118c <UART_receiveByteSynchNonBlocking2+0x17e>
	{
		_delay_ms(__us / 1000.0);
    1096:	6d 89       	ldd	r22, Y+21	; 0x15
    1098:	7e 89       	ldd	r23, Y+22	; 0x16
    109a:	8f 89       	ldd	r24, Y+23	; 0x17
    109c:	98 8d       	ldd	r25, Y+24	; 0x18
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	4a e7       	ldi	r20, 0x7A	; 122
    10a4:	54 e4       	ldi	r21, 0x44	; 68
    10a6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	8c 87       	std	Y+12, r24	; 0x0c
    10b0:	9d 87       	std	Y+13, r25	; 0x0d
    10b2:	ae 87       	std	Y+14, r26	; 0x0e
    10b4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10b6:	6c 85       	ldd	r22, Y+12	; 0x0c
    10b8:	7d 85       	ldd	r23, Y+13	; 0x0d
    10ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    10bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	4a e7       	ldi	r20, 0x7A	; 122
    10c4:	55 e4       	ldi	r21, 0x45	; 69
    10c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ca:	dc 01       	movw	r26, r24
    10cc:	cb 01       	movw	r24, r22
    10ce:	88 87       	std	Y+8, r24	; 0x08
    10d0:	99 87       	std	Y+9, r25	; 0x09
    10d2:	aa 87       	std	Y+10, r26	; 0x0a
    10d4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    10d6:	68 85       	ldd	r22, Y+8	; 0x08
    10d8:	79 85       	ldd	r23, Y+9	; 0x09
    10da:	8a 85       	ldd	r24, Y+10	; 0x0a
    10dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	40 e8       	ldi	r20, 0x80	; 128
    10e4:	5f e3       	ldi	r21, 0x3F	; 63
    10e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10ea:	88 23       	and	r24, r24
    10ec:	2c f4       	brge	.+10     	; 0x10f8 <UART_receiveByteSynchNonBlocking2+0xea>
		__ticks = 1;
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	9f 83       	std	Y+7, r25	; 0x07
    10f4:	8e 83       	std	Y+6, r24	; 0x06
    10f6:	3f c0       	rjmp	.+126    	; 0x1176 <UART_receiveByteSynchNonBlocking2+0x168>
	else if (__tmp > 65535)
    10f8:	68 85       	ldd	r22, Y+8	; 0x08
    10fa:	79 85       	ldd	r23, Y+9	; 0x09
    10fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    10fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	3f ef       	ldi	r19, 0xFF	; 255
    1104:	4f e7       	ldi	r20, 0x7F	; 127
    1106:	57 e4       	ldi	r21, 0x47	; 71
    1108:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    110c:	18 16       	cp	r1, r24
    110e:	4c f5       	brge	.+82     	; 0x1162 <UART_receiveByteSynchNonBlocking2+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1110:	6c 85       	ldd	r22, Y+12	; 0x0c
    1112:	7d 85       	ldd	r23, Y+13	; 0x0d
    1114:	8e 85       	ldd	r24, Y+14	; 0x0e
    1116:	9f 85       	ldd	r25, Y+15	; 0x0f
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	40 e2       	ldi	r20, 0x20	; 32
    111e:	51 e4       	ldi	r21, 0x41	; 65
    1120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	bc 01       	movw	r22, r24
    112a:	cd 01       	movw	r24, r26
    112c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	9f 83       	std	Y+7, r25	; 0x07
    1136:	8e 83       	std	Y+6, r24	; 0x06
    1138:	0f c0       	rjmp	.+30     	; 0x1158 <UART_receiveByteSynchNonBlocking2+0x14a>
    113a:	80 e9       	ldi	r24, 0x90	; 144
    113c:	91 e0       	ldi	r25, 0x01	; 1
    113e:	9d 83       	std	Y+5, r25	; 0x05
    1140:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1142:	8c 81       	ldd	r24, Y+4	; 0x04
    1144:	9d 81       	ldd	r25, Y+5	; 0x05
    1146:	01 97       	sbiw	r24, 0x01	; 1
    1148:	f1 f7       	brne	.-4      	; 0x1146 <UART_receiveByteSynchNonBlocking2+0x138>
    114a:	9d 83       	std	Y+5, r25	; 0x05
    114c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    114e:	8e 81       	ldd	r24, Y+6	; 0x06
    1150:	9f 81       	ldd	r25, Y+7	; 0x07
    1152:	01 97       	sbiw	r24, 0x01	; 1
    1154:	9f 83       	std	Y+7, r25	; 0x07
    1156:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1158:	8e 81       	ldd	r24, Y+6	; 0x06
    115a:	9f 81       	ldd	r25, Y+7	; 0x07
    115c:	00 97       	sbiw	r24, 0x00	; 0
    115e:	69 f7       	brne	.-38     	; 0x113a <UART_receiveByteSynchNonBlocking2+0x12c>
    1160:	24 c0       	rjmp	.+72     	; 0x11aa <UART_receiveByteSynchNonBlocking2+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1162:	68 85       	ldd	r22, Y+8	; 0x08
    1164:	79 85       	ldd	r23, Y+9	; 0x09
    1166:	8a 85       	ldd	r24, Y+10	; 0x0a
    1168:	9b 85       	ldd	r25, Y+11	; 0x0b
    116a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    116e:	dc 01       	movw	r26, r24
    1170:	cb 01       	movw	r24, r22
    1172:	9f 83       	std	Y+7, r25	; 0x07
    1174:	8e 83       	std	Y+6, r24	; 0x06
    1176:	8e 81       	ldd	r24, Y+6	; 0x06
    1178:	9f 81       	ldd	r25, Y+7	; 0x07
    117a:	9b 83       	std	Y+3, r25	; 0x03
    117c:	8a 83       	std	Y+2, r24	; 0x02
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	9b 81       	ldd	r25, Y+3	; 0x03
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	f1 f7       	brne	.-4      	; 0x1182 <UART_receiveByteSynchNonBlocking2+0x174>
    1186:	9b 83       	std	Y+3, r25	; 0x03
    1188:	8a 83       	std	Y+2, r24	; 0x02
    118a:	0f c0       	rjmp	.+30     	; 0x11aa <UART_receiveByteSynchNonBlocking2+0x19c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    118c:	69 89       	ldd	r22, Y+17	; 0x11
    118e:	7a 89       	ldd	r23, Y+18	; 0x12
    1190:	8b 89       	ldd	r24, Y+19	; 0x13
    1192:	9c 89       	ldd	r25, Y+20	; 0x14
    1194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1198:	dc 01       	movw	r26, r24
    119a:	cb 01       	movw	r24, r22
    119c:	88 8b       	std	Y+16, r24	; 0x10
    119e:	88 89       	ldd	r24, Y+16	; 0x10
    11a0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	8a 95       	dec	r24
    11a6:	f1 f7       	brne	.-4      	; 0x11a4 <UART_receiveByteSynchNonBlocking2+0x196>
    11a8:	89 83       	std	Y+1, r24	; 0x01


u8 UART_receiveByteSynchNonBlocking2()
{

	while(PtrUCSRA->RXC_BIT == 0 && Time_Out3 > 0)
    11aa:	e0 91 a8 03 	lds	r30, 0x03A8
    11ae:	f0 91 a9 03 	lds	r31, 0x03A9
    11b2:	80 81       	ld	r24, Z
    11b4:	80 78       	andi	r24, 0x80	; 128
    11b6:	88 23       	and	r24, r24
    11b8:	29 f4       	brne	.+10     	; 0x11c4 <UART_receiveByteSynchNonBlocking2+0x1b6>
    11ba:	80 91 b6 03 	lds	r24, 0x03B6
    11be:	88 23       	and	r24, r24
    11c0:	09 f0       	breq	.+2      	; 0x11c4 <UART_receiveByteSynchNonBlocking2+0x1b6>
    11c2:	30 cf       	rjmp	.-416    	; 0x1024 <UART_receiveByteSynchNonBlocking2+0x16>
	{
		Time_Out3--;
		_delay_us(5);
	}

	return UART_UDR_REG;
    11c4:	ec e2       	ldi	r30, 0x2C	; 44
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
}
    11ca:	68 96       	adiw	r28, 0x18	; 24
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <UART_Set_CallBack>:


/**************************************************/
void UART_Set_CallBack(void (*PtrFun)(void))
{
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <UART_Set_CallBack+0x6>
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	9a 83       	std	Y+2, r25	; 0x02
    11e8:	89 83       	std	Y+1, r24	; 0x01
	if(PtrFun != NULL)
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	9a 81       	ldd	r25, Y+2	; 0x02
    11ee:	00 97       	sbiw	r24, 0x00	; 0
    11f0:	31 f0       	breq	.+12     	; 0x11fe <UART_Set_CallBack+0x22>
	{
		UART_CallBack = PtrFun;
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	9a 81       	ldd	r25, Y+2	; 0x02
    11f6:	90 93 6c 04 	sts	0x046C, r25
    11fa:	80 93 6b 04 	sts	0x046B, r24
	}
}
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	08 95       	ret

00001208 <__vector_13>:


/******************************/
ISR(USART_RXC_vect)
{
    1208:	1f 92       	push	r1
    120a:	0f 92       	push	r0
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	0f 92       	push	r0
    1210:	11 24       	eor	r1, r1
    1212:	2f 93       	push	r18
    1214:	3f 93       	push	r19
    1216:	4f 93       	push	r20
    1218:	5f 93       	push	r21
    121a:	6f 93       	push	r22
    121c:	7f 93       	push	r23
    121e:	8f 93       	push	r24
    1220:	9f 93       	push	r25
    1222:	af 93       	push	r26
    1224:	bf 93       	push	r27
    1226:	ef 93       	push	r30
    1228:	ff 93       	push	r31
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
		
	if(UART_CallBack != NULL)
    1232:	80 91 6b 04 	lds	r24, 0x046B
    1236:	90 91 6c 04 	lds	r25, 0x046C
    123a:	00 97       	sbiw	r24, 0x00	; 0
    123c:	29 f0       	breq	.+10     	; 0x1248 <__vector_13+0x40>
	{
		UART_CallBack();
    123e:	e0 91 6b 04 	lds	r30, 0x046B
    1242:	f0 91 6c 04 	lds	r31, 0x046C
    1246:	09 95       	icall
	}
	
}
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	ff 91       	pop	r31
    124e:	ef 91       	pop	r30
    1250:	bf 91       	pop	r27
    1252:	af 91       	pop	r26
    1254:	9f 91       	pop	r25
    1256:	8f 91       	pop	r24
    1258:	7f 91       	pop	r23
    125a:	6f 91       	pop	r22
    125c:	5f 91       	pop	r21
    125e:	4f 91       	pop	r20
    1260:	3f 91       	pop	r19
    1262:	2f 91       	pop	r18
    1264:	0f 90       	pop	r0
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	0f 90       	pop	r0
    126a:	1f 90       	pop	r1
    126c:	18 95       	reti

0000126e <M_TIMER1_void_Init>:

void (*ICU_CallBackFun)(void) = NULL ;


void M_TIMER1_void_Init(TIMER_1_MD Local_Mode,TIMER_1_WG Local_WG)
{
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	00 d0       	rcall	.+0      	; 0x1274 <M_TIMER1_void_Init+0x6>
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	89 83       	std	Y+1, r24	; 0x01
    127a:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_Mode == TIMER_1_NM)
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	88 23       	and	r24, r24
    1280:	a9 f5       	brne	.+106    	; 0x12ec <M_TIMER1_void_Init+0x7e>
	{
		/*Select normal mode*/
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1282:	af e4       	ldi	r26, 0x4F	; 79
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	ef e4       	ldi	r30, 0x4F	; 79
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	8e 7f       	andi	r24, 0xFE	; 254
    128e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1290:	af e4       	ldi	r26, 0x4F	; 79
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	ef e4       	ldi	r30, 0x4F	; 79
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	8d 7f       	andi	r24, 0xFD	; 253
    129c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    129e:	ae e4       	ldi	r26, 0x4E	; 78
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	ee e4       	ldi	r30, 0x4E	; 78
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	91 81       	ldd	r25, Z+1	; 0x01
    12aa:	87 7f       	andi	r24, 0xF7	; 247
    12ac:	11 96       	adiw	r26, 0x01	; 1
    12ae:	9c 93       	st	X, r25
    12b0:	8e 93       	st	-X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    12b2:	ae e4       	ldi	r26, 0x4E	; 78
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	ee e4       	ldi	r30, 0x4E	; 78
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	91 81       	ldd	r25, Z+1	; 0x01
    12be:	8f 7e       	andi	r24, 0xEF	; 239
    12c0:	11 96       	adiw	r26, 0x01	; 1
    12c2:	9c 93       	st	X, r25
    12c4:	8e 93       	st	-X, r24
		if(Local_WG == TIMER_1_NWG)
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	88 23       	and	r24, r24
    12ca:	09 f0       	breq	.+2      	; 0x12ce <M_TIMER1_void_Init+0x60>
    12cc:	45 c0       	rjmp	.+138    	; 0x1358 <M_TIMER1_void_Init+0xea>
		{
			/*Select compare output mode*/
			CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    12ce:	af e4       	ldi	r26, 0x4F	; 79
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	ef e4       	ldi	r30, 0x4F	; 79
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	8f 7b       	andi	r24, 0xBF	; 191
    12da:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    12dc:	af e4       	ldi	r26, 0x4F	; 79
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	ef e4       	ldi	r30, 0x4F	; 79
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	8f 77       	andi	r24, 0x7F	; 127
    12e8:	8c 93       	st	X, r24
    12ea:	36 c0       	rjmp	.+108    	; 0x1358 <M_TIMER1_void_Init+0xea>
		}
	}
	else if(Local_Mode == Timer_1_Fast_PWM)
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	81 30       	cpi	r24, 0x01	; 1
    12f0:	99 f5       	brne	.+102    	; 0x1358 <M_TIMER1_void_Init+0xea>
	{
		/*Setting waveform for fast PWM*/
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    12f2:	af e4       	ldi	r26, 0x4F	; 79
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	ef e4       	ldi	r30, 0x4F	; 79
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	8e 7f       	andi	r24, 0xFE	; 254
    12fe:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    1300:	af e4       	ldi	r26, 0x4F	; 79
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	ef e4       	ldi	r30, 0x4F	; 79
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	82 60       	ori	r24, 0x02	; 2
    130c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    130e:	ae e4       	ldi	r26, 0x4E	; 78
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	ee e4       	ldi	r30, 0x4E	; 78
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	91 81       	ldd	r25, Z+1	; 0x01
    131a:	88 60       	ori	r24, 0x08	; 8
    131c:	11 96       	adiw	r26, 0x01	; 1
    131e:	9c 93       	st	X, r25
    1320:	8e 93       	st	-X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    1322:	ae e4       	ldi	r26, 0x4E	; 78
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	ee e4       	ldi	r30, 0x4E	; 78
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	91 81       	ldd	r25, Z+1	; 0x01
    132e:	80 61       	ori	r24, 0x10	; 16
    1330:	11 96       	adiw	r26, 0x01	; 1
    1332:	9c 93       	st	X, r25
    1334:	8e 93       	st	-X, r24
		if(Local_WG==TIMER_1_NonINV)
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	81 30       	cpi	r24, 0x01	; 1
    133a:	71 f4       	brne	.+28     	; 0x1358 <M_TIMER1_void_Init+0xea>
		{
			/*Select Fast-PWM Non-inverting mode*/
			SET_BIT(TCCR1A,TCCR1A_COM1A1);
    133c:	af e4       	ldi	r26, 0x4F	; 79
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	ef e4       	ldi	r30, 0x4F	; 79
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	80 68       	ori	r24, 0x80	; 128
    1348:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    134a:	af e4       	ldi	r26, 0x4F	; 79
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	ef e4       	ldi	r30, 0x4F	; 79
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	8f 7b       	andi	r24, 0xBF	; 191
    1356:	8c 93       	st	X, r24
		}
	}
}
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <M_TIMER1_void_FastPWM>:
void M_TIMER1_void_FastPWM(u16 Duty_Cycle)
{
    1362:	0f 93       	push	r16
    1364:	1f 93       	push	r17
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	00 d0       	rcall	.+0      	; 0x136c <M_TIMER1_void_FastPWM+0xa>
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
    1370:	9a 83       	std	Y+2, r25	; 0x02
    1372:	89 83       	std	Y+1, r24	; 0x01
	/*Select compare output mode*/
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1374:	af e4       	ldi	r26, 0x4F	; 79
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	ef e4       	ldi	r30, 0x4F	; 79
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	80 68       	ori	r24, 0x80	; 128
    1380:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    1382:	af e4       	ldi	r26, 0x4F	; 79
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	ef e4       	ldi	r30, 0x4F	; 79
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	8f 7b       	andi	r24, 0xBF	; 191
    138e:	8c 93       	st	X, r24
	/*Set the top value for timer1 counts where overflow occurs*/
	ICR1=TOP_VALUE;
    1390:	e6 e4       	ldi	r30, 0x46	; 70
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	8f ef       	ldi	r24, 0xFF	; 255
    1396:	9f ef       	ldi	r25, 0xFF	; 255
    1398:	91 83       	std	Z+1, r25	; 0x01
    139a:	80 83       	st	Z, r24
	/*OCR1A Value = On time since it's non inverting mode*/
	OCR1A=((Duty_Cycle*TOP_VALUE)/100)-1;
    139c:	0a e4       	ldi	r16, 0x4A	; 74
    139e:	10 e0       	ldi	r17, 0x00	; 0
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	9a 81       	ldd	r25, Y+2	; 0x02
    13a4:	cc 01       	movw	r24, r24
    13a6:	a0 e0       	ldi	r26, 0x00	; 0
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	2f ef       	ldi	r18, 0xFF	; 255
    13ac:	3f ef       	ldi	r19, 0xFF	; 255
    13ae:	40 e0       	ldi	r20, 0x00	; 0
    13b0:	50 e0       	ldi	r21, 0x00	; 0
    13b2:	bc 01       	movw	r22, r24
    13b4:	cd 01       	movw	r24, r26
    13b6:	0e 94 b8 35 	call	0x6b70	; 0x6b70 <__mulsi3>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	24 e6       	ldi	r18, 0x64	; 100
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	40 e0       	ldi	r20, 0x00	; 0
    13c4:	50 e0       	ldi	r21, 0x00	; 0
    13c6:	bc 01       	movw	r22, r24
    13c8:	cd 01       	movw	r24, r26
    13ca:	0e 94 18 36 	call	0x6c30	; 0x6c30 <__divmodsi4>
    13ce:	da 01       	movw	r26, r20
    13d0:	c9 01       	movw	r24, r18
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	f8 01       	movw	r30, r16
    13d6:	91 83       	std	Z+1, r25	; 0x01
    13d8:	80 83       	st	Z, r24
	M_TIMER1_void_Start(TIMER1_CLK_8);
    13da:	82 e0       	ldi	r24, 0x02	; 2
    13dc:	0e 94 f7 09 	call	0x13ee	; 0x13ee <M_TIMER1_void_Start>

}
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	1f 91       	pop	r17
    13ea:	0f 91       	pop	r16
    13ec:	08 95       	ret

000013ee <M_TIMER1_void_Start>:
void M_TIMER1_void_Start(TIMER1_PRESCALER Local_Prescaller)
{
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	0f 92       	push	r0
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	89 83       	std	Y+1, r24	; 0x01
	if(Local_Prescaller== TIMER1_CLK_8)
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	82 30       	cpi	r24, 0x02	; 2
    13fe:	f1 f4       	brne	.+60     	; 0x143c <M_TIMER1_void_Start+0x4e>
	{
		CLR_BIT(TCCR1B,TCCR1B_CS10);
    1400:	ae e4       	ldi	r26, 0x4E	; 78
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	ee e4       	ldi	r30, 0x4E	; 78
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	91 81       	ldd	r25, Z+1	; 0x01
    140c:	8e 7f       	andi	r24, 0xFE	; 254
    140e:	11 96       	adiw	r26, 0x01	; 1
    1410:	9c 93       	st	X, r25
    1412:	8e 93       	st	-X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    1414:	ae e4       	ldi	r26, 0x4E	; 78
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	ee e4       	ldi	r30, 0x4E	; 78
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	91 81       	ldd	r25, Z+1	; 0x01
    1420:	82 60       	ori	r24, 0x02	; 2
    1422:	11 96       	adiw	r26, 0x01	; 1
    1424:	9c 93       	st	X, r25
    1426:	8e 93       	st	-X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);
    1428:	ae e4       	ldi	r26, 0x4E	; 78
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	ee e4       	ldi	r30, 0x4E	; 78
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	91 81       	ldd	r25, Z+1	; 0x01
    1434:	8b 7f       	andi	r24, 0xFB	; 251
    1436:	11 96       	adiw	r26, 0x01	; 1
    1438:	9c 93       	st	X, r25
    143a:	8e 93       	st	-X, r24
	}
}
    143c:	0f 90       	pop	r0
    143e:	cf 91       	pop	r28
    1440:	df 91       	pop	r29
    1442:	08 95       	ret

00001444 <M_TIMER1_void_Stop>:
void M_TIMER1_void_Stop(void)
{
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    144c:	af e4       	ldi	r26, 0x4F	; 79
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	ef e4       	ldi	r30, 0x4F	; 79
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	8f 7b       	andi	r24, 0xBF	; 191
    1458:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    145a:	af e4       	ldi	r26, 0x4F	; 79
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	ef e4       	ldi	r30, 0x4F	; 79
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	8f 77       	andi	r24, 0x7F	; 127
    1466:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    1468:	ae e4       	ldi	r26, 0x4E	; 78
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	ee e4       	ldi	r30, 0x4E	; 78
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	91 81       	ldd	r25, Z+1	; 0x01
    1474:	8e 7f       	andi	r24, 0xFE	; 254
    1476:	11 96       	adiw	r26, 0x01	; 1
    1478:	9c 93       	st	X, r25
    147a:	8e 93       	st	-X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS11);
    147c:	ae e4       	ldi	r26, 0x4E	; 78
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	ee e4       	ldi	r30, 0x4E	; 78
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	91 81       	ldd	r25, Z+1	; 0x01
    1488:	8d 7f       	andi	r24, 0xFD	; 253
    148a:	11 96       	adiw	r26, 0x01	; 1
    148c:	9c 93       	st	X, r25
    148e:	8e 93       	st	-X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    1490:	ae e4       	ldi	r26, 0x4E	; 78
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	ee e4       	ldi	r30, 0x4E	; 78
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	91 81       	ldd	r25, Z+1	; 0x01
    149c:	8b 7f       	andi	r24, 0xFB	; 251
    149e:	11 96       	adiw	r26, 0x01	; 1
    14a0:	9c 93       	st	X, r25
    14a2:	8e 93       	st	-X, r24

}
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <M_TIMER1_void_ICU_Enable>:

void M_TIMER1_void_ICU_Enable(void)
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
	/*Enable ICU Interrupt*/
	SET_BIT(TIMSK,TIMSK_TICIE1);
    14b2:	a9 e5       	ldi	r26, 0x59	; 89
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e9 e5       	ldi	r30, 0x59	; 89
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	80 62       	ori	r24, 0x20	; 32
    14be:	8c 93       	st	X, r24
	/*Set trigger to rising edge*/
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    14c0:	ae e4       	ldi	r26, 0x4E	; 78
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	ee e4       	ldi	r30, 0x4E	; 78
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	91 81       	ldd	r25, Z+1	; 0x01
    14cc:	80 64       	ori	r24, 0x40	; 64
    14ce:	11 96       	adiw	r26, 0x01	; 1
    14d0:	9c 93       	st	X, r25
    14d2:	8e 93       	st	-X, r24

}
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <M_TIMER1_void_ICU_TriggerSelect>:


void M_TIMER1_void_ICU_TriggerSelect(ICU_Trigger Local_Trigger)
{
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	0f 92       	push	r0
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	89 83       	std	Y+1, r24	; 0x01
	if(Local_Trigger == ICU_FALLING)
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	88 23       	and	r24, r24
    14ea:	59 f4       	brne	.+22     	; 0x1502 <M_TIMER1_void_ICU_TriggerSelect+0x28>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    14ec:	ae e4       	ldi	r26, 0x4E	; 78
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	ee e4       	ldi	r30, 0x4E	; 78
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	91 81       	ldd	r25, Z+1	; 0x01
    14f8:	8f 7b       	andi	r24, 0xBF	; 191
    14fa:	11 96       	adiw	r26, 0x01	; 1
    14fc:	9c 93       	st	X, r25
    14fe:	8e 93       	st	-X, r24
    1500:	0d c0       	rjmp	.+26     	; 0x151c <M_TIMER1_void_ICU_TriggerSelect+0x42>

	}
	else if(Local_Trigger == ICU_RISING)
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	81 30       	cpi	r24, 0x01	; 1
    1506:	51 f4       	brne	.+20     	; 0x151c <M_TIMER1_void_ICU_TriggerSelect+0x42>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    1508:	ae e4       	ldi	r26, 0x4E	; 78
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	ee e4       	ldi	r30, 0x4E	; 78
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	91 81       	ldd	r25, Z+1	; 0x01
    1514:	80 64       	ori	r24, 0x40	; 64
    1516:	11 96       	adiw	r26, 0x01	; 1
    1518:	9c 93       	st	X, r25
    151a:	8e 93       	st	-X, r24

	}
}
    151c:	0f 90       	pop	r0
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <M_TIMER1_void_ICU_INTERRUPTDIS>:

void M_TIMER1_void_ICU_INTERRUPTDIS(void)
{
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
	/*Enable ICU Interrupt*/
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    152c:	a9 e5       	ldi	r26, 0x59	; 89
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e9 e5       	ldi	r30, 0x59	; 89
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	8f 7d       	andi	r24, 0xDF	; 223
    1538:	8c 93       	st	X, r24
}
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	08 95       	ret

00001540 <M_TIMER1_void_ICU_Reading>:

u16 M_TIMER1_void_ICU_Reading(void)
{
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1548:	e6 e4       	ldi	r30, 0x46	; 70
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	91 81       	ldd	r25, Z+1	; 0x01
}
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <M_TIMER1_void_ICU_SetCallBack>:

void M_TIMER1_void_ICU_SetCallBack(void)
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62

}
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	08 95       	ret

00001564 <M_TIMER1_u8_Reset_flag>:

u8 M_TIMER1_u8_Reset_flag(TIMER1_INTERRUPT_TYPE Local_type)
{
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	0f 92       	push	r0
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
    156e:	89 83       	std	Y+1, r24	; 0x01
	if(Local_type == TIMER1_ICU)
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	88 23       	and	r24, r24
    1574:	41 f4       	brne	.+16     	; 0x1586 <M_TIMER1_u8_Reset_flag+0x22>
	{
		SET_BIT(TIFR,TIFR_ICF1);
    1576:	a8 e5       	ldi	r26, 0x58	; 88
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e8 e5       	ldi	r30, 0x58	; 88
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	80 62       	ori	r24, 0x20	; 32
    1582:	8c 93       	st	X, r24
    1584:	0a c0       	rjmp	.+20     	; 0x159a <M_TIMER1_u8_Reset_flag+0x36>
	}
	else if(Local_type == TIMER1_OVF)
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	83 30       	cpi	r24, 0x03	; 3
    158a:	39 f4       	brne	.+14     	; 0x159a <M_TIMER1_u8_Reset_flag+0x36>
	{
		SET_BIT(TIFR,TIFR_TOV1);
    158c:	a8 e5       	ldi	r26, 0x58	; 88
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e8 e5       	ldi	r30, 0x58	; 88
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	84 60       	ori	r24, 0x04	; 4
    1598:	8c 93       	st	X, r24
	}
	return 0;
    159a:	80 e0       	ldi	r24, 0x00	; 0
}
    159c:	0f 90       	pop	r0
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	08 95       	ret

000015a4 <M_vTIMER0_Init>:

/*******************************************************************/
/*******************************************************************/

void M_vTIMER0_Init(TIMER0_MODES_t TIMER0_MODE, u8 OC0_MODE)
{
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	00 d0       	rcall	.+0      	; 0x15aa <M_vTIMER0_Init+0x6>
    15aa:	00 d0       	rcall	.+0      	; 0x15ac <M_vTIMER0_Init+0x8>
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	89 83       	std	Y+1, r24	; 0x01
    15b2:	6a 83       	std	Y+2, r22	; 0x02
	//u8 Timer0_Mode = TIMER0_Cfg.TIMER0_MODE;
	//u8 OC0_MODE;

	switch(TIMER0_MODE)
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	3c 83       	std	Y+4, r19	; 0x04
    15bc:	2b 83       	std	Y+3, r18	; 0x03
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	9c 81       	ldd	r25, Y+4	; 0x04
    15c2:	88 30       	cpi	r24, 0x08	; 8
    15c4:	91 05       	cpc	r25, r1
    15c6:	09 f4       	brne	.+2      	; 0x15ca <M_vTIMER0_Init+0x26>
    15c8:	51 c0       	rjmp	.+162    	; 0x166c <M_vTIMER0_Init+0xc8>
    15ca:	2b 81       	ldd	r18, Y+3	; 0x03
    15cc:	3c 81       	ldd	r19, Y+4	; 0x04
    15ce:	29 30       	cpi	r18, 0x09	; 9
    15d0:	31 05       	cpc	r19, r1
    15d2:	2c f4       	brge	.+10     	; 0x15de <M_vTIMER0_Init+0x3a>
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	9c 81       	ldd	r25, Y+4	; 0x04
    15d8:	00 97       	sbiw	r24, 0x00	; 0
    15da:	69 f0       	breq	.+26     	; 0x15f6 <M_vTIMER0_Init+0x52>
    15dc:	82 c0       	rjmp	.+260    	; 0x16e2 <M_vTIMER0_Init+0x13e>
    15de:	2b 81       	ldd	r18, Y+3	; 0x03
    15e0:	3c 81       	ldd	r19, Y+4	; 0x04
    15e2:	20 34       	cpi	r18, 0x40	; 64
    15e4:	31 05       	cpc	r19, r1
    15e6:	21 f1       	breq	.+72     	; 0x1630 <M_vTIMER0_Init+0x8c>
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	9c 81       	ldd	r25, Y+4	; 0x04
    15ec:	88 34       	cpi	r24, 0x48	; 72
    15ee:	91 05       	cpc	r25, r1
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <M_vTIMER0_Init+0x50>
    15f2:	5a c0       	rjmp	.+180    	; 0x16a8 <M_vTIMER0_Init+0x104>
    15f4:	76 c0       	rjmp	.+236    	; 0x16e2 <M_vTIMER0_Init+0x13e>

	{
	    case TIMER0_NORMAL_MODE:
	    						/* ENABLE SELECTED MODE  */
	    						APPLY_MASK(TIMER0_TCCR0_REG, TIMER0_WGM_MASK);
    15f6:	a3 e5       	ldi	r26, 0x53	; 83
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e3 e5       	ldi	r30, 0x53	; 83
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	87 7b       	andi	r24, 0xB7	; 183
    1602:	8c 93       	st	X, r24
	    						SET_REG(TIMER0_TCCR0_REG, TIMER0_NORMAL_MODE);
    1604:	a3 e5       	ldi	r26, 0x53	; 83
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e3 e5       	ldi	r30, 0x53	; 83
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	8c 93       	st	X, r24

	    						/* select COM Mode */
	    						APPLY_MASK(TIMER0_TCCR0_REG, TIMER0_COM_MASK);
    1610:	a3 e5       	ldi	r26, 0x53	; 83
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e3 e5       	ldi	r30, 0x53	; 83
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	8f 7c       	andi	r24, 0xCF	; 207
    161c:	8c 93       	st	X, r24
	    						//OC0_MODE = TIMER0_Cfg.TIMER0_OC0_MODE.OC0_NONPWM_MODE;
	    						SET_REG(TIMER0_TCCR0_REG, (OC0_MODE));
    161e:	a3 e5       	ldi	r26, 0x53	; 83
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e3 e5       	ldi	r30, 0x53	; 83
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	90 81       	ld	r25, Z
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	89 2b       	or	r24, r25
    162c:	8c 93       	st	X, r24
    162e:	59 c0       	rjmp	.+178    	; 0x16e2 <M_vTIMER0_Init+0x13e>

	    						break;

	    case TIMER0_PWM_PhaseCorrect_MODE:
								/* ENABLE SELECTED MODE  */
								APPLY_MASK(TIMER0_TCCR0_REG, TIMER0_WGM_MASK);
    1630:	a3 e5       	ldi	r26, 0x53	; 83
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e3 e5       	ldi	r30, 0x53	; 83
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	87 7b       	andi	r24, 0xB7	; 183
    163c:	8c 93       	st	X, r24
								SET_REG(TIMER0_TCCR0_REG, TIMER0_PWM_PhaseCorrect_MODE);
    163e:	a3 e5       	ldi	r26, 0x53	; 83
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e3 e5       	ldi	r30, 0x53	; 83
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	80 64       	ori	r24, 0x40	; 64
    164a:	8c 93       	st	X, r24

	    						/* select COM Mode */
	    						APPLY_MASK(TIMER0_TCCR0_REG, TIMER0_COM_MASK);
    164c:	a3 e5       	ldi	r26, 0x53	; 83
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e3 e5       	ldi	r30, 0x53	; 83
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	8f 7c       	andi	r24, 0xCF	; 207
    1658:	8c 93       	st	X, r24
	    						//OC0_MODE = TIMER0_Cfg.TIMER0_OC0_MODE.OC0_PHASECORRECT_MODE;
	    						SET_REG(TIMER0_TCCR0_REG, (OC0_MODE));
    165a:	a3 e5       	ldi	r26, 0x53	; 83
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	e3 e5       	ldi	r30, 0x53	; 83
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	90 81       	ld	r25, Z
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	89 2b       	or	r24, r25
    1668:	8c 93       	st	X, r24
    166a:	3b c0       	rjmp	.+118    	; 0x16e2 <M_vTIMER0_Init+0x13e>
								break;

	    case TIMER0_CTC_MODE:
	    					   /* ENABLE SELECTED MODE  */
							   APPLY_MASK(TIMER0_TCCR0_REG, TIMER0_WGM_MASK);
    166c:	a3 e5       	ldi	r26, 0x53	; 83
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	e3 e5       	ldi	r30, 0x53	; 83
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	87 7b       	andi	r24, 0xB7	; 183
    1678:	8c 93       	st	X, r24
							   SET_REG(TIMER0_TCCR0_REG, TIMER0_CTC_MODE);
    167a:	a3 e5       	ldi	r26, 0x53	; 83
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e3 e5       	ldi	r30, 0x53	; 83
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	88 60       	ori	r24, 0x08	; 8
    1686:	8c 93       	st	X, r24

	    						/* select COM Mode */
	    						APPLY_MASK(TIMER0_TCCR0_REG, TIMER0_COM_MASK);
    1688:	a3 e5       	ldi	r26, 0x53	; 83
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e3 e5       	ldi	r30, 0x53	; 83
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	8f 7c       	andi	r24, 0xCF	; 207
    1694:	8c 93       	st	X, r24
	    						//OC0_MODE = TIMER0_Cfg.TIMER0_OC0_MODE.OC0_NONPWM_MODE;
	    						SET_REG(TIMER0_TCCR0_REG, (OC0_MODE));
    1696:	a3 e5       	ldi	r26, 0x53	; 83
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e3 e5       	ldi	r30, 0x53	; 83
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	90 81       	ld	r25, Z
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	89 2b       	or	r24, r25
    16a4:	8c 93       	st	X, r24
    16a6:	1d c0       	rjmp	.+58     	; 0x16e2 <M_vTIMER0_Init+0x13e>
							   break;

	    case TIMER0_PWM_FAST_MODE:
	    						/* ENABLE SELECTED MODE  */
							   APPLY_MASK(TIMER0_TCCR0_REG, TIMER0_WGM_MASK);
    16a8:	a3 e5       	ldi	r26, 0x53	; 83
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	e3 e5       	ldi	r30, 0x53	; 83
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	87 7b       	andi	r24, 0xB7	; 183
    16b4:	8c 93       	st	X, r24
							   SET_REG(TIMER0_TCCR0_REG, TIMER0_PWM_FAST_MODE);
    16b6:	a3 e5       	ldi	r26, 0x53	; 83
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	e3 e5       	ldi	r30, 0x53	; 83
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	88 64       	ori	r24, 0x48	; 72
    16c2:	8c 93       	st	X, r24

	    						/* select COM Mode */
	    						APPLY_MASK(TIMER0_TCCR0_REG, TIMER0_COM_MASK);
    16c4:	a3 e5       	ldi	r26, 0x53	; 83
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e3 e5       	ldi	r30, 0x53	; 83
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	8f 7c       	andi	r24, 0xCF	; 207
    16d0:	8c 93       	st	X, r24
	    						//OC0_MODE = TIMER0_Cfg.TIMER0_OC0_MODE.OC0_FASTPWM_MODE;
	    						SET_REG(TIMER0_TCCR0_REG, (OC0_MODE));
    16d2:	a3 e5       	ldi	r26, 0x53	; 83
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e3 e5       	ldi	r30, 0x53	; 83
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	90 81       	ld	r25, Z
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	89 2b       	or	r24, r25
    16e0:	8c 93       	st	X, r24

	    default: 			   break;


	}
}
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	08 95       	ret

000016f0 <M_vTIMER0_Start>:

/*******************************************************************/
/*******************************************************************/
void M_vTIMER0_Start(TIMER0_Prescaler_t	CLK_Src_Prescaler )
{
    16f0:	df 93       	push	r29
    16f2:	cf 93       	push	r28
    16f4:	00 d0       	rcall	.+0      	; 0x16f6 <M_vTIMER0_Start+0x6>
    16f6:	00 d0       	rcall	.+0      	; 0x16f8 <M_vTIMER0_Start+0x8>
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
    16fc:	9a 83       	std	Y+2, r25	; 0x02
    16fe:	89 83       	std	Y+1, r24	; 0x01

	//TIMER0_OCR0_REG = TIMER0_OCR_VALUE;

	switch(CLK_Src_Prescaler)
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	9a 81       	ldd	r25, Y+2	; 0x02
    1704:	9c 83       	std	Y+4, r25	; 0x04
    1706:	8b 83       	std	Y+3, r24	; 0x03
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	9c 81       	ldd	r25, Y+4	; 0x04
    170c:	80 34       	cpi	r24, 0x40	; 64
    170e:	91 05       	cpc	r25, r1
    1710:	d9 f1       	breq	.+118    	; 0x1788 <M_vTIMER0_Start+0x98>
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	9c 81       	ldd	r25, Y+4	; 0x04
    1716:	81 34       	cpi	r24, 0x41	; 65
    1718:	91 05       	cpc	r25, r1
    171a:	58 f4       	brcc	.+22     	; 0x1732 <M_vTIMER0_Start+0x42>
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	9c 81       	ldd	r25, Y+4	; 0x04
    1720:	81 30       	cpi	r24, 0x01	; 1
    1722:	91 05       	cpc	r25, r1
    1724:	99 f0       	breq	.+38     	; 0x174c <M_vTIMER0_Start+0x5c>
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	9c 81       	ldd	r25, Y+4	; 0x04
    172a:	88 30       	cpi	r24, 0x08	; 8
    172c:	91 05       	cpc	r25, r1
    172e:	e9 f0       	breq	.+58     	; 0x176a <M_vTIMER0_Start+0x7a>
    1730:	57 c0       	rjmp	.+174    	; 0x17e0 <M_vTIMER0_Start+0xf0>
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	9c 81       	ldd	r25, Y+4	; 0x04
    1736:	21 e0       	ldi	r18, 0x01	; 1
    1738:	80 30       	cpi	r24, 0x00	; 0
    173a:	92 07       	cpc	r25, r18
    173c:	a1 f1       	breq	.+104    	; 0x17a6 <M_vTIMER0_Start+0xb6>
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	9c 81       	ldd	r25, Y+4	; 0x04
    1742:	24 e0       	ldi	r18, 0x04	; 4
    1744:	80 30       	cpi	r24, 0x00	; 0
    1746:	92 07       	cpc	r25, r18
    1748:	e9 f1       	breq	.+122    	; 0x17c4 <M_vTIMER0_Start+0xd4>
    174a:	4a c0       	rjmp	.+148    	; 0x17e0 <M_vTIMER0_Start+0xf0>
	{

		case NO_PRESCALING:
							 APPLY_MASK(TIMER0_TCCR0_REG, TIMER0_CS_MASK);
    174c:	a3 e5       	ldi	r26, 0x53	; 83
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	e3 e5       	ldi	r30, 0x53	; 83
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	88 7f       	andi	r24, 0xF8	; 248
    1758:	8c 93       	st	X, r24
							 SET_REG(TIMER0_TCCR0_REG, TIMER0_CLK_NO_PRESCALING);
    175a:	a3 e5       	ldi	r26, 0x53	; 83
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e3 e5       	ldi	r30, 0x53	; 83
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	81 60       	ori	r24, 0x01	; 1
    1766:	8c 93       	st	X, r24
    1768:	3b c0       	rjmp	.+118    	; 0x17e0 <M_vTIMER0_Start+0xf0>
							 break;

		case PRESCALER8:
							 APPLY_MASK(TIMER0_TCCR0_REG, TIMER0_CS_MASK);
    176a:	a3 e5       	ldi	r26, 0x53	; 83
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	e3 e5       	ldi	r30, 0x53	; 83
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	88 7f       	andi	r24, 0xF8	; 248
    1776:	8c 93       	st	X, r24
							 SET_REG(TIMER0_TCCR0_REG, TIMER0_CLK_PRESCALER8);
    1778:	a3 e5       	ldi	r26, 0x53	; 83
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e3 e5       	ldi	r30, 0x53	; 83
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	82 60       	ori	r24, 0x02	; 2
    1784:	8c 93       	st	X, r24
    1786:	2c c0       	rjmp	.+88     	; 0x17e0 <M_vTIMER0_Start+0xf0>
							 break;

		case PRESCALER64:
		                     APPLY_MASK(TIMER0_TCCR0_REG, TIMER0_CS_MASK);
    1788:	a3 e5       	ldi	r26, 0x53	; 83
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e3 e5       	ldi	r30, 0x53	; 83
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	88 7f       	andi	r24, 0xF8	; 248
    1794:	8c 93       	st	X, r24
		                     SET_REG(TIMER0_TCCR0_REG, TIMER0_CLK_PRESCALER64);
    1796:	a3 e5       	ldi	r26, 0x53	; 83
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e3 e5       	ldi	r30, 0x53	; 83
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	83 60       	ori	r24, 0x03	; 3
    17a2:	8c 93       	st	X, r24
    17a4:	1d c0       	rjmp	.+58     	; 0x17e0 <M_vTIMER0_Start+0xf0>
		                     break;

		case PRESCALER256:
							 APPLY_MASK(TIMER0_TCCR0_REG, TIMER0_CS_MASK);
    17a6:	a3 e5       	ldi	r26, 0x53	; 83
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e3 e5       	ldi	r30, 0x53	; 83
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	88 7f       	andi	r24, 0xF8	; 248
    17b2:	8c 93       	st	X, r24
							 SET_REG(TIMER0_TCCR0_REG, TIMER0_CLK_PRESCALER256);
    17b4:	a3 e5       	ldi	r26, 0x53	; 83
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e3 e5       	ldi	r30, 0x53	; 83
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	84 60       	ori	r24, 0x04	; 4
    17c0:	8c 93       	st	X, r24
    17c2:	0e c0       	rjmp	.+28     	; 0x17e0 <M_vTIMER0_Start+0xf0>
							 break;

		case PRESCALER1024:
							 APPLY_MASK(TIMER0_TCCR0_REG, TIMER0_CS_MASK);
    17c4:	a3 e5       	ldi	r26, 0x53	; 83
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e3 e5       	ldi	r30, 0x53	; 83
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	88 7f       	andi	r24, 0xF8	; 248
    17d0:	8c 93       	st	X, r24
							 SET_REG(TIMER0_TCCR0_REG, TIMER0_CLK_PRESCALER1024);
    17d2:	a3 e5       	ldi	r26, 0x53	; 83
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e3 e5       	ldi	r30, 0x53	; 83
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	85 60       	ori	r24, 0x05	; 5
    17de:	8c 93       	st	X, r24
							 break;

	}

}
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <M_vTIMER0_Stop>:


/*******************************************************************/
/*******************************************************************/
void M_vTIMER0_Stop(void){
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62

 APPLY_MASK(TIMER0_TCCR0_REG, TIMER0_CS_MASK);
    17f6:	a3 e5       	ldi	r26, 0x53	; 83
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e3 e5       	ldi	r30, 0x53	; 83
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	88 7f       	andi	r24, 0xF8	; 248
    1802:	8c 93       	st	X, r24
 SET_REG(TIMER0_TCCR0_REG, TIMER0_NO_CLK);
    1804:	a3 e5       	ldi	r26, 0x53	; 83
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e3 e5       	ldi	r30, 0x53	; 83
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	8c 93       	st	X, r24

}
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <M_vTIMER0_GetCounts>:



/*******************************************************************/
/*******************************************************************/
void M_vTIMER0_GetCounts(void){
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62

}
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <M_vTIMER0_SetDelayTimeMilliSec>:


/*******************************************************************/
/*******************************************************************/
u32 M_vTIMER0_SetDelayTimeMilliSec(u32 millisec , TIMER0_Prescaler_t  Prescaler, TIMER0_MODES_t MODE){
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	69 97       	sbiw	r28, 0x19	; 25
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	69 8b       	std	Y+17, r22	; 0x11
    183a:	7a 8b       	std	Y+18, r23	; 0x12
    183c:	8b 8b       	std	Y+19, r24	; 0x13
    183e:	9c 8b       	std	Y+20, r25	; 0x14
    1840:	5e 8b       	std	Y+22, r21	; 0x16
    1842:	4d 8b       	std	Y+21, r20	; 0x15
    1844:	2f 8b       	std	Y+23, r18	; 0x17

	f32 TickTime;
	u32 Remaining_OverFlowCount;
	TickTime = ((f32)Prescaler*1000000 / FCPU);
    1846:	8d 89       	ldd	r24, Y+21	; 0x15
    1848:	9e 89       	ldd	r25, Y+22	; 0x16
    184a:	cc 01       	movw	r24, r24
    184c:	a0 e0       	ldi	r26, 0x00	; 0
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	bc 01       	movw	r22, r24
    1852:	cd 01       	movw	r24, r26
    1854:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	bc 01       	movw	r22, r24
    185e:	cd 01       	movw	r24, r26
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	34 e2       	ldi	r19, 0x24	; 36
    1864:	44 e7       	ldi	r20, 0x74	; 116
    1866:	59 e4       	ldi	r21, 0x49	; 73
    1868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	bc 01       	movw	r22, r24
    1872:	cd 01       	movw	r24, r26
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	34 e2       	ldi	r19, 0x24	; 36
    1878:	44 e7       	ldi	r20, 0x74	; 116
    187a:	5b e4       	ldi	r21, 0x4B	; 75
    187c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	8d 87       	std	Y+13, r24	; 0x0d
    1886:	9e 87       	std	Y+14, r25	; 0x0e
    1888:	af 87       	std	Y+15, r26	; 0x0f
    188a:	b8 8b       	std	Y+16, r27	; 0x10

	u32 DesiredTick = ((millisec*1000) / TickTime);	       // *1000 to convert it to miceosec
    188c:	89 89       	ldd	r24, Y+17	; 0x11
    188e:	9a 89       	ldd	r25, Y+18	; 0x12
    1890:	ab 89       	ldd	r26, Y+19	; 0x13
    1892:	bc 89       	ldd	r27, Y+20	; 0x14
    1894:	28 ee       	ldi	r18, 0xE8	; 232
    1896:	33 e0       	ldi	r19, 0x03	; 3
    1898:	40 e0       	ldi	r20, 0x00	; 0
    189a:	50 e0       	ldi	r21, 0x00	; 0
    189c:	bc 01       	movw	r22, r24
    189e:	cd 01       	movw	r24, r26
    18a0:	0e 94 b8 35 	call	0x6b70	; 0x6b70 <__mulsi3>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	bc 01       	movw	r22, r24
    18aa:	cd 01       	movw	r24, r26
    18ac:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	bc 01       	movw	r22, r24
    18b6:	cd 01       	movw	r24, r26
    18b8:	2d 85       	ldd	r18, Y+13	; 0x0d
    18ba:	3e 85       	ldd	r19, Y+14	; 0x0e
    18bc:	4f 85       	ldd	r20, Y+15	; 0x0f
    18be:	58 89       	ldd	r21, Y+16	; 0x10
    18c0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	bc 01       	movw	r22, r24
    18ca:	cd 01       	movw	r24, r26
    18cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	8d 83       	std	Y+5, r24	; 0x05
    18d6:	9e 83       	std	Y+6, r25	; 0x06
    18d8:	af 83       	std	Y+7, r26	; 0x07
    18da:	b8 87       	std	Y+8, r27	; 0x08

	u32 MAX_OC0_VALUE = 255;
    18dc:	8f ef       	ldi	r24, 0xFF	; 255
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	a0 e0       	ldi	r26, 0x00	; 0
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	89 83       	std	Y+1, r24	; 0x01
    18e6:	9a 83       	std	Y+2, r25	; 0x02
    18e8:	ab 83       	std	Y+3, r26	; 0x03
    18ea:	bc 83       	std	Y+4, r27	; 0x04
	/*CmpMatch_Count NORMAL MODE */

	switch(MODE)
    18ec:	8f 89       	ldd	r24, Y+23	; 0x17
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	39 8f       	std	Y+25, r19	; 0x19
    18f4:	28 8f       	std	Y+24, r18	; 0x18
    18f6:	88 8d       	ldd	r24, Y+24	; 0x18
    18f8:	99 8d       	ldd	r25, Y+25	; 0x19
    18fa:	00 97       	sbiw	r24, 0x00	; 0
    18fc:	39 f0       	breq	.+14     	; 0x190c <M_vTIMER0_SetDelayTimeMilliSec+0xe8>
    18fe:	28 8d       	ldd	r18, Y+24	; 0x18
    1900:	39 8d       	ldd	r19, Y+25	; 0x19
    1902:	28 30       	cpi	r18, 0x08	; 8
    1904:	31 05       	cpc	r19, r1
    1906:	09 f4       	brne	.+2      	; 0x190a <M_vTIMER0_SetDelayTimeMilliSec+0xe6>
    1908:	49 c0       	rjmp	.+146    	; 0x199c <M_vTIMER0_SetDelayTimeMilliSec+0x178>
    190a:	70 c0       	rjmp	.+224    	; 0x19ec <M_vTIMER0_SetDelayTimeMilliSec+0x1c8>
	{

		case TIMER0_NORMAL_MODE:
								Delay_OverFlow_Count = (DesiredTick / 256);
    190c:	8d 81       	ldd	r24, Y+5	; 0x05
    190e:	9e 81       	ldd	r25, Y+6	; 0x06
    1910:	af 81       	ldd	r26, Y+7	; 0x07
    1912:	b8 85       	ldd	r27, Y+8	; 0x08
    1914:	89 2f       	mov	r24, r25
    1916:	9a 2f       	mov	r25, r26
    1918:	ab 2f       	mov	r26, r27
    191a:	bb 27       	eor	r27, r27
    191c:	80 93 b9 04 	sts	0x04B9, r24
    1920:	90 93 ba 04 	sts	0x04BA, r25
    1924:	a0 93 bb 04 	sts	0x04BB, r26
    1928:	b0 93 bc 04 	sts	0x04BC, r27
								Remaining_OverFlowCount = (DesiredTick %256);
    192c:	8d 81       	ldd	r24, Y+5	; 0x05
    192e:	9e 81       	ldd	r25, Y+6	; 0x06
    1930:	af 81       	ldd	r26, Y+7	; 0x07
    1932:	b8 85       	ldd	r27, Y+8	; 0x08
    1934:	90 70       	andi	r25, 0x00	; 0
    1936:	a0 70       	andi	r26, 0x00	; 0
    1938:	b0 70       	andi	r27, 0x00	; 0
    193a:	89 87       	std	Y+9, r24	; 0x09
    193c:	9a 87       	std	Y+10, r25	; 0x0a
    193e:	ab 87       	std	Y+11, r26	; 0x0b
    1940:	bc 87       	std	Y+12, r27	; 0x0c

								if(Remaining_OverFlowCount != 0)
    1942:	89 85       	ldd	r24, Y+9	; 0x09
    1944:	9a 85       	ldd	r25, Y+10	; 0x0a
    1946:	ab 85       	ldd	r26, Y+11	; 0x0b
    1948:	bc 85       	ldd	r27, Y+12	; 0x0c
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	a1 05       	cpc	r26, r1
    194e:	b1 05       	cpc	r27, r1
    1950:	09 f4       	brne	.+2      	; 0x1954 <M_vTIMER0_SetDelayTimeMilliSec+0x130>
    1952:	4c c0       	rjmp	.+152    	; 0x19ec <M_vTIMER0_SetDelayTimeMilliSec+0x1c8>
								{

									TIMER0_TCNT0_REG = (256 - Remaining_OverFlowCount);
    1954:	e2 e5       	ldi	r30, 0x52	; 82
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	89 85       	ldd	r24, Y+9	; 0x09
    195a:	81 95       	neg	r24
    195c:	80 83       	st	Z, r24
									Delay_OverFlow_Count++;
    195e:	80 91 b9 04 	lds	r24, 0x04B9
    1962:	90 91 ba 04 	lds	r25, 0x04BA
    1966:	a0 91 bb 04 	lds	r26, 0x04BB
    196a:	b0 91 bc 04 	lds	r27, 0x04BC
    196e:	01 96       	adiw	r24, 0x01	; 1
    1970:	a1 1d       	adc	r26, r1
    1972:	b1 1d       	adc	r27, r1
    1974:	80 93 b9 04 	sts	0x04B9, r24
    1978:	90 93 ba 04 	sts	0x04BA, r25
    197c:	a0 93 bb 04 	sts	0x04BB, r26
    1980:	b0 93 bc 04 	sts	0x04BC, r27
    1984:	33 c0       	rjmp	.+102    	; 0x19ec <M_vTIMER0_SetDelayTimeMilliSec+0x1c8>

		case TIMER0_CTC_MODE:		/* ctc mode */

								while(DesiredTick % MAX_OC0_VALUE)
								{
									MAX_OC0_VALUE--;
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	9a 81       	ldd	r25, Y+2	; 0x02
    198a:	ab 81       	ldd	r26, Y+3	; 0x03
    198c:	bc 81       	ldd	r27, Y+4	; 0x04
    198e:	01 97       	sbiw	r24, 0x01	; 1
    1990:	a1 09       	sbc	r26, r1
    1992:	b1 09       	sbc	r27, r1
    1994:	89 83       	std	Y+1, r24	; 0x01
    1996:	9a 83       	std	Y+2, r25	; 0x02
    1998:	ab 83       	std	Y+3, r26	; 0x03
    199a:	bc 83       	std	Y+4, r27	; 0x04
								break;


		case TIMER0_CTC_MODE:		/* ctc mode */

								while(DesiredTick % MAX_OC0_VALUE)
    199c:	8d 81       	ldd	r24, Y+5	; 0x05
    199e:	9e 81       	ldd	r25, Y+6	; 0x06
    19a0:	af 81       	ldd	r26, Y+7	; 0x07
    19a2:	b8 85       	ldd	r27, Y+8	; 0x08
    19a4:	29 81       	ldd	r18, Y+1	; 0x01
    19a6:	3a 81       	ldd	r19, Y+2	; 0x02
    19a8:	4b 81       	ldd	r20, Y+3	; 0x03
    19aa:	5c 81       	ldd	r21, Y+4	; 0x04
    19ac:	bc 01       	movw	r22, r24
    19ae:	cd 01       	movw	r24, r26
    19b0:	0e 94 f6 35 	call	0x6bec	; 0x6bec <__udivmodsi4>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	00 97       	sbiw	r24, 0x00	; 0
    19ba:	a1 05       	cpc	r26, r1
    19bc:	b1 05       	cpc	r27, r1
    19be:	19 f7       	brne	.-58     	; 0x1986 <M_vTIMER0_SetDelayTimeMilliSec+0x162>
								{
									MAX_OC0_VALUE--;
								}
								//TIMER0_OCR0_REG = MAX_OC0_VALUE;
								Delay_CmpMatch_Count = DesiredTick / MAX_OC0_VALUE;
    19c0:	8d 81       	ldd	r24, Y+5	; 0x05
    19c2:	9e 81       	ldd	r25, Y+6	; 0x06
    19c4:	af 81       	ldd	r26, Y+7	; 0x07
    19c6:	b8 85       	ldd	r27, Y+8	; 0x08
    19c8:	29 81       	ldd	r18, Y+1	; 0x01
    19ca:	3a 81       	ldd	r19, Y+2	; 0x02
    19cc:	4b 81       	ldd	r20, Y+3	; 0x03
    19ce:	5c 81       	ldd	r21, Y+4	; 0x04
    19d0:	bc 01       	movw	r22, r24
    19d2:	cd 01       	movw	r24, r26
    19d4:	0e 94 f6 35 	call	0x6bec	; 0x6bec <__udivmodsi4>
    19d8:	da 01       	movw	r26, r20
    19da:	c9 01       	movw	r24, r18
    19dc:	80 93 bd 04 	sts	0x04BD, r24
    19e0:	90 93 be 04 	sts	0x04BE, r25
    19e4:	a0 93 bf 04 	sts	0x04BF, r26
    19e8:	b0 93 c0 04 	sts	0x04C0, r27


	}


	M_vTIMER0_Start(Prescaler);
    19ec:	8d 89       	ldd	r24, Y+21	; 0x15
    19ee:	9e 89       	ldd	r25, Y+22	; 0x16
    19f0:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <M_vTIMER0_Start>
	return Delay_OverFlow_Count;
    19f4:	80 91 b9 04 	lds	r24, 0x04B9
    19f8:	90 91 ba 04 	lds	r25, 0x04BA
    19fc:	a0 91 bb 04 	lds	r26, 0x04BB
    1a00:	b0 91 bc 04 	lds	r27, 0x04BC
}
    1a04:	bc 01       	movw	r22, r24
    1a06:	cd 01       	movw	r24, r26
    1a08:	69 96       	adiw	r28, 0x19	; 25
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	de bf       	out	0x3e, r29	; 62
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	cd bf       	out	0x3d, r28	; 61
    1a14:	cf 91       	pop	r28
    1a16:	df 91       	pop	r29
    1a18:	08 95       	ret

00001a1a <M_vTIMER0_EnableInt>:


/*******************************************************************/
/*******************************************************************/
void M_vTIMER0_EnableInt(TIMER0_INT_TYPES_t  TIMER0_INT)
{
    1a1a:	df 93       	push	r29
    1a1c:	cf 93       	push	r28
    1a1e:	00 d0       	rcall	.+0      	; 0x1a20 <M_vTIMER0_EnableInt+0x6>
    1a20:	0f 92       	push	r0
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
    1a26:	89 83       	std	Y+1, r24	; 0x01


	switch(TIMER0_INT)
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	3b 83       	std	Y+3, r19	; 0x03
    1a30:	2a 83       	std	Y+2, r18	; 0x02
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	9b 81       	ldd	r25, Y+3	; 0x03
    1a36:	00 97       	sbiw	r24, 0x00	; 0
    1a38:	31 f0       	breq	.+12     	; 0x1a46 <M_vTIMER0_EnableInt+0x2c>
    1a3a:	2a 81       	ldd	r18, Y+2	; 0x02
    1a3c:	3b 81       	ldd	r19, Y+3	; 0x03
    1a3e:	21 30       	cpi	r18, 0x01	; 1
    1a40:	31 05       	cpc	r19, r1
    1a42:	49 f0       	breq	.+18     	; 0x1a56 <M_vTIMER0_EnableInt+0x3c>
    1a44:	0f c0       	rjmp	.+30     	; 0x1a64 <M_vTIMER0_EnableInt+0x4a>
	{

		case TIMER0_OVERFLOW_INT:
									SET_BIT(TIMER0_TIMSK_REG, TIMER0_TIMSK_REG_TOIE0_POS);
    1a46:	a9 e5       	ldi	r26, 0x59	; 89
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e9 e5       	ldi	r30, 0x59	; 89
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	81 60       	ori	r24, 0x01	; 1
    1a52:	8c 93       	st	X, r24
    1a54:	07 c0       	rjmp	.+14     	; 0x1a64 <M_vTIMER0_EnableInt+0x4a>
									break;

		case TIMER0_OC0_INT:
									SET_BIT(TIMER0_TIMSK_REG, TIMER0_TIMSK_REG_OCIE0_POS);
    1a56:	a9 e5       	ldi	r26, 0x59	; 89
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	e9 e5       	ldi	r30, 0x59	; 89
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	82 60       	ori	r24, 0x02	; 2
    1a62:	8c 93       	st	X, r24
									break;
	}

}
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <M_vTIMER0_DisableInt>:


/*******************************************************************/
/*******************************************************************/
void M_vTIMER0_DisableInt(TIMER0_INT_TYPES_t  TIMER0_INT){
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	00 d0       	rcall	.+0      	; 0x1a76 <M_vTIMER0_DisableInt+0x6>
    1a76:	0f 92       	push	r0
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    1a7c:	89 83       	std	Y+1, r24	; 0x01

	switch(TIMER0_INT)
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	3b 83       	std	Y+3, r19	; 0x03
    1a86:	2a 83       	std	Y+2, r18	; 0x02
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a8c:	00 97       	sbiw	r24, 0x00	; 0
    1a8e:	31 f0       	breq	.+12     	; 0x1a9c <M_vTIMER0_DisableInt+0x2c>
    1a90:	2a 81       	ldd	r18, Y+2	; 0x02
    1a92:	3b 81       	ldd	r19, Y+3	; 0x03
    1a94:	21 30       	cpi	r18, 0x01	; 1
    1a96:	31 05       	cpc	r19, r1
    1a98:	49 f0       	breq	.+18     	; 0x1aac <M_vTIMER0_DisableInt+0x3c>
    1a9a:	0f c0       	rjmp	.+30     	; 0x1aba <M_vTIMER0_DisableInt+0x4a>
	{

		case TIMER0_OVERFLOW_INT:
									CLR_BIT(TIMER0_TIMSK_REG, TIMER0_TIMSK_REG_TOIE0_POS);
    1a9c:	a9 e5       	ldi	r26, 0x59	; 89
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e9 e5       	ldi	r30, 0x59	; 89
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	8e 7f       	andi	r24, 0xFE	; 254
    1aa8:	8c 93       	st	X, r24
    1aaa:	07 c0       	rjmp	.+14     	; 0x1aba <M_vTIMER0_DisableInt+0x4a>
									break;

		case TIMER0_OC0_INT:
									CLR_BIT(TIMER0_TIMSK_REG, TIMER0_TIMSK_REG_OCIE0_POS);
    1aac:	a9 e5       	ldi	r26, 0x59	; 89
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e9 e5       	ldi	r30, 0x59	; 89
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	8d 7f       	andi	r24, 0xFD	; 253
    1ab8:	8c 93       	st	X, r24
									break;
	}

}
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	cf 91       	pop	r28
    1ac2:	df 91       	pop	r29
    1ac4:	08 95       	ret

00001ac6 <M_vTIMER0_SetFastPWM>:


/*******************************************************************/
/*******************************************************************/
void M_vTIMER0_SetFastPWM(u32 Frequency, u8 Duty_Cycle, TIMER0_PWM_FAST_OC0_MODES_t FAST_PWM_MODE){
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	2a 97       	sbiw	r28, 0x0a	; 10
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
    1ada:	6b 83       	std	Y+3, r22	; 0x03
    1adc:	7c 83       	std	Y+4, r23	; 0x04
    1ade:	8d 83       	std	Y+5, r24	; 0x05
    1ae0:	9e 83       	std	Y+6, r25	; 0x06
    1ae2:	4f 83       	std	Y+7, r20	; 0x07
    1ae4:	28 87       	std	Y+8, r18	; 0x08

	//u8 OCR0_Value;
	TIMER0_Prescaler_t Required_Prescaler;

	switch(FAST_PWM_MODE)
    1ae6:	88 85       	ldd	r24, Y+8	; 0x08
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	3a 87       	std	Y+10, r19	; 0x0a
    1aee:	29 87       	std	Y+9, r18	; 0x09
    1af0:	49 85       	ldd	r20, Y+9	; 0x09
    1af2:	5a 85       	ldd	r21, Y+10	; 0x0a
    1af4:	40 32       	cpi	r20, 0x20	; 32
    1af6:	51 05       	cpc	r21, r1
    1af8:	31 f0       	breq	.+12     	; 0x1b06 <M_vTIMER0_SetFastPWM+0x40>
    1afa:	89 85       	ldd	r24, Y+9	; 0x09
    1afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afe:	80 33       	cpi	r24, 0x30	; 48
    1b00:	91 05       	cpc	r25, r1
    1b02:	89 f0       	breq	.+34     	; 0x1b26 <M_vTIMER0_SetFastPWM+0x60>
    1b04:	24 c0       	rjmp	.+72     	; 0x1b4e <M_vTIMER0_SetFastPWM+0x88>
	{
		case TIMER0_PWM_FAST_NonInverted_MODE:
												TIMER0_OCR0_REG = ((Duty_Cycle*256)/100)-1;
    1b06:	ec e5       	ldi	r30, 0x5C	; 92
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b0c:	88 2f       	mov	r24, r24
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	98 2f       	mov	r25, r24
    1b12:	88 27       	eor	r24, r24
    1b14:	24 e6       	ldi	r18, 0x64	; 100
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	b9 01       	movw	r22, r18
    1b1a:	0e 94 e3 35 	call	0x6bc6	; 0x6bc6 <__divmodhi4>
    1b1e:	cb 01       	movw	r24, r22
    1b20:	81 50       	subi	r24, 0x01	; 1
    1b22:	80 83       	st	Z, r24
    1b24:	14 c0       	rjmp	.+40     	; 0x1b4e <M_vTIMER0_SetFastPWM+0x88>
												//TIMER0_OCR0_REG = OCR0_Value;
												break;

		case TIMER0_PWM_FAST_Inverted_MODE:		TIMER0_OCR0_REG = ((255/256) - (Duty_Cycle/100))*256;
    1b26:	ec e5       	ldi	r30, 0x5C	; 92
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b2c:	94 e6       	ldi	r25, 0x64	; 100
    1b2e:	69 2f       	mov	r22, r25
    1b30:	0e 94 d7 35 	call	0x6bae	; 0x6bae <__udivmodqi4>
    1b34:	28 2f       	mov	r18, r24
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	9f ef       	ldi	r25, 0xFF	; 255
    1b3c:	ac 01       	movw	r20, r24
    1b3e:	24 9f       	mul	r18, r20
    1b40:	c0 01       	movw	r24, r0
    1b42:	25 9f       	mul	r18, r21
    1b44:	90 0d       	add	r25, r0
    1b46:	34 9f       	mul	r19, r20
    1b48:	90 0d       	add	r25, r0
    1b4a:	11 24       	eor	r1, r1
    1b4c:	80 83       	st	Z, r24
												//TIMER0_OCR0_REG = OCR0_Value;
												break;
	}


	Required_Prescaler = FCPU/(256*Frequency);
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	9c 81       	ldd	r25, Y+4	; 0x04
    1b52:	ad 81       	ldd	r26, Y+5	; 0x05
    1b54:	be 81       	ldd	r27, Y+6	; 0x06
    1b56:	22 27       	eor	r18, r18
    1b58:	38 2f       	mov	r19, r24
    1b5a:	49 2f       	mov	r20, r25
    1b5c:	5a 2f       	mov	r21, r26
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	94 e2       	ldi	r25, 0x24	; 36
    1b62:	a4 ef       	ldi	r26, 0xF4	; 244
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	bc 01       	movw	r22, r24
    1b68:	cd 01       	movw	r24, r26
    1b6a:	0e 94 f6 35 	call	0x6bec	; 0x6bec <__udivmodsi4>
    1b6e:	da 01       	movw	r26, r20
    1b70:	c9 01       	movw	r24, r18
    1b72:	9a 83       	std	Y+2, r25	; 0x02
    1b74:	89 83       	std	Y+1, r24	; 0x01

	M_vTIMER0_Start(Required_Prescaler);
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7a:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <M_vTIMER0_Start>


}
    1b7e:	2a 96       	adiw	r28, 0x0a	; 10
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	de bf       	out	0x3e, r29	; 62
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	cd bf       	out	0x3d, r28	; 61
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	08 95       	ret

00001b90 <M_vTIMER0_SetPhaseCorrectPWM>:


/*******************************************************************/
/*******************************************************************/
void M_vTIMER0_SetPhaseCorrectPWM(u32 Frequency, u8 Duty_Cycle, TIMER0_PWM_PHASECORRECT_OC0_MODES_t PWM_PHASECORRECT_MODE2)
{
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	2b 97       	sbiw	r28, 0x0b	; 11
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	f8 94       	cli
    1b9e:	de bf       	out	0x3e, r29	; 62
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	cd bf       	out	0x3d, r28	; 61
    1ba4:	6c 83       	std	Y+4, r22	; 0x04
    1ba6:	7d 83       	std	Y+5, r23	; 0x05
    1ba8:	8e 83       	std	Y+6, r24	; 0x06
    1baa:	9f 83       	std	Y+7, r25	; 0x07
    1bac:	48 87       	std	Y+8, r20	; 0x08
    1bae:	29 87       	std	Y+9, r18	; 0x09

	u8 OCR0_Value;
	TIMER0_Prescaler_t Required_Prescaler;

	switch(PWM_PHASECORRECT_MODE2)
    1bb0:	89 85       	ldd	r24, Y+9	; 0x09
    1bb2:	28 2f       	mov	r18, r24
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	3b 87       	std	Y+11, r19	; 0x0b
    1bb8:	2a 87       	std	Y+10, r18	; 0x0a
    1bba:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bbc:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bbe:	80 32       	cpi	r24, 0x20	; 32
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	31 f0       	breq	.+12     	; 0x1bd0 <M_vTIMER0_SetPhaseCorrectPWM+0x40>
    1bc4:	2a 85       	ldd	r18, Y+10	; 0x0a
    1bc6:	3b 85       	ldd	r19, Y+11	; 0x0b
    1bc8:	20 33       	cpi	r18, 0x30	; 48
    1bca:	31 05       	cpc	r19, r1
    1bcc:	e1 f0       	breq	.+56     	; 0x1c06 <M_vTIMER0_SetPhaseCorrectPWM+0x76>
    1bce:	38 c0       	rjmp	.+112    	; 0x1c40 <M_vTIMER0_SetPhaseCorrectPWM+0xb0>
	{
		case TIMER0_PWM_PHASECORRECT_NonInverted_MODE:
														TIMER0_OCR0_REG = ((Duty_Cycle*255)/100);
    1bd0:	ec e5       	ldi	r30, 0x5C	; 92
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	88 85       	ldd	r24, Y+8	; 0x08
    1bd6:	48 2f       	mov	r20, r24
    1bd8:	50 e0       	ldi	r21, 0x00	; 0
    1bda:	ca 01       	movw	r24, r20
    1bdc:	9c 01       	movw	r18, r24
    1bde:	22 0f       	add	r18, r18
    1be0:	33 1f       	adc	r19, r19
    1be2:	c9 01       	movw	r24, r18
    1be4:	96 95       	lsr	r25
    1be6:	98 2f       	mov	r25, r24
    1be8:	88 27       	eor	r24, r24
    1bea:	97 95       	ror	r25
    1bec:	87 95       	ror	r24
    1bee:	82 1b       	sub	r24, r18
    1bf0:	93 0b       	sbc	r25, r19
    1bf2:	84 0f       	add	r24, r20
    1bf4:	95 1f       	adc	r25, r21
    1bf6:	24 e6       	ldi	r18, 0x64	; 100
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	b9 01       	movw	r22, r18
    1bfc:	0e 94 e3 35 	call	0x6bc6	; 0x6bc6 <__divmodhi4>
    1c00:	cb 01       	movw	r24, r22
    1c02:	80 83       	st	Z, r24
    1c04:	1d c0       	rjmp	.+58     	; 0x1c40 <M_vTIMER0_SetPhaseCorrectPWM+0xb0>
														//TIMER0_OCR0_REG = Duty_Cycle;
														break;

		case TIMER0_PWM_PHASECORRECT_Inverted_MODE:
														TIMER0_OCR0_REG = ((1 - (Duty_Cycle/100))*255);
    1c06:	ec e5       	ldi	r30, 0x5C	; 92
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	88 85       	ldd	r24, Y+8	; 0x08
    1c0c:	94 e6       	ldi	r25, 0x64	; 100
    1c0e:	69 2f       	mov	r22, r25
    1c10:	0e 94 d7 35 	call	0x6bae	; 0x6bae <__udivmodqi4>
    1c14:	28 2f       	mov	r18, r24
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	ac 01       	movw	r20, r24
    1c1e:	42 1b       	sub	r20, r18
    1c20:	53 0b       	sbc	r21, r19
    1c22:	ca 01       	movw	r24, r20
    1c24:	9c 01       	movw	r18, r24
    1c26:	22 0f       	add	r18, r18
    1c28:	33 1f       	adc	r19, r19
    1c2a:	c9 01       	movw	r24, r18
    1c2c:	96 95       	lsr	r25
    1c2e:	98 2f       	mov	r25, r24
    1c30:	88 27       	eor	r24, r24
    1c32:	97 95       	ror	r25
    1c34:	87 95       	ror	r24
    1c36:	82 1b       	sub	r24, r18
    1c38:	93 0b       	sbc	r25, r19
    1c3a:	84 0f       	add	r24, r20
    1c3c:	95 1f       	adc	r25, r21
    1c3e:	80 83       	st	Z, r24
														break;
	}


 
	Required_Prescaler = FCPU/(510*Frequency);
    1c40:	8c 81       	ldd	r24, Y+4	; 0x04
    1c42:	9d 81       	ldd	r25, Y+5	; 0x05
    1c44:	ae 81       	ldd	r26, Y+6	; 0x06
    1c46:	bf 81       	ldd	r27, Y+7	; 0x07
    1c48:	2e ef       	ldi	r18, 0xFE	; 254
    1c4a:	31 e0       	ldi	r19, 0x01	; 1
    1c4c:	40 e0       	ldi	r20, 0x00	; 0
    1c4e:	50 e0       	ldi	r21, 0x00	; 0
    1c50:	bc 01       	movw	r22, r24
    1c52:	cd 01       	movw	r24, r26
    1c54:	0e 94 b8 35 	call	0x6b70	; 0x6b70 <__mulsi3>
    1c58:	9b 01       	movw	r18, r22
    1c5a:	ac 01       	movw	r20, r24
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	94 e2       	ldi	r25, 0x24	; 36
    1c60:	a4 ef       	ldi	r26, 0xF4	; 244
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	bc 01       	movw	r22, r24
    1c66:	cd 01       	movw	r24, r26
    1c68:	0e 94 f6 35 	call	0x6bec	; 0x6bec <__udivmodsi4>
    1c6c:	da 01       	movw	r26, r20
    1c6e:	c9 01       	movw	r24, r18
    1c70:	9a 83       	std	Y+2, r25	; 0x02
    1c72:	89 83       	std	Y+1, r24	; 0x01
	
	if( (Required_Prescaler < 5)  && (Required_Prescaler != 1) )
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	9a 81       	ldd	r25, Y+2	; 0x02
    1c78:	85 30       	cpi	r24, 0x05	; 5
    1c7a:	91 05       	cpc	r25, r1
    1c7c:	50 f4       	brcc	.+20     	; 0x1c92 <M_vTIMER0_SetPhaseCorrectPWM+0x102>
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
    1c80:	9a 81       	ldd	r25, Y+2	; 0x02
    1c82:	81 30       	cpi	r24, 0x01	; 1
    1c84:	91 05       	cpc	r25, r1
    1c86:	29 f0       	breq	.+10     	; 0x1c92 <M_vTIMER0_SetPhaseCorrectPWM+0x102>
	{
		
		Required_Prescaler = 1;
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	9a 83       	std	Y+2, r25	; 0x02
    1c8e:	89 83       	std	Y+1, r24	; 0x01
    1c90:	4e c0       	rjmp	.+156    	; 0x1d2e <M_vTIMER0_SetPhaseCorrectPWM+0x19e>
	}
	else if( (Required_Prescaler > 5)  && (Required_Prescaler <= 30) && (Required_Prescaler != 8) )
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	9a 81       	ldd	r25, Y+2	; 0x02
    1c96:	86 30       	cpi	r24, 0x06	; 6
    1c98:	91 05       	cpc	r25, r1
    1c9a:	78 f0       	brcs	.+30     	; 0x1cba <M_vTIMER0_SetPhaseCorrectPWM+0x12a>
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
    1c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca0:	8f 31       	cpi	r24, 0x1F	; 31
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	50 f4       	brcc	.+20     	; 0x1cba <M_vTIMER0_SetPhaseCorrectPWM+0x12a>
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    1caa:	88 30       	cpi	r24, 0x08	; 8
    1cac:	91 05       	cpc	r25, r1
    1cae:	29 f0       	breq	.+10     	; 0x1cba <M_vTIMER0_SetPhaseCorrectPWM+0x12a>
	{
		Required_Prescaler = 8;
    1cb0:	88 e0       	ldi	r24, 0x08	; 8
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	9a 83       	std	Y+2, r25	; 0x02
    1cb6:	89 83       	std	Y+1, r24	; 0x01
    1cb8:	3a c0       	rjmp	.+116    	; 0x1d2e <M_vTIMER0_SetPhaseCorrectPWM+0x19e>
	}
	else if( (Required_Prescaler > 30)  && (Required_Prescaler <= 150) && (Required_Prescaler != 64) )
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbe:	8f 31       	cpi	r24, 0x1F	; 31
    1cc0:	91 05       	cpc	r25, r1
    1cc2:	78 f0       	brcs	.+30     	; 0x1ce2 <M_vTIMER0_SetPhaseCorrectPWM+0x152>
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc8:	87 39       	cpi	r24, 0x97	; 151
    1cca:	91 05       	cpc	r25, r1
    1ccc:	50 f4       	brcc	.+20     	; 0x1ce2 <M_vTIMER0_SetPhaseCorrectPWM+0x152>
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd2:	80 34       	cpi	r24, 0x40	; 64
    1cd4:	91 05       	cpc	r25, r1
    1cd6:	29 f0       	breq	.+10     	; 0x1ce2 <M_vTIMER0_SetPhaseCorrectPWM+0x152>
	{
		Required_Prescaler = 64;
    1cd8:	80 e4       	ldi	r24, 0x40	; 64
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	9a 83       	std	Y+2, r25	; 0x02
    1cde:	89 83       	std	Y+1, r24	; 0x01
    1ce0:	26 c0       	rjmp	.+76     	; 0x1d2e <M_vTIMER0_SetPhaseCorrectPWM+0x19e>
	}
	else if( (Required_Prescaler > 150)  && (Required_Prescaler <= 750) && (Required_Prescaler != 256) )
    1ce2:	89 81       	ldd	r24, Y+1	; 0x01
    1ce4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce6:	87 39       	cpi	r24, 0x97	; 151
    1ce8:	91 05       	cpc	r25, r1
    1cea:	88 f0       	brcs	.+34     	; 0x1d0e <M_vTIMER0_SetPhaseCorrectPWM+0x17e>
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf0:	32 e0       	ldi	r19, 0x02	; 2
    1cf2:	8f 3e       	cpi	r24, 0xEF	; 239
    1cf4:	93 07       	cpc	r25, r19
    1cf6:	58 f4       	brcc	.+22     	; 0x1d0e <M_vTIMER0_SetPhaseCorrectPWM+0x17e>
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfc:	21 e0       	ldi	r18, 0x01	; 1
    1cfe:	80 30       	cpi	r24, 0x00	; 0
    1d00:	92 07       	cpc	r25, r18
    1d02:	29 f0       	breq	.+10     	; 0x1d0e <M_vTIMER0_SetPhaseCorrectPWM+0x17e>
	{
		Required_Prescaler = 256;
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	91 e0       	ldi	r25, 0x01	; 1
    1d08:	9a 83       	std	Y+2, r25	; 0x02
    1d0a:	89 83       	std	Y+1, r24	; 0x01
    1d0c:	10 c0       	rjmp	.+32     	; 0x1d2e <M_vTIMER0_SetPhaseCorrectPWM+0x19e>
	}
	else if( (Required_Prescaler > 750) &&  (Required_Prescaler != 1024) )
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	9a 81       	ldd	r25, Y+2	; 0x02
    1d12:	32 e0       	ldi	r19, 0x02	; 2
    1d14:	8f 3e       	cpi	r24, 0xEF	; 239
    1d16:	93 07       	cpc	r25, r19
    1d18:	50 f0       	brcs	.+20     	; 0x1d2e <M_vTIMER0_SetPhaseCorrectPWM+0x19e>
    1d1a:	89 81       	ldd	r24, Y+1	; 0x01
    1d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1e:	24 e0       	ldi	r18, 0x04	; 4
    1d20:	80 30       	cpi	r24, 0x00	; 0
    1d22:	92 07       	cpc	r25, r18
    1d24:	21 f0       	breq	.+8      	; 0x1d2e <M_vTIMER0_SetPhaseCorrectPWM+0x19e>
	{
		Required_Prescaler = 1024;
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	94 e0       	ldi	r25, 0x04	; 4
    1d2a:	9a 83       	std	Y+2, r25	; 0x02
    1d2c:	89 83       	std	Y+1, r24	; 0x01
	}

	//Required_Prescaler = 256;
	M_vTIMER0_Start(1024);
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	94 e0       	ldi	r25, 0x04	; 4
    1d32:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <M_vTIMER0_Start>

}
    1d36:	2b 96       	adiw	r28, 0x0b	; 11
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <M_vTIMER0_SetCallBack>:

/*******************************************************************/
/*******************************************************************/
/* Set callback functions  */
void M_vTIMER0_SetCallBack(void(*PtrFun)(void) , TIMER0_INT_TYPES_t INT_ID )
{
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	00 d0       	rcall	.+0      	; 0x1d4e <M_vTIMER0_SetCallBack+0x6>
    1d4e:	0f 92       	push	r0
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
    1d54:	9a 83       	std	Y+2, r25	; 0x02
    1d56:	89 83       	std	Y+1, r24	; 0x01
    1d58:	6b 83       	std	Y+3, r22	; 0x03

	if(PtrFun != NULL)
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5e:	00 97       	sbiw	r24, 0x00	; 0
    1d60:	61 f0       	breq	.+24     	; 0x1d7a <M_vTIMER0_SetCallBack+0x32>
	{
		Timer0_CallBack_Arr[INT_ID] = PtrFun;
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
    1d64:	88 2f       	mov	r24, r24
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	e3 55       	subi	r30, 0x53	; 83
    1d70:	fb 4f       	sbci	r31, 0xFB	; 251
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	9a 81       	ldd	r25, Y+2	; 0x02
    1d76:	91 83       	std	Z+1, r25	; 0x01
    1d78:	80 83       	st	Z, r24
	}

}
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	08 95       	ret

00001d86 <__vector_11>:
/*******************************************************************/
/*******************************************************************/
/* OverFlow interrupt */

ISR(TIMER0_OVF_vect)
{
    1d86:	1f 92       	push	r1
    1d88:	0f 92       	push	r0
    1d8a:	0f b6       	in	r0, 0x3f	; 63
    1d8c:	0f 92       	push	r0
    1d8e:	11 24       	eor	r1, r1
    1d90:	2f 93       	push	r18
    1d92:	3f 93       	push	r19
    1d94:	4f 93       	push	r20
    1d96:	5f 93       	push	r21
    1d98:	6f 93       	push	r22
    1d9a:	7f 93       	push	r23
    1d9c:	8f 93       	push	r24
    1d9e:	9f 93       	push	r25
    1da0:	af 93       	push	r26
    1da2:	bf 93       	push	r27
    1da4:	ef 93       	push	r30
    1da6:	ff 93       	push	r31
    1da8:	df 93       	push	r29
    1daa:	cf 93       	push	r28
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62

	static  u32 OverFlow_Counter =0;


	if(OverFlow_Counter == Delay_OverFlow_Count)
    1db0:	20 91 b5 04 	lds	r18, 0x04B5
    1db4:	30 91 b6 04 	lds	r19, 0x04B6
    1db8:	40 91 b7 04 	lds	r20, 0x04B7
    1dbc:	50 91 b8 04 	lds	r21, 0x04B8
    1dc0:	80 91 b9 04 	lds	r24, 0x04B9
    1dc4:	90 91 ba 04 	lds	r25, 0x04BA
    1dc8:	a0 91 bb 04 	lds	r26, 0x04BB
    1dcc:	b0 91 bc 04 	lds	r27, 0x04BC
    1dd0:	28 17       	cp	r18, r24
    1dd2:	39 07       	cpc	r19, r25
    1dd4:	4a 07       	cpc	r20, r26
    1dd6:	5b 07       	cpc	r21, r27
    1dd8:	a1 f4       	brne	.+40     	; 0x1e02 <__vector_11+0x7c>
	{
		if(Timer0_CallBack_Arr[0] != NULL)
    1dda:	80 91 ad 04 	lds	r24, 0x04AD
    1dde:	90 91 ae 04 	lds	r25, 0x04AE
    1de2:	00 97       	sbiw	r24, 0x00	; 0
    1de4:	09 f1       	breq	.+66     	; 0x1e28 <__vector_11+0xa2>
		{
			Timer0_CallBack_Arr[0]();
    1de6:	e0 91 ad 04 	lds	r30, 0x04AD
    1dea:	f0 91 ae 04 	lds	r31, 0x04AE
    1dee:	09 95       	icall
			OverFlow_Counter =0;
    1df0:	10 92 b5 04 	sts	0x04B5, r1
    1df4:	10 92 b6 04 	sts	0x04B6, r1
    1df8:	10 92 b7 04 	sts	0x04B7, r1
    1dfc:	10 92 b8 04 	sts	0x04B8, r1
    1e00:	13 c0       	rjmp	.+38     	; 0x1e28 <__vector_11+0xa2>
			//M_vTIMER0_Stop();  // uncomment this line for one time delay
		}
	}

	else{
	OverFlow_Counter++;
    1e02:	80 91 b5 04 	lds	r24, 0x04B5
    1e06:	90 91 b6 04 	lds	r25, 0x04B6
    1e0a:	a0 91 b7 04 	lds	r26, 0x04B7
    1e0e:	b0 91 b8 04 	lds	r27, 0x04B8
    1e12:	01 96       	adiw	r24, 0x01	; 1
    1e14:	a1 1d       	adc	r26, r1
    1e16:	b1 1d       	adc	r27, r1
    1e18:	80 93 b5 04 	sts	0x04B5, r24
    1e1c:	90 93 b6 04 	sts	0x04B6, r25
    1e20:	a0 93 b7 04 	sts	0x04B7, r26
    1e24:	b0 93 b8 04 	sts	0x04B8, r27
	}

}
    1e28:	cf 91       	pop	r28
    1e2a:	df 91       	pop	r29
    1e2c:	ff 91       	pop	r31
    1e2e:	ef 91       	pop	r30
    1e30:	bf 91       	pop	r27
    1e32:	af 91       	pop	r26
    1e34:	9f 91       	pop	r25
    1e36:	8f 91       	pop	r24
    1e38:	7f 91       	pop	r23
    1e3a:	6f 91       	pop	r22
    1e3c:	5f 91       	pop	r21
    1e3e:	4f 91       	pop	r20
    1e40:	3f 91       	pop	r19
    1e42:	2f 91       	pop	r18
    1e44:	0f 90       	pop	r0
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	0f 90       	pop	r0
    1e4a:	1f 90       	pop	r1
    1e4c:	18 95       	reti

00001e4e <Port_Init>:
  parameters (in)  :
  parameters (out) : none
  Return Value     : void
******************************************/
void Port_Init(const Port_ConfigType * ConfigPtr, int arr_size)
{
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	2d 97       	sbiw	r28, 0x0d	; 13
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	9d 83       	std	Y+5, r25	; 0x05
    1e64:	8c 83       	std	Y+4, r24	; 0x04
    1e66:	7f 83       	std	Y+7, r23	; 0x07
    1e68:	6e 83       	std	Y+6, r22	; 0x06

	if(ConfigPtr == NULL)
    1e6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e6e:	00 97       	sbiw	r24, 0x00	; 0
    1e70:	09 f4       	brne	.+2      	; 0x1e74 <Port_Init+0x26>
    1e72:	55 c2       	rjmp	.+1194   	; 0x231e <Port_Init+0x4d0>
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<arr_size;i++)
    1e74:	1b 82       	std	Y+3, r1	; 0x03
    1e76:	4a c2       	rjmp	.+1172   	; 0x230c <Port_Init+0x4be>
			{
				Local_pin =(ConfigPtr[i].Port_PinNumber)%10 ;
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	88 2f       	mov	r24, r24
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	9c 01       	movw	r18, r24
    1e80:	22 0f       	add	r18, r18
    1e82:	33 1f       	adc	r19, r19
    1e84:	22 0f       	add	r18, r18
    1e86:	33 1f       	adc	r19, r19
    1e88:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	e2 0f       	add	r30, r18
    1e90:	f3 1f       	adc	r31, r19
    1e92:	80 81       	ld	r24, Z
    1e94:	9a e0       	ldi	r25, 0x0A	; 10
    1e96:	69 2f       	mov	r22, r25
    1e98:	0e 94 d7 35 	call	0x6bae	; 0x6bae <__udivmodqi4>
    1e9c:	89 2f       	mov	r24, r25
    1e9e:	8a 83       	std	Y+2, r24	; 0x02
				Local_port =(ConfigPtr[i].Port_PinNumber)/10 ;
    1ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea2:	88 2f       	mov	r24, r24
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	9c 01       	movw	r18, r24
    1ea8:	22 0f       	add	r18, r18
    1eaa:	33 1f       	adc	r19, r19
    1eac:	22 0f       	add	r18, r18
    1eae:	33 1f       	adc	r19, r19
    1eb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb2:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	e2 0f       	add	r30, r18
    1eb8:	f3 1f       	adc	r31, r19
    1eba:	80 81       	ld	r24, Z
    1ebc:	9a e0       	ldi	r25, 0x0A	; 10
    1ebe:	69 2f       	mov	r22, r25
    1ec0:	0e 94 d7 35 	call	0x6bae	; 0x6bae <__udivmodqi4>
    1ec4:	89 83       	std	Y+1, r24	; 0x01
				// step1 : set direction
				if(ConfigPtr[i].Port_PinDirection == PORT_PINDIR_INPUT || ConfigPtr[i].Port_PinDirection ==PORT_PINDIR_OUTPUT)
    1ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec8:	88 2f       	mov	r24, r24
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	9c 01       	movw	r18, r24
    1ece:	22 0f       	add	r18, r18
    1ed0:	33 1f       	adc	r19, r19
    1ed2:	22 0f       	add	r18, r18
    1ed4:	33 1f       	adc	r19, r19
    1ed6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed8:	9d 81       	ldd	r25, Y+5	; 0x05
    1eda:	fc 01       	movw	r30, r24
    1edc:	e2 0f       	add	r30, r18
    1ede:	f3 1f       	adc	r31, r19
    1ee0:	82 81       	ldd	r24, Z+2	; 0x02
    1ee2:	88 23       	and	r24, r24
    1ee4:	89 f0       	breq	.+34     	; 0x1f08 <Port_Init+0xba>
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	88 2f       	mov	r24, r24
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	9c 01       	movw	r18, r24
    1eee:	22 0f       	add	r18, r18
    1ef0:	33 1f       	adc	r19, r19
    1ef2:	22 0f       	add	r18, r18
    1ef4:	33 1f       	adc	r19, r19
    1ef6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef8:	9d 81       	ldd	r25, Y+5	; 0x05
    1efa:	fc 01       	movw	r30, r24
    1efc:	e2 0f       	add	r30, r18
    1efe:	f3 1f       	adc	r31, r19
    1f00:	82 81       	ldd	r24, Z+2	; 0x02
    1f02:	81 30       	cpi	r24, 0x01	; 1
    1f04:	09 f0       	breq	.+2      	; 0x1f08 <Port_Init+0xba>
    1f06:	ff c1       	rjmp	.+1022   	; 0x2306 <Port_Init+0x4b8>
				{
					switch(Local_port)
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	28 2f       	mov	r18, r24
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	3d 87       	std	Y+13, r19	; 0x0d
    1f10:	2c 87       	std	Y+12, r18	; 0x0c
    1f12:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f14:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f16:	62 30       	cpi	r22, 0x02	; 2
    1f18:	71 05       	cpc	r23, r1
    1f1a:	d1 f1       	breq	.+116    	; 0x1f90 <Port_Init+0x142>
    1f1c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f1e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f20:	83 30       	cpi	r24, 0x03	; 3
    1f22:	91 05       	cpc	r25, r1
    1f24:	34 f4       	brge	.+12     	; 0x1f32 <Port_Init+0xe4>
    1f26:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f28:	3d 85       	ldd	r19, Y+13	; 0x0d
    1f2a:	21 30       	cpi	r18, 0x01	; 1
    1f2c:	31 05       	cpc	r19, r1
    1f2e:	71 f0       	breq	.+28     	; 0x1f4c <Port_Init+0xfe>
    1f30:	94 c0       	rjmp	.+296    	; 0x205a <Port_Init+0x20c>
    1f32:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f34:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f36:	63 30       	cpi	r22, 0x03	; 3
    1f38:	71 05       	cpc	r23, r1
    1f3a:	09 f4       	brne	.+2      	; 0x1f3e <Port_Init+0xf0>
    1f3c:	4b c0       	rjmp	.+150    	; 0x1fd4 <Port_Init+0x186>
    1f3e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f40:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f42:	84 30       	cpi	r24, 0x04	; 4
    1f44:	91 05       	cpc	r25, r1
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <Port_Init+0xfc>
    1f48:	67 c0       	rjmp	.+206    	; 0x2018 <Port_Init+0x1ca>
    1f4a:	87 c0       	rjmp	.+270    	; 0x205a <Port_Init+0x20c>
					{
					case PORT_PORTA:DDRA_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1f4c:	aa e3       	ldi	r26, 0x3A	; 58
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	ea e3       	ldi	r30, 0x3A	; 58
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	40 81       	ld	r20, Z
    1f56:	8b 81       	ldd	r24, Y+3	; 0x03
    1f58:	88 2f       	mov	r24, r24
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	9c 01       	movw	r18, r24
    1f5e:	22 0f       	add	r18, r18
    1f60:	33 1f       	adc	r19, r19
    1f62:	22 0f       	add	r18, r18
    1f64:	33 1f       	adc	r19, r19
    1f66:	8c 81       	ldd	r24, Y+4	; 0x04
    1f68:	9d 81       	ldd	r25, Y+5	; 0x05
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	e2 0f       	add	r30, r18
    1f6e:	f3 1f       	adc	r31, r19
    1f70:	82 81       	ldd	r24, Z+2	; 0x02
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	88 2f       	mov	r24, r24
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	b9 01       	movw	r22, r18
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <Port_Init+0x136>
    1f80:	66 0f       	add	r22, r22
    1f82:	77 1f       	adc	r23, r23
    1f84:	8a 95       	dec	r24
    1f86:	e2 f7       	brpl	.-8      	; 0x1f80 <Port_Init+0x132>
    1f88:	cb 01       	movw	r24, r22
    1f8a:	84 2b       	or	r24, r20
    1f8c:	8c 93       	st	X, r24
    1f8e:	65 c0       	rjmp	.+202    	; 0x205a <Port_Init+0x20c>
					case PORT_PORTB:DDRB_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1f90:	a7 e3       	ldi	r26, 0x37	; 55
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	e7 e3       	ldi	r30, 0x37	; 55
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	40 81       	ld	r20, Z
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	88 2f       	mov	r24, r24
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	9c 01       	movw	r18, r24
    1fa2:	22 0f       	add	r18, r18
    1fa4:	33 1f       	adc	r19, r19
    1fa6:	22 0f       	add	r18, r18
    1fa8:	33 1f       	adc	r19, r19
    1faa:	8c 81       	ldd	r24, Y+4	; 0x04
    1fac:	9d 81       	ldd	r25, Y+5	; 0x05
    1fae:	fc 01       	movw	r30, r24
    1fb0:	e2 0f       	add	r30, r18
    1fb2:	f3 1f       	adc	r31, r19
    1fb4:	82 81       	ldd	r24, Z+2	; 0x02
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbc:	88 2f       	mov	r24, r24
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	b9 01       	movw	r22, r18
    1fc2:	02 c0       	rjmp	.+4      	; 0x1fc8 <Port_Init+0x17a>
    1fc4:	66 0f       	add	r22, r22
    1fc6:	77 1f       	adc	r23, r23
    1fc8:	8a 95       	dec	r24
    1fca:	e2 f7       	brpl	.-8      	; 0x1fc4 <Port_Init+0x176>
    1fcc:	cb 01       	movw	r24, r22
    1fce:	84 2b       	or	r24, r20
    1fd0:	8c 93       	st	X, r24
    1fd2:	43 c0       	rjmp	.+134    	; 0x205a <Port_Init+0x20c>
					case PORT_PORTC:DDRC_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1fd4:	a4 e3       	ldi	r26, 0x34	; 52
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e4 e3       	ldi	r30, 0x34	; 52
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	40 81       	ld	r20, Z
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	88 2f       	mov	r24, r24
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	9c 01       	movw	r18, r24
    1fe6:	22 0f       	add	r18, r18
    1fe8:	33 1f       	adc	r19, r19
    1fea:	22 0f       	add	r18, r18
    1fec:	33 1f       	adc	r19, r19
    1fee:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	e2 0f       	add	r30, r18
    1ff6:	f3 1f       	adc	r31, r19
    1ff8:	82 81       	ldd	r24, Z+2	; 0x02
    1ffa:	28 2f       	mov	r18, r24
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    2000:	88 2f       	mov	r24, r24
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	b9 01       	movw	r22, r18
    2006:	02 c0       	rjmp	.+4      	; 0x200c <Port_Init+0x1be>
    2008:	66 0f       	add	r22, r22
    200a:	77 1f       	adc	r23, r23
    200c:	8a 95       	dec	r24
    200e:	e2 f7       	brpl	.-8      	; 0x2008 <Port_Init+0x1ba>
    2010:	cb 01       	movw	r24, r22
    2012:	84 2b       	or	r24, r20
    2014:	8c 93       	st	X, r24
    2016:	21 c0       	rjmp	.+66     	; 0x205a <Port_Init+0x20c>
					case PORT_PORTD:DDRD_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    2018:	a1 e3       	ldi	r26, 0x31	; 49
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	e1 e3       	ldi	r30, 0x31	; 49
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	40 81       	ld	r20, Z
    2022:	8b 81       	ldd	r24, Y+3	; 0x03
    2024:	88 2f       	mov	r24, r24
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	9c 01       	movw	r18, r24
    202a:	22 0f       	add	r18, r18
    202c:	33 1f       	adc	r19, r19
    202e:	22 0f       	add	r18, r18
    2030:	33 1f       	adc	r19, r19
    2032:	8c 81       	ldd	r24, Y+4	; 0x04
    2034:	9d 81       	ldd	r25, Y+5	; 0x05
    2036:	fc 01       	movw	r30, r24
    2038:	e2 0f       	add	r30, r18
    203a:	f3 1f       	adc	r31, r19
    203c:	82 81       	ldd	r24, Z+2	; 0x02
    203e:	28 2f       	mov	r18, r24
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	8a 81       	ldd	r24, Y+2	; 0x02
    2044:	88 2f       	mov	r24, r24
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	b9 01       	movw	r22, r18
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <Port_Init+0x202>
    204c:	66 0f       	add	r22, r22
    204e:	77 1f       	adc	r23, r23
    2050:	8a 95       	dec	r24
    2052:	e2 f7       	brpl	.-8      	; 0x204c <Port_Init+0x1fe>
    2054:	cb 01       	movw	r24, r22
    2056:	84 2b       	or	r24, r20
    2058:	8c 93       	st	X, r24

					}
					// step 2 : config initial pin value
					if(ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_LOW || ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_HIGH)
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	88 2f       	mov	r24, r24
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	9c 01       	movw	r18, r24
    2062:	22 0f       	add	r18, r18
    2064:	33 1f       	adc	r19, r19
    2066:	22 0f       	add	r18, r18
    2068:	33 1f       	adc	r19, r19
    206a:	8c 81       	ldd	r24, Y+4	; 0x04
    206c:	9d 81       	ldd	r25, Y+5	; 0x05
    206e:	fc 01       	movw	r30, r24
    2070:	e2 0f       	add	r30, r18
    2072:	f3 1f       	adc	r31, r19
    2074:	81 81       	ldd	r24, Z+1	; 0x01
    2076:	88 23       	and	r24, r24
    2078:	89 f0       	breq	.+34     	; 0x209c <Port_Init+0x24e>
    207a:	8b 81       	ldd	r24, Y+3	; 0x03
    207c:	88 2f       	mov	r24, r24
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	9c 01       	movw	r18, r24
    2082:	22 0f       	add	r18, r18
    2084:	33 1f       	adc	r19, r19
    2086:	22 0f       	add	r18, r18
    2088:	33 1f       	adc	r19, r19
    208a:	8c 81       	ldd	r24, Y+4	; 0x04
    208c:	9d 81       	ldd	r25, Y+5	; 0x05
    208e:	fc 01       	movw	r30, r24
    2090:	e2 0f       	add	r30, r18
    2092:	f3 1f       	adc	r31, r19
    2094:	81 81       	ldd	r24, Z+1	; 0x01
    2096:	81 30       	cpi	r24, 0x01	; 1
    2098:	09 f0       	breq	.+2      	; 0x209c <Port_Init+0x24e>
    209a:	35 c1       	rjmp	.+618    	; 0x2306 <Port_Init+0x4b8>
					{
						switch(Local_port)
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	28 2f       	mov	r18, r24
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	3b 87       	std	Y+11, r19	; 0x0b
    20a4:	2a 87       	std	Y+10, r18	; 0x0a
    20a6:	6a 85       	ldd	r22, Y+10	; 0x0a
    20a8:	7b 85       	ldd	r23, Y+11	; 0x0b
    20aa:	62 30       	cpi	r22, 0x02	; 2
    20ac:	71 05       	cpc	r23, r1
    20ae:	d1 f1       	breq	.+116    	; 0x2124 <Port_Init+0x2d6>
    20b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    20b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    20b4:	83 30       	cpi	r24, 0x03	; 3
    20b6:	91 05       	cpc	r25, r1
    20b8:	34 f4       	brge	.+12     	; 0x20c6 <Port_Init+0x278>
    20ba:	2a 85       	ldd	r18, Y+10	; 0x0a
    20bc:	3b 85       	ldd	r19, Y+11	; 0x0b
    20be:	21 30       	cpi	r18, 0x01	; 1
    20c0:	31 05       	cpc	r19, r1
    20c2:	71 f0       	breq	.+28     	; 0x20e0 <Port_Init+0x292>
    20c4:	94 c0       	rjmp	.+296    	; 0x21ee <Port_Init+0x3a0>
    20c6:	6a 85       	ldd	r22, Y+10	; 0x0a
    20c8:	7b 85       	ldd	r23, Y+11	; 0x0b
    20ca:	63 30       	cpi	r22, 0x03	; 3
    20cc:	71 05       	cpc	r23, r1
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <Port_Init+0x284>
    20d0:	4b c0       	rjmp	.+150    	; 0x2168 <Port_Init+0x31a>
    20d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    20d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    20d6:	84 30       	cpi	r24, 0x04	; 4
    20d8:	91 05       	cpc	r25, r1
    20da:	09 f4       	brne	.+2      	; 0x20de <Port_Init+0x290>
    20dc:	67 c0       	rjmp	.+206    	; 0x21ac <Port_Init+0x35e>
    20de:	87 c0       	rjmp	.+270    	; 0x21ee <Port_Init+0x3a0>
						{
						case PORT_PORTA:  PORTA_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    20e0:	ab e3       	ldi	r26, 0x3B	; 59
    20e2:	b0 e0       	ldi	r27, 0x00	; 0
    20e4:	eb e3       	ldi	r30, 0x3B	; 59
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	40 81       	ld	r20, Z
    20ea:	8b 81       	ldd	r24, Y+3	; 0x03
    20ec:	88 2f       	mov	r24, r24
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	9c 01       	movw	r18, r24
    20f2:	22 0f       	add	r18, r18
    20f4:	33 1f       	adc	r19, r19
    20f6:	22 0f       	add	r18, r18
    20f8:	33 1f       	adc	r19, r19
    20fa:	8c 81       	ldd	r24, Y+4	; 0x04
    20fc:	9d 81       	ldd	r25, Y+5	; 0x05
    20fe:	fc 01       	movw	r30, r24
    2100:	e2 0f       	add	r30, r18
    2102:	f3 1f       	adc	r31, r19
    2104:	81 81       	ldd	r24, Z+1	; 0x01
    2106:	28 2f       	mov	r18, r24
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	88 2f       	mov	r24, r24
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	b9 01       	movw	r22, r18
    2112:	02 c0       	rjmp	.+4      	; 0x2118 <Port_Init+0x2ca>
    2114:	66 0f       	add	r22, r22
    2116:	77 1f       	adc	r23, r23
    2118:	8a 95       	dec	r24
    211a:	e2 f7       	brpl	.-8      	; 0x2114 <Port_Init+0x2c6>
    211c:	cb 01       	movw	r24, r22
    211e:	84 2b       	or	r24, r20
    2120:	8c 93       	st	X, r24
    2122:	65 c0       	rjmp	.+202    	; 0x21ee <Port_Init+0x3a0>
						case PORT_PORTB:  PORTB_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    2124:	a8 e3       	ldi	r26, 0x38	; 56
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e8 e3       	ldi	r30, 0x38	; 56
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	40 81       	ld	r20, Z
    212e:	8b 81       	ldd	r24, Y+3	; 0x03
    2130:	88 2f       	mov	r24, r24
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	9c 01       	movw	r18, r24
    2136:	22 0f       	add	r18, r18
    2138:	33 1f       	adc	r19, r19
    213a:	22 0f       	add	r18, r18
    213c:	33 1f       	adc	r19, r19
    213e:	8c 81       	ldd	r24, Y+4	; 0x04
    2140:	9d 81       	ldd	r25, Y+5	; 0x05
    2142:	fc 01       	movw	r30, r24
    2144:	e2 0f       	add	r30, r18
    2146:	f3 1f       	adc	r31, r19
    2148:	81 81       	ldd	r24, Z+1	; 0x01
    214a:	28 2f       	mov	r18, r24
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	8a 81       	ldd	r24, Y+2	; 0x02
    2150:	88 2f       	mov	r24, r24
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	b9 01       	movw	r22, r18
    2156:	02 c0       	rjmp	.+4      	; 0x215c <Port_Init+0x30e>
    2158:	66 0f       	add	r22, r22
    215a:	77 1f       	adc	r23, r23
    215c:	8a 95       	dec	r24
    215e:	e2 f7       	brpl	.-8      	; 0x2158 <Port_Init+0x30a>
    2160:	cb 01       	movw	r24, r22
    2162:	84 2b       	or	r24, r20
    2164:	8c 93       	st	X, r24
    2166:	43 c0       	rjmp	.+134    	; 0x21ee <Port_Init+0x3a0>
						case PORT_PORTC:  PORTC_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    2168:	a5 e3       	ldi	r26, 0x35	; 53
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	e5 e3       	ldi	r30, 0x35	; 53
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	40 81       	ld	r20, Z
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	88 2f       	mov	r24, r24
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	9c 01       	movw	r18, r24
    217a:	22 0f       	add	r18, r18
    217c:	33 1f       	adc	r19, r19
    217e:	22 0f       	add	r18, r18
    2180:	33 1f       	adc	r19, r19
    2182:	8c 81       	ldd	r24, Y+4	; 0x04
    2184:	9d 81       	ldd	r25, Y+5	; 0x05
    2186:	fc 01       	movw	r30, r24
    2188:	e2 0f       	add	r30, r18
    218a:	f3 1f       	adc	r31, r19
    218c:	81 81       	ldd	r24, Z+1	; 0x01
    218e:	28 2f       	mov	r18, r24
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	88 2f       	mov	r24, r24
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	b9 01       	movw	r22, r18
    219a:	02 c0       	rjmp	.+4      	; 0x21a0 <Port_Init+0x352>
    219c:	66 0f       	add	r22, r22
    219e:	77 1f       	adc	r23, r23
    21a0:	8a 95       	dec	r24
    21a2:	e2 f7       	brpl	.-8      	; 0x219c <Port_Init+0x34e>
    21a4:	cb 01       	movw	r24, r22
    21a6:	84 2b       	or	r24, r20
    21a8:	8c 93       	st	X, r24
    21aa:	21 c0       	rjmp	.+66     	; 0x21ee <Port_Init+0x3a0>
						case PORT_PORTD:  PORTD_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    21ac:	a2 e3       	ldi	r26, 0x32	; 50
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	e2 e3       	ldi	r30, 0x32	; 50
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	40 81       	ld	r20, Z
    21b6:	8b 81       	ldd	r24, Y+3	; 0x03
    21b8:	88 2f       	mov	r24, r24
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	9c 01       	movw	r18, r24
    21be:	22 0f       	add	r18, r18
    21c0:	33 1f       	adc	r19, r19
    21c2:	22 0f       	add	r18, r18
    21c4:	33 1f       	adc	r19, r19
    21c6:	8c 81       	ldd	r24, Y+4	; 0x04
    21c8:	9d 81       	ldd	r25, Y+5	; 0x05
    21ca:	fc 01       	movw	r30, r24
    21cc:	e2 0f       	add	r30, r18
    21ce:	f3 1f       	adc	r31, r19
    21d0:	81 81       	ldd	r24, Z+1	; 0x01
    21d2:	28 2f       	mov	r18, r24
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	8a 81       	ldd	r24, Y+2	; 0x02
    21d8:	88 2f       	mov	r24, r24
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	b9 01       	movw	r22, r18
    21de:	02 c0       	rjmp	.+4      	; 0x21e4 <Port_Init+0x396>
    21e0:	66 0f       	add	r22, r22
    21e2:	77 1f       	adc	r23, r23
    21e4:	8a 95       	dec	r24
    21e6:	e2 f7       	brpl	.-8      	; 0x21e0 <Port_Init+0x392>
    21e8:	cb 01       	movw	r24, r22
    21ea:	84 2b       	or	r24, r20
    21ec:	8c 93       	st	X, r24

						}
						// step 3 : config Pin Internal Attach
						if(ConfigPtr[i].Port_PinInternalAttach == PORT_PIN_IN_ATTATCH_PULLUP && ConfigPtr[i].Port_PinDirection == PORT_PINDIR_INPUT )
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	88 2f       	mov	r24, r24
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	9c 01       	movw	r18, r24
    21f6:	22 0f       	add	r18, r18
    21f8:	33 1f       	adc	r19, r19
    21fa:	22 0f       	add	r18, r18
    21fc:	33 1f       	adc	r19, r19
    21fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2200:	9d 81       	ldd	r25, Y+5	; 0x05
    2202:	fc 01       	movw	r30, r24
    2204:	e2 0f       	add	r30, r18
    2206:	f3 1f       	adc	r31, r19
    2208:	83 81       	ldd	r24, Z+3	; 0x03
    220a:	88 23       	and	r24, r24
    220c:	09 f0       	breq	.+2      	; 0x2210 <Port_Init+0x3c2>
    220e:	7b c0       	rjmp	.+246    	; 0x2306 <Port_Init+0x4b8>
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	88 2f       	mov	r24, r24
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	9c 01       	movw	r18, r24
    2218:	22 0f       	add	r18, r18
    221a:	33 1f       	adc	r19, r19
    221c:	22 0f       	add	r18, r18
    221e:	33 1f       	adc	r19, r19
    2220:	8c 81       	ldd	r24, Y+4	; 0x04
    2222:	9d 81       	ldd	r25, Y+5	; 0x05
    2224:	fc 01       	movw	r30, r24
    2226:	e2 0f       	add	r30, r18
    2228:	f3 1f       	adc	r31, r19
    222a:	82 81       	ldd	r24, Z+2	; 0x02
    222c:	88 23       	and	r24, r24
    222e:	09 f0       	breq	.+2      	; 0x2232 <Port_Init+0x3e4>
    2230:	6a c0       	rjmp	.+212    	; 0x2306 <Port_Init+0x4b8>
						{
							switch(Local_port)
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	28 2f       	mov	r18, r24
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	39 87       	std	Y+9, r19	; 0x09
    223a:	28 87       	std	Y+8, r18	; 0x08
    223c:	68 85       	ldd	r22, Y+8	; 0x08
    223e:	79 85       	ldd	r23, Y+9	; 0x09
    2240:	62 30       	cpi	r22, 0x02	; 2
    2242:	71 05       	cpc	r23, r1
    2244:	49 f1       	breq	.+82     	; 0x2298 <Port_Init+0x44a>
    2246:	88 85       	ldd	r24, Y+8	; 0x08
    2248:	99 85       	ldd	r25, Y+9	; 0x09
    224a:	83 30       	cpi	r24, 0x03	; 3
    224c:	91 05       	cpc	r25, r1
    224e:	34 f4       	brge	.+12     	; 0x225c <Port_Init+0x40e>
    2250:	28 85       	ldd	r18, Y+8	; 0x08
    2252:	39 85       	ldd	r19, Y+9	; 0x09
    2254:	21 30       	cpi	r18, 0x01	; 1
    2256:	31 05       	cpc	r19, r1
    2258:	61 f0       	breq	.+24     	; 0x2272 <Port_Init+0x424>
    225a:	55 c0       	rjmp	.+170    	; 0x2306 <Port_Init+0x4b8>
    225c:	68 85       	ldd	r22, Y+8	; 0x08
    225e:	79 85       	ldd	r23, Y+9	; 0x09
    2260:	63 30       	cpi	r22, 0x03	; 3
    2262:	71 05       	cpc	r23, r1
    2264:	61 f1       	breq	.+88     	; 0x22be <Port_Init+0x470>
    2266:	88 85       	ldd	r24, Y+8	; 0x08
    2268:	99 85       	ldd	r25, Y+9	; 0x09
    226a:	84 30       	cpi	r24, 0x04	; 4
    226c:	91 05       	cpc	r25, r1
    226e:	d1 f1       	breq	.+116    	; 0x22e4 <Port_Init+0x496>
    2270:	4a c0       	rjmp	.+148    	; 0x2306 <Port_Init+0x4b8>
							{
							case PORT_PORTA:PORTA_REG |= (u8)(1<< Local_pin);break;
    2272:	ab e3       	ldi	r26, 0x3B	; 59
    2274:	b0 e0       	ldi	r27, 0x00	; 0
    2276:	eb e3       	ldi	r30, 0x3B	; 59
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	40 81       	ld	r20, Z
    227c:	8a 81       	ldd	r24, Y+2	; 0x02
    227e:	28 2f       	mov	r18, r24
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	02 2e       	mov	r0, r18
    2288:	02 c0       	rjmp	.+4      	; 0x228e <Port_Init+0x440>
    228a:	88 0f       	add	r24, r24
    228c:	99 1f       	adc	r25, r25
    228e:	0a 94       	dec	r0
    2290:	e2 f7       	brpl	.-8      	; 0x228a <Port_Init+0x43c>
    2292:	84 2b       	or	r24, r20
    2294:	8c 93       	st	X, r24
    2296:	37 c0       	rjmp	.+110    	; 0x2306 <Port_Init+0x4b8>
							case PORT_PORTB:PORTB_REG |= (u8)(1<< Local_pin);break;
    2298:	a8 e3       	ldi	r26, 0x38	; 56
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	e8 e3       	ldi	r30, 0x38	; 56
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	40 81       	ld	r20, Z
    22a2:	8a 81       	ldd	r24, Y+2	; 0x02
    22a4:	28 2f       	mov	r18, r24
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	02 2e       	mov	r0, r18
    22ae:	02 c0       	rjmp	.+4      	; 0x22b4 <Port_Init+0x466>
    22b0:	88 0f       	add	r24, r24
    22b2:	99 1f       	adc	r25, r25
    22b4:	0a 94       	dec	r0
    22b6:	e2 f7       	brpl	.-8      	; 0x22b0 <Port_Init+0x462>
    22b8:	84 2b       	or	r24, r20
    22ba:	8c 93       	st	X, r24
    22bc:	24 c0       	rjmp	.+72     	; 0x2306 <Port_Init+0x4b8>
							case PORT_PORTC:PORTC_REG |= (u8)(1<< Local_pin);break;
    22be:	a5 e3       	ldi	r26, 0x35	; 53
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e5 e3       	ldi	r30, 0x35	; 53
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	40 81       	ld	r20, Z
    22c8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ca:	28 2f       	mov	r18, r24
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	02 2e       	mov	r0, r18
    22d4:	02 c0       	rjmp	.+4      	; 0x22da <Port_Init+0x48c>
    22d6:	88 0f       	add	r24, r24
    22d8:	99 1f       	adc	r25, r25
    22da:	0a 94       	dec	r0
    22dc:	e2 f7       	brpl	.-8      	; 0x22d6 <Port_Init+0x488>
    22de:	84 2b       	or	r24, r20
    22e0:	8c 93       	st	X, r24
    22e2:	11 c0       	rjmp	.+34     	; 0x2306 <Port_Init+0x4b8>
							case PORT_PORTD:PORTD_REG |= (u8)(1<< Local_pin);break;
    22e4:	a2 e3       	ldi	r26, 0x32	; 50
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	e2 e3       	ldi	r30, 0x32	; 50
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	40 81       	ld	r20, Z
    22ee:	8a 81       	ldd	r24, Y+2	; 0x02
    22f0:	28 2f       	mov	r18, r24
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	02 c0       	rjmp	.+4      	; 0x22fe <Port_Init+0x4b0>
    22fa:	88 0f       	add	r24, r24
    22fc:	99 1f       	adc	r25, r25
    22fe:	2a 95       	dec	r18
    2300:	e2 f7       	brpl	.-8      	; 0x22fa <Port_Init+0x4ac>
    2302:	84 2b       	or	r24, r20
    2304:	8c 93       	st	X, r24
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<arr_size;i++)
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	8f 5f       	subi	r24, 0xFF	; 255
    230a:	8b 83       	std	Y+3, r24	; 0x03
    230c:	8b 81       	ldd	r24, Y+3	; 0x03
    230e:	28 2f       	mov	r18, r24
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	8e 81       	ldd	r24, Y+6	; 0x06
    2314:	9f 81       	ldd	r25, Y+7	; 0x07
    2316:	28 17       	cp	r18, r24
    2318:	39 07       	cpc	r19, r25
    231a:	0c f4       	brge	.+2      	; 0x231e <Port_Init+0x4d0>
    231c:	ad cd       	rjmp	.-1190   	; 0x1e78 <Port_Init+0x2a>
					//report error
				}

		    }//for
		}//else
}
    231e:	2d 96       	adiw	r28, 0x0d	; 13
    2320:	0f b6       	in	r0, 0x3f	; 63
    2322:	f8 94       	cli
    2324:	de bf       	out	0x3e, r29	; 62
    2326:	0f be       	out	0x3f, r0	; 63
    2328:	cd bf       	out	0x3d, r28	; 61
    232a:	cf 91       	pop	r28
    232c:	df 91       	pop	r29
    232e:	08 95       	ret

00002330 <M_vEnable_Global_Interrupts>:
#include "BIT_MATH.h"
#include "GLOBAL_INT_priv.h"
#include "GLOBAL_INT_int.h"

void M_vEnable_Global_Interrupts()
{
    2330:	df 93       	push	r29
    2332:	cf 93       	push	r28
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GLOBAL_INT_SREG, 7);
    2338:	af e5       	ldi	r26, 0x5F	; 95
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	ef e5       	ldi	r30, 0x5F	; 95
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	80 68       	ori	r24, 0x80	; 128
    2344:	8c 93       	st	X, r24
}
    2346:	cf 91       	pop	r28
    2348:	df 91       	pop	r29
    234a:	08 95       	ret

0000234c <M_vDisable_Global_Interrupts>:
void M_vDisable_Global_Interrupts()
{
    234c:	df 93       	push	r29
    234e:	cf 93       	push	r28
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GLOBAL_INT_SREG, 7);
    2354:	af e5       	ldi	r26, 0x5F	; 95
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	ef e5       	ldi	r30, 0x5F	; 95
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	8f 77       	andi	r24, 0x7F	; 127
    2360:	8c 93       	st	X, r24
}
    2362:	cf 91       	pop	r28
    2364:	df 91       	pop	r29
    2366:	08 95       	ret

00002368 <M_vEXTI_INT_Enable>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/

void M_vEXTI_INT_Enable(EXTI_CONFIG_t	EXTI_Arr[]){
    2368:	df 93       	push	r29
    236a:	cf 93       	push	r28
    236c:	cd b7       	in	r28, 0x3d	; 61
    236e:	de b7       	in	r29, 0x3e	; 62
    2370:	28 97       	sbiw	r28, 0x08	; 8
    2372:	0f b6       	in	r0, 0x3f	; 63
    2374:	f8 94       	cli
    2376:	de bf       	out	0x3e, r29	; 62
    2378:	0f be       	out	0x3f, r0	; 63
    237a:	cd bf       	out	0x3d, r28	; 61
    237c:	9e 83       	std	Y+6, r25	; 0x06
    237e:	8d 83       	std	Y+5, r24	; 0x05
	//EXTI_Arr_Len = (sizeof(EXTI_Arr) / sizeof (EXTI_CONFIG_t));

	EXTI_ID  ID;
    EXTI_SenseType_t  INT_Sense;

	for (int i =0; i < EXTI_INT_ArrConfig_Size; i++ )
    2380:	1a 82       	std	Y+2, r1	; 0x02
    2382:	19 82       	std	Y+1, r1	; 0x01
    2384:	82 c0       	rjmp	.+260    	; 0x248a <M_vEXTI_INT_Enable+0x122>
	{
		ID = EXTI_Arr[i].INT_ID;
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	9a 81       	ldd	r25, Y+2	; 0x02
    238a:	9c 01       	movw	r18, r24
    238c:	22 0f       	add	r18, r18
    238e:	33 1f       	adc	r19, r19
    2390:	8d 81       	ldd	r24, Y+5	; 0x05
    2392:	9e 81       	ldd	r25, Y+6	; 0x06
    2394:	fc 01       	movw	r30, r24
    2396:	e2 0f       	add	r30, r18
    2398:	f3 1f       	adc	r31, r19
    239a:	80 81       	ld	r24, Z
    239c:	8c 83       	std	Y+4, r24	; 0x04
		INT_Sense = EXTI_Arr[i].INT_SENSE;
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	9a 81       	ldd	r25, Y+2	; 0x02
    23a2:	9c 01       	movw	r18, r24
    23a4:	22 0f       	add	r18, r18
    23a6:	33 1f       	adc	r19, r19
    23a8:	8d 81       	ldd	r24, Y+5	; 0x05
    23aa:	9e 81       	ldd	r25, Y+6	; 0x06
    23ac:	fc 01       	movw	r30, r24
    23ae:	e2 0f       	add	r30, r18
    23b0:	f3 1f       	adc	r31, r19
    23b2:	81 81       	ldd	r24, Z+1	; 0x01
    23b4:	8b 83       	std	Y+3, r24	; 0x03

		switch(ID)
    23b6:	8c 81       	ldd	r24, Y+4	; 0x04
    23b8:	28 2f       	mov	r18, r24
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	38 87       	std	Y+8, r19	; 0x08
    23be:	2f 83       	std	Y+7, r18	; 0x07
    23c0:	8f 81       	ldd	r24, Y+7	; 0x07
    23c2:	98 85       	ldd	r25, Y+8	; 0x08
    23c4:	81 30       	cpi	r24, 0x01	; 1
    23c6:	91 05       	cpc	r25, r1
    23c8:	09 f1       	breq	.+66     	; 0x240c <M_vEXTI_INT_Enable+0xa4>
    23ca:	2f 81       	ldd	r18, Y+7	; 0x07
    23cc:	38 85       	ldd	r19, Y+8	; 0x08
    23ce:	22 30       	cpi	r18, 0x02	; 2
    23d0:	31 05       	cpc	r19, r1
    23d2:	d1 f1       	breq	.+116    	; 0x2448 <M_vEXTI_INT_Enable+0xe0>
    23d4:	8f 81       	ldd	r24, Y+7	; 0x07
    23d6:	98 85       	ldd	r25, Y+8	; 0x08
    23d8:	00 97       	sbiw	r24, 0x00	; 0
    23da:	09 f0       	breq	.+2      	; 0x23de <M_vEXTI_INT_Enable+0x76>
    23dc:	51 c0       	rjmp	.+162    	; 0x2480 <M_vEXTI_INT_Enable+0x118>
		{
			case EXTI_INT0: APPLY_MASK(EXTI_MCUCR_REG, EXTI_INT0_MCUCR_ISC_MASK);
    23de:	a5 e5       	ldi	r26, 0x55	; 85
    23e0:	b0 e0       	ldi	r27, 0x00	; 0
    23e2:	e5 e5       	ldi	r30, 0x55	; 85
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	8c 7f       	andi	r24, 0xFC	; 252
    23ea:	8c 93       	st	X, r24
							SET_BITS(EXTI_MCUCR_REG, INT_Sense, EXTI_INT0_MCUCR_ISC_POS);
    23ec:	a5 e5       	ldi	r26, 0x55	; 85
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	e5 e5       	ldi	r30, 0x55	; 85
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	90 81       	ld	r25, Z
    23f6:	8b 81       	ldd	r24, Y+3	; 0x03
    23f8:	89 2b       	or	r24, r25
    23fa:	8c 93       	st	X, r24
							SET_BIT(EXTI_GICR_REG, EXTI_INT0_GICR_POS);
    23fc:	ab e5       	ldi	r26, 0x5B	; 91
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	eb e5       	ldi	r30, 0x5B	; 91
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	80 64       	ori	r24, 0x40	; 64
    2408:	8c 93       	st	X, r24
    240a:	3a c0       	rjmp	.+116    	; 0x2480 <M_vEXTI_INT_Enable+0x118>
							break;

			case EXTI_INT1: APPLY_MASK(EXTI_MCUCR_REG, EXTI_INT1_MCUCR_ISC_MASK);
    240c:	a5 e5       	ldi	r26, 0x55	; 85
    240e:	b0 e0       	ldi	r27, 0x00	; 0
    2410:	e5 e5       	ldi	r30, 0x55	; 85
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	83 7f       	andi	r24, 0xF3	; 243
    2418:	8c 93       	st	X, r24
							SET_BITS(EXTI_MCUCR_REG, INT_Sense, EXTI_INT1_MCUCR_ISC_POS);
    241a:	a5 e5       	ldi	r26, 0x55	; 85
    241c:	b0 e0       	ldi	r27, 0x00	; 0
    241e:	e5 e5       	ldi	r30, 0x55	; 85
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	28 2f       	mov	r18, r24
    2426:	8b 81       	ldd	r24, Y+3	; 0x03
    2428:	88 2f       	mov	r24, r24
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	88 0f       	add	r24, r24
    242e:	99 1f       	adc	r25, r25
    2430:	88 0f       	add	r24, r24
    2432:	99 1f       	adc	r25, r25
    2434:	82 2b       	or	r24, r18
    2436:	8c 93       	st	X, r24
							SET_BIT(EXTI_GICR_REG, EXTI_INT1_GICR_POS);
    2438:	ab e5       	ldi	r26, 0x5B	; 91
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	eb e5       	ldi	r30, 0x5B	; 91
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	80 68       	ori	r24, 0x80	; 128
    2444:	8c 93       	st	X, r24
    2446:	1c c0       	rjmp	.+56     	; 0x2480 <M_vEXTI_INT_Enable+0x118>
							break;

			case EXTI_INT2: if(INT_Sense == EXTI_Sense_Falling_Edge)
    2448:	8b 81       	ldd	r24, Y+3	; 0x03
    244a:	82 30       	cpi	r24, 0x02	; 2
    244c:	41 f4       	brne	.+16     	; 0x245e <M_vEXTI_INT_Enable+0xf6>
							{
								CLR_BIT(EXTI_MCUCSR_REG, EXTI_INT2_MCUCSR_ISC_POS);
    244e:	a4 e5       	ldi	r26, 0x54	; 84
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	e4 e5       	ldi	r30, 0x54	; 84
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 81       	ld	r24, Z
    2458:	8f 7b       	andi	r24, 0xBF	; 191
    245a:	8c 93       	st	X, r24
    245c:	0a c0       	rjmp	.+20     	; 0x2472 <M_vEXTI_INT_Enable+0x10a>
							}
							else if(INT_Sense == EXTI_Sense_Rising_Edge)
    245e:	8b 81       	ldd	r24, Y+3	; 0x03
    2460:	83 30       	cpi	r24, 0x03	; 3
    2462:	39 f4       	brne	.+14     	; 0x2472 <M_vEXTI_INT_Enable+0x10a>
							{
								SET_BIT(EXTI_MCUCSR_REG, EXTI_INT2_MCUCSR_ISC_POS);
    2464:	a4 e5       	ldi	r26, 0x54	; 84
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	e4 e5       	ldi	r30, 0x54	; 84
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	80 64       	ori	r24, 0x40	; 64
    2470:	8c 93       	st	X, r24
							}
							SET_BIT(EXTI_GICR_REG, EXTI_INT2_GICR_POS);
    2472:	ab e5       	ldi	r26, 0x5B	; 91
    2474:	b0 e0       	ldi	r27, 0x00	; 0
    2476:	eb e5       	ldi	r30, 0x5B	; 91
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	80 81       	ld	r24, Z
    247c:	80 62       	ori	r24, 0x20	; 32
    247e:	8c 93       	st	X, r24
	//EXTI_Arr_Len = (sizeof(EXTI_Arr) / sizeof (EXTI_CONFIG_t));

	EXTI_ID  ID;
    EXTI_SenseType_t  INT_Sense;

	for (int i =0; i < EXTI_INT_ArrConfig_Size; i++ )
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	9a 81       	ldd	r25, Y+2	; 0x02
    2484:	01 96       	adiw	r24, 0x01	; 1
    2486:	9a 83       	std	Y+2, r25	; 0x02
    2488:	89 83       	std	Y+1, r24	; 0x01
    248a:	89 81       	ldd	r24, Y+1	; 0x01
    248c:	9a 81       	ldd	r25, Y+2	; 0x02
    248e:	18 16       	cp	r1, r24
    2490:	19 06       	cpc	r1, r25
    2492:	0c f0       	brlt	.+2      	; 0x2496 <M_vEXTI_INT_Enable+0x12e>
    2494:	78 cf       	rjmp	.-272    	; 0x2386 <M_vEXTI_INT_Enable+0x1e>

		}

	}

}
    2496:	28 96       	adiw	r28, 0x08	; 8
    2498:	0f b6       	in	r0, 0x3f	; 63
    249a:	f8 94       	cli
    249c:	de bf       	out	0x3e, r29	; 62
    249e:	0f be       	out	0x3f, r0	; 63
    24a0:	cd bf       	out	0x3d, r28	; 61
    24a2:	cf 91       	pop	r28
    24a4:	df 91       	pop	r29
    24a6:	08 95       	ret

000024a8 <M_vEXTI_INT_Disable>:


/*********************************************************/
/*********************************************************/
void M_vEXTI_INT_Disable(EXTI_CONFIG_t	EXTI_INT){
    24a8:	df 93       	push	r29
    24aa:	cf 93       	push	r28
    24ac:	00 d0       	rcall	.+0      	; 0x24ae <M_vEXTI_INT_Disable+0x6>
    24ae:	00 d0       	rcall	.+0      	; 0x24b0 <M_vEXTI_INT_Disable+0x8>
    24b0:	00 d0       	rcall	.+0      	; 0x24b2 <M_vEXTI_INT_Disable+0xa>
    24b2:	cd b7       	in	r28, 0x3d	; 61
    24b4:	de b7       	in	r29, 0x3e	; 62
    24b6:	9c 83       	std	Y+4, r25	; 0x04
    24b8:	8b 83       	std	Y+3, r24	; 0x03

	EXTI_ID  ID = EXTI_INT.INT_ID;
    24ba:	8b 81       	ldd	r24, Y+3	; 0x03
    24bc:	8a 83       	std	Y+2, r24	; 0x02
    EXTI_SenseType_t  INT_Sense = EXTI_INT.INT_SENSE;
    24be:	8c 81       	ldd	r24, Y+4	; 0x04
    24c0:	89 83       	std	Y+1, r24	; 0x01


		switch(ID)
    24c2:	8a 81       	ldd	r24, Y+2	; 0x02
    24c4:	28 2f       	mov	r18, r24
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	3e 83       	std	Y+6, r19	; 0x06
    24ca:	2d 83       	std	Y+5, r18	; 0x05
    24cc:	8d 81       	ldd	r24, Y+5	; 0x05
    24ce:	9e 81       	ldd	r25, Y+6	; 0x06
    24d0:	81 30       	cpi	r24, 0x01	; 1
    24d2:	91 05       	cpc	r25, r1
    24d4:	89 f0       	breq	.+34     	; 0x24f8 <M_vEXTI_INT_Disable+0x50>
    24d6:	2d 81       	ldd	r18, Y+5	; 0x05
    24d8:	3e 81       	ldd	r19, Y+6	; 0x06
    24da:	22 30       	cpi	r18, 0x02	; 2
    24dc:	31 05       	cpc	r19, r1
    24de:	a1 f0       	breq	.+40     	; 0x2508 <M_vEXTI_INT_Disable+0x60>
    24e0:	8d 81       	ldd	r24, Y+5	; 0x05
    24e2:	9e 81       	ldd	r25, Y+6	; 0x06
    24e4:	00 97       	sbiw	r24, 0x00	; 0
    24e6:	b9 f4       	brne	.+46     	; 0x2516 <M_vEXTI_INT_Disable+0x6e>
		{
			case EXTI_INT0:
							CLR_BIT(EXTI_GICR_REG, EXTI_INT0_GICR_POS);
    24e8:	ab e5       	ldi	r26, 0x5B	; 91
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	eb e5       	ldi	r30, 0x5B	; 91
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	8f 7b       	andi	r24, 0xBF	; 191
    24f4:	8c 93       	st	X, r24
    24f6:	0f c0       	rjmp	.+30     	; 0x2516 <M_vEXTI_INT_Disable+0x6e>
							break;

			case EXTI_INT1:

							CLR_BIT(EXTI_GICR_REG, EXTI_INT1_GICR_POS);
    24f8:	ab e5       	ldi	r26, 0x5B	; 91
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	eb e5       	ldi	r30, 0x5B	; 91
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	80 81       	ld	r24, Z
    2502:	8f 77       	andi	r24, 0x7F	; 127
    2504:	8c 93       	st	X, r24
    2506:	07 c0       	rjmp	.+14     	; 0x2516 <M_vEXTI_INT_Disable+0x6e>
							break;

			case EXTI_INT2:

							CLR_BIT(EXTI_GICR_REG, EXTI_INT2_GICR_POS);
    2508:	ab e5       	ldi	r26, 0x5B	; 91
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	eb e5       	ldi	r30, 0x5B	; 91
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	80 81       	ld	r24, Z
    2512:	8f 7d       	andi	r24, 0xDF	; 223
    2514:	8c 93       	st	X, r24
							break;

		}

	}
    2516:	26 96       	adiw	r28, 0x06	; 6
    2518:	0f b6       	in	r0, 0x3f	; 63
    251a:	f8 94       	cli
    251c:	de bf       	out	0x3e, r29	; 62
    251e:	0f be       	out	0x3f, r0	; 63
    2520:	cd bf       	out	0x3d, r28	; 61
    2522:	cf 91       	pop	r28
    2524:	df 91       	pop	r29
    2526:	08 95       	ret

00002528 <M_vEXTI_SetCallBack>:


/*********************************************************/
/*********************************************************/
void M_vEXTI_SetCallBack(void (*Ptrf)(void), EXTI_ID  ID)
{
    2528:	df 93       	push	r29
    252a:	cf 93       	push	r28
    252c:	00 d0       	rcall	.+0      	; 0x252e <M_vEXTI_SetCallBack+0x6>
    252e:	0f 92       	push	r0
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62
    2534:	9a 83       	std	Y+2, r25	; 0x02
    2536:	89 83       	std	Y+1, r24	; 0x01
    2538:	6b 83       	std	Y+3, r22	; 0x03

	if (Ptrf != NULL)
    253a:	89 81       	ldd	r24, Y+1	; 0x01
    253c:	9a 81       	ldd	r25, Y+2	; 0x02
    253e:	00 97       	sbiw	r24, 0x00	; 0
    2540:	61 f0       	breq	.+24     	; 0x255a <M_vEXTI_SetCallBack+0x32>
	{
		CallBack_Arr[ID] = Ptrf;
    2542:	8b 81       	ldd	r24, Y+3	; 0x03
    2544:	88 2f       	mov	r24, r24
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	88 0f       	add	r24, r24
    254a:	99 1f       	adc	r25, r25
    254c:	fc 01       	movw	r30, r24
    254e:	ef 53       	subi	r30, 0x3F	; 63
    2550:	fb 4f       	sbci	r31, 0xFB	; 251
    2552:	89 81       	ldd	r24, Y+1	; 0x01
    2554:	9a 81       	ldd	r25, Y+2	; 0x02
    2556:	91 83       	std	Z+1, r25	; 0x01
    2558:	80 83       	st	Z, r24
	}
}
    255a:	0f 90       	pop	r0
    255c:	0f 90       	pop	r0
    255e:	0f 90       	pop	r0
    2560:	cf 91       	pop	r28
    2562:	df 91       	pop	r29
    2564:	08 95       	ret

00002566 <__vector_1>:


/*********************************************************/
/*********************************************************/
ISR(INT0_vect)
{
    2566:	1f 92       	push	r1
    2568:	0f 92       	push	r0
    256a:	0f b6       	in	r0, 0x3f	; 63
    256c:	0f 92       	push	r0
    256e:	11 24       	eor	r1, r1
    2570:	2f 93       	push	r18
    2572:	3f 93       	push	r19
    2574:	4f 93       	push	r20
    2576:	5f 93       	push	r21
    2578:	6f 93       	push	r22
    257a:	7f 93       	push	r23
    257c:	8f 93       	push	r24
    257e:	9f 93       	push	r25
    2580:	af 93       	push	r26
    2582:	bf 93       	push	r27
    2584:	ef 93       	push	r30
    2586:	ff 93       	push	r31
    2588:	df 93       	push	r29
    258a:	cf 93       	push	r28
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
	if(CallBack_Arr[0] != NULL)
    2590:	80 91 c1 04 	lds	r24, 0x04C1
    2594:	90 91 c2 04 	lds	r25, 0x04C2
    2598:	00 97       	sbiw	r24, 0x00	; 0
    259a:	29 f0       	breq	.+10     	; 0x25a6 <__vector_1+0x40>
	{
		CallBack_Arr[0]();
    259c:	e0 91 c1 04 	lds	r30, 0x04C1
    25a0:	f0 91 c2 04 	lds	r31, 0x04C2
    25a4:	09 95       	icall
	}
}
    25a6:	cf 91       	pop	r28
    25a8:	df 91       	pop	r29
    25aa:	ff 91       	pop	r31
    25ac:	ef 91       	pop	r30
    25ae:	bf 91       	pop	r27
    25b0:	af 91       	pop	r26
    25b2:	9f 91       	pop	r25
    25b4:	8f 91       	pop	r24
    25b6:	7f 91       	pop	r23
    25b8:	6f 91       	pop	r22
    25ba:	5f 91       	pop	r21
    25bc:	4f 91       	pop	r20
    25be:	3f 91       	pop	r19
    25c0:	2f 91       	pop	r18
    25c2:	0f 90       	pop	r0
    25c4:	0f be       	out	0x3f, r0	; 63
    25c6:	0f 90       	pop	r0
    25c8:	1f 90       	pop	r1
    25ca:	18 95       	reti

000025cc <__vector_2>:


/*********************************************************/
/*********************************************************/
ISR(INT1_vect)
{
    25cc:	1f 92       	push	r1
    25ce:	0f 92       	push	r0
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	0f 92       	push	r0
    25d4:	11 24       	eor	r1, r1
    25d6:	2f 93       	push	r18
    25d8:	3f 93       	push	r19
    25da:	4f 93       	push	r20
    25dc:	5f 93       	push	r21
    25de:	6f 93       	push	r22
    25e0:	7f 93       	push	r23
    25e2:	8f 93       	push	r24
    25e4:	9f 93       	push	r25
    25e6:	af 93       	push	r26
    25e8:	bf 93       	push	r27
    25ea:	ef 93       	push	r30
    25ec:	ff 93       	push	r31
    25ee:	df 93       	push	r29
    25f0:	cf 93       	push	r28
    25f2:	cd b7       	in	r28, 0x3d	; 61
    25f4:	de b7       	in	r29, 0x3e	; 62
	if(CallBack_Arr[1] != NULL)
    25f6:	80 91 c3 04 	lds	r24, 0x04C3
    25fa:	90 91 c4 04 	lds	r25, 0x04C4
    25fe:	00 97       	sbiw	r24, 0x00	; 0
    2600:	29 f0       	breq	.+10     	; 0x260c <__vector_2+0x40>
	{
		CallBack_Arr[1]();
    2602:	e0 91 c3 04 	lds	r30, 0x04C3
    2606:	f0 91 c4 04 	lds	r31, 0x04C4
    260a:	09 95       	icall
	}
}
    260c:	cf 91       	pop	r28
    260e:	df 91       	pop	r29
    2610:	ff 91       	pop	r31
    2612:	ef 91       	pop	r30
    2614:	bf 91       	pop	r27
    2616:	af 91       	pop	r26
    2618:	9f 91       	pop	r25
    261a:	8f 91       	pop	r24
    261c:	7f 91       	pop	r23
    261e:	6f 91       	pop	r22
    2620:	5f 91       	pop	r21
    2622:	4f 91       	pop	r20
    2624:	3f 91       	pop	r19
    2626:	2f 91       	pop	r18
    2628:	0f 90       	pop	r0
    262a:	0f be       	out	0x3f, r0	; 63
    262c:	0f 90       	pop	r0
    262e:	1f 90       	pop	r1
    2630:	18 95       	reti

00002632 <__vector_3>:


/*********************************************************/
/*********************************************************/
ISR(INT2_vect)
{
    2632:	1f 92       	push	r1
    2634:	0f 92       	push	r0
    2636:	0f b6       	in	r0, 0x3f	; 63
    2638:	0f 92       	push	r0
    263a:	11 24       	eor	r1, r1
    263c:	2f 93       	push	r18
    263e:	3f 93       	push	r19
    2640:	4f 93       	push	r20
    2642:	5f 93       	push	r21
    2644:	6f 93       	push	r22
    2646:	7f 93       	push	r23
    2648:	8f 93       	push	r24
    264a:	9f 93       	push	r25
    264c:	af 93       	push	r26
    264e:	bf 93       	push	r27
    2650:	ef 93       	push	r30
    2652:	ff 93       	push	r31
    2654:	df 93       	push	r29
    2656:	cf 93       	push	r28
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
	if(CallBack_Arr[2] != NULL)
    265c:	80 91 c5 04 	lds	r24, 0x04C5
    2660:	90 91 c6 04 	lds	r25, 0x04C6
    2664:	00 97       	sbiw	r24, 0x00	; 0
    2666:	29 f0       	breq	.+10     	; 0x2672 <__vector_3+0x40>
	{
		CallBack_Arr[2]();
    2668:	e0 91 c5 04 	lds	r30, 0x04C5
    266c:	f0 91 c6 04 	lds	r31, 0x04C6
    2670:	09 95       	icall
	}
}
    2672:	cf 91       	pop	r28
    2674:	df 91       	pop	r29
    2676:	ff 91       	pop	r31
    2678:	ef 91       	pop	r30
    267a:	bf 91       	pop	r27
    267c:	af 91       	pop	r26
    267e:	9f 91       	pop	r25
    2680:	8f 91       	pop	r24
    2682:	7f 91       	pop	r23
    2684:	6f 91       	pop	r22
    2686:	5f 91       	pop	r21
    2688:	4f 91       	pop	r20
    268a:	3f 91       	pop	r19
    268c:	2f 91       	pop	r18
    268e:	0f 90       	pop	r0
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	0f 90       	pop	r0
    2694:	1f 90       	pop	r1
    2696:	18 95       	reti

00002698 <M_Dio_en_getPinValue>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : Dio_HIGH or DIO_LOW
******************************************/
Dio_LevelType  M_Dio_en_getPinValue(Dio_ChannelType ChannelId)
{
    2698:	df 93       	push	r29
    269a:	cf 93       	push	r28
    269c:	00 d0       	rcall	.+0      	; 0x269e <M_Dio_en_getPinValue+0x6>
    269e:	00 d0       	rcall	.+0      	; 0x26a0 <M_Dio_en_getPinValue+0x8>
    26a0:	00 d0       	rcall	.+0      	; 0x26a2 <M_Dio_en_getPinValue+0xa>
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
    26a6:	8c 83       	std	Y+4, r24	; 0x04
	u8 pin = ChannelId % 10;
    26a8:	8c 81       	ldd	r24, Y+4	; 0x04
    26aa:	9a e0       	ldi	r25, 0x0A	; 10
    26ac:	69 2f       	mov	r22, r25
    26ae:	0e 94 d7 35 	call	0x6bae	; 0x6bae <__udivmodqi4>
    26b2:	89 2f       	mov	r24, r25
    26b4:	8b 83       	std	Y+3, r24	; 0x03
	u8 port = ChannelId / 10;
    26b6:	8c 81       	ldd	r24, Y+4	; 0x04
    26b8:	9a e0       	ldi	r25, 0x0A	; 10
    26ba:	69 2f       	mov	r22, r25
    26bc:	0e 94 d7 35 	call	0x6bae	; 0x6bae <__udivmodqi4>
    26c0:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType Local_levelType;
	switch(port)
    26c2:	8a 81       	ldd	r24, Y+2	; 0x02
    26c4:	28 2f       	mov	r18, r24
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	3e 83       	std	Y+6, r19	; 0x06
    26ca:	2d 83       	std	Y+5, r18	; 0x05
    26cc:	4d 81       	ldd	r20, Y+5	; 0x05
    26ce:	5e 81       	ldd	r21, Y+6	; 0x06
    26d0:	42 30       	cpi	r20, 0x02	; 2
    26d2:	51 05       	cpc	r21, r1
    26d4:	41 f1       	breq	.+80     	; 0x2726 <M_Dio_en_getPinValue+0x8e>
    26d6:	8d 81       	ldd	r24, Y+5	; 0x05
    26d8:	9e 81       	ldd	r25, Y+6	; 0x06
    26da:	83 30       	cpi	r24, 0x03	; 3
    26dc:	91 05       	cpc	r25, r1
    26de:	34 f4       	brge	.+12     	; 0x26ec <M_Dio_en_getPinValue+0x54>
    26e0:	2d 81       	ldd	r18, Y+5	; 0x05
    26e2:	3e 81       	ldd	r19, Y+6	; 0x06
    26e4:	21 30       	cpi	r18, 0x01	; 1
    26e6:	31 05       	cpc	r19, r1
    26e8:	61 f0       	breq	.+24     	; 0x2702 <M_Dio_en_getPinValue+0x6a>
    26ea:	52 c0       	rjmp	.+164    	; 0x2790 <M_Dio_en_getPinValue+0xf8>
    26ec:	4d 81       	ldd	r20, Y+5	; 0x05
    26ee:	5e 81       	ldd	r21, Y+6	; 0x06
    26f0:	43 30       	cpi	r20, 0x03	; 3
    26f2:	51 05       	cpc	r21, r1
    26f4:	51 f1       	breq	.+84     	; 0x274a <M_Dio_en_getPinValue+0xb2>
    26f6:	8d 81       	ldd	r24, Y+5	; 0x05
    26f8:	9e 81       	ldd	r25, Y+6	; 0x06
    26fa:	84 30       	cpi	r24, 0x04	; 4
    26fc:	91 05       	cpc	r25, r1
    26fe:	b9 f1       	breq	.+110    	; 0x276e <M_Dio_en_getPinValue+0xd6>
    2700:	47 c0       	rjmp	.+142    	; 0x2790 <M_Dio_en_getPinValue+0xf8>
	{
	case DIO_PORTA :Local_levelType = GET_BIT( PINA_REG,pin);break;
    2702:	e9 e3       	ldi	r30, 0x39	; 57
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	80 81       	ld	r24, Z
    2708:	28 2f       	mov	r18, r24
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	8b 81       	ldd	r24, Y+3	; 0x03
    270e:	88 2f       	mov	r24, r24
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	a9 01       	movw	r20, r18
    2714:	02 c0       	rjmp	.+4      	; 0x271a <M_Dio_en_getPinValue+0x82>
    2716:	55 95       	asr	r21
    2718:	47 95       	ror	r20
    271a:	8a 95       	dec	r24
    271c:	e2 f7       	brpl	.-8      	; 0x2716 <M_Dio_en_getPinValue+0x7e>
    271e:	ca 01       	movw	r24, r20
    2720:	81 70       	andi	r24, 0x01	; 1
    2722:	89 83       	std	Y+1, r24	; 0x01
    2724:	35 c0       	rjmp	.+106    	; 0x2790 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTB :Local_levelType = GET_BIT( PINB_REG,pin);break;
    2726:	e6 e3       	ldi	r30, 0x36	; 54
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	80 81       	ld	r24, Z
    272c:	28 2f       	mov	r18, r24
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	8b 81       	ldd	r24, Y+3	; 0x03
    2732:	88 2f       	mov	r24, r24
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	a9 01       	movw	r20, r18
    2738:	02 c0       	rjmp	.+4      	; 0x273e <M_Dio_en_getPinValue+0xa6>
    273a:	55 95       	asr	r21
    273c:	47 95       	ror	r20
    273e:	8a 95       	dec	r24
    2740:	e2 f7       	brpl	.-8      	; 0x273a <M_Dio_en_getPinValue+0xa2>
    2742:	ca 01       	movw	r24, r20
    2744:	81 70       	andi	r24, 0x01	; 1
    2746:	89 83       	std	Y+1, r24	; 0x01
    2748:	23 c0       	rjmp	.+70     	; 0x2790 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTC :Local_levelType = GET_BIT( PINC_REG,pin);break;
    274a:	e3 e3       	ldi	r30, 0x33	; 51
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	80 81       	ld	r24, Z
    2750:	28 2f       	mov	r18, r24
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	8b 81       	ldd	r24, Y+3	; 0x03
    2756:	88 2f       	mov	r24, r24
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	a9 01       	movw	r20, r18
    275c:	02 c0       	rjmp	.+4      	; 0x2762 <M_Dio_en_getPinValue+0xca>
    275e:	55 95       	asr	r21
    2760:	47 95       	ror	r20
    2762:	8a 95       	dec	r24
    2764:	e2 f7       	brpl	.-8      	; 0x275e <M_Dio_en_getPinValue+0xc6>
    2766:	ca 01       	movw	r24, r20
    2768:	81 70       	andi	r24, 0x01	; 1
    276a:	89 83       	std	Y+1, r24	; 0x01
    276c:	11 c0       	rjmp	.+34     	; 0x2790 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTD :Local_levelType = GET_BIT( PIND_REG,pin);break;
    276e:	e0 e3       	ldi	r30, 0x30	; 48
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	80 81       	ld	r24, Z
    2774:	28 2f       	mov	r18, r24
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	8b 81       	ldd	r24, Y+3	; 0x03
    277a:	88 2f       	mov	r24, r24
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	a9 01       	movw	r20, r18
    2780:	02 c0       	rjmp	.+4      	; 0x2786 <M_Dio_en_getPinValue+0xee>
    2782:	55 95       	asr	r21
    2784:	47 95       	ror	r20
    2786:	8a 95       	dec	r24
    2788:	e2 f7       	brpl	.-8      	; 0x2782 <M_Dio_en_getPinValue+0xea>
    278a:	ca 01       	movw	r24, r20
    278c:	81 70       	andi	r24, 0x01	; 1
    278e:	89 83       	std	Y+1, r24	; 0x01
	}
    return Local_levelType ;
    2790:	89 81       	ldd	r24, Y+1	; 0x01
}
    2792:	26 96       	adiw	r28, 0x06	; 6
    2794:	0f b6       	in	r0, 0x3f	; 63
    2796:	f8 94       	cli
    2798:	de bf       	out	0x3e, r29	; 62
    279a:	0f be       	out	0x3f, r0	; 63
    279c:	cd bf       	out	0x3d, r28	; 61
    279e:	cf 91       	pop	r28
    27a0:	df 91       	pop	r29
    27a2:	08 95       	ret

000027a4 <M_Dio_void_setPinValue>:
  parameters (in)  :  channelId (pin) ,Level (Dio_HIGH or Dio_LOW)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPinValue(Dio_ChannelType ChannelId,Dio_LevelType Level)
{
    27a4:	df 93       	push	r29
    27a6:	cf 93       	push	r28
    27a8:	cd b7       	in	r28, 0x3d	; 61
    27aa:	de b7       	in	r29, 0x3e	; 62
    27ac:	28 97       	sbiw	r28, 0x08	; 8
    27ae:	0f b6       	in	r0, 0x3f	; 63
    27b0:	f8 94       	cli
    27b2:	de bf       	out	0x3e, r29	; 62
    27b4:	0f be       	out	0x3f, r0	; 63
    27b6:	cd bf       	out	0x3d, r28	; 61
    27b8:	8b 83       	std	Y+3, r24	; 0x03
    27ba:	6c 83       	std	Y+4, r22	; 0x04
	u8 pin = ChannelId % 10;
    27bc:	8b 81       	ldd	r24, Y+3	; 0x03
    27be:	9a e0       	ldi	r25, 0x0A	; 10
    27c0:	69 2f       	mov	r22, r25
    27c2:	0e 94 d7 35 	call	0x6bae	; 0x6bae <__udivmodqi4>
    27c6:	89 2f       	mov	r24, r25
    27c8:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = ChannelId / 10;
    27ca:	8b 81       	ldd	r24, Y+3	; 0x03
    27cc:	9a e0       	ldi	r25, 0x0A	; 10
    27ce:	69 2f       	mov	r22, r25
    27d0:	0e 94 d7 35 	call	0x6bae	; 0x6bae <__udivmodqi4>
    27d4:	89 83       	std	Y+1, r24	; 0x01

	if(Level == DIO_HIGH)
    27d6:	8c 81       	ldd	r24, Y+4	; 0x04
    27d8:	81 30       	cpi	r24, 0x01	; 1
    27da:	09 f0       	breq	.+2      	; 0x27de <M_Dio_void_setPinValue+0x3a>
    27dc:	70 c0       	rjmp	.+224    	; 0x28be <M_Dio_void_setPinValue+0x11a>
	{
		switch(port)
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	28 2f       	mov	r18, r24
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	38 87       	std	Y+8, r19	; 0x08
    27e6:	2f 83       	std	Y+7, r18	; 0x07
    27e8:	8f 81       	ldd	r24, Y+7	; 0x07
    27ea:	98 85       	ldd	r25, Y+8	; 0x08
    27ec:	82 30       	cpi	r24, 0x02	; 2
    27ee:	91 05       	cpc	r25, r1
    27f0:	51 f1       	breq	.+84     	; 0x2846 <M_Dio_void_setPinValue+0xa2>
    27f2:	2f 81       	ldd	r18, Y+7	; 0x07
    27f4:	38 85       	ldd	r19, Y+8	; 0x08
    27f6:	23 30       	cpi	r18, 0x03	; 3
    27f8:	31 05       	cpc	r19, r1
    27fa:	34 f4       	brge	.+12     	; 0x2808 <M_Dio_void_setPinValue+0x64>
    27fc:	8f 81       	ldd	r24, Y+7	; 0x07
    27fe:	98 85       	ldd	r25, Y+8	; 0x08
    2800:	81 30       	cpi	r24, 0x01	; 1
    2802:	91 05       	cpc	r25, r1
    2804:	61 f0       	breq	.+24     	; 0x281e <M_Dio_void_setPinValue+0x7a>
    2806:	d3 c0       	rjmp	.+422    	; 0x29ae <M_Dio_void_setPinValue+0x20a>
    2808:	2f 81       	ldd	r18, Y+7	; 0x07
    280a:	38 85       	ldd	r19, Y+8	; 0x08
    280c:	23 30       	cpi	r18, 0x03	; 3
    280e:	31 05       	cpc	r19, r1
    2810:	71 f1       	breq	.+92     	; 0x286e <M_Dio_void_setPinValue+0xca>
    2812:	8f 81       	ldd	r24, Y+7	; 0x07
    2814:	98 85       	ldd	r25, Y+8	; 0x08
    2816:	84 30       	cpi	r24, 0x04	; 4
    2818:	91 05       	cpc	r25, r1
    281a:	e9 f1       	breq	.+122    	; 0x2896 <M_Dio_void_setPinValue+0xf2>
    281c:	c8 c0       	rjmp	.+400    	; 0x29ae <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : SET_BIT( PORTA_REG,pin);break;
    281e:	ab e3       	ldi	r26, 0x3B	; 59
    2820:	b0 e0       	ldi	r27, 0x00	; 0
    2822:	eb e3       	ldi	r30, 0x3B	; 59
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	80 81       	ld	r24, Z
    2828:	48 2f       	mov	r20, r24
    282a:	8a 81       	ldd	r24, Y+2	; 0x02
    282c:	28 2f       	mov	r18, r24
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	02 2e       	mov	r0, r18
    2836:	02 c0       	rjmp	.+4      	; 0x283c <M_Dio_void_setPinValue+0x98>
    2838:	88 0f       	add	r24, r24
    283a:	99 1f       	adc	r25, r25
    283c:	0a 94       	dec	r0
    283e:	e2 f7       	brpl	.-8      	; 0x2838 <M_Dio_void_setPinValue+0x94>
    2840:	84 2b       	or	r24, r20
    2842:	8c 93       	st	X, r24
    2844:	b4 c0       	rjmp	.+360    	; 0x29ae <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : SET_BIT( PORTB_REG,pin);break;
    2846:	a8 e3       	ldi	r26, 0x38	; 56
    2848:	b0 e0       	ldi	r27, 0x00	; 0
    284a:	e8 e3       	ldi	r30, 0x38	; 56
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	80 81       	ld	r24, Z
    2850:	48 2f       	mov	r20, r24
    2852:	8a 81       	ldd	r24, Y+2	; 0x02
    2854:	28 2f       	mov	r18, r24
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	02 2e       	mov	r0, r18
    285e:	02 c0       	rjmp	.+4      	; 0x2864 <M_Dio_void_setPinValue+0xc0>
    2860:	88 0f       	add	r24, r24
    2862:	99 1f       	adc	r25, r25
    2864:	0a 94       	dec	r0
    2866:	e2 f7       	brpl	.-8      	; 0x2860 <M_Dio_void_setPinValue+0xbc>
    2868:	84 2b       	or	r24, r20
    286a:	8c 93       	st	X, r24
    286c:	a0 c0       	rjmp	.+320    	; 0x29ae <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : SET_BIT( PORTC_REG,pin);break;
    286e:	a5 e3       	ldi	r26, 0x35	; 53
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	e5 e3       	ldi	r30, 0x35	; 53
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	80 81       	ld	r24, Z
    2878:	48 2f       	mov	r20, r24
    287a:	8a 81       	ldd	r24, Y+2	; 0x02
    287c:	28 2f       	mov	r18, r24
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	02 2e       	mov	r0, r18
    2886:	02 c0       	rjmp	.+4      	; 0x288c <M_Dio_void_setPinValue+0xe8>
    2888:	88 0f       	add	r24, r24
    288a:	99 1f       	adc	r25, r25
    288c:	0a 94       	dec	r0
    288e:	e2 f7       	brpl	.-8      	; 0x2888 <M_Dio_void_setPinValue+0xe4>
    2890:	84 2b       	or	r24, r20
    2892:	8c 93       	st	X, r24
    2894:	8c c0       	rjmp	.+280    	; 0x29ae <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : SET_BIT( PORTD_REG,pin);break;
    2896:	a2 e3       	ldi	r26, 0x32	; 50
    2898:	b0 e0       	ldi	r27, 0x00	; 0
    289a:	e2 e3       	ldi	r30, 0x32	; 50
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	80 81       	ld	r24, Z
    28a0:	48 2f       	mov	r20, r24
    28a2:	8a 81       	ldd	r24, Y+2	; 0x02
    28a4:	28 2f       	mov	r18, r24
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	02 2e       	mov	r0, r18
    28ae:	02 c0       	rjmp	.+4      	; 0x28b4 <M_Dio_void_setPinValue+0x110>
    28b0:	88 0f       	add	r24, r24
    28b2:	99 1f       	adc	r25, r25
    28b4:	0a 94       	dec	r0
    28b6:	e2 f7       	brpl	.-8      	; 0x28b0 <M_Dio_void_setPinValue+0x10c>
    28b8:	84 2b       	or	r24, r20
    28ba:	8c 93       	st	X, r24
    28bc:	78 c0       	rjmp	.+240    	; 0x29ae <M_Dio_void_setPinValue+0x20a>
		}

	}
	else if (Level == DIO_LOW)
    28be:	8c 81       	ldd	r24, Y+4	; 0x04
    28c0:	88 23       	and	r24, r24
    28c2:	09 f0       	breq	.+2      	; 0x28c6 <M_Dio_void_setPinValue+0x122>
    28c4:	74 c0       	rjmp	.+232    	; 0x29ae <M_Dio_void_setPinValue+0x20a>
	{
		switch(port)
    28c6:	89 81       	ldd	r24, Y+1	; 0x01
    28c8:	28 2f       	mov	r18, r24
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	3e 83       	std	Y+6, r19	; 0x06
    28ce:	2d 83       	std	Y+5, r18	; 0x05
    28d0:	8d 81       	ldd	r24, Y+5	; 0x05
    28d2:	9e 81       	ldd	r25, Y+6	; 0x06
    28d4:	82 30       	cpi	r24, 0x02	; 2
    28d6:	91 05       	cpc	r25, r1
    28d8:	61 f1       	breq	.+88     	; 0x2932 <M_Dio_void_setPinValue+0x18e>
    28da:	2d 81       	ldd	r18, Y+5	; 0x05
    28dc:	3e 81       	ldd	r19, Y+6	; 0x06
    28de:	23 30       	cpi	r18, 0x03	; 3
    28e0:	31 05       	cpc	r19, r1
    28e2:	34 f4       	brge	.+12     	; 0x28f0 <M_Dio_void_setPinValue+0x14c>
    28e4:	8d 81       	ldd	r24, Y+5	; 0x05
    28e6:	9e 81       	ldd	r25, Y+6	; 0x06
    28e8:	81 30       	cpi	r24, 0x01	; 1
    28ea:	91 05       	cpc	r25, r1
    28ec:	69 f0       	breq	.+26     	; 0x2908 <M_Dio_void_setPinValue+0x164>
    28ee:	5f c0       	rjmp	.+190    	; 0x29ae <M_Dio_void_setPinValue+0x20a>
    28f0:	2d 81       	ldd	r18, Y+5	; 0x05
    28f2:	3e 81       	ldd	r19, Y+6	; 0x06
    28f4:	23 30       	cpi	r18, 0x03	; 3
    28f6:	31 05       	cpc	r19, r1
    28f8:	89 f1       	breq	.+98     	; 0x295c <M_Dio_void_setPinValue+0x1b8>
    28fa:	8d 81       	ldd	r24, Y+5	; 0x05
    28fc:	9e 81       	ldd	r25, Y+6	; 0x06
    28fe:	84 30       	cpi	r24, 0x04	; 4
    2900:	91 05       	cpc	r25, r1
    2902:	09 f4       	brne	.+2      	; 0x2906 <M_Dio_void_setPinValue+0x162>
    2904:	40 c0       	rjmp	.+128    	; 0x2986 <M_Dio_void_setPinValue+0x1e2>
    2906:	53 c0       	rjmp	.+166    	; 0x29ae <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : CLR_BIT( PORTA_REG,pin);break;
    2908:	ab e3       	ldi	r26, 0x3B	; 59
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	eb e3       	ldi	r30, 0x3B	; 59
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 81       	ld	r24, Z
    2912:	48 2f       	mov	r20, r24
    2914:	8a 81       	ldd	r24, Y+2	; 0x02
    2916:	28 2f       	mov	r18, r24
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	02 2e       	mov	r0, r18
    2920:	02 c0       	rjmp	.+4      	; 0x2926 <M_Dio_void_setPinValue+0x182>
    2922:	88 0f       	add	r24, r24
    2924:	99 1f       	adc	r25, r25
    2926:	0a 94       	dec	r0
    2928:	e2 f7       	brpl	.-8      	; 0x2922 <M_Dio_void_setPinValue+0x17e>
    292a:	80 95       	com	r24
    292c:	84 23       	and	r24, r20
    292e:	8c 93       	st	X, r24
    2930:	3e c0       	rjmp	.+124    	; 0x29ae <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : CLR_BIT( PORTB_REG,pin);break;
    2932:	a8 e3       	ldi	r26, 0x38	; 56
    2934:	b0 e0       	ldi	r27, 0x00	; 0
    2936:	e8 e3       	ldi	r30, 0x38	; 56
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	80 81       	ld	r24, Z
    293c:	48 2f       	mov	r20, r24
    293e:	8a 81       	ldd	r24, Y+2	; 0x02
    2940:	28 2f       	mov	r18, r24
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	02 2e       	mov	r0, r18
    294a:	02 c0       	rjmp	.+4      	; 0x2950 <M_Dio_void_setPinValue+0x1ac>
    294c:	88 0f       	add	r24, r24
    294e:	99 1f       	adc	r25, r25
    2950:	0a 94       	dec	r0
    2952:	e2 f7       	brpl	.-8      	; 0x294c <M_Dio_void_setPinValue+0x1a8>
    2954:	80 95       	com	r24
    2956:	84 23       	and	r24, r20
    2958:	8c 93       	st	X, r24
    295a:	29 c0       	rjmp	.+82     	; 0x29ae <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : CLR_BIT( PORTC_REG,pin);break;
    295c:	a5 e3       	ldi	r26, 0x35	; 53
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	e5 e3       	ldi	r30, 0x35	; 53
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	80 81       	ld	r24, Z
    2966:	48 2f       	mov	r20, r24
    2968:	8a 81       	ldd	r24, Y+2	; 0x02
    296a:	28 2f       	mov	r18, r24
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	02 2e       	mov	r0, r18
    2974:	02 c0       	rjmp	.+4      	; 0x297a <M_Dio_void_setPinValue+0x1d6>
    2976:	88 0f       	add	r24, r24
    2978:	99 1f       	adc	r25, r25
    297a:	0a 94       	dec	r0
    297c:	e2 f7       	brpl	.-8      	; 0x2976 <M_Dio_void_setPinValue+0x1d2>
    297e:	80 95       	com	r24
    2980:	84 23       	and	r24, r20
    2982:	8c 93       	st	X, r24
    2984:	14 c0       	rjmp	.+40     	; 0x29ae <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : CLR_BIT( PORTD_REG,pin);break;
    2986:	a2 e3       	ldi	r26, 0x32	; 50
    2988:	b0 e0       	ldi	r27, 0x00	; 0
    298a:	e2 e3       	ldi	r30, 0x32	; 50
    298c:	f0 e0       	ldi	r31, 0x00	; 0
    298e:	80 81       	ld	r24, Z
    2990:	48 2f       	mov	r20, r24
    2992:	8a 81       	ldd	r24, Y+2	; 0x02
    2994:	28 2f       	mov	r18, r24
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	02 2e       	mov	r0, r18
    299e:	02 c0       	rjmp	.+4      	; 0x29a4 <M_Dio_void_setPinValue+0x200>
    29a0:	88 0f       	add	r24, r24
    29a2:	99 1f       	adc	r25, r25
    29a4:	0a 94       	dec	r0
    29a6:	e2 f7       	brpl	.-8      	; 0x29a0 <M_Dio_void_setPinValue+0x1fc>
    29a8:	80 95       	com	r24
    29aa:	84 23       	and	r24, r20
    29ac:	8c 93       	st	X, r24
		}

	}

}
    29ae:	28 96       	adiw	r28, 0x08	; 8
    29b0:	0f b6       	in	r0, 0x3f	; 63
    29b2:	f8 94       	cli
    29b4:	de bf       	out	0x3e, r29	; 62
    29b6:	0f be       	out	0x3f, r0	; 63
    29b8:	cd bf       	out	0x3d, r28	; 61
    29ba:	cf 91       	pop	r28
    29bc:	df 91       	pop	r29
    29be:	08 95       	ret

000029c0 <M_Dio_en_getPortValue>:
  parameters (in)  :  PortId
  parameters (out) :  Non
  Return Value     : Dio_PortLevelType
******************************************/
Dio_PortLevelType M_Dio_en_getPortValue(Dio_PortType PortId)
{
    29c0:	df 93       	push	r29
    29c2:	cf 93       	push	r28
    29c4:	00 d0       	rcall	.+0      	; 0x29c6 <M_Dio_en_getPortValue+0x6>
    29c6:	00 d0       	rcall	.+0      	; 0x29c8 <M_Dio_en_getPortValue+0x8>
    29c8:	cd b7       	in	r28, 0x3d	; 61
    29ca:	de b7       	in	r29, 0x3e	; 62
    29cc:	8a 83       	std	Y+2, r24	; 0x02
	Dio_PortLevelType Local_Reading;

	switch( PortId)
    29ce:	8a 81       	ldd	r24, Y+2	; 0x02
    29d0:	28 2f       	mov	r18, r24
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	3c 83       	std	Y+4, r19	; 0x04
    29d6:	2b 83       	std	Y+3, r18	; 0x03
    29d8:	8b 81       	ldd	r24, Y+3	; 0x03
    29da:	9c 81       	ldd	r25, Y+4	; 0x04
    29dc:	82 30       	cpi	r24, 0x02	; 2
    29de:	91 05       	cpc	r25, r1
    29e0:	d9 f0       	breq	.+54     	; 0x2a18 <M_Dio_en_getPortValue+0x58>
    29e2:	2b 81       	ldd	r18, Y+3	; 0x03
    29e4:	3c 81       	ldd	r19, Y+4	; 0x04
    29e6:	23 30       	cpi	r18, 0x03	; 3
    29e8:	31 05       	cpc	r19, r1
    29ea:	34 f4       	brge	.+12     	; 0x29f8 <M_Dio_en_getPortValue+0x38>
    29ec:	8b 81       	ldd	r24, Y+3	; 0x03
    29ee:	9c 81       	ldd	r25, Y+4	; 0x04
    29f0:	81 30       	cpi	r24, 0x01	; 1
    29f2:	91 05       	cpc	r25, r1
    29f4:	61 f0       	breq	.+24     	; 0x2a0e <M_Dio_en_getPortValue+0x4e>
    29f6:	1e c0       	rjmp	.+60     	; 0x2a34 <M_Dio_en_getPortValue+0x74>
    29f8:	2b 81       	ldd	r18, Y+3	; 0x03
    29fa:	3c 81       	ldd	r19, Y+4	; 0x04
    29fc:	23 30       	cpi	r18, 0x03	; 3
    29fe:	31 05       	cpc	r19, r1
    2a00:	81 f0       	breq	.+32     	; 0x2a22 <M_Dio_en_getPortValue+0x62>
    2a02:	8b 81       	ldd	r24, Y+3	; 0x03
    2a04:	9c 81       	ldd	r25, Y+4	; 0x04
    2a06:	84 30       	cpi	r24, 0x04	; 4
    2a08:	91 05       	cpc	r25, r1
    2a0a:	81 f0       	breq	.+32     	; 0x2a2c <M_Dio_en_getPortValue+0x6c>
    2a0c:	13 c0       	rjmp	.+38     	; 0x2a34 <M_Dio_en_getPortValue+0x74>
	{
	case DIO_PORTA :Local_Reading =  PORTA_REG;break;
    2a0e:	eb e3       	ldi	r30, 0x3B	; 59
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 81       	ld	r24, Z
    2a14:	89 83       	std	Y+1, r24	; 0x01
    2a16:	0e c0       	rjmp	.+28     	; 0x2a34 <M_Dio_en_getPortValue+0x74>
	case DIO_PORTB :Local_Reading =  PORTB_REG;break;
    2a18:	e8 e3       	ldi	r30, 0x38	; 56
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 81       	ld	r24, Z
    2a1e:	89 83       	std	Y+1, r24	; 0x01
    2a20:	09 c0       	rjmp	.+18     	; 0x2a34 <M_Dio_en_getPortValue+0x74>
	case DIO_PORTC :Local_Reading =  PORTC_REG;break;
    2a22:	e5 e3       	ldi	r30, 0x35	; 53
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
    2a26:	80 81       	ld	r24, Z
    2a28:	89 83       	std	Y+1, r24	; 0x01
    2a2a:	04 c0       	rjmp	.+8      	; 0x2a34 <M_Dio_en_getPortValue+0x74>
	case DIO_PORTD :Local_Reading =  PORTD_REG;break;
    2a2c:	e2 e3       	ldi	r30, 0x32	; 50
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	80 81       	ld	r24, Z
    2a32:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_Reading;
    2a34:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a36:	0f 90       	pop	r0
    2a38:	0f 90       	pop	r0
    2a3a:	0f 90       	pop	r0
    2a3c:	0f 90       	pop	r0
    2a3e:	cf 91       	pop	r28
    2a40:	df 91       	pop	r29
    2a42:	08 95       	ret

00002a44 <M_Dio_void_setPortValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPortValue(Dio_PortType PortId,Dio_PortLevelType Level)
{
    2a44:	df 93       	push	r29
    2a46:	cf 93       	push	r28
    2a48:	00 d0       	rcall	.+0      	; 0x2a4a <M_Dio_void_setPortValue+0x6>
    2a4a:	00 d0       	rcall	.+0      	; 0x2a4c <M_Dio_void_setPortValue+0x8>
    2a4c:	cd b7       	in	r28, 0x3d	; 61
    2a4e:	de b7       	in	r29, 0x3e	; 62
    2a50:	89 83       	std	Y+1, r24	; 0x01
    2a52:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortId)
    2a54:	89 81       	ldd	r24, Y+1	; 0x01
    2a56:	28 2f       	mov	r18, r24
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	3c 83       	std	Y+4, r19	; 0x04
    2a5c:	2b 83       	std	Y+3, r18	; 0x03
    2a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a60:	9c 81       	ldd	r25, Y+4	; 0x04
    2a62:	82 30       	cpi	r24, 0x02	; 2
    2a64:	91 05       	cpc	r25, r1
    2a66:	d9 f0       	breq	.+54     	; 0x2a9e <M_Dio_void_setPortValue+0x5a>
    2a68:	2b 81       	ldd	r18, Y+3	; 0x03
    2a6a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a6c:	23 30       	cpi	r18, 0x03	; 3
    2a6e:	31 05       	cpc	r19, r1
    2a70:	34 f4       	brge	.+12     	; 0x2a7e <M_Dio_void_setPortValue+0x3a>
    2a72:	8b 81       	ldd	r24, Y+3	; 0x03
    2a74:	9c 81       	ldd	r25, Y+4	; 0x04
    2a76:	81 30       	cpi	r24, 0x01	; 1
    2a78:	91 05       	cpc	r25, r1
    2a7a:	61 f0       	breq	.+24     	; 0x2a94 <M_Dio_void_setPortValue+0x50>
    2a7c:	1e c0       	rjmp	.+60     	; 0x2aba <M_Dio_void_setPortValue+0x76>
    2a7e:	2b 81       	ldd	r18, Y+3	; 0x03
    2a80:	3c 81       	ldd	r19, Y+4	; 0x04
    2a82:	23 30       	cpi	r18, 0x03	; 3
    2a84:	31 05       	cpc	r19, r1
    2a86:	81 f0       	breq	.+32     	; 0x2aa8 <M_Dio_void_setPortValue+0x64>
    2a88:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a8c:	84 30       	cpi	r24, 0x04	; 4
    2a8e:	91 05       	cpc	r25, r1
    2a90:	81 f0       	breq	.+32     	; 0x2ab2 <M_Dio_void_setPortValue+0x6e>
    2a92:	13 c0       	rjmp	.+38     	; 0x2aba <M_Dio_void_setPortValue+0x76>
	{
    	case DIO_PORTA : PORTA_REG = Level;break;
    2a94:	eb e3       	ldi	r30, 0x3B	; 59
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9a:	80 83       	st	Z, r24
    2a9c:	0e c0       	rjmp	.+28     	; 0x2aba <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTB : PORTB_REG = Level;break;
    2a9e:	e8 e3       	ldi	r30, 0x38	; 56
    2aa0:	f0 e0       	ldi	r31, 0x00	; 0
    2aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa4:	80 83       	st	Z, r24
    2aa6:	09 c0       	rjmp	.+18     	; 0x2aba <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTC : PORTC_REG = Level;break;
    2aa8:	e5 e3       	ldi	r30, 0x35	; 53
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	8a 81       	ldd	r24, Y+2	; 0x02
    2aae:	80 83       	st	Z, r24
    2ab0:	04 c0       	rjmp	.+8      	; 0x2aba <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTD : PORTD_REG = Level;break;
    2ab2:	e2 e3       	ldi	r30, 0x32	; 50
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab8:	80 83       	st	Z, r24
	}
}
    2aba:	0f 90       	pop	r0
    2abc:	0f 90       	pop	r0
    2abe:	0f 90       	pop	r0
    2ac0:	0f 90       	pop	r0
    2ac2:	cf 91       	pop	r28
    2ac4:	df 91       	pop	r29
    2ac6:	08 95       	ret

00002ac8 <M_Dio_void_togglePinValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_togglePinValue(Dio_ChannelType channelId)
{
    2ac8:	df 93       	push	r29
    2aca:	cf 93       	push	r28
    2acc:	00 d0       	rcall	.+0      	; 0x2ace <M_Dio_void_togglePinValue+0x6>
    2ace:	00 d0       	rcall	.+0      	; 0x2ad0 <M_Dio_void_togglePinValue+0x8>
    2ad0:	0f 92       	push	r0
    2ad2:	cd b7       	in	r28, 0x3d	; 61
    2ad4:	de b7       	in	r29, 0x3e	; 62
    2ad6:	8b 83       	std	Y+3, r24	; 0x03
	u8 pin = channelId % 10;
    2ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    2ada:	9a e0       	ldi	r25, 0x0A	; 10
    2adc:	69 2f       	mov	r22, r25
    2ade:	0e 94 d7 35 	call	0x6bae	; 0x6bae <__udivmodqi4>
    2ae2:	89 2f       	mov	r24, r25
    2ae4:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = channelId/ 10;
    2ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae8:	9a e0       	ldi	r25, 0x0A	; 10
    2aea:	69 2f       	mov	r22, r25
    2aec:	0e 94 d7 35 	call	0x6bae	; 0x6bae <__udivmodqi4>
    2af0:	89 83       	std	Y+1, r24	; 0x01

	switch(port)
    2af2:	89 81       	ldd	r24, Y+1	; 0x01
    2af4:	28 2f       	mov	r18, r24
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	3d 83       	std	Y+5, r19	; 0x05
    2afa:	2c 83       	std	Y+4, r18	; 0x04
    2afc:	8c 81       	ldd	r24, Y+4	; 0x04
    2afe:	9d 81       	ldd	r25, Y+5	; 0x05
    2b00:	82 30       	cpi	r24, 0x02	; 2
    2b02:	91 05       	cpc	r25, r1
    2b04:	51 f1       	breq	.+84     	; 0x2b5a <M_Dio_void_togglePinValue+0x92>
    2b06:	2c 81       	ldd	r18, Y+4	; 0x04
    2b08:	3d 81       	ldd	r19, Y+5	; 0x05
    2b0a:	23 30       	cpi	r18, 0x03	; 3
    2b0c:	31 05       	cpc	r19, r1
    2b0e:	34 f4       	brge	.+12     	; 0x2b1c <M_Dio_void_togglePinValue+0x54>
    2b10:	8c 81       	ldd	r24, Y+4	; 0x04
    2b12:	9d 81       	ldd	r25, Y+5	; 0x05
    2b14:	81 30       	cpi	r24, 0x01	; 1
    2b16:	91 05       	cpc	r25, r1
    2b18:	61 f0       	breq	.+24     	; 0x2b32 <M_Dio_void_togglePinValue+0x6a>
    2b1a:	5a c0       	rjmp	.+180    	; 0x2bd0 <M_Dio_void_togglePinValue+0x108>
    2b1c:	2c 81       	ldd	r18, Y+4	; 0x04
    2b1e:	3d 81       	ldd	r19, Y+5	; 0x05
    2b20:	23 30       	cpi	r18, 0x03	; 3
    2b22:	31 05       	cpc	r19, r1
    2b24:	71 f1       	breq	.+92     	; 0x2b82 <M_Dio_void_togglePinValue+0xba>
    2b26:	8c 81       	ldd	r24, Y+4	; 0x04
    2b28:	9d 81       	ldd	r25, Y+5	; 0x05
    2b2a:	84 30       	cpi	r24, 0x04	; 4
    2b2c:	91 05       	cpc	r25, r1
    2b2e:	e9 f1       	breq	.+122    	; 0x2baa <M_Dio_void_togglePinValue+0xe2>
    2b30:	4f c0       	rjmp	.+158    	; 0x2bd0 <M_Dio_void_togglePinValue+0x108>
	{
	case DIO_PORTA :TOG_BIT( PORTA_REG,pin);break;
    2b32:	ab e3       	ldi	r26, 0x3B	; 59
    2b34:	b0 e0       	ldi	r27, 0x00	; 0
    2b36:	eb e3       	ldi	r30, 0x3B	; 59
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	80 81       	ld	r24, Z
    2b3c:	48 2f       	mov	r20, r24
    2b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b40:	28 2f       	mov	r18, r24
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	02 2e       	mov	r0, r18
    2b4a:	02 c0       	rjmp	.+4      	; 0x2b50 <M_Dio_void_togglePinValue+0x88>
    2b4c:	88 0f       	add	r24, r24
    2b4e:	99 1f       	adc	r25, r25
    2b50:	0a 94       	dec	r0
    2b52:	e2 f7       	brpl	.-8      	; 0x2b4c <M_Dio_void_togglePinValue+0x84>
    2b54:	84 27       	eor	r24, r20
    2b56:	8c 93       	st	X, r24
    2b58:	3b c0       	rjmp	.+118    	; 0x2bd0 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTB :TOG_BIT( PORTB_REG,pin);break;
    2b5a:	a8 e3       	ldi	r26, 0x38	; 56
    2b5c:	b0 e0       	ldi	r27, 0x00	; 0
    2b5e:	e8 e3       	ldi	r30, 0x38	; 56
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	80 81       	ld	r24, Z
    2b64:	48 2f       	mov	r20, r24
    2b66:	8a 81       	ldd	r24, Y+2	; 0x02
    2b68:	28 2f       	mov	r18, r24
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	02 2e       	mov	r0, r18
    2b72:	02 c0       	rjmp	.+4      	; 0x2b78 <M_Dio_void_togglePinValue+0xb0>
    2b74:	88 0f       	add	r24, r24
    2b76:	99 1f       	adc	r25, r25
    2b78:	0a 94       	dec	r0
    2b7a:	e2 f7       	brpl	.-8      	; 0x2b74 <M_Dio_void_togglePinValue+0xac>
    2b7c:	84 27       	eor	r24, r20
    2b7e:	8c 93       	st	X, r24
    2b80:	27 c0       	rjmp	.+78     	; 0x2bd0 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTC :TOG_BIT( PORTC_REG,pin);break;
    2b82:	a5 e3       	ldi	r26, 0x35	; 53
    2b84:	b0 e0       	ldi	r27, 0x00	; 0
    2b86:	e5 e3       	ldi	r30, 0x35	; 53
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	80 81       	ld	r24, Z
    2b8c:	48 2f       	mov	r20, r24
    2b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b90:	28 2f       	mov	r18, r24
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	02 2e       	mov	r0, r18
    2b9a:	02 c0       	rjmp	.+4      	; 0x2ba0 <M_Dio_void_togglePinValue+0xd8>
    2b9c:	88 0f       	add	r24, r24
    2b9e:	99 1f       	adc	r25, r25
    2ba0:	0a 94       	dec	r0
    2ba2:	e2 f7       	brpl	.-8      	; 0x2b9c <M_Dio_void_togglePinValue+0xd4>
    2ba4:	84 27       	eor	r24, r20
    2ba6:	8c 93       	st	X, r24
    2ba8:	13 c0       	rjmp	.+38     	; 0x2bd0 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTD :TOG_BIT( PORTD_REG,pin);break;
    2baa:	a2 e3       	ldi	r26, 0x32	; 50
    2bac:	b0 e0       	ldi	r27, 0x00	; 0
    2bae:	e2 e3       	ldi	r30, 0x32	; 50
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	80 81       	ld	r24, Z
    2bb4:	48 2f       	mov	r20, r24
    2bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb8:	28 2f       	mov	r18, r24
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	02 2e       	mov	r0, r18
    2bc2:	02 c0       	rjmp	.+4      	; 0x2bc8 <M_Dio_void_togglePinValue+0x100>
    2bc4:	88 0f       	add	r24, r24
    2bc6:	99 1f       	adc	r25, r25
    2bc8:	0a 94       	dec	r0
    2bca:	e2 f7       	brpl	.-8      	; 0x2bc4 <M_Dio_void_togglePinValue+0xfc>
    2bcc:	84 27       	eor	r24, r20
    2bce:	8c 93       	st	X, r24
	}

}
    2bd0:	0f 90       	pop	r0
    2bd2:	0f 90       	pop	r0
    2bd4:	0f 90       	pop	r0
    2bd6:	0f 90       	pop	r0
    2bd8:	0f 90       	pop	r0
    2bda:	cf 91       	pop	r28
    2bdc:	df 91       	pop	r29
    2bde:	08 95       	ret

00002be0 <M_ADC_enu_init>:
ES_t (*ADCpfunAppFun)(void*) = NULL;
void * ADCpvidAppParameter = NULL;


volatile u8 timeout_flag =0;
ES_t M_ADC_enu_init(ADC_cfg_type copy_ADCcfg){
    2be0:	df 93       	push	r29
    2be2:	cf 93       	push	r28
    2be4:	cd b7       	in	r28, 0x3d	; 61
    2be6:	de b7       	in	r29, 0x3e	; 62
    2be8:	2e 97       	sbiw	r28, 0x0e	; 14
    2bea:	0f b6       	in	r0, 0x3f	; 63
    2bec:	f8 94       	cli
    2bee:	de bf       	out	0x3e, r29	; 62
    2bf0:	0f be       	out	0x3f, r0	; 63
    2bf2:	cd bf       	out	0x3d, r28	; 61
    2bf4:	2c 83       	std	Y+4, r18	; 0x04
    2bf6:	3d 83       	std	Y+5, r19	; 0x05
    2bf8:	4e 83       	std	Y+6, r20	; 0x06
    2bfa:	5f 83       	std	Y+7, r21	; 0x07
    2bfc:	68 87       	std	Y+8, r22	; 0x08
    2bfe:	79 87       	std	Y+9, r23	; 0x09
    2c00:	8a 87       	std	Y+10, r24	; 0x0a
	ES_t Local_enuErrorState=ES_OK;
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	8b 83       	std	Y+3, r24	; 0x03
	/*prescaler*/
	ADC_PRES_TYPE ADC_PS = copy_ADCcfg.ADC_PRES;
    2c06:	8c 81       	ldd	r24, Y+4	; 0x04
    2c08:	8a 83       	std	Y+2, r24	; 0x02
	switch(ADC_PS){
    2c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0c:	28 2f       	mov	r18, r24
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	3e 87       	std	Y+14, r19	; 0x0e
    2c12:	2d 87       	std	Y+13, r18	; 0x0d
    2c14:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c16:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c18:	83 30       	cpi	r24, 0x03	; 3
    2c1a:	91 05       	cpc	r25, r1
    2c1c:	09 f4       	brne	.+2      	; 0x2c20 <M_ADC_enu_init+0x40>
    2c1e:	45 c0       	rjmp	.+138    	; 0x2caa <M_ADC_enu_init+0xca>
    2c20:	2d 85       	ldd	r18, Y+13	; 0x0d
    2c22:	3e 85       	ldd	r19, Y+14	; 0x0e
    2c24:	24 30       	cpi	r18, 0x04	; 4
    2c26:	31 05       	cpc	r19, r1
    2c28:	7c f4       	brge	.+30     	; 0x2c48 <M_ADC_enu_init+0x68>
    2c2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c2e:	81 30       	cpi	r24, 0x01	; 1
    2c30:	91 05       	cpc	r25, r1
    2c32:	49 f1       	breq	.+82     	; 0x2c86 <M_ADC_enu_init+0xa6>
    2c34:	2d 85       	ldd	r18, Y+13	; 0x0d
    2c36:	3e 85       	ldd	r19, Y+14	; 0x0e
    2c38:	22 30       	cpi	r18, 0x02	; 2
    2c3a:	31 05       	cpc	r19, r1
    2c3c:	6c f5       	brge	.+90     	; 0x2c98 <M_ADC_enu_init+0xb8>
    2c3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c40:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c42:	00 97       	sbiw	r24, 0x00	; 0
    2c44:	c1 f0       	breq	.+48     	; 0x2c76 <M_ADC_enu_init+0x96>
    2c46:	5d c0       	rjmp	.+186    	; 0x2d02 <M_ADC_enu_init+0x122>
    2c48:	2d 85       	ldd	r18, Y+13	; 0x0d
    2c4a:	3e 85       	ldd	r19, Y+14	; 0x0e
    2c4c:	25 30       	cpi	r18, 0x05	; 5
    2c4e:	31 05       	cpc	r19, r1
    2c50:	09 f4       	brne	.+2      	; 0x2c54 <M_ADC_enu_init+0x74>
    2c52:	3d c0       	rjmp	.+122    	; 0x2cce <M_ADC_enu_init+0xee>
    2c54:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c56:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c58:	85 30       	cpi	r24, 0x05	; 5
    2c5a:	91 05       	cpc	r25, r1
    2c5c:	7c f1       	brlt	.+94     	; 0x2cbc <M_ADC_enu_init+0xdc>
    2c5e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2c60:	3e 85       	ldd	r19, Y+14	; 0x0e
    2c62:	26 30       	cpi	r18, 0x06	; 6
    2c64:	31 05       	cpc	r19, r1
    2c66:	e1 f1       	breq	.+120    	; 0x2ce0 <M_ADC_enu_init+0x100>
    2c68:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c6c:	87 30       	cpi	r24, 0x07	; 7
    2c6e:	91 05       	cpc	r25, r1
    2c70:	09 f4       	brne	.+2      	; 0x2c74 <M_ADC_enu_init+0x94>
    2c72:	3f c0       	rjmp	.+126    	; 0x2cf2 <M_ADC_enu_init+0x112>
    2c74:	46 c0       	rjmp	.+140    	; 0x2d02 <M_ADC_enu_init+0x122>
	case PRES_1:
		PtrADCSRA->ADPS_BITS = 0;
    2c76:	e0 91 b9 03 	lds	r30, 0x03B9
    2c7a:	f0 91 ba 03 	lds	r31, 0x03BA
    2c7e:	80 81       	ld	r24, Z
    2c80:	88 7f       	andi	r24, 0xF8	; 248
    2c82:	80 83       	st	Z, r24
    2c84:	40 c0       	rjmp	.+128    	; 0x2d06 <M_ADC_enu_init+0x126>
		break;
	case PRES_2:
		PtrADCSRA->ADPS_BITS =1;
    2c86:	e0 91 b9 03 	lds	r30, 0x03B9
    2c8a:	f0 91 ba 03 	lds	r31, 0x03BA
    2c8e:	80 81       	ld	r24, Z
    2c90:	88 7f       	andi	r24, 0xF8	; 248
    2c92:	81 60       	ori	r24, 0x01	; 1
    2c94:	80 83       	st	Z, r24
    2c96:	37 c0       	rjmp	.+110    	; 0x2d06 <M_ADC_enu_init+0x126>
		break;
	case PRES_4 :
		PtrADCSRA->ADPS_BITS = 2;
    2c98:	e0 91 b9 03 	lds	r30, 0x03B9
    2c9c:	f0 91 ba 03 	lds	r31, 0x03BA
    2ca0:	80 81       	ld	r24, Z
    2ca2:	88 7f       	andi	r24, 0xF8	; 248
    2ca4:	82 60       	ori	r24, 0x02	; 2
    2ca6:	80 83       	st	Z, r24
    2ca8:	2e c0       	rjmp	.+92     	; 0x2d06 <M_ADC_enu_init+0x126>
		break;
	case PRES_8:
		PtrADCSRA->ADPS_BITS = 3;
    2caa:	e0 91 b9 03 	lds	r30, 0x03B9
    2cae:	f0 91 ba 03 	lds	r31, 0x03BA
    2cb2:	80 81       	ld	r24, Z
    2cb4:	88 7f       	andi	r24, 0xF8	; 248
    2cb6:	83 60       	ori	r24, 0x03	; 3
    2cb8:	80 83       	st	Z, r24
    2cba:	25 c0       	rjmp	.+74     	; 0x2d06 <M_ADC_enu_init+0x126>
		break;
	case PRES_16:
		PtrADCSRA->ADPS_BITS =4;
    2cbc:	e0 91 b9 03 	lds	r30, 0x03B9
    2cc0:	f0 91 ba 03 	lds	r31, 0x03BA
    2cc4:	80 81       	ld	r24, Z
    2cc6:	88 7f       	andi	r24, 0xF8	; 248
    2cc8:	84 60       	ori	r24, 0x04	; 4
    2cca:	80 83       	st	Z, r24
    2ccc:	1c c0       	rjmp	.+56     	; 0x2d06 <M_ADC_enu_init+0x126>
		break;
	case PRES_32:
		PtrADCSRA->ADPS_BITS = 5;
    2cce:	e0 91 b9 03 	lds	r30, 0x03B9
    2cd2:	f0 91 ba 03 	lds	r31, 0x03BA
    2cd6:	80 81       	ld	r24, Z
    2cd8:	88 7f       	andi	r24, 0xF8	; 248
    2cda:	85 60       	ori	r24, 0x05	; 5
    2cdc:	80 83       	st	Z, r24
    2cde:	13 c0       	rjmp	.+38     	; 0x2d06 <M_ADC_enu_init+0x126>
		break;
	case PRES_64:
		PtrADCSRA->ADPS_BITS =6;
    2ce0:	e0 91 b9 03 	lds	r30, 0x03B9
    2ce4:	f0 91 ba 03 	lds	r31, 0x03BA
    2ce8:	80 81       	ld	r24, Z
    2cea:	88 7f       	andi	r24, 0xF8	; 248
    2cec:	86 60       	ori	r24, 0x06	; 6
    2cee:	80 83       	st	Z, r24
    2cf0:	0a c0       	rjmp	.+20     	; 0x2d06 <M_ADC_enu_init+0x126>
		break;
	case PRES_128:
		PtrADCSRA->ADPS_BITS = 7;
    2cf2:	e0 91 b9 03 	lds	r30, 0x03B9
    2cf6:	f0 91 ba 03 	lds	r31, 0x03BA
    2cfa:	80 81       	ld	r24, Z
    2cfc:	87 60       	ori	r24, 0x07	; 7
    2cfe:	80 83       	st	Z, r24
    2d00:	02 c0       	rjmp	.+4      	; 0x2d06 <M_ADC_enu_init+0x126>
		break;
	default:
		Local_enuErrorState = ES_OUT_OF_RANGE;
    2d02:	82 e0       	ldi	r24, 0x02	; 2
    2d04:	8b 83       	std	Y+3, r24	; 0x03
		break;
	}

	/*channel selection*/
	if(copy_ADCcfg.INIT_CHNL<=31 && copy_ADCcfg.INIT_CHNL>=0){
    2d06:	8d 81       	ldd	r24, Y+5	; 0x05
    2d08:	80 32       	cpi	r24, 0x20	; 32
    2d0a:	78 f4       	brcc	.+30     	; 0x2d2a <M_ADC_enu_init+0x14a>
		PtrADMUX->MUX_BITS = copy_ADCcfg.INIT_CHNL;
    2d0c:	e0 91 b7 03 	lds	r30, 0x03B7
    2d10:	f0 91 b8 03 	lds	r31, 0x03B8
    2d14:	8d 81       	ldd	r24, Y+5	; 0x05
    2d16:	8f 71       	andi	r24, 0x1F	; 31
    2d18:	98 2f       	mov	r25, r24
    2d1a:	9f 71       	andi	r25, 0x1F	; 31
    2d1c:	80 81       	ld	r24, Z
    2d1e:	80 7e       	andi	r24, 0xE0	; 224
    2d20:	89 2b       	or	r24, r25
    2d22:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	8b 83       	std	Y+3, r24	; 0x03
    2d28:	02 c0       	rjmp	.+4      	; 0x2d2e <M_ADC_enu_init+0x14e>
	}
	else{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    2d2a:	82 e0       	ldi	r24, 0x02	; 2
    2d2c:	8b 83       	std	Y+3, r24	; 0x03
	}
	/*auto trigger*/
	ADC_MODE_TYPE ADC_MODE= copy_ADCcfg.INIT_MODE;
    2d2e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d30:	89 83       	std	Y+1, r24	; 0x01
	switch (ADC_MODE) {
    2d32:	89 81       	ldd	r24, Y+1	; 0x01
    2d34:	28 2f       	mov	r18, r24
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	3c 87       	std	Y+12, r19	; 0x0c
    2d3a:	2b 87       	std	Y+11, r18	; 0x0b
    2d3c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d3e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d40:	00 97       	sbiw	r24, 0x00	; 0
    2d42:	31 f0       	breq	.+12     	; 0x2d50 <M_ADC_enu_init+0x170>
    2d44:	2b 85       	ldd	r18, Y+11	; 0x0b
    2d46:	3c 85       	ldd	r19, Y+12	; 0x0c
    2d48:	21 30       	cpi	r18, 0x01	; 1
    2d4a:	31 05       	cpc	r19, r1
    2d4c:	49 f0       	breq	.+18     	; 0x2d60 <M_ADC_enu_init+0x180>
    2d4e:	10 c0       	rjmp	.+32     	; 0x2d70 <M_ADC_enu_init+0x190>
		case SINGLE_CONV:
			PtrADCSRA->ADATE_BITS=0;
    2d50:	e0 91 b9 03 	lds	r30, 0x03B9
    2d54:	f0 91 ba 03 	lds	r31, 0x03BA
    2d58:	80 81       	ld	r24, Z
    2d5a:	8f 7d       	andi	r24, 0xDF	; 223
    2d5c:	80 83       	st	Z, r24
    2d5e:	0a c0       	rjmp	.+20     	; 0x2d74 <M_ADC_enu_init+0x194>
			break;
		case AUTOTRIGGERED:
			PtrADCSRA->ADATE_BITS=1;
    2d60:	e0 91 b9 03 	lds	r30, 0x03B9
    2d64:	f0 91 ba 03 	lds	r31, 0x03BA
    2d68:	80 81       	ld	r24, Z
    2d6a:	80 62       	ori	r24, 0x20	; 32
    2d6c:	80 83       	st	Z, r24
    2d6e:	02 c0       	rjmp	.+4      	; 0x2d74 <M_ADC_enu_init+0x194>
			break;
		default:
			Local_enuErrorState = ES_OUT_OF_RANGE;
    2d70:	82 e0       	ldi	r24, 0x02	; 2
    2d72:	8b 83       	std	Y+3, r24	; 0x03
			break;
	}

	/*auto trigger source*/
	if(copy_ADCcfg.INIT_TRIG_SRC == FREE_RUNINNG ||copy_ADCcfg.INIT_TRIG_SRC ==EXT0 || copy_ADCcfg.INIT_TRIG_SRC ==TIM0_OVF){
    2d74:	88 85       	ldd	r24, Y+8	; 0x08
    2d76:	88 23       	and	r24, r24
    2d78:	31 f0       	breq	.+12     	; 0x2d86 <M_ADC_enu_init+0x1a6>
    2d7a:	88 85       	ldd	r24, Y+8	; 0x08
    2d7c:	82 30       	cpi	r24, 0x02	; 2
    2d7e:	19 f0       	breq	.+6      	; 0x2d86 <M_ADC_enu_init+0x1a6>
    2d80:	88 85       	ldd	r24, Y+8	; 0x08
    2d82:	84 30       	cpi	r24, 0x04	; 4
    2d84:	79 f4       	brne	.+30     	; 0x2da4 <M_ADC_enu_init+0x1c4>
		PtrSFIOR->ADTS_BITS = copy_ADCcfg.INIT_TRIG_SRC;
    2d86:	e0 91 bb 03 	lds	r30, 0x03BB
    2d8a:	f0 91 bc 03 	lds	r31, 0x03BC
    2d8e:	88 85       	ldd	r24, Y+8	; 0x08
    2d90:	87 70       	andi	r24, 0x07	; 7
    2d92:	98 2f       	mov	r25, r24
    2d94:	92 95       	swap	r25
    2d96:	99 0f       	add	r25, r25
    2d98:	90 7e       	andi	r25, 0xE0	; 224
    2d9a:	80 81       	ld	r24, Z
    2d9c:	8f 71       	andi	r24, 0x1F	; 31
    2d9e:	89 2b       	or	r24, r25
    2da0:	80 83       	st	Z, r24
    2da2:	02 c0       	rjmp	.+4      	; 0x2da8 <M_ADC_enu_init+0x1c8>
	}
	else{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    2da4:	82 e0       	ldi	r24, 0x02	; 2
    2da6:	8b 83       	std	Y+3, r24	; 0x03
	}
	/*conversion complete interrupt*/
	if(copy_ADCcfg.INIT_INT_MODE==POLLING || copy_ADCcfg.INIT_INT_MODE== ENABLED){
    2da8:	8f 81       	ldd	r24, Y+7	; 0x07
    2daa:	88 23       	and	r24, r24
    2dac:	19 f0       	breq	.+6      	; 0x2db4 <M_ADC_enu_init+0x1d4>
    2dae:	8f 81       	ldd	r24, Y+7	; 0x07
    2db0:	81 30       	cpi	r24, 0x01	; 1
    2db2:	81 f4       	brne	.+32     	; 0x2dd4 <M_ADC_enu_init+0x1f4>

		PtrADCSRA->ADIE_BITS=copy_ADCcfg.INIT_INT_MODE;
    2db4:	e0 91 b9 03 	lds	r30, 0x03B9
    2db8:	f0 91 ba 03 	lds	r31, 0x03BA
    2dbc:	8f 81       	ldd	r24, Y+7	; 0x07
    2dbe:	81 70       	andi	r24, 0x01	; 1
    2dc0:	81 70       	andi	r24, 0x01	; 1
    2dc2:	98 2f       	mov	r25, r24
    2dc4:	99 0f       	add	r25, r25
    2dc6:	99 0f       	add	r25, r25
    2dc8:	99 0f       	add	r25, r25
    2dca:	80 81       	ld	r24, Z
    2dcc:	87 7f       	andi	r24, 0xF7	; 247
    2dce:	89 2b       	or	r24, r25
    2dd0:	80 83       	st	Z, r24
    2dd2:	01 c0       	rjmp	.+2      	; 0x2dd6 <M_ADC_enu_init+0x1f6>
	}
	else{
		Local_enuErrorState = ES_NOK;
    2dd4:	1b 82       	std	Y+3, r1	; 0x03
	}
	/*Vref*/
	if(copy_ADCcfg.ADC_VREF==AREF_REF || copy_ADCcfg.ADC_VREF==AVCC_REF || copy_ADCcfg.ADC_VREF==INTERNAL_REF){
    2dd6:	89 85       	ldd	r24, Y+9	; 0x09
    2dd8:	88 23       	and	r24, r24
    2dda:	31 f0       	breq	.+12     	; 0x2de8 <M_ADC_enu_init+0x208>
    2ddc:	89 85       	ldd	r24, Y+9	; 0x09
    2dde:	81 30       	cpi	r24, 0x01	; 1
    2de0:	19 f0       	breq	.+6      	; 0x2de8 <M_ADC_enu_init+0x208>
    2de2:	89 85       	ldd	r24, Y+9	; 0x09
    2de4:	83 30       	cpi	r24, 0x03	; 3
    2de6:	81 f4       	brne	.+32     	; 0x2e08 <M_ADC_enu_init+0x228>
		PtrADMUX->REFS_BITS=copy_ADCcfg.ADC_VREF;
    2de8:	e0 91 b7 03 	lds	r30, 0x03B7
    2dec:	f0 91 b8 03 	lds	r31, 0x03B8
    2df0:	89 85       	ldd	r24, Y+9	; 0x09
    2df2:	83 70       	andi	r24, 0x03	; 3
    2df4:	98 2f       	mov	r25, r24
    2df6:	92 95       	swap	r25
    2df8:	99 0f       	add	r25, r25
    2dfa:	99 0f       	add	r25, r25
    2dfc:	90 7c       	andi	r25, 0xC0	; 192
    2dfe:	80 81       	ld	r24, Z
    2e00:	8f 73       	andi	r24, 0x3F	; 63
    2e02:	89 2b       	or	r24, r25
    2e04:	80 83       	st	Z, r24
    2e06:	01 c0       	rjmp	.+2      	; 0x2e0a <M_ADC_enu_init+0x22a>
	}
	else{
		Local_enuErrorState = ES_NOK;
    2e08:	1b 82       	std	Y+3, r1	; 0x03
	}
	/*data adjustment*/
	if(copy_ADCcfg.ADC_ADJ == LEFT_ADJ || copy_ADCcfg.ADC_ADJ == RIGHT_ADJ){
    2e0a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e0c:	81 30       	cpi	r24, 0x01	; 1
    2e0e:	19 f0       	breq	.+6      	; 0x2e16 <M_ADC_enu_init+0x236>
    2e10:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e12:	88 23       	and	r24, r24
    2e14:	81 f4       	brne	.+32     	; 0x2e36 <M_ADC_enu_init+0x256>
		PtrADMUX->ADLAR_BITS = copy_ADCcfg.ADC_ADJ;
    2e16:	e0 91 b7 03 	lds	r30, 0x03B7
    2e1a:	f0 91 b8 03 	lds	r31, 0x03B8
    2e1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e20:	81 70       	andi	r24, 0x01	; 1
    2e22:	81 70       	andi	r24, 0x01	; 1
    2e24:	98 2f       	mov	r25, r24
    2e26:	92 95       	swap	r25
    2e28:	99 0f       	add	r25, r25
    2e2a:	90 7e       	andi	r25, 0xE0	; 224
    2e2c:	80 81       	ld	r24, Z
    2e2e:	8f 7d       	andi	r24, 0xDF	; 223
    2e30:	89 2b       	or	r24, r25
    2e32:	80 83       	st	Z, r24
    2e34:	01 c0       	rjmp	.+2      	; 0x2e38 <M_ADC_enu_init+0x258>
	}
	else{
		Local_enuErrorState = ES_NOK;
    2e36:	1b 82       	std	Y+3, r1	; 0x03
	}
	/*enable ADC*/
	PtrADCSRA->ADEN_BITS =1;
    2e38:	e0 91 b9 03 	lds	r30, 0x03B9
    2e3c:	f0 91 ba 03 	lds	r31, 0x03BA
    2e40:	80 81       	ld	r24, Z
    2e42:	80 68       	ori	r24, 0x80	; 128
    2e44:	80 83       	st	Z, r24

	return Local_enuErrorState;
    2e46:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2e48:	2e 96       	adiw	r28, 0x0e	; 14
    2e4a:	0f b6       	in	r0, 0x3f	; 63
    2e4c:	f8 94       	cli
    2e4e:	de bf       	out	0x3e, r29	; 62
    2e50:	0f be       	out	0x3f, r0	; 63
    2e52:	cd bf       	out	0x3d, r28	; 61
    2e54:	cf 91       	pop	r28
    2e56:	df 91       	pop	r29
    2e58:	08 95       	ret

00002e5a <M_ADC_enu_getDigitalValueSynchNonBlocking>:

ES_t M_ADC_enu_getDigitalValueSynchNonBlocking(ADC_cfg_type* copy_ADCcfg, u8* voltage){
    2e5a:	df 93       	push	r29
    2e5c:	cf 93       	push	r28
    2e5e:	cd b7       	in	r28, 0x3d	; 61
    2e60:	de b7       	in	r29, 0x3e	; 62
    2e62:	27 97       	sbiw	r28, 0x07	; 7
    2e64:	0f b6       	in	r0, 0x3f	; 63
    2e66:	f8 94       	cli
    2e68:	de bf       	out	0x3e, r29	; 62
    2e6a:	0f be       	out	0x3f, r0	; 63
    2e6c:	cd bf       	out	0x3d, r28	; 61
    2e6e:	9d 83       	std	Y+5, r25	; 0x05
    2e70:	8c 83       	std	Y+4, r24	; 0x04
    2e72:	7f 83       	std	Y+7, r23	; 0x07
    2e74:	6e 83       	std	Y+6, r22	; 0x06
	ES_t Local_enuErroState = ES_OK;
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	8b 83       	std	Y+3, r24	; 0x03
	u16 digital_data=0;
    2e7a:	1a 82       	std	Y+2, r1	; 0x02
    2e7c:	19 82       	std	Y+1, r1	; 0x01
	/*start conversion*/
	M_ADC_enu_startConversion();
    2e7e:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <M_ADC_enu_startConversion>
		/*poling on ADIF*/
	while(!(PtrADCSRA->ADIF_BITS)){}
    2e82:	e0 91 b9 03 	lds	r30, 0x03B9
    2e86:	f0 91 ba 03 	lds	r31, 0x03BA
    2e8a:	80 81       	ld	r24, Z
    2e8c:	80 71       	andi	r24, 0x10	; 16
    2e8e:	88 23       	and	r24, r24
    2e90:	c1 f3       	breq	.-16     	; 0x2e82 <M_ADC_enu_getDigitalValueSynchNonBlocking+0x28>
		/*read the result*/
		if(voltage != NULL){
    2e92:	8e 81       	ldd	r24, Y+6	; 0x06
    2e94:	9f 81       	ldd	r25, Y+7	; 0x07
    2e96:	00 97       	sbiw	r24, 0x00	; 0
    2e98:	09 f4       	brne	.+2      	; 0x2e9c <M_ADC_enu_getDigitalValueSynchNonBlocking+0x42>
    2e9a:	3f c0       	rjmp	.+126    	; 0x2f1a <M_ADC_enu_getDigitalValueSynchNonBlocking+0xc0>
			if(!copy_ADCcfg->ADC_ADJ){
    2e9c:	ec 81       	ldd	r30, Y+4	; 0x04
    2e9e:	fd 81       	ldd	r31, Y+5	; 0x05
    2ea0:	86 81       	ldd	r24, Z+6	; 0x06
    2ea2:	88 23       	and	r24, r24
    2ea4:	b1 f4       	brne	.+44     	; 0x2ed2 <M_ADC_enu_getDigitalValueSynchNonBlocking+0x78>
				digital_data = ADCL_reg;
    2ea6:	e4 e2       	ldi	r30, 0x24	; 36
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	80 81       	ld	r24, Z
    2eac:	88 2f       	mov	r24, r24
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	9a 83       	std	Y+2, r25	; 0x02
    2eb2:	89 83       	std	Y+1, r24	; 0x01
				digital_data |= (ADCH_reg<<8);
    2eb4:	e5 e2       	ldi	r30, 0x25	; 37
    2eb6:	f0 e0       	ldi	r31, 0x00	; 0
    2eb8:	80 81       	ld	r24, Z
    2eba:	88 2f       	mov	r24, r24
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	98 2f       	mov	r25, r24
    2ec0:	88 27       	eor	r24, r24
    2ec2:	9c 01       	movw	r18, r24
    2ec4:	89 81       	ldd	r24, Y+1	; 0x01
    2ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec8:	82 2b       	or	r24, r18
    2eca:	93 2b       	or	r25, r19
    2ecc:	9a 83       	std	Y+2, r25	; 0x02
    2ece:	89 83       	std	Y+1, r24	; 0x01
    2ed0:	26 c0       	rjmp	.+76     	; 0x2f1e <M_ADC_enu_getDigitalValueSynchNonBlocking+0xc4>
			}
			else if(copy_ADCcfg->ADC_ADJ){
    2ed2:	ec 81       	ldd	r30, Y+4	; 0x04
    2ed4:	fd 81       	ldd	r31, Y+5	; 0x05
    2ed6:	86 81       	ldd	r24, Z+6	; 0x06
    2ed8:	88 23       	and	r24, r24
    2eda:	e1 f0       	breq	.+56     	; 0x2f14 <M_ADC_enu_getDigitalValueSynchNonBlocking+0xba>
				digital_data = (ADCL_reg>>6);
    2edc:	e4 e2       	ldi	r30, 0x24	; 36
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	80 81       	ld	r24, Z
    2ee2:	82 95       	swap	r24
    2ee4:	86 95       	lsr	r24
    2ee6:	86 95       	lsr	r24
    2ee8:	83 70       	andi	r24, 0x03	; 3
    2eea:	88 2f       	mov	r24, r24
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	9a 83       	std	Y+2, r25	; 0x02
    2ef0:	89 83       	std	Y+1, r24	; 0x01
				digital_data |= (ADCH_reg<<2);
    2ef2:	e5 e2       	ldi	r30, 0x25	; 37
    2ef4:	f0 e0       	ldi	r31, 0x00	; 0
    2ef6:	80 81       	ld	r24, Z
    2ef8:	88 2f       	mov	r24, r24
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	88 0f       	add	r24, r24
    2efe:	99 1f       	adc	r25, r25
    2f00:	88 0f       	add	r24, r24
    2f02:	99 1f       	adc	r25, r25
    2f04:	9c 01       	movw	r18, r24
    2f06:	89 81       	ldd	r24, Y+1	; 0x01
    2f08:	9a 81       	ldd	r25, Y+2	; 0x02
    2f0a:	82 2b       	or	r24, r18
    2f0c:	93 2b       	or	r25, r19
    2f0e:	9a 83       	std	Y+2, r25	; 0x02
    2f10:	89 83       	std	Y+1, r24	; 0x01
    2f12:	05 c0       	rjmp	.+10     	; 0x2f1e <M_ADC_enu_getDigitalValueSynchNonBlocking+0xc4>
			}
			else{
				Local_enuErroState = ES_OUT_OF_RANGE;
    2f14:	82 e0       	ldi	r24, 0x02	; 2
    2f16:	8b 83       	std	Y+3, r24	; 0x03
    2f18:	02 c0       	rjmp	.+4      	; 0x2f1e <M_ADC_enu_getDigitalValueSynchNonBlocking+0xc4>
			}
		}
		else {
			Local_enuErroState = ES_NULL_POINTER;
    2f1a:	83 e0       	ldi	r24, 0x03	; 3
    2f1c:	8b 83       	std	Y+3, r24	; 0x03
		}
		/*convert digital value to voltage*/
		*voltage = digital_data;/*5.00/1024.00;*/
    2f1e:	89 81       	ldd	r24, Y+1	; 0x01
    2f20:	ee 81       	ldd	r30, Y+6	; 0x06
    2f22:	ff 81       	ldd	r31, Y+7	; 0x07
    2f24:	80 83       	st	Z, r24
		/*clear ADIF*/
		PtrADCSRA-> ADIF_BITS = 1;
    2f26:	e0 91 b9 03 	lds	r30, 0x03B9
    2f2a:	f0 91 ba 03 	lds	r31, 0x03BA
    2f2e:	80 81       	ld	r24, Z
    2f30:	80 61       	ori	r24, 0x10	; 16
    2f32:	80 83       	st	Z, r24

	return Local_enuErroState;
    2f34:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2f36:	27 96       	adiw	r28, 0x07	; 7
    2f38:	0f b6       	in	r0, 0x3f	; 63
    2f3a:	f8 94       	cli
    2f3c:	de bf       	out	0x3e, r29	; 62
    2f3e:	0f be       	out	0x3f, r0	; 63
    2f40:	cd bf       	out	0x3d, r28	; 61
    2f42:	cf 91       	pop	r28
    2f44:	df 91       	pop	r29
    2f46:	08 95       	ret

00002f48 <M_ADC_enu_startConversion>:

ES_t M_ADC_enu_startConversion(){
    2f48:	df 93       	push	r29
    2f4a:	cf 93       	push	r28
    2f4c:	0f 92       	push	r0
    2f4e:	cd b7       	in	r28, 0x3d	; 61
    2f50:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_OK;
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	89 83       	std	Y+1, r24	; 0x01
	PtrADCSRA->ADSC_BITS =1;
    2f56:	e0 91 b9 03 	lds	r30, 0x03B9
    2f5a:	f0 91 ba 03 	lds	r31, 0x03BA
    2f5e:	80 81       	ld	r24, Z
    2f60:	80 64       	ori	r24, 0x40	; 64
    2f62:	80 83       	st	Z, r24
	return Local_enuErrorState;
    2f64:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f66:	0f 90       	pop	r0
    2f68:	cf 91       	pop	r28
    2f6a:	df 91       	pop	r29
    2f6c:	08 95       	ret

00002f6e <M_ADC_enu_getDigitalValueAsynchCallBack>:


ES_t M_ADC_enu_getDigitalValueAsynchCallBack( float* voltage){
    2f6e:	df 93       	push	r29
    2f70:	cf 93       	push	r28
    2f72:	00 d0       	rcall	.+0      	; 0x2f74 <M_ADC_enu_getDigitalValueAsynchCallBack+0x6>
    2f74:	00 d0       	rcall	.+0      	; 0x2f76 <M_ADC_enu_getDigitalValueAsynchCallBack+0x8>
    2f76:	0f 92       	push	r0
    2f78:	cd b7       	in	r28, 0x3d	; 61
    2f7a:	de b7       	in	r29, 0x3e	; 62
    2f7c:	9d 83       	std	Y+5, r25	; 0x05
    2f7e:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErroState = ES_OK;
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	8b 83       	std	Y+3, r24	; 0x03
	u16 digital_data=0;
    2f84:	1a 82       	std	Y+2, r1	; 0x02
    2f86:	19 82       	std	Y+1, r1	; 0x01
	/*start conversion
	M_ADC_enu_startConversion();*/
	/*read the result*/
	if(voltage != NULL){
    2f88:	8c 81       	ldd	r24, Y+4	; 0x04
    2f8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f8c:	00 97       	sbiw	r24, 0x00	; 0
    2f8e:	09 f4       	brne	.+2      	; 0x2f92 <M_ADC_enu_getDigitalValueAsynchCallBack+0x24>
    2f90:	88 c0       	rjmp	.+272    	; 0x30a2 <M_ADC_enu_getDigitalValueAsynchCallBack+0x134>
		if(!PtrADMUX->ADLAR_BITS){
    2f92:	e0 91 b7 03 	lds	r30, 0x03B7
    2f96:	f0 91 b8 03 	lds	r31, 0x03B8
    2f9a:	80 81       	ld	r24, Z
    2f9c:	80 72       	andi	r24, 0x20	; 32
    2f9e:	88 23       	and	r24, r24
    2fa0:	b1 f4       	brne	.+44     	; 0x2fce <M_ADC_enu_getDigitalValueAsynchCallBack+0x60>
			digital_data = ADCL_reg;
    2fa2:	e4 e2       	ldi	r30, 0x24	; 36
    2fa4:	f0 e0       	ldi	r31, 0x00	; 0
    2fa6:	80 81       	ld	r24, Z
    2fa8:	88 2f       	mov	r24, r24
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	9a 83       	std	Y+2, r25	; 0x02
    2fae:	89 83       	std	Y+1, r24	; 0x01
			digital_data |= (ADCH_reg<<8);
    2fb0:	e5 e2       	ldi	r30, 0x25	; 37
    2fb2:	f0 e0       	ldi	r31, 0x00	; 0
    2fb4:	80 81       	ld	r24, Z
    2fb6:	88 2f       	mov	r24, r24
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	98 2f       	mov	r25, r24
    2fbc:	88 27       	eor	r24, r24
    2fbe:	9c 01       	movw	r18, r24
    2fc0:	89 81       	ldd	r24, Y+1	; 0x01
    2fc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fc4:	82 2b       	or	r24, r18
    2fc6:	93 2b       	or	r25, r19
    2fc8:	9a 83       	std	Y+2, r25	; 0x02
    2fca:	89 83       	std	Y+1, r24	; 0x01
    2fcc:	26 c0       	rjmp	.+76     	; 0x301a <M_ADC_enu_getDigitalValueAsynchCallBack+0xac>
		}
		else if(PtrADMUX->ADLAR_BITS){
    2fce:	e0 91 b7 03 	lds	r30, 0x03B7
    2fd2:	f0 91 b8 03 	lds	r31, 0x03B8
    2fd6:	80 81       	ld	r24, Z
    2fd8:	80 72       	andi	r24, 0x20	; 32
    2fda:	88 23       	and	r24, r24
    2fdc:	e1 f0       	breq	.+56     	; 0x3016 <M_ADC_enu_getDigitalValueAsynchCallBack+0xa8>
			digital_data = (ADCL_reg>>6);
    2fde:	e4 e2       	ldi	r30, 0x24	; 36
    2fe0:	f0 e0       	ldi	r31, 0x00	; 0
    2fe2:	80 81       	ld	r24, Z
    2fe4:	82 95       	swap	r24
    2fe6:	86 95       	lsr	r24
    2fe8:	86 95       	lsr	r24
    2fea:	83 70       	andi	r24, 0x03	; 3
    2fec:	88 2f       	mov	r24, r24
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	9a 83       	std	Y+2, r25	; 0x02
    2ff2:	89 83       	std	Y+1, r24	; 0x01
			digital_data |= (ADCH_reg<<2);
    2ff4:	e5 e2       	ldi	r30, 0x25	; 37
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	80 81       	ld	r24, Z
    2ffa:	88 2f       	mov	r24, r24
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	88 0f       	add	r24, r24
    3000:	99 1f       	adc	r25, r25
    3002:	88 0f       	add	r24, r24
    3004:	99 1f       	adc	r25, r25
    3006:	9c 01       	movw	r18, r24
    3008:	89 81       	ldd	r24, Y+1	; 0x01
    300a:	9a 81       	ldd	r25, Y+2	; 0x02
    300c:	82 2b       	or	r24, r18
    300e:	93 2b       	or	r25, r19
    3010:	9a 83       	std	Y+2, r25	; 0x02
    3012:	89 83       	std	Y+1, r24	; 0x01
    3014:	02 c0       	rjmp	.+4      	; 0x301a <M_ADC_enu_getDigitalValueAsynchCallBack+0xac>
		}
		else{
			Local_enuErroState = ES_OUT_OF_RANGE;
    3016:	82 e0       	ldi	r24, 0x02	; 2
    3018:	8b 83       	std	Y+3, r24	; 0x03
		}
		/*convert digital value to voltage*/
				*voltage = 100*digital_data*5.00/1024.00;
    301a:	29 81       	ldd	r18, Y+1	; 0x01
    301c:	3a 81       	ldd	r19, Y+2	; 0x02
    301e:	84 e6       	ldi	r24, 0x64	; 100
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	ac 01       	movw	r20, r24
    3024:	24 9f       	mul	r18, r20
    3026:	c0 01       	movw	r24, r0
    3028:	25 9f       	mul	r18, r21
    302a:	90 0d       	add	r25, r0
    302c:	34 9f       	mul	r19, r20
    302e:	90 0d       	add	r25, r0
    3030:	11 24       	eor	r1, r1
    3032:	cc 01       	movw	r24, r24
    3034:	a0 e0       	ldi	r26, 0x00	; 0
    3036:	b0 e0       	ldi	r27, 0x00	; 0
    3038:	bc 01       	movw	r22, r24
    303a:	cd 01       	movw	r24, r26
    303c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3040:	dc 01       	movw	r26, r24
    3042:	cb 01       	movw	r24, r22
    3044:	bc 01       	movw	r22, r24
    3046:	cd 01       	movw	r24, r26
    3048:	20 e0       	ldi	r18, 0x00	; 0
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	40 ea       	ldi	r20, 0xA0	; 160
    304e:	50 e4       	ldi	r21, 0x40	; 64
    3050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3054:	dc 01       	movw	r26, r24
    3056:	cb 01       	movw	r24, r22
    3058:	bc 01       	movw	r22, r24
    305a:	cd 01       	movw	r24, r26
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	40 e8       	ldi	r20, 0x80	; 128
    3062:	54 e4       	ldi	r21, 0x44	; 68
    3064:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3068:	dc 01       	movw	r26, r24
    306a:	cb 01       	movw	r24, r22
    306c:	ec 81       	ldd	r30, Y+4	; 0x04
    306e:	fd 81       	ldd	r31, Y+5	; 0x05
    3070:	80 83       	st	Z, r24
    3072:	91 83       	std	Z+1, r25	; 0x01
    3074:	a2 83       	std	Z+2, r26	; 0x02
    3076:	b3 83       	std	Z+3, r27	; 0x03
				H_LCD_void_gotoXY(1, 1);
    3078:	81 e0       	ldi	r24, 0x01	; 1
    307a:	61 e0       	ldi	r22, 0x01	; 1
    307c:	0e 94 ee 2a 	call	0x55dc	; 0x55dc <H_LCD_void_gotoXY>
				H_LCD_void_sendIntNum((s32)*voltage);
    3080:	ec 81       	ldd	r30, Y+4	; 0x04
    3082:	fd 81       	ldd	r31, Y+5	; 0x05
    3084:	80 81       	ld	r24, Z
    3086:	91 81       	ldd	r25, Z+1	; 0x01
    3088:	a2 81       	ldd	r26, Z+2	; 0x02
    308a:	b3 81       	ldd	r27, Z+3	; 0x03
    308c:	bc 01       	movw	r22, r24
    308e:	cd 01       	movw	r24, r26
    3090:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3094:	dc 01       	movw	r26, r24
    3096:	cb 01       	movw	r24, r22
    3098:	bc 01       	movw	r22, r24
    309a:	cd 01       	movw	r24, r26
    309c:	0e 94 99 2a 	call	0x5532	; 0x5532 <H_LCD_void_sendIntNum>
    30a0:	02 c0       	rjmp	.+4      	; 0x30a6 <M_ADC_enu_getDigitalValueAsynchCallBack+0x138>
	}
	else{
		Local_enuErroState = ES_NULL_POINTER;
    30a2:	83 e0       	ldi	r24, 0x03	; 3
    30a4:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Local_enuErroState;
    30a6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    30a8:	0f 90       	pop	r0
    30aa:	0f 90       	pop	r0
    30ac:	0f 90       	pop	r0
    30ae:	0f 90       	pop	r0
    30b0:	0f 90       	pop	r0
    30b2:	cf 91       	pop	r28
    30b4:	df 91       	pop	r29
    30b6:	08 95       	ret

000030b8 <M_ADC_enu_setCallBack>:

ES_t M_ADC_enu_setCallBack(ES_t (*Copy_ADCpfunAppFun)(void*), void * Copy_ADCpvidAppParameter){
    30b8:	df 93       	push	r29
    30ba:	cf 93       	push	r28
    30bc:	00 d0       	rcall	.+0      	; 0x30be <M_ADC_enu_setCallBack+0x6>
    30be:	00 d0       	rcall	.+0      	; 0x30c0 <M_ADC_enu_setCallBack+0x8>
    30c0:	0f 92       	push	r0
    30c2:	cd b7       	in	r28, 0x3d	; 61
    30c4:	de b7       	in	r29, 0x3e	; 62
    30c6:	9b 83       	std	Y+3, r25	; 0x03
    30c8:	8a 83       	std	Y+2, r24	; 0x02
    30ca:	7d 83       	std	Y+5, r23	; 0x05
    30cc:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    30ce:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_ADCpfunAppFun != NULL){
    30d0:	8a 81       	ldd	r24, Y+2	; 0x02
    30d2:	9b 81       	ldd	r25, Y+3	; 0x03
    30d4:	00 97       	sbiw	r24, 0x00	; 0
    30d6:	79 f0       	breq	.+30     	; 0x30f6 <M_ADC_enu_setCallBack+0x3e>
		ADCpfunAppFun = Copy_ADCpfunAppFun;
    30d8:	8a 81       	ldd	r24, Y+2	; 0x02
    30da:	9b 81       	ldd	r25, Y+3	; 0x03
    30dc:	90 93 c8 04 	sts	0x04C8, r25
    30e0:	80 93 c7 04 	sts	0x04C7, r24
		ADCpvidAppParameter = Copy_ADCpvidAppParameter;
    30e4:	8c 81       	ldd	r24, Y+4	; 0x04
    30e6:	9d 81       	ldd	r25, Y+5	; 0x05
    30e8:	90 93 ca 04 	sts	0x04CA, r25
    30ec:	80 93 c9 04 	sts	0x04C9, r24
		Local_enuErrorState = ES_OK;
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	89 83       	std	Y+1, r24	; 0x01
    30f4:	02 c0       	rjmp	.+4      	; 0x30fa <M_ADC_enu_setCallBack+0x42>
	}
	else{
		Local_enuErrorState =ES_NULL_POINTER;
    30f6:	83 e0       	ldi	r24, 0x03	; 3
    30f8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    30fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    30fc:	0f 90       	pop	r0
    30fe:	0f 90       	pop	r0
    3100:	0f 90       	pop	r0
    3102:	0f 90       	pop	r0
    3104:	0f 90       	pop	r0
    3106:	cf 91       	pop	r28
    3108:	df 91       	pop	r29
    310a:	08 95       	ret

0000310c <M_ADC_enu_selectChannel>:

ES_t M_ADC_enu_selectChannel(ADC_CHNL_TYPE copy_ADC_chnl){
    310c:	df 93       	push	r29
    310e:	cf 93       	push	r28
    3110:	00 d0       	rcall	.+0      	; 0x3112 <M_ADC_enu_selectChannel+0x6>
    3112:	cd b7       	in	r28, 0x3d	; 61
    3114:	de b7       	in	r29, 0x3e	; 62
    3116:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3118:	19 82       	std	Y+1, r1	; 0x01
	/*channel selection*/
	if(copy_ADC_chnl<=31 && copy_ADC_chnl>=0){
    311a:	8a 81       	ldd	r24, Y+2	; 0x02
    311c:	80 32       	cpi	r24, 0x20	; 32
    311e:	78 f4       	brcc	.+30     	; 0x313e <M_ADC_enu_selectChannel+0x32>
		PtrADMUX->MUX_BITS = copy_ADC_chnl;
    3120:	e0 91 b7 03 	lds	r30, 0x03B7
    3124:	f0 91 b8 03 	lds	r31, 0x03B8
    3128:	8a 81       	ldd	r24, Y+2	; 0x02
    312a:	8f 71       	andi	r24, 0x1F	; 31
    312c:	98 2f       	mov	r25, r24
    312e:	9f 71       	andi	r25, 0x1F	; 31
    3130:	80 81       	ld	r24, Z
    3132:	80 7e       	andi	r24, 0xE0	; 224
    3134:	89 2b       	or	r24, r25
    3136:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    3138:	81 e0       	ldi	r24, 0x01	; 1
    313a:	89 83       	std	Y+1, r24	; 0x01
    313c:	02 c0       	rjmp	.+4      	; 0x3142 <M_ADC_enu_selectChannel+0x36>
	}
	else{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    313e:	82 e0       	ldi	r24, 0x02	; 2
    3140:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    3142:	89 81       	ldd	r24, Y+1	; 0x01
}
    3144:	0f 90       	pop	r0
    3146:	0f 90       	pop	r0
    3148:	cf 91       	pop	r28
    314a:	df 91       	pop	r29
    314c:	08 95       	ret

0000314e <__vector_16>:


ISR(ADC_vect){
    314e:	1f 92       	push	r1
    3150:	0f 92       	push	r0
    3152:	0f b6       	in	r0, 0x3f	; 63
    3154:	0f 92       	push	r0
    3156:	11 24       	eor	r1, r1
    3158:	2f 93       	push	r18
    315a:	3f 93       	push	r19
    315c:	4f 93       	push	r20
    315e:	5f 93       	push	r21
    3160:	6f 93       	push	r22
    3162:	7f 93       	push	r23
    3164:	8f 93       	push	r24
    3166:	9f 93       	push	r25
    3168:	af 93       	push	r26
    316a:	bf 93       	push	r27
    316c:	ef 93       	push	r30
    316e:	ff 93       	push	r31
    3170:	df 93       	push	r29
    3172:	cf 93       	push	r28
    3174:	cd b7       	in	r28, 0x3d	; 61
    3176:	de b7       	in	r29, 0x3e	; 62
	if(ADCpfunAppFun != NULL){
    3178:	80 91 c7 04 	lds	r24, 0x04C7
    317c:	90 91 c8 04 	lds	r25, 0x04C8
    3180:	00 97       	sbiw	r24, 0x00	; 0
    3182:	49 f0       	breq	.+18     	; 0x3196 <__vector_16+0x48>
		ADCpfunAppFun(ADCpvidAppParameter);
    3184:	e0 91 c7 04 	lds	r30, 0x04C7
    3188:	f0 91 c8 04 	lds	r31, 0x04C8
    318c:	80 91 c9 04 	lds	r24, 0x04C9
    3190:	90 91 ca 04 	lds	r25, 0x04CA
    3194:	09 95       	icall
	}
	PtrADCSRA->ADIF_BITS=1;
    3196:	e0 91 b9 03 	lds	r30, 0x03B9
    319a:	f0 91 ba 03 	lds	r31, 0x03BA
    319e:	80 81       	ld	r24, Z
    31a0:	80 61       	ori	r24, 0x10	; 16
    31a2:	80 83       	st	Z, r24
}
    31a4:	cf 91       	pop	r28
    31a6:	df 91       	pop	r29
    31a8:	ff 91       	pop	r31
    31aa:	ef 91       	pop	r30
    31ac:	bf 91       	pop	r27
    31ae:	af 91       	pop	r26
    31b0:	9f 91       	pop	r25
    31b2:	8f 91       	pop	r24
    31b4:	7f 91       	pop	r23
    31b6:	6f 91       	pop	r22
    31b8:	5f 91       	pop	r21
    31ba:	4f 91       	pop	r20
    31bc:	3f 91       	pop	r19
    31be:	2f 91       	pop	r18
    31c0:	0f 90       	pop	r0
    31c2:	0f be       	out	0x3f, r0	; 63
    31c4:	0f 90       	pop	r0
    31c6:	1f 90       	pop	r1
    31c8:	18 95       	reti

000031ca <wifi_connect>:
#include <util/delay.h>
/***********************************************************************/
/* Wifi initialization function to connect to wifi and TCP server */
/***********************************************************************/
void wifi_connect()
{
    31ca:	0f 93       	push	r16
    31cc:	1f 93       	push	r17
    31ce:	df 93       	push	r29
    31d0:	cf 93       	push	r28
    31d2:	cd b7       	in	r28, 0x3d	; 61
    31d4:	de b7       	in	r29, 0x3e	; 62
    31d6:	ce 5e       	subi	r28, 0xEE	; 238
    31d8:	d0 40       	sbci	r29, 0x00	; 0
    31da:	0f b6       	in	r0, 0x3f	; 63
    31dc:	f8 94       	cli
    31de:	de bf       	out	0x3e, r29	; 62
    31e0:	0f be       	out	0x3f, r0	; 63
    31e2:	cd bf       	out	0x3d, r28	; 61
	/* Set callback function to recive wifi responses */
	UART_Set_CallBack(Wifi_Response_Reciver_UART_CallBack);
    31e4:	88 e7       	ldi	r24, 0x78	; 120
    31e6:	96 e2       	ldi	r25, 0x26	; 38
    31e8:	0e 94 ee 08 	call	0x11dc	; 0x11dc <UART_Set_CallBack>
	
	/* Stop echo and check for OK */
	UART_sendString("ATE0\r\n");
    31ec:	80 e6       	ldi	r24, 0x60	; 96
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	0e 94 c4 07 	call	0xf88	; 0xf88 <UART_sendString>
    31f4:	fe 01       	movw	r30, r28
    31f6:	e5 51       	subi	r30, 0x15	; 21
    31f8:	ff 4f       	sbci	r31, 0xFF	; 255
    31fa:	80 e0       	ldi	r24, 0x00	; 0
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	aa e7       	ldi	r26, 0x7A	; 122
    3200:	b4 e4       	ldi	r27, 0x44	; 68
    3202:	80 83       	st	Z, r24
    3204:	91 83       	std	Z+1, r25	; 0x01
    3206:	a2 83       	std	Z+2, r26	; 0x02
    3208:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    320a:	8e 01       	movw	r16, r28
    320c:	09 51       	subi	r16, 0x19	; 25
    320e:	1f 4f       	sbci	r17, 0xFF	; 255
    3210:	fe 01       	movw	r30, r28
    3212:	e5 51       	subi	r30, 0x15	; 21
    3214:	ff 4f       	sbci	r31, 0xFF	; 255
    3216:	60 81       	ld	r22, Z
    3218:	71 81       	ldd	r23, Z+1	; 0x01
    321a:	82 81       	ldd	r24, Z+2	; 0x02
    321c:	93 81       	ldd	r25, Z+3	; 0x03
    321e:	20 e0       	ldi	r18, 0x00	; 0
    3220:	30 e0       	ldi	r19, 0x00	; 0
    3222:	4a e7       	ldi	r20, 0x7A	; 122
    3224:	55 e4       	ldi	r21, 0x45	; 69
    3226:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322a:	dc 01       	movw	r26, r24
    322c:	cb 01       	movw	r24, r22
    322e:	f8 01       	movw	r30, r16
    3230:	80 83       	st	Z, r24
    3232:	91 83       	std	Z+1, r25	; 0x01
    3234:	a2 83       	std	Z+2, r26	; 0x02
    3236:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3238:	fe 01       	movw	r30, r28
    323a:	e9 51       	subi	r30, 0x19	; 25
    323c:	ff 4f       	sbci	r31, 0xFF	; 255
    323e:	60 81       	ld	r22, Z
    3240:	71 81       	ldd	r23, Z+1	; 0x01
    3242:	82 81       	ldd	r24, Z+2	; 0x02
    3244:	93 81       	ldd	r25, Z+3	; 0x03
    3246:	20 e0       	ldi	r18, 0x00	; 0
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	40 e8       	ldi	r20, 0x80	; 128
    324c:	5f e3       	ldi	r21, 0x3F	; 63
    324e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3252:	88 23       	and	r24, r24
    3254:	44 f4       	brge	.+16     	; 0x3266 <wifi_connect+0x9c>
		__ticks = 1;
    3256:	fe 01       	movw	r30, r28
    3258:	eb 51       	subi	r30, 0x1B	; 27
    325a:	ff 4f       	sbci	r31, 0xFF	; 255
    325c:	81 e0       	ldi	r24, 0x01	; 1
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	91 83       	std	Z+1, r25	; 0x01
    3262:	80 83       	st	Z, r24
    3264:	64 c0       	rjmp	.+200    	; 0x332e <wifi_connect+0x164>
	else if (__tmp > 65535)
    3266:	fe 01       	movw	r30, r28
    3268:	e9 51       	subi	r30, 0x19	; 25
    326a:	ff 4f       	sbci	r31, 0xFF	; 255
    326c:	60 81       	ld	r22, Z
    326e:	71 81       	ldd	r23, Z+1	; 0x01
    3270:	82 81       	ldd	r24, Z+2	; 0x02
    3272:	93 81       	ldd	r25, Z+3	; 0x03
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	3f ef       	ldi	r19, 0xFF	; 255
    3278:	4f e7       	ldi	r20, 0x7F	; 127
    327a:	57 e4       	ldi	r21, 0x47	; 71
    327c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3280:	18 16       	cp	r1, r24
    3282:	0c f0       	brlt	.+2      	; 0x3286 <wifi_connect+0xbc>
    3284:	43 c0       	rjmp	.+134    	; 0x330c <wifi_connect+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3286:	fe 01       	movw	r30, r28
    3288:	e5 51       	subi	r30, 0x15	; 21
    328a:	ff 4f       	sbci	r31, 0xFF	; 255
    328c:	60 81       	ld	r22, Z
    328e:	71 81       	ldd	r23, Z+1	; 0x01
    3290:	82 81       	ldd	r24, Z+2	; 0x02
    3292:	93 81       	ldd	r25, Z+3	; 0x03
    3294:	20 e0       	ldi	r18, 0x00	; 0
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	40 e2       	ldi	r20, 0x20	; 32
    329a:	51 e4       	ldi	r21, 0x41	; 65
    329c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a0:	dc 01       	movw	r26, r24
    32a2:	cb 01       	movw	r24, r22
    32a4:	8e 01       	movw	r16, r28
    32a6:	0b 51       	subi	r16, 0x1B	; 27
    32a8:	1f 4f       	sbci	r17, 0xFF	; 255
    32aa:	bc 01       	movw	r22, r24
    32ac:	cd 01       	movw	r24, r26
    32ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b2:	dc 01       	movw	r26, r24
    32b4:	cb 01       	movw	r24, r22
    32b6:	f8 01       	movw	r30, r16
    32b8:	91 83       	std	Z+1, r25	; 0x01
    32ba:	80 83       	st	Z, r24
    32bc:	1f c0       	rjmp	.+62     	; 0x32fc <wifi_connect+0x132>
    32be:	fe 01       	movw	r30, r28
    32c0:	ed 51       	subi	r30, 0x1D	; 29
    32c2:	ff 4f       	sbci	r31, 0xFF	; 255
    32c4:	80 e9       	ldi	r24, 0x90	; 144
    32c6:	91 e0       	ldi	r25, 0x01	; 1
    32c8:	91 83       	std	Z+1, r25	; 0x01
    32ca:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    32cc:	fe 01       	movw	r30, r28
    32ce:	ed 51       	subi	r30, 0x1D	; 29
    32d0:	ff 4f       	sbci	r31, 0xFF	; 255
    32d2:	80 81       	ld	r24, Z
    32d4:	91 81       	ldd	r25, Z+1	; 0x01
    32d6:	01 97       	sbiw	r24, 0x01	; 1
    32d8:	f1 f7       	brne	.-4      	; 0x32d6 <wifi_connect+0x10c>
    32da:	fe 01       	movw	r30, r28
    32dc:	ed 51       	subi	r30, 0x1D	; 29
    32de:	ff 4f       	sbci	r31, 0xFF	; 255
    32e0:	91 83       	std	Z+1, r25	; 0x01
    32e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32e4:	de 01       	movw	r26, r28
    32e6:	ab 51       	subi	r26, 0x1B	; 27
    32e8:	bf 4f       	sbci	r27, 0xFF	; 255
    32ea:	fe 01       	movw	r30, r28
    32ec:	eb 51       	subi	r30, 0x1B	; 27
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	80 81       	ld	r24, Z
    32f2:	91 81       	ldd	r25, Z+1	; 0x01
    32f4:	01 97       	sbiw	r24, 0x01	; 1
    32f6:	11 96       	adiw	r26, 0x01	; 1
    32f8:	9c 93       	st	X, r25
    32fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32fc:	fe 01       	movw	r30, r28
    32fe:	eb 51       	subi	r30, 0x1B	; 27
    3300:	ff 4f       	sbci	r31, 0xFF	; 255
    3302:	80 81       	ld	r24, Z
    3304:	91 81       	ldd	r25, Z+1	; 0x01
    3306:	00 97       	sbiw	r24, 0x00	; 0
    3308:	d1 f6       	brne	.-76     	; 0x32be <wifi_connect+0xf4>
    330a:	27 c0       	rjmp	.+78     	; 0x335a <wifi_connect+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    330c:	8e 01       	movw	r16, r28
    330e:	0b 51       	subi	r16, 0x1B	; 27
    3310:	1f 4f       	sbci	r17, 0xFF	; 255
    3312:	fe 01       	movw	r30, r28
    3314:	e9 51       	subi	r30, 0x19	; 25
    3316:	ff 4f       	sbci	r31, 0xFF	; 255
    3318:	60 81       	ld	r22, Z
    331a:	71 81       	ldd	r23, Z+1	; 0x01
    331c:	82 81       	ldd	r24, Z+2	; 0x02
    331e:	93 81       	ldd	r25, Z+3	; 0x03
    3320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3324:	dc 01       	movw	r26, r24
    3326:	cb 01       	movw	r24, r22
    3328:	f8 01       	movw	r30, r16
    332a:	91 83       	std	Z+1, r25	; 0x01
    332c:	80 83       	st	Z, r24
    332e:	de 01       	movw	r26, r28
    3330:	af 51       	subi	r26, 0x1F	; 31
    3332:	bf 4f       	sbci	r27, 0xFF	; 255
    3334:	fe 01       	movw	r30, r28
    3336:	eb 51       	subi	r30, 0x1B	; 27
    3338:	ff 4f       	sbci	r31, 0xFF	; 255
    333a:	80 81       	ld	r24, Z
    333c:	91 81       	ldd	r25, Z+1	; 0x01
    333e:	8d 93       	st	X+, r24
    3340:	9c 93       	st	X, r25
    3342:	fe 01       	movw	r30, r28
    3344:	ef 51       	subi	r30, 0x1F	; 31
    3346:	ff 4f       	sbci	r31, 0xFF	; 255
    3348:	80 81       	ld	r24, Z
    334a:	91 81       	ldd	r25, Z+1	; 0x01
    334c:	01 97       	sbiw	r24, 0x01	; 1
    334e:	f1 f7       	brne	.-4      	; 0x334c <wifi_connect+0x182>
    3350:	fe 01       	movw	r30, r28
    3352:	ef 51       	subi	r30, 0x1F	; 31
    3354:	ff 4f       	sbci	r31, 0xFF	; 255
    3356:	91 83       	std	Z+1, r25	; 0x01
    3358:	80 83       	st	Z, r24
	_delay_ms(1000);
	Check_Wifi_Respones("OK", "AT_ERROR");
    335a:	87 e6       	ldi	r24, 0x67	; 103
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	2a e6       	ldi	r18, 0x6A	; 106
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	b9 01       	movw	r22, r18
    3364:	0e 94 ff 23 	call	0x47fe	; 0x47fe <Check_Wifi_Respones>
    3368:	fe 01       	movw	r30, r28
    336a:	e3 52       	subi	r30, 0x23	; 35
    336c:	ff 4f       	sbci	r31, 0xFF	; 255
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	aa e7       	ldi	r26, 0x7A	; 122
    3374:	b4 e4       	ldi	r27, 0x44	; 68
    3376:	80 83       	st	Z, r24
    3378:	91 83       	std	Z+1, r25	; 0x01
    337a:	a2 83       	std	Z+2, r26	; 0x02
    337c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    337e:	8e 01       	movw	r16, r28
    3380:	07 52       	subi	r16, 0x27	; 39
    3382:	1f 4f       	sbci	r17, 0xFF	; 255
    3384:	fe 01       	movw	r30, r28
    3386:	e3 52       	subi	r30, 0x23	; 35
    3388:	ff 4f       	sbci	r31, 0xFF	; 255
    338a:	60 81       	ld	r22, Z
    338c:	71 81       	ldd	r23, Z+1	; 0x01
    338e:	82 81       	ldd	r24, Z+2	; 0x02
    3390:	93 81       	ldd	r25, Z+3	; 0x03
    3392:	20 e0       	ldi	r18, 0x00	; 0
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	4a e7       	ldi	r20, 0x7A	; 122
    3398:	55 e4       	ldi	r21, 0x45	; 69
    339a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    339e:	dc 01       	movw	r26, r24
    33a0:	cb 01       	movw	r24, r22
    33a2:	f8 01       	movw	r30, r16
    33a4:	80 83       	st	Z, r24
    33a6:	91 83       	std	Z+1, r25	; 0x01
    33a8:	a2 83       	std	Z+2, r26	; 0x02
    33aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33ac:	fe 01       	movw	r30, r28
    33ae:	e7 52       	subi	r30, 0x27	; 39
    33b0:	ff 4f       	sbci	r31, 0xFF	; 255
    33b2:	60 81       	ld	r22, Z
    33b4:	71 81       	ldd	r23, Z+1	; 0x01
    33b6:	82 81       	ldd	r24, Z+2	; 0x02
    33b8:	93 81       	ldd	r25, Z+3	; 0x03
    33ba:	20 e0       	ldi	r18, 0x00	; 0
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	40 e8       	ldi	r20, 0x80	; 128
    33c0:	5f e3       	ldi	r21, 0x3F	; 63
    33c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33c6:	88 23       	and	r24, r24
    33c8:	44 f4       	brge	.+16     	; 0x33da <wifi_connect+0x210>
		__ticks = 1;
    33ca:	fe 01       	movw	r30, r28
    33cc:	e9 52       	subi	r30, 0x29	; 41
    33ce:	ff 4f       	sbci	r31, 0xFF	; 255
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	91 83       	std	Z+1, r25	; 0x01
    33d6:	80 83       	st	Z, r24
    33d8:	64 c0       	rjmp	.+200    	; 0x34a2 <wifi_connect+0x2d8>
	else if (__tmp > 65535)
    33da:	fe 01       	movw	r30, r28
    33dc:	e7 52       	subi	r30, 0x27	; 39
    33de:	ff 4f       	sbci	r31, 0xFF	; 255
    33e0:	60 81       	ld	r22, Z
    33e2:	71 81       	ldd	r23, Z+1	; 0x01
    33e4:	82 81       	ldd	r24, Z+2	; 0x02
    33e6:	93 81       	ldd	r25, Z+3	; 0x03
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	3f ef       	ldi	r19, 0xFF	; 255
    33ec:	4f e7       	ldi	r20, 0x7F	; 127
    33ee:	57 e4       	ldi	r21, 0x47	; 71
    33f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33f4:	18 16       	cp	r1, r24
    33f6:	0c f0       	brlt	.+2      	; 0x33fa <wifi_connect+0x230>
    33f8:	43 c0       	rjmp	.+134    	; 0x3480 <wifi_connect+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33fa:	fe 01       	movw	r30, r28
    33fc:	e3 52       	subi	r30, 0x23	; 35
    33fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3400:	60 81       	ld	r22, Z
    3402:	71 81       	ldd	r23, Z+1	; 0x01
    3404:	82 81       	ldd	r24, Z+2	; 0x02
    3406:	93 81       	ldd	r25, Z+3	; 0x03
    3408:	20 e0       	ldi	r18, 0x00	; 0
    340a:	30 e0       	ldi	r19, 0x00	; 0
    340c:	40 e2       	ldi	r20, 0x20	; 32
    340e:	51 e4       	ldi	r21, 0x41	; 65
    3410:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3414:	dc 01       	movw	r26, r24
    3416:	cb 01       	movw	r24, r22
    3418:	8e 01       	movw	r16, r28
    341a:	09 52       	subi	r16, 0x29	; 41
    341c:	1f 4f       	sbci	r17, 0xFF	; 255
    341e:	bc 01       	movw	r22, r24
    3420:	cd 01       	movw	r24, r26
    3422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3426:	dc 01       	movw	r26, r24
    3428:	cb 01       	movw	r24, r22
    342a:	f8 01       	movw	r30, r16
    342c:	91 83       	std	Z+1, r25	; 0x01
    342e:	80 83       	st	Z, r24
    3430:	1f c0       	rjmp	.+62     	; 0x3470 <wifi_connect+0x2a6>
    3432:	fe 01       	movw	r30, r28
    3434:	eb 52       	subi	r30, 0x2B	; 43
    3436:	ff 4f       	sbci	r31, 0xFF	; 255
    3438:	80 e9       	ldi	r24, 0x90	; 144
    343a:	91 e0       	ldi	r25, 0x01	; 1
    343c:	91 83       	std	Z+1, r25	; 0x01
    343e:	80 83       	st	Z, r24
    3440:	fe 01       	movw	r30, r28
    3442:	eb 52       	subi	r30, 0x2B	; 43
    3444:	ff 4f       	sbci	r31, 0xFF	; 255
    3446:	80 81       	ld	r24, Z
    3448:	91 81       	ldd	r25, Z+1	; 0x01
    344a:	01 97       	sbiw	r24, 0x01	; 1
    344c:	f1 f7       	brne	.-4      	; 0x344a <wifi_connect+0x280>
    344e:	fe 01       	movw	r30, r28
    3450:	eb 52       	subi	r30, 0x2B	; 43
    3452:	ff 4f       	sbci	r31, 0xFF	; 255
    3454:	91 83       	std	Z+1, r25	; 0x01
    3456:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3458:	de 01       	movw	r26, r28
    345a:	a9 52       	subi	r26, 0x29	; 41
    345c:	bf 4f       	sbci	r27, 0xFF	; 255
    345e:	fe 01       	movw	r30, r28
    3460:	e9 52       	subi	r30, 0x29	; 41
    3462:	ff 4f       	sbci	r31, 0xFF	; 255
    3464:	80 81       	ld	r24, Z
    3466:	91 81       	ldd	r25, Z+1	; 0x01
    3468:	01 97       	sbiw	r24, 0x01	; 1
    346a:	11 96       	adiw	r26, 0x01	; 1
    346c:	9c 93       	st	X, r25
    346e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3470:	fe 01       	movw	r30, r28
    3472:	e9 52       	subi	r30, 0x29	; 41
    3474:	ff 4f       	sbci	r31, 0xFF	; 255
    3476:	80 81       	ld	r24, Z
    3478:	91 81       	ldd	r25, Z+1	; 0x01
    347a:	00 97       	sbiw	r24, 0x00	; 0
    347c:	d1 f6       	brne	.-76     	; 0x3432 <wifi_connect+0x268>
    347e:	27 c0       	rjmp	.+78     	; 0x34ce <wifi_connect+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3480:	8e 01       	movw	r16, r28
    3482:	09 52       	subi	r16, 0x29	; 41
    3484:	1f 4f       	sbci	r17, 0xFF	; 255
    3486:	fe 01       	movw	r30, r28
    3488:	e7 52       	subi	r30, 0x27	; 39
    348a:	ff 4f       	sbci	r31, 0xFF	; 255
    348c:	60 81       	ld	r22, Z
    348e:	71 81       	ldd	r23, Z+1	; 0x01
    3490:	82 81       	ldd	r24, Z+2	; 0x02
    3492:	93 81       	ldd	r25, Z+3	; 0x03
    3494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3498:	dc 01       	movw	r26, r24
    349a:	cb 01       	movw	r24, r22
    349c:	f8 01       	movw	r30, r16
    349e:	91 83       	std	Z+1, r25	; 0x01
    34a0:	80 83       	st	Z, r24
    34a2:	de 01       	movw	r26, r28
    34a4:	ad 52       	subi	r26, 0x2D	; 45
    34a6:	bf 4f       	sbci	r27, 0xFF	; 255
    34a8:	fe 01       	movw	r30, r28
    34aa:	e9 52       	subi	r30, 0x29	; 41
    34ac:	ff 4f       	sbci	r31, 0xFF	; 255
    34ae:	80 81       	ld	r24, Z
    34b0:	91 81       	ldd	r25, Z+1	; 0x01
    34b2:	8d 93       	st	X+, r24
    34b4:	9c 93       	st	X, r25
    34b6:	fe 01       	movw	r30, r28
    34b8:	ed 52       	subi	r30, 0x2D	; 45
    34ba:	ff 4f       	sbci	r31, 0xFF	; 255
    34bc:	80 81       	ld	r24, Z
    34be:	91 81       	ldd	r25, Z+1	; 0x01
    34c0:	01 97       	sbiw	r24, 0x01	; 1
    34c2:	f1 f7       	brne	.-4      	; 0x34c0 <wifi_connect+0x2f6>
    34c4:	fe 01       	movw	r30, r28
    34c6:	ed 52       	subi	r30, 0x2D	; 45
    34c8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ca:	91 83       	std	Z+1, r25	; 0x01
    34cc:	80 83       	st	Z, r24
	_delay_ms(1000);
	H_LCD_void_Clear_Display();
    34ce:	0e 94 be 2b 	call	0x577c	; 0x577c <H_LCD_void_Clear_Display>
    34d2:	fe 01       	movw	r30, r28
    34d4:	e1 53       	subi	r30, 0x31	; 49
    34d6:	ff 4f       	sbci	r31, 0xFF	; 255
    34d8:	80 e0       	ldi	r24, 0x00	; 0
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	a8 e4       	ldi	r26, 0x48	; 72
    34de:	b3 e4       	ldi	r27, 0x43	; 67
    34e0:	80 83       	st	Z, r24
    34e2:	91 83       	std	Z+1, r25	; 0x01
    34e4:	a2 83       	std	Z+2, r26	; 0x02
    34e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34e8:	8e 01       	movw	r16, r28
    34ea:	05 53       	subi	r16, 0x35	; 53
    34ec:	1f 4f       	sbci	r17, 0xFF	; 255
    34ee:	fe 01       	movw	r30, r28
    34f0:	e1 53       	subi	r30, 0x31	; 49
    34f2:	ff 4f       	sbci	r31, 0xFF	; 255
    34f4:	60 81       	ld	r22, Z
    34f6:	71 81       	ldd	r23, Z+1	; 0x01
    34f8:	82 81       	ldd	r24, Z+2	; 0x02
    34fa:	93 81       	ldd	r25, Z+3	; 0x03
    34fc:	20 e0       	ldi	r18, 0x00	; 0
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	4a e7       	ldi	r20, 0x7A	; 122
    3502:	55 e4       	ldi	r21, 0x45	; 69
    3504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3508:	dc 01       	movw	r26, r24
    350a:	cb 01       	movw	r24, r22
    350c:	f8 01       	movw	r30, r16
    350e:	80 83       	st	Z, r24
    3510:	91 83       	std	Z+1, r25	; 0x01
    3512:	a2 83       	std	Z+2, r26	; 0x02
    3514:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3516:	fe 01       	movw	r30, r28
    3518:	e5 53       	subi	r30, 0x35	; 53
    351a:	ff 4f       	sbci	r31, 0xFF	; 255
    351c:	60 81       	ld	r22, Z
    351e:	71 81       	ldd	r23, Z+1	; 0x01
    3520:	82 81       	ldd	r24, Z+2	; 0x02
    3522:	93 81       	ldd	r25, Z+3	; 0x03
    3524:	20 e0       	ldi	r18, 0x00	; 0
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	40 e8       	ldi	r20, 0x80	; 128
    352a:	5f e3       	ldi	r21, 0x3F	; 63
    352c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3530:	88 23       	and	r24, r24
    3532:	44 f4       	brge	.+16     	; 0x3544 <wifi_connect+0x37a>
		__ticks = 1;
    3534:	fe 01       	movw	r30, r28
    3536:	e7 53       	subi	r30, 0x37	; 55
    3538:	ff 4f       	sbci	r31, 0xFF	; 255
    353a:	81 e0       	ldi	r24, 0x01	; 1
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	91 83       	std	Z+1, r25	; 0x01
    3540:	80 83       	st	Z, r24
    3542:	64 c0       	rjmp	.+200    	; 0x360c <wifi_connect+0x442>
	else if (__tmp > 65535)
    3544:	fe 01       	movw	r30, r28
    3546:	e5 53       	subi	r30, 0x35	; 53
    3548:	ff 4f       	sbci	r31, 0xFF	; 255
    354a:	60 81       	ld	r22, Z
    354c:	71 81       	ldd	r23, Z+1	; 0x01
    354e:	82 81       	ldd	r24, Z+2	; 0x02
    3550:	93 81       	ldd	r25, Z+3	; 0x03
    3552:	20 e0       	ldi	r18, 0x00	; 0
    3554:	3f ef       	ldi	r19, 0xFF	; 255
    3556:	4f e7       	ldi	r20, 0x7F	; 127
    3558:	57 e4       	ldi	r21, 0x47	; 71
    355a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    355e:	18 16       	cp	r1, r24
    3560:	0c f0       	brlt	.+2      	; 0x3564 <wifi_connect+0x39a>
    3562:	43 c0       	rjmp	.+134    	; 0x35ea <wifi_connect+0x420>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3564:	fe 01       	movw	r30, r28
    3566:	e1 53       	subi	r30, 0x31	; 49
    3568:	ff 4f       	sbci	r31, 0xFF	; 255
    356a:	60 81       	ld	r22, Z
    356c:	71 81       	ldd	r23, Z+1	; 0x01
    356e:	82 81       	ldd	r24, Z+2	; 0x02
    3570:	93 81       	ldd	r25, Z+3	; 0x03
    3572:	20 e0       	ldi	r18, 0x00	; 0
    3574:	30 e0       	ldi	r19, 0x00	; 0
    3576:	40 e2       	ldi	r20, 0x20	; 32
    3578:	51 e4       	ldi	r21, 0x41	; 65
    357a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    357e:	dc 01       	movw	r26, r24
    3580:	cb 01       	movw	r24, r22
    3582:	8e 01       	movw	r16, r28
    3584:	07 53       	subi	r16, 0x37	; 55
    3586:	1f 4f       	sbci	r17, 0xFF	; 255
    3588:	bc 01       	movw	r22, r24
    358a:	cd 01       	movw	r24, r26
    358c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3590:	dc 01       	movw	r26, r24
    3592:	cb 01       	movw	r24, r22
    3594:	f8 01       	movw	r30, r16
    3596:	91 83       	std	Z+1, r25	; 0x01
    3598:	80 83       	st	Z, r24
    359a:	1f c0       	rjmp	.+62     	; 0x35da <wifi_connect+0x410>
    359c:	fe 01       	movw	r30, r28
    359e:	e9 53       	subi	r30, 0x39	; 57
    35a0:	ff 4f       	sbci	r31, 0xFF	; 255
    35a2:	80 e9       	ldi	r24, 0x90	; 144
    35a4:	91 e0       	ldi	r25, 0x01	; 1
    35a6:	91 83       	std	Z+1, r25	; 0x01
    35a8:	80 83       	st	Z, r24
    35aa:	fe 01       	movw	r30, r28
    35ac:	e9 53       	subi	r30, 0x39	; 57
    35ae:	ff 4f       	sbci	r31, 0xFF	; 255
    35b0:	80 81       	ld	r24, Z
    35b2:	91 81       	ldd	r25, Z+1	; 0x01
    35b4:	01 97       	sbiw	r24, 0x01	; 1
    35b6:	f1 f7       	brne	.-4      	; 0x35b4 <wifi_connect+0x3ea>
    35b8:	fe 01       	movw	r30, r28
    35ba:	e9 53       	subi	r30, 0x39	; 57
    35bc:	ff 4f       	sbci	r31, 0xFF	; 255
    35be:	91 83       	std	Z+1, r25	; 0x01
    35c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35c2:	de 01       	movw	r26, r28
    35c4:	a7 53       	subi	r26, 0x37	; 55
    35c6:	bf 4f       	sbci	r27, 0xFF	; 255
    35c8:	fe 01       	movw	r30, r28
    35ca:	e7 53       	subi	r30, 0x37	; 55
    35cc:	ff 4f       	sbci	r31, 0xFF	; 255
    35ce:	80 81       	ld	r24, Z
    35d0:	91 81       	ldd	r25, Z+1	; 0x01
    35d2:	01 97       	sbiw	r24, 0x01	; 1
    35d4:	11 96       	adiw	r26, 0x01	; 1
    35d6:	9c 93       	st	X, r25
    35d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35da:	fe 01       	movw	r30, r28
    35dc:	e7 53       	subi	r30, 0x37	; 55
    35de:	ff 4f       	sbci	r31, 0xFF	; 255
    35e0:	80 81       	ld	r24, Z
    35e2:	91 81       	ldd	r25, Z+1	; 0x01
    35e4:	00 97       	sbiw	r24, 0x00	; 0
    35e6:	d1 f6       	brne	.-76     	; 0x359c <wifi_connect+0x3d2>
    35e8:	27 c0       	rjmp	.+78     	; 0x3638 <wifi_connect+0x46e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ea:	8e 01       	movw	r16, r28
    35ec:	07 53       	subi	r16, 0x37	; 55
    35ee:	1f 4f       	sbci	r17, 0xFF	; 255
    35f0:	fe 01       	movw	r30, r28
    35f2:	e5 53       	subi	r30, 0x35	; 53
    35f4:	ff 4f       	sbci	r31, 0xFF	; 255
    35f6:	60 81       	ld	r22, Z
    35f8:	71 81       	ldd	r23, Z+1	; 0x01
    35fa:	82 81       	ldd	r24, Z+2	; 0x02
    35fc:	93 81       	ldd	r25, Z+3	; 0x03
    35fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3602:	dc 01       	movw	r26, r24
    3604:	cb 01       	movw	r24, r22
    3606:	f8 01       	movw	r30, r16
    3608:	91 83       	std	Z+1, r25	; 0x01
    360a:	80 83       	st	Z, r24
    360c:	de 01       	movw	r26, r28
    360e:	ab 53       	subi	r26, 0x3B	; 59
    3610:	bf 4f       	sbci	r27, 0xFF	; 255
    3612:	fe 01       	movw	r30, r28
    3614:	e7 53       	subi	r30, 0x37	; 55
    3616:	ff 4f       	sbci	r31, 0xFF	; 255
    3618:	80 81       	ld	r24, Z
    361a:	91 81       	ldd	r25, Z+1	; 0x01
    361c:	8d 93       	st	X+, r24
    361e:	9c 93       	st	X, r25
    3620:	fe 01       	movw	r30, r28
    3622:	eb 53       	subi	r30, 0x3B	; 59
    3624:	ff 4f       	sbci	r31, 0xFF	; 255
    3626:	80 81       	ld	r24, Z
    3628:	91 81       	ldd	r25, Z+1	; 0x01
    362a:	01 97       	sbiw	r24, 0x01	; 1
    362c:	f1 f7       	brne	.-4      	; 0x362a <wifi_connect+0x460>
    362e:	fe 01       	movw	r30, r28
    3630:	eb 53       	subi	r30, 0x3B	; 59
    3632:	ff 4f       	sbci	r31, 0xFF	; 255
    3634:	91 83       	std	Z+1, r25	; 0x01
    3636:	80 83       	st	Z, r24
	_delay_ms(200);
	Wifi_Buffer_Reset();
    3638:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <Wifi_Buffer_Reset>
	H_LCD_void_sendData('2');
    363c:	82 e3       	ldi	r24, 0x32	; 50
    363e:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <H_LCD_void_sendData>
    3642:	fe 01       	movw	r30, r28
    3644:	ef 53       	subi	r30, 0x3F	; 63
    3646:	ff 4f       	sbci	r31, 0xFF	; 255
    3648:	80 e0       	ldi	r24, 0x00	; 0
    364a:	90 e0       	ldi	r25, 0x00	; 0
    364c:	aa e7       	ldi	r26, 0x7A	; 122
    364e:	b4 e4       	ldi	r27, 0x44	; 68
    3650:	80 83       	st	Z, r24
    3652:	91 83       	std	Z+1, r25	; 0x01
    3654:	a2 83       	std	Z+2, r26	; 0x02
    3656:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3658:	8e 01       	movw	r16, r28
    365a:	03 54       	subi	r16, 0x43	; 67
    365c:	1f 4f       	sbci	r17, 0xFF	; 255
    365e:	fe 01       	movw	r30, r28
    3660:	ef 53       	subi	r30, 0x3F	; 63
    3662:	ff 4f       	sbci	r31, 0xFF	; 255
    3664:	60 81       	ld	r22, Z
    3666:	71 81       	ldd	r23, Z+1	; 0x01
    3668:	82 81       	ldd	r24, Z+2	; 0x02
    366a:	93 81       	ldd	r25, Z+3	; 0x03
    366c:	20 e0       	ldi	r18, 0x00	; 0
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	4a e7       	ldi	r20, 0x7A	; 122
    3672:	55 e4       	ldi	r21, 0x45	; 69
    3674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3678:	dc 01       	movw	r26, r24
    367a:	cb 01       	movw	r24, r22
    367c:	f8 01       	movw	r30, r16
    367e:	80 83       	st	Z, r24
    3680:	91 83       	std	Z+1, r25	; 0x01
    3682:	a2 83       	std	Z+2, r26	; 0x02
    3684:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3686:	fe 01       	movw	r30, r28
    3688:	e3 54       	subi	r30, 0x43	; 67
    368a:	ff 4f       	sbci	r31, 0xFF	; 255
    368c:	60 81       	ld	r22, Z
    368e:	71 81       	ldd	r23, Z+1	; 0x01
    3690:	82 81       	ldd	r24, Z+2	; 0x02
    3692:	93 81       	ldd	r25, Z+3	; 0x03
    3694:	20 e0       	ldi	r18, 0x00	; 0
    3696:	30 e0       	ldi	r19, 0x00	; 0
    3698:	40 e8       	ldi	r20, 0x80	; 128
    369a:	5f e3       	ldi	r21, 0x3F	; 63
    369c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36a0:	88 23       	and	r24, r24
    36a2:	44 f4       	brge	.+16     	; 0x36b4 <wifi_connect+0x4ea>
		__ticks = 1;
    36a4:	fe 01       	movw	r30, r28
    36a6:	e5 54       	subi	r30, 0x45	; 69
    36a8:	ff 4f       	sbci	r31, 0xFF	; 255
    36aa:	81 e0       	ldi	r24, 0x01	; 1
    36ac:	90 e0       	ldi	r25, 0x00	; 0
    36ae:	91 83       	std	Z+1, r25	; 0x01
    36b0:	80 83       	st	Z, r24
    36b2:	64 c0       	rjmp	.+200    	; 0x377c <wifi_connect+0x5b2>
	else if (__tmp > 65535)
    36b4:	fe 01       	movw	r30, r28
    36b6:	e3 54       	subi	r30, 0x43	; 67
    36b8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ba:	60 81       	ld	r22, Z
    36bc:	71 81       	ldd	r23, Z+1	; 0x01
    36be:	82 81       	ldd	r24, Z+2	; 0x02
    36c0:	93 81       	ldd	r25, Z+3	; 0x03
    36c2:	20 e0       	ldi	r18, 0x00	; 0
    36c4:	3f ef       	ldi	r19, 0xFF	; 255
    36c6:	4f e7       	ldi	r20, 0x7F	; 127
    36c8:	57 e4       	ldi	r21, 0x47	; 71
    36ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36ce:	18 16       	cp	r1, r24
    36d0:	0c f0       	brlt	.+2      	; 0x36d4 <wifi_connect+0x50a>
    36d2:	43 c0       	rjmp	.+134    	; 0x375a <wifi_connect+0x590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36d4:	fe 01       	movw	r30, r28
    36d6:	ef 53       	subi	r30, 0x3F	; 63
    36d8:	ff 4f       	sbci	r31, 0xFF	; 255
    36da:	60 81       	ld	r22, Z
    36dc:	71 81       	ldd	r23, Z+1	; 0x01
    36de:	82 81       	ldd	r24, Z+2	; 0x02
    36e0:	93 81       	ldd	r25, Z+3	; 0x03
    36e2:	20 e0       	ldi	r18, 0x00	; 0
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	40 e2       	ldi	r20, 0x20	; 32
    36e8:	51 e4       	ldi	r21, 0x41	; 65
    36ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ee:	dc 01       	movw	r26, r24
    36f0:	cb 01       	movw	r24, r22
    36f2:	8e 01       	movw	r16, r28
    36f4:	05 54       	subi	r16, 0x45	; 69
    36f6:	1f 4f       	sbci	r17, 0xFF	; 255
    36f8:	bc 01       	movw	r22, r24
    36fa:	cd 01       	movw	r24, r26
    36fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3700:	dc 01       	movw	r26, r24
    3702:	cb 01       	movw	r24, r22
    3704:	f8 01       	movw	r30, r16
    3706:	91 83       	std	Z+1, r25	; 0x01
    3708:	80 83       	st	Z, r24
    370a:	1f c0       	rjmp	.+62     	; 0x374a <wifi_connect+0x580>
    370c:	fe 01       	movw	r30, r28
    370e:	e7 54       	subi	r30, 0x47	; 71
    3710:	ff 4f       	sbci	r31, 0xFF	; 255
    3712:	80 e9       	ldi	r24, 0x90	; 144
    3714:	91 e0       	ldi	r25, 0x01	; 1
    3716:	91 83       	std	Z+1, r25	; 0x01
    3718:	80 83       	st	Z, r24
    371a:	fe 01       	movw	r30, r28
    371c:	e7 54       	subi	r30, 0x47	; 71
    371e:	ff 4f       	sbci	r31, 0xFF	; 255
    3720:	80 81       	ld	r24, Z
    3722:	91 81       	ldd	r25, Z+1	; 0x01
    3724:	01 97       	sbiw	r24, 0x01	; 1
    3726:	f1 f7       	brne	.-4      	; 0x3724 <wifi_connect+0x55a>
    3728:	fe 01       	movw	r30, r28
    372a:	e7 54       	subi	r30, 0x47	; 71
    372c:	ff 4f       	sbci	r31, 0xFF	; 255
    372e:	91 83       	std	Z+1, r25	; 0x01
    3730:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3732:	de 01       	movw	r26, r28
    3734:	a5 54       	subi	r26, 0x45	; 69
    3736:	bf 4f       	sbci	r27, 0xFF	; 255
    3738:	fe 01       	movw	r30, r28
    373a:	e5 54       	subi	r30, 0x45	; 69
    373c:	ff 4f       	sbci	r31, 0xFF	; 255
    373e:	80 81       	ld	r24, Z
    3740:	91 81       	ldd	r25, Z+1	; 0x01
    3742:	01 97       	sbiw	r24, 0x01	; 1
    3744:	11 96       	adiw	r26, 0x01	; 1
    3746:	9c 93       	st	X, r25
    3748:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    374a:	fe 01       	movw	r30, r28
    374c:	e5 54       	subi	r30, 0x45	; 69
    374e:	ff 4f       	sbci	r31, 0xFF	; 255
    3750:	80 81       	ld	r24, Z
    3752:	91 81       	ldd	r25, Z+1	; 0x01
    3754:	00 97       	sbiw	r24, 0x00	; 0
    3756:	d1 f6       	brne	.-76     	; 0x370c <wifi_connect+0x542>
    3758:	27 c0       	rjmp	.+78     	; 0x37a8 <wifi_connect+0x5de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    375a:	8e 01       	movw	r16, r28
    375c:	05 54       	subi	r16, 0x45	; 69
    375e:	1f 4f       	sbci	r17, 0xFF	; 255
    3760:	fe 01       	movw	r30, r28
    3762:	e3 54       	subi	r30, 0x43	; 67
    3764:	ff 4f       	sbci	r31, 0xFF	; 255
    3766:	60 81       	ld	r22, Z
    3768:	71 81       	ldd	r23, Z+1	; 0x01
    376a:	82 81       	ldd	r24, Z+2	; 0x02
    376c:	93 81       	ldd	r25, Z+3	; 0x03
    376e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3772:	dc 01       	movw	r26, r24
    3774:	cb 01       	movw	r24, r22
    3776:	f8 01       	movw	r30, r16
    3778:	91 83       	std	Z+1, r25	; 0x01
    377a:	80 83       	st	Z, r24
    377c:	de 01       	movw	r26, r28
    377e:	a9 54       	subi	r26, 0x49	; 73
    3780:	bf 4f       	sbci	r27, 0xFF	; 255
    3782:	fe 01       	movw	r30, r28
    3784:	e5 54       	subi	r30, 0x45	; 69
    3786:	ff 4f       	sbci	r31, 0xFF	; 255
    3788:	80 81       	ld	r24, Z
    378a:	91 81       	ldd	r25, Z+1	; 0x01
    378c:	8d 93       	st	X+, r24
    378e:	9c 93       	st	X, r25
    3790:	fe 01       	movw	r30, r28
    3792:	e9 54       	subi	r30, 0x49	; 73
    3794:	ff 4f       	sbci	r31, 0xFF	; 255
    3796:	80 81       	ld	r24, Z
    3798:	91 81       	ldd	r25, Z+1	; 0x01
    379a:	01 97       	sbiw	r24, 0x01	; 1
    379c:	f1 f7       	brne	.-4      	; 0x379a <wifi_connect+0x5d0>
    379e:	fe 01       	movw	r30, r28
    37a0:	e9 54       	subi	r30, 0x49	; 73
    37a2:	ff 4f       	sbci	r31, 0xFF	; 255
    37a4:	91 83       	std	Z+1, r25	; 0x01
    37a6:	80 83       	st	Z, r24
	_delay_ms(1000);
	
	/* Set wifi mode to station and server */
	UART_sendString("AT+CWMODE=3\r\n");
    37a8:	83 e7       	ldi	r24, 0x73	; 115
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	0e 94 c4 07 	call	0xf88	; 0xf88 <UART_sendString>
    37b0:	fe 01       	movw	r30, r28
    37b2:	ed 54       	subi	r30, 0x4D	; 77
    37b4:	ff 4f       	sbci	r31, 0xFF	; 255
    37b6:	80 e0       	ldi	r24, 0x00	; 0
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	aa e7       	ldi	r26, 0x7A	; 122
    37bc:	b4 e4       	ldi	r27, 0x44	; 68
    37be:	80 83       	st	Z, r24
    37c0:	91 83       	std	Z+1, r25	; 0x01
    37c2:	a2 83       	std	Z+2, r26	; 0x02
    37c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37c6:	8e 01       	movw	r16, r28
    37c8:	01 55       	subi	r16, 0x51	; 81
    37ca:	1f 4f       	sbci	r17, 0xFF	; 255
    37cc:	fe 01       	movw	r30, r28
    37ce:	ed 54       	subi	r30, 0x4D	; 77
    37d0:	ff 4f       	sbci	r31, 0xFF	; 255
    37d2:	60 81       	ld	r22, Z
    37d4:	71 81       	ldd	r23, Z+1	; 0x01
    37d6:	82 81       	ldd	r24, Z+2	; 0x02
    37d8:	93 81       	ldd	r25, Z+3	; 0x03
    37da:	20 e0       	ldi	r18, 0x00	; 0
    37dc:	30 e0       	ldi	r19, 0x00	; 0
    37de:	4a e7       	ldi	r20, 0x7A	; 122
    37e0:	55 e4       	ldi	r21, 0x45	; 69
    37e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37e6:	dc 01       	movw	r26, r24
    37e8:	cb 01       	movw	r24, r22
    37ea:	f8 01       	movw	r30, r16
    37ec:	80 83       	st	Z, r24
    37ee:	91 83       	std	Z+1, r25	; 0x01
    37f0:	a2 83       	std	Z+2, r26	; 0x02
    37f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37f4:	fe 01       	movw	r30, r28
    37f6:	e1 55       	subi	r30, 0x51	; 81
    37f8:	ff 4f       	sbci	r31, 0xFF	; 255
    37fa:	60 81       	ld	r22, Z
    37fc:	71 81       	ldd	r23, Z+1	; 0x01
    37fe:	82 81       	ldd	r24, Z+2	; 0x02
    3800:	93 81       	ldd	r25, Z+3	; 0x03
    3802:	20 e0       	ldi	r18, 0x00	; 0
    3804:	30 e0       	ldi	r19, 0x00	; 0
    3806:	40 e8       	ldi	r20, 0x80	; 128
    3808:	5f e3       	ldi	r21, 0x3F	; 63
    380a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    380e:	88 23       	and	r24, r24
    3810:	44 f4       	brge	.+16     	; 0x3822 <wifi_connect+0x658>
		__ticks = 1;
    3812:	fe 01       	movw	r30, r28
    3814:	e3 55       	subi	r30, 0x53	; 83
    3816:	ff 4f       	sbci	r31, 0xFF	; 255
    3818:	81 e0       	ldi	r24, 0x01	; 1
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	91 83       	std	Z+1, r25	; 0x01
    381e:	80 83       	st	Z, r24
    3820:	64 c0       	rjmp	.+200    	; 0x38ea <wifi_connect+0x720>
	else if (__tmp > 65535)
    3822:	fe 01       	movw	r30, r28
    3824:	e1 55       	subi	r30, 0x51	; 81
    3826:	ff 4f       	sbci	r31, 0xFF	; 255
    3828:	60 81       	ld	r22, Z
    382a:	71 81       	ldd	r23, Z+1	; 0x01
    382c:	82 81       	ldd	r24, Z+2	; 0x02
    382e:	93 81       	ldd	r25, Z+3	; 0x03
    3830:	20 e0       	ldi	r18, 0x00	; 0
    3832:	3f ef       	ldi	r19, 0xFF	; 255
    3834:	4f e7       	ldi	r20, 0x7F	; 127
    3836:	57 e4       	ldi	r21, 0x47	; 71
    3838:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    383c:	18 16       	cp	r1, r24
    383e:	0c f0       	brlt	.+2      	; 0x3842 <wifi_connect+0x678>
    3840:	43 c0       	rjmp	.+134    	; 0x38c8 <wifi_connect+0x6fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3842:	fe 01       	movw	r30, r28
    3844:	ed 54       	subi	r30, 0x4D	; 77
    3846:	ff 4f       	sbci	r31, 0xFF	; 255
    3848:	60 81       	ld	r22, Z
    384a:	71 81       	ldd	r23, Z+1	; 0x01
    384c:	82 81       	ldd	r24, Z+2	; 0x02
    384e:	93 81       	ldd	r25, Z+3	; 0x03
    3850:	20 e0       	ldi	r18, 0x00	; 0
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	40 e2       	ldi	r20, 0x20	; 32
    3856:	51 e4       	ldi	r21, 0x41	; 65
    3858:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    385c:	dc 01       	movw	r26, r24
    385e:	cb 01       	movw	r24, r22
    3860:	8e 01       	movw	r16, r28
    3862:	03 55       	subi	r16, 0x53	; 83
    3864:	1f 4f       	sbci	r17, 0xFF	; 255
    3866:	bc 01       	movw	r22, r24
    3868:	cd 01       	movw	r24, r26
    386a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    386e:	dc 01       	movw	r26, r24
    3870:	cb 01       	movw	r24, r22
    3872:	f8 01       	movw	r30, r16
    3874:	91 83       	std	Z+1, r25	; 0x01
    3876:	80 83       	st	Z, r24
    3878:	1f c0       	rjmp	.+62     	; 0x38b8 <wifi_connect+0x6ee>
    387a:	fe 01       	movw	r30, r28
    387c:	e5 55       	subi	r30, 0x55	; 85
    387e:	ff 4f       	sbci	r31, 0xFF	; 255
    3880:	80 e9       	ldi	r24, 0x90	; 144
    3882:	91 e0       	ldi	r25, 0x01	; 1
    3884:	91 83       	std	Z+1, r25	; 0x01
    3886:	80 83       	st	Z, r24
    3888:	fe 01       	movw	r30, r28
    388a:	e5 55       	subi	r30, 0x55	; 85
    388c:	ff 4f       	sbci	r31, 0xFF	; 255
    388e:	80 81       	ld	r24, Z
    3890:	91 81       	ldd	r25, Z+1	; 0x01
    3892:	01 97       	sbiw	r24, 0x01	; 1
    3894:	f1 f7       	brne	.-4      	; 0x3892 <wifi_connect+0x6c8>
    3896:	fe 01       	movw	r30, r28
    3898:	e5 55       	subi	r30, 0x55	; 85
    389a:	ff 4f       	sbci	r31, 0xFF	; 255
    389c:	91 83       	std	Z+1, r25	; 0x01
    389e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38a0:	de 01       	movw	r26, r28
    38a2:	a3 55       	subi	r26, 0x53	; 83
    38a4:	bf 4f       	sbci	r27, 0xFF	; 255
    38a6:	fe 01       	movw	r30, r28
    38a8:	e3 55       	subi	r30, 0x53	; 83
    38aa:	ff 4f       	sbci	r31, 0xFF	; 255
    38ac:	80 81       	ld	r24, Z
    38ae:	91 81       	ldd	r25, Z+1	; 0x01
    38b0:	01 97       	sbiw	r24, 0x01	; 1
    38b2:	11 96       	adiw	r26, 0x01	; 1
    38b4:	9c 93       	st	X, r25
    38b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38b8:	fe 01       	movw	r30, r28
    38ba:	e3 55       	subi	r30, 0x53	; 83
    38bc:	ff 4f       	sbci	r31, 0xFF	; 255
    38be:	80 81       	ld	r24, Z
    38c0:	91 81       	ldd	r25, Z+1	; 0x01
    38c2:	00 97       	sbiw	r24, 0x00	; 0
    38c4:	d1 f6       	brne	.-76     	; 0x387a <wifi_connect+0x6b0>
    38c6:	27 c0       	rjmp	.+78     	; 0x3916 <wifi_connect+0x74c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38c8:	8e 01       	movw	r16, r28
    38ca:	03 55       	subi	r16, 0x53	; 83
    38cc:	1f 4f       	sbci	r17, 0xFF	; 255
    38ce:	fe 01       	movw	r30, r28
    38d0:	e1 55       	subi	r30, 0x51	; 81
    38d2:	ff 4f       	sbci	r31, 0xFF	; 255
    38d4:	60 81       	ld	r22, Z
    38d6:	71 81       	ldd	r23, Z+1	; 0x01
    38d8:	82 81       	ldd	r24, Z+2	; 0x02
    38da:	93 81       	ldd	r25, Z+3	; 0x03
    38dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e0:	dc 01       	movw	r26, r24
    38e2:	cb 01       	movw	r24, r22
    38e4:	f8 01       	movw	r30, r16
    38e6:	91 83       	std	Z+1, r25	; 0x01
    38e8:	80 83       	st	Z, r24
    38ea:	de 01       	movw	r26, r28
    38ec:	a7 55       	subi	r26, 0x57	; 87
    38ee:	bf 4f       	sbci	r27, 0xFF	; 255
    38f0:	fe 01       	movw	r30, r28
    38f2:	e3 55       	subi	r30, 0x53	; 83
    38f4:	ff 4f       	sbci	r31, 0xFF	; 255
    38f6:	80 81       	ld	r24, Z
    38f8:	91 81       	ldd	r25, Z+1	; 0x01
    38fa:	8d 93       	st	X+, r24
    38fc:	9c 93       	st	X, r25
    38fe:	fe 01       	movw	r30, r28
    3900:	e7 55       	subi	r30, 0x57	; 87
    3902:	ff 4f       	sbci	r31, 0xFF	; 255
    3904:	80 81       	ld	r24, Z
    3906:	91 81       	ldd	r25, Z+1	; 0x01
    3908:	01 97       	sbiw	r24, 0x01	; 1
    390a:	f1 f7       	brne	.-4      	; 0x3908 <wifi_connect+0x73e>
    390c:	fe 01       	movw	r30, r28
    390e:	e7 55       	subi	r30, 0x57	; 87
    3910:	ff 4f       	sbci	r31, 0xFF	; 255
    3912:	91 83       	std	Z+1, r25	; 0x01
    3914:	80 83       	st	Z, r24
	_delay_ms(1000);
	Check_Wifi_Respones("OK", "AT+CWMODE_ERROR");
    3916:	87 e6       	ldi	r24, 0x67	; 103
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	21 e8       	ldi	r18, 0x81	; 129
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	b9 01       	movw	r22, r18
    3920:	0e 94 ff 23 	call	0x47fe	; 0x47fe <Check_Wifi_Respones>
    3924:	fe 01       	movw	r30, r28
    3926:	eb 55       	subi	r30, 0x5B	; 91
    3928:	ff 4f       	sbci	r31, 0xFF	; 255
    392a:	80 e0       	ldi	r24, 0x00	; 0
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	aa e7       	ldi	r26, 0x7A	; 122
    3930:	b4 e4       	ldi	r27, 0x44	; 68
    3932:	80 83       	st	Z, r24
    3934:	91 83       	std	Z+1, r25	; 0x01
    3936:	a2 83       	std	Z+2, r26	; 0x02
    3938:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    393a:	8e 01       	movw	r16, r28
    393c:	0f 55       	subi	r16, 0x5F	; 95
    393e:	1f 4f       	sbci	r17, 0xFF	; 255
    3940:	fe 01       	movw	r30, r28
    3942:	eb 55       	subi	r30, 0x5B	; 91
    3944:	ff 4f       	sbci	r31, 0xFF	; 255
    3946:	60 81       	ld	r22, Z
    3948:	71 81       	ldd	r23, Z+1	; 0x01
    394a:	82 81       	ldd	r24, Z+2	; 0x02
    394c:	93 81       	ldd	r25, Z+3	; 0x03
    394e:	20 e0       	ldi	r18, 0x00	; 0
    3950:	30 e0       	ldi	r19, 0x00	; 0
    3952:	4a e7       	ldi	r20, 0x7A	; 122
    3954:	55 e4       	ldi	r21, 0x45	; 69
    3956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    395a:	dc 01       	movw	r26, r24
    395c:	cb 01       	movw	r24, r22
    395e:	f8 01       	movw	r30, r16
    3960:	80 83       	st	Z, r24
    3962:	91 83       	std	Z+1, r25	; 0x01
    3964:	a2 83       	std	Z+2, r26	; 0x02
    3966:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3968:	fe 01       	movw	r30, r28
    396a:	ef 55       	subi	r30, 0x5F	; 95
    396c:	ff 4f       	sbci	r31, 0xFF	; 255
    396e:	60 81       	ld	r22, Z
    3970:	71 81       	ldd	r23, Z+1	; 0x01
    3972:	82 81       	ldd	r24, Z+2	; 0x02
    3974:	93 81       	ldd	r25, Z+3	; 0x03
    3976:	20 e0       	ldi	r18, 0x00	; 0
    3978:	30 e0       	ldi	r19, 0x00	; 0
    397a:	40 e8       	ldi	r20, 0x80	; 128
    397c:	5f e3       	ldi	r21, 0x3F	; 63
    397e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3982:	88 23       	and	r24, r24
    3984:	44 f4       	brge	.+16     	; 0x3996 <wifi_connect+0x7cc>
		__ticks = 1;
    3986:	fe 01       	movw	r30, r28
    3988:	e1 56       	subi	r30, 0x61	; 97
    398a:	ff 4f       	sbci	r31, 0xFF	; 255
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	91 83       	std	Z+1, r25	; 0x01
    3992:	80 83       	st	Z, r24
    3994:	64 c0       	rjmp	.+200    	; 0x3a5e <wifi_connect+0x894>
	else if (__tmp > 65535)
    3996:	fe 01       	movw	r30, r28
    3998:	ef 55       	subi	r30, 0x5F	; 95
    399a:	ff 4f       	sbci	r31, 0xFF	; 255
    399c:	60 81       	ld	r22, Z
    399e:	71 81       	ldd	r23, Z+1	; 0x01
    39a0:	82 81       	ldd	r24, Z+2	; 0x02
    39a2:	93 81       	ldd	r25, Z+3	; 0x03
    39a4:	20 e0       	ldi	r18, 0x00	; 0
    39a6:	3f ef       	ldi	r19, 0xFF	; 255
    39a8:	4f e7       	ldi	r20, 0x7F	; 127
    39aa:	57 e4       	ldi	r21, 0x47	; 71
    39ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39b0:	18 16       	cp	r1, r24
    39b2:	0c f0       	brlt	.+2      	; 0x39b6 <wifi_connect+0x7ec>
    39b4:	43 c0       	rjmp	.+134    	; 0x3a3c <wifi_connect+0x872>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39b6:	fe 01       	movw	r30, r28
    39b8:	eb 55       	subi	r30, 0x5B	; 91
    39ba:	ff 4f       	sbci	r31, 0xFF	; 255
    39bc:	60 81       	ld	r22, Z
    39be:	71 81       	ldd	r23, Z+1	; 0x01
    39c0:	82 81       	ldd	r24, Z+2	; 0x02
    39c2:	93 81       	ldd	r25, Z+3	; 0x03
    39c4:	20 e0       	ldi	r18, 0x00	; 0
    39c6:	30 e0       	ldi	r19, 0x00	; 0
    39c8:	40 e2       	ldi	r20, 0x20	; 32
    39ca:	51 e4       	ldi	r21, 0x41	; 65
    39cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39d0:	dc 01       	movw	r26, r24
    39d2:	cb 01       	movw	r24, r22
    39d4:	8e 01       	movw	r16, r28
    39d6:	01 56       	subi	r16, 0x61	; 97
    39d8:	1f 4f       	sbci	r17, 0xFF	; 255
    39da:	bc 01       	movw	r22, r24
    39dc:	cd 01       	movw	r24, r26
    39de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39e2:	dc 01       	movw	r26, r24
    39e4:	cb 01       	movw	r24, r22
    39e6:	f8 01       	movw	r30, r16
    39e8:	91 83       	std	Z+1, r25	; 0x01
    39ea:	80 83       	st	Z, r24
    39ec:	1f c0       	rjmp	.+62     	; 0x3a2c <wifi_connect+0x862>
    39ee:	fe 01       	movw	r30, r28
    39f0:	e3 56       	subi	r30, 0x63	; 99
    39f2:	ff 4f       	sbci	r31, 0xFF	; 255
    39f4:	80 e9       	ldi	r24, 0x90	; 144
    39f6:	91 e0       	ldi	r25, 0x01	; 1
    39f8:	91 83       	std	Z+1, r25	; 0x01
    39fa:	80 83       	st	Z, r24
    39fc:	fe 01       	movw	r30, r28
    39fe:	e3 56       	subi	r30, 0x63	; 99
    3a00:	ff 4f       	sbci	r31, 0xFF	; 255
    3a02:	80 81       	ld	r24, Z
    3a04:	91 81       	ldd	r25, Z+1	; 0x01
    3a06:	01 97       	sbiw	r24, 0x01	; 1
    3a08:	f1 f7       	brne	.-4      	; 0x3a06 <wifi_connect+0x83c>
    3a0a:	fe 01       	movw	r30, r28
    3a0c:	e3 56       	subi	r30, 0x63	; 99
    3a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a10:	91 83       	std	Z+1, r25	; 0x01
    3a12:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a14:	de 01       	movw	r26, r28
    3a16:	a1 56       	subi	r26, 0x61	; 97
    3a18:	bf 4f       	sbci	r27, 0xFF	; 255
    3a1a:	fe 01       	movw	r30, r28
    3a1c:	e1 56       	subi	r30, 0x61	; 97
    3a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a20:	80 81       	ld	r24, Z
    3a22:	91 81       	ldd	r25, Z+1	; 0x01
    3a24:	01 97       	sbiw	r24, 0x01	; 1
    3a26:	11 96       	adiw	r26, 0x01	; 1
    3a28:	9c 93       	st	X, r25
    3a2a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a2c:	fe 01       	movw	r30, r28
    3a2e:	e1 56       	subi	r30, 0x61	; 97
    3a30:	ff 4f       	sbci	r31, 0xFF	; 255
    3a32:	80 81       	ld	r24, Z
    3a34:	91 81       	ldd	r25, Z+1	; 0x01
    3a36:	00 97       	sbiw	r24, 0x00	; 0
    3a38:	d1 f6       	brne	.-76     	; 0x39ee <wifi_connect+0x824>
    3a3a:	27 c0       	rjmp	.+78     	; 0x3a8a <wifi_connect+0x8c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a3c:	8e 01       	movw	r16, r28
    3a3e:	01 56       	subi	r16, 0x61	; 97
    3a40:	1f 4f       	sbci	r17, 0xFF	; 255
    3a42:	fe 01       	movw	r30, r28
    3a44:	ef 55       	subi	r30, 0x5F	; 95
    3a46:	ff 4f       	sbci	r31, 0xFF	; 255
    3a48:	60 81       	ld	r22, Z
    3a4a:	71 81       	ldd	r23, Z+1	; 0x01
    3a4c:	82 81       	ldd	r24, Z+2	; 0x02
    3a4e:	93 81       	ldd	r25, Z+3	; 0x03
    3a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a54:	dc 01       	movw	r26, r24
    3a56:	cb 01       	movw	r24, r22
    3a58:	f8 01       	movw	r30, r16
    3a5a:	91 83       	std	Z+1, r25	; 0x01
    3a5c:	80 83       	st	Z, r24
    3a5e:	de 01       	movw	r26, r28
    3a60:	a5 56       	subi	r26, 0x65	; 101
    3a62:	bf 4f       	sbci	r27, 0xFF	; 255
    3a64:	fe 01       	movw	r30, r28
    3a66:	e1 56       	subi	r30, 0x61	; 97
    3a68:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6a:	80 81       	ld	r24, Z
    3a6c:	91 81       	ldd	r25, Z+1	; 0x01
    3a6e:	8d 93       	st	X+, r24
    3a70:	9c 93       	st	X, r25
    3a72:	fe 01       	movw	r30, r28
    3a74:	e5 56       	subi	r30, 0x65	; 101
    3a76:	ff 4f       	sbci	r31, 0xFF	; 255
    3a78:	80 81       	ld	r24, Z
    3a7a:	91 81       	ldd	r25, Z+1	; 0x01
    3a7c:	01 97       	sbiw	r24, 0x01	; 1
    3a7e:	f1 f7       	brne	.-4      	; 0x3a7c <wifi_connect+0x8b2>
    3a80:	fe 01       	movw	r30, r28
    3a82:	e5 56       	subi	r30, 0x65	; 101
    3a84:	ff 4f       	sbci	r31, 0xFF	; 255
    3a86:	91 83       	std	Z+1, r25	; 0x01
    3a88:	80 83       	st	Z, r24
	_delay_ms(1000);
	H_LCD_void_Clear_Display();
    3a8a:	0e 94 be 2b 	call	0x577c	; 0x577c <H_LCD_void_Clear_Display>
    3a8e:	fe 01       	movw	r30, r28
    3a90:	e9 56       	subi	r30, 0x69	; 105
    3a92:	ff 4f       	sbci	r31, 0xFF	; 255
    3a94:	80 e0       	ldi	r24, 0x00	; 0
    3a96:	90 e0       	ldi	r25, 0x00	; 0
    3a98:	a8 e4       	ldi	r26, 0x48	; 72
    3a9a:	b3 e4       	ldi	r27, 0x43	; 67
    3a9c:	80 83       	st	Z, r24
    3a9e:	91 83       	std	Z+1, r25	; 0x01
    3aa0:	a2 83       	std	Z+2, r26	; 0x02
    3aa2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aa4:	8e 01       	movw	r16, r28
    3aa6:	0d 56       	subi	r16, 0x6D	; 109
    3aa8:	1f 4f       	sbci	r17, 0xFF	; 255
    3aaa:	fe 01       	movw	r30, r28
    3aac:	e9 56       	subi	r30, 0x69	; 105
    3aae:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab0:	60 81       	ld	r22, Z
    3ab2:	71 81       	ldd	r23, Z+1	; 0x01
    3ab4:	82 81       	ldd	r24, Z+2	; 0x02
    3ab6:	93 81       	ldd	r25, Z+3	; 0x03
    3ab8:	20 e0       	ldi	r18, 0x00	; 0
    3aba:	30 e0       	ldi	r19, 0x00	; 0
    3abc:	4a e7       	ldi	r20, 0x7A	; 122
    3abe:	55 e4       	ldi	r21, 0x45	; 69
    3ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac4:	dc 01       	movw	r26, r24
    3ac6:	cb 01       	movw	r24, r22
    3ac8:	f8 01       	movw	r30, r16
    3aca:	80 83       	st	Z, r24
    3acc:	91 83       	std	Z+1, r25	; 0x01
    3ace:	a2 83       	std	Z+2, r26	; 0x02
    3ad0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ad2:	fe 01       	movw	r30, r28
    3ad4:	ed 56       	subi	r30, 0x6D	; 109
    3ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad8:	60 81       	ld	r22, Z
    3ada:	71 81       	ldd	r23, Z+1	; 0x01
    3adc:	82 81       	ldd	r24, Z+2	; 0x02
    3ade:	93 81       	ldd	r25, Z+3	; 0x03
    3ae0:	20 e0       	ldi	r18, 0x00	; 0
    3ae2:	30 e0       	ldi	r19, 0x00	; 0
    3ae4:	40 e8       	ldi	r20, 0x80	; 128
    3ae6:	5f e3       	ldi	r21, 0x3F	; 63
    3ae8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3aec:	88 23       	and	r24, r24
    3aee:	44 f4       	brge	.+16     	; 0x3b00 <wifi_connect+0x936>
		__ticks = 1;
    3af0:	fe 01       	movw	r30, r28
    3af2:	ef 56       	subi	r30, 0x6F	; 111
    3af4:	ff 4f       	sbci	r31, 0xFF	; 255
    3af6:	81 e0       	ldi	r24, 0x01	; 1
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	91 83       	std	Z+1, r25	; 0x01
    3afc:	80 83       	st	Z, r24
    3afe:	64 c0       	rjmp	.+200    	; 0x3bc8 <wifi_connect+0x9fe>
	else if (__tmp > 65535)
    3b00:	fe 01       	movw	r30, r28
    3b02:	ed 56       	subi	r30, 0x6D	; 109
    3b04:	ff 4f       	sbci	r31, 0xFF	; 255
    3b06:	60 81       	ld	r22, Z
    3b08:	71 81       	ldd	r23, Z+1	; 0x01
    3b0a:	82 81       	ldd	r24, Z+2	; 0x02
    3b0c:	93 81       	ldd	r25, Z+3	; 0x03
    3b0e:	20 e0       	ldi	r18, 0x00	; 0
    3b10:	3f ef       	ldi	r19, 0xFF	; 255
    3b12:	4f e7       	ldi	r20, 0x7F	; 127
    3b14:	57 e4       	ldi	r21, 0x47	; 71
    3b16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b1a:	18 16       	cp	r1, r24
    3b1c:	0c f0       	brlt	.+2      	; 0x3b20 <wifi_connect+0x956>
    3b1e:	43 c0       	rjmp	.+134    	; 0x3ba6 <wifi_connect+0x9dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b20:	fe 01       	movw	r30, r28
    3b22:	e9 56       	subi	r30, 0x69	; 105
    3b24:	ff 4f       	sbci	r31, 0xFF	; 255
    3b26:	60 81       	ld	r22, Z
    3b28:	71 81       	ldd	r23, Z+1	; 0x01
    3b2a:	82 81       	ldd	r24, Z+2	; 0x02
    3b2c:	93 81       	ldd	r25, Z+3	; 0x03
    3b2e:	20 e0       	ldi	r18, 0x00	; 0
    3b30:	30 e0       	ldi	r19, 0x00	; 0
    3b32:	40 e2       	ldi	r20, 0x20	; 32
    3b34:	51 e4       	ldi	r21, 0x41	; 65
    3b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b3a:	dc 01       	movw	r26, r24
    3b3c:	cb 01       	movw	r24, r22
    3b3e:	8e 01       	movw	r16, r28
    3b40:	0f 56       	subi	r16, 0x6F	; 111
    3b42:	1f 4f       	sbci	r17, 0xFF	; 255
    3b44:	bc 01       	movw	r22, r24
    3b46:	cd 01       	movw	r24, r26
    3b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b4c:	dc 01       	movw	r26, r24
    3b4e:	cb 01       	movw	r24, r22
    3b50:	f8 01       	movw	r30, r16
    3b52:	91 83       	std	Z+1, r25	; 0x01
    3b54:	80 83       	st	Z, r24
    3b56:	1f c0       	rjmp	.+62     	; 0x3b96 <wifi_connect+0x9cc>
    3b58:	fe 01       	movw	r30, r28
    3b5a:	e1 57       	subi	r30, 0x71	; 113
    3b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5e:	80 e9       	ldi	r24, 0x90	; 144
    3b60:	91 e0       	ldi	r25, 0x01	; 1
    3b62:	91 83       	std	Z+1, r25	; 0x01
    3b64:	80 83       	st	Z, r24
    3b66:	fe 01       	movw	r30, r28
    3b68:	e1 57       	subi	r30, 0x71	; 113
    3b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6c:	80 81       	ld	r24, Z
    3b6e:	91 81       	ldd	r25, Z+1	; 0x01
    3b70:	01 97       	sbiw	r24, 0x01	; 1
    3b72:	f1 f7       	brne	.-4      	; 0x3b70 <wifi_connect+0x9a6>
    3b74:	fe 01       	movw	r30, r28
    3b76:	e1 57       	subi	r30, 0x71	; 113
    3b78:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7a:	91 83       	std	Z+1, r25	; 0x01
    3b7c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b7e:	de 01       	movw	r26, r28
    3b80:	af 56       	subi	r26, 0x6F	; 111
    3b82:	bf 4f       	sbci	r27, 0xFF	; 255
    3b84:	fe 01       	movw	r30, r28
    3b86:	ef 56       	subi	r30, 0x6F	; 111
    3b88:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8a:	80 81       	ld	r24, Z
    3b8c:	91 81       	ldd	r25, Z+1	; 0x01
    3b8e:	01 97       	sbiw	r24, 0x01	; 1
    3b90:	11 96       	adiw	r26, 0x01	; 1
    3b92:	9c 93       	st	X, r25
    3b94:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b96:	fe 01       	movw	r30, r28
    3b98:	ef 56       	subi	r30, 0x6F	; 111
    3b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9c:	80 81       	ld	r24, Z
    3b9e:	91 81       	ldd	r25, Z+1	; 0x01
    3ba0:	00 97       	sbiw	r24, 0x00	; 0
    3ba2:	d1 f6       	brne	.-76     	; 0x3b58 <wifi_connect+0x98e>
    3ba4:	27 c0       	rjmp	.+78     	; 0x3bf4 <wifi_connect+0xa2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ba6:	8e 01       	movw	r16, r28
    3ba8:	0f 56       	subi	r16, 0x6F	; 111
    3baa:	1f 4f       	sbci	r17, 0xFF	; 255
    3bac:	fe 01       	movw	r30, r28
    3bae:	ed 56       	subi	r30, 0x6D	; 109
    3bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb2:	60 81       	ld	r22, Z
    3bb4:	71 81       	ldd	r23, Z+1	; 0x01
    3bb6:	82 81       	ldd	r24, Z+2	; 0x02
    3bb8:	93 81       	ldd	r25, Z+3	; 0x03
    3bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bbe:	dc 01       	movw	r26, r24
    3bc0:	cb 01       	movw	r24, r22
    3bc2:	f8 01       	movw	r30, r16
    3bc4:	91 83       	std	Z+1, r25	; 0x01
    3bc6:	80 83       	st	Z, r24
    3bc8:	de 01       	movw	r26, r28
    3bca:	a3 57       	subi	r26, 0x73	; 115
    3bcc:	bf 4f       	sbci	r27, 0xFF	; 255
    3bce:	fe 01       	movw	r30, r28
    3bd0:	ef 56       	subi	r30, 0x6F	; 111
    3bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd4:	80 81       	ld	r24, Z
    3bd6:	91 81       	ldd	r25, Z+1	; 0x01
    3bd8:	8d 93       	st	X+, r24
    3bda:	9c 93       	st	X, r25
    3bdc:	fe 01       	movw	r30, r28
    3bde:	e3 57       	subi	r30, 0x73	; 115
    3be0:	ff 4f       	sbci	r31, 0xFF	; 255
    3be2:	80 81       	ld	r24, Z
    3be4:	91 81       	ldd	r25, Z+1	; 0x01
    3be6:	01 97       	sbiw	r24, 0x01	; 1
    3be8:	f1 f7       	brne	.-4      	; 0x3be6 <wifi_connect+0xa1c>
    3bea:	fe 01       	movw	r30, r28
    3bec:	e3 57       	subi	r30, 0x73	; 115
    3bee:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf0:	91 83       	std	Z+1, r25	; 0x01
    3bf2:	80 83       	st	Z, r24
	_delay_ms(200);
	Wifi_Buffer_Reset();
    3bf4:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <Wifi_Buffer_Reset>
	H_LCD_void_sendData('3');
    3bf8:	83 e3       	ldi	r24, 0x33	; 51
    3bfa:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <H_LCD_void_sendData>
    3bfe:	fe 01       	movw	r30, r28
    3c00:	e7 57       	subi	r30, 0x77	; 119
    3c02:	ff 4f       	sbci	r31, 0xFF	; 255
    3c04:	80 e0       	ldi	r24, 0x00	; 0
    3c06:	90 e0       	ldi	r25, 0x00	; 0
    3c08:	aa e7       	ldi	r26, 0x7A	; 122
    3c0a:	b4 e4       	ldi	r27, 0x44	; 68
    3c0c:	80 83       	st	Z, r24
    3c0e:	91 83       	std	Z+1, r25	; 0x01
    3c10:	a2 83       	std	Z+2, r26	; 0x02
    3c12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c14:	8e 01       	movw	r16, r28
    3c16:	0b 57       	subi	r16, 0x7B	; 123
    3c18:	1f 4f       	sbci	r17, 0xFF	; 255
    3c1a:	fe 01       	movw	r30, r28
    3c1c:	e7 57       	subi	r30, 0x77	; 119
    3c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c20:	60 81       	ld	r22, Z
    3c22:	71 81       	ldd	r23, Z+1	; 0x01
    3c24:	82 81       	ldd	r24, Z+2	; 0x02
    3c26:	93 81       	ldd	r25, Z+3	; 0x03
    3c28:	20 e0       	ldi	r18, 0x00	; 0
    3c2a:	30 e0       	ldi	r19, 0x00	; 0
    3c2c:	4a e7       	ldi	r20, 0x7A	; 122
    3c2e:	55 e4       	ldi	r21, 0x45	; 69
    3c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c34:	dc 01       	movw	r26, r24
    3c36:	cb 01       	movw	r24, r22
    3c38:	f8 01       	movw	r30, r16
    3c3a:	80 83       	st	Z, r24
    3c3c:	91 83       	std	Z+1, r25	; 0x01
    3c3e:	a2 83       	std	Z+2, r26	; 0x02
    3c40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c42:	fe 01       	movw	r30, r28
    3c44:	eb 57       	subi	r30, 0x7B	; 123
    3c46:	ff 4f       	sbci	r31, 0xFF	; 255
    3c48:	60 81       	ld	r22, Z
    3c4a:	71 81       	ldd	r23, Z+1	; 0x01
    3c4c:	82 81       	ldd	r24, Z+2	; 0x02
    3c4e:	93 81       	ldd	r25, Z+3	; 0x03
    3c50:	20 e0       	ldi	r18, 0x00	; 0
    3c52:	30 e0       	ldi	r19, 0x00	; 0
    3c54:	40 e8       	ldi	r20, 0x80	; 128
    3c56:	5f e3       	ldi	r21, 0x3F	; 63
    3c58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c5c:	88 23       	and	r24, r24
    3c5e:	44 f4       	brge	.+16     	; 0x3c70 <wifi_connect+0xaa6>
		__ticks = 1;
    3c60:	fe 01       	movw	r30, r28
    3c62:	ed 57       	subi	r30, 0x7D	; 125
    3c64:	ff 4f       	sbci	r31, 0xFF	; 255
    3c66:	81 e0       	ldi	r24, 0x01	; 1
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	91 83       	std	Z+1, r25	; 0x01
    3c6c:	80 83       	st	Z, r24
    3c6e:	64 c0       	rjmp	.+200    	; 0x3d38 <wifi_connect+0xb6e>
	else if (__tmp > 65535)
    3c70:	fe 01       	movw	r30, r28
    3c72:	eb 57       	subi	r30, 0x7B	; 123
    3c74:	ff 4f       	sbci	r31, 0xFF	; 255
    3c76:	60 81       	ld	r22, Z
    3c78:	71 81       	ldd	r23, Z+1	; 0x01
    3c7a:	82 81       	ldd	r24, Z+2	; 0x02
    3c7c:	93 81       	ldd	r25, Z+3	; 0x03
    3c7e:	20 e0       	ldi	r18, 0x00	; 0
    3c80:	3f ef       	ldi	r19, 0xFF	; 255
    3c82:	4f e7       	ldi	r20, 0x7F	; 127
    3c84:	57 e4       	ldi	r21, 0x47	; 71
    3c86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c8a:	18 16       	cp	r1, r24
    3c8c:	0c f0       	brlt	.+2      	; 0x3c90 <wifi_connect+0xac6>
    3c8e:	43 c0       	rjmp	.+134    	; 0x3d16 <wifi_connect+0xb4c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c90:	fe 01       	movw	r30, r28
    3c92:	e7 57       	subi	r30, 0x77	; 119
    3c94:	ff 4f       	sbci	r31, 0xFF	; 255
    3c96:	60 81       	ld	r22, Z
    3c98:	71 81       	ldd	r23, Z+1	; 0x01
    3c9a:	82 81       	ldd	r24, Z+2	; 0x02
    3c9c:	93 81       	ldd	r25, Z+3	; 0x03
    3c9e:	20 e0       	ldi	r18, 0x00	; 0
    3ca0:	30 e0       	ldi	r19, 0x00	; 0
    3ca2:	40 e2       	ldi	r20, 0x20	; 32
    3ca4:	51 e4       	ldi	r21, 0x41	; 65
    3ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3caa:	dc 01       	movw	r26, r24
    3cac:	cb 01       	movw	r24, r22
    3cae:	8e 01       	movw	r16, r28
    3cb0:	0d 57       	subi	r16, 0x7D	; 125
    3cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    3cb4:	bc 01       	movw	r22, r24
    3cb6:	cd 01       	movw	r24, r26
    3cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cbc:	dc 01       	movw	r26, r24
    3cbe:	cb 01       	movw	r24, r22
    3cc0:	f8 01       	movw	r30, r16
    3cc2:	91 83       	std	Z+1, r25	; 0x01
    3cc4:	80 83       	st	Z, r24
    3cc6:	1f c0       	rjmp	.+62     	; 0x3d06 <wifi_connect+0xb3c>
    3cc8:	fe 01       	movw	r30, r28
    3cca:	ef 57       	subi	r30, 0x7F	; 127
    3ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cce:	80 e9       	ldi	r24, 0x90	; 144
    3cd0:	91 e0       	ldi	r25, 0x01	; 1
    3cd2:	91 83       	std	Z+1, r25	; 0x01
    3cd4:	80 83       	st	Z, r24
    3cd6:	fe 01       	movw	r30, r28
    3cd8:	ef 57       	subi	r30, 0x7F	; 127
    3cda:	ff 4f       	sbci	r31, 0xFF	; 255
    3cdc:	80 81       	ld	r24, Z
    3cde:	91 81       	ldd	r25, Z+1	; 0x01
    3ce0:	01 97       	sbiw	r24, 0x01	; 1
    3ce2:	f1 f7       	brne	.-4      	; 0x3ce0 <wifi_connect+0xb16>
    3ce4:	fe 01       	movw	r30, r28
    3ce6:	ef 57       	subi	r30, 0x7F	; 127
    3ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cea:	91 83       	std	Z+1, r25	; 0x01
    3cec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cee:	de 01       	movw	r26, r28
    3cf0:	ad 57       	subi	r26, 0x7D	; 125
    3cf2:	bf 4f       	sbci	r27, 0xFF	; 255
    3cf4:	fe 01       	movw	r30, r28
    3cf6:	ed 57       	subi	r30, 0x7D	; 125
    3cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfa:	80 81       	ld	r24, Z
    3cfc:	91 81       	ldd	r25, Z+1	; 0x01
    3cfe:	01 97       	sbiw	r24, 0x01	; 1
    3d00:	11 96       	adiw	r26, 0x01	; 1
    3d02:	9c 93       	st	X, r25
    3d04:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d06:	fe 01       	movw	r30, r28
    3d08:	ed 57       	subi	r30, 0x7D	; 125
    3d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0c:	80 81       	ld	r24, Z
    3d0e:	91 81       	ldd	r25, Z+1	; 0x01
    3d10:	00 97       	sbiw	r24, 0x00	; 0
    3d12:	d1 f6       	brne	.-76     	; 0x3cc8 <wifi_connect+0xafe>
    3d14:	27 c0       	rjmp	.+78     	; 0x3d64 <wifi_connect+0xb9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d16:	8e 01       	movw	r16, r28
    3d18:	0d 57       	subi	r16, 0x7D	; 125
    3d1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d1c:	fe 01       	movw	r30, r28
    3d1e:	eb 57       	subi	r30, 0x7B	; 123
    3d20:	ff 4f       	sbci	r31, 0xFF	; 255
    3d22:	60 81       	ld	r22, Z
    3d24:	71 81       	ldd	r23, Z+1	; 0x01
    3d26:	82 81       	ldd	r24, Z+2	; 0x02
    3d28:	93 81       	ldd	r25, Z+3	; 0x03
    3d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d2e:	dc 01       	movw	r26, r24
    3d30:	cb 01       	movw	r24, r22
    3d32:	f8 01       	movw	r30, r16
    3d34:	91 83       	std	Z+1, r25	; 0x01
    3d36:	80 83       	st	Z, r24
    3d38:	de 01       	movw	r26, r28
    3d3a:	a1 58       	subi	r26, 0x81	; 129
    3d3c:	bf 4f       	sbci	r27, 0xFF	; 255
    3d3e:	fe 01       	movw	r30, r28
    3d40:	ed 57       	subi	r30, 0x7D	; 125
    3d42:	ff 4f       	sbci	r31, 0xFF	; 255
    3d44:	80 81       	ld	r24, Z
    3d46:	91 81       	ldd	r25, Z+1	; 0x01
    3d48:	8d 93       	st	X+, r24
    3d4a:	9c 93       	st	X, r25
    3d4c:	fe 01       	movw	r30, r28
    3d4e:	e1 58       	subi	r30, 0x81	; 129
    3d50:	ff 4f       	sbci	r31, 0xFF	; 255
    3d52:	80 81       	ld	r24, Z
    3d54:	91 81       	ldd	r25, Z+1	; 0x01
    3d56:	01 97       	sbiw	r24, 0x01	; 1
    3d58:	f1 f7       	brne	.-4      	; 0x3d56 <wifi_connect+0xb8c>
    3d5a:	fe 01       	movw	r30, r28
    3d5c:	e1 58       	subi	r30, 0x81	; 129
    3d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d60:	91 83       	std	Z+1, r25	; 0x01
    3d62:	80 83       	st	Z, r24
	
	//"Fiber\",\"P@ssw0rd@MCIT\
	// "ahmed57\",\"asd52479955\
	/* Connect to wifi */
	
	UART_sendString("AT+CWJAP=\"Fiber\",\"P@ssw0rd@MCIT\"\r\n");
    3d64:	81 e9       	ldi	r24, 0x91	; 145
    3d66:	90 e0       	ldi	r25, 0x00	; 0
    3d68:	0e 94 c4 07 	call	0xf88	; 0xf88 <UART_sendString>
    3d6c:	fe 01       	movw	r30, r28
    3d6e:	e5 58       	subi	r30, 0x85	; 133
    3d70:	ff 4f       	sbci	r31, 0xFF	; 255
    3d72:	80 e0       	ldi	r24, 0x00	; 0
    3d74:	90 e8       	ldi	r25, 0x80	; 128
    3d76:	ab e3       	ldi	r26, 0x3B	; 59
    3d78:	b5 e4       	ldi	r27, 0x45	; 69
    3d7a:	80 83       	st	Z, r24
    3d7c:	91 83       	std	Z+1, r25	; 0x01
    3d7e:	a2 83       	std	Z+2, r26	; 0x02
    3d80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d82:	8e 01       	movw	r16, r28
    3d84:	09 58       	subi	r16, 0x89	; 137
    3d86:	1f 4f       	sbci	r17, 0xFF	; 255
    3d88:	fe 01       	movw	r30, r28
    3d8a:	e5 58       	subi	r30, 0x85	; 133
    3d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8e:	60 81       	ld	r22, Z
    3d90:	71 81       	ldd	r23, Z+1	; 0x01
    3d92:	82 81       	ldd	r24, Z+2	; 0x02
    3d94:	93 81       	ldd	r25, Z+3	; 0x03
    3d96:	20 e0       	ldi	r18, 0x00	; 0
    3d98:	30 e0       	ldi	r19, 0x00	; 0
    3d9a:	4a e7       	ldi	r20, 0x7A	; 122
    3d9c:	55 e4       	ldi	r21, 0x45	; 69
    3d9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3da2:	dc 01       	movw	r26, r24
    3da4:	cb 01       	movw	r24, r22
    3da6:	f8 01       	movw	r30, r16
    3da8:	80 83       	st	Z, r24
    3daa:	91 83       	std	Z+1, r25	; 0x01
    3dac:	a2 83       	std	Z+2, r26	; 0x02
    3dae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3db0:	fe 01       	movw	r30, r28
    3db2:	e9 58       	subi	r30, 0x89	; 137
    3db4:	ff 4f       	sbci	r31, 0xFF	; 255
    3db6:	60 81       	ld	r22, Z
    3db8:	71 81       	ldd	r23, Z+1	; 0x01
    3dba:	82 81       	ldd	r24, Z+2	; 0x02
    3dbc:	93 81       	ldd	r25, Z+3	; 0x03
    3dbe:	20 e0       	ldi	r18, 0x00	; 0
    3dc0:	30 e0       	ldi	r19, 0x00	; 0
    3dc2:	40 e8       	ldi	r20, 0x80	; 128
    3dc4:	5f e3       	ldi	r21, 0x3F	; 63
    3dc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3dca:	88 23       	and	r24, r24
    3dcc:	44 f4       	brge	.+16     	; 0x3dde <wifi_connect+0xc14>
		__ticks = 1;
    3dce:	fe 01       	movw	r30, r28
    3dd0:	eb 58       	subi	r30, 0x8B	; 139
    3dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd4:	81 e0       	ldi	r24, 0x01	; 1
    3dd6:	90 e0       	ldi	r25, 0x00	; 0
    3dd8:	91 83       	std	Z+1, r25	; 0x01
    3dda:	80 83       	st	Z, r24
    3ddc:	64 c0       	rjmp	.+200    	; 0x3ea6 <wifi_connect+0xcdc>
	else if (__tmp > 65535)
    3dde:	fe 01       	movw	r30, r28
    3de0:	e9 58       	subi	r30, 0x89	; 137
    3de2:	ff 4f       	sbci	r31, 0xFF	; 255
    3de4:	60 81       	ld	r22, Z
    3de6:	71 81       	ldd	r23, Z+1	; 0x01
    3de8:	82 81       	ldd	r24, Z+2	; 0x02
    3dea:	93 81       	ldd	r25, Z+3	; 0x03
    3dec:	20 e0       	ldi	r18, 0x00	; 0
    3dee:	3f ef       	ldi	r19, 0xFF	; 255
    3df0:	4f e7       	ldi	r20, 0x7F	; 127
    3df2:	57 e4       	ldi	r21, 0x47	; 71
    3df4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3df8:	18 16       	cp	r1, r24
    3dfa:	0c f0       	brlt	.+2      	; 0x3dfe <wifi_connect+0xc34>
    3dfc:	43 c0       	rjmp	.+134    	; 0x3e84 <wifi_connect+0xcba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dfe:	fe 01       	movw	r30, r28
    3e00:	e5 58       	subi	r30, 0x85	; 133
    3e02:	ff 4f       	sbci	r31, 0xFF	; 255
    3e04:	60 81       	ld	r22, Z
    3e06:	71 81       	ldd	r23, Z+1	; 0x01
    3e08:	82 81       	ldd	r24, Z+2	; 0x02
    3e0a:	93 81       	ldd	r25, Z+3	; 0x03
    3e0c:	20 e0       	ldi	r18, 0x00	; 0
    3e0e:	30 e0       	ldi	r19, 0x00	; 0
    3e10:	40 e2       	ldi	r20, 0x20	; 32
    3e12:	51 e4       	ldi	r21, 0x41	; 65
    3e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e18:	dc 01       	movw	r26, r24
    3e1a:	cb 01       	movw	r24, r22
    3e1c:	8e 01       	movw	r16, r28
    3e1e:	0b 58       	subi	r16, 0x8B	; 139
    3e20:	1f 4f       	sbci	r17, 0xFF	; 255
    3e22:	bc 01       	movw	r22, r24
    3e24:	cd 01       	movw	r24, r26
    3e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e2a:	dc 01       	movw	r26, r24
    3e2c:	cb 01       	movw	r24, r22
    3e2e:	f8 01       	movw	r30, r16
    3e30:	91 83       	std	Z+1, r25	; 0x01
    3e32:	80 83       	st	Z, r24
    3e34:	1f c0       	rjmp	.+62     	; 0x3e74 <wifi_connect+0xcaa>
    3e36:	fe 01       	movw	r30, r28
    3e38:	ed 58       	subi	r30, 0x8D	; 141
    3e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3c:	80 e9       	ldi	r24, 0x90	; 144
    3e3e:	91 e0       	ldi	r25, 0x01	; 1
    3e40:	91 83       	std	Z+1, r25	; 0x01
    3e42:	80 83       	st	Z, r24
    3e44:	fe 01       	movw	r30, r28
    3e46:	ed 58       	subi	r30, 0x8D	; 141
    3e48:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4a:	80 81       	ld	r24, Z
    3e4c:	91 81       	ldd	r25, Z+1	; 0x01
    3e4e:	01 97       	sbiw	r24, 0x01	; 1
    3e50:	f1 f7       	brne	.-4      	; 0x3e4e <wifi_connect+0xc84>
    3e52:	fe 01       	movw	r30, r28
    3e54:	ed 58       	subi	r30, 0x8D	; 141
    3e56:	ff 4f       	sbci	r31, 0xFF	; 255
    3e58:	91 83       	std	Z+1, r25	; 0x01
    3e5a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e5c:	de 01       	movw	r26, r28
    3e5e:	ab 58       	subi	r26, 0x8B	; 139
    3e60:	bf 4f       	sbci	r27, 0xFF	; 255
    3e62:	fe 01       	movw	r30, r28
    3e64:	eb 58       	subi	r30, 0x8B	; 139
    3e66:	ff 4f       	sbci	r31, 0xFF	; 255
    3e68:	80 81       	ld	r24, Z
    3e6a:	91 81       	ldd	r25, Z+1	; 0x01
    3e6c:	01 97       	sbiw	r24, 0x01	; 1
    3e6e:	11 96       	adiw	r26, 0x01	; 1
    3e70:	9c 93       	st	X, r25
    3e72:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e74:	fe 01       	movw	r30, r28
    3e76:	eb 58       	subi	r30, 0x8B	; 139
    3e78:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7a:	80 81       	ld	r24, Z
    3e7c:	91 81       	ldd	r25, Z+1	; 0x01
    3e7e:	00 97       	sbiw	r24, 0x00	; 0
    3e80:	d1 f6       	brne	.-76     	; 0x3e36 <wifi_connect+0xc6c>
    3e82:	27 c0       	rjmp	.+78     	; 0x3ed2 <wifi_connect+0xd08>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e84:	8e 01       	movw	r16, r28
    3e86:	0b 58       	subi	r16, 0x8B	; 139
    3e88:	1f 4f       	sbci	r17, 0xFF	; 255
    3e8a:	fe 01       	movw	r30, r28
    3e8c:	e9 58       	subi	r30, 0x89	; 137
    3e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e90:	60 81       	ld	r22, Z
    3e92:	71 81       	ldd	r23, Z+1	; 0x01
    3e94:	82 81       	ldd	r24, Z+2	; 0x02
    3e96:	93 81       	ldd	r25, Z+3	; 0x03
    3e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e9c:	dc 01       	movw	r26, r24
    3e9e:	cb 01       	movw	r24, r22
    3ea0:	f8 01       	movw	r30, r16
    3ea2:	91 83       	std	Z+1, r25	; 0x01
    3ea4:	80 83       	st	Z, r24
    3ea6:	de 01       	movw	r26, r28
    3ea8:	af 58       	subi	r26, 0x8F	; 143
    3eaa:	bf 4f       	sbci	r27, 0xFF	; 255
    3eac:	fe 01       	movw	r30, r28
    3eae:	eb 58       	subi	r30, 0x8B	; 139
    3eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb2:	80 81       	ld	r24, Z
    3eb4:	91 81       	ldd	r25, Z+1	; 0x01
    3eb6:	8d 93       	st	X+, r24
    3eb8:	9c 93       	st	X, r25
    3eba:	fe 01       	movw	r30, r28
    3ebc:	ef 58       	subi	r30, 0x8F	; 143
    3ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec0:	80 81       	ld	r24, Z
    3ec2:	91 81       	ldd	r25, Z+1	; 0x01
    3ec4:	01 97       	sbiw	r24, 0x01	; 1
    3ec6:	f1 f7       	brne	.-4      	; 0x3ec4 <wifi_connect+0xcfa>
    3ec8:	fe 01       	movw	r30, r28
    3eca:	ef 58       	subi	r30, 0x8F	; 143
    3ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ece:	91 83       	std	Z+1, r25	; 0x01
    3ed0:	80 83       	st	Z, r24
    3ed2:	fe 01       	movw	r30, r28
    3ed4:	e3 59       	subi	r30, 0x93	; 147
    3ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed8:	80 e0       	ldi	r24, 0x00	; 0
    3eda:	90 e8       	ldi	r25, 0x80	; 128
    3edc:	ab e3       	ldi	r26, 0x3B	; 59
    3ede:	b5 e4       	ldi	r27, 0x45	; 69
    3ee0:	80 83       	st	Z, r24
    3ee2:	91 83       	std	Z+1, r25	; 0x01
    3ee4:	a2 83       	std	Z+2, r26	; 0x02
    3ee6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ee8:	8e 01       	movw	r16, r28
    3eea:	07 59       	subi	r16, 0x97	; 151
    3eec:	1f 4f       	sbci	r17, 0xFF	; 255
    3eee:	fe 01       	movw	r30, r28
    3ef0:	e3 59       	subi	r30, 0x93	; 147
    3ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef4:	60 81       	ld	r22, Z
    3ef6:	71 81       	ldd	r23, Z+1	; 0x01
    3ef8:	82 81       	ldd	r24, Z+2	; 0x02
    3efa:	93 81       	ldd	r25, Z+3	; 0x03
    3efc:	20 e0       	ldi	r18, 0x00	; 0
    3efe:	30 e0       	ldi	r19, 0x00	; 0
    3f00:	4a e7       	ldi	r20, 0x7A	; 122
    3f02:	55 e4       	ldi	r21, 0x45	; 69
    3f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f08:	dc 01       	movw	r26, r24
    3f0a:	cb 01       	movw	r24, r22
    3f0c:	f8 01       	movw	r30, r16
    3f0e:	80 83       	st	Z, r24
    3f10:	91 83       	std	Z+1, r25	; 0x01
    3f12:	a2 83       	std	Z+2, r26	; 0x02
    3f14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f16:	fe 01       	movw	r30, r28
    3f18:	e7 59       	subi	r30, 0x97	; 151
    3f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1c:	60 81       	ld	r22, Z
    3f1e:	71 81       	ldd	r23, Z+1	; 0x01
    3f20:	82 81       	ldd	r24, Z+2	; 0x02
    3f22:	93 81       	ldd	r25, Z+3	; 0x03
    3f24:	20 e0       	ldi	r18, 0x00	; 0
    3f26:	30 e0       	ldi	r19, 0x00	; 0
    3f28:	40 e8       	ldi	r20, 0x80	; 128
    3f2a:	5f e3       	ldi	r21, 0x3F	; 63
    3f2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f30:	88 23       	and	r24, r24
    3f32:	44 f4       	brge	.+16     	; 0x3f44 <wifi_connect+0xd7a>
		__ticks = 1;
    3f34:	fe 01       	movw	r30, r28
    3f36:	e9 59       	subi	r30, 0x99	; 153
    3f38:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3a:	81 e0       	ldi	r24, 0x01	; 1
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	91 83       	std	Z+1, r25	; 0x01
    3f40:	80 83       	st	Z, r24
    3f42:	64 c0       	rjmp	.+200    	; 0x400c <wifi_connect+0xe42>
	else if (__tmp > 65535)
    3f44:	fe 01       	movw	r30, r28
    3f46:	e7 59       	subi	r30, 0x97	; 151
    3f48:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4a:	60 81       	ld	r22, Z
    3f4c:	71 81       	ldd	r23, Z+1	; 0x01
    3f4e:	82 81       	ldd	r24, Z+2	; 0x02
    3f50:	93 81       	ldd	r25, Z+3	; 0x03
    3f52:	20 e0       	ldi	r18, 0x00	; 0
    3f54:	3f ef       	ldi	r19, 0xFF	; 255
    3f56:	4f e7       	ldi	r20, 0x7F	; 127
    3f58:	57 e4       	ldi	r21, 0x47	; 71
    3f5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f5e:	18 16       	cp	r1, r24
    3f60:	0c f0       	brlt	.+2      	; 0x3f64 <wifi_connect+0xd9a>
    3f62:	43 c0       	rjmp	.+134    	; 0x3fea <wifi_connect+0xe20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f64:	fe 01       	movw	r30, r28
    3f66:	e3 59       	subi	r30, 0x93	; 147
    3f68:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6a:	60 81       	ld	r22, Z
    3f6c:	71 81       	ldd	r23, Z+1	; 0x01
    3f6e:	82 81       	ldd	r24, Z+2	; 0x02
    3f70:	93 81       	ldd	r25, Z+3	; 0x03
    3f72:	20 e0       	ldi	r18, 0x00	; 0
    3f74:	30 e0       	ldi	r19, 0x00	; 0
    3f76:	40 e2       	ldi	r20, 0x20	; 32
    3f78:	51 e4       	ldi	r21, 0x41	; 65
    3f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f7e:	dc 01       	movw	r26, r24
    3f80:	cb 01       	movw	r24, r22
    3f82:	8e 01       	movw	r16, r28
    3f84:	09 59       	subi	r16, 0x99	; 153
    3f86:	1f 4f       	sbci	r17, 0xFF	; 255
    3f88:	bc 01       	movw	r22, r24
    3f8a:	cd 01       	movw	r24, r26
    3f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f90:	dc 01       	movw	r26, r24
    3f92:	cb 01       	movw	r24, r22
    3f94:	f8 01       	movw	r30, r16
    3f96:	91 83       	std	Z+1, r25	; 0x01
    3f98:	80 83       	st	Z, r24
    3f9a:	1f c0       	rjmp	.+62     	; 0x3fda <wifi_connect+0xe10>
    3f9c:	fe 01       	movw	r30, r28
    3f9e:	eb 59       	subi	r30, 0x9B	; 155
    3fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa2:	80 e9       	ldi	r24, 0x90	; 144
    3fa4:	91 e0       	ldi	r25, 0x01	; 1
    3fa6:	91 83       	std	Z+1, r25	; 0x01
    3fa8:	80 83       	st	Z, r24
    3faa:	fe 01       	movw	r30, r28
    3fac:	eb 59       	subi	r30, 0x9B	; 155
    3fae:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb0:	80 81       	ld	r24, Z
    3fb2:	91 81       	ldd	r25, Z+1	; 0x01
    3fb4:	01 97       	sbiw	r24, 0x01	; 1
    3fb6:	f1 f7       	brne	.-4      	; 0x3fb4 <wifi_connect+0xdea>
    3fb8:	fe 01       	movw	r30, r28
    3fba:	eb 59       	subi	r30, 0x9B	; 155
    3fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fbe:	91 83       	std	Z+1, r25	; 0x01
    3fc0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fc2:	de 01       	movw	r26, r28
    3fc4:	a9 59       	subi	r26, 0x99	; 153
    3fc6:	bf 4f       	sbci	r27, 0xFF	; 255
    3fc8:	fe 01       	movw	r30, r28
    3fca:	e9 59       	subi	r30, 0x99	; 153
    3fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fce:	80 81       	ld	r24, Z
    3fd0:	91 81       	ldd	r25, Z+1	; 0x01
    3fd2:	01 97       	sbiw	r24, 0x01	; 1
    3fd4:	11 96       	adiw	r26, 0x01	; 1
    3fd6:	9c 93       	st	X, r25
    3fd8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fda:	fe 01       	movw	r30, r28
    3fdc:	e9 59       	subi	r30, 0x99	; 153
    3fde:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe0:	80 81       	ld	r24, Z
    3fe2:	91 81       	ldd	r25, Z+1	; 0x01
    3fe4:	00 97       	sbiw	r24, 0x00	; 0
    3fe6:	d1 f6       	brne	.-76     	; 0x3f9c <wifi_connect+0xdd2>
    3fe8:	27 c0       	rjmp	.+78     	; 0x4038 <wifi_connect+0xe6e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fea:	8e 01       	movw	r16, r28
    3fec:	09 59       	subi	r16, 0x99	; 153
    3fee:	1f 4f       	sbci	r17, 0xFF	; 255
    3ff0:	fe 01       	movw	r30, r28
    3ff2:	e7 59       	subi	r30, 0x97	; 151
    3ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff6:	60 81       	ld	r22, Z
    3ff8:	71 81       	ldd	r23, Z+1	; 0x01
    3ffa:	82 81       	ldd	r24, Z+2	; 0x02
    3ffc:	93 81       	ldd	r25, Z+3	; 0x03
    3ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4002:	dc 01       	movw	r26, r24
    4004:	cb 01       	movw	r24, r22
    4006:	f8 01       	movw	r30, r16
    4008:	91 83       	std	Z+1, r25	; 0x01
    400a:	80 83       	st	Z, r24
    400c:	de 01       	movw	r26, r28
    400e:	ad 59       	subi	r26, 0x9D	; 157
    4010:	bf 4f       	sbci	r27, 0xFF	; 255
    4012:	fe 01       	movw	r30, r28
    4014:	e9 59       	subi	r30, 0x99	; 153
    4016:	ff 4f       	sbci	r31, 0xFF	; 255
    4018:	80 81       	ld	r24, Z
    401a:	91 81       	ldd	r25, Z+1	; 0x01
    401c:	8d 93       	st	X+, r24
    401e:	9c 93       	st	X, r25
    4020:	fe 01       	movw	r30, r28
    4022:	ed 59       	subi	r30, 0x9D	; 157
    4024:	ff 4f       	sbci	r31, 0xFF	; 255
    4026:	80 81       	ld	r24, Z
    4028:	91 81       	ldd	r25, Z+1	; 0x01
    402a:	01 97       	sbiw	r24, 0x01	; 1
    402c:	f1 f7       	brne	.-4      	; 0x402a <wifi_connect+0xe60>
    402e:	fe 01       	movw	r30, r28
    4030:	ed 59       	subi	r30, 0x9D	; 157
    4032:	ff 4f       	sbci	r31, 0xFF	; 255
    4034:	91 83       	std	Z+1, r25	; 0x01
    4036:	80 83       	st	Z, r24
	_delay_ms(3000);
	//Check_Wifi_Respones("WIFI DISCONNECT", "Connect_ERROR");
	//_delay_ms(3000);
	//Check_Wifi_Respones("WIFI CONNECTED", "Connect_ERROR");
	_delay_ms(3000);
	Check_Wifi_Respones("OK", "AT+CWMODE_ERROR");
    4038:	87 e6       	ldi	r24, 0x67	; 103
    403a:	90 e0       	ldi	r25, 0x00	; 0
    403c:	21 e8       	ldi	r18, 0x81	; 129
    403e:	30 e0       	ldi	r19, 0x00	; 0
    4040:	b9 01       	movw	r22, r18
    4042:	0e 94 ff 23 	call	0x47fe	; 0x47fe <Check_Wifi_Respones>
    4046:	fe 01       	movw	r30, r28
    4048:	e1 5a       	subi	r30, 0xA1	; 161
    404a:	ff 4f       	sbci	r31, 0xFF	; 255
    404c:	80 e0       	ldi	r24, 0x00	; 0
    404e:	90 e0       	ldi	r25, 0x00	; 0
    4050:	aa ef       	ldi	r26, 0xFA	; 250
    4052:	b4 e4       	ldi	r27, 0x44	; 68
    4054:	80 83       	st	Z, r24
    4056:	91 83       	std	Z+1, r25	; 0x01
    4058:	a2 83       	std	Z+2, r26	; 0x02
    405a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    405c:	8e 01       	movw	r16, r28
    405e:	05 5a       	subi	r16, 0xA5	; 165
    4060:	1f 4f       	sbci	r17, 0xFF	; 255
    4062:	fe 01       	movw	r30, r28
    4064:	e1 5a       	subi	r30, 0xA1	; 161
    4066:	ff 4f       	sbci	r31, 0xFF	; 255
    4068:	60 81       	ld	r22, Z
    406a:	71 81       	ldd	r23, Z+1	; 0x01
    406c:	82 81       	ldd	r24, Z+2	; 0x02
    406e:	93 81       	ldd	r25, Z+3	; 0x03
    4070:	20 e0       	ldi	r18, 0x00	; 0
    4072:	30 e0       	ldi	r19, 0x00	; 0
    4074:	4a e7       	ldi	r20, 0x7A	; 122
    4076:	55 e4       	ldi	r21, 0x45	; 69
    4078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    407c:	dc 01       	movw	r26, r24
    407e:	cb 01       	movw	r24, r22
    4080:	f8 01       	movw	r30, r16
    4082:	80 83       	st	Z, r24
    4084:	91 83       	std	Z+1, r25	; 0x01
    4086:	a2 83       	std	Z+2, r26	; 0x02
    4088:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    408a:	fe 01       	movw	r30, r28
    408c:	e5 5a       	subi	r30, 0xA5	; 165
    408e:	ff 4f       	sbci	r31, 0xFF	; 255
    4090:	60 81       	ld	r22, Z
    4092:	71 81       	ldd	r23, Z+1	; 0x01
    4094:	82 81       	ldd	r24, Z+2	; 0x02
    4096:	93 81       	ldd	r25, Z+3	; 0x03
    4098:	20 e0       	ldi	r18, 0x00	; 0
    409a:	30 e0       	ldi	r19, 0x00	; 0
    409c:	40 e8       	ldi	r20, 0x80	; 128
    409e:	5f e3       	ldi	r21, 0x3F	; 63
    40a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40a4:	88 23       	and	r24, r24
    40a6:	44 f4       	brge	.+16     	; 0x40b8 <wifi_connect+0xeee>
		__ticks = 1;
    40a8:	fe 01       	movw	r30, r28
    40aa:	e7 5a       	subi	r30, 0xA7	; 167
    40ac:	ff 4f       	sbci	r31, 0xFF	; 255
    40ae:	81 e0       	ldi	r24, 0x01	; 1
    40b0:	90 e0       	ldi	r25, 0x00	; 0
    40b2:	91 83       	std	Z+1, r25	; 0x01
    40b4:	80 83       	st	Z, r24
    40b6:	64 c0       	rjmp	.+200    	; 0x4180 <wifi_connect+0xfb6>
	else if (__tmp > 65535)
    40b8:	fe 01       	movw	r30, r28
    40ba:	e5 5a       	subi	r30, 0xA5	; 165
    40bc:	ff 4f       	sbci	r31, 0xFF	; 255
    40be:	60 81       	ld	r22, Z
    40c0:	71 81       	ldd	r23, Z+1	; 0x01
    40c2:	82 81       	ldd	r24, Z+2	; 0x02
    40c4:	93 81       	ldd	r25, Z+3	; 0x03
    40c6:	20 e0       	ldi	r18, 0x00	; 0
    40c8:	3f ef       	ldi	r19, 0xFF	; 255
    40ca:	4f e7       	ldi	r20, 0x7F	; 127
    40cc:	57 e4       	ldi	r21, 0x47	; 71
    40ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40d2:	18 16       	cp	r1, r24
    40d4:	0c f0       	brlt	.+2      	; 0x40d8 <wifi_connect+0xf0e>
    40d6:	43 c0       	rjmp	.+134    	; 0x415e <wifi_connect+0xf94>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40d8:	fe 01       	movw	r30, r28
    40da:	e1 5a       	subi	r30, 0xA1	; 161
    40dc:	ff 4f       	sbci	r31, 0xFF	; 255
    40de:	60 81       	ld	r22, Z
    40e0:	71 81       	ldd	r23, Z+1	; 0x01
    40e2:	82 81       	ldd	r24, Z+2	; 0x02
    40e4:	93 81       	ldd	r25, Z+3	; 0x03
    40e6:	20 e0       	ldi	r18, 0x00	; 0
    40e8:	30 e0       	ldi	r19, 0x00	; 0
    40ea:	40 e2       	ldi	r20, 0x20	; 32
    40ec:	51 e4       	ldi	r21, 0x41	; 65
    40ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40f2:	dc 01       	movw	r26, r24
    40f4:	cb 01       	movw	r24, r22
    40f6:	8e 01       	movw	r16, r28
    40f8:	07 5a       	subi	r16, 0xA7	; 167
    40fa:	1f 4f       	sbci	r17, 0xFF	; 255
    40fc:	bc 01       	movw	r22, r24
    40fe:	cd 01       	movw	r24, r26
    4100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4104:	dc 01       	movw	r26, r24
    4106:	cb 01       	movw	r24, r22
    4108:	f8 01       	movw	r30, r16
    410a:	91 83       	std	Z+1, r25	; 0x01
    410c:	80 83       	st	Z, r24
    410e:	1f c0       	rjmp	.+62     	; 0x414e <wifi_connect+0xf84>
    4110:	fe 01       	movw	r30, r28
    4112:	e9 5a       	subi	r30, 0xA9	; 169
    4114:	ff 4f       	sbci	r31, 0xFF	; 255
    4116:	80 e9       	ldi	r24, 0x90	; 144
    4118:	91 e0       	ldi	r25, 0x01	; 1
    411a:	91 83       	std	Z+1, r25	; 0x01
    411c:	80 83       	st	Z, r24
    411e:	fe 01       	movw	r30, r28
    4120:	e9 5a       	subi	r30, 0xA9	; 169
    4122:	ff 4f       	sbci	r31, 0xFF	; 255
    4124:	80 81       	ld	r24, Z
    4126:	91 81       	ldd	r25, Z+1	; 0x01
    4128:	01 97       	sbiw	r24, 0x01	; 1
    412a:	f1 f7       	brne	.-4      	; 0x4128 <wifi_connect+0xf5e>
    412c:	fe 01       	movw	r30, r28
    412e:	e9 5a       	subi	r30, 0xA9	; 169
    4130:	ff 4f       	sbci	r31, 0xFF	; 255
    4132:	91 83       	std	Z+1, r25	; 0x01
    4134:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4136:	de 01       	movw	r26, r28
    4138:	a7 5a       	subi	r26, 0xA7	; 167
    413a:	bf 4f       	sbci	r27, 0xFF	; 255
    413c:	fe 01       	movw	r30, r28
    413e:	e7 5a       	subi	r30, 0xA7	; 167
    4140:	ff 4f       	sbci	r31, 0xFF	; 255
    4142:	80 81       	ld	r24, Z
    4144:	91 81       	ldd	r25, Z+1	; 0x01
    4146:	01 97       	sbiw	r24, 0x01	; 1
    4148:	11 96       	adiw	r26, 0x01	; 1
    414a:	9c 93       	st	X, r25
    414c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    414e:	fe 01       	movw	r30, r28
    4150:	e7 5a       	subi	r30, 0xA7	; 167
    4152:	ff 4f       	sbci	r31, 0xFF	; 255
    4154:	80 81       	ld	r24, Z
    4156:	91 81       	ldd	r25, Z+1	; 0x01
    4158:	00 97       	sbiw	r24, 0x00	; 0
    415a:	d1 f6       	brne	.-76     	; 0x4110 <wifi_connect+0xf46>
    415c:	27 c0       	rjmp	.+78     	; 0x41ac <wifi_connect+0xfe2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    415e:	8e 01       	movw	r16, r28
    4160:	07 5a       	subi	r16, 0xA7	; 167
    4162:	1f 4f       	sbci	r17, 0xFF	; 255
    4164:	fe 01       	movw	r30, r28
    4166:	e5 5a       	subi	r30, 0xA5	; 165
    4168:	ff 4f       	sbci	r31, 0xFF	; 255
    416a:	60 81       	ld	r22, Z
    416c:	71 81       	ldd	r23, Z+1	; 0x01
    416e:	82 81       	ldd	r24, Z+2	; 0x02
    4170:	93 81       	ldd	r25, Z+3	; 0x03
    4172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4176:	dc 01       	movw	r26, r24
    4178:	cb 01       	movw	r24, r22
    417a:	f8 01       	movw	r30, r16
    417c:	91 83       	std	Z+1, r25	; 0x01
    417e:	80 83       	st	Z, r24
    4180:	de 01       	movw	r26, r28
    4182:	ab 5a       	subi	r26, 0xAB	; 171
    4184:	bf 4f       	sbci	r27, 0xFF	; 255
    4186:	fe 01       	movw	r30, r28
    4188:	e7 5a       	subi	r30, 0xA7	; 167
    418a:	ff 4f       	sbci	r31, 0xFF	; 255
    418c:	80 81       	ld	r24, Z
    418e:	91 81       	ldd	r25, Z+1	; 0x01
    4190:	8d 93       	st	X+, r24
    4192:	9c 93       	st	X, r25
    4194:	fe 01       	movw	r30, r28
    4196:	eb 5a       	subi	r30, 0xAB	; 171
    4198:	ff 4f       	sbci	r31, 0xFF	; 255
    419a:	80 81       	ld	r24, Z
    419c:	91 81       	ldd	r25, Z+1	; 0x01
    419e:	01 97       	sbiw	r24, 0x01	; 1
    41a0:	f1 f7       	brne	.-4      	; 0x419e <wifi_connect+0xfd4>
    41a2:	fe 01       	movw	r30, r28
    41a4:	eb 5a       	subi	r30, 0xAB	; 171
    41a6:	ff 4f       	sbci	r31, 0xFF	; 255
    41a8:	91 83       	std	Z+1, r25	; 0x01
    41aa:	80 83       	st	Z, r24
	_delay_ms(2000);
	H_LCD_void_Clear_Display();
    41ac:	0e 94 be 2b 	call	0x577c	; 0x577c <H_LCD_void_Clear_Display>
    41b0:	fe 01       	movw	r30, r28
    41b2:	ef 5a       	subi	r30, 0xAF	; 175
    41b4:	ff 4f       	sbci	r31, 0xFF	; 255
    41b6:	80 e0       	ldi	r24, 0x00	; 0
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	a8 e4       	ldi	r26, 0x48	; 72
    41bc:	b3 e4       	ldi	r27, 0x43	; 67
    41be:	80 83       	st	Z, r24
    41c0:	91 83       	std	Z+1, r25	; 0x01
    41c2:	a2 83       	std	Z+2, r26	; 0x02
    41c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41c6:	8e 01       	movw	r16, r28
    41c8:	03 5b       	subi	r16, 0xB3	; 179
    41ca:	1f 4f       	sbci	r17, 0xFF	; 255
    41cc:	fe 01       	movw	r30, r28
    41ce:	ef 5a       	subi	r30, 0xAF	; 175
    41d0:	ff 4f       	sbci	r31, 0xFF	; 255
    41d2:	60 81       	ld	r22, Z
    41d4:	71 81       	ldd	r23, Z+1	; 0x01
    41d6:	82 81       	ldd	r24, Z+2	; 0x02
    41d8:	93 81       	ldd	r25, Z+3	; 0x03
    41da:	20 e0       	ldi	r18, 0x00	; 0
    41dc:	30 e0       	ldi	r19, 0x00	; 0
    41de:	4a e7       	ldi	r20, 0x7A	; 122
    41e0:	55 e4       	ldi	r21, 0x45	; 69
    41e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41e6:	dc 01       	movw	r26, r24
    41e8:	cb 01       	movw	r24, r22
    41ea:	f8 01       	movw	r30, r16
    41ec:	80 83       	st	Z, r24
    41ee:	91 83       	std	Z+1, r25	; 0x01
    41f0:	a2 83       	std	Z+2, r26	; 0x02
    41f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    41f4:	fe 01       	movw	r30, r28
    41f6:	e3 5b       	subi	r30, 0xB3	; 179
    41f8:	ff 4f       	sbci	r31, 0xFF	; 255
    41fa:	60 81       	ld	r22, Z
    41fc:	71 81       	ldd	r23, Z+1	; 0x01
    41fe:	82 81       	ldd	r24, Z+2	; 0x02
    4200:	93 81       	ldd	r25, Z+3	; 0x03
    4202:	20 e0       	ldi	r18, 0x00	; 0
    4204:	30 e0       	ldi	r19, 0x00	; 0
    4206:	40 e8       	ldi	r20, 0x80	; 128
    4208:	5f e3       	ldi	r21, 0x3F	; 63
    420a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    420e:	88 23       	and	r24, r24
    4210:	44 f4       	brge	.+16     	; 0x4222 <wifi_connect+0x1058>
		__ticks = 1;
    4212:	fe 01       	movw	r30, r28
    4214:	e5 5b       	subi	r30, 0xB5	; 181
    4216:	ff 4f       	sbci	r31, 0xFF	; 255
    4218:	81 e0       	ldi	r24, 0x01	; 1
    421a:	90 e0       	ldi	r25, 0x00	; 0
    421c:	91 83       	std	Z+1, r25	; 0x01
    421e:	80 83       	st	Z, r24
    4220:	64 c0       	rjmp	.+200    	; 0x42ea <wifi_connect+0x1120>
	else if (__tmp > 65535)
    4222:	fe 01       	movw	r30, r28
    4224:	e3 5b       	subi	r30, 0xB3	; 179
    4226:	ff 4f       	sbci	r31, 0xFF	; 255
    4228:	60 81       	ld	r22, Z
    422a:	71 81       	ldd	r23, Z+1	; 0x01
    422c:	82 81       	ldd	r24, Z+2	; 0x02
    422e:	93 81       	ldd	r25, Z+3	; 0x03
    4230:	20 e0       	ldi	r18, 0x00	; 0
    4232:	3f ef       	ldi	r19, 0xFF	; 255
    4234:	4f e7       	ldi	r20, 0x7F	; 127
    4236:	57 e4       	ldi	r21, 0x47	; 71
    4238:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    423c:	18 16       	cp	r1, r24
    423e:	0c f0       	brlt	.+2      	; 0x4242 <wifi_connect+0x1078>
    4240:	43 c0       	rjmp	.+134    	; 0x42c8 <wifi_connect+0x10fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4242:	fe 01       	movw	r30, r28
    4244:	ef 5a       	subi	r30, 0xAF	; 175
    4246:	ff 4f       	sbci	r31, 0xFF	; 255
    4248:	60 81       	ld	r22, Z
    424a:	71 81       	ldd	r23, Z+1	; 0x01
    424c:	82 81       	ldd	r24, Z+2	; 0x02
    424e:	93 81       	ldd	r25, Z+3	; 0x03
    4250:	20 e0       	ldi	r18, 0x00	; 0
    4252:	30 e0       	ldi	r19, 0x00	; 0
    4254:	40 e2       	ldi	r20, 0x20	; 32
    4256:	51 e4       	ldi	r21, 0x41	; 65
    4258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    425c:	dc 01       	movw	r26, r24
    425e:	cb 01       	movw	r24, r22
    4260:	8e 01       	movw	r16, r28
    4262:	05 5b       	subi	r16, 0xB5	; 181
    4264:	1f 4f       	sbci	r17, 0xFF	; 255
    4266:	bc 01       	movw	r22, r24
    4268:	cd 01       	movw	r24, r26
    426a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    426e:	dc 01       	movw	r26, r24
    4270:	cb 01       	movw	r24, r22
    4272:	f8 01       	movw	r30, r16
    4274:	91 83       	std	Z+1, r25	; 0x01
    4276:	80 83       	st	Z, r24
    4278:	1f c0       	rjmp	.+62     	; 0x42b8 <wifi_connect+0x10ee>
    427a:	fe 01       	movw	r30, r28
    427c:	e7 5b       	subi	r30, 0xB7	; 183
    427e:	ff 4f       	sbci	r31, 0xFF	; 255
    4280:	80 e9       	ldi	r24, 0x90	; 144
    4282:	91 e0       	ldi	r25, 0x01	; 1
    4284:	91 83       	std	Z+1, r25	; 0x01
    4286:	80 83       	st	Z, r24
    4288:	fe 01       	movw	r30, r28
    428a:	e7 5b       	subi	r30, 0xB7	; 183
    428c:	ff 4f       	sbci	r31, 0xFF	; 255
    428e:	80 81       	ld	r24, Z
    4290:	91 81       	ldd	r25, Z+1	; 0x01
    4292:	01 97       	sbiw	r24, 0x01	; 1
    4294:	f1 f7       	brne	.-4      	; 0x4292 <wifi_connect+0x10c8>
    4296:	fe 01       	movw	r30, r28
    4298:	e7 5b       	subi	r30, 0xB7	; 183
    429a:	ff 4f       	sbci	r31, 0xFF	; 255
    429c:	91 83       	std	Z+1, r25	; 0x01
    429e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42a0:	de 01       	movw	r26, r28
    42a2:	a5 5b       	subi	r26, 0xB5	; 181
    42a4:	bf 4f       	sbci	r27, 0xFF	; 255
    42a6:	fe 01       	movw	r30, r28
    42a8:	e5 5b       	subi	r30, 0xB5	; 181
    42aa:	ff 4f       	sbci	r31, 0xFF	; 255
    42ac:	80 81       	ld	r24, Z
    42ae:	91 81       	ldd	r25, Z+1	; 0x01
    42b0:	01 97       	sbiw	r24, 0x01	; 1
    42b2:	11 96       	adiw	r26, 0x01	; 1
    42b4:	9c 93       	st	X, r25
    42b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42b8:	fe 01       	movw	r30, r28
    42ba:	e5 5b       	subi	r30, 0xB5	; 181
    42bc:	ff 4f       	sbci	r31, 0xFF	; 255
    42be:	80 81       	ld	r24, Z
    42c0:	91 81       	ldd	r25, Z+1	; 0x01
    42c2:	00 97       	sbiw	r24, 0x00	; 0
    42c4:	d1 f6       	brne	.-76     	; 0x427a <wifi_connect+0x10b0>
    42c6:	27 c0       	rjmp	.+78     	; 0x4316 <wifi_connect+0x114c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42c8:	8e 01       	movw	r16, r28
    42ca:	05 5b       	subi	r16, 0xB5	; 181
    42cc:	1f 4f       	sbci	r17, 0xFF	; 255
    42ce:	fe 01       	movw	r30, r28
    42d0:	e3 5b       	subi	r30, 0xB3	; 179
    42d2:	ff 4f       	sbci	r31, 0xFF	; 255
    42d4:	60 81       	ld	r22, Z
    42d6:	71 81       	ldd	r23, Z+1	; 0x01
    42d8:	82 81       	ldd	r24, Z+2	; 0x02
    42da:	93 81       	ldd	r25, Z+3	; 0x03
    42dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42e0:	dc 01       	movw	r26, r24
    42e2:	cb 01       	movw	r24, r22
    42e4:	f8 01       	movw	r30, r16
    42e6:	91 83       	std	Z+1, r25	; 0x01
    42e8:	80 83       	st	Z, r24
    42ea:	de 01       	movw	r26, r28
    42ec:	a9 5b       	subi	r26, 0xB9	; 185
    42ee:	bf 4f       	sbci	r27, 0xFF	; 255
    42f0:	fe 01       	movw	r30, r28
    42f2:	e5 5b       	subi	r30, 0xB5	; 181
    42f4:	ff 4f       	sbci	r31, 0xFF	; 255
    42f6:	80 81       	ld	r24, Z
    42f8:	91 81       	ldd	r25, Z+1	; 0x01
    42fa:	8d 93       	st	X+, r24
    42fc:	9c 93       	st	X, r25
    42fe:	fe 01       	movw	r30, r28
    4300:	e9 5b       	subi	r30, 0xB9	; 185
    4302:	ff 4f       	sbci	r31, 0xFF	; 255
    4304:	80 81       	ld	r24, Z
    4306:	91 81       	ldd	r25, Z+1	; 0x01
    4308:	01 97       	sbiw	r24, 0x01	; 1
    430a:	f1 f7       	brne	.-4      	; 0x4308 <wifi_connect+0x113e>
    430c:	fe 01       	movw	r30, r28
    430e:	e9 5b       	subi	r30, 0xB9	; 185
    4310:	ff 4f       	sbci	r31, 0xFF	; 255
    4312:	91 83       	std	Z+1, r25	; 0x01
    4314:	80 83       	st	Z, r24
	_delay_ms(200);
	Wifi_Buffer_Reset();
    4316:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <Wifi_Buffer_Reset>
	H_LCD_void_sendData('4');
    431a:	84 e3       	ldi	r24, 0x34	; 52
    431c:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <H_LCD_void_sendData>
    4320:	fe 01       	movw	r30, r28
    4322:	ed 5b       	subi	r30, 0xBD	; 189
    4324:	ff 4f       	sbci	r31, 0xFF	; 255
    4326:	80 e0       	ldi	r24, 0x00	; 0
    4328:	90 e0       	ldi	r25, 0x00	; 0
    432a:	aa e7       	ldi	r26, 0x7A	; 122
    432c:	b4 e4       	ldi	r27, 0x44	; 68
    432e:	80 83       	st	Z, r24
    4330:	91 83       	std	Z+1, r25	; 0x01
    4332:	a2 83       	std	Z+2, r26	; 0x02
    4334:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4336:	8e 01       	movw	r16, r28
    4338:	01 5c       	subi	r16, 0xC1	; 193
    433a:	1f 4f       	sbci	r17, 0xFF	; 255
    433c:	fe 01       	movw	r30, r28
    433e:	ed 5b       	subi	r30, 0xBD	; 189
    4340:	ff 4f       	sbci	r31, 0xFF	; 255
    4342:	60 81       	ld	r22, Z
    4344:	71 81       	ldd	r23, Z+1	; 0x01
    4346:	82 81       	ldd	r24, Z+2	; 0x02
    4348:	93 81       	ldd	r25, Z+3	; 0x03
    434a:	20 e0       	ldi	r18, 0x00	; 0
    434c:	30 e0       	ldi	r19, 0x00	; 0
    434e:	4a e7       	ldi	r20, 0x7A	; 122
    4350:	55 e4       	ldi	r21, 0x45	; 69
    4352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4356:	dc 01       	movw	r26, r24
    4358:	cb 01       	movw	r24, r22
    435a:	f8 01       	movw	r30, r16
    435c:	80 83       	st	Z, r24
    435e:	91 83       	std	Z+1, r25	; 0x01
    4360:	a2 83       	std	Z+2, r26	; 0x02
    4362:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4364:	fe 01       	movw	r30, r28
    4366:	ff 96       	adiw	r30, 0x3f	; 63
    4368:	60 81       	ld	r22, Z
    436a:	71 81       	ldd	r23, Z+1	; 0x01
    436c:	82 81       	ldd	r24, Z+2	; 0x02
    436e:	93 81       	ldd	r25, Z+3	; 0x03
    4370:	20 e0       	ldi	r18, 0x00	; 0
    4372:	30 e0       	ldi	r19, 0x00	; 0
    4374:	40 e8       	ldi	r20, 0x80	; 128
    4376:	5f e3       	ldi	r21, 0x3F	; 63
    4378:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    437c:	88 23       	and	r24, r24
    437e:	2c f4       	brge	.+10     	; 0x438a <wifi_connect+0x11c0>
		__ticks = 1;
    4380:	81 e0       	ldi	r24, 0x01	; 1
    4382:	90 e0       	ldi	r25, 0x00	; 0
    4384:	9e af       	std	Y+62, r25	; 0x3e
    4386:	8d af       	std	Y+61, r24	; 0x3d
    4388:	46 c0       	rjmp	.+140    	; 0x4416 <wifi_connect+0x124c>
	else if (__tmp > 65535)
    438a:	fe 01       	movw	r30, r28
    438c:	ff 96       	adiw	r30, 0x3f	; 63
    438e:	60 81       	ld	r22, Z
    4390:	71 81       	ldd	r23, Z+1	; 0x01
    4392:	82 81       	ldd	r24, Z+2	; 0x02
    4394:	93 81       	ldd	r25, Z+3	; 0x03
    4396:	20 e0       	ldi	r18, 0x00	; 0
    4398:	3f ef       	ldi	r19, 0xFF	; 255
    439a:	4f e7       	ldi	r20, 0x7F	; 127
    439c:	57 e4       	ldi	r21, 0x47	; 71
    439e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43a2:	18 16       	cp	r1, r24
    43a4:	64 f5       	brge	.+88     	; 0x43fe <wifi_connect+0x1234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43a6:	fe 01       	movw	r30, r28
    43a8:	ed 5b       	subi	r30, 0xBD	; 189
    43aa:	ff 4f       	sbci	r31, 0xFF	; 255
    43ac:	60 81       	ld	r22, Z
    43ae:	71 81       	ldd	r23, Z+1	; 0x01
    43b0:	82 81       	ldd	r24, Z+2	; 0x02
    43b2:	93 81       	ldd	r25, Z+3	; 0x03
    43b4:	20 e0       	ldi	r18, 0x00	; 0
    43b6:	30 e0       	ldi	r19, 0x00	; 0
    43b8:	40 e2       	ldi	r20, 0x20	; 32
    43ba:	51 e4       	ldi	r21, 0x41	; 65
    43bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43c0:	dc 01       	movw	r26, r24
    43c2:	cb 01       	movw	r24, r22
    43c4:	bc 01       	movw	r22, r24
    43c6:	cd 01       	movw	r24, r26
    43c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43cc:	dc 01       	movw	r26, r24
    43ce:	cb 01       	movw	r24, r22
    43d0:	9e af       	std	Y+62, r25	; 0x3e
    43d2:	8d af       	std	Y+61, r24	; 0x3d
    43d4:	0f c0       	rjmp	.+30     	; 0x43f4 <wifi_connect+0x122a>
    43d6:	80 e9       	ldi	r24, 0x90	; 144
    43d8:	91 e0       	ldi	r25, 0x01	; 1
    43da:	9c af       	std	Y+60, r25	; 0x3c
    43dc:	8b af       	std	Y+59, r24	; 0x3b
    43de:	8b ad       	ldd	r24, Y+59	; 0x3b
    43e0:	9c ad       	ldd	r25, Y+60	; 0x3c
    43e2:	01 97       	sbiw	r24, 0x01	; 1
    43e4:	f1 f7       	brne	.-4      	; 0x43e2 <wifi_connect+0x1218>
    43e6:	9c af       	std	Y+60, r25	; 0x3c
    43e8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    43ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    43ee:	01 97       	sbiw	r24, 0x01	; 1
    43f0:	9e af       	std	Y+62, r25	; 0x3e
    43f2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    43f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    43f8:	00 97       	sbiw	r24, 0x00	; 0
    43fa:	69 f7       	brne	.-38     	; 0x43d6 <wifi_connect+0x120c>
    43fc:	16 c0       	rjmp	.+44     	; 0x442a <wifi_connect+0x1260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43fe:	fe 01       	movw	r30, r28
    4400:	ff 96       	adiw	r30, 0x3f	; 63
    4402:	60 81       	ld	r22, Z
    4404:	71 81       	ldd	r23, Z+1	; 0x01
    4406:	82 81       	ldd	r24, Z+2	; 0x02
    4408:	93 81       	ldd	r25, Z+3	; 0x03
    440a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    440e:	dc 01       	movw	r26, r24
    4410:	cb 01       	movw	r24, r22
    4412:	9e af       	std	Y+62, r25	; 0x3e
    4414:	8d af       	std	Y+61, r24	; 0x3d
    4416:	8d ad       	ldd	r24, Y+61	; 0x3d
    4418:	9e ad       	ldd	r25, Y+62	; 0x3e
    441a:	9a af       	std	Y+58, r25	; 0x3a
    441c:	89 af       	std	Y+57, r24	; 0x39
    441e:	89 ad       	ldd	r24, Y+57	; 0x39
    4420:	9a ad       	ldd	r25, Y+58	; 0x3a
    4422:	01 97       	sbiw	r24, 0x01	; 1
    4424:	f1 f7       	brne	.-4      	; 0x4422 <wifi_connect+0x1258>
    4426:	9a af       	std	Y+58, r25	; 0x3a
    4428:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1000);
	
	/* connect to TCP Server  */
	UART_sendString("AT+CIPSTART=\"TCP\",\"10.204.26.103\",9999\r\n");
    442a:	84 eb       	ldi	r24, 0xB4	; 180
    442c:	90 e0       	ldi	r25, 0x00	; 0
    442e:	0e 94 c4 07 	call	0xf88	; 0xf88 <UART_sendString>
    4432:	80 e0       	ldi	r24, 0x00	; 0
    4434:	90 e8       	ldi	r25, 0x80	; 128
    4436:	ab e3       	ldi	r26, 0x3B	; 59
    4438:	b5 e4       	ldi	r27, 0x45	; 69
    443a:	8d ab       	std	Y+53, r24	; 0x35
    443c:	9e ab       	std	Y+54, r25	; 0x36
    443e:	af ab       	std	Y+55, r26	; 0x37
    4440:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4442:	6d a9       	ldd	r22, Y+53	; 0x35
    4444:	7e a9       	ldd	r23, Y+54	; 0x36
    4446:	8f a9       	ldd	r24, Y+55	; 0x37
    4448:	98 ad       	ldd	r25, Y+56	; 0x38
    444a:	20 e0       	ldi	r18, 0x00	; 0
    444c:	30 e0       	ldi	r19, 0x00	; 0
    444e:	4a e7       	ldi	r20, 0x7A	; 122
    4450:	55 e4       	ldi	r21, 0x45	; 69
    4452:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4456:	dc 01       	movw	r26, r24
    4458:	cb 01       	movw	r24, r22
    445a:	89 ab       	std	Y+49, r24	; 0x31
    445c:	9a ab       	std	Y+50, r25	; 0x32
    445e:	ab ab       	std	Y+51, r26	; 0x33
    4460:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4462:	69 a9       	ldd	r22, Y+49	; 0x31
    4464:	7a a9       	ldd	r23, Y+50	; 0x32
    4466:	8b a9       	ldd	r24, Y+51	; 0x33
    4468:	9c a9       	ldd	r25, Y+52	; 0x34
    446a:	20 e0       	ldi	r18, 0x00	; 0
    446c:	30 e0       	ldi	r19, 0x00	; 0
    446e:	40 e8       	ldi	r20, 0x80	; 128
    4470:	5f e3       	ldi	r21, 0x3F	; 63
    4472:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4476:	88 23       	and	r24, r24
    4478:	2c f4       	brge	.+10     	; 0x4484 <wifi_connect+0x12ba>
		__ticks = 1;
    447a:	81 e0       	ldi	r24, 0x01	; 1
    447c:	90 e0       	ldi	r25, 0x00	; 0
    447e:	98 ab       	std	Y+48, r25	; 0x30
    4480:	8f a7       	std	Y+47, r24	; 0x2f
    4482:	3f c0       	rjmp	.+126    	; 0x4502 <wifi_connect+0x1338>
	else if (__tmp > 65535)
    4484:	69 a9       	ldd	r22, Y+49	; 0x31
    4486:	7a a9       	ldd	r23, Y+50	; 0x32
    4488:	8b a9       	ldd	r24, Y+51	; 0x33
    448a:	9c a9       	ldd	r25, Y+52	; 0x34
    448c:	20 e0       	ldi	r18, 0x00	; 0
    448e:	3f ef       	ldi	r19, 0xFF	; 255
    4490:	4f e7       	ldi	r20, 0x7F	; 127
    4492:	57 e4       	ldi	r21, 0x47	; 71
    4494:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4498:	18 16       	cp	r1, r24
    449a:	4c f5       	brge	.+82     	; 0x44ee <wifi_connect+0x1324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    449c:	6d a9       	ldd	r22, Y+53	; 0x35
    449e:	7e a9       	ldd	r23, Y+54	; 0x36
    44a0:	8f a9       	ldd	r24, Y+55	; 0x37
    44a2:	98 ad       	ldd	r25, Y+56	; 0x38
    44a4:	20 e0       	ldi	r18, 0x00	; 0
    44a6:	30 e0       	ldi	r19, 0x00	; 0
    44a8:	40 e2       	ldi	r20, 0x20	; 32
    44aa:	51 e4       	ldi	r21, 0x41	; 65
    44ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44b0:	dc 01       	movw	r26, r24
    44b2:	cb 01       	movw	r24, r22
    44b4:	bc 01       	movw	r22, r24
    44b6:	cd 01       	movw	r24, r26
    44b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44bc:	dc 01       	movw	r26, r24
    44be:	cb 01       	movw	r24, r22
    44c0:	98 ab       	std	Y+48, r25	; 0x30
    44c2:	8f a7       	std	Y+47, r24	; 0x2f
    44c4:	0f c0       	rjmp	.+30     	; 0x44e4 <wifi_connect+0x131a>
    44c6:	80 e9       	ldi	r24, 0x90	; 144
    44c8:	91 e0       	ldi	r25, 0x01	; 1
    44ca:	9e a7       	std	Y+46, r25	; 0x2e
    44cc:	8d a7       	std	Y+45, r24	; 0x2d
    44ce:	8d a5       	ldd	r24, Y+45	; 0x2d
    44d0:	9e a5       	ldd	r25, Y+46	; 0x2e
    44d2:	01 97       	sbiw	r24, 0x01	; 1
    44d4:	f1 f7       	brne	.-4      	; 0x44d2 <wifi_connect+0x1308>
    44d6:	9e a7       	std	Y+46, r25	; 0x2e
    44d8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44da:	8f a5       	ldd	r24, Y+47	; 0x2f
    44dc:	98 a9       	ldd	r25, Y+48	; 0x30
    44de:	01 97       	sbiw	r24, 0x01	; 1
    44e0:	98 ab       	std	Y+48, r25	; 0x30
    44e2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    44e6:	98 a9       	ldd	r25, Y+48	; 0x30
    44e8:	00 97       	sbiw	r24, 0x00	; 0
    44ea:	69 f7       	brne	.-38     	; 0x44c6 <wifi_connect+0x12fc>
    44ec:	14 c0       	rjmp	.+40     	; 0x4516 <wifi_connect+0x134c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44ee:	69 a9       	ldd	r22, Y+49	; 0x31
    44f0:	7a a9       	ldd	r23, Y+50	; 0x32
    44f2:	8b a9       	ldd	r24, Y+51	; 0x33
    44f4:	9c a9       	ldd	r25, Y+52	; 0x34
    44f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44fa:	dc 01       	movw	r26, r24
    44fc:	cb 01       	movw	r24, r22
    44fe:	98 ab       	std	Y+48, r25	; 0x30
    4500:	8f a7       	std	Y+47, r24	; 0x2f
    4502:	8f a5       	ldd	r24, Y+47	; 0x2f
    4504:	98 a9       	ldd	r25, Y+48	; 0x30
    4506:	9c a7       	std	Y+44, r25	; 0x2c
    4508:	8b a7       	std	Y+43, r24	; 0x2b
    450a:	8b a5       	ldd	r24, Y+43	; 0x2b
    450c:	9c a5       	ldd	r25, Y+44	; 0x2c
    450e:	01 97       	sbiw	r24, 0x01	; 1
    4510:	f1 f7       	brne	.-4      	; 0x450e <wifi_connect+0x1344>
    4512:	9c a7       	std	Y+44, r25	; 0x2c
    4514:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(3000);
	Check_Wifi_Respones("OK", "AT+CIPSERVER_ERROR");
    4516:	87 e6       	ldi	r24, 0x67	; 103
    4518:	90 e0       	ldi	r25, 0x00	; 0
    451a:	2d ed       	ldi	r18, 0xDD	; 221
    451c:	30 e0       	ldi	r19, 0x00	; 0
    451e:	b9 01       	movw	r22, r18
    4520:	0e 94 ff 23 	call	0x47fe	; 0x47fe <Check_Wifi_Respones>
    4524:	80 e0       	ldi	r24, 0x00	; 0
    4526:	90 e8       	ldi	r25, 0x80	; 128
    4528:	ab e3       	ldi	r26, 0x3B	; 59
    452a:	b5 e4       	ldi	r27, 0x45	; 69
    452c:	8f a3       	std	Y+39, r24	; 0x27
    452e:	98 a7       	std	Y+40, r25	; 0x28
    4530:	a9 a7       	std	Y+41, r26	; 0x29
    4532:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4534:	6f a1       	ldd	r22, Y+39	; 0x27
    4536:	78 a5       	ldd	r23, Y+40	; 0x28
    4538:	89 a5       	ldd	r24, Y+41	; 0x29
    453a:	9a a5       	ldd	r25, Y+42	; 0x2a
    453c:	20 e0       	ldi	r18, 0x00	; 0
    453e:	30 e0       	ldi	r19, 0x00	; 0
    4540:	4a e7       	ldi	r20, 0x7A	; 122
    4542:	55 e4       	ldi	r21, 0x45	; 69
    4544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4548:	dc 01       	movw	r26, r24
    454a:	cb 01       	movw	r24, r22
    454c:	8b a3       	std	Y+35, r24	; 0x23
    454e:	9c a3       	std	Y+36, r25	; 0x24
    4550:	ad a3       	std	Y+37, r26	; 0x25
    4552:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4554:	6b a1       	ldd	r22, Y+35	; 0x23
    4556:	7c a1       	ldd	r23, Y+36	; 0x24
    4558:	8d a1       	ldd	r24, Y+37	; 0x25
    455a:	9e a1       	ldd	r25, Y+38	; 0x26
    455c:	20 e0       	ldi	r18, 0x00	; 0
    455e:	30 e0       	ldi	r19, 0x00	; 0
    4560:	40 e8       	ldi	r20, 0x80	; 128
    4562:	5f e3       	ldi	r21, 0x3F	; 63
    4564:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4568:	88 23       	and	r24, r24
    456a:	2c f4       	brge	.+10     	; 0x4576 <wifi_connect+0x13ac>
		__ticks = 1;
    456c:	81 e0       	ldi	r24, 0x01	; 1
    456e:	90 e0       	ldi	r25, 0x00	; 0
    4570:	9a a3       	std	Y+34, r25	; 0x22
    4572:	89 a3       	std	Y+33, r24	; 0x21
    4574:	3f c0       	rjmp	.+126    	; 0x45f4 <wifi_connect+0x142a>
	else if (__tmp > 65535)
    4576:	6b a1       	ldd	r22, Y+35	; 0x23
    4578:	7c a1       	ldd	r23, Y+36	; 0x24
    457a:	8d a1       	ldd	r24, Y+37	; 0x25
    457c:	9e a1       	ldd	r25, Y+38	; 0x26
    457e:	20 e0       	ldi	r18, 0x00	; 0
    4580:	3f ef       	ldi	r19, 0xFF	; 255
    4582:	4f e7       	ldi	r20, 0x7F	; 127
    4584:	57 e4       	ldi	r21, 0x47	; 71
    4586:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    458a:	18 16       	cp	r1, r24
    458c:	4c f5       	brge	.+82     	; 0x45e0 <wifi_connect+0x1416>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    458e:	6f a1       	ldd	r22, Y+39	; 0x27
    4590:	78 a5       	ldd	r23, Y+40	; 0x28
    4592:	89 a5       	ldd	r24, Y+41	; 0x29
    4594:	9a a5       	ldd	r25, Y+42	; 0x2a
    4596:	20 e0       	ldi	r18, 0x00	; 0
    4598:	30 e0       	ldi	r19, 0x00	; 0
    459a:	40 e2       	ldi	r20, 0x20	; 32
    459c:	51 e4       	ldi	r21, 0x41	; 65
    459e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45a2:	dc 01       	movw	r26, r24
    45a4:	cb 01       	movw	r24, r22
    45a6:	bc 01       	movw	r22, r24
    45a8:	cd 01       	movw	r24, r26
    45aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ae:	dc 01       	movw	r26, r24
    45b0:	cb 01       	movw	r24, r22
    45b2:	9a a3       	std	Y+34, r25	; 0x22
    45b4:	89 a3       	std	Y+33, r24	; 0x21
    45b6:	0f c0       	rjmp	.+30     	; 0x45d6 <wifi_connect+0x140c>
    45b8:	80 e9       	ldi	r24, 0x90	; 144
    45ba:	91 e0       	ldi	r25, 0x01	; 1
    45bc:	98 a3       	std	Y+32, r25	; 0x20
    45be:	8f 8f       	std	Y+31, r24	; 0x1f
    45c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    45c2:	98 a1       	ldd	r25, Y+32	; 0x20
    45c4:	01 97       	sbiw	r24, 0x01	; 1
    45c6:	f1 f7       	brne	.-4      	; 0x45c4 <wifi_connect+0x13fa>
    45c8:	98 a3       	std	Y+32, r25	; 0x20
    45ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45cc:	89 a1       	ldd	r24, Y+33	; 0x21
    45ce:	9a a1       	ldd	r25, Y+34	; 0x22
    45d0:	01 97       	sbiw	r24, 0x01	; 1
    45d2:	9a a3       	std	Y+34, r25	; 0x22
    45d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45d6:	89 a1       	ldd	r24, Y+33	; 0x21
    45d8:	9a a1       	ldd	r25, Y+34	; 0x22
    45da:	00 97       	sbiw	r24, 0x00	; 0
    45dc:	69 f7       	brne	.-38     	; 0x45b8 <wifi_connect+0x13ee>
    45de:	14 c0       	rjmp	.+40     	; 0x4608 <wifi_connect+0x143e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45e0:	6b a1       	ldd	r22, Y+35	; 0x23
    45e2:	7c a1       	ldd	r23, Y+36	; 0x24
    45e4:	8d a1       	ldd	r24, Y+37	; 0x25
    45e6:	9e a1       	ldd	r25, Y+38	; 0x26
    45e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ec:	dc 01       	movw	r26, r24
    45ee:	cb 01       	movw	r24, r22
    45f0:	9a a3       	std	Y+34, r25	; 0x22
    45f2:	89 a3       	std	Y+33, r24	; 0x21
    45f4:	89 a1       	ldd	r24, Y+33	; 0x21
    45f6:	9a a1       	ldd	r25, Y+34	; 0x22
    45f8:	9e 8f       	std	Y+30, r25	; 0x1e
    45fa:	8d 8f       	std	Y+29, r24	; 0x1d
    45fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    45fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4600:	01 97       	sbiw	r24, 0x01	; 1
    4602:	f1 f7       	brne	.-4      	; 0x4600 <wifi_connect+0x1436>
    4604:	9e 8f       	std	Y+30, r25	; 0x1e
    4606:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(3000);
	H_LCD_void_Clear_Display();
    4608:	0e 94 be 2b 	call	0x577c	; 0x577c <H_LCD_void_Clear_Display>
    460c:	80 e0       	ldi	r24, 0x00	; 0
    460e:	90 e0       	ldi	r25, 0x00	; 0
    4610:	a8 e4       	ldi	r26, 0x48	; 72
    4612:	b3 e4       	ldi	r27, 0x43	; 67
    4614:	89 8f       	std	Y+25, r24	; 0x19
    4616:	9a 8f       	std	Y+26, r25	; 0x1a
    4618:	ab 8f       	std	Y+27, r26	; 0x1b
    461a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    461c:	69 8d       	ldd	r22, Y+25	; 0x19
    461e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4620:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4622:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4624:	20 e0       	ldi	r18, 0x00	; 0
    4626:	30 e0       	ldi	r19, 0x00	; 0
    4628:	4a e7       	ldi	r20, 0x7A	; 122
    462a:	55 e4       	ldi	r21, 0x45	; 69
    462c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4630:	dc 01       	movw	r26, r24
    4632:	cb 01       	movw	r24, r22
    4634:	8d 8b       	std	Y+21, r24	; 0x15
    4636:	9e 8b       	std	Y+22, r25	; 0x16
    4638:	af 8b       	std	Y+23, r26	; 0x17
    463a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    463c:	6d 89       	ldd	r22, Y+21	; 0x15
    463e:	7e 89       	ldd	r23, Y+22	; 0x16
    4640:	8f 89       	ldd	r24, Y+23	; 0x17
    4642:	98 8d       	ldd	r25, Y+24	; 0x18
    4644:	20 e0       	ldi	r18, 0x00	; 0
    4646:	30 e0       	ldi	r19, 0x00	; 0
    4648:	40 e8       	ldi	r20, 0x80	; 128
    464a:	5f e3       	ldi	r21, 0x3F	; 63
    464c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4650:	88 23       	and	r24, r24
    4652:	2c f4       	brge	.+10     	; 0x465e <wifi_connect+0x1494>
		__ticks = 1;
    4654:	81 e0       	ldi	r24, 0x01	; 1
    4656:	90 e0       	ldi	r25, 0x00	; 0
    4658:	9c 8b       	std	Y+20, r25	; 0x14
    465a:	8b 8b       	std	Y+19, r24	; 0x13
    465c:	3f c0       	rjmp	.+126    	; 0x46dc <wifi_connect+0x1512>
	else if (__tmp > 65535)
    465e:	6d 89       	ldd	r22, Y+21	; 0x15
    4660:	7e 89       	ldd	r23, Y+22	; 0x16
    4662:	8f 89       	ldd	r24, Y+23	; 0x17
    4664:	98 8d       	ldd	r25, Y+24	; 0x18
    4666:	20 e0       	ldi	r18, 0x00	; 0
    4668:	3f ef       	ldi	r19, 0xFF	; 255
    466a:	4f e7       	ldi	r20, 0x7F	; 127
    466c:	57 e4       	ldi	r21, 0x47	; 71
    466e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4672:	18 16       	cp	r1, r24
    4674:	4c f5       	brge	.+82     	; 0x46c8 <wifi_connect+0x14fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4676:	69 8d       	ldd	r22, Y+25	; 0x19
    4678:	7a 8d       	ldd	r23, Y+26	; 0x1a
    467a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    467c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    467e:	20 e0       	ldi	r18, 0x00	; 0
    4680:	30 e0       	ldi	r19, 0x00	; 0
    4682:	40 e2       	ldi	r20, 0x20	; 32
    4684:	51 e4       	ldi	r21, 0x41	; 65
    4686:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    468a:	dc 01       	movw	r26, r24
    468c:	cb 01       	movw	r24, r22
    468e:	bc 01       	movw	r22, r24
    4690:	cd 01       	movw	r24, r26
    4692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4696:	dc 01       	movw	r26, r24
    4698:	cb 01       	movw	r24, r22
    469a:	9c 8b       	std	Y+20, r25	; 0x14
    469c:	8b 8b       	std	Y+19, r24	; 0x13
    469e:	0f c0       	rjmp	.+30     	; 0x46be <wifi_connect+0x14f4>
    46a0:	80 e9       	ldi	r24, 0x90	; 144
    46a2:	91 e0       	ldi	r25, 0x01	; 1
    46a4:	9a 8b       	std	Y+18, r25	; 0x12
    46a6:	89 8b       	std	Y+17, r24	; 0x11
    46a8:	89 89       	ldd	r24, Y+17	; 0x11
    46aa:	9a 89       	ldd	r25, Y+18	; 0x12
    46ac:	01 97       	sbiw	r24, 0x01	; 1
    46ae:	f1 f7       	brne	.-4      	; 0x46ac <wifi_connect+0x14e2>
    46b0:	9a 8b       	std	Y+18, r25	; 0x12
    46b2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46b4:	8b 89       	ldd	r24, Y+19	; 0x13
    46b6:	9c 89       	ldd	r25, Y+20	; 0x14
    46b8:	01 97       	sbiw	r24, 0x01	; 1
    46ba:	9c 8b       	std	Y+20, r25	; 0x14
    46bc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46be:	8b 89       	ldd	r24, Y+19	; 0x13
    46c0:	9c 89       	ldd	r25, Y+20	; 0x14
    46c2:	00 97       	sbiw	r24, 0x00	; 0
    46c4:	69 f7       	brne	.-38     	; 0x46a0 <wifi_connect+0x14d6>
    46c6:	14 c0       	rjmp	.+40     	; 0x46f0 <wifi_connect+0x1526>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46c8:	6d 89       	ldd	r22, Y+21	; 0x15
    46ca:	7e 89       	ldd	r23, Y+22	; 0x16
    46cc:	8f 89       	ldd	r24, Y+23	; 0x17
    46ce:	98 8d       	ldd	r25, Y+24	; 0x18
    46d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46d4:	dc 01       	movw	r26, r24
    46d6:	cb 01       	movw	r24, r22
    46d8:	9c 8b       	std	Y+20, r25	; 0x14
    46da:	8b 8b       	std	Y+19, r24	; 0x13
    46dc:	8b 89       	ldd	r24, Y+19	; 0x13
    46de:	9c 89       	ldd	r25, Y+20	; 0x14
    46e0:	98 8b       	std	Y+16, r25	; 0x10
    46e2:	8f 87       	std	Y+15, r24	; 0x0f
    46e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    46e6:	98 89       	ldd	r25, Y+16	; 0x10
    46e8:	01 97       	sbiw	r24, 0x01	; 1
    46ea:	f1 f7       	brne	.-4      	; 0x46e8 <wifi_connect+0x151e>
    46ec:	98 8b       	std	Y+16, r25	; 0x10
    46ee:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	Wifi_Buffer_Reset();
    46f0:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <Wifi_Buffer_Reset>
	H_LCD_void_sendData('5');
    46f4:	85 e3       	ldi	r24, 0x35	; 53
    46f6:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <H_LCD_void_sendData>
    46fa:	80 e0       	ldi	r24, 0x00	; 0
    46fc:	90 e0       	ldi	r25, 0x00	; 0
    46fe:	aa e7       	ldi	r26, 0x7A	; 122
    4700:	b4 e4       	ldi	r27, 0x44	; 68
    4702:	8b 87       	std	Y+11, r24	; 0x0b
    4704:	9c 87       	std	Y+12, r25	; 0x0c
    4706:	ad 87       	std	Y+13, r26	; 0x0d
    4708:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    470a:	6b 85       	ldd	r22, Y+11	; 0x0b
    470c:	7c 85       	ldd	r23, Y+12	; 0x0c
    470e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4710:	9e 85       	ldd	r25, Y+14	; 0x0e
    4712:	20 e0       	ldi	r18, 0x00	; 0
    4714:	30 e0       	ldi	r19, 0x00	; 0
    4716:	4a e7       	ldi	r20, 0x7A	; 122
    4718:	55 e4       	ldi	r21, 0x45	; 69
    471a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    471e:	dc 01       	movw	r26, r24
    4720:	cb 01       	movw	r24, r22
    4722:	8f 83       	std	Y+7, r24	; 0x07
    4724:	98 87       	std	Y+8, r25	; 0x08
    4726:	a9 87       	std	Y+9, r26	; 0x09
    4728:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    472a:	6f 81       	ldd	r22, Y+7	; 0x07
    472c:	78 85       	ldd	r23, Y+8	; 0x08
    472e:	89 85       	ldd	r24, Y+9	; 0x09
    4730:	9a 85       	ldd	r25, Y+10	; 0x0a
    4732:	20 e0       	ldi	r18, 0x00	; 0
    4734:	30 e0       	ldi	r19, 0x00	; 0
    4736:	40 e8       	ldi	r20, 0x80	; 128
    4738:	5f e3       	ldi	r21, 0x3F	; 63
    473a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    473e:	88 23       	and	r24, r24
    4740:	2c f4       	brge	.+10     	; 0x474c <wifi_connect+0x1582>
		__ticks = 1;
    4742:	81 e0       	ldi	r24, 0x01	; 1
    4744:	90 e0       	ldi	r25, 0x00	; 0
    4746:	9e 83       	std	Y+6, r25	; 0x06
    4748:	8d 83       	std	Y+5, r24	; 0x05
    474a:	3f c0       	rjmp	.+126    	; 0x47ca <wifi_connect+0x1600>
	else if (__tmp > 65535)
    474c:	6f 81       	ldd	r22, Y+7	; 0x07
    474e:	78 85       	ldd	r23, Y+8	; 0x08
    4750:	89 85       	ldd	r24, Y+9	; 0x09
    4752:	9a 85       	ldd	r25, Y+10	; 0x0a
    4754:	20 e0       	ldi	r18, 0x00	; 0
    4756:	3f ef       	ldi	r19, 0xFF	; 255
    4758:	4f e7       	ldi	r20, 0x7F	; 127
    475a:	57 e4       	ldi	r21, 0x47	; 71
    475c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4760:	18 16       	cp	r1, r24
    4762:	4c f5       	brge	.+82     	; 0x47b6 <wifi_connect+0x15ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4764:	6b 85       	ldd	r22, Y+11	; 0x0b
    4766:	7c 85       	ldd	r23, Y+12	; 0x0c
    4768:	8d 85       	ldd	r24, Y+13	; 0x0d
    476a:	9e 85       	ldd	r25, Y+14	; 0x0e
    476c:	20 e0       	ldi	r18, 0x00	; 0
    476e:	30 e0       	ldi	r19, 0x00	; 0
    4770:	40 e2       	ldi	r20, 0x20	; 32
    4772:	51 e4       	ldi	r21, 0x41	; 65
    4774:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4778:	dc 01       	movw	r26, r24
    477a:	cb 01       	movw	r24, r22
    477c:	bc 01       	movw	r22, r24
    477e:	cd 01       	movw	r24, r26
    4780:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4784:	dc 01       	movw	r26, r24
    4786:	cb 01       	movw	r24, r22
    4788:	9e 83       	std	Y+6, r25	; 0x06
    478a:	8d 83       	std	Y+5, r24	; 0x05
    478c:	0f c0       	rjmp	.+30     	; 0x47ac <wifi_connect+0x15e2>
    478e:	80 e9       	ldi	r24, 0x90	; 144
    4790:	91 e0       	ldi	r25, 0x01	; 1
    4792:	9c 83       	std	Y+4, r25	; 0x04
    4794:	8b 83       	std	Y+3, r24	; 0x03
    4796:	8b 81       	ldd	r24, Y+3	; 0x03
    4798:	9c 81       	ldd	r25, Y+4	; 0x04
    479a:	01 97       	sbiw	r24, 0x01	; 1
    479c:	f1 f7       	brne	.-4      	; 0x479a <wifi_connect+0x15d0>
    479e:	9c 83       	std	Y+4, r25	; 0x04
    47a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47a2:	8d 81       	ldd	r24, Y+5	; 0x05
    47a4:	9e 81       	ldd	r25, Y+6	; 0x06
    47a6:	01 97       	sbiw	r24, 0x01	; 1
    47a8:	9e 83       	std	Y+6, r25	; 0x06
    47aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47ac:	8d 81       	ldd	r24, Y+5	; 0x05
    47ae:	9e 81       	ldd	r25, Y+6	; 0x06
    47b0:	00 97       	sbiw	r24, 0x00	; 0
    47b2:	69 f7       	brne	.-38     	; 0x478e <wifi_connect+0x15c4>
    47b4:	14 c0       	rjmp	.+40     	; 0x47de <wifi_connect+0x1614>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47b6:	6f 81       	ldd	r22, Y+7	; 0x07
    47b8:	78 85       	ldd	r23, Y+8	; 0x08
    47ba:	89 85       	ldd	r24, Y+9	; 0x09
    47bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    47be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47c2:	dc 01       	movw	r26, r24
    47c4:	cb 01       	movw	r24, r22
    47c6:	9e 83       	std	Y+6, r25	; 0x06
    47c8:	8d 83       	std	Y+5, r24	; 0x05
    47ca:	8d 81       	ldd	r24, Y+5	; 0x05
    47cc:	9e 81       	ldd	r25, Y+6	; 0x06
    47ce:	9a 83       	std	Y+2, r25	; 0x02
    47d0:	89 83       	std	Y+1, r24	; 0x01
    47d2:	89 81       	ldd	r24, Y+1	; 0x01
    47d4:	9a 81       	ldd	r25, Y+2	; 0x02
    47d6:	01 97       	sbiw	r24, 0x01	; 1
    47d8:	f1 f7       	brne	.-4      	; 0x47d6 <wifi_connect+0x160c>
    47da:	9a 83       	std	Y+2, r25	; 0x02
    47dc:	89 83       	std	Y+1, r24	; 0x01
	//Wifi_Buffer_Reset();
	//H_LCD_void_sendData('6');
	//_delay_ms(1000);


	H_LCD_void_sendString("Connected");
    47de:	80 ef       	ldi	r24, 0xF0	; 240
    47e0:	90 e0       	ldi	r25, 0x00	; 0
    47e2:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <H_LCD_void_sendString>

}
    47e6:	c2 51       	subi	r28, 0x12	; 18
    47e8:	df 4f       	sbci	r29, 0xFF	; 255
    47ea:	0f b6       	in	r0, 0x3f	; 63
    47ec:	f8 94       	cli
    47ee:	de bf       	out	0x3e, r29	; 62
    47f0:	0f be       	out	0x3f, r0	; 63
    47f2:	cd bf       	out	0x3d, r28	; 61
    47f4:	cf 91       	pop	r28
    47f6:	df 91       	pop	r29
    47f8:	1f 91       	pop	r17
    47fa:	0f 91       	pop	r16
    47fc:	08 95       	ret

000047fe <Check_Wifi_Respones>:
/***********************************************************************/
/* Function to check wifi response without blocking nor time out */
/* only used for instantly checking */
/***********************************************************************/
void Check_Wifi_Respones(u8 *Wifi_Response , u8 *Error_Message)
{
    47fe:	df 93       	push	r29
    4800:	cf 93       	push	r28
    4802:	00 d0       	rcall	.+0      	; 0x4804 <Check_Wifi_Respones+0x6>
    4804:	00 d0       	rcall	.+0      	; 0x4806 <Check_Wifi_Respones+0x8>
    4806:	0f 92       	push	r0
    4808:	cd b7       	in	r28, 0x3d	; 61
    480a:	de b7       	in	r29, 0x3e	; 62
    480c:	9b 83       	std	Y+3, r25	; 0x03
    480e:	8a 83       	std	Y+2, r24	; 0x02
    4810:	7d 83       	std	Y+5, r23	; 0x05
    4812:	6c 83       	std	Y+4, r22	; 0x04
	u8 index =NULL;
    4814:	19 82       	std	Y+1, r1	; 0x01
	
	if((index = strstr(Rx_Buffer_UART, Wifi_Response)) != NULL)
    4816:	8f ec       	ldi	r24, 0xCF	; 207
    4818:	94 e0       	ldi	r25, 0x04	; 4
    481a:	2a 81       	ldd	r18, Y+2	; 0x02
    481c:	3b 81       	ldd	r19, Y+3	; 0x03
    481e:	b9 01       	movw	r22, r18
    4820:	0e 94 92 36 	call	0x6d24	; 0x6d24 <strstr>
    4824:	89 83       	std	Y+1, r24	; 0x01
    4826:	89 81       	ldd	r24, Y+1	; 0x01
    4828:	88 2f       	mov	r24, r24
    482a:	90 e0       	ldi	r25, 0x00	; 0
    482c:	00 97       	sbiw	r24, 0x00	; 0
    482e:	49 f0       	breq	.+18     	; 0x4842 <Check_Wifi_Respones+0x44>
	{
		H_LCD_void_gotoXY(3,0);
    4830:	83 e0       	ldi	r24, 0x03	; 3
    4832:	60 e0       	ldi	r22, 0x00	; 0
    4834:	0e 94 ee 2a 	call	0x55dc	; 0x55dc <H_LCD_void_gotoXY>
		H_LCD_void_sendString(Wifi_Response);
    4838:	8a 81       	ldd	r24, Y+2	; 0x02
    483a:	9b 81       	ldd	r25, Y+3	; 0x03
    483c:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <H_LCD_void_sendString>
    4840:	08 c0       	rjmp	.+16     	; 0x4852 <Check_Wifi_Respones+0x54>
	}
	else
	{
		H_LCD_void_gotoXY(3,0);
    4842:	83 e0       	ldi	r24, 0x03	; 3
    4844:	60 e0       	ldi	r22, 0x00	; 0
    4846:	0e 94 ee 2a 	call	0x55dc	; 0x55dc <H_LCD_void_gotoXY>
		H_LCD_void_sendString(Rx_Buffer_UART);
    484a:	8f ec       	ldi	r24, 0xCF	; 207
    484c:	94 e0       	ldi	r25, 0x04	; 4
    484e:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <H_LCD_void_sendString>
		
	}
}
    4852:	0f 90       	pop	r0
    4854:	0f 90       	pop	r0
    4856:	0f 90       	pop	r0
    4858:	0f 90       	pop	r0
    485a:	0f 90       	pop	r0
    485c:	cf 91       	pop	r28
    485e:	df 91       	pop	r29
    4860:	08 95       	ret

00004862 <Wifi_Wait_Respones>:

/*************************************************/
/* Function to check wifi response (blocking)  */
/*************************************************/
u8 Wifi_Wait_Respones(u8 *Wifi_Response)
{
    4862:	df 93       	push	r29
    4864:	cf 93       	push	r28
    4866:	cd b7       	in	r28, 0x3d	; 61
    4868:	de b7       	in	r29, 0x3e	; 62
    486a:	61 97       	sbiw	r28, 0x11	; 17
    486c:	0f b6       	in	r0, 0x3f	; 63
    486e:	f8 94       	cli
    4870:	de bf       	out	0x3e, r29	; 62
    4872:	0f be       	out	0x3f, r0	; 63
    4874:	cd bf       	out	0x3d, r28	; 61
    4876:	99 8b       	std	Y+17, r25	; 0x11
    4878:	88 8b       	std	Y+16, r24	; 0x10
	/* set this response to 0 when you got response */
	u8 Response_Found =1;
    487a:	81 e0       	ldi	r24, 0x01	; 1
    487c:	8f 87       	std	Y+15, r24	; 0x0f
    487e:	85 c0       	rjmp	.+266    	; 0x498a <Wifi_Wait_Respones+0x128>
	while(Response_Found)
	{
		
		if(strstr(Rx_Buffer_UART, Wifi_Response) != NULL)
    4880:	8f ec       	ldi	r24, 0xCF	; 207
    4882:	94 e0       	ldi	r25, 0x04	; 4
    4884:	28 89       	ldd	r18, Y+16	; 0x10
    4886:	39 89       	ldd	r19, Y+17	; 0x11
    4888:	b9 01       	movw	r22, r18
    488a:	0e 94 92 36 	call	0x6d24	; 0x6d24 <strstr>
    488e:	00 97       	sbiw	r24, 0x00	; 0
    4890:	31 f0       	breq	.+12     	; 0x489e <Wifi_Wait_Respones+0x3c>
		{
			H_LCD_void_sendString(Wifi_Response);
    4892:	88 89       	ldd	r24, Y+16	; 0x10
    4894:	99 89       	ldd	r25, Y+17	; 0x11
    4896:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <H_LCD_void_sendString>
			Response_Found = 0;
    489a:	1f 86       	std	Y+15, r1	; 0x0f
    489c:	04 c0       	rjmp	.+8      	; 0x48a6 <Wifi_Wait_Respones+0x44>
			
			
		}
		else
		{
			H_LCD_void_sendString(Rx_Buffer_UART);
    489e:	8f ec       	ldi	r24, 0xCF	; 207
    48a0:	94 e0       	ldi	r25, 0x04	; 4
    48a2:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <H_LCD_void_sendString>
    48a6:	80 e0       	ldi	r24, 0x00	; 0
    48a8:	90 e0       	ldi	r25, 0x00	; 0
    48aa:	aa e7       	ldi	r26, 0x7A	; 122
    48ac:	b4 e4       	ldi	r27, 0x44	; 68
    48ae:	8b 87       	std	Y+11, r24	; 0x0b
    48b0:	9c 87       	std	Y+12, r25	; 0x0c
    48b2:	ad 87       	std	Y+13, r26	; 0x0d
    48b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    48b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    48ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    48bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    48be:	20 e0       	ldi	r18, 0x00	; 0
    48c0:	30 e0       	ldi	r19, 0x00	; 0
    48c2:	4a e7       	ldi	r20, 0x7A	; 122
    48c4:	55 e4       	ldi	r21, 0x45	; 69
    48c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48ca:	dc 01       	movw	r26, r24
    48cc:	cb 01       	movw	r24, r22
    48ce:	8f 83       	std	Y+7, r24	; 0x07
    48d0:	98 87       	std	Y+8, r25	; 0x08
    48d2:	a9 87       	std	Y+9, r26	; 0x09
    48d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    48d6:	6f 81       	ldd	r22, Y+7	; 0x07
    48d8:	78 85       	ldd	r23, Y+8	; 0x08
    48da:	89 85       	ldd	r24, Y+9	; 0x09
    48dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    48de:	20 e0       	ldi	r18, 0x00	; 0
    48e0:	30 e0       	ldi	r19, 0x00	; 0
    48e2:	40 e8       	ldi	r20, 0x80	; 128
    48e4:	5f e3       	ldi	r21, 0x3F	; 63
    48e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48ea:	88 23       	and	r24, r24
    48ec:	2c f4       	brge	.+10     	; 0x48f8 <Wifi_Wait_Respones+0x96>
		__ticks = 1;
    48ee:	81 e0       	ldi	r24, 0x01	; 1
    48f0:	90 e0       	ldi	r25, 0x00	; 0
    48f2:	9e 83       	std	Y+6, r25	; 0x06
    48f4:	8d 83       	std	Y+5, r24	; 0x05
    48f6:	3f c0       	rjmp	.+126    	; 0x4976 <Wifi_Wait_Respones+0x114>
	else if (__tmp > 65535)
    48f8:	6f 81       	ldd	r22, Y+7	; 0x07
    48fa:	78 85       	ldd	r23, Y+8	; 0x08
    48fc:	89 85       	ldd	r24, Y+9	; 0x09
    48fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4900:	20 e0       	ldi	r18, 0x00	; 0
    4902:	3f ef       	ldi	r19, 0xFF	; 255
    4904:	4f e7       	ldi	r20, 0x7F	; 127
    4906:	57 e4       	ldi	r21, 0x47	; 71
    4908:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    490c:	18 16       	cp	r1, r24
    490e:	4c f5       	brge	.+82     	; 0x4962 <Wifi_Wait_Respones+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4910:	6b 85       	ldd	r22, Y+11	; 0x0b
    4912:	7c 85       	ldd	r23, Y+12	; 0x0c
    4914:	8d 85       	ldd	r24, Y+13	; 0x0d
    4916:	9e 85       	ldd	r25, Y+14	; 0x0e
    4918:	20 e0       	ldi	r18, 0x00	; 0
    491a:	30 e0       	ldi	r19, 0x00	; 0
    491c:	40 e2       	ldi	r20, 0x20	; 32
    491e:	51 e4       	ldi	r21, 0x41	; 65
    4920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4924:	dc 01       	movw	r26, r24
    4926:	cb 01       	movw	r24, r22
    4928:	bc 01       	movw	r22, r24
    492a:	cd 01       	movw	r24, r26
    492c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4930:	dc 01       	movw	r26, r24
    4932:	cb 01       	movw	r24, r22
    4934:	9e 83       	std	Y+6, r25	; 0x06
    4936:	8d 83       	std	Y+5, r24	; 0x05
    4938:	0f c0       	rjmp	.+30     	; 0x4958 <Wifi_Wait_Respones+0xf6>
    493a:	80 e9       	ldi	r24, 0x90	; 144
    493c:	91 e0       	ldi	r25, 0x01	; 1
    493e:	9c 83       	std	Y+4, r25	; 0x04
    4940:	8b 83       	std	Y+3, r24	; 0x03
    4942:	8b 81       	ldd	r24, Y+3	; 0x03
    4944:	9c 81       	ldd	r25, Y+4	; 0x04
    4946:	01 97       	sbiw	r24, 0x01	; 1
    4948:	f1 f7       	brne	.-4      	; 0x4946 <Wifi_Wait_Respones+0xe4>
    494a:	9c 83       	std	Y+4, r25	; 0x04
    494c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    494e:	8d 81       	ldd	r24, Y+5	; 0x05
    4950:	9e 81       	ldd	r25, Y+6	; 0x06
    4952:	01 97       	sbiw	r24, 0x01	; 1
    4954:	9e 83       	std	Y+6, r25	; 0x06
    4956:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4958:	8d 81       	ldd	r24, Y+5	; 0x05
    495a:	9e 81       	ldd	r25, Y+6	; 0x06
    495c:	00 97       	sbiw	r24, 0x00	; 0
    495e:	69 f7       	brne	.-38     	; 0x493a <Wifi_Wait_Respones+0xd8>
    4960:	14 c0       	rjmp	.+40     	; 0x498a <Wifi_Wait_Respones+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4962:	6f 81       	ldd	r22, Y+7	; 0x07
    4964:	78 85       	ldd	r23, Y+8	; 0x08
    4966:	89 85       	ldd	r24, Y+9	; 0x09
    4968:	9a 85       	ldd	r25, Y+10	; 0x0a
    496a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    496e:	dc 01       	movw	r26, r24
    4970:	cb 01       	movw	r24, r22
    4972:	9e 83       	std	Y+6, r25	; 0x06
    4974:	8d 83       	std	Y+5, r24	; 0x05
    4976:	8d 81       	ldd	r24, Y+5	; 0x05
    4978:	9e 81       	ldd	r25, Y+6	; 0x06
    497a:	9a 83       	std	Y+2, r25	; 0x02
    497c:	89 83       	std	Y+1, r24	; 0x01
    497e:	89 81       	ldd	r24, Y+1	; 0x01
    4980:	9a 81       	ldd	r25, Y+2	; 0x02
    4982:	01 97       	sbiw	r24, 0x01	; 1
    4984:	f1 f7       	brne	.-4      	; 0x4982 <Wifi_Wait_Respones+0x120>
    4986:	9a 83       	std	Y+2, r25	; 0x02
    4988:	89 83       	std	Y+1, r24	; 0x01
/*************************************************/
u8 Wifi_Wait_Respones(u8 *Wifi_Response)
{
	/* set this response to 0 when you got response */
	u8 Response_Found =1;
	while(Response_Found)
    498a:	8f 85       	ldd	r24, Y+15	; 0x0f
    498c:	88 23       	and	r24, r24
    498e:	09 f0       	breq	.+2      	; 0x4992 <Wifi_Wait_Respones+0x130>
    4990:	77 cf       	rjmp	.-274    	; 0x4880 <Wifi_Wait_Respones+0x1e>
			H_LCD_void_sendString(Rx_Buffer_UART);
		}
		_delay_ms(1000);
	}
	
	return 1;
    4992:	81 e0       	ldi	r24, 0x01	; 1
	
}
    4994:	61 96       	adiw	r28, 0x11	; 17
    4996:	0f b6       	in	r0, 0x3f	; 63
    4998:	f8 94       	cli
    499a:	de bf       	out	0x3e, r29	; 62
    499c:	0f be       	out	0x3f, r0	; 63
    499e:	cd bf       	out	0x3d, r28	; 61
    49a0:	cf 91       	pop	r28
    49a2:	df 91       	pop	r29
    49a4:	08 95       	ret

000049a6 <Wifi_Wait_Data>:

/*************************************************/
/* Function to Recive data from wifi and check for the required data  */
/*************************************************/
u8 Wifi_Wait_Data(u8 Wifi_Data)
{
    49a6:	df 93       	push	r29
    49a8:	cf 93       	push	r28
    49aa:	00 d0       	rcall	.+0      	; 0x49ac <Wifi_Wait_Data+0x6>
    49ac:	00 d0       	rcall	.+0      	; 0x49ae <Wifi_Wait_Data+0x8>
    49ae:	0f 92       	push	r0
    49b0:	cd b7       	in	r28, 0x3d	; 61
    49b2:	de b7       	in	r29, 0x3e	; 62
    49b4:	8d 83       	std	Y+5, r24	; 0x05
	/* set this response to 0 when you got response */
	u8 Data_Found =1;
    49b6:	81 e0       	ldi	r24, 0x01	; 1
    49b8:	8c 83       	std	Y+4, r24	; 0x04
	u16 timeout = 5;
    49ba:	85 e0       	ldi	r24, 0x05	; 5
    49bc:	90 e0       	ldi	r25, 0x00	; 0
    49be:	9b 83       	std	Y+3, r25	; 0x03
    49c0:	8a 83       	std	Y+2, r24	; 0x02
	/* Return state = 1 when data found  */
	u8 Return_State = 0;
    49c2:	19 82       	std	Y+1, r1	; 0x01
    49c4:	13 c0       	rjmp	.+38     	; 0x49ec <Wifi_Wait_Data+0x46>
	
	while(Data_Found && timeout )
	{
		
		if(strchr(Rx_Buffer_UART, Wifi_Data) != NULL)
    49c6:	8d 81       	ldd	r24, Y+5	; 0x05
    49c8:	28 2f       	mov	r18, r24
    49ca:	30 e0       	ldi	r19, 0x00	; 0
    49cc:	8f ec       	ldi	r24, 0xCF	; 207
    49ce:	94 e0       	ldi	r25, 0x04	; 4
    49d0:	b9 01       	movw	r22, r18
    49d2:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <strchr>
    49d6:	00 97       	sbiw	r24, 0x00	; 0
    49d8:	21 f0       	breq	.+8      	; 0x49e2 <Wifi_Wait_Data+0x3c>
		{
			//H_LCD_void_sendString(Wifi_Data);
			Data_Found = 0;
    49da:	1c 82       	std	Y+4, r1	; 0x04
			//Wifi_Buffer_Reset();
			Return_State = 1;
    49dc:	81 e0       	ldi	r24, 0x01	; 1
    49de:	89 83       	std	Y+1, r24	; 0x01
    49e0:	05 c0       	rjmp	.+10     	; 0x49ec <Wifi_Wait_Data+0x46>
		}
		else
		{
			//H_LCD_void_sendString(Rx_Buffer_UART);
			timeout--;
    49e2:	8a 81       	ldd	r24, Y+2	; 0x02
    49e4:	9b 81       	ldd	r25, Y+3	; 0x03
    49e6:	01 97       	sbiw	r24, 0x01	; 1
    49e8:	9b 83       	std	Y+3, r25	; 0x03
    49ea:	8a 83       	std	Y+2, r24	; 0x02
	u8 Data_Found =1;
	u16 timeout = 5;
	/* Return state = 1 when data found  */
	u8 Return_State = 0;
	
	while(Data_Found && timeout )
    49ec:	8c 81       	ldd	r24, Y+4	; 0x04
    49ee:	88 23       	and	r24, r24
    49f0:	21 f0       	breq	.+8      	; 0x49fa <Wifi_Wait_Data+0x54>
    49f2:	8a 81       	ldd	r24, Y+2	; 0x02
    49f4:	9b 81       	ldd	r25, Y+3	; 0x03
    49f6:	00 97       	sbiw	r24, 0x00	; 0
    49f8:	31 f7       	brne	.-52     	; 0x49c6 <Wifi_Wait_Data+0x20>
			timeout--;
		}
		//_delay_ms(1000);
	}
	
	return Return_State;
    49fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    49fc:	0f 90       	pop	r0
    49fe:	0f 90       	pop	r0
    4a00:	0f 90       	pop	r0
    4a02:	0f 90       	pop	r0
    4a04:	0f 90       	pop	r0
    4a06:	cf 91       	pop	r28
    4a08:	df 91       	pop	r29
    4a0a:	08 95       	ret

00004a0c <Wifi_Send_Data>:

/*************************************************/
/* Function to Send Data to server  */
/*************************************************/
void Wifi_Send_Data(u8 Data)
{
    4a0c:	df 93       	push	r29
    4a0e:	cf 93       	push	r28
    4a10:	cd b7       	in	r28, 0x3d	; 61
    4a12:	de b7       	in	r29, 0x3e	; 62
    4a14:	2f 97       	sbiw	r28, 0x0f	; 15
    4a16:	0f b6       	in	r0, 0x3f	; 63
    4a18:	f8 94       	cli
    4a1a:	de bf       	out	0x3e, r29	; 62
    4a1c:	0f be       	out	0x3f, r0	; 63
    4a1e:	cd bf       	out	0x3d, r28	; 61
    4a20:	8f 87       	std	Y+15, r24	; 0x0f

	UART_sendString("AT+CIPSEND=17\r\n");
    4a22:	8a ef       	ldi	r24, 0xFA	; 250
    4a24:	90 e0       	ldi	r25, 0x00	; 0
    4a26:	0e 94 c4 07 	call	0xf88	; 0xf88 <UART_sendString>
    4a2a:	80 e0       	ldi	r24, 0x00	; 0
    4a2c:	90 e0       	ldi	r25, 0x00	; 0
    4a2e:	aa ef       	ldi	r26, 0xFA	; 250
    4a30:	b3 e4       	ldi	r27, 0x43	; 67
    4a32:	8b 87       	std	Y+11, r24	; 0x0b
    4a34:	9c 87       	std	Y+12, r25	; 0x0c
    4a36:	ad 87       	std	Y+13, r26	; 0x0d
    4a38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a40:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a42:	20 e0       	ldi	r18, 0x00	; 0
    4a44:	30 e0       	ldi	r19, 0x00	; 0
    4a46:	4a e7       	ldi	r20, 0x7A	; 122
    4a48:	55 e4       	ldi	r21, 0x45	; 69
    4a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a4e:	dc 01       	movw	r26, r24
    4a50:	cb 01       	movw	r24, r22
    4a52:	8f 83       	std	Y+7, r24	; 0x07
    4a54:	98 87       	std	Y+8, r25	; 0x08
    4a56:	a9 87       	std	Y+9, r26	; 0x09
    4a58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    4a5c:	78 85       	ldd	r23, Y+8	; 0x08
    4a5e:	89 85       	ldd	r24, Y+9	; 0x09
    4a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a62:	20 e0       	ldi	r18, 0x00	; 0
    4a64:	30 e0       	ldi	r19, 0x00	; 0
    4a66:	40 e8       	ldi	r20, 0x80	; 128
    4a68:	5f e3       	ldi	r21, 0x3F	; 63
    4a6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a6e:	88 23       	and	r24, r24
    4a70:	2c f4       	brge	.+10     	; 0x4a7c <Wifi_Send_Data+0x70>
		__ticks = 1;
    4a72:	81 e0       	ldi	r24, 0x01	; 1
    4a74:	90 e0       	ldi	r25, 0x00	; 0
    4a76:	9e 83       	std	Y+6, r25	; 0x06
    4a78:	8d 83       	std	Y+5, r24	; 0x05
    4a7a:	3f c0       	rjmp	.+126    	; 0x4afa <Wifi_Send_Data+0xee>
	else if (__tmp > 65535)
    4a7c:	6f 81       	ldd	r22, Y+7	; 0x07
    4a7e:	78 85       	ldd	r23, Y+8	; 0x08
    4a80:	89 85       	ldd	r24, Y+9	; 0x09
    4a82:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a84:	20 e0       	ldi	r18, 0x00	; 0
    4a86:	3f ef       	ldi	r19, 0xFF	; 255
    4a88:	4f e7       	ldi	r20, 0x7F	; 127
    4a8a:	57 e4       	ldi	r21, 0x47	; 71
    4a8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a90:	18 16       	cp	r1, r24
    4a92:	4c f5       	brge	.+82     	; 0x4ae6 <Wifi_Send_Data+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a94:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a96:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a98:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a9c:	20 e0       	ldi	r18, 0x00	; 0
    4a9e:	30 e0       	ldi	r19, 0x00	; 0
    4aa0:	40 e2       	ldi	r20, 0x20	; 32
    4aa2:	51 e4       	ldi	r21, 0x41	; 65
    4aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4aa8:	dc 01       	movw	r26, r24
    4aaa:	cb 01       	movw	r24, r22
    4aac:	bc 01       	movw	r22, r24
    4aae:	cd 01       	movw	r24, r26
    4ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ab4:	dc 01       	movw	r26, r24
    4ab6:	cb 01       	movw	r24, r22
    4ab8:	9e 83       	std	Y+6, r25	; 0x06
    4aba:	8d 83       	std	Y+5, r24	; 0x05
    4abc:	0f c0       	rjmp	.+30     	; 0x4adc <Wifi_Send_Data+0xd0>
    4abe:	80 e9       	ldi	r24, 0x90	; 144
    4ac0:	91 e0       	ldi	r25, 0x01	; 1
    4ac2:	9c 83       	std	Y+4, r25	; 0x04
    4ac4:	8b 83       	std	Y+3, r24	; 0x03
    4ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ac8:	9c 81       	ldd	r25, Y+4	; 0x04
    4aca:	01 97       	sbiw	r24, 0x01	; 1
    4acc:	f1 f7       	brne	.-4      	; 0x4aca <Wifi_Send_Data+0xbe>
    4ace:	9c 83       	std	Y+4, r25	; 0x04
    4ad0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    4ad4:	9e 81       	ldd	r25, Y+6	; 0x06
    4ad6:	01 97       	sbiw	r24, 0x01	; 1
    4ad8:	9e 83       	std	Y+6, r25	; 0x06
    4ada:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4adc:	8d 81       	ldd	r24, Y+5	; 0x05
    4ade:	9e 81       	ldd	r25, Y+6	; 0x06
    4ae0:	00 97       	sbiw	r24, 0x00	; 0
    4ae2:	69 f7       	brne	.-38     	; 0x4abe <Wifi_Send_Data+0xb2>
    4ae4:	14 c0       	rjmp	.+40     	; 0x4b0e <Wifi_Send_Data+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ae6:	6f 81       	ldd	r22, Y+7	; 0x07
    4ae8:	78 85       	ldd	r23, Y+8	; 0x08
    4aea:	89 85       	ldd	r24, Y+9	; 0x09
    4aec:	9a 85       	ldd	r25, Y+10	; 0x0a
    4aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4af2:	dc 01       	movw	r26, r24
    4af4:	cb 01       	movw	r24, r22
    4af6:	9e 83       	std	Y+6, r25	; 0x06
    4af8:	8d 83       	std	Y+5, r24	; 0x05
    4afa:	8d 81       	ldd	r24, Y+5	; 0x05
    4afc:	9e 81       	ldd	r25, Y+6	; 0x06
    4afe:	9a 83       	std	Y+2, r25	; 0x02
    4b00:	89 83       	std	Y+1, r24	; 0x01
    4b02:	89 81       	ldd	r24, Y+1	; 0x01
    4b04:	9a 81       	ldd	r25, Y+2	; 0x02
    4b06:	01 97       	sbiw	r24, 0x01	; 1
    4b08:	f1 f7       	brne	.-4      	; 0x4b06 <Wifi_Send_Data+0xfa>
    4b0a:	9a 83       	std	Y+2, r25	; 0x02
    4b0c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	Check_Wifi_Respones("OK","ERRORSS");
    4b0e:	87 e6       	ldi	r24, 0x67	; 103
    4b10:	90 e0       	ldi	r25, 0x00	; 0
    4b12:	2a e0       	ldi	r18, 0x0A	; 10
    4b14:	31 e0       	ldi	r19, 0x01	; 1
    4b16:	b9 01       	movw	r22, r18
    4b18:	0e 94 ff 23 	call	0x47fe	; 0x47fe <Check_Wifi_Respones>
	UART_sendString(Data);
    4b1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b1e:	88 2f       	mov	r24, r24
    4b20:	90 e0       	ldi	r25, 0x00	; 0
    4b22:	0e 94 c4 07 	call	0xf88	; 0xf88 <UART_sendString>
}
    4b26:	2f 96       	adiw	r28, 0x0f	; 15
    4b28:	0f b6       	in	r0, 0x3f	; 63
    4b2a:	f8 94       	cli
    4b2c:	de bf       	out	0x3e, r29	; 62
    4b2e:	0f be       	out	0x3f, r0	; 63
    4b30:	cd bf       	out	0x3d, r28	; 61
    4b32:	cf 91       	pop	r28
    4b34:	df 91       	pop	r29
    4b36:	08 95       	ret

00004b38 <Wifi_Send_Data2>:

void Wifi_Send_Data2(u8 *Data)
{
    4b38:	df 93       	push	r29
    4b3a:	cf 93       	push	r28
    4b3c:	cd b7       	in	r28, 0x3d	; 61
    4b3e:	de b7       	in	r29, 0x3e	; 62
    4b40:	a6 97       	sbiw	r28, 0x26	; 38
    4b42:	0f b6       	in	r0, 0x3f	; 63
    4b44:	f8 94       	cli
    4b46:	de bf       	out	0x3e, r29	; 62
    4b48:	0f be       	out	0x3f, r0	; 63
    4b4a:	cd bf       	out	0x3d, r28	; 61
    4b4c:	9e a3       	std	Y+38, r25	; 0x26
    4b4e:	8d a3       	std	Y+37, r24	; 0x25
	u16 Len = strlen(Data);
    4b50:	8d a1       	ldd	r24, Y+37	; 0x25
    4b52:	9e a1       	ldd	r25, Y+38	; 0x26
    4b54:	0e 94 89 36 	call	0x6d12	; 0x6d12 <strlen>
    4b58:	98 8b       	std	Y+16, r25	; 0x10
    4b5a:	8f 87       	std	Y+15, r24	; 0x0f
	 char buffer[20];
	 
	sprintf(buffer, "AT+CIPSEND=%d\r\n",Len);
    4b5c:	00 d0       	rcall	.+0      	; 0x4b5e <Wifi_Send_Data2+0x26>
    4b5e:	00 d0       	rcall	.+0      	; 0x4b60 <Wifi_Send_Data2+0x28>
    4b60:	00 d0       	rcall	.+0      	; 0x4b62 <Wifi_Send_Data2+0x2a>
    4b62:	ed b7       	in	r30, 0x3d	; 61
    4b64:	fe b7       	in	r31, 0x3e	; 62
    4b66:	31 96       	adiw	r30, 0x01	; 1
    4b68:	ce 01       	movw	r24, r28
    4b6a:	41 96       	adiw	r24, 0x11	; 17
    4b6c:	91 83       	std	Z+1, r25	; 0x01
    4b6e:	80 83       	st	Z, r24
    4b70:	82 e1       	ldi	r24, 0x12	; 18
    4b72:	91 e0       	ldi	r25, 0x01	; 1
    4b74:	93 83       	std	Z+3, r25	; 0x03
    4b76:	82 83       	std	Z+2, r24	; 0x02
    4b78:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b7a:	98 89       	ldd	r25, Y+16	; 0x10
    4b7c:	95 83       	std	Z+5, r25	; 0x05
    4b7e:	84 83       	std	Z+4, r24	; 0x04
    4b80:	0e 94 cd 36 	call	0x6d9a	; 0x6d9a <sprintf>
    4b84:	8d b7       	in	r24, 0x3d	; 61
    4b86:	9e b7       	in	r25, 0x3e	; 62
    4b88:	06 96       	adiw	r24, 0x06	; 6
    4b8a:	0f b6       	in	r0, 0x3f	; 63
    4b8c:	f8 94       	cli
    4b8e:	9e bf       	out	0x3e, r25	; 62
    4b90:	0f be       	out	0x3f, r0	; 63
    4b92:	8d bf       	out	0x3d, r24	; 61
	
	UART_sendString(buffer);
    4b94:	ce 01       	movw	r24, r28
    4b96:	41 96       	adiw	r24, 0x11	; 17
    4b98:	0e 94 c4 07 	call	0xf88	; 0xf88 <UART_sendString>
    4b9c:	80 e0       	ldi	r24, 0x00	; 0
    4b9e:	90 e0       	ldi	r25, 0x00	; 0
    4ba0:	a8 e4       	ldi	r26, 0x48	; 72
    4ba2:	b2 e4       	ldi	r27, 0x42	; 66
    4ba4:	8b 87       	std	Y+11, r24	; 0x0b
    4ba6:	9c 87       	std	Y+12, r25	; 0x0c
    4ba8:	ad 87       	std	Y+13, r26	; 0x0d
    4baa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bac:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bae:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bb4:	20 e0       	ldi	r18, 0x00	; 0
    4bb6:	30 e0       	ldi	r19, 0x00	; 0
    4bb8:	4a e7       	ldi	r20, 0x7A	; 122
    4bba:	55 e4       	ldi	r21, 0x45	; 69
    4bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bc0:	dc 01       	movw	r26, r24
    4bc2:	cb 01       	movw	r24, r22
    4bc4:	8f 83       	std	Y+7, r24	; 0x07
    4bc6:	98 87       	std	Y+8, r25	; 0x08
    4bc8:	a9 87       	std	Y+9, r26	; 0x09
    4bca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    4bce:	78 85       	ldd	r23, Y+8	; 0x08
    4bd0:	89 85       	ldd	r24, Y+9	; 0x09
    4bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bd4:	20 e0       	ldi	r18, 0x00	; 0
    4bd6:	30 e0       	ldi	r19, 0x00	; 0
    4bd8:	40 e8       	ldi	r20, 0x80	; 128
    4bda:	5f e3       	ldi	r21, 0x3F	; 63
    4bdc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4be0:	88 23       	and	r24, r24
    4be2:	2c f4       	brge	.+10     	; 0x4bee <Wifi_Send_Data2+0xb6>
		__ticks = 1;
    4be4:	81 e0       	ldi	r24, 0x01	; 1
    4be6:	90 e0       	ldi	r25, 0x00	; 0
    4be8:	9e 83       	std	Y+6, r25	; 0x06
    4bea:	8d 83       	std	Y+5, r24	; 0x05
    4bec:	3f c0       	rjmp	.+126    	; 0x4c6c <Wifi_Send_Data2+0x134>
	else if (__tmp > 65535)
    4bee:	6f 81       	ldd	r22, Y+7	; 0x07
    4bf0:	78 85       	ldd	r23, Y+8	; 0x08
    4bf2:	89 85       	ldd	r24, Y+9	; 0x09
    4bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bf6:	20 e0       	ldi	r18, 0x00	; 0
    4bf8:	3f ef       	ldi	r19, 0xFF	; 255
    4bfa:	4f e7       	ldi	r20, 0x7F	; 127
    4bfc:	57 e4       	ldi	r21, 0x47	; 71
    4bfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c02:	18 16       	cp	r1, r24
    4c04:	4c f5       	brge	.+82     	; 0x4c58 <Wifi_Send_Data2+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c06:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c08:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c0e:	20 e0       	ldi	r18, 0x00	; 0
    4c10:	30 e0       	ldi	r19, 0x00	; 0
    4c12:	40 e2       	ldi	r20, 0x20	; 32
    4c14:	51 e4       	ldi	r21, 0x41	; 65
    4c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c1a:	dc 01       	movw	r26, r24
    4c1c:	cb 01       	movw	r24, r22
    4c1e:	bc 01       	movw	r22, r24
    4c20:	cd 01       	movw	r24, r26
    4c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c26:	dc 01       	movw	r26, r24
    4c28:	cb 01       	movw	r24, r22
    4c2a:	9e 83       	std	Y+6, r25	; 0x06
    4c2c:	8d 83       	std	Y+5, r24	; 0x05
    4c2e:	0f c0       	rjmp	.+30     	; 0x4c4e <Wifi_Send_Data2+0x116>
    4c30:	80 e9       	ldi	r24, 0x90	; 144
    4c32:	91 e0       	ldi	r25, 0x01	; 1
    4c34:	9c 83       	std	Y+4, r25	; 0x04
    4c36:	8b 83       	std	Y+3, r24	; 0x03
    4c38:	8b 81       	ldd	r24, Y+3	; 0x03
    4c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    4c3c:	01 97       	sbiw	r24, 0x01	; 1
    4c3e:	f1 f7       	brne	.-4      	; 0x4c3c <Wifi_Send_Data2+0x104>
    4c40:	9c 83       	std	Y+4, r25	; 0x04
    4c42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c44:	8d 81       	ldd	r24, Y+5	; 0x05
    4c46:	9e 81       	ldd	r25, Y+6	; 0x06
    4c48:	01 97       	sbiw	r24, 0x01	; 1
    4c4a:	9e 83       	std	Y+6, r25	; 0x06
    4c4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    4c50:	9e 81       	ldd	r25, Y+6	; 0x06
    4c52:	00 97       	sbiw	r24, 0x00	; 0
    4c54:	69 f7       	brne	.-38     	; 0x4c30 <Wifi_Send_Data2+0xf8>
    4c56:	14 c0       	rjmp	.+40     	; 0x4c80 <Wifi_Send_Data2+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c58:	6f 81       	ldd	r22, Y+7	; 0x07
    4c5a:	78 85       	ldd	r23, Y+8	; 0x08
    4c5c:	89 85       	ldd	r24, Y+9	; 0x09
    4c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c64:	dc 01       	movw	r26, r24
    4c66:	cb 01       	movw	r24, r22
    4c68:	9e 83       	std	Y+6, r25	; 0x06
    4c6a:	8d 83       	std	Y+5, r24	; 0x05
    4c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    4c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    4c70:	9a 83       	std	Y+2, r25	; 0x02
    4c72:	89 83       	std	Y+1, r24	; 0x01
    4c74:	89 81       	ldd	r24, Y+1	; 0x01
    4c76:	9a 81       	ldd	r25, Y+2	; 0x02
    4c78:	01 97       	sbiw	r24, 0x01	; 1
    4c7a:	f1 f7       	brne	.-4      	; 0x4c78 <Wifi_Send_Data2+0x140>
    4c7c:	9a 83       	std	Y+2, r25	; 0x02
    4c7e:	89 83       	std	Y+1, r24	; 0x01
	
	_delay_ms(50);
	Check_Wifi_Respones("OK","ERRORSS");
    4c80:	87 e6       	ldi	r24, 0x67	; 103
    4c82:	90 e0       	ldi	r25, 0x00	; 0
    4c84:	2a e0       	ldi	r18, 0x0A	; 10
    4c86:	31 e0       	ldi	r19, 0x01	; 1
    4c88:	b9 01       	movw	r22, r18
    4c8a:	0e 94 ff 23 	call	0x47fe	; 0x47fe <Check_Wifi_Respones>
	UART_sendString(Data);
    4c8e:	8d a1       	ldd	r24, Y+37	; 0x25
    4c90:	9e a1       	ldd	r25, Y+38	; 0x26
    4c92:	0e 94 c4 07 	call	0xf88	; 0xf88 <UART_sendString>
}
    4c96:	a6 96       	adiw	r28, 0x26	; 38
    4c98:	0f b6       	in	r0, 0x3f	; 63
    4c9a:	f8 94       	cli
    4c9c:	de bf       	out	0x3e, r29	; 62
    4c9e:	0f be       	out	0x3f, r0	; 63
    4ca0:	cd bf       	out	0x3d, r28	; 61
    4ca2:	cf 91       	pop	r28
    4ca4:	df 91       	pop	r29
    4ca6:	08 95       	ret

00004ca8 <Wifi_Buffer_Reset>:

/*************************************************/
/* Function to Reset Wifi Buffer  */
/*************************************************/
void Wifi_Buffer_Reset()
{
    4ca8:	df 93       	push	r29
    4caa:	cf 93       	push	r28
    4cac:	00 d0       	rcall	.+0      	; 0x4cae <Wifi_Buffer_Reset+0x6>
    4cae:	cd b7       	in	r28, 0x3d	; 61
    4cb0:	de b7       	in	r29, 0x3e	; 62
	
	/* fill the buffer with 5 to reset */
	for(int j =0; j <UART_BUFFER_SIZE + 1; j++)
    4cb2:	1a 82       	std	Y+2, r1	; 0x02
    4cb4:	19 82       	std	Y+1, r1	; 0x01
    4cb6:	0c c0       	rjmp	.+24     	; 0x4cd0 <Wifi_Buffer_Reset+0x28>
	{
		Rx_Buffer_UART[j] = '9';
    4cb8:	89 81       	ldd	r24, Y+1	; 0x01
    4cba:	9a 81       	ldd	r25, Y+2	; 0x02
    4cbc:	fc 01       	movw	r30, r24
    4cbe:	e1 53       	subi	r30, 0x31	; 49
    4cc0:	fb 4f       	sbci	r31, 0xFB	; 251
    4cc2:	89 e3       	ldi	r24, 0x39	; 57
    4cc4:	80 83       	st	Z, r24
/*************************************************/
void Wifi_Buffer_Reset()
{
	
	/* fill the buffer with 5 to reset */
	for(int j =0; j <UART_BUFFER_SIZE + 1; j++)
    4cc6:	89 81       	ldd	r24, Y+1	; 0x01
    4cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    4cca:	01 96       	adiw	r24, 0x01	; 1
    4ccc:	9a 83       	std	Y+2, r25	; 0x02
    4cce:	89 83       	std	Y+1, r24	; 0x01
    4cd0:	89 81       	ldd	r24, Y+1	; 0x01
    4cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    4cd4:	8d 33       	cpi	r24, 0x3D	; 61
    4cd6:	91 05       	cpc	r25, r1
    4cd8:	7c f3       	brlt	.-34     	; 0x4cb8 <Wifi_Buffer_Reset+0x10>
	{
		Rx_Buffer_UART[j] = '9';
	}
	
	RX_Wr_Index_UART = 0;
    4cda:	10 92 cc 04 	sts	0x04CC, r1
	RX_Rd_Index_UART = 0;
    4cde:	10 92 cd 04 	sts	0x04CD, r1
	RX_Counter_UART = 0;
    4ce2:	10 92 ce 04 	sts	0x04CE, r1
}
    4ce6:	0f 90       	pop	r0
    4ce8:	0f 90       	pop	r0
    4cea:	cf 91       	pop	r28
    4cec:	df 91       	pop	r29
    4cee:	08 95       	ret

00004cf0 <Wifi_Response_Reciver_UART_CallBack>:
/****************************************************************************/
/* wifi callback funtion to be passed to UART ISR to recive wifi responses */
/* then store it in a buffer */
/****************************************************************************/
void Wifi_Response_Reciver_UART_CallBack()
{
    4cf0:	df 93       	push	r29
    4cf2:	cf 93       	push	r28
    4cf4:	0f 92       	push	r0
    4cf6:	cd b7       	in	r28, 0x3d	; 61
    4cf8:	de b7       	in	r29, 0x3e	; 62
	
	u8 rx_byte;
	rx_byte = UART_UDR_REG;	/*you can not access a register inside HAL layer*/
    4cfa:	ec e2       	ldi	r30, 0x2C	; 44
    4cfc:	f0 e0       	ldi	r31, 0x00	; 0
    4cfe:	80 81       	ld	r24, Z
    4d00:	89 83       	std	Y+1, r24	; 0x01
	Rx_Buffer_UART[RX_Wr_Index_UART] = rx_byte;  //s put received char in buffer
    4d02:	80 91 cc 04 	lds	r24, 0x04CC
    4d06:	88 2f       	mov	r24, r24
    4d08:	90 e0       	ldi	r25, 0x00	; 0
    4d0a:	fc 01       	movw	r30, r24
    4d0c:	e1 53       	subi	r30, 0x31	; 49
    4d0e:	fb 4f       	sbci	r31, 0xFB	; 251
    4d10:	89 81       	ldd	r24, Y+1	; 0x01
    4d12:	80 83       	st	Z, r24
	if (++RX_Wr_Index_UART > UART_BUFFER_SIZE)
    4d14:	80 91 cc 04 	lds	r24, 0x04CC
    4d18:	8f 5f       	subi	r24, 0xFF	; 255
    4d1a:	80 93 cc 04 	sts	0x04CC, r24
    4d1e:	80 91 cc 04 	lds	r24, 0x04CC
    4d22:	8d 33       	cpi	r24, 0x3D	; 61
    4d24:	10 f0       	brcs	.+4      	; 0x4d2a <Wifi_Response_Reciver_UART_CallBack+0x3a>
	RX_Wr_Index_UART = 0;
    4d26:	10 92 cc 04 	sts	0x04CC, r1
	if (++RX_Counter_UART > UART_BUFFER_SIZE) // keep a character count
    4d2a:	80 91 ce 04 	lds	r24, 0x04CE
    4d2e:	8f 5f       	subi	r24, 0xFF	; 255
    4d30:	80 93 ce 04 	sts	0x04CE, r24
    4d34:	80 91 ce 04 	lds	r24, 0x04CE
    4d38:	8d 33       	cpi	r24, 0x3D	; 61
    4d3a:	18 f0       	brcs	.+6      	; 0x4d42 <Wifi_Response_Reciver_UART_CallBack+0x52>
	{
		RX_Counter_UART = UART_BUFFER_SIZE;  //;  if too many chars came
    4d3c:	8c e3       	ldi	r24, 0x3C	; 60
    4d3e:	80 93 ce 04 	sts	0x04CE, r24

	}
	
}
    4d42:	0f 90       	pop	r0
    4d44:	cf 91       	pop	r28
    4d46:	df 91       	pop	r29
    4d48:	08 95       	ret

00004d4a <H_LM35_enu_getTemp>:
 */
#include "Error_State.h"
#include "ADC_int.h"
#include "LM35_int.h"

ES_t H_LM35_enu_getTemp(ADC_cfg_type* copy_LM35_cfg, u32* copy_temp){
    4d4a:	df 93       	push	r29
    4d4c:	cf 93       	push	r28
    4d4e:	00 d0       	rcall	.+0      	; 0x4d50 <H_LM35_enu_getTemp+0x6>
    4d50:	00 d0       	rcall	.+0      	; 0x4d52 <H_LM35_enu_getTemp+0x8>
    4d52:	00 d0       	rcall	.+0      	; 0x4d54 <H_LM35_enu_getTemp+0xa>
    4d54:	cd b7       	in	r28, 0x3d	; 61
    4d56:	de b7       	in	r29, 0x3e	; 62
    4d58:	9c 83       	std	Y+4, r25	; 0x04
    4d5a:	8b 83       	std	Y+3, r24	; 0x03
    4d5c:	7e 83       	std	Y+6, r23	; 0x06
    4d5e:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    4d60:	19 82       	std	Y+1, r1	; 0x01
	u8 digital_val;
	if(copy_LM35_cfg != NULL && copy_temp != NULL){
    4d62:	8b 81       	ldd	r24, Y+3	; 0x03
    4d64:	9c 81       	ldd	r25, Y+4	; 0x04
    4d66:	00 97       	sbiw	r24, 0x00	; 0
    4d68:	09 f4       	brne	.+2      	; 0x4d6c <H_LM35_enu_getTemp+0x22>
    4d6a:	48 c0       	rjmp	.+144    	; 0x4dfc <H_LM35_enu_getTemp+0xb2>
    4d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    4d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    4d70:	00 97       	sbiw	r24, 0x00	; 0
    4d72:	09 f4       	brne	.+2      	; 0x4d76 <H_LM35_enu_getTemp+0x2c>
    4d74:	43 c0       	rjmp	.+134    	; 0x4dfc <H_LM35_enu_getTemp+0xb2>
		M_ADC_enu_init(*copy_LM35_cfg);
    4d76:	eb 81       	ldd	r30, Y+3	; 0x03
    4d78:	fc 81       	ldd	r31, Y+4	; 0x04
    4d7a:	20 81       	ld	r18, Z
    4d7c:	31 81       	ldd	r19, Z+1	; 0x01
    4d7e:	42 81       	ldd	r20, Z+2	; 0x02
    4d80:	53 81       	ldd	r21, Z+3	; 0x03
    4d82:	64 81       	ldd	r22, Z+4	; 0x04
    4d84:	75 81       	ldd	r23, Z+5	; 0x05
    4d86:	86 81       	ldd	r24, Z+6	; 0x06
    4d88:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <M_ADC_enu_init>
		M_ADC_enu_getDigitalValueSynchNonBlocking(copy_LM35_cfg, &digital_val);
    4d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d8e:	9c 81       	ldd	r25, Y+4	; 0x04
    4d90:	9e 01       	movw	r18, r28
    4d92:	2e 5f       	subi	r18, 0xFE	; 254
    4d94:	3f 4f       	sbci	r19, 0xFF	; 255
    4d96:	b9 01       	movw	r22, r18
    4d98:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <M_ADC_enu_getDigitalValueSynchNonBlocking>
		//*copy_temp = (digital_val*5/1024)*100;
		*copy_temp = (digital_val*4.88)/10;
    4d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d9e:	88 2f       	mov	r24, r24
    4da0:	90 e0       	ldi	r25, 0x00	; 0
    4da2:	aa 27       	eor	r26, r26
    4da4:	97 fd       	sbrc	r25, 7
    4da6:	a0 95       	com	r26
    4da8:	ba 2f       	mov	r27, r26
    4daa:	bc 01       	movw	r22, r24
    4dac:	cd 01       	movw	r24, r26
    4dae:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4db2:	dc 01       	movw	r26, r24
    4db4:	cb 01       	movw	r24, r22
    4db6:	bc 01       	movw	r22, r24
    4db8:	cd 01       	movw	r24, r26
    4dba:	26 ef       	ldi	r18, 0xF6	; 246
    4dbc:	38 e2       	ldi	r19, 0x28	; 40
    4dbe:	4c e9       	ldi	r20, 0x9C	; 156
    4dc0:	50 e4       	ldi	r21, 0x40	; 64
    4dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dc6:	dc 01       	movw	r26, r24
    4dc8:	cb 01       	movw	r24, r22
    4dca:	bc 01       	movw	r22, r24
    4dcc:	cd 01       	movw	r24, r26
    4dce:	20 e0       	ldi	r18, 0x00	; 0
    4dd0:	30 e0       	ldi	r19, 0x00	; 0
    4dd2:	40 e2       	ldi	r20, 0x20	; 32
    4dd4:	51 e4       	ldi	r21, 0x41	; 65
    4dd6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4dda:	dc 01       	movw	r26, r24
    4ddc:	cb 01       	movw	r24, r22
    4dde:	bc 01       	movw	r22, r24
    4de0:	cd 01       	movw	r24, r26
    4de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4de6:	dc 01       	movw	r26, r24
    4de8:	cb 01       	movw	r24, r22
    4dea:	ed 81       	ldd	r30, Y+5	; 0x05
    4dec:	fe 81       	ldd	r31, Y+6	; 0x06
    4dee:	80 83       	st	Z, r24
    4df0:	91 83       	std	Z+1, r25	; 0x01
    4df2:	a2 83       	std	Z+2, r26	; 0x02
    4df4:	b3 83       	std	Z+3, r27	; 0x03
		Local_enuErrorState = ES_OK;
    4df6:	81 e0       	ldi	r24, 0x01	; 1
    4df8:	89 83       	std	Y+1, r24	; 0x01
    4dfa:	02 c0       	rjmp	.+4      	; 0x4e00 <H_LM35_enu_getTemp+0xb6>
	}
	else {
		Local_enuErrorState = ES_NULL_POINTER;
    4dfc:	83 e0       	ldi	r24, 0x03	; 3
    4dfe:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    4e00:	89 81       	ldd	r24, Y+1	; 0x01
}
    4e02:	26 96       	adiw	r28, 0x06	; 6
    4e04:	0f b6       	in	r0, 0x3f	; 63
    4e06:	f8 94       	cli
    4e08:	de bf       	out	0x3e, r29	; 62
    4e0a:	0f be       	out	0x3f, r0	; 63
    4e0c:	cd bf       	out	0x3d, r28	; 61
    4e0e:	cf 91       	pop	r28
    4e10:	df 91       	pop	r29
    4e12:	08 95       	ret

00004e14 <H_LED_void_turnOn>:
  Reentrance       : Reentrant
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : Dio_HIGH or DIO_LOW
******************************************/
void H_LED_void_turnOn(u8 ledID){
    4e14:	df 93       	push	r29
    4e16:	cf 93       	push	r28
    4e18:	00 d0       	rcall	.+0      	; 0x4e1a <H_LED_void_turnOn+0x6>
    4e1a:	0f 92       	push	r0
    4e1c:	cd b7       	in	r28, 0x3d	; 61
    4e1e:	de b7       	in	r29, 0x3e	; 62
    4e20:	89 83       	std	Y+1, r24	; 0x01
	switch (ledID){
    4e22:	89 81       	ldd	r24, Y+1	; 0x01
    4e24:	28 2f       	mov	r18, r24
    4e26:	30 e0       	ldi	r19, 0x00	; 0
    4e28:	3b 83       	std	Y+3, r19	; 0x03
    4e2a:	2a 83       	std	Y+2, r18	; 0x02
    4e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    4e2e:	9b 81       	ldd	r25, Y+3	; 0x03
    4e30:	81 30       	cpi	r24, 0x01	; 1
    4e32:	91 05       	cpc	r25, r1
    4e34:	f9 f0       	breq	.+62     	; 0x4e74 <H_LED_void_turnOn+0x60>
    4e36:	2a 81       	ldd	r18, Y+2	; 0x02
    4e38:	3b 81       	ldd	r19, Y+3	; 0x03
    4e3a:	22 30       	cpi	r18, 0x02	; 2
    4e3c:	31 05       	cpc	r19, r1
    4e3e:	2c f4       	brge	.+10     	; 0x4e4a <H_LED_void_turnOn+0x36>
    4e40:	8a 81       	ldd	r24, Y+2	; 0x02
    4e42:	9b 81       	ldd	r25, Y+3	; 0x03
    4e44:	00 97       	sbiw	r24, 0x00	; 0
    4e46:	61 f0       	breq	.+24     	; 0x4e60 <H_LED_void_turnOn+0x4c>
    4e48:	1e c0       	rjmp	.+60     	; 0x4e86 <H_LED_void_turnOn+0x72>
    4e4a:	2a 81       	ldd	r18, Y+2	; 0x02
    4e4c:	3b 81       	ldd	r19, Y+3	; 0x03
    4e4e:	22 30       	cpi	r18, 0x02	; 2
    4e50:	31 05       	cpc	r19, r1
    4e52:	59 f0       	breq	.+22     	; 0x4e6a <H_LED_void_turnOn+0x56>
    4e54:	8a 81       	ldd	r24, Y+2	; 0x02
    4e56:	9b 81       	ldd	r25, Y+3	; 0x03
    4e58:	83 30       	cpi	r24, 0x03	; 3
    4e5a:	91 05       	cpc	r25, r1
    4e5c:	81 f0       	breq	.+32     	; 0x4e7e <H_LED_void_turnOn+0x6a>
    4e5e:	13 c0       	rjmp	.+38     	; 0x4e86 <H_LED_void_turnOn+0x72>
	case LED_RED :
#if (LED_RED_DIRECTION == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_RED_PIN,DIO_HIGH);
    4e60:	8b e1       	ldi	r24, 0x1B	; 27
    4e62:	61 e0       	ldi	r22, 0x01	; 1
    4e64:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <M_Dio_void_setPinValue>
    4e68:	0e c0       	rjmp	.+28     	; 0x4e86 <H_LED_void_turnOn+0x72>
#endif
		break;

	case LED_GREEN:
#if	(LED_GREEN_DIRECTION ==	LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_GREEN_PIN,DIO_HIGH);
    4e6a:	8e e0       	ldi	r24, 0x0E	; 14
    4e6c:	61 e0       	ldi	r22, 0x01	; 1
    4e6e:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <M_Dio_void_setPinValue>
    4e72:	09 c0       	rjmp	.+18     	; 0x4e86 <H_LED_void_turnOn+0x72>

#endif
		break;
	case LED_BLUE:
#if	(LED_BLUE_DIRECTION ==LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_BLUE_PIN,DIO_HIGH);
    4e74:	8f e0       	ldi	r24, 0x0F	; 15
    4e76:	61 e0       	ldi	r22, 0x01	; 1
    4e78:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <M_Dio_void_setPinValue>
    4e7c:	04 c0       	rjmp	.+8      	; 0x4e86 <H_LED_void_turnOn+0x72>
#endif
		break;

	case LED_YELLOW:
#if	(LED_YELLOW_DIRECTION ==LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_YELLOW_PIN,DIO_HIGH);
    4e7e:	80 e1       	ldi	r24, 0x10	; 16
    4e80:	61 e0       	ldi	r22, 0x01	; 1
    4e82:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <M_Dio_void_setPinValue>

#endif
		break;
	}

}
    4e86:	0f 90       	pop	r0
    4e88:	0f 90       	pop	r0
    4e8a:	0f 90       	pop	r0
    4e8c:	cf 91       	pop	r28
    4e8e:	df 91       	pop	r29
    4e90:	08 95       	ret

00004e92 <H_LED_void_turnOff>:
  Reentrance       : Reentrant
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : Dio_HIGH or DIO_LOW
******************************************/
void H_LED_void_turnOff(u8 ledID){
    4e92:	df 93       	push	r29
    4e94:	cf 93       	push	r28
    4e96:	00 d0       	rcall	.+0      	; 0x4e98 <H_LED_void_turnOff+0x6>
    4e98:	0f 92       	push	r0
    4e9a:	cd b7       	in	r28, 0x3d	; 61
    4e9c:	de b7       	in	r29, 0x3e	; 62
    4e9e:	89 83       	std	Y+1, r24	; 0x01
	switch (ledID){
    4ea0:	89 81       	ldd	r24, Y+1	; 0x01
    4ea2:	28 2f       	mov	r18, r24
    4ea4:	30 e0       	ldi	r19, 0x00	; 0
    4ea6:	3b 83       	std	Y+3, r19	; 0x03
    4ea8:	2a 83       	std	Y+2, r18	; 0x02
    4eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    4eac:	9b 81       	ldd	r25, Y+3	; 0x03
    4eae:	81 30       	cpi	r24, 0x01	; 1
    4eb0:	91 05       	cpc	r25, r1
    4eb2:	f9 f0       	breq	.+62     	; 0x4ef2 <H_LED_void_turnOff+0x60>
    4eb4:	2a 81       	ldd	r18, Y+2	; 0x02
    4eb6:	3b 81       	ldd	r19, Y+3	; 0x03
    4eb8:	22 30       	cpi	r18, 0x02	; 2
    4eba:	31 05       	cpc	r19, r1
    4ebc:	2c f4       	brge	.+10     	; 0x4ec8 <H_LED_void_turnOff+0x36>
    4ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    4ec0:	9b 81       	ldd	r25, Y+3	; 0x03
    4ec2:	00 97       	sbiw	r24, 0x00	; 0
    4ec4:	61 f0       	breq	.+24     	; 0x4ede <H_LED_void_turnOff+0x4c>
    4ec6:	1e c0       	rjmp	.+60     	; 0x4f04 <H_LED_void_turnOff+0x72>
    4ec8:	2a 81       	ldd	r18, Y+2	; 0x02
    4eca:	3b 81       	ldd	r19, Y+3	; 0x03
    4ecc:	22 30       	cpi	r18, 0x02	; 2
    4ece:	31 05       	cpc	r19, r1
    4ed0:	59 f0       	breq	.+22     	; 0x4ee8 <H_LED_void_turnOff+0x56>
    4ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ed4:	9b 81       	ldd	r25, Y+3	; 0x03
    4ed6:	83 30       	cpi	r24, 0x03	; 3
    4ed8:	91 05       	cpc	r25, r1
    4eda:	81 f0       	breq	.+32     	; 0x4efc <H_LED_void_turnOff+0x6a>
    4edc:	13 c0       	rjmp	.+38     	; 0x4f04 <H_LED_void_turnOff+0x72>
	case LED_RED :
#if (LED_RED_DIRECTION == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_RED_PIN,DIO_LOW);
    4ede:	8b e1       	ldi	r24, 0x1B	; 27
    4ee0:	60 e0       	ldi	r22, 0x00	; 0
    4ee2:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <M_Dio_void_setPinValue>
    4ee6:	0e c0       	rjmp	.+28     	; 0x4f04 <H_LED_void_turnOff+0x72>
#endif
		break;

	case LED_GREEN:
#if	(LED_GREEN_DIRECTION ==	LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_GREEN_PIN,DIO_LOW);
    4ee8:	8e e0       	ldi	r24, 0x0E	; 14
    4eea:	60 e0       	ldi	r22, 0x00	; 0
    4eec:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <M_Dio_void_setPinValue>
    4ef0:	09 c0       	rjmp	.+18     	; 0x4f04 <H_LED_void_turnOff+0x72>

#endif
		break;
	case LED_BLUE:
#if	(LED_BLUE_DIRECTION ==LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_BLUE_PIN,DIO_LOW);
    4ef2:	8f e0       	ldi	r24, 0x0F	; 15
    4ef4:	60 e0       	ldi	r22, 0x00	; 0
    4ef6:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <M_Dio_void_setPinValue>
    4efa:	04 c0       	rjmp	.+8      	; 0x4f04 <H_LED_void_turnOff+0x72>
#endif
		break;

	case LED_YELLOW:
#if	(LED_YELLOW_DIRECTION ==LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_YELLOW_PIN,DIO_LOW);
    4efc:	80 e1       	ldi	r24, 0x10	; 16
    4efe:	60 e0       	ldi	r22, 0x00	; 0
    4f00:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <M_Dio_void_setPinValue>

#endif
		break;
	}

}
    4f04:	0f 90       	pop	r0
    4f06:	0f 90       	pop	r0
    4f08:	0f 90       	pop	r0
    4f0a:	cf 91       	pop	r28
    4f0c:	df 91       	pop	r29
    4f0e:	08 95       	ret

00004f10 <H_LED_void_toggle>:
  Reentrance       : Reentrant
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : Dio_HIGH or DIO_LOW
******************************************/
void H_LED_void_toggle(u8 ledID){
    4f10:	df 93       	push	r29
    4f12:	cf 93       	push	r28
    4f14:	00 d0       	rcall	.+0      	; 0x4f16 <H_LED_void_toggle+0x6>
    4f16:	0f 92       	push	r0
    4f18:	cd b7       	in	r28, 0x3d	; 61
    4f1a:	de b7       	in	r29, 0x3e	; 62
    4f1c:	89 83       	std	Y+1, r24	; 0x01
	switch(ledID){
    4f1e:	89 81       	ldd	r24, Y+1	; 0x01
    4f20:	28 2f       	mov	r18, r24
    4f22:	30 e0       	ldi	r19, 0x00	; 0
    4f24:	3b 83       	std	Y+3, r19	; 0x03
    4f26:	2a 83       	std	Y+2, r18	; 0x02
    4f28:	8a 81       	ldd	r24, Y+2	; 0x02
    4f2a:	9b 81       	ldd	r25, Y+3	; 0x03
    4f2c:	81 30       	cpi	r24, 0x01	; 1
    4f2e:	91 05       	cpc	r25, r1
    4f30:	c9 f0       	breq	.+50     	; 0x4f64 <H_LED_void_toggle+0x54>
    4f32:	2a 81       	ldd	r18, Y+2	; 0x02
    4f34:	3b 81       	ldd	r19, Y+3	; 0x03
    4f36:	22 30       	cpi	r18, 0x02	; 2
    4f38:	31 05       	cpc	r19, r1
    4f3a:	2c f4       	brge	.+10     	; 0x4f46 <H_LED_void_toggle+0x36>
    4f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    4f3e:	9b 81       	ldd	r25, Y+3	; 0x03
    4f40:	00 97       	sbiw	r24, 0x00	; 0
    4f42:	61 f0       	breq	.+24     	; 0x4f5c <H_LED_void_toggle+0x4c>
    4f44:	1a c0       	rjmp	.+52     	; 0x4f7a <H_LED_void_toggle+0x6a>
    4f46:	2a 81       	ldd	r18, Y+2	; 0x02
    4f48:	3b 81       	ldd	r19, Y+3	; 0x03
    4f4a:	22 30       	cpi	r18, 0x02	; 2
    4f4c:	31 05       	cpc	r19, r1
    4f4e:	71 f0       	breq	.+28     	; 0x4f6c <H_LED_void_toggle+0x5c>
    4f50:	8a 81       	ldd	r24, Y+2	; 0x02
    4f52:	9b 81       	ldd	r25, Y+3	; 0x03
    4f54:	83 30       	cpi	r24, 0x03	; 3
    4f56:	91 05       	cpc	r25, r1
    4f58:	69 f0       	breq	.+26     	; 0x4f74 <H_LED_void_toggle+0x64>
    4f5a:	0f c0       	rjmp	.+30     	; 0x4f7a <H_LED_void_toggle+0x6a>
	case LED_RED:
		M_Dio_void_togglePinValue(LED_RED_PIN);
    4f5c:	8b e1       	ldi	r24, 0x1B	; 27
    4f5e:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <M_Dio_void_togglePinValue>
    4f62:	0b c0       	rjmp	.+22     	; 0x4f7a <H_LED_void_toggle+0x6a>
		break;
	case LED_BLUE:
		M_Dio_void_togglePinValue(LED_BLUE_PIN);
    4f64:	8f e0       	ldi	r24, 0x0F	; 15
    4f66:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <M_Dio_void_togglePinValue>
    4f6a:	07 c0       	rjmp	.+14     	; 0x4f7a <H_LED_void_toggle+0x6a>
			break;
	case LED_GREEN:
		M_Dio_void_togglePinValue(LED_GREEN_PIN);
    4f6c:	8e e0       	ldi	r24, 0x0E	; 14
    4f6e:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <M_Dio_void_togglePinValue>
    4f72:	03 c0       	rjmp	.+6      	; 0x4f7a <H_LED_void_toggle+0x6a>
			break;
	case LED_YELLOW:
		M_Dio_void_togglePinValue(LED_YELLOW_PIN);
    4f74:	80 e1       	ldi	r24, 0x10	; 16
    4f76:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <M_Dio_void_togglePinValue>
			break;
	}

}
    4f7a:	0f 90       	pop	r0
    4f7c:	0f 90       	pop	r0
    4f7e:	0f 90       	pop	r0
    4f80:	cf 91       	pop	r28
    4f82:	df 91       	pop	r29
    4f84:	08 95       	ret

00004f86 <H_LED_void_set_Intensity>:

void H_LED_void_set_Intensity(u16 copy_Intensity){
    4f86:	df 93       	push	r29
    4f88:	cf 93       	push	r28
    4f8a:	00 d0       	rcall	.+0      	; 0x4f8c <H_LED_void_set_Intensity+0x6>
    4f8c:	cd b7       	in	r28, 0x3d	; 61
    4f8e:	de b7       	in	r29, 0x3e	; 62
    4f90:	9a 83       	std	Y+2, r25	; 0x02
    4f92:	89 83       	std	Y+1, r24	; 0x01
	M_TIMER1_void_FastPWM(copy_Intensity);
    4f94:	89 81       	ldd	r24, Y+1	; 0x01
    4f96:	9a 81       	ldd	r25, Y+2	; 0x02
    4f98:	0e 94 b1 09 	call	0x1362	; 0x1362 <M_TIMER1_void_FastPWM>
	M_TIMER1_void_Start(TIMER1_CLK_8);
    4f9c:	82 e0       	ldi	r24, 0x02	; 2
    4f9e:	0e 94 f7 09 	call	0x13ee	; 0x13ee <M_TIMER1_void_Start>
}
    4fa2:	0f 90       	pop	r0
    4fa4:	0f 90       	pop	r0
    4fa6:	cf 91       	pop	r28
    4fa8:	df 91       	pop	r29
    4faa:	08 95       	ret

00004fac <H_LDR_enu_getIntensity>:
#include "Error_State.h"
#include "ADC_int.h"
#include "LDR_cfg.h"
#include "LDR_int.h"

ES_t H_LDR_enu_getIntensity(ADC_cfg_type* copy_LDR_cfg,u32* copy_intensity){
    4fac:	df 93       	push	r29
    4fae:	cf 93       	push	r28
    4fb0:	00 d0       	rcall	.+0      	; 0x4fb2 <H_LDR_enu_getIntensity+0x6>
    4fb2:	00 d0       	rcall	.+0      	; 0x4fb4 <H_LDR_enu_getIntensity+0x8>
    4fb4:	00 d0       	rcall	.+0      	; 0x4fb6 <H_LDR_enu_getIntensity+0xa>
    4fb6:	cd b7       	in	r28, 0x3d	; 61
    4fb8:	de b7       	in	r29, 0x3e	; 62
    4fba:	9c 83       	std	Y+4, r25	; 0x04
    4fbc:	8b 83       	std	Y+3, r24	; 0x03
    4fbe:	7e 83       	std	Y+6, r23	; 0x06
    4fc0:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK ;
    4fc2:	19 82       	std	Y+1, r1	; 0x01
	u8 digital_val;
	if(copy_intensity != NULL && copy_LDR_cfg != NULL){
    4fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    4fc6:	9e 81       	ldd	r25, Y+6	; 0x06
    4fc8:	00 97       	sbiw	r24, 0x00	; 0
    4fca:	29 f1       	breq	.+74     	; 0x5016 <H_LDR_enu_getIntensity+0x6a>
    4fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    4fce:	9c 81       	ldd	r25, Y+4	; 0x04
    4fd0:	00 97       	sbiw	r24, 0x00	; 0
    4fd2:	09 f1       	breq	.+66     	; 0x5016 <H_LDR_enu_getIntensity+0x6a>
		M_ADC_enu_init(*copy_LDR_cfg);
    4fd4:	eb 81       	ldd	r30, Y+3	; 0x03
    4fd6:	fc 81       	ldd	r31, Y+4	; 0x04
    4fd8:	20 81       	ld	r18, Z
    4fda:	31 81       	ldd	r19, Z+1	; 0x01
    4fdc:	42 81       	ldd	r20, Z+2	; 0x02
    4fde:	53 81       	ldd	r21, Z+3	; 0x03
    4fe0:	64 81       	ldd	r22, Z+4	; 0x04
    4fe2:	75 81       	ldd	r23, Z+5	; 0x05
    4fe4:	86 81       	ldd	r24, Z+6	; 0x06
    4fe6:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <M_ADC_enu_init>
		M_ADC_enu_getDigitalValueSynchNonBlocking(copy_LDR_cfg,&digital_val);
    4fea:	8b 81       	ldd	r24, Y+3	; 0x03
    4fec:	9c 81       	ldd	r25, Y+4	; 0x04
    4fee:	9e 01       	movw	r18, r28
    4ff0:	2e 5f       	subi	r18, 0xFE	; 254
    4ff2:	3f 4f       	sbci	r19, 0xFF	; 255
    4ff4:	b9 01       	movw	r22, r18
    4ff6:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <M_ADC_enu_getDigitalValueSynchNonBlocking>
		*copy_intensity = digital_val;
    4ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    4ffc:	88 2f       	mov	r24, r24
    4ffe:	90 e0       	ldi	r25, 0x00	; 0
    5000:	a0 e0       	ldi	r26, 0x00	; 0
    5002:	b0 e0       	ldi	r27, 0x00	; 0
    5004:	ed 81       	ldd	r30, Y+5	; 0x05
    5006:	fe 81       	ldd	r31, Y+6	; 0x06
    5008:	80 83       	st	Z, r24
    500a:	91 83       	std	Z+1, r25	; 0x01
    500c:	a2 83       	std	Z+2, r26	; 0x02
    500e:	b3 83       	std	Z+3, r27	; 0x03
		Local_enuErrorState = ES_OK;
    5010:	81 e0       	ldi	r24, 0x01	; 1
    5012:	89 83       	std	Y+1, r24	; 0x01
    5014:	02 c0       	rjmp	.+4      	; 0x501a <H_LDR_enu_getIntensity+0x6e>
	}
	else{
		Local_enuErrorState = ES_NULL_POINTER;
    5016:	83 e0       	ldi	r24, 0x03	; 3
    5018:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState ;
    501a:	89 81       	ldd	r24, Y+1	; 0x01
}
    501c:	26 96       	adiw	r28, 0x06	; 6
    501e:	0f b6       	in	r0, 0x3f	; 63
    5020:	f8 94       	cli
    5022:	de bf       	out	0x3e, r29	; 62
    5024:	0f be       	out	0x3f, r0	; 63
    5026:	cd bf       	out	0x3d, r28	; 61
    5028:	cf 91       	pop	r28
    502a:	df 91       	pop	r29
    502c:	08 95       	ret

0000502e <H_LCD_void_latchByte>:
#include "LCD_int.h"
#include <avr/delay.h>
#include "BIT_MATH.h"

static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
    502e:	df 93       	push	r29
    5030:	cf 93       	push	r28
    5032:	cd b7       	in	r28, 0x3d	; 61
    5034:	de b7       	in	r29, 0x3e	; 62
    5036:	e9 97       	sbiw	r28, 0x39	; 57
    5038:	0f b6       	in	r0, 0x3f	; 63
    503a:	f8 94       	cli
    503c:	de bf       	out	0x3e, r29	; 62
    503e:	0f be       	out	0x3f, r0	; 63
    5040:	cd bf       	out	0x3d, r28	; 61
    5042:	89 af       	std	Y+57, r24	; 0x39
#if (LCD_MODE == FOUR_BIT_MODE)


	/* Step1: write your data or command */
	/* Send upper nibble */
	M_Dio_void_setPinValue(LCD_D4_PIN, GET_BIT(copy_u8Byte, 4));
    5044:	89 ad       	ldd	r24, Y+57	; 0x39
    5046:	82 95       	swap	r24
    5048:	8f 70       	andi	r24, 0x0F	; 15
    504a:	98 2f       	mov	r25, r24
    504c:	91 70       	andi	r25, 0x01	; 1
    504e:	84 e1       	ldi	r24, 0x14	; 20
    5050:	69 2f       	mov	r22, r25
    5052:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(LCD_D5_PIN, GET_BIT(copy_u8Byte, 5));
    5056:	89 ad       	ldd	r24, Y+57	; 0x39
    5058:	82 95       	swap	r24
    505a:	86 95       	lsr	r24
    505c:	87 70       	andi	r24, 0x07	; 7
    505e:	98 2f       	mov	r25, r24
    5060:	91 70       	andi	r25, 0x01	; 1
    5062:	85 e1       	ldi	r24, 0x15	; 21
    5064:	69 2f       	mov	r22, r25
    5066:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(LCD_D6_PIN, GET_BIT(copy_u8Byte, 6));
    506a:	89 ad       	ldd	r24, Y+57	; 0x39
    506c:	82 95       	swap	r24
    506e:	86 95       	lsr	r24
    5070:	86 95       	lsr	r24
    5072:	83 70       	andi	r24, 0x03	; 3
    5074:	98 2f       	mov	r25, r24
    5076:	91 70       	andi	r25, 0x01	; 1
    5078:	86 e1       	ldi	r24, 0x16	; 22
    507a:	69 2f       	mov	r22, r25
    507c:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(LCD_D7_PIN, GET_BIT(copy_u8Byte, 7));
    5080:	89 ad       	ldd	r24, Y+57	; 0x39
    5082:	98 2f       	mov	r25, r24
    5084:	99 1f       	adc	r25, r25
    5086:	99 27       	eor	r25, r25
    5088:	99 1f       	adc	r25, r25
    508a:	88 e1       	ldi	r24, 0x18	; 24
    508c:	69 2f       	mov	r22, r25
    508e:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <M_Dio_void_setPinValue>

	/* Step2: Enable LCD */
	M_Dio_void_setPinValue(LCD_EN_PIN, DIO_HIGH);
    5092:	8c e0       	ldi	r24, 0x0C	; 12
    5094:	61 e0       	ldi	r22, 0x01	; 1
    5096:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <M_Dio_void_setPinValue>
    509a:	80 e0       	ldi	r24, 0x00	; 0
    509c:	90 e0       	ldi	r25, 0x00	; 0
    509e:	a0 e8       	ldi	r26, 0x80	; 128
    50a0:	bf e3       	ldi	r27, 0x3F	; 63
    50a2:	8d ab       	std	Y+53, r24	; 0x35
    50a4:	9e ab       	std	Y+54, r25	; 0x36
    50a6:	af ab       	std	Y+55, r26	; 0x37
    50a8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50aa:	6d a9       	ldd	r22, Y+53	; 0x35
    50ac:	7e a9       	ldd	r23, Y+54	; 0x36
    50ae:	8f a9       	ldd	r24, Y+55	; 0x37
    50b0:	98 ad       	ldd	r25, Y+56	; 0x38
    50b2:	20 e0       	ldi	r18, 0x00	; 0
    50b4:	30 e0       	ldi	r19, 0x00	; 0
    50b6:	4a e7       	ldi	r20, 0x7A	; 122
    50b8:	55 e4       	ldi	r21, 0x45	; 69
    50ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50be:	dc 01       	movw	r26, r24
    50c0:	cb 01       	movw	r24, r22
    50c2:	89 ab       	std	Y+49, r24	; 0x31
    50c4:	9a ab       	std	Y+50, r25	; 0x32
    50c6:	ab ab       	std	Y+51, r26	; 0x33
    50c8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    50ca:	69 a9       	ldd	r22, Y+49	; 0x31
    50cc:	7a a9       	ldd	r23, Y+50	; 0x32
    50ce:	8b a9       	ldd	r24, Y+51	; 0x33
    50d0:	9c a9       	ldd	r25, Y+52	; 0x34
    50d2:	20 e0       	ldi	r18, 0x00	; 0
    50d4:	30 e0       	ldi	r19, 0x00	; 0
    50d6:	40 e8       	ldi	r20, 0x80	; 128
    50d8:	5f e3       	ldi	r21, 0x3F	; 63
    50da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    50de:	88 23       	and	r24, r24
    50e0:	2c f4       	brge	.+10     	; 0x50ec <H_LCD_void_latchByte+0xbe>
		__ticks = 1;
    50e2:	81 e0       	ldi	r24, 0x01	; 1
    50e4:	90 e0       	ldi	r25, 0x00	; 0
    50e6:	98 ab       	std	Y+48, r25	; 0x30
    50e8:	8f a7       	std	Y+47, r24	; 0x2f
    50ea:	3f c0       	rjmp	.+126    	; 0x516a <H_LCD_void_latchByte+0x13c>
	else if (__tmp > 65535)
    50ec:	69 a9       	ldd	r22, Y+49	; 0x31
    50ee:	7a a9       	ldd	r23, Y+50	; 0x32
    50f0:	8b a9       	ldd	r24, Y+51	; 0x33
    50f2:	9c a9       	ldd	r25, Y+52	; 0x34
    50f4:	20 e0       	ldi	r18, 0x00	; 0
    50f6:	3f ef       	ldi	r19, 0xFF	; 255
    50f8:	4f e7       	ldi	r20, 0x7F	; 127
    50fa:	57 e4       	ldi	r21, 0x47	; 71
    50fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5100:	18 16       	cp	r1, r24
    5102:	4c f5       	brge	.+82     	; 0x5156 <H_LCD_void_latchByte+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5104:	6d a9       	ldd	r22, Y+53	; 0x35
    5106:	7e a9       	ldd	r23, Y+54	; 0x36
    5108:	8f a9       	ldd	r24, Y+55	; 0x37
    510a:	98 ad       	ldd	r25, Y+56	; 0x38
    510c:	20 e0       	ldi	r18, 0x00	; 0
    510e:	30 e0       	ldi	r19, 0x00	; 0
    5110:	40 e2       	ldi	r20, 0x20	; 32
    5112:	51 e4       	ldi	r21, 0x41	; 65
    5114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5118:	dc 01       	movw	r26, r24
    511a:	cb 01       	movw	r24, r22
    511c:	bc 01       	movw	r22, r24
    511e:	cd 01       	movw	r24, r26
    5120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5124:	dc 01       	movw	r26, r24
    5126:	cb 01       	movw	r24, r22
    5128:	98 ab       	std	Y+48, r25	; 0x30
    512a:	8f a7       	std	Y+47, r24	; 0x2f
    512c:	0f c0       	rjmp	.+30     	; 0x514c <H_LCD_void_latchByte+0x11e>
    512e:	80 e9       	ldi	r24, 0x90	; 144
    5130:	91 e0       	ldi	r25, 0x01	; 1
    5132:	9e a7       	std	Y+46, r25	; 0x2e
    5134:	8d a7       	std	Y+45, r24	; 0x2d
    5136:	8d a5       	ldd	r24, Y+45	; 0x2d
    5138:	9e a5       	ldd	r25, Y+46	; 0x2e
    513a:	01 97       	sbiw	r24, 0x01	; 1
    513c:	f1 f7       	brne	.-4      	; 0x513a <H_LCD_void_latchByte+0x10c>
    513e:	9e a7       	std	Y+46, r25	; 0x2e
    5140:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5142:	8f a5       	ldd	r24, Y+47	; 0x2f
    5144:	98 a9       	ldd	r25, Y+48	; 0x30
    5146:	01 97       	sbiw	r24, 0x01	; 1
    5148:	98 ab       	std	Y+48, r25	; 0x30
    514a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    514c:	8f a5       	ldd	r24, Y+47	; 0x2f
    514e:	98 a9       	ldd	r25, Y+48	; 0x30
    5150:	00 97       	sbiw	r24, 0x00	; 0
    5152:	69 f7       	brne	.-38     	; 0x512e <H_LCD_void_latchByte+0x100>
    5154:	14 c0       	rjmp	.+40     	; 0x517e <H_LCD_void_latchByte+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5156:	69 a9       	ldd	r22, Y+49	; 0x31
    5158:	7a a9       	ldd	r23, Y+50	; 0x32
    515a:	8b a9       	ldd	r24, Y+51	; 0x33
    515c:	9c a9       	ldd	r25, Y+52	; 0x34
    515e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5162:	dc 01       	movw	r26, r24
    5164:	cb 01       	movw	r24, r22
    5166:	98 ab       	std	Y+48, r25	; 0x30
    5168:	8f a7       	std	Y+47, r24	; 0x2f
    516a:	8f a5       	ldd	r24, Y+47	; 0x2f
    516c:	98 a9       	ldd	r25, Y+48	; 0x30
    516e:	9c a7       	std	Y+44, r25	; 0x2c
    5170:	8b a7       	std	Y+43, r24	; 0x2b
    5172:	8b a5       	ldd	r24, Y+43	; 0x2b
    5174:	9c a5       	ldd	r25, Y+44	; 0x2c
    5176:	01 97       	sbiw	r24, 0x01	; 1
    5178:	f1 f7       	brne	.-4      	; 0x5176 <H_LCD_void_latchByte+0x148>
    517a:	9c a7       	std	Y+44, r25	; 0x2c
    517c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	/* Step3: disable LCD */
	M_Dio_void_setPinValue(LCD_EN_PIN, DIO_LOW);
    517e:	8c e0       	ldi	r24, 0x0C	; 12
    5180:	60 e0       	ldi	r22, 0x00	; 0
    5182:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <M_Dio_void_setPinValue>
    5186:	80 e0       	ldi	r24, 0x00	; 0
    5188:	90 e0       	ldi	r25, 0x00	; 0
    518a:	a0 e4       	ldi	r26, 0x40	; 64
    518c:	b0 e4       	ldi	r27, 0x40	; 64
    518e:	8f a3       	std	Y+39, r24	; 0x27
    5190:	98 a7       	std	Y+40, r25	; 0x28
    5192:	a9 a7       	std	Y+41, r26	; 0x29
    5194:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5196:	6f a1       	ldd	r22, Y+39	; 0x27
    5198:	78 a5       	ldd	r23, Y+40	; 0x28
    519a:	89 a5       	ldd	r24, Y+41	; 0x29
    519c:	9a a5       	ldd	r25, Y+42	; 0x2a
    519e:	20 e0       	ldi	r18, 0x00	; 0
    51a0:	30 e0       	ldi	r19, 0x00	; 0
    51a2:	4a e7       	ldi	r20, 0x7A	; 122
    51a4:	55 e4       	ldi	r21, 0x45	; 69
    51a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51aa:	dc 01       	movw	r26, r24
    51ac:	cb 01       	movw	r24, r22
    51ae:	8b a3       	std	Y+35, r24	; 0x23
    51b0:	9c a3       	std	Y+36, r25	; 0x24
    51b2:	ad a3       	std	Y+37, r26	; 0x25
    51b4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    51b6:	6b a1       	ldd	r22, Y+35	; 0x23
    51b8:	7c a1       	ldd	r23, Y+36	; 0x24
    51ba:	8d a1       	ldd	r24, Y+37	; 0x25
    51bc:	9e a1       	ldd	r25, Y+38	; 0x26
    51be:	20 e0       	ldi	r18, 0x00	; 0
    51c0:	30 e0       	ldi	r19, 0x00	; 0
    51c2:	40 e8       	ldi	r20, 0x80	; 128
    51c4:	5f e3       	ldi	r21, 0x3F	; 63
    51c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    51ca:	88 23       	and	r24, r24
    51cc:	2c f4       	brge	.+10     	; 0x51d8 <H_LCD_void_latchByte+0x1aa>
		__ticks = 1;
    51ce:	81 e0       	ldi	r24, 0x01	; 1
    51d0:	90 e0       	ldi	r25, 0x00	; 0
    51d2:	9a a3       	std	Y+34, r25	; 0x22
    51d4:	89 a3       	std	Y+33, r24	; 0x21
    51d6:	3f c0       	rjmp	.+126    	; 0x5256 <H_LCD_void_latchByte+0x228>
	else if (__tmp > 65535)
    51d8:	6b a1       	ldd	r22, Y+35	; 0x23
    51da:	7c a1       	ldd	r23, Y+36	; 0x24
    51dc:	8d a1       	ldd	r24, Y+37	; 0x25
    51de:	9e a1       	ldd	r25, Y+38	; 0x26
    51e0:	20 e0       	ldi	r18, 0x00	; 0
    51e2:	3f ef       	ldi	r19, 0xFF	; 255
    51e4:	4f e7       	ldi	r20, 0x7F	; 127
    51e6:	57 e4       	ldi	r21, 0x47	; 71
    51e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    51ec:	18 16       	cp	r1, r24
    51ee:	4c f5       	brge	.+82     	; 0x5242 <H_LCD_void_latchByte+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51f0:	6f a1       	ldd	r22, Y+39	; 0x27
    51f2:	78 a5       	ldd	r23, Y+40	; 0x28
    51f4:	89 a5       	ldd	r24, Y+41	; 0x29
    51f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    51f8:	20 e0       	ldi	r18, 0x00	; 0
    51fa:	30 e0       	ldi	r19, 0x00	; 0
    51fc:	40 e2       	ldi	r20, 0x20	; 32
    51fe:	51 e4       	ldi	r21, 0x41	; 65
    5200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5204:	dc 01       	movw	r26, r24
    5206:	cb 01       	movw	r24, r22
    5208:	bc 01       	movw	r22, r24
    520a:	cd 01       	movw	r24, r26
    520c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5210:	dc 01       	movw	r26, r24
    5212:	cb 01       	movw	r24, r22
    5214:	9a a3       	std	Y+34, r25	; 0x22
    5216:	89 a3       	std	Y+33, r24	; 0x21
    5218:	0f c0       	rjmp	.+30     	; 0x5238 <H_LCD_void_latchByte+0x20a>
    521a:	80 e9       	ldi	r24, 0x90	; 144
    521c:	91 e0       	ldi	r25, 0x01	; 1
    521e:	98 a3       	std	Y+32, r25	; 0x20
    5220:	8f 8f       	std	Y+31, r24	; 0x1f
    5222:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5224:	98 a1       	ldd	r25, Y+32	; 0x20
    5226:	01 97       	sbiw	r24, 0x01	; 1
    5228:	f1 f7       	brne	.-4      	; 0x5226 <H_LCD_void_latchByte+0x1f8>
    522a:	98 a3       	std	Y+32, r25	; 0x20
    522c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    522e:	89 a1       	ldd	r24, Y+33	; 0x21
    5230:	9a a1       	ldd	r25, Y+34	; 0x22
    5232:	01 97       	sbiw	r24, 0x01	; 1
    5234:	9a a3       	std	Y+34, r25	; 0x22
    5236:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5238:	89 a1       	ldd	r24, Y+33	; 0x21
    523a:	9a a1       	ldd	r25, Y+34	; 0x22
    523c:	00 97       	sbiw	r24, 0x00	; 0
    523e:	69 f7       	brne	.-38     	; 0x521a <H_LCD_void_latchByte+0x1ec>
    5240:	14 c0       	rjmp	.+40     	; 0x526a <H_LCD_void_latchByte+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5242:	6b a1       	ldd	r22, Y+35	; 0x23
    5244:	7c a1       	ldd	r23, Y+36	; 0x24
    5246:	8d a1       	ldd	r24, Y+37	; 0x25
    5248:	9e a1       	ldd	r25, Y+38	; 0x26
    524a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    524e:	dc 01       	movw	r26, r24
    5250:	cb 01       	movw	r24, r22
    5252:	9a a3       	std	Y+34, r25	; 0x22
    5254:	89 a3       	std	Y+33, r24	; 0x21
    5256:	89 a1       	ldd	r24, Y+33	; 0x21
    5258:	9a a1       	ldd	r25, Y+34	; 0x22
    525a:	9e 8f       	std	Y+30, r25	; 0x1e
    525c:	8d 8f       	std	Y+29, r24	; 0x1d
    525e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5260:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5262:	01 97       	sbiw	r24, 0x01	; 1
    5264:	f1 f7       	brne	.-4      	; 0x5262 <H_LCD_void_latchByte+0x234>
    5266:	9e 8f       	std	Y+30, r25	; 0x1e
    5268:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(3);

	/* Step4: Send lower nibble */
	M_Dio_void_setPinValue(LCD_D4_PIN, GET_BIT(copy_u8Byte, 0));
    526a:	89 ad       	ldd	r24, Y+57	; 0x39
    526c:	98 2f       	mov	r25, r24
    526e:	91 70       	andi	r25, 0x01	; 1
    5270:	84 e1       	ldi	r24, 0x14	; 20
    5272:	69 2f       	mov	r22, r25
    5274:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(LCD_D5_PIN, GET_BIT(copy_u8Byte, 1));
    5278:	89 ad       	ldd	r24, Y+57	; 0x39
    527a:	86 95       	lsr	r24
    527c:	98 2f       	mov	r25, r24
    527e:	91 70       	andi	r25, 0x01	; 1
    5280:	85 e1       	ldi	r24, 0x15	; 21
    5282:	69 2f       	mov	r22, r25
    5284:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(LCD_D6_PIN, GET_BIT(copy_u8Byte, 2));
    5288:	89 ad       	ldd	r24, Y+57	; 0x39
    528a:	86 95       	lsr	r24
    528c:	86 95       	lsr	r24
    528e:	98 2f       	mov	r25, r24
    5290:	91 70       	andi	r25, 0x01	; 1
    5292:	86 e1       	ldi	r24, 0x16	; 22
    5294:	69 2f       	mov	r22, r25
    5296:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(LCD_D7_PIN, GET_BIT(copy_u8Byte, 3));
    529a:	89 ad       	ldd	r24, Y+57	; 0x39
    529c:	86 95       	lsr	r24
    529e:	86 95       	lsr	r24
    52a0:	86 95       	lsr	r24
    52a2:	98 2f       	mov	r25, r24
    52a4:	91 70       	andi	r25, 0x01	; 1
    52a6:	88 e1       	ldi	r24, 0x18	; 24
    52a8:	69 2f       	mov	r22, r25
    52aa:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <M_Dio_void_setPinValue>

	/* Step5: Enable LCD */
	M_Dio_void_setPinValue(LCD_EN_PIN, DIO_HIGH);
    52ae:	8c e0       	ldi	r24, 0x0C	; 12
    52b0:	61 e0       	ldi	r22, 0x01	; 1
    52b2:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <M_Dio_void_setPinValue>
    52b6:	80 e0       	ldi	r24, 0x00	; 0
    52b8:	90 e0       	ldi	r25, 0x00	; 0
    52ba:	a0 e8       	ldi	r26, 0x80	; 128
    52bc:	bf e3       	ldi	r27, 0x3F	; 63
    52be:	89 8f       	std	Y+25, r24	; 0x19
    52c0:	9a 8f       	std	Y+26, r25	; 0x1a
    52c2:	ab 8f       	std	Y+27, r26	; 0x1b
    52c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52c6:	69 8d       	ldd	r22, Y+25	; 0x19
    52c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    52ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    52cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    52ce:	20 e0       	ldi	r18, 0x00	; 0
    52d0:	30 e0       	ldi	r19, 0x00	; 0
    52d2:	4a e7       	ldi	r20, 0x7A	; 122
    52d4:	55 e4       	ldi	r21, 0x45	; 69
    52d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52da:	dc 01       	movw	r26, r24
    52dc:	cb 01       	movw	r24, r22
    52de:	8d 8b       	std	Y+21, r24	; 0x15
    52e0:	9e 8b       	std	Y+22, r25	; 0x16
    52e2:	af 8b       	std	Y+23, r26	; 0x17
    52e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    52e6:	6d 89       	ldd	r22, Y+21	; 0x15
    52e8:	7e 89       	ldd	r23, Y+22	; 0x16
    52ea:	8f 89       	ldd	r24, Y+23	; 0x17
    52ec:	98 8d       	ldd	r25, Y+24	; 0x18
    52ee:	20 e0       	ldi	r18, 0x00	; 0
    52f0:	30 e0       	ldi	r19, 0x00	; 0
    52f2:	40 e8       	ldi	r20, 0x80	; 128
    52f4:	5f e3       	ldi	r21, 0x3F	; 63
    52f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    52fa:	88 23       	and	r24, r24
    52fc:	2c f4       	brge	.+10     	; 0x5308 <H_LCD_void_latchByte+0x2da>
		__ticks = 1;
    52fe:	81 e0       	ldi	r24, 0x01	; 1
    5300:	90 e0       	ldi	r25, 0x00	; 0
    5302:	9c 8b       	std	Y+20, r25	; 0x14
    5304:	8b 8b       	std	Y+19, r24	; 0x13
    5306:	3f c0       	rjmp	.+126    	; 0x5386 <H_LCD_void_latchByte+0x358>
	else if (__tmp > 65535)
    5308:	6d 89       	ldd	r22, Y+21	; 0x15
    530a:	7e 89       	ldd	r23, Y+22	; 0x16
    530c:	8f 89       	ldd	r24, Y+23	; 0x17
    530e:	98 8d       	ldd	r25, Y+24	; 0x18
    5310:	20 e0       	ldi	r18, 0x00	; 0
    5312:	3f ef       	ldi	r19, 0xFF	; 255
    5314:	4f e7       	ldi	r20, 0x7F	; 127
    5316:	57 e4       	ldi	r21, 0x47	; 71
    5318:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    531c:	18 16       	cp	r1, r24
    531e:	4c f5       	brge	.+82     	; 0x5372 <H_LCD_void_latchByte+0x344>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5320:	69 8d       	ldd	r22, Y+25	; 0x19
    5322:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5324:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5326:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5328:	20 e0       	ldi	r18, 0x00	; 0
    532a:	30 e0       	ldi	r19, 0x00	; 0
    532c:	40 e2       	ldi	r20, 0x20	; 32
    532e:	51 e4       	ldi	r21, 0x41	; 65
    5330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5334:	dc 01       	movw	r26, r24
    5336:	cb 01       	movw	r24, r22
    5338:	bc 01       	movw	r22, r24
    533a:	cd 01       	movw	r24, r26
    533c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5340:	dc 01       	movw	r26, r24
    5342:	cb 01       	movw	r24, r22
    5344:	9c 8b       	std	Y+20, r25	; 0x14
    5346:	8b 8b       	std	Y+19, r24	; 0x13
    5348:	0f c0       	rjmp	.+30     	; 0x5368 <H_LCD_void_latchByte+0x33a>
    534a:	80 e9       	ldi	r24, 0x90	; 144
    534c:	91 e0       	ldi	r25, 0x01	; 1
    534e:	9a 8b       	std	Y+18, r25	; 0x12
    5350:	89 8b       	std	Y+17, r24	; 0x11
    5352:	89 89       	ldd	r24, Y+17	; 0x11
    5354:	9a 89       	ldd	r25, Y+18	; 0x12
    5356:	01 97       	sbiw	r24, 0x01	; 1
    5358:	f1 f7       	brne	.-4      	; 0x5356 <H_LCD_void_latchByte+0x328>
    535a:	9a 8b       	std	Y+18, r25	; 0x12
    535c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    535e:	8b 89       	ldd	r24, Y+19	; 0x13
    5360:	9c 89       	ldd	r25, Y+20	; 0x14
    5362:	01 97       	sbiw	r24, 0x01	; 1
    5364:	9c 8b       	std	Y+20, r25	; 0x14
    5366:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5368:	8b 89       	ldd	r24, Y+19	; 0x13
    536a:	9c 89       	ldd	r25, Y+20	; 0x14
    536c:	00 97       	sbiw	r24, 0x00	; 0
    536e:	69 f7       	brne	.-38     	; 0x534a <H_LCD_void_latchByte+0x31c>
    5370:	14 c0       	rjmp	.+40     	; 0x539a <H_LCD_void_latchByte+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5372:	6d 89       	ldd	r22, Y+21	; 0x15
    5374:	7e 89       	ldd	r23, Y+22	; 0x16
    5376:	8f 89       	ldd	r24, Y+23	; 0x17
    5378:	98 8d       	ldd	r25, Y+24	; 0x18
    537a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    537e:	dc 01       	movw	r26, r24
    5380:	cb 01       	movw	r24, r22
    5382:	9c 8b       	std	Y+20, r25	; 0x14
    5384:	8b 8b       	std	Y+19, r24	; 0x13
    5386:	8b 89       	ldd	r24, Y+19	; 0x13
    5388:	9c 89       	ldd	r25, Y+20	; 0x14
    538a:	98 8b       	std	Y+16, r25	; 0x10
    538c:	8f 87       	std	Y+15, r24	; 0x0f
    538e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5390:	98 89       	ldd	r25, Y+16	; 0x10
    5392:	01 97       	sbiw	r24, 0x01	; 1
    5394:	f1 f7       	brne	.-4      	; 0x5392 <H_LCD_void_latchByte+0x364>
    5396:	98 8b       	std	Y+16, r25	; 0x10
    5398:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/* Step6: disable LCD */
	M_Dio_void_setPinValue(LCD_EN_PIN, DIO_LOW);
    539a:	8c e0       	ldi	r24, 0x0C	; 12
    539c:	60 e0       	ldi	r22, 0x00	; 0
    539e:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <M_Dio_void_setPinValue>
    53a2:	80 e0       	ldi	r24, 0x00	; 0
    53a4:	90 e0       	ldi	r25, 0x00	; 0
    53a6:	a0 e4       	ldi	r26, 0x40	; 64
    53a8:	b0 e4       	ldi	r27, 0x40	; 64
    53aa:	8b 87       	std	Y+11, r24	; 0x0b
    53ac:	9c 87       	std	Y+12, r25	; 0x0c
    53ae:	ad 87       	std	Y+13, r26	; 0x0d
    53b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    53b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    53b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    53b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    53ba:	20 e0       	ldi	r18, 0x00	; 0
    53bc:	30 e0       	ldi	r19, 0x00	; 0
    53be:	4a e7       	ldi	r20, 0x7A	; 122
    53c0:	55 e4       	ldi	r21, 0x45	; 69
    53c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53c6:	dc 01       	movw	r26, r24
    53c8:	cb 01       	movw	r24, r22
    53ca:	8f 83       	std	Y+7, r24	; 0x07
    53cc:	98 87       	std	Y+8, r25	; 0x08
    53ce:	a9 87       	std	Y+9, r26	; 0x09
    53d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    53d2:	6f 81       	ldd	r22, Y+7	; 0x07
    53d4:	78 85       	ldd	r23, Y+8	; 0x08
    53d6:	89 85       	ldd	r24, Y+9	; 0x09
    53d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    53da:	20 e0       	ldi	r18, 0x00	; 0
    53dc:	30 e0       	ldi	r19, 0x00	; 0
    53de:	40 e8       	ldi	r20, 0x80	; 128
    53e0:	5f e3       	ldi	r21, 0x3F	; 63
    53e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    53e6:	88 23       	and	r24, r24
    53e8:	2c f4       	brge	.+10     	; 0x53f4 <H_LCD_void_latchByte+0x3c6>
		__ticks = 1;
    53ea:	81 e0       	ldi	r24, 0x01	; 1
    53ec:	90 e0       	ldi	r25, 0x00	; 0
    53ee:	9e 83       	std	Y+6, r25	; 0x06
    53f0:	8d 83       	std	Y+5, r24	; 0x05
    53f2:	3f c0       	rjmp	.+126    	; 0x5472 <H_LCD_void_latchByte+0x444>
	else if (__tmp > 65535)
    53f4:	6f 81       	ldd	r22, Y+7	; 0x07
    53f6:	78 85       	ldd	r23, Y+8	; 0x08
    53f8:	89 85       	ldd	r24, Y+9	; 0x09
    53fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    53fc:	20 e0       	ldi	r18, 0x00	; 0
    53fe:	3f ef       	ldi	r19, 0xFF	; 255
    5400:	4f e7       	ldi	r20, 0x7F	; 127
    5402:	57 e4       	ldi	r21, 0x47	; 71
    5404:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5408:	18 16       	cp	r1, r24
    540a:	4c f5       	brge	.+82     	; 0x545e <H_LCD_void_latchByte+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    540c:	6b 85       	ldd	r22, Y+11	; 0x0b
    540e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5410:	8d 85       	ldd	r24, Y+13	; 0x0d
    5412:	9e 85       	ldd	r25, Y+14	; 0x0e
    5414:	20 e0       	ldi	r18, 0x00	; 0
    5416:	30 e0       	ldi	r19, 0x00	; 0
    5418:	40 e2       	ldi	r20, 0x20	; 32
    541a:	51 e4       	ldi	r21, 0x41	; 65
    541c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5420:	dc 01       	movw	r26, r24
    5422:	cb 01       	movw	r24, r22
    5424:	bc 01       	movw	r22, r24
    5426:	cd 01       	movw	r24, r26
    5428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    542c:	dc 01       	movw	r26, r24
    542e:	cb 01       	movw	r24, r22
    5430:	9e 83       	std	Y+6, r25	; 0x06
    5432:	8d 83       	std	Y+5, r24	; 0x05
    5434:	0f c0       	rjmp	.+30     	; 0x5454 <H_LCD_void_latchByte+0x426>
    5436:	80 e9       	ldi	r24, 0x90	; 144
    5438:	91 e0       	ldi	r25, 0x01	; 1
    543a:	9c 83       	std	Y+4, r25	; 0x04
    543c:	8b 83       	std	Y+3, r24	; 0x03
    543e:	8b 81       	ldd	r24, Y+3	; 0x03
    5440:	9c 81       	ldd	r25, Y+4	; 0x04
    5442:	01 97       	sbiw	r24, 0x01	; 1
    5444:	f1 f7       	brne	.-4      	; 0x5442 <H_LCD_void_latchByte+0x414>
    5446:	9c 83       	std	Y+4, r25	; 0x04
    5448:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    544a:	8d 81       	ldd	r24, Y+5	; 0x05
    544c:	9e 81       	ldd	r25, Y+6	; 0x06
    544e:	01 97       	sbiw	r24, 0x01	; 1
    5450:	9e 83       	std	Y+6, r25	; 0x06
    5452:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5454:	8d 81       	ldd	r24, Y+5	; 0x05
    5456:	9e 81       	ldd	r25, Y+6	; 0x06
    5458:	00 97       	sbiw	r24, 0x00	; 0
    545a:	69 f7       	brne	.-38     	; 0x5436 <H_LCD_void_latchByte+0x408>
    545c:	14 c0       	rjmp	.+40     	; 0x5486 <H_LCD_void_latchByte+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    545e:	6f 81       	ldd	r22, Y+7	; 0x07
    5460:	78 85       	ldd	r23, Y+8	; 0x08
    5462:	89 85       	ldd	r24, Y+9	; 0x09
    5464:	9a 85       	ldd	r25, Y+10	; 0x0a
    5466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    546a:	dc 01       	movw	r26, r24
    546c:	cb 01       	movw	r24, r22
    546e:	9e 83       	std	Y+6, r25	; 0x06
    5470:	8d 83       	std	Y+5, r24	; 0x05
    5472:	8d 81       	ldd	r24, Y+5	; 0x05
    5474:	9e 81       	ldd	r25, Y+6	; 0x06
    5476:	9a 83       	std	Y+2, r25	; 0x02
    5478:	89 83       	std	Y+1, r24	; 0x01
    547a:	89 81       	ldd	r24, Y+1	; 0x01
    547c:	9a 81       	ldd	r25, Y+2	; 0x02
    547e:	01 97       	sbiw	r24, 0x01	; 1
    5480:	f1 f7       	brne	.-4      	; 0x547e <H_LCD_void_latchByte+0x450>
    5482:	9a 83       	std	Y+2, r25	; 0x02
    5484:	89 83       	std	Y+1, r24	; 0x01
	M_Dio_void_setPinValue(LCD_EN_PIN, DIO_LOW);
	_delay_ms(3);

#endif

}
    5486:	e9 96       	adiw	r28, 0x39	; 57
    5488:	0f b6       	in	r0, 0x3f	; 63
    548a:	f8 94       	cli
    548c:	de bf       	out	0x3e, r29	; 62
    548e:	0f be       	out	0x3f, r0	; 63
    5490:	cd bf       	out	0x3d, r28	; 61
    5492:	cf 91       	pop	r28
    5494:	df 91       	pop	r29
    5496:	08 95       	ret

00005498 <H_LCD_void_sendCommand>:

void H_LCD_void_sendCommand(u8 copy_u8command)
{
    5498:	df 93       	push	r29
    549a:	cf 93       	push	r28
    549c:	0f 92       	push	r0
    549e:	cd b7       	in	r28, 0x3d	; 61
    54a0:	de b7       	in	r29, 0x3e	; 62
    54a2:	89 83       	std	Y+1, r24	; 0x01

	M_Dio_void_setPinValue(LCD_RS_PIN, DIO_LOW);
    54a4:	8d e0       	ldi	r24, 0x0D	; 13
    54a6:	60 e0       	ldi	r22, 0x00	; 0
    54a8:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <M_Dio_void_setPinValue>
	H_LCD_void_latchByte(copy_u8command);
    54ac:	89 81       	ldd	r24, Y+1	; 0x01
    54ae:	0e 94 17 28 	call	0x502e	; 0x502e <H_LCD_void_latchByte>


}
    54b2:	0f 90       	pop	r0
    54b4:	cf 91       	pop	r28
    54b6:	df 91       	pop	r29
    54b8:	08 95       	ret

000054ba <H_LCD_void_sendData>:

void H_LCD_void_sendData(u8 copy_u8data ){
    54ba:	df 93       	push	r29
    54bc:	cf 93       	push	r28
    54be:	0f 92       	push	r0
    54c0:	cd b7       	in	r28, 0x3d	; 61
    54c2:	de b7       	in	r29, 0x3e	; 62
    54c4:	89 83       	std	Y+1, r24	; 0x01

	M_Dio_void_setPinValue(LCD_RS_PIN, DIO_HIGH);
    54c6:	8d e0       	ldi	r24, 0x0D	; 13
    54c8:	61 e0       	ldi	r22, 0x01	; 1
    54ca:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <M_Dio_void_setPinValue>

	H_LCD_void_latchByte(copy_u8data);
    54ce:	89 81       	ldd	r24, Y+1	; 0x01
    54d0:	0e 94 17 28 	call	0x502e	; 0x502e <H_LCD_void_latchByte>

}
    54d4:	0f 90       	pop	r0
    54d6:	cf 91       	pop	r28
    54d8:	df 91       	pop	r29
    54da:	08 95       	ret

000054dc <H_LCD_void_sendString>:

void H_LCD_void_sendString( char  * pstr)
{
    54dc:	df 93       	push	r29
    54de:	cf 93       	push	r28
    54e0:	00 d0       	rcall	.+0      	; 0x54e2 <H_LCD_void_sendString+0x6>
    54e2:	00 d0       	rcall	.+0      	; 0x54e4 <H_LCD_void_sendString+0x8>
    54e4:	cd b7       	in	r28, 0x3d	; 61
    54e6:	de b7       	in	r29, 0x3e	; 62
    54e8:	9c 83       	std	Y+4, r25	; 0x04
    54ea:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;pstr[i]!=0;i++)  /* send each char of string till the NULL */
    54ec:	1a 82       	std	Y+2, r1	; 0x02
    54ee:	19 82       	std	Y+1, r1	; 0x01
    54f0:	0f c0       	rjmp	.+30     	; 0x5510 <H_LCD_void_sendString+0x34>
	{
		H_LCD_void_sendData (pstr[i]);  /* call LCD data write */
    54f2:	29 81       	ldd	r18, Y+1	; 0x01
    54f4:	3a 81       	ldd	r19, Y+2	; 0x02
    54f6:	8b 81       	ldd	r24, Y+3	; 0x03
    54f8:	9c 81       	ldd	r25, Y+4	; 0x04
    54fa:	fc 01       	movw	r30, r24
    54fc:	e2 0f       	add	r30, r18
    54fe:	f3 1f       	adc	r31, r19
    5500:	80 81       	ld	r24, Z
    5502:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <H_LCD_void_sendData>
}

void H_LCD_void_sendString( char  * pstr)
{
	int i;
	for(i=0;pstr[i]!=0;i++)  /* send each char of string till the NULL */
    5506:	89 81       	ldd	r24, Y+1	; 0x01
    5508:	9a 81       	ldd	r25, Y+2	; 0x02
    550a:	01 96       	adiw	r24, 0x01	; 1
    550c:	9a 83       	std	Y+2, r25	; 0x02
    550e:	89 83       	std	Y+1, r24	; 0x01
    5510:	29 81       	ldd	r18, Y+1	; 0x01
    5512:	3a 81       	ldd	r19, Y+2	; 0x02
    5514:	8b 81       	ldd	r24, Y+3	; 0x03
    5516:	9c 81       	ldd	r25, Y+4	; 0x04
    5518:	fc 01       	movw	r30, r24
    551a:	e2 0f       	add	r30, r18
    551c:	f3 1f       	adc	r31, r19
    551e:	80 81       	ld	r24, Z
    5520:	88 23       	and	r24, r24
    5522:	39 f7       	brne	.-50     	; 0x54f2 <H_LCD_void_sendString+0x16>

	}



}
    5524:	0f 90       	pop	r0
    5526:	0f 90       	pop	r0
    5528:	0f 90       	pop	r0
    552a:	0f 90       	pop	r0
    552c:	cf 91       	pop	r28
    552e:	df 91       	pop	r29
    5530:	08 95       	ret

00005532 <H_LCD_void_sendIntNum>:
void H_LCD_void_sendIntNum(s32 copy_s32Num)
{
    5532:	df 93       	push	r29
    5534:	cf 93       	push	r28
    5536:	cd b7       	in	r28, 0x3d	; 61
    5538:	de b7       	in	r29, 0x3e	; 62
    553a:	ac 97       	sbiw	r28, 0x2c	; 44
    553c:	0f b6       	in	r0, 0x3f	; 63
    553e:	f8 94       	cli
    5540:	de bf       	out	0x3e, r29	; 62
    5542:	0f be       	out	0x3f, r0	; 63
    5544:	cd bf       	out	0x3d, r28	; 61
    5546:	69 a7       	std	Y+41, r22	; 0x29
    5548:	7a a7       	std	Y+42, r23	; 0x2a
    554a:	8b a7       	std	Y+43, r24	; 0x2b
    554c:	9c a7       	std	Y+44, r25	; 0x2c

	u16 num_string[20];

	if(copy_s32Num > 0)
    554e:	89 a5       	ldd	r24, Y+41	; 0x29
    5550:	9a a5       	ldd	r25, Y+42	; 0x2a
    5552:	ab a5       	ldd	r26, Y+43	; 0x2b
    5554:	bc a5       	ldd	r27, Y+44	; 0x2c
    5556:	18 16       	cp	r1, r24
    5558:	19 06       	cpc	r1, r25
    555a:	1a 06       	cpc	r1, r26
    555c:	1b 06       	cpc	r1, r27
    555e:	7c f4       	brge	.+30     	; 0x557e <H_LCD_void_sendIntNum+0x4c>
	{
		itoa(copy_s32Num, num_string, 10);
    5560:	89 a5       	ldd	r24, Y+41	; 0x29
    5562:	9a a5       	ldd	r25, Y+42	; 0x2a
    5564:	9e 01       	movw	r18, r28
    5566:	2f 5f       	subi	r18, 0xFF	; 255
    5568:	3f 4f       	sbci	r19, 0xFF	; 255
    556a:	b9 01       	movw	r22, r18
    556c:	4a e0       	ldi	r20, 0x0A	; 10
    556e:	50 e0       	ldi	r21, 0x00	; 0
    5570:	0e 94 ac 36 	call	0x6d58	; 0x6d58 <itoa>
		H_LCD_void_sendString(num_string);
    5574:	ce 01       	movw	r24, r28
    5576:	01 96       	adiw	r24, 0x01	; 1
    5578:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <H_LCD_void_sendString>
    557c:	26 c0       	rjmp	.+76     	; 0x55ca <H_LCD_void_sendIntNum+0x98>
	}

	else if(copy_s32Num < 0)
    557e:	89 a5       	ldd	r24, Y+41	; 0x29
    5580:	9a a5       	ldd	r25, Y+42	; 0x2a
    5582:	ab a5       	ldd	r26, Y+43	; 0x2b
    5584:	bc a5       	ldd	r27, Y+44	; 0x2c
    5586:	bb 23       	and	r27, r27
    5588:	04 f5       	brge	.+64     	; 0x55ca <H_LCD_void_sendIntNum+0x98>
	{
		H_LCD_void_sendData ('-');
    558a:	8d e2       	ldi	r24, 0x2D	; 45
    558c:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <H_LCD_void_sendData>
		copy_s32Num *= -1;
    5590:	89 a5       	ldd	r24, Y+41	; 0x29
    5592:	9a a5       	ldd	r25, Y+42	; 0x2a
    5594:	ab a5       	ldd	r26, Y+43	; 0x2b
    5596:	bc a5       	ldd	r27, Y+44	; 0x2c
    5598:	b0 95       	com	r27
    559a:	a0 95       	com	r26
    559c:	90 95       	com	r25
    559e:	81 95       	neg	r24
    55a0:	9f 4f       	sbci	r25, 0xFF	; 255
    55a2:	af 4f       	sbci	r26, 0xFF	; 255
    55a4:	bf 4f       	sbci	r27, 0xFF	; 255
    55a6:	89 a7       	std	Y+41, r24	; 0x29
    55a8:	9a a7       	std	Y+42, r25	; 0x2a
    55aa:	ab a7       	std	Y+43, r26	; 0x2b
    55ac:	bc a7       	std	Y+44, r27	; 0x2c
		itoa(copy_s32Num, num_string, 10);
    55ae:	89 a5       	ldd	r24, Y+41	; 0x29
    55b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    55b2:	9e 01       	movw	r18, r28
    55b4:	2f 5f       	subi	r18, 0xFF	; 255
    55b6:	3f 4f       	sbci	r19, 0xFF	; 255
    55b8:	b9 01       	movw	r22, r18
    55ba:	4a e0       	ldi	r20, 0x0A	; 10
    55bc:	50 e0       	ldi	r21, 0x00	; 0
    55be:	0e 94 ac 36 	call	0x6d58	; 0x6d58 <itoa>
		H_LCD_void_sendString(num_string);
    55c2:	ce 01       	movw	r24, r28
    55c4:	01 96       	adiw	r24, 0x01	; 1
    55c6:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <H_LCD_void_sendString>

	}


	*/
}
    55ca:	ac 96       	adiw	r28, 0x2c	; 44
    55cc:	0f b6       	in	r0, 0x3f	; 63
    55ce:	f8 94       	cli
    55d0:	de bf       	out	0x3e, r29	; 62
    55d2:	0f be       	out	0x3f, r0	; 63
    55d4:	cd bf       	out	0x3d, r28	; 61
    55d6:	cf 91       	pop	r28
    55d8:	df 91       	pop	r29
    55da:	08 95       	ret

000055dc <H_LCD_void_gotoXY>:


void H_LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col)
{
    55dc:	df 93       	push	r29
    55de:	cf 93       	push	r28
    55e0:	cd b7       	in	r28, 0x3d	; 61
    55e2:	de b7       	in	r29, 0x3e	; 62
    55e4:	2c 97       	sbiw	r28, 0x0c	; 12
    55e6:	0f b6       	in	r0, 0x3f	; 63
    55e8:	f8 94       	cli
    55ea:	de bf       	out	0x3e, r29	; 62
    55ec:	0f be       	out	0x3f, r0	; 63
    55ee:	cd bf       	out	0x3d, r28	; 61
    55f0:	89 87       	std	Y+9, r24	; 0x09
    55f2:	6a 87       	std	Y+10, r22	; 0x0a

	switch(copy_u8Row)
    55f4:	89 85       	ldd	r24, Y+9	; 0x09
    55f6:	28 2f       	mov	r18, r24
    55f8:	30 e0       	ldi	r19, 0x00	; 0
    55fa:	3c 87       	std	Y+12, r19	; 0x0c
    55fc:	2b 87       	std	Y+11, r18	; 0x0b
    55fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    5600:	9c 85       	ldd	r25, Y+12	; 0x0c
    5602:	82 30       	cpi	r24, 0x02	; 2
    5604:	91 05       	cpc	r25, r1
    5606:	71 f1       	breq	.+92     	; 0x5664 <H_LCD_void_gotoXY+0x88>
    5608:	2b 85       	ldd	r18, Y+11	; 0x0b
    560a:	3c 85       	ldd	r19, Y+12	; 0x0c
    560c:	23 30       	cpi	r18, 0x03	; 3
    560e:	31 05       	cpc	r19, r1
    5610:	34 f4       	brge	.+12     	; 0x561e <H_LCD_void_gotoXY+0x42>
    5612:	8b 85       	ldd	r24, Y+11	; 0x0b
    5614:	9c 85       	ldd	r25, Y+12	; 0x0c
    5616:	81 30       	cpi	r24, 0x01	; 1
    5618:	91 05       	cpc	r25, r1
    561a:	69 f0       	breq	.+26     	; 0x5636 <H_LCD_void_gotoXY+0x5a>
    561c:	67 c0       	rjmp	.+206    	; 0x56ec <H_LCD_void_gotoXY+0x110>
    561e:	2b 85       	ldd	r18, Y+11	; 0x0b
    5620:	3c 85       	ldd	r19, Y+12	; 0x0c
    5622:	23 30       	cpi	r18, 0x03	; 3
    5624:	31 05       	cpc	r19, r1
    5626:	a9 f1       	breq	.+106    	; 0x5692 <H_LCD_void_gotoXY+0xb6>
    5628:	8b 85       	ldd	r24, Y+11	; 0x0b
    562a:	9c 85       	ldd	r25, Y+12	; 0x0c
    562c:	84 30       	cpi	r24, 0x04	; 4
    562e:	91 05       	cpc	r25, r1
    5630:	09 f4       	brne	.+2      	; 0x5634 <H_LCD_void_gotoXY+0x58>
    5632:	46 c0       	rjmp	.+140    	; 0x56c0 <H_LCD_void_gotoXY+0xe4>
    5634:	5b c0       	rjmp	.+182    	; 0x56ec <H_LCD_void_gotoXY+0x110>
	{

		case 1:	H_LCD_void_sendCommand(LCD_SEND_CURSOR_BEGINING_LINE1);
    5636:	80 e8       	ldi	r24, 0x80	; 128
    5638:	0e 94 4c 2a 	call	0x5498	; 0x5498 <H_LCD_void_sendCommand>
				for(int i =0; i<copy_u8Col; i++)
    563c:	18 86       	std	Y+8, r1	; 0x08
    563e:	1f 82       	std	Y+7, r1	; 0x07
    5640:	08 c0       	rjmp	.+16     	; 0x5652 <H_LCD_void_gotoXY+0x76>
				{
					H_LCD_void_sendCommand(LCD_SHIF_CURSOR_RIGHT);
    5642:	84 e1       	ldi	r24, 0x14	; 20
    5644:	0e 94 4c 2a 	call	0x5498	; 0x5498 <H_LCD_void_sendCommand>

	switch(copy_u8Row)
	{

		case 1:	H_LCD_void_sendCommand(LCD_SEND_CURSOR_BEGINING_LINE1);
				for(int i =0; i<copy_u8Col; i++)
    5648:	8f 81       	ldd	r24, Y+7	; 0x07
    564a:	98 85       	ldd	r25, Y+8	; 0x08
    564c:	01 96       	adiw	r24, 0x01	; 1
    564e:	98 87       	std	Y+8, r25	; 0x08
    5650:	8f 83       	std	Y+7, r24	; 0x07
    5652:	8a 85       	ldd	r24, Y+10	; 0x0a
    5654:	28 2f       	mov	r18, r24
    5656:	30 e0       	ldi	r19, 0x00	; 0
    5658:	8f 81       	ldd	r24, Y+7	; 0x07
    565a:	98 85       	ldd	r25, Y+8	; 0x08
    565c:	82 17       	cp	r24, r18
    565e:	93 07       	cpc	r25, r19
    5660:	84 f3       	brlt	.-32     	; 0x5642 <H_LCD_void_gotoXY+0x66>
    5662:	44 c0       	rjmp	.+136    	; 0x56ec <H_LCD_void_gotoXY+0x110>
				{
					H_LCD_void_sendCommand(LCD_SHIF_CURSOR_RIGHT);
				}
				break;

		case 2:	H_LCD_void_sendCommand(LCD_SEND_CURSOR_BEGINING_LINE2);
    5664:	80 ec       	ldi	r24, 0xC0	; 192
    5666:	0e 94 4c 2a 	call	0x5498	; 0x5498 <H_LCD_void_sendCommand>
				for(int i =0; i<copy_u8Col; i++)
    566a:	1e 82       	std	Y+6, r1	; 0x06
    566c:	1d 82       	std	Y+5, r1	; 0x05
    566e:	08 c0       	rjmp	.+16     	; 0x5680 <H_LCD_void_gotoXY+0xa4>
				{
					H_LCD_void_sendCommand(LCD_SHIF_CURSOR_RIGHT);
    5670:	84 e1       	ldi	r24, 0x14	; 20
    5672:	0e 94 4c 2a 	call	0x5498	; 0x5498 <H_LCD_void_sendCommand>
					H_LCD_void_sendCommand(LCD_SHIF_CURSOR_RIGHT);
				}
				break;

		case 2:	H_LCD_void_sendCommand(LCD_SEND_CURSOR_BEGINING_LINE2);
				for(int i =0; i<copy_u8Col; i++)
    5676:	8d 81       	ldd	r24, Y+5	; 0x05
    5678:	9e 81       	ldd	r25, Y+6	; 0x06
    567a:	01 96       	adiw	r24, 0x01	; 1
    567c:	9e 83       	std	Y+6, r25	; 0x06
    567e:	8d 83       	std	Y+5, r24	; 0x05
    5680:	8a 85       	ldd	r24, Y+10	; 0x0a
    5682:	28 2f       	mov	r18, r24
    5684:	30 e0       	ldi	r19, 0x00	; 0
    5686:	8d 81       	ldd	r24, Y+5	; 0x05
    5688:	9e 81       	ldd	r25, Y+6	; 0x06
    568a:	82 17       	cp	r24, r18
    568c:	93 07       	cpc	r25, r19
    568e:	84 f3       	brlt	.-32     	; 0x5670 <H_LCD_void_gotoXY+0x94>
    5690:	2d c0       	rjmp	.+90     	; 0x56ec <H_LCD_void_gotoXY+0x110>
				{
					H_LCD_void_sendCommand(LCD_SHIF_CURSOR_RIGHT);
				}
				break;

		case 3:	H_LCD_void_sendCommand(LCD_SEND_CURSOR_BEGINING_LINE3);
    5692:	84 e9       	ldi	r24, 0x94	; 148
    5694:	0e 94 4c 2a 	call	0x5498	; 0x5498 <H_LCD_void_sendCommand>
				for(int i =0; i<copy_u8Col; i++)
    5698:	1c 82       	std	Y+4, r1	; 0x04
    569a:	1b 82       	std	Y+3, r1	; 0x03
    569c:	08 c0       	rjmp	.+16     	; 0x56ae <H_LCD_void_gotoXY+0xd2>
				{
					H_LCD_void_sendCommand(LCD_SHIF_CURSOR_RIGHT);
    569e:	84 e1       	ldi	r24, 0x14	; 20
    56a0:	0e 94 4c 2a 	call	0x5498	; 0x5498 <H_LCD_void_sendCommand>
					H_LCD_void_sendCommand(LCD_SHIF_CURSOR_RIGHT);
				}
				break;

		case 3:	H_LCD_void_sendCommand(LCD_SEND_CURSOR_BEGINING_LINE3);
				for(int i =0; i<copy_u8Col; i++)
    56a4:	8b 81       	ldd	r24, Y+3	; 0x03
    56a6:	9c 81       	ldd	r25, Y+4	; 0x04
    56a8:	01 96       	adiw	r24, 0x01	; 1
    56aa:	9c 83       	std	Y+4, r25	; 0x04
    56ac:	8b 83       	std	Y+3, r24	; 0x03
    56ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    56b0:	28 2f       	mov	r18, r24
    56b2:	30 e0       	ldi	r19, 0x00	; 0
    56b4:	8b 81       	ldd	r24, Y+3	; 0x03
    56b6:	9c 81       	ldd	r25, Y+4	; 0x04
    56b8:	82 17       	cp	r24, r18
    56ba:	93 07       	cpc	r25, r19
    56bc:	84 f3       	brlt	.-32     	; 0x569e <H_LCD_void_gotoXY+0xc2>
    56be:	16 c0       	rjmp	.+44     	; 0x56ec <H_LCD_void_gotoXY+0x110>
				{
					H_LCD_void_sendCommand(LCD_SHIF_CURSOR_RIGHT);
				}
				break;

		case 4:	H_LCD_void_sendCommand(LCD_SEND_CURSOR_BEGINING_LINE4);
    56c0:	84 ed       	ldi	r24, 0xD4	; 212
    56c2:	0e 94 4c 2a 	call	0x5498	; 0x5498 <H_LCD_void_sendCommand>
				for(int i =0; i<copy_u8Col; i++)
    56c6:	1a 82       	std	Y+2, r1	; 0x02
    56c8:	19 82       	std	Y+1, r1	; 0x01
    56ca:	08 c0       	rjmp	.+16     	; 0x56dc <H_LCD_void_gotoXY+0x100>
				{
					H_LCD_void_sendCommand(LCD_SHIF_CURSOR_RIGHT);
    56cc:	84 e1       	ldi	r24, 0x14	; 20
    56ce:	0e 94 4c 2a 	call	0x5498	; 0x5498 <H_LCD_void_sendCommand>
					H_LCD_void_sendCommand(LCD_SHIF_CURSOR_RIGHT);
				}
				break;

		case 4:	H_LCD_void_sendCommand(LCD_SEND_CURSOR_BEGINING_LINE4);
				for(int i =0; i<copy_u8Col; i++)
    56d2:	89 81       	ldd	r24, Y+1	; 0x01
    56d4:	9a 81       	ldd	r25, Y+2	; 0x02
    56d6:	01 96       	adiw	r24, 0x01	; 1
    56d8:	9a 83       	std	Y+2, r25	; 0x02
    56da:	89 83       	std	Y+1, r24	; 0x01
    56dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    56de:	28 2f       	mov	r18, r24
    56e0:	30 e0       	ldi	r19, 0x00	; 0
    56e2:	89 81       	ldd	r24, Y+1	; 0x01
    56e4:	9a 81       	ldd	r25, Y+2	; 0x02
    56e6:	82 17       	cp	r24, r18
    56e8:	93 07       	cpc	r25, r19
    56ea:	84 f3       	brlt	.-32     	; 0x56cc <H_LCD_void_gotoXY+0xf0>
				break;

	}


}
    56ec:	2c 96       	adiw	r28, 0x0c	; 12
    56ee:	0f b6       	in	r0, 0x3f	; 63
    56f0:	f8 94       	cli
    56f2:	de bf       	out	0x3e, r29	; 62
    56f4:	0f be       	out	0x3f, r0	; 63
    56f6:	cd bf       	out	0x3d, r28	; 61
    56f8:	cf 91       	pop	r28
    56fa:	df 91       	pop	r29
    56fc:	08 95       	ret

000056fe <H_LCD_void_creatCustomChar>:
void H_LCD_void_creatCustomChar (const u8 * ArrPattern,u8 copy_u8charCode)
{
    56fe:	df 93       	push	r29
    5700:	cf 93       	push	r28
    5702:	00 d0       	rcall	.+0      	; 0x5704 <H_LCD_void_creatCustomChar+0x6>
    5704:	00 d0       	rcall	.+0      	; 0x5706 <H_LCD_void_creatCustomChar+0x8>
    5706:	cd b7       	in	r28, 0x3d	; 61
    5708:	de b7       	in	r29, 0x3e	; 62
    570a:	9b 83       	std	Y+3, r25	; 0x03
    570c:	8a 83       	std	Y+2, r24	; 0x02
    570e:	6c 83       	std	Y+4, r22	; 0x04

	u8 i;

	if(copy_u8charCode < 8)
    5710:	8c 81       	ldd	r24, Y+4	; 0x04
    5712:	88 30       	cpi	r24, 0x08	; 8
    5714:	f8 f4       	brcc	.+62     	; 0x5754 <H_LCD_void_creatCustomChar+0x56>
	{
		/* select the CGRAM address to store the custom character   */
		H_LCD_void_sendCommand(LCD_CGRAM_START_ADDRESS + (copy_u8charCode * 8));
    5716:	8c 81       	ldd	r24, Y+4	; 0x04
    5718:	88 2f       	mov	r24, r24
    571a:	90 e0       	ldi	r25, 0x00	; 0
    571c:	08 96       	adiw	r24, 0x08	; 8
    571e:	88 0f       	add	r24, r24
    5720:	99 1f       	adc	r25, r25
    5722:	88 0f       	add	r24, r24
    5724:	99 1f       	adc	r25, r25
    5726:	88 0f       	add	r24, r24
    5728:	99 1f       	adc	r25, r25
    572a:	0e 94 4c 2a 	call	0x5498	; 0x5498 <H_LCD_void_sendCommand>

		/* store the custom character patterin into CGRAM   */
		for(i =0; i<8; i++)
    572e:	19 82       	std	Y+1, r1	; 0x01
    5730:	0e c0       	rjmp	.+28     	; 0x574e <H_LCD_void_creatCustomChar+0x50>
		{
			H_LCD_void_sendData(ArrPattern[i]);
    5732:	89 81       	ldd	r24, Y+1	; 0x01
    5734:	28 2f       	mov	r18, r24
    5736:	30 e0       	ldi	r19, 0x00	; 0
    5738:	8a 81       	ldd	r24, Y+2	; 0x02
    573a:	9b 81       	ldd	r25, Y+3	; 0x03
    573c:	fc 01       	movw	r30, r24
    573e:	e2 0f       	add	r30, r18
    5740:	f3 1f       	adc	r31, r19
    5742:	80 81       	ld	r24, Z
    5744:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <H_LCD_void_sendData>
	{
		/* select the CGRAM address to store the custom character   */
		H_LCD_void_sendCommand(LCD_CGRAM_START_ADDRESS + (copy_u8charCode * 8));

		/* store the custom character patterin into CGRAM   */
		for(i =0; i<8; i++)
    5748:	89 81       	ldd	r24, Y+1	; 0x01
    574a:	8f 5f       	subi	r24, 0xFF	; 255
    574c:	89 83       	std	Y+1, r24	; 0x01
    574e:	89 81       	ldd	r24, Y+1	; 0x01
    5750:	88 30       	cpi	r24, 0x08	; 8
    5752:	78 f3       	brcs	.-34     	; 0x5732 <H_LCD_void_creatCustomChar+0x34>
	}

	/* Return to DDRAM address 0x00 */
	//H_LCD_void_sendCommand(LCD_SET_DDRAM_ADDR);

}
    5754:	0f 90       	pop	r0
    5756:	0f 90       	pop	r0
    5758:	0f 90       	pop	r0
    575a:	0f 90       	pop	r0
    575c:	cf 91       	pop	r28
    575e:	df 91       	pop	r29
    5760:	08 95       	ret

00005762 <H_LCD_void_displayCustomChar>:
void H_LCD_void_displayCustomChar(u8 copy_u8charCode)
{
    5762:	df 93       	push	r29
    5764:	cf 93       	push	r28
    5766:	0f 92       	push	r0
    5768:	cd b7       	in	r28, 0x3d	; 61
    576a:	de b7       	in	r29, 0x3e	; 62
    576c:	89 83       	std	Y+1, r24	; 0x01

	/* Set DDRAM address where the custom character will be displayed  */
	//H_LCD_void_sendCommand(LCD_SET_DDRAM_ADDR + copy_u8charCode );

	/* Send the data to be displayed on LCD  */
	H_LCD_void_sendData(copy_u8charCode);
    576e:	89 81       	ldd	r24, Y+1	; 0x01
    5770:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <H_LCD_void_sendData>
}
    5774:	0f 90       	pop	r0
    5776:	cf 91       	pop	r28
    5778:	df 91       	pop	r29
    577a:	08 95       	ret

0000577c <H_LCD_void_Clear_Display>:

void H_LCD_void_Clear_Display()
{
    577c:	df 93       	push	r29
    577e:	cf 93       	push	r28
    5780:	cd b7       	in	r28, 0x3d	; 61
    5782:	de b7       	in	r29, 0x3e	; 62

	H_LCD_void_sendCommand(LCD_CLEAR_DISPLAY);
    5784:	81 e0       	ldi	r24, 0x01	; 1
    5786:	0e 94 4c 2a 	call	0x5498	; 0x5498 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_SEND_CURSOR_BEGINING_LINE1);
    578a:	80 e8       	ldi	r24, 0x80	; 128
    578c:	0e 94 4c 2a 	call	0x5498	; 0x5498 <H_LCD_void_sendCommand>

}
    5790:	cf 91       	pop	r28
    5792:	df 91       	pop	r29
    5794:	08 95       	ret

00005796 <H_LCD_void_Init>:


void H_LCD_void_Init(void)
{
    5796:	df 93       	push	r29
    5798:	cf 93       	push	r28
    579a:	cd b7       	in	r28, 0x3d	; 61
    579c:	de b7       	in	r29, 0x3e	; 62
    579e:	2e 97       	sbiw	r28, 0x0e	; 14
    57a0:	0f b6       	in	r0, 0x3f	; 63
    57a2:	f8 94       	cli
    57a4:	de bf       	out	0x3e, r29	; 62
    57a6:	0f be       	out	0x3f, r0	; 63
    57a8:	cd bf       	out	0x3d, r28	; 61
    57aa:	80 e0       	ldi	r24, 0x00	; 0
    57ac:	90 e0       	ldi	r25, 0x00	; 0
    57ae:	a0 e2       	ldi	r26, 0x20	; 32
    57b0:	b2 e4       	ldi	r27, 0x42	; 66
    57b2:	8b 87       	std	Y+11, r24	; 0x0b
    57b4:	9c 87       	std	Y+12, r25	; 0x0c
    57b6:	ad 87       	std	Y+13, r26	; 0x0d
    57b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    57bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    57be:	8d 85       	ldd	r24, Y+13	; 0x0d
    57c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    57c2:	20 e0       	ldi	r18, 0x00	; 0
    57c4:	30 e0       	ldi	r19, 0x00	; 0
    57c6:	4a e7       	ldi	r20, 0x7A	; 122
    57c8:	55 e4       	ldi	r21, 0x45	; 69
    57ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57ce:	dc 01       	movw	r26, r24
    57d0:	cb 01       	movw	r24, r22
    57d2:	8f 83       	std	Y+7, r24	; 0x07
    57d4:	98 87       	std	Y+8, r25	; 0x08
    57d6:	a9 87       	std	Y+9, r26	; 0x09
    57d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    57da:	6f 81       	ldd	r22, Y+7	; 0x07
    57dc:	78 85       	ldd	r23, Y+8	; 0x08
    57de:	89 85       	ldd	r24, Y+9	; 0x09
    57e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    57e2:	20 e0       	ldi	r18, 0x00	; 0
    57e4:	30 e0       	ldi	r19, 0x00	; 0
    57e6:	40 e8       	ldi	r20, 0x80	; 128
    57e8:	5f e3       	ldi	r21, 0x3F	; 63
    57ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    57ee:	88 23       	and	r24, r24
    57f0:	2c f4       	brge	.+10     	; 0x57fc <H_LCD_void_Init+0x66>
		__ticks = 1;
    57f2:	81 e0       	ldi	r24, 0x01	; 1
    57f4:	90 e0       	ldi	r25, 0x00	; 0
    57f6:	9e 83       	std	Y+6, r25	; 0x06
    57f8:	8d 83       	std	Y+5, r24	; 0x05
    57fa:	3f c0       	rjmp	.+126    	; 0x587a <H_LCD_void_Init+0xe4>
	else if (__tmp > 65535)
    57fc:	6f 81       	ldd	r22, Y+7	; 0x07
    57fe:	78 85       	ldd	r23, Y+8	; 0x08
    5800:	89 85       	ldd	r24, Y+9	; 0x09
    5802:	9a 85       	ldd	r25, Y+10	; 0x0a
    5804:	20 e0       	ldi	r18, 0x00	; 0
    5806:	3f ef       	ldi	r19, 0xFF	; 255
    5808:	4f e7       	ldi	r20, 0x7F	; 127
    580a:	57 e4       	ldi	r21, 0x47	; 71
    580c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5810:	18 16       	cp	r1, r24
    5812:	4c f5       	brge	.+82     	; 0x5866 <H_LCD_void_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5814:	6b 85       	ldd	r22, Y+11	; 0x0b
    5816:	7c 85       	ldd	r23, Y+12	; 0x0c
    5818:	8d 85       	ldd	r24, Y+13	; 0x0d
    581a:	9e 85       	ldd	r25, Y+14	; 0x0e
    581c:	20 e0       	ldi	r18, 0x00	; 0
    581e:	30 e0       	ldi	r19, 0x00	; 0
    5820:	40 e2       	ldi	r20, 0x20	; 32
    5822:	51 e4       	ldi	r21, 0x41	; 65
    5824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5828:	dc 01       	movw	r26, r24
    582a:	cb 01       	movw	r24, r22
    582c:	bc 01       	movw	r22, r24
    582e:	cd 01       	movw	r24, r26
    5830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5834:	dc 01       	movw	r26, r24
    5836:	cb 01       	movw	r24, r22
    5838:	9e 83       	std	Y+6, r25	; 0x06
    583a:	8d 83       	std	Y+5, r24	; 0x05
    583c:	0f c0       	rjmp	.+30     	; 0x585c <H_LCD_void_Init+0xc6>
    583e:	80 e9       	ldi	r24, 0x90	; 144
    5840:	91 e0       	ldi	r25, 0x01	; 1
    5842:	9c 83       	std	Y+4, r25	; 0x04
    5844:	8b 83       	std	Y+3, r24	; 0x03
    5846:	8b 81       	ldd	r24, Y+3	; 0x03
    5848:	9c 81       	ldd	r25, Y+4	; 0x04
    584a:	01 97       	sbiw	r24, 0x01	; 1
    584c:	f1 f7       	brne	.-4      	; 0x584a <H_LCD_void_Init+0xb4>
    584e:	9c 83       	std	Y+4, r25	; 0x04
    5850:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5852:	8d 81       	ldd	r24, Y+5	; 0x05
    5854:	9e 81       	ldd	r25, Y+6	; 0x06
    5856:	01 97       	sbiw	r24, 0x01	; 1
    5858:	9e 83       	std	Y+6, r25	; 0x06
    585a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    585c:	8d 81       	ldd	r24, Y+5	; 0x05
    585e:	9e 81       	ldd	r25, Y+6	; 0x06
    5860:	00 97       	sbiw	r24, 0x00	; 0
    5862:	69 f7       	brne	.-38     	; 0x583e <H_LCD_void_Init+0xa8>
    5864:	14 c0       	rjmp	.+40     	; 0x588e <H_LCD_void_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5866:	6f 81       	ldd	r22, Y+7	; 0x07
    5868:	78 85       	ldd	r23, Y+8	; 0x08
    586a:	89 85       	ldd	r24, Y+9	; 0x09
    586c:	9a 85       	ldd	r25, Y+10	; 0x0a
    586e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5872:	dc 01       	movw	r26, r24
    5874:	cb 01       	movw	r24, r22
    5876:	9e 83       	std	Y+6, r25	; 0x06
    5878:	8d 83       	std	Y+5, r24	; 0x05
    587a:	8d 81       	ldd	r24, Y+5	; 0x05
    587c:	9e 81       	ldd	r25, Y+6	; 0x06
    587e:	9a 83       	std	Y+2, r25	; 0x02
    5880:	89 83       	std	Y+1, r24	; 0x01
    5882:	89 81       	ldd	r24, Y+1	; 0x01
    5884:	9a 81       	ldd	r25, Y+2	; 0x02
    5886:	01 97       	sbiw	r24, 0x01	; 1
    5888:	f1 f7       	brne	.-4      	; 0x5886 <H_LCD_void_Init+0xf0>
    588a:	9a 83       	std	Y+2, r25	; 0x02
    588c:	89 83       	std	Y+1, r24	; 0x01

	/* LCD Power ON delay  */
	_delay_ms(40);

	/* Send for 4 bit initialization of LCD  */
	H_LCD_void_sendCommand(0x33);
    588e:	83 e3       	ldi	r24, 0x33	; 51
    5890:	0e 94 4c 2a 	call	0x5498	; 0x5498 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_FUN_SET_MODE);
    5894:	82 e3       	ldi	r24, 0x32	; 50
    5896:	0e 94 4c 2a 	call	0x5498	; 0x5498 <H_LCD_void_sendCommand>

	/* 2 line, 5*7 matrix in 4-bit mode */
	H_LCD_void_sendCommand(LCD_4BIT_2LINE_5X7);
    589a:	88 e2       	ldi	r24, 0x28	; 40
    589c:	0e 94 4c 2a 	call	0x5498	; 0x5498 <H_LCD_void_sendCommand>

	/* Display on cursor ON */
	H_LCD_void_sendCommand(LCD_DISPLAY_ON_CURSOR_BLINKING);
    58a0:	8f e0       	ldi	r24, 0x0F	; 15
    58a2:	0e 94 4c 2a 	call	0x5498	; 0x5498 <H_LCD_void_sendCommand>

	/* Increment cursor (shift cursor to right) */
	H_LCD_void_sendCommand(LCD_INCREMENT_CURSOR_SHIFT_TO_RIGHT);
    58a6:	86 e0       	ldi	r24, 0x06	; 6
    58a8:	0e 94 4c 2a 	call	0x5498	; 0x5498 <H_LCD_void_sendCommand>

	/* Clear display screen */
	H_LCD_void_sendCommand(LCD_CLEAR_DISPLAY);
    58ac:	81 e0       	ldi	r24, 0x01	; 1
    58ae:	0e 94 4c 2a 	call	0x5498	; 0x5498 <H_LCD_void_sendCommand>


}
    58b2:	2e 96       	adiw	r28, 0x0e	; 14
    58b4:	0f b6       	in	r0, 0x3f	; 63
    58b6:	f8 94       	cli
    58b8:	de bf       	out	0x3e, r29	; 62
    58ba:	0f be       	out	0x3f, r0	; 63
    58bc:	cd bf       	out	0x3d, r28	; 61
    58be:	cf 91       	pop	r28
    58c0:	df 91       	pop	r29
    58c2:	08 95       	ret

000058c4 <MOTOR_ON>:

#define MOTOR_FREQUENCY		15600
void MOTOR_Enable();

void MOTOR_ON(MOTOR_DIR MorotDirection, u8 DutyCycle)
{
    58c4:	df 93       	push	r29
    58c6:	cf 93       	push	r28
    58c8:	00 d0       	rcall	.+0      	; 0x58ca <MOTOR_ON+0x6>
    58ca:	cd b7       	in	r28, 0x3d	; 61
    58cc:	de b7       	in	r29, 0x3e	; 62
    58ce:	89 83       	std	Y+1, r24	; 0x01
    58d0:	6a 83       	std	Y+2, r22	; 0x02
	M_vTIMER0_SetPhaseCorrectPWM( MOTOR_FREQUENCY , DutyCycle , TIMER0_PWM_PHASECORRECT_NonInverted_MODE);
    58d2:	60 ef       	ldi	r22, 0xF0	; 240
    58d4:	7c e3       	ldi	r23, 0x3C	; 60
    58d6:	80 e0       	ldi	r24, 0x00	; 0
    58d8:	90 e0       	ldi	r25, 0x00	; 0
    58da:	4a 81       	ldd	r20, Y+2	; 0x02
    58dc:	20 e2       	ldi	r18, 0x20	; 32
    58de:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <M_vTIMER0_SetPhaseCorrectPWM>
	M_Dio_void_setPinValue(MOTOR_EN_PIN, 1);
    58e2:	8a e1       	ldi	r24, 0x1A	; 26
    58e4:	61 e0       	ldi	r22, 0x01	; 1
    58e6:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(MOTOR_DIR_PIN, MorotDirection);
    58ea:	89 e1       	ldi	r24, 0x19	; 25
    58ec:	69 81       	ldd	r22, Y+1	; 0x01
    58ee:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <M_Dio_void_setPinValue>
	
}
    58f2:	0f 90       	pop	r0
    58f4:	0f 90       	pop	r0
    58f6:	cf 91       	pop	r28
    58f8:	df 91       	pop	r29
    58fa:	08 95       	ret

000058fc <MOTOR_OFF>:

void MOTOR_OFF()
{
    58fc:	df 93       	push	r29
    58fe:	cf 93       	push	r28
    5900:	cd b7       	in	r28, 0x3d	; 61
    5902:	de b7       	in	r29, 0x3e	; 62
	M_Dio_void_setPinValue(MOTOR_EN_PIN, 0);
    5904:	8a e1       	ldi	r24, 0x1A	; 26
    5906:	60 e0       	ldi	r22, 0x00	; 0
    5908:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <M_Dio_void_setPinValue>
}
    590c:	cf 91       	pop	r28
    590e:	df 91       	pop	r29
    5910:	08 95       	ret

00005912 <Read_Wifi>:
  INCLUDES
*******************************************/
#include "APP_int.h"

void Read_Wifi(void)
{
    5912:	df 93       	push	r29
    5914:	cf 93       	push	r28
    5916:	cd b7       	in	r28, 0x3d	; 61
    5918:	de b7       	in	r29, 0x3e	; 62
	/* Check Inputs for Logout_Request_Flag */
	if (Wifi_Wait_Data(Logout_Requested))		Logout_Request_Flag = Logout_Requested ;
    591a:	8a e7       	ldi	r24, 0x7A	; 122
    591c:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <Wifi_Wait_Data>
    5920:	88 23       	and	r24, r24
    5922:	19 f0       	breq	.+6      	; 0x592a <Read_Wifi+0x18>
    5924:	8a e7       	ldi	r24, 0x7A	; 122
    5926:	80 93 7a 06 	sts	0x067A, r24

	/* Check Inputs for Motor State Flag */
	if (Wifi_Wait_Data(Motor_State_OFF))		Motor_State_Flag = Motor_State_OFF ;
    592a:	81 e6       	ldi	r24, 0x61	; 97
    592c:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <Wifi_Wait_Data>
    5930:	88 23       	and	r24, r24
    5932:	19 f0       	breq	.+6      	; 0x593a <Read_Wifi+0x28>
    5934:	81 e6       	ldi	r24, 0x61	; 97
    5936:	80 93 6c 06 	sts	0x066C, r24
	if (Wifi_Wait_Data(Motor_State_HighSpeed))	Motor_State_Flag = Motor_State_HighSpeed;
    593a:	82 e6       	ldi	r24, 0x62	; 98
    593c:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <Wifi_Wait_Data>
    5940:	88 23       	and	r24, r24
    5942:	19 f0       	breq	.+6      	; 0x594a <Read_Wifi+0x38>
    5944:	82 e6       	ldi	r24, 0x62	; 98
    5946:	80 93 6c 06 	sts	0x066C, r24
	if (Wifi_Wait_Data(Motor_State_LowSpeed))	Motor_State_Flag = Motor_State_LowSpeed ;
    594a:	83 e6       	ldi	r24, 0x63	; 99
    594c:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <Wifi_Wait_Data>
    5950:	88 23       	and	r24, r24
    5952:	19 f0       	breq	.+6      	; 0x595a <Read_Wifi+0x48>
    5954:	83 e6       	ldi	r24, 0x63	; 99
    5956:	80 93 6c 06 	sts	0x066C, r24
	if (Wifi_Wait_Data(Motor_State_Auto))		Motor_State_Flag = Motor_State_Auto ;
    595a:	84 e6       	ldi	r24, 0x64	; 100
    595c:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <Wifi_Wait_Data>
    5960:	88 23       	and	r24, r24
    5962:	19 f0       	breq	.+6      	; 0x596a <Read_Wifi+0x58>
    5964:	84 e6       	ldi	r24, 0x64	; 100
    5966:	80 93 6c 06 	sts	0x066C, r24

	/* Check Inputs for LED_State_Flag */
	if (Wifi_Wait_Data(LED_State_OFF))			LED_State_Flag = LED_State_OFF ;
    596a:	85 e6       	ldi	r24, 0x65	; 101
    596c:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <Wifi_Wait_Data>
    5970:	88 23       	and	r24, r24
    5972:	19 f0       	breq	.+6      	; 0x597a <Read_Wifi+0x68>
    5974:	85 e6       	ldi	r24, 0x65	; 101
    5976:	80 93 82 06 	sts	0x0682, r24
	if (Wifi_Wait_Data(LED_State_Auto))			LED_State_Flag = LED_State_Auto ;
    597a:	86 e6       	ldi	r24, 0x66	; 102
    597c:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <Wifi_Wait_Data>
    5980:	88 23       	and	r24, r24
    5982:	19 f0       	breq	.+6      	; 0x598a <Read_Wifi+0x78>
    5984:	86 e6       	ldi	r24, 0x66	; 102
    5986:	80 93 82 06 	sts	0x0682, r24

	/* Check Inputs for Temperature_Request_Flag */
	if (Wifi_Wait_Data(Temperature_Requested))  Temperature_Request_Flag = Temperature_Requested ;
    598a:	87 e6       	ldi	r24, 0x67	; 103
    598c:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <Wifi_Wait_Data>
    5990:	88 23       	and	r24, r24
    5992:	19 f0       	breq	.+6      	; 0x599a <Read_Wifi+0x88>
    5994:	87 e6       	ldi	r24, 0x67	; 103
    5996:	80 93 83 06 	sts	0x0683, r24
	Wifi_Buffer_Reset();
    599a:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <Wifi_Buffer_Reset>
}
    599e:	cf 91       	pop	r28
    59a0:	df 91       	pop	r29
    59a2:	08 95       	ret

000059a4 <Show_Temperture_Wifi>:


/* Send temperture to user if Temperture requested flag is set */
void Show_Temperture_Wifi()
{
    59a4:	df 93       	push	r29
    59a6:	cf 93       	push	r28
    59a8:	cd b7       	in	r28, 0x3d	; 61
    59aa:	de b7       	in	r29, 0x3e	; 62
    59ac:	64 97       	sbiw	r28, 0x14	; 20
    59ae:	0f b6       	in	r0, 0x3f	; 63
    59b0:	f8 94       	cli
    59b2:	de bf       	out	0x3e, r29	; 62
    59b4:	0f be       	out	0x3f, r0	; 63
    59b6:	cd bf       	out	0x3d, r28	; 61
	if(Temperature_Request_Flag == Temperature_Requested )
    59b8:	80 91 83 06 	lds	r24, 0x0683
    59bc:	87 36       	cpi	r24, 0x67	; 103
    59be:	79 f5       	brne	.+94     	; 0x5a1e <Show_Temperture_Wifi+0x7a>
	{
		//current_temp
		char Temperature_buffer[20];
		sprintf(Temperature_buffer, "Temperature= %ldC\r\n",current_temp);
    59c0:	20 91 72 06 	lds	r18, 0x0672
    59c4:	30 91 73 06 	lds	r19, 0x0673
    59c8:	40 91 74 06 	lds	r20, 0x0674
    59cc:	50 91 75 06 	lds	r21, 0x0675
    59d0:	8d b7       	in	r24, 0x3d	; 61
    59d2:	9e b7       	in	r25, 0x3e	; 62
    59d4:	08 97       	sbiw	r24, 0x08	; 8
    59d6:	0f b6       	in	r0, 0x3f	; 63
    59d8:	f8 94       	cli
    59da:	9e bf       	out	0x3e, r25	; 62
    59dc:	0f be       	out	0x3f, r0	; 63
    59de:	8d bf       	out	0x3d, r24	; 61
    59e0:	ed b7       	in	r30, 0x3d	; 61
    59e2:	fe b7       	in	r31, 0x3e	; 62
    59e4:	31 96       	adiw	r30, 0x01	; 1
    59e6:	ce 01       	movw	r24, r28
    59e8:	01 96       	adiw	r24, 0x01	; 1
    59ea:	91 83       	std	Z+1, r25	; 0x01
    59ec:	80 83       	st	Z, r24
    59ee:	82 e2       	ldi	r24, 0x22	; 34
    59f0:	91 e0       	ldi	r25, 0x01	; 1
    59f2:	93 83       	std	Z+3, r25	; 0x03
    59f4:	82 83       	std	Z+2, r24	; 0x02
    59f6:	24 83       	std	Z+4, r18	; 0x04
    59f8:	35 83       	std	Z+5, r19	; 0x05
    59fa:	46 83       	std	Z+6, r20	; 0x06
    59fc:	57 83       	std	Z+7, r21	; 0x07
    59fe:	0e 94 cd 36 	call	0x6d9a	; 0x6d9a <sprintf>
    5a02:	8d b7       	in	r24, 0x3d	; 61
    5a04:	9e b7       	in	r25, 0x3e	; 62
    5a06:	08 96       	adiw	r24, 0x08	; 8
    5a08:	0f b6       	in	r0, 0x3f	; 63
    5a0a:	f8 94       	cli
    5a0c:	9e bf       	out	0x3e, r25	; 62
    5a0e:	0f be       	out	0x3f, r0	; 63
    5a10:	8d bf       	out	0x3d, r24	; 61
		
		Wifi_Send_Data2(Temperature_buffer);
    5a12:	ce 01       	movw	r24, r28
    5a14:	01 96       	adiw	r24, 0x01	; 1
    5a16:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <Wifi_Send_Data2>
		Temperature_Request_Flag = 0;
    5a1a:	10 92 83 06 	sts	0x0683, r1
	}
	
}
    5a1e:	64 96       	adiw	r28, 0x14	; 20
    5a20:	0f b6       	in	r0, 0x3f	; 63
    5a22:	f8 94       	cli
    5a24:	de bf       	out	0x3e, r29	; 62
    5a26:	0f be       	out	0x3f, r0	; 63
    5a28:	cd bf       	out	0x3d, r28	; 61
    5a2a:	cf 91       	pop	r28
    5a2c:	df 91       	pop	r29
    5a2e:	08 95       	ret

00005a30 <Show_Menu_Wifi>:


/* Show Menu to user */
void Show_Menu_Wifi()
{
    5a30:	df 93       	push	r29
    5a32:	cf 93       	push	r28
    5a34:	cd b7       	in	r28, 0x3d	; 61
    5a36:	de b7       	in	r29, 0x3e	; 62
	
Wifi_Send_Data2("\nWelcom Ahmed:\n a: Motor OFF,\n b: Motor High speed,\n c: Motor Low Speed,\n d: Motor Auto,\n e: LED OFF,\n f: LED Auto,\n g: Show Temperature\n, z: Logout");
    5a38:	86 e3       	ldi	r24, 0x36	; 54
    5a3a:	91 e0       	ldi	r25, 0x01	; 1
    5a3c:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <Wifi_Send_Data2>
	
    5a40:	cf 91       	pop	r28
    5a42:	df 91       	pop	r29
    5a44:	08 95       	ret

00005a46 <Adjust_FanSpeed>:
  Reentrance       : Reentrant
  parameters (in)  :
  parameters (out) : none
  Return Value     : void
******************************************/
void Adjust_FanSpeed(){
    5a46:	df 93       	push	r29
    5a48:	cf 93       	push	r28
    5a4a:	00 d0       	rcall	.+0      	; 0x5a4c <Adjust_FanSpeed+0x6>
    5a4c:	cd b7       	in	r28, 0x3d	; 61
    5a4e:	de b7       	in	r29, 0x3e	; 62

	/* Check That user input changed from privious  command or not  */
	if (Motor_State_Flag_Privious_Reading != Motor_State_Flag){
    5a50:	90 91 7b 06 	lds	r25, 0x067B
    5a54:	80 91 6c 06 	lds	r24, 0x066C
    5a58:	98 17       	cp	r25, r24
    5a5a:	09 f4       	brne	.+2      	; 0x5a5e <Adjust_FanSpeed+0x18>
    5a5c:	4c c0       	rjmp	.+152    	; 0x5af6 <Adjust_FanSpeed+0xb0>
		switch(Motor_State_Flag)
    5a5e:	80 91 6c 06 	lds	r24, 0x066C
    5a62:	28 2f       	mov	r18, r24
    5a64:	30 e0       	ldi	r19, 0x00	; 0
    5a66:	3a 83       	std	Y+2, r19	; 0x02
    5a68:	29 83       	std	Y+1, r18	; 0x01
    5a6a:	89 81       	ldd	r24, Y+1	; 0x01
    5a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    5a6e:	82 36       	cpi	r24, 0x62	; 98
    5a70:	91 05       	cpc	r25, r1
    5a72:	11 f1       	breq	.+68     	; 0x5ab8 <Adjust_FanSpeed+0x72>
    5a74:	29 81       	ldd	r18, Y+1	; 0x01
    5a76:	3a 81       	ldd	r19, Y+2	; 0x02
    5a78:	23 36       	cpi	r18, 0x63	; 99
    5a7a:	31 05       	cpc	r19, r1
    5a7c:	34 f4       	brge	.+12     	; 0x5a8a <Adjust_FanSpeed+0x44>
    5a7e:	89 81       	ldd	r24, Y+1	; 0x01
    5a80:	9a 81       	ldd	r25, Y+2	; 0x02
    5a82:	81 36       	cpi	r24, 0x61	; 97
    5a84:	91 05       	cpc	r25, r1
    5a86:	61 f0       	breq	.+24     	; 0x5aa0 <Adjust_FanSpeed+0x5a>
    5a88:	36 c0       	rjmp	.+108    	; 0x5af6 <Adjust_FanSpeed+0xb0>
    5a8a:	29 81       	ldd	r18, Y+1	; 0x01
    5a8c:	3a 81       	ldd	r19, Y+2	; 0x02
    5a8e:	23 36       	cpi	r18, 0x63	; 99
    5a90:	31 05       	cpc	r19, r1
    5a92:	f1 f0       	breq	.+60     	; 0x5ad0 <Adjust_FanSpeed+0x8a>
    5a94:	89 81       	ldd	r24, Y+1	; 0x01
    5a96:	9a 81       	ldd	r25, Y+2	; 0x02
    5a98:	84 36       	cpi	r24, 0x64	; 100
    5a9a:	91 05       	cpc	r25, r1
    5a9c:	29 f1       	breq	.+74     	; 0x5ae8 <Adjust_FanSpeed+0xa2>
    5a9e:	2b c0       	rjmp	.+86     	; 0x5af6 <Adjust_FanSpeed+0xb0>
		{
			case Motor_State_OFF: MOTOR_ON(MOTOR_CW , 0);
    5aa0:	81 e0       	ldi	r24, 0x01	; 1
    5aa2:	60 e0       	ldi	r22, 0x00	; 0
    5aa4:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <MOTOR_ON>
								  Motor_State_Flag_Privious_Reading = Motor_State_OFF;
    5aa8:	81 e6       	ldi	r24, 0x61	; 97
    5aaa:	80 93 7b 06 	sts	0x067B, r24
								  Wifi_Send_Data2(" Fan Turned OFF ");
    5aae:	8b ec       	ldi	r24, 0xCB	; 203
    5ab0:	91 e0       	ldi	r25, 0x01	; 1
    5ab2:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <Wifi_Send_Data2>
    5ab6:	1f c0       	rjmp	.+62     	; 0x5af6 <Adjust_FanSpeed+0xb0>
								  break;

			case Motor_State_HighSpeed: MOTOR_ON(MOTOR_CW , 80);
    5ab8:	81 e0       	ldi	r24, 0x01	; 1
    5aba:	60 e5       	ldi	r22, 0x50	; 80
    5abc:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <MOTOR_ON>
										Motor_State_Flag_Privious_Reading = Motor_State_HighSpeed;
    5ac0:	82 e6       	ldi	r24, 0x62	; 98
    5ac2:	80 93 7b 06 	sts	0x067B, r24
										Wifi_Send_Data2(" Fan Turned ON at 80% Speed ");
    5ac6:	8c ed       	ldi	r24, 0xDC	; 220
    5ac8:	91 e0       	ldi	r25, 0x01	; 1
    5aca:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <Wifi_Send_Data2>
    5ace:	13 c0       	rjmp	.+38     	; 0x5af6 <Adjust_FanSpeed+0xb0>
										break;

			case Motor_State_LowSpeed:  MOTOR_ON(MOTOR_CW , 50);
    5ad0:	81 e0       	ldi	r24, 0x01	; 1
    5ad2:	62 e3       	ldi	r22, 0x32	; 50
    5ad4:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <MOTOR_ON>
										Motor_State_Flag_Privious_Reading = Motor_State_LowSpeed;
    5ad8:	83 e6       	ldi	r24, 0x63	; 99
    5ada:	80 93 7b 06 	sts	0x067B, r24
										Wifi_Send_Data2(" Fan Turned ON at 50% Speed ");
    5ade:	89 ef       	ldi	r24, 0xF9	; 249
    5ae0:	91 e0       	ldi	r25, 0x01	; 1
    5ae2:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <Wifi_Send_Data2>
    5ae6:	07 c0       	rjmp	.+14     	; 0x5af6 <Adjust_FanSpeed+0xb0>
										break;
			
			case Motor_State_Auto: Wifi_Send_Data2(" Auto Fan");
    5ae8:	86 e1       	ldi	r24, 0x16	; 22
    5aea:	92 e0       	ldi	r25, 0x02	; 2
    5aec:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <Wifi_Send_Data2>
									Motor_State_Flag_Privious_Reading = Motor_State_Auto;
    5af0:	84 e6       	ldi	r24, 0x64	; 100
    5af2:	80 93 7b 06 	sts	0x067B, r24
		}
	}
	


}
    5af6:	0f 90       	pop	r0
    5af8:	0f 90       	pop	r0
    5afa:	cf 91       	pop	r28
    5afc:	df 91       	pop	r29
    5afe:	08 95       	ret

00005b00 <Adjust_LEDIntensety>:

void Adjust_LEDIntensety(){
    5b00:	df 93       	push	r29
    5b02:	cf 93       	push	r28
    5b04:	cd b7       	in	r28, 0x3d	; 61
    5b06:	de b7       	in	r29, 0x3e	; 62
	/* Check That user input changed from previous  command or not  */
	if ((LED_State_Flag == LED_State_OFF) && (LED_State_Flag != LED_previous_State_Flag))
    5b08:	80 91 82 06 	lds	r24, 0x0682
    5b0c:	85 36       	cpi	r24, 0x65	; 101
    5b0e:	81 f4       	brne	.+32     	; 0x5b30 <Adjust_LEDIntensety+0x30>
    5b10:	90 91 82 06 	lds	r25, 0x0682
    5b14:	80 91 6a 06 	lds	r24, 0x066A
    5b18:	98 17       	cp	r25, r24
    5b1a:	51 f0       	breq	.+20     	; 0x5b30 <Adjust_LEDIntensety+0x30>
	{
			M_TIMER1_void_Stop();
    5b1c:	0e 94 22 0a 	call	0x1444	; 0x1444 <M_TIMER1_void_Stop>
			Wifi_Send_Data2(" LED OFF ");
    5b20:	80 e2       	ldi	r24, 0x20	; 32
    5b22:	92 e0       	ldi	r25, 0x02	; 2
    5b24:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <Wifi_Send_Data2>
			LED_previous_State_Flag = LED_State_OFF;
    5b28:	85 e6       	ldi	r24, 0x65	; 101
    5b2a:	80 93 6a 06 	sts	0x066A, r24
    5b2e:	11 c0       	rjmp	.+34     	; 0x5b52 <Adjust_LEDIntensety+0x52>
	}
	
	 else if(LED_State_Flag == LED_State_Auto && (LED_State_Flag != LED_previous_State_Flag))
    5b30:	80 91 82 06 	lds	r24, 0x0682
    5b34:	86 36       	cpi	r24, 0x66	; 102
    5b36:	69 f4       	brne	.+26     	; 0x5b52 <Adjust_LEDIntensety+0x52>
    5b38:	90 91 82 06 	lds	r25, 0x0682
    5b3c:	80 91 6a 06 	lds	r24, 0x066A
    5b40:	98 17       	cp	r25, r24
    5b42:	39 f0       	breq	.+14     	; 0x5b52 <Adjust_LEDIntensety+0x52>
	 {
		  Wifi_Send_Data2(" LED Auto");
    5b44:	8a e2       	ldi	r24, 0x2A	; 42
    5b46:	92 e0       	ldi	r25, 0x02	; 2
    5b48:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <Wifi_Send_Data2>
			LED_previous_State_Flag = LED_State_Auto;
    5b4c:	86 e6       	ldi	r24, 0x66	; 102
    5b4e:	80 93 6a 06 	sts	0x066A, r24

	 }
}
    5b52:	cf 91       	pop	r28
    5b54:	df 91       	pop	r29
    5b56:	08 95       	ret

00005b58 <Led_Control>:



void Led_Control()
{
    5b58:	df 93       	push	r29
    5b5a:	cf 93       	push	r28
    5b5c:	cd b7       	in	r28, 0x3d	; 61
    5b5e:	de b7       	in	r29, 0x3e	; 62
	if(LED_State_Flag == LED_State_Auto )
    5b60:	80 91 82 06 	lds	r24, 0x0682
    5b64:	86 36       	cpi	r24, 0x66	; 102
    5b66:	09 f0       	breq	.+2      	; 0x5b6a <Led_Control+0x12>
    5b68:	40 c0       	rjmp	.+128    	; 0x5bea <Led_Control+0x92>
	//{
	//	Intensity_percent = 100;
	//}
	//u8 LED_PWM =  100- Intensity_percent;
		
		if(current_intens>=0 && current_intens<50){
    5b6a:	80 91 7c 06 	lds	r24, 0x067C
    5b6e:	90 91 7d 06 	lds	r25, 0x067D
    5b72:	a0 91 7e 06 	lds	r26, 0x067E
    5b76:	b0 91 7f 06 	lds	r27, 0x067F
    5b7a:	82 33       	cpi	r24, 0x32	; 50
    5b7c:	91 05       	cpc	r25, r1
    5b7e:	a1 05       	cpc	r26, r1
    5b80:	b1 05       	cpc	r27, r1
    5b82:	18 f4       	brcc	.+6      	; 0x5b8a <Led_Control+0x32>
			M_TIMER1_void_Stop();
    5b84:	0e 94 22 0a 	call	0x1444	; 0x1444 <M_TIMER1_void_Stop>
    5b88:	30 c0       	rjmp	.+96     	; 0x5bea <Led_Control+0x92>
			//Wifi_Send_Data2(" LE Auto 100% ");
		}
		else if(current_intens>=50 && current_intens<100){
    5b8a:	80 91 7c 06 	lds	r24, 0x067C
    5b8e:	90 91 7d 06 	lds	r25, 0x067D
    5b92:	a0 91 7e 06 	lds	r26, 0x067E
    5b96:	b0 91 7f 06 	lds	r27, 0x067F
    5b9a:	82 33       	cpi	r24, 0x32	; 50
    5b9c:	91 05       	cpc	r25, r1
    5b9e:	a1 05       	cpc	r26, r1
    5ba0:	b1 05       	cpc	r27, r1
    5ba2:	90 f0       	brcs	.+36     	; 0x5bc8 <Led_Control+0x70>
    5ba4:	80 91 7c 06 	lds	r24, 0x067C
    5ba8:	90 91 7d 06 	lds	r25, 0x067D
    5bac:	a0 91 7e 06 	lds	r26, 0x067E
    5bb0:	b0 91 7f 06 	lds	r27, 0x067F
    5bb4:	84 36       	cpi	r24, 0x64	; 100
    5bb6:	91 05       	cpc	r25, r1
    5bb8:	a1 05       	cpc	r26, r1
    5bba:	b1 05       	cpc	r27, r1
    5bbc:	28 f4       	brcc	.+10     	; 0x5bc8 <Led_Control+0x70>
			H_LED_void_set_Intensity(40);
    5bbe:	88 e2       	ldi	r24, 0x28	; 40
    5bc0:	90 e0       	ldi	r25, 0x00	; 0
    5bc2:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <H_LED_void_set_Intensity>
    5bc6:	11 c0       	rjmp	.+34     	; 0x5bea <Led_Control+0x92>
			//Wifi_Send_Data2(" LE Auto 40% ");
		}
		else if(current_intens>=100){
    5bc8:	80 91 7c 06 	lds	r24, 0x067C
    5bcc:	90 91 7d 06 	lds	r25, 0x067D
    5bd0:	a0 91 7e 06 	lds	r26, 0x067E
    5bd4:	b0 91 7f 06 	lds	r27, 0x067F
    5bd8:	84 36       	cpi	r24, 0x64	; 100
    5bda:	91 05       	cpc	r25, r1
    5bdc:	a1 05       	cpc	r26, r1
    5bde:	b1 05       	cpc	r27, r1
    5be0:	20 f0       	brcs	.+8      	; 0x5bea <Led_Control+0x92>
			H_LED_void_set_Intensity(100);
    5be2:	84 e6       	ldi	r24, 0x64	; 100
    5be4:	90 e0       	ldi	r25, 0x00	; 0
    5be6:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <H_LED_void_set_Intensity>
		else{

			}
			
	}
}
    5bea:	cf 91       	pop	r28
    5bec:	df 91       	pop	r29
    5bee:	08 95       	ret

00005bf0 <Motor_Control>:


void Motor_Control()
{
    5bf0:	df 93       	push	r29
    5bf2:	cf 93       	push	r28
    5bf4:	cd b7       	in	r28, 0x3d	; 61
    5bf6:	de b7       	in	r29, 0x3e	; 62
		 if( Motor_State_Flag == Motor_State_Auto){
    5bf8:	80 91 6c 06 	lds	r24, 0x066C
    5bfc:	84 36       	cpi	r24, 0x64	; 100
    5bfe:	09 f0       	breq	.+2      	; 0x5c02 <Motor_Control+0x12>
    5c00:	4d c0       	rjmp	.+154    	; 0x5c9c <Motor_Control+0xac>

				 if(current_temp>=0 && current_temp<10){
    5c02:	80 91 72 06 	lds	r24, 0x0672
    5c06:	90 91 73 06 	lds	r25, 0x0673
    5c0a:	a0 91 74 06 	lds	r26, 0x0674
    5c0e:	b0 91 75 06 	lds	r27, 0x0675
    5c12:	8a 30       	cpi	r24, 0x0A	; 10
    5c14:	91 05       	cpc	r25, r1
    5c16:	a1 05       	cpc	r26, r1
    5c18:	b1 05       	cpc	r27, r1
    5c1a:	18 f4       	brcc	.+6      	; 0x5c22 <Motor_Control+0x32>
					 MOTOR_OFF();
    5c1c:	0e 94 7e 2c 	call	0x58fc	; 0x58fc <MOTOR_OFF>
    5c20:	3d c0       	rjmp	.+122    	; 0x5c9c <Motor_Control+0xac>
					 //Wifi_Send_Data2(" Auto Fan: Temp < 10, Fan off ");
				 }
				 else if(current_temp>=10 && current_temp<27){
    5c22:	80 91 72 06 	lds	r24, 0x0672
    5c26:	90 91 73 06 	lds	r25, 0x0673
    5c2a:	a0 91 74 06 	lds	r26, 0x0674
    5c2e:	b0 91 75 06 	lds	r27, 0x0675
    5c32:	8a 30       	cpi	r24, 0x0A	; 10
    5c34:	91 05       	cpc	r25, r1
    5c36:	a1 05       	cpc	r26, r1
    5c38:	b1 05       	cpc	r27, r1
    5c3a:	90 f0       	brcs	.+36     	; 0x5c60 <Motor_Control+0x70>
    5c3c:	80 91 72 06 	lds	r24, 0x0672
    5c40:	90 91 73 06 	lds	r25, 0x0673
    5c44:	a0 91 74 06 	lds	r26, 0x0674
    5c48:	b0 91 75 06 	lds	r27, 0x0675
    5c4c:	8b 31       	cpi	r24, 0x1B	; 27
    5c4e:	91 05       	cpc	r25, r1
    5c50:	a1 05       	cpc	r26, r1
    5c52:	b1 05       	cpc	r27, r1
    5c54:	28 f4       	brcc	.+10     	; 0x5c60 <Motor_Control+0x70>
					 MOTOR_ON(MOTOR_CW , 50);
    5c56:	81 e0       	ldi	r24, 0x01	; 1
    5c58:	62 e3       	ldi	r22, 0x32	; 50
    5c5a:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <MOTOR_ON>
    5c5e:	1e c0       	rjmp	.+60     	; 0x5c9c <Motor_Control+0xac>
					 //Wifi_Send_Data2(" Auto Fan: Temp < 27 , Fan Low speed ");
				 }
				 else if(current_temp>=27 && current_temp<=45){
    5c60:	80 91 72 06 	lds	r24, 0x0672
    5c64:	90 91 73 06 	lds	r25, 0x0673
    5c68:	a0 91 74 06 	lds	r26, 0x0674
    5c6c:	b0 91 75 06 	lds	r27, 0x0675
    5c70:	8b 31       	cpi	r24, 0x1B	; 27
    5c72:	91 05       	cpc	r25, r1
    5c74:	a1 05       	cpc	r26, r1
    5c76:	b1 05       	cpc	r27, r1
    5c78:	88 f0       	brcs	.+34     	; 0x5c9c <Motor_Control+0xac>
    5c7a:	80 91 72 06 	lds	r24, 0x0672
    5c7e:	90 91 73 06 	lds	r25, 0x0673
    5c82:	a0 91 74 06 	lds	r26, 0x0674
    5c86:	b0 91 75 06 	lds	r27, 0x0675
    5c8a:	8e 32       	cpi	r24, 0x2E	; 46
    5c8c:	91 05       	cpc	r25, r1
    5c8e:	a1 05       	cpc	r26, r1
    5c90:	b1 05       	cpc	r27, r1
    5c92:	20 f4       	brcc	.+8      	; 0x5c9c <Motor_Control+0xac>
					 MOTOR_ON(MOTOR_CW , 80);
    5c94:	81 e0       	ldi	r24, 0x01	; 1
    5c96:	60 e5       	ldi	r22, 0x50	; 80
    5c98:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <MOTOR_ON>
				 }

			 }

		 
    5c9c:	cf 91       	pop	r28
    5c9e:	df 91       	pop	r29
    5ca0:	08 95       	ret

00005ca2 <getTempAndIntens>:
  parameters (in)  :
  parameters (out) : none
  Return Value     : void
******************************************/

ES_t getTempAndIntens(){
    5ca2:	df 93       	push	r29
    5ca4:	cf 93       	push	r28
    5ca6:	0f 92       	push	r0
    5ca8:	cd b7       	in	r28, 0x3d	; 61
    5caa:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    5cac:	19 82       	std	Y+1, r1	; 0x01
	H_LM35_enu_getTemp(&ADC1_config[1], &current_temp);
    5cae:	84 ed       	ldi	r24, 0xD4	; 212
    5cb0:	93 e0       	ldi	r25, 0x03	; 3
    5cb2:	22 e7       	ldi	r18, 0x72	; 114
    5cb4:	36 e0       	ldi	r19, 0x06	; 6
    5cb6:	b9 01       	movw	r22, r18
    5cb8:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <H_LM35_enu_getTemp>
	H_LDR_enu_getIntensity(ADC1_config, &current_intens);
    5cbc:	8d ec       	ldi	r24, 0xCD	; 205
    5cbe:	93 e0       	ldi	r25, 0x03	; 3
    5cc0:	2c e7       	ldi	r18, 0x7C	; 124
    5cc2:	36 e0       	ldi	r19, 0x06	; 6
    5cc4:	b9 01       	movw	r22, r18
    5cc6:	0e 94 d6 27 	call	0x4fac	; 0x4fac <H_LDR_enu_getIntensity>
	/*check if temperature changed to another range*/
	if(current_temp>=0 && current_temp<=45){
    5cca:	80 91 72 06 	lds	r24, 0x0672
    5cce:	90 91 73 06 	lds	r25, 0x0673
    5cd2:	a0 91 74 06 	lds	r26, 0x0674
    5cd6:	b0 91 75 06 	lds	r27, 0x0675
    5cda:	8e 32       	cpi	r24, 0x2E	; 46
    5cdc:	91 05       	cpc	r25, r1
    5cde:	a1 05       	cpc	r26, r1
    5ce0:	b1 05       	cpc	r27, r1
    5ce2:	08 f0       	brcs	.+2      	; 0x5ce6 <getTempAndIntens+0x44>
    5ce4:	90 c0       	rjmp	.+288    	; 0x5e06 <getTempAndIntens+0x164>

		if(
    5ce6:	80 91 72 06 	lds	r24, 0x0672
    5cea:	90 91 73 06 	lds	r25, 0x0673
    5cee:	a0 91 74 06 	lds	r26, 0x0674
    5cf2:	b0 91 75 06 	lds	r27, 0x0675
    5cf6:	8a 30       	cpi	r24, 0x0A	; 10
    5cf8:	91 05       	cpc	r25, r1
    5cfa:	a1 05       	cpc	r26, r1
    5cfc:	b1 05       	cpc	r27, r1
    5cfe:	38 f1       	brcs	.+78     	; 0x5d4e <getTempAndIntens+0xac>
    5d00:	80 91 72 06 	lds	r24, 0x0672
    5d04:	90 91 73 06 	lds	r25, 0x0673
    5d08:	a0 91 74 06 	lds	r26, 0x0674
    5d0c:	b0 91 75 06 	lds	r27, 0x0675
    5d10:	8c 31       	cpi	r24, 0x1C	; 28
    5d12:	91 05       	cpc	r25, r1
    5d14:	a1 05       	cpc	r26, r1
    5d16:	b1 05       	cpc	r27, r1
    5d18:	d0 f4       	brcc	.+52     	; 0x5d4e <getTempAndIntens+0xac>
    5d1a:	80 91 6d 06 	lds	r24, 0x066D
    5d1e:	90 91 6e 06 	lds	r25, 0x066E
    5d22:	a0 91 6f 06 	lds	r26, 0x066F
    5d26:	b0 91 70 06 	lds	r27, 0x0670
    5d2a:	8c 31       	cpi	r24, 0x1C	; 28
    5d2c:	91 05       	cpc	r25, r1
    5d2e:	a1 05       	cpc	r26, r1
    5d30:	b1 05       	cpc	r27, r1
    5d32:	68 f0       	brcs	.+26     	; 0x5d4e <getTempAndIntens+0xac>
    5d34:	80 91 6d 06 	lds	r24, 0x066D
    5d38:	90 91 6e 06 	lds	r25, 0x066E
    5d3c:	a0 91 6f 06 	lds	r26, 0x066F
    5d40:	b0 91 70 06 	lds	r27, 0x0670
    5d44:	8e 32       	cpi	r24, 0x2E	; 46
    5d46:	91 05       	cpc	r25, r1
    5d48:	a1 05       	cpc	r26, r1
    5d4a:	b1 05       	cpc	r27, r1
    5d4c:	a0 f1       	brcs	.+104    	; 0x5db6 <getTempAndIntens+0x114>
    5d4e:	80 91 6d 06 	lds	r24, 0x066D
    5d52:	90 91 6e 06 	lds	r25, 0x066E
    5d56:	a0 91 6f 06 	lds	r26, 0x066F
    5d5a:	b0 91 70 06 	lds	r27, 0x0670
    5d5e:	8a 30       	cpi	r24, 0x0A	; 10
    5d60:	91 05       	cpc	r25, r1
    5d62:	a1 05       	cpc	r26, r1
    5d64:	b1 05       	cpc	r27, r1
    5d66:	e0 f1       	brcs	.+120    	; 0x5de0 <getTempAndIntens+0x13e>
    5d68:	80 91 6d 06 	lds	r24, 0x066D
    5d6c:	90 91 6e 06 	lds	r25, 0x066E
    5d70:	a0 91 6f 06 	lds	r26, 0x066F
    5d74:	b0 91 70 06 	lds	r27, 0x0670
    5d78:	8c 31       	cpi	r24, 0x1C	; 28
    5d7a:	91 05       	cpc	r25, r1
    5d7c:	a1 05       	cpc	r26, r1
    5d7e:	b1 05       	cpc	r27, r1
    5d80:	78 f5       	brcc	.+94     	; 0x5de0 <getTempAndIntens+0x13e>
    5d82:	80 91 72 06 	lds	r24, 0x0672
    5d86:	90 91 73 06 	lds	r25, 0x0673
    5d8a:	a0 91 74 06 	lds	r26, 0x0674
    5d8e:	b0 91 75 06 	lds	r27, 0x0675
    5d92:	8c 31       	cpi	r24, 0x1C	; 28
    5d94:	91 05       	cpc	r25, r1
    5d96:	a1 05       	cpc	r26, r1
    5d98:	b1 05       	cpc	r27, r1
    5d9a:	10 f1       	brcs	.+68     	; 0x5de0 <getTempAndIntens+0x13e>
    5d9c:	80 91 72 06 	lds	r24, 0x0672
    5da0:	90 91 73 06 	lds	r25, 0x0673
    5da4:	a0 91 74 06 	lds	r26, 0x0674
    5da8:	b0 91 75 06 	lds	r27, 0x0675
    5dac:	8e 32       	cpi	r24, 0x2E	; 46
    5dae:	91 05       	cpc	r25, r1
    5db0:	a1 05       	cpc	r26, r1
    5db2:	b1 05       	cpc	r27, r1
    5db4:	a8 f4       	brcc	.+42     	; 0x5de0 <getTempAndIntens+0x13e>
			((current_temp >=10 && current_temp <=27)&&((previous_temp >27 && previous_temp <=45)))
			|| ((previous_temp >=10 && previous_temp <=27)&&((current_temp >27 && current_temp <=45)))
			){
			Temp_Changed_Flag =1;
    5db6:	81 e0       	ldi	r24, 0x01	; 1
    5db8:	80 93 80 06 	sts	0x0680, r24
			previous_temp = current_temp;
    5dbc:	80 91 72 06 	lds	r24, 0x0672
    5dc0:	90 91 73 06 	lds	r25, 0x0673
    5dc4:	a0 91 74 06 	lds	r26, 0x0674
    5dc8:	b0 91 75 06 	lds	r27, 0x0675
    5dcc:	80 93 6d 06 	sts	0x066D, r24
    5dd0:	90 93 6e 06 	sts	0x066E, r25
    5dd4:	a0 93 6f 06 	sts	0x066F, r26
    5dd8:	b0 93 70 06 	sts	0x0670, r27
			Local_enuErrorState = ES_OK;
    5ddc:	81 e0       	ldi	r24, 0x01	; 1
    5dde:	89 83       	std	Y+1, r24	; 0x01
		}
		else {
		}
		previous_temp = current_temp;
    5de0:	80 91 72 06 	lds	r24, 0x0672
    5de4:	90 91 73 06 	lds	r25, 0x0673
    5de8:	a0 91 74 06 	lds	r26, 0x0674
    5dec:	b0 91 75 06 	lds	r27, 0x0675
    5df0:	80 93 6d 06 	sts	0x066D, r24
    5df4:	90 93 6e 06 	sts	0x066E, r25
    5df8:	a0 93 6f 06 	sts	0x066F, r26
    5dfc:	b0 93 70 06 	sts	0x0670, r27
		Local_enuErrorState = ES_OK;
    5e00:	81 e0       	ldi	r24, 0x01	; 1
    5e02:	89 83       	std	Y+1, r24	; 0x01
    5e04:	02 c0       	rjmp	.+4      	; 0x5e0a <getTempAndIntens+0x168>
	}
	else{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    5e06:	82 e0       	ldi	r24, 0x02	; 2
    5e08:	89 83       	std	Y+1, r24	; 0x01
	}

	/*check if intensity changed to another range*/
	if (current_intens >=0 && current_intens <=1000){
    5e0a:	80 91 7c 06 	lds	r24, 0x067C
    5e0e:	90 91 7d 06 	lds	r25, 0x067D
    5e12:	a0 91 7e 06 	lds	r26, 0x067E
    5e16:	b0 91 7f 06 	lds	r27, 0x067F
    5e1a:	89 3e       	cpi	r24, 0xE9	; 233
    5e1c:	23 e0       	ldi	r18, 0x03	; 3
    5e1e:	92 07       	cpc	r25, r18
    5e20:	20 e0       	ldi	r18, 0x00	; 0
    5e22:	a2 07       	cpc	r26, r18
    5e24:	20 e0       	ldi	r18, 0x00	; 0
    5e26:	b2 07       	cpc	r27, r18
    5e28:	08 f0       	brcs	.+2      	; 0x5e2c <getTempAndIntens+0x18a>
    5e2a:	98 c0       	rjmp	.+304    	; 0x5f5c <getTempAndIntens+0x2ba>
		if(
    5e2c:	80 91 7c 06 	lds	r24, 0x067C
    5e30:	90 91 7d 06 	lds	r25, 0x067D
    5e34:	a0 91 7e 06 	lds	r26, 0x067E
    5e38:	b0 91 7f 06 	lds	r27, 0x067F
    5e3c:	84 36       	cpi	r24, 0x64	; 100
    5e3e:	91 05       	cpc	r25, r1
    5e40:	a1 05       	cpc	r26, r1
    5e42:	b1 05       	cpc	r27, r1
    5e44:	50 f1       	brcs	.+84     	; 0x5e9a <getTempAndIntens+0x1f8>
    5e46:	80 91 7c 06 	lds	r24, 0x067C
    5e4a:	90 91 7d 06 	lds	r25, 0x067D
    5e4e:	a0 91 7e 06 	lds	r26, 0x067E
    5e52:	b0 91 7f 06 	lds	r27, 0x067F
    5e56:	87 3e       	cpi	r24, 0xE7	; 231
    5e58:	91 05       	cpc	r25, r1
    5e5a:	a1 05       	cpc	r26, r1
    5e5c:	b1 05       	cpc	r27, r1
    5e5e:	e8 f4       	brcc	.+58     	; 0x5e9a <getTempAndIntens+0x1f8>
    5e60:	80 91 76 06 	lds	r24, 0x0676
    5e64:	90 91 77 06 	lds	r25, 0x0677
    5e68:	a0 91 78 06 	lds	r26, 0x0678
    5e6c:	b0 91 79 06 	lds	r27, 0x0679
    5e70:	87 3e       	cpi	r24, 0xE7	; 231
    5e72:	91 05       	cpc	r25, r1
    5e74:	a1 05       	cpc	r26, r1
    5e76:	b1 05       	cpc	r27, r1
    5e78:	80 f0       	brcs	.+32     	; 0x5e9a <getTempAndIntens+0x1f8>
    5e7a:	80 91 76 06 	lds	r24, 0x0676
    5e7e:	90 91 77 06 	lds	r25, 0x0677
    5e82:	a0 91 78 06 	lds	r26, 0x0678
    5e86:	b0 91 79 06 	lds	r27, 0x0679
    5e8a:	89 35       	cpi	r24, 0x59	; 89
    5e8c:	22 e0       	ldi	r18, 0x02	; 2
    5e8e:	92 07       	cpc	r25, r18
    5e90:	20 e0       	ldi	r18, 0x00	; 0
    5e92:	a2 07       	cpc	r26, r18
    5e94:	20 e0       	ldi	r18, 0x00	; 0
    5e96:	b2 07       	cpc	r27, r18
    5e98:	c0 f1       	brcs	.+112    	; 0x5f0a <getTempAndIntens+0x268>
    5e9a:	80 91 76 06 	lds	r24, 0x0676
    5e9e:	90 91 77 06 	lds	r25, 0x0677
    5ea2:	a0 91 78 06 	lds	r26, 0x0678
    5ea6:	b0 91 79 06 	lds	r27, 0x0679
    5eaa:	86 3e       	cpi	r24, 0xE6	; 230
    5eac:	91 05       	cpc	r25, r1
    5eae:	a1 05       	cpc	r26, r1
    5eb0:	b1 05       	cpc	r27, r1
    5eb2:	08 f4       	brcc	.+2      	; 0x5eb6 <getTempAndIntens+0x214>
    5eb4:	40 c0       	rjmp	.+128    	; 0x5f36 <getTempAndIntens+0x294>
    5eb6:	80 91 76 06 	lds	r24, 0x0676
    5eba:	90 91 77 06 	lds	r25, 0x0677
    5ebe:	a0 91 78 06 	lds	r26, 0x0678
    5ec2:	b0 91 79 06 	lds	r27, 0x0679
    5ec6:	89 35       	cpi	r24, 0x59	; 89
    5ec8:	22 e0       	ldi	r18, 0x02	; 2
    5eca:	92 07       	cpc	r25, r18
    5ecc:	20 e0       	ldi	r18, 0x00	; 0
    5ece:	a2 07       	cpc	r26, r18
    5ed0:	20 e0       	ldi	r18, 0x00	; 0
    5ed2:	b2 07       	cpc	r27, r18
    5ed4:	80 f5       	brcc	.+96     	; 0x5f36 <getTempAndIntens+0x294>
    5ed6:	80 91 7c 06 	lds	r24, 0x067C
    5eda:	90 91 7d 06 	lds	r25, 0x067D
    5ede:	a0 91 7e 06 	lds	r26, 0x067E
    5ee2:	b0 91 7f 06 	lds	r27, 0x067F
    5ee6:	85 36       	cpi	r24, 0x65	; 101
    5ee8:	91 05       	cpc	r25, r1
    5eea:	a1 05       	cpc	r26, r1
    5eec:	b1 05       	cpc	r27, r1
    5eee:	18 f1       	brcs	.+70     	; 0x5f36 <getTempAndIntens+0x294>
    5ef0:	80 91 7c 06 	lds	r24, 0x067C
    5ef4:	90 91 7d 06 	lds	r25, 0x067D
    5ef8:	a0 91 7e 06 	lds	r26, 0x067E
    5efc:	b0 91 7f 06 	lds	r27, 0x067F
    5f00:	87 3e       	cpi	r24, 0xE7	; 231
    5f02:	91 05       	cpc	r25, r1
    5f04:	a1 05       	cpc	r26, r1
    5f06:	b1 05       	cpc	r27, r1
    5f08:	b0 f4       	brcc	.+44     	; 0x5f36 <getTempAndIntens+0x294>
		((current_intens >=100 && current_intens <=230)&&((previous_intens >230&& previous_intens <=600)))
		|| ((previous_intens >=230&& previous_intens <=600)&&((current_intens >100 && current_intens <=230)))
		){
			Intens_Changed_Flag = 1;
    5f0a:	81 e0       	ldi	r24, 0x01	; 1
    5f0c:	80 93 81 06 	sts	0x0681, r24
			previous_intens = current_intens;
    5f10:	80 91 7c 06 	lds	r24, 0x067C
    5f14:	90 91 7d 06 	lds	r25, 0x067D
    5f18:	a0 91 7e 06 	lds	r26, 0x067E
    5f1c:	b0 91 7f 06 	lds	r27, 0x067F
    5f20:	80 93 76 06 	sts	0x0676, r24
    5f24:	90 93 77 06 	sts	0x0677, r25
    5f28:	a0 93 78 06 	sts	0x0678, r26
    5f2c:	b0 93 79 06 	sts	0x0679, r27
			Local_enuErrorState = ES_OK;
    5f30:	81 e0       	ldi	r24, 0x01	; 1
    5f32:	89 83       	std	Y+1, r24	; 0x01
    5f34:	15 c0       	rjmp	.+42     	; 0x5f60 <getTempAndIntens+0x2be>
		}
		else {
			previous_intens = current_intens;
    5f36:	80 91 7c 06 	lds	r24, 0x067C
    5f3a:	90 91 7d 06 	lds	r25, 0x067D
    5f3e:	a0 91 7e 06 	lds	r26, 0x067E
    5f42:	b0 91 7f 06 	lds	r27, 0x067F
    5f46:	80 93 76 06 	sts	0x0676, r24
    5f4a:	90 93 77 06 	sts	0x0677, r25
    5f4e:	a0 93 78 06 	sts	0x0678, r26
    5f52:	b0 93 79 06 	sts	0x0679, r27
			Local_enuErrorState = ES_OK;
    5f56:	81 e0       	ldi	r24, 0x01	; 1
    5f58:	89 83       	std	Y+1, r24	; 0x01
    5f5a:	02 c0       	rjmp	.+4      	; 0x5f60 <getTempAndIntens+0x2be>
		}
	}
	else{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    5f5c:	82 e0       	ldi	r24, 0x02	; 2
    5f5e:	89 83       	std	Y+1, r24	; 0x01
	}
	
	H_LCD_void_gotoXY(1, 0);
    5f60:	81 e0       	ldi	r24, 0x01	; 1
    5f62:	60 e0       	ldi	r22, 0x00	; 0
    5f64:	0e 94 ee 2a 	call	0x55dc	; 0x55dc <H_LCD_void_gotoXY>
	H_LCD_void_sendString("TEMP:");
    5f68:	84 e3       	ldi	r24, 0x34	; 52
    5f6a:	92 e0       	ldi	r25, 0x02	; 2
    5f6c:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <H_LCD_void_sendString>
	H_LCD_void_sendIntNum(current_temp);
    5f70:	80 91 72 06 	lds	r24, 0x0672
    5f74:	90 91 73 06 	lds	r25, 0x0673
    5f78:	a0 91 74 06 	lds	r26, 0x0674
    5f7c:	b0 91 75 06 	lds	r27, 0x0675
    5f80:	bc 01       	movw	r22, r24
    5f82:	cd 01       	movw	r24, r26
    5f84:	0e 94 99 2a 	call	0x5532	; 0x5532 <H_LCD_void_sendIntNum>
	H_LCD_void_gotoXY(2, 0);
    5f88:	82 e0       	ldi	r24, 0x02	; 2
    5f8a:	60 e0       	ldi	r22, 0x00	; 0
    5f8c:	0e 94 ee 2a 	call	0x55dc	; 0x55dc <H_LCD_void_gotoXY>
	H_LCD_void_sendString("INTENS:");
    5f90:	8a e3       	ldi	r24, 0x3A	; 58
    5f92:	92 e0       	ldi	r25, 0x02	; 2
    5f94:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <H_LCD_void_sendString>
	if(current_intens)
    5f98:	80 91 7c 06 	lds	r24, 0x067C
    5f9c:	90 91 7d 06 	lds	r25, 0x067D
    5fa0:	a0 91 7e 06 	lds	r26, 0x067E
    5fa4:	b0 91 7f 06 	lds	r27, 0x067F
    5fa8:	00 97       	sbiw	r24, 0x00	; 0
    5faa:	a1 05       	cpc	r26, r1
    5fac:	b1 05       	cpc	r27, r1
    5fae:	39 f0       	breq	.+14     	; 0x5fbe <getTempAndIntens+0x31c>
	{
		H_LCD_void_gotoXY(2, 9);
    5fb0:	82 e0       	ldi	r24, 0x02	; 2
    5fb2:	69 e0       	ldi	r22, 0x09	; 9
    5fb4:	0e 94 ee 2a 	call	0x55dc	; 0x55dc <H_LCD_void_gotoXY>
		H_LCD_void_sendData(' ');
    5fb8:	80 e2       	ldi	r24, 0x20	; 32
    5fba:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <H_LCD_void_sendData>
	}
	H_LCD_void_gotoXY(2, 7);	
    5fbe:	82 e0       	ldi	r24, 0x02	; 2
    5fc0:	67 e0       	ldi	r22, 0x07	; 7
    5fc2:	0e 94 ee 2a 	call	0x55dc	; 0x55dc <H_LCD_void_gotoXY>
	H_LCD_void_sendIntNum(current_intens);
    5fc6:	80 91 7c 06 	lds	r24, 0x067C
    5fca:	90 91 7d 06 	lds	r25, 0x067D
    5fce:	a0 91 7e 06 	lds	r26, 0x067E
    5fd2:	b0 91 7f 06 	lds	r27, 0x067F
    5fd6:	bc 01       	movw	r22, r24
    5fd8:	cd 01       	movw	r24, r26
    5fda:	0e 94 99 2a 	call	0x5532	; 0x5532 <H_LCD_void_sendIntNum>
	return Local_enuErrorState;
    5fde:	89 81       	ldd	r24, Y+1	; 0x01
}
    5fe0:	0f 90       	pop	r0
    5fe2:	cf 91       	pop	r28
    5fe4:	df 91       	pop	r29
    5fe6:	08 95       	ret

00005fe8 <main>:
  Reentrance       : Reentrant
  parameters (in)  :
  parameters (out) : none
  Return Value     : void
******************************************/
void main(){
    5fe8:	df 93       	push	r29
    5fea:	cf 93       	push	r28
    5fec:	cd b7       	in	r28, 0x3d	; 61
    5fee:	de b7       	in	r29, 0x3e	; 62
    5ff0:	6c 97       	sbiw	r28, 0x1c	; 28
    5ff2:	0f b6       	in	r0, 0x3f	; 63
    5ff4:	f8 94       	cli
    5ff6:	de bf       	out	0x3e, r29	; 62
    5ff8:	0f be       	out	0x3f, r0	; 63
    5ffa:	cd bf       	out	0x3d, r28	; 61
	/* Initialize All System Moduels */
	
	//Show_Menu_Wifi();
	sytem_init();
    5ffc:	0e 94 fd 30 	call	0x61fa	; 0x61fa <sytem_init>
    6000:	80 e0       	ldi	r24, 0x00	; 0
    6002:	90 e0       	ldi	r25, 0x00	; 0
    6004:	a8 e4       	ldi	r26, 0x48	; 72
    6006:	b3 e4       	ldi	r27, 0x43	; 67
    6008:	89 8f       	std	Y+25, r24	; 0x19
    600a:	9a 8f       	std	Y+26, r25	; 0x1a
    600c:	ab 8f       	std	Y+27, r26	; 0x1b
    600e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6010:	69 8d       	ldd	r22, Y+25	; 0x19
    6012:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6014:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6016:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6018:	20 e0       	ldi	r18, 0x00	; 0
    601a:	30 e0       	ldi	r19, 0x00	; 0
    601c:	4a e7       	ldi	r20, 0x7A	; 122
    601e:	55 e4       	ldi	r21, 0x45	; 69
    6020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6024:	dc 01       	movw	r26, r24
    6026:	cb 01       	movw	r24, r22
    6028:	8d 8b       	std	Y+21, r24	; 0x15
    602a:	9e 8b       	std	Y+22, r25	; 0x16
    602c:	af 8b       	std	Y+23, r26	; 0x17
    602e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6030:	6d 89       	ldd	r22, Y+21	; 0x15
    6032:	7e 89       	ldd	r23, Y+22	; 0x16
    6034:	8f 89       	ldd	r24, Y+23	; 0x17
    6036:	98 8d       	ldd	r25, Y+24	; 0x18
    6038:	20 e0       	ldi	r18, 0x00	; 0
    603a:	30 e0       	ldi	r19, 0x00	; 0
    603c:	40 e8       	ldi	r20, 0x80	; 128
    603e:	5f e3       	ldi	r21, 0x3F	; 63
    6040:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6044:	88 23       	and	r24, r24
    6046:	2c f4       	brge	.+10     	; 0x6052 <main+0x6a>
		__ticks = 1;
    6048:	81 e0       	ldi	r24, 0x01	; 1
    604a:	90 e0       	ldi	r25, 0x00	; 0
    604c:	9c 8b       	std	Y+20, r25	; 0x14
    604e:	8b 8b       	std	Y+19, r24	; 0x13
    6050:	3f c0       	rjmp	.+126    	; 0x60d0 <main+0xe8>
	else if (__tmp > 65535)
    6052:	6d 89       	ldd	r22, Y+21	; 0x15
    6054:	7e 89       	ldd	r23, Y+22	; 0x16
    6056:	8f 89       	ldd	r24, Y+23	; 0x17
    6058:	98 8d       	ldd	r25, Y+24	; 0x18
    605a:	20 e0       	ldi	r18, 0x00	; 0
    605c:	3f ef       	ldi	r19, 0xFF	; 255
    605e:	4f e7       	ldi	r20, 0x7F	; 127
    6060:	57 e4       	ldi	r21, 0x47	; 71
    6062:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6066:	18 16       	cp	r1, r24
    6068:	4c f5       	brge	.+82     	; 0x60bc <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    606a:	69 8d       	ldd	r22, Y+25	; 0x19
    606c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    606e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6070:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6072:	20 e0       	ldi	r18, 0x00	; 0
    6074:	30 e0       	ldi	r19, 0x00	; 0
    6076:	40 e2       	ldi	r20, 0x20	; 32
    6078:	51 e4       	ldi	r21, 0x41	; 65
    607a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    607e:	dc 01       	movw	r26, r24
    6080:	cb 01       	movw	r24, r22
    6082:	bc 01       	movw	r22, r24
    6084:	cd 01       	movw	r24, r26
    6086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    608a:	dc 01       	movw	r26, r24
    608c:	cb 01       	movw	r24, r22
    608e:	9c 8b       	std	Y+20, r25	; 0x14
    6090:	8b 8b       	std	Y+19, r24	; 0x13
    6092:	0f c0       	rjmp	.+30     	; 0x60b2 <main+0xca>
    6094:	80 e9       	ldi	r24, 0x90	; 144
    6096:	91 e0       	ldi	r25, 0x01	; 1
    6098:	9a 8b       	std	Y+18, r25	; 0x12
    609a:	89 8b       	std	Y+17, r24	; 0x11
    609c:	89 89       	ldd	r24, Y+17	; 0x11
    609e:	9a 89       	ldd	r25, Y+18	; 0x12
    60a0:	01 97       	sbiw	r24, 0x01	; 1
    60a2:	f1 f7       	brne	.-4      	; 0x60a0 <main+0xb8>
    60a4:	9a 8b       	std	Y+18, r25	; 0x12
    60a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60a8:	8b 89       	ldd	r24, Y+19	; 0x13
    60aa:	9c 89       	ldd	r25, Y+20	; 0x14
    60ac:	01 97       	sbiw	r24, 0x01	; 1
    60ae:	9c 8b       	std	Y+20, r25	; 0x14
    60b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60b2:	8b 89       	ldd	r24, Y+19	; 0x13
    60b4:	9c 89       	ldd	r25, Y+20	; 0x14
    60b6:	00 97       	sbiw	r24, 0x00	; 0
    60b8:	69 f7       	brne	.-38     	; 0x6094 <main+0xac>
    60ba:	14 c0       	rjmp	.+40     	; 0x60e4 <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60bc:	6d 89       	ldd	r22, Y+21	; 0x15
    60be:	7e 89       	ldd	r23, Y+22	; 0x16
    60c0:	8f 89       	ldd	r24, Y+23	; 0x17
    60c2:	98 8d       	ldd	r25, Y+24	; 0x18
    60c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60c8:	dc 01       	movw	r26, r24
    60ca:	cb 01       	movw	r24, r22
    60cc:	9c 8b       	std	Y+20, r25	; 0x14
    60ce:	8b 8b       	std	Y+19, r24	; 0x13
    60d0:	8b 89       	ldd	r24, Y+19	; 0x13
    60d2:	9c 89       	ldd	r25, Y+20	; 0x14
    60d4:	98 8b       	std	Y+16, r25	; 0x10
    60d6:	8f 87       	std	Y+15, r24	; 0x0f
    60d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    60da:	98 89       	ldd	r25, Y+16	; 0x10
    60dc:	01 97       	sbiw	r24, 0x01	; 1
    60de:	f1 f7       	brne	.-4      	; 0x60dc <main+0xf4>
    60e0:	98 8b       	std	Y+16, r25	; 0x10
    60e2:	8f 87       	std	Y+15, r24	; 0x0f
	//H_LCD_void_sendString("hello");
	


	/* Wait for user to login to connect wifi and start system */
	Check_Login_Sucsess();
    60e4:	0e 94 37 31 	call	0x626e	; 0x626e <Check_Login_Sucsess>
    60e8:	82 c0       	rjmp	.+260    	; 0x61ee <main+0x206>

		/* Wait for ECU1 Login Sucsess Signal to start Application */
		while(Login_Sucsess_Flag == 1)
		{
			/* Check User Input From Wifi */
			Read_Wifi();
    60ea:	0e 94 89 2c 	call	0x5912	; 0x5912 <Read_Wifi>
			/*read LM35 and LDR values*/
			getTempAndIntens();
    60ee:	0e 94 51 2e 	call	0x5ca2	; 0x5ca2 <getTempAndIntens>
			/* Update fan speed based on User input */
			Adjust_FanSpeed();
    60f2:	0e 94 23 2d 	call	0x5a46	; 0x5a46 <Adjust_FanSpeed>
			/* Update LED_intens based on User input */
			Adjust_LEDIntensety();
    60f6:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <Adjust_LEDIntensety>
			
			Show_Temperture_Wifi();
    60fa:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <Show_Temperture_Wifi>
			
			Led_Control();
    60fe:	0e 94 ac 2d 	call	0x5b58	; 0x5b58 <Led_Control>
			
			Logout_Request_Handler();
    6102:	0e 94 b8 33 	call	0x6770	; 0x6770 <Logout_Request_Handler>
			Motor_Control();
    6106:	0e 94 f8 2d 	call	0x5bf0	; 0x5bf0 <Motor_Control>
    610a:	80 e0       	ldi	r24, 0x00	; 0
    610c:	90 e0       	ldi	r25, 0x00	; 0
    610e:	a6 e1       	ldi	r26, 0x16	; 22
    6110:	b3 e4       	ldi	r27, 0x43	; 67
    6112:	8b 87       	std	Y+11, r24	; 0x0b
    6114:	9c 87       	std	Y+12, r25	; 0x0c
    6116:	ad 87       	std	Y+13, r26	; 0x0d
    6118:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    611a:	6b 85       	ldd	r22, Y+11	; 0x0b
    611c:	7c 85       	ldd	r23, Y+12	; 0x0c
    611e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6120:	9e 85       	ldd	r25, Y+14	; 0x0e
    6122:	20 e0       	ldi	r18, 0x00	; 0
    6124:	30 e0       	ldi	r19, 0x00	; 0
    6126:	4a e7       	ldi	r20, 0x7A	; 122
    6128:	55 e4       	ldi	r21, 0x45	; 69
    612a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    612e:	dc 01       	movw	r26, r24
    6130:	cb 01       	movw	r24, r22
    6132:	8f 83       	std	Y+7, r24	; 0x07
    6134:	98 87       	std	Y+8, r25	; 0x08
    6136:	a9 87       	std	Y+9, r26	; 0x09
    6138:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    613a:	6f 81       	ldd	r22, Y+7	; 0x07
    613c:	78 85       	ldd	r23, Y+8	; 0x08
    613e:	89 85       	ldd	r24, Y+9	; 0x09
    6140:	9a 85       	ldd	r25, Y+10	; 0x0a
    6142:	20 e0       	ldi	r18, 0x00	; 0
    6144:	30 e0       	ldi	r19, 0x00	; 0
    6146:	40 e8       	ldi	r20, 0x80	; 128
    6148:	5f e3       	ldi	r21, 0x3F	; 63
    614a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    614e:	88 23       	and	r24, r24
    6150:	2c f4       	brge	.+10     	; 0x615c <main+0x174>
		__ticks = 1;
    6152:	81 e0       	ldi	r24, 0x01	; 1
    6154:	90 e0       	ldi	r25, 0x00	; 0
    6156:	9e 83       	std	Y+6, r25	; 0x06
    6158:	8d 83       	std	Y+5, r24	; 0x05
    615a:	3f c0       	rjmp	.+126    	; 0x61da <main+0x1f2>
	else if (__tmp > 65535)
    615c:	6f 81       	ldd	r22, Y+7	; 0x07
    615e:	78 85       	ldd	r23, Y+8	; 0x08
    6160:	89 85       	ldd	r24, Y+9	; 0x09
    6162:	9a 85       	ldd	r25, Y+10	; 0x0a
    6164:	20 e0       	ldi	r18, 0x00	; 0
    6166:	3f ef       	ldi	r19, 0xFF	; 255
    6168:	4f e7       	ldi	r20, 0x7F	; 127
    616a:	57 e4       	ldi	r21, 0x47	; 71
    616c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6170:	18 16       	cp	r1, r24
    6172:	4c f5       	brge	.+82     	; 0x61c6 <main+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6174:	6b 85       	ldd	r22, Y+11	; 0x0b
    6176:	7c 85       	ldd	r23, Y+12	; 0x0c
    6178:	8d 85       	ldd	r24, Y+13	; 0x0d
    617a:	9e 85       	ldd	r25, Y+14	; 0x0e
    617c:	20 e0       	ldi	r18, 0x00	; 0
    617e:	30 e0       	ldi	r19, 0x00	; 0
    6180:	40 e2       	ldi	r20, 0x20	; 32
    6182:	51 e4       	ldi	r21, 0x41	; 65
    6184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6188:	dc 01       	movw	r26, r24
    618a:	cb 01       	movw	r24, r22
    618c:	bc 01       	movw	r22, r24
    618e:	cd 01       	movw	r24, r26
    6190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6194:	dc 01       	movw	r26, r24
    6196:	cb 01       	movw	r24, r22
    6198:	9e 83       	std	Y+6, r25	; 0x06
    619a:	8d 83       	std	Y+5, r24	; 0x05
    619c:	0f c0       	rjmp	.+30     	; 0x61bc <main+0x1d4>
    619e:	80 e9       	ldi	r24, 0x90	; 144
    61a0:	91 e0       	ldi	r25, 0x01	; 1
    61a2:	9c 83       	std	Y+4, r25	; 0x04
    61a4:	8b 83       	std	Y+3, r24	; 0x03
    61a6:	8b 81       	ldd	r24, Y+3	; 0x03
    61a8:	9c 81       	ldd	r25, Y+4	; 0x04
    61aa:	01 97       	sbiw	r24, 0x01	; 1
    61ac:	f1 f7       	brne	.-4      	; 0x61aa <main+0x1c2>
    61ae:	9c 83       	std	Y+4, r25	; 0x04
    61b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    61b2:	8d 81       	ldd	r24, Y+5	; 0x05
    61b4:	9e 81       	ldd	r25, Y+6	; 0x06
    61b6:	01 97       	sbiw	r24, 0x01	; 1
    61b8:	9e 83       	std	Y+6, r25	; 0x06
    61ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    61bc:	8d 81       	ldd	r24, Y+5	; 0x05
    61be:	9e 81       	ldd	r25, Y+6	; 0x06
    61c0:	00 97       	sbiw	r24, 0x00	; 0
    61c2:	69 f7       	brne	.-38     	; 0x619e <main+0x1b6>
    61c4:	14 c0       	rjmp	.+40     	; 0x61ee <main+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61c6:	6f 81       	ldd	r22, Y+7	; 0x07
    61c8:	78 85       	ldd	r23, Y+8	; 0x08
    61ca:	89 85       	ldd	r24, Y+9	; 0x09
    61cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    61ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61d2:	dc 01       	movw	r26, r24
    61d4:	cb 01       	movw	r24, r22
    61d6:	9e 83       	std	Y+6, r25	; 0x06
    61d8:	8d 83       	std	Y+5, r24	; 0x05
    61da:	8d 81       	ldd	r24, Y+5	; 0x05
    61dc:	9e 81       	ldd	r25, Y+6	; 0x06
    61de:	9a 83       	std	Y+2, r25	; 0x02
    61e0:	89 83       	std	Y+1, r24	; 0x01
    61e2:	89 81       	ldd	r24, Y+1	; 0x01
    61e4:	9a 81       	ldd	r25, Y+2	; 0x02
    61e6:	01 97       	sbiw	r24, 0x01	; 1
    61e8:	f1 f7       	brne	.-4      	; 0x61e6 <main+0x1fe>
    61ea:	9a 83       	std	Y+2, r25	; 0x02
    61ec:	89 83       	std	Y+1, r24	; 0x01
		
	while(1)
	{

		/* Wait for ECU1 Login Sucsess Signal to start Application */
		while(Login_Sucsess_Flag == 1)
    61ee:	80 91 6b 06 	lds	r24, 0x066B
    61f2:	81 30       	cpi	r24, 0x01	; 1
    61f4:	09 f4       	brne	.+2      	; 0x61f8 <main+0x210>
    61f6:	79 cf       	rjmp	.-270    	; 0x60ea <main+0x102>
    61f8:	fa cf       	rjmp	.-12     	; 0x61ee <main+0x206>

000061fa <sytem_init>:
extern EXTI_CONFIG_t EXTI_INT_ArrConfig[EXTI_INT_ArrConfig_Size];

System_cfg_t system_cfg = {PORT_Config_Arr};
	
	
ES_t sytem_init(){
    61fa:	df 93       	push	r29
    61fc:	cf 93       	push	r28
    61fe:	0f 92       	push	r0
    6200:	cd b7       	in	r28, 0x3d	; 61
    6202:	de b7       	in	r29, 0x3e	; 62
	/* Initialize all Required Ports and Pins */
		//Port_Init(copy_system_cfg.port_cfg,20);
		Port_Init(PORT_Config_Arr , 21);
    6204:	8b e0       	ldi	r24, 0x0B	; 11
    6206:	94 e0       	ldi	r25, 0x04	; 4
    6208:	65 e1       	ldi	r22, 0x15	; 21
    620a:	70 e0       	ldi	r23, 0x00	; 0
    620c:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <Port_Init>

		
		/* LCD Initialization */
		H_LCD_void_Init();
    6210:	0e 94 cb 2b 	call	0x5796	; 0x5796 <H_LCD_void_Init>

		/* Global interrupt Initialization */
		M_vEnable_Global_Interrupts();
    6214:	0e 94 98 11 	call	0x2330	; 0x2330 <M_vEnable_Global_Interrupts>

		/* UART Initialization */
		UART_Init(UART_CONFIG2);
    6218:	80 91 5b 04 	lds	r24, 0x045B
    621c:	90 91 5c 04 	lds	r25, 0x045C
    6220:	a0 91 5d 04 	lds	r26, 0x045D
    6224:	b0 91 5e 04 	lds	r27, 0x045E
    6228:	bc 01       	movw	r22, r24
    622a:	cd 01       	movw	r24, r26
    622c:	0e 94 75 07 	call	0xeea	; 0xeea <UART_Init>

		/* Timer0 Init */
		M_vTIMER0_Init( TIMER0_PWM_PhaseCorrect_MODE,  TIMER0_PWM_PHASECORRECT_NonInverted_MODE);
    6230:	80 e4       	ldi	r24, 0x40	; 64
    6232:	60 e2       	ldi	r22, 0x20	; 32
    6234:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <M_vTIMER0_Init>
		
		/* Timer1 Init */
		M_TIMER1_void_Init(Timer_1_Fast_PWM, TIMER_1_NonINV );
    6238:	81 e0       	ldi	r24, 0x01	; 1
    623a:	61 e0       	ldi	r22, 0x01	; 1
    623c:	0e 94 37 09 	call	0x126e	; 0x126e <M_TIMER1_void_Init>

		
		M_vEXTI_INT_Enable(EXTI_INT_ArrConfig);
    6240:	8b ed       	ldi	r24, 0xDB	; 219
    6242:	93 e0       	ldi	r25, 0x03	; 3
    6244:	0e 94 b4 11 	call	0x2368	; 0x2368 <M_vEXTI_INT_Enable>
		M_vEXTI_SetCallBack(ECU1_Login_Sucsess_Signal, EXTI_INT0);
    6248:	8d e2       	ldi	r24, 0x2D	; 45
    624a:	91 e3       	ldi	r25, 0x31	; 49
    624c:	60 e0       	ldi	r22, 0x00	; 0
    624e:	0e 94 94 12 	call	0x2528	; 0x2528 <M_vEXTI_SetCallBack>
		
		/* Wifi Init and Connect */
		

}
    6252:	0f 90       	pop	r0
    6254:	cf 91       	pop	r28
    6256:	df 91       	pop	r29
    6258:	08 95       	ret

0000625a <ECU1_Login_Sucsess_Signal>:


void ECU1_Login_Sucsess_Signal()
{
    625a:	df 93       	push	r29
    625c:	cf 93       	push	r28
    625e:	cd b7       	in	r28, 0x3d	; 61
    6260:	de b7       	in	r29, 0x3e	; 62
	Login_Sucsess_Flag = 1;
    6262:	81 e0       	ldi	r24, 0x01	; 1
    6264:	80 93 6b 06 	sts	0x066B, r24
}
    6268:	cf 91       	pop	r28
    626a:	df 91       	pop	r29
    626c:	08 95       	ret

0000626e <Check_Login_Sucsess>:


void Check_Login_Sucsess()
{
    626e:	0f 93       	push	r16
    6270:	1f 93       	push	r17
    6272:	df 93       	push	r29
    6274:	cf 93       	push	r28
    6276:	cd b7       	in	r28, 0x3d	; 61
    6278:	de b7       	in	r29, 0x3e	; 62
    627a:	c6 54       	subi	r28, 0x46	; 70
    627c:	d0 40       	sbci	r29, 0x00	; 0
    627e:	0f b6       	in	r0, 0x3f	; 63
    6280:	f8 94       	cli
    6282:	de bf       	out	0x3e, r29	; 62
    6284:	0f be       	out	0x3f, r0	; 63
    6286:	cd bf       	out	0x3d, r28	; 61
	Login_Sucsess_Flag =0;
    6288:	10 92 6b 06 	sts	0x066B, r1
	Logout_Request_Flag =1;
    628c:	81 e0       	ldi	r24, 0x01	; 1
    628e:	80 93 7a 06 	sts	0x067A, r24
	H_LCD_void_sendString("Wait User Login");
    6292:	82 e4       	ldi	r24, 0x42	; 66
    6294:	92 e0       	ldi	r25, 0x02	; 2
    6296:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <H_LCD_void_sendString>
	{
		
		//H_LCD_void_gotoXY(1,0);
		
		//_delay_ms(2000);		
		if (Login_Sucsess_Flag == 1)
    629a:	80 91 6b 06 	lds	r24, 0x066B
    629e:	81 30       	cpi	r24, 0x01	; 1
    62a0:	e1 f7       	brne	.-8      	; 0x629a <Check_Login_Sucsess+0x2c>
		{
			H_LCD_void_Clear_Display();
    62a2:	0e 94 be 2b 	call	0x577c	; 0x577c <H_LCD_void_Clear_Display>
    62a6:	fe 01       	movw	r30, r28
    62a8:	ed 5b       	subi	r30, 0xBD	; 189
    62aa:	ff 4f       	sbci	r31, 0xFF	; 255
    62ac:	80 e0       	ldi	r24, 0x00	; 0
    62ae:	90 e0       	ldi	r25, 0x00	; 0
    62b0:	a8 e4       	ldi	r26, 0x48	; 72
    62b2:	b3 e4       	ldi	r27, 0x43	; 67
    62b4:	80 83       	st	Z, r24
    62b6:	91 83       	std	Z+1, r25	; 0x01
    62b8:	a2 83       	std	Z+2, r26	; 0x02
    62ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    62bc:	8e 01       	movw	r16, r28
    62be:	01 5c       	subi	r16, 0xC1	; 193
    62c0:	1f 4f       	sbci	r17, 0xFF	; 255
    62c2:	fe 01       	movw	r30, r28
    62c4:	ed 5b       	subi	r30, 0xBD	; 189
    62c6:	ff 4f       	sbci	r31, 0xFF	; 255
    62c8:	60 81       	ld	r22, Z
    62ca:	71 81       	ldd	r23, Z+1	; 0x01
    62cc:	82 81       	ldd	r24, Z+2	; 0x02
    62ce:	93 81       	ldd	r25, Z+3	; 0x03
    62d0:	20 e0       	ldi	r18, 0x00	; 0
    62d2:	30 e0       	ldi	r19, 0x00	; 0
    62d4:	4a e7       	ldi	r20, 0x7A	; 122
    62d6:	55 e4       	ldi	r21, 0x45	; 69
    62d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62dc:	dc 01       	movw	r26, r24
    62de:	cb 01       	movw	r24, r22
    62e0:	f8 01       	movw	r30, r16
    62e2:	80 83       	st	Z, r24
    62e4:	91 83       	std	Z+1, r25	; 0x01
    62e6:	a2 83       	std	Z+2, r26	; 0x02
    62e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    62ea:	fe 01       	movw	r30, r28
    62ec:	ff 96       	adiw	r30, 0x3f	; 63
    62ee:	60 81       	ld	r22, Z
    62f0:	71 81       	ldd	r23, Z+1	; 0x01
    62f2:	82 81       	ldd	r24, Z+2	; 0x02
    62f4:	93 81       	ldd	r25, Z+3	; 0x03
    62f6:	20 e0       	ldi	r18, 0x00	; 0
    62f8:	30 e0       	ldi	r19, 0x00	; 0
    62fa:	40 e8       	ldi	r20, 0x80	; 128
    62fc:	5f e3       	ldi	r21, 0x3F	; 63
    62fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6302:	88 23       	and	r24, r24
    6304:	2c f4       	brge	.+10     	; 0x6310 <Check_Login_Sucsess+0xa2>
		__ticks = 1;
    6306:	81 e0       	ldi	r24, 0x01	; 1
    6308:	90 e0       	ldi	r25, 0x00	; 0
    630a:	9e af       	std	Y+62, r25	; 0x3e
    630c:	8d af       	std	Y+61, r24	; 0x3d
    630e:	46 c0       	rjmp	.+140    	; 0x639c <Check_Login_Sucsess+0x12e>
	else if (__tmp > 65535)
    6310:	fe 01       	movw	r30, r28
    6312:	ff 96       	adiw	r30, 0x3f	; 63
    6314:	60 81       	ld	r22, Z
    6316:	71 81       	ldd	r23, Z+1	; 0x01
    6318:	82 81       	ldd	r24, Z+2	; 0x02
    631a:	93 81       	ldd	r25, Z+3	; 0x03
    631c:	20 e0       	ldi	r18, 0x00	; 0
    631e:	3f ef       	ldi	r19, 0xFF	; 255
    6320:	4f e7       	ldi	r20, 0x7F	; 127
    6322:	57 e4       	ldi	r21, 0x47	; 71
    6324:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6328:	18 16       	cp	r1, r24
    632a:	64 f5       	brge	.+88     	; 0x6384 <Check_Login_Sucsess+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    632c:	fe 01       	movw	r30, r28
    632e:	ed 5b       	subi	r30, 0xBD	; 189
    6330:	ff 4f       	sbci	r31, 0xFF	; 255
    6332:	60 81       	ld	r22, Z
    6334:	71 81       	ldd	r23, Z+1	; 0x01
    6336:	82 81       	ldd	r24, Z+2	; 0x02
    6338:	93 81       	ldd	r25, Z+3	; 0x03
    633a:	20 e0       	ldi	r18, 0x00	; 0
    633c:	30 e0       	ldi	r19, 0x00	; 0
    633e:	40 e2       	ldi	r20, 0x20	; 32
    6340:	51 e4       	ldi	r21, 0x41	; 65
    6342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6346:	dc 01       	movw	r26, r24
    6348:	cb 01       	movw	r24, r22
    634a:	bc 01       	movw	r22, r24
    634c:	cd 01       	movw	r24, r26
    634e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6352:	dc 01       	movw	r26, r24
    6354:	cb 01       	movw	r24, r22
    6356:	9e af       	std	Y+62, r25	; 0x3e
    6358:	8d af       	std	Y+61, r24	; 0x3d
    635a:	0f c0       	rjmp	.+30     	; 0x637a <Check_Login_Sucsess+0x10c>
    635c:	80 e9       	ldi	r24, 0x90	; 144
    635e:	91 e0       	ldi	r25, 0x01	; 1
    6360:	9c af       	std	Y+60, r25	; 0x3c
    6362:	8b af       	std	Y+59, r24	; 0x3b
    6364:	8b ad       	ldd	r24, Y+59	; 0x3b
    6366:	9c ad       	ldd	r25, Y+60	; 0x3c
    6368:	01 97       	sbiw	r24, 0x01	; 1
    636a:	f1 f7       	brne	.-4      	; 0x6368 <Check_Login_Sucsess+0xfa>
    636c:	9c af       	std	Y+60, r25	; 0x3c
    636e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6370:	8d ad       	ldd	r24, Y+61	; 0x3d
    6372:	9e ad       	ldd	r25, Y+62	; 0x3e
    6374:	01 97       	sbiw	r24, 0x01	; 1
    6376:	9e af       	std	Y+62, r25	; 0x3e
    6378:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    637a:	8d ad       	ldd	r24, Y+61	; 0x3d
    637c:	9e ad       	ldd	r25, Y+62	; 0x3e
    637e:	00 97       	sbiw	r24, 0x00	; 0
    6380:	69 f7       	brne	.-38     	; 0x635c <Check_Login_Sucsess+0xee>
    6382:	16 c0       	rjmp	.+44     	; 0x63b0 <Check_Login_Sucsess+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6384:	fe 01       	movw	r30, r28
    6386:	ff 96       	adiw	r30, 0x3f	; 63
    6388:	60 81       	ld	r22, Z
    638a:	71 81       	ldd	r23, Z+1	; 0x01
    638c:	82 81       	ldd	r24, Z+2	; 0x02
    638e:	93 81       	ldd	r25, Z+3	; 0x03
    6390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6394:	dc 01       	movw	r26, r24
    6396:	cb 01       	movw	r24, r22
    6398:	9e af       	std	Y+62, r25	; 0x3e
    639a:	8d af       	std	Y+61, r24	; 0x3d
    639c:	8d ad       	ldd	r24, Y+61	; 0x3d
    639e:	9e ad       	ldd	r25, Y+62	; 0x3e
    63a0:	9a af       	std	Y+58, r25	; 0x3a
    63a2:	89 af       	std	Y+57, r24	; 0x39
    63a4:	89 ad       	ldd	r24, Y+57	; 0x39
    63a6:	9a ad       	ldd	r25, Y+58	; 0x3a
    63a8:	01 97       	sbiw	r24, 0x01	; 1
    63aa:	f1 f7       	brne	.-4      	; 0x63a8 <Check_Login_Sucsess+0x13a>
    63ac:	9a af       	std	Y+58, r25	; 0x3a
    63ae:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(200);
			H_LCD_void_sendString("welcome Home");
    63b0:	82 e5       	ldi	r24, 0x52	; 82
    63b2:	92 e0       	ldi	r25, 0x02	; 2
    63b4:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <H_LCD_void_sendString>
    63b8:	80 e0       	ldi	r24, 0x00	; 0
    63ba:	90 e0       	ldi	r25, 0x00	; 0
    63bc:	aa e7       	ldi	r26, 0x7A	; 122
    63be:	b4 e4       	ldi	r27, 0x44	; 68
    63c0:	8d ab       	std	Y+53, r24	; 0x35
    63c2:	9e ab       	std	Y+54, r25	; 0x36
    63c4:	af ab       	std	Y+55, r26	; 0x37
    63c6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    63c8:	6d a9       	ldd	r22, Y+53	; 0x35
    63ca:	7e a9       	ldd	r23, Y+54	; 0x36
    63cc:	8f a9       	ldd	r24, Y+55	; 0x37
    63ce:	98 ad       	ldd	r25, Y+56	; 0x38
    63d0:	20 e0       	ldi	r18, 0x00	; 0
    63d2:	30 e0       	ldi	r19, 0x00	; 0
    63d4:	4a e7       	ldi	r20, 0x7A	; 122
    63d6:	55 e4       	ldi	r21, 0x45	; 69
    63d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    63dc:	dc 01       	movw	r26, r24
    63de:	cb 01       	movw	r24, r22
    63e0:	89 ab       	std	Y+49, r24	; 0x31
    63e2:	9a ab       	std	Y+50, r25	; 0x32
    63e4:	ab ab       	std	Y+51, r26	; 0x33
    63e6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    63e8:	69 a9       	ldd	r22, Y+49	; 0x31
    63ea:	7a a9       	ldd	r23, Y+50	; 0x32
    63ec:	8b a9       	ldd	r24, Y+51	; 0x33
    63ee:	9c a9       	ldd	r25, Y+52	; 0x34
    63f0:	20 e0       	ldi	r18, 0x00	; 0
    63f2:	30 e0       	ldi	r19, 0x00	; 0
    63f4:	40 e8       	ldi	r20, 0x80	; 128
    63f6:	5f e3       	ldi	r21, 0x3F	; 63
    63f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    63fc:	88 23       	and	r24, r24
    63fe:	2c f4       	brge	.+10     	; 0x640a <Check_Login_Sucsess+0x19c>
		__ticks = 1;
    6400:	81 e0       	ldi	r24, 0x01	; 1
    6402:	90 e0       	ldi	r25, 0x00	; 0
    6404:	98 ab       	std	Y+48, r25	; 0x30
    6406:	8f a7       	std	Y+47, r24	; 0x2f
    6408:	3f c0       	rjmp	.+126    	; 0x6488 <Check_Login_Sucsess+0x21a>
	else if (__tmp > 65535)
    640a:	69 a9       	ldd	r22, Y+49	; 0x31
    640c:	7a a9       	ldd	r23, Y+50	; 0x32
    640e:	8b a9       	ldd	r24, Y+51	; 0x33
    6410:	9c a9       	ldd	r25, Y+52	; 0x34
    6412:	20 e0       	ldi	r18, 0x00	; 0
    6414:	3f ef       	ldi	r19, 0xFF	; 255
    6416:	4f e7       	ldi	r20, 0x7F	; 127
    6418:	57 e4       	ldi	r21, 0x47	; 71
    641a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    641e:	18 16       	cp	r1, r24
    6420:	4c f5       	brge	.+82     	; 0x6474 <Check_Login_Sucsess+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6422:	6d a9       	ldd	r22, Y+53	; 0x35
    6424:	7e a9       	ldd	r23, Y+54	; 0x36
    6426:	8f a9       	ldd	r24, Y+55	; 0x37
    6428:	98 ad       	ldd	r25, Y+56	; 0x38
    642a:	20 e0       	ldi	r18, 0x00	; 0
    642c:	30 e0       	ldi	r19, 0x00	; 0
    642e:	40 e2       	ldi	r20, 0x20	; 32
    6430:	51 e4       	ldi	r21, 0x41	; 65
    6432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6436:	dc 01       	movw	r26, r24
    6438:	cb 01       	movw	r24, r22
    643a:	bc 01       	movw	r22, r24
    643c:	cd 01       	movw	r24, r26
    643e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6442:	dc 01       	movw	r26, r24
    6444:	cb 01       	movw	r24, r22
    6446:	98 ab       	std	Y+48, r25	; 0x30
    6448:	8f a7       	std	Y+47, r24	; 0x2f
    644a:	0f c0       	rjmp	.+30     	; 0x646a <Check_Login_Sucsess+0x1fc>
    644c:	80 e9       	ldi	r24, 0x90	; 144
    644e:	91 e0       	ldi	r25, 0x01	; 1
    6450:	9e a7       	std	Y+46, r25	; 0x2e
    6452:	8d a7       	std	Y+45, r24	; 0x2d
    6454:	8d a5       	ldd	r24, Y+45	; 0x2d
    6456:	9e a5       	ldd	r25, Y+46	; 0x2e
    6458:	01 97       	sbiw	r24, 0x01	; 1
    645a:	f1 f7       	brne	.-4      	; 0x6458 <Check_Login_Sucsess+0x1ea>
    645c:	9e a7       	std	Y+46, r25	; 0x2e
    645e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6460:	8f a5       	ldd	r24, Y+47	; 0x2f
    6462:	98 a9       	ldd	r25, Y+48	; 0x30
    6464:	01 97       	sbiw	r24, 0x01	; 1
    6466:	98 ab       	std	Y+48, r25	; 0x30
    6468:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    646a:	8f a5       	ldd	r24, Y+47	; 0x2f
    646c:	98 a9       	ldd	r25, Y+48	; 0x30
    646e:	00 97       	sbiw	r24, 0x00	; 0
    6470:	69 f7       	brne	.-38     	; 0x644c <Check_Login_Sucsess+0x1de>
    6472:	14 c0       	rjmp	.+40     	; 0x649c <Check_Login_Sucsess+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6474:	69 a9       	ldd	r22, Y+49	; 0x31
    6476:	7a a9       	ldd	r23, Y+50	; 0x32
    6478:	8b a9       	ldd	r24, Y+51	; 0x33
    647a:	9c a9       	ldd	r25, Y+52	; 0x34
    647c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6480:	dc 01       	movw	r26, r24
    6482:	cb 01       	movw	r24, r22
    6484:	98 ab       	std	Y+48, r25	; 0x30
    6486:	8f a7       	std	Y+47, r24	; 0x2f
    6488:	8f a5       	ldd	r24, Y+47	; 0x2f
    648a:	98 a9       	ldd	r25, Y+48	; 0x30
    648c:	9c a7       	std	Y+44, r25	; 0x2c
    648e:	8b a7       	std	Y+43, r24	; 0x2b
    6490:	8b a5       	ldd	r24, Y+43	; 0x2b
    6492:	9c a5       	ldd	r25, Y+44	; 0x2c
    6494:	01 97       	sbiw	r24, 0x01	; 1
    6496:	f1 f7       	brne	.-4      	; 0x6494 <Check_Login_Sucsess+0x226>
    6498:	9c a7       	std	Y+44, r25	; 0x2c
    649a:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1000);
			H_LCD_void_Clear_Display();
    649c:	0e 94 be 2b 	call	0x577c	; 0x577c <H_LCD_void_Clear_Display>
    64a0:	80 e0       	ldi	r24, 0x00	; 0
    64a2:	90 e0       	ldi	r25, 0x00	; 0
    64a4:	a8 e4       	ldi	r26, 0x48	; 72
    64a6:	b3 e4       	ldi	r27, 0x43	; 67
    64a8:	8f a3       	std	Y+39, r24	; 0x27
    64aa:	98 a7       	std	Y+40, r25	; 0x28
    64ac:	a9 a7       	std	Y+41, r26	; 0x29
    64ae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    64b0:	6f a1       	ldd	r22, Y+39	; 0x27
    64b2:	78 a5       	ldd	r23, Y+40	; 0x28
    64b4:	89 a5       	ldd	r24, Y+41	; 0x29
    64b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    64b8:	20 e0       	ldi	r18, 0x00	; 0
    64ba:	30 e0       	ldi	r19, 0x00	; 0
    64bc:	4a e7       	ldi	r20, 0x7A	; 122
    64be:	55 e4       	ldi	r21, 0x45	; 69
    64c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    64c4:	dc 01       	movw	r26, r24
    64c6:	cb 01       	movw	r24, r22
    64c8:	8b a3       	std	Y+35, r24	; 0x23
    64ca:	9c a3       	std	Y+36, r25	; 0x24
    64cc:	ad a3       	std	Y+37, r26	; 0x25
    64ce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    64d0:	6b a1       	ldd	r22, Y+35	; 0x23
    64d2:	7c a1       	ldd	r23, Y+36	; 0x24
    64d4:	8d a1       	ldd	r24, Y+37	; 0x25
    64d6:	9e a1       	ldd	r25, Y+38	; 0x26
    64d8:	20 e0       	ldi	r18, 0x00	; 0
    64da:	30 e0       	ldi	r19, 0x00	; 0
    64dc:	40 e8       	ldi	r20, 0x80	; 128
    64de:	5f e3       	ldi	r21, 0x3F	; 63
    64e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    64e4:	88 23       	and	r24, r24
    64e6:	2c f4       	brge	.+10     	; 0x64f2 <Check_Login_Sucsess+0x284>
		__ticks = 1;
    64e8:	81 e0       	ldi	r24, 0x01	; 1
    64ea:	90 e0       	ldi	r25, 0x00	; 0
    64ec:	9a a3       	std	Y+34, r25	; 0x22
    64ee:	89 a3       	std	Y+33, r24	; 0x21
    64f0:	3f c0       	rjmp	.+126    	; 0x6570 <Check_Login_Sucsess+0x302>
	else if (__tmp > 65535)
    64f2:	6b a1       	ldd	r22, Y+35	; 0x23
    64f4:	7c a1       	ldd	r23, Y+36	; 0x24
    64f6:	8d a1       	ldd	r24, Y+37	; 0x25
    64f8:	9e a1       	ldd	r25, Y+38	; 0x26
    64fa:	20 e0       	ldi	r18, 0x00	; 0
    64fc:	3f ef       	ldi	r19, 0xFF	; 255
    64fe:	4f e7       	ldi	r20, 0x7F	; 127
    6500:	57 e4       	ldi	r21, 0x47	; 71
    6502:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6506:	18 16       	cp	r1, r24
    6508:	4c f5       	brge	.+82     	; 0x655c <Check_Login_Sucsess+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    650a:	6f a1       	ldd	r22, Y+39	; 0x27
    650c:	78 a5       	ldd	r23, Y+40	; 0x28
    650e:	89 a5       	ldd	r24, Y+41	; 0x29
    6510:	9a a5       	ldd	r25, Y+42	; 0x2a
    6512:	20 e0       	ldi	r18, 0x00	; 0
    6514:	30 e0       	ldi	r19, 0x00	; 0
    6516:	40 e2       	ldi	r20, 0x20	; 32
    6518:	51 e4       	ldi	r21, 0x41	; 65
    651a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    651e:	dc 01       	movw	r26, r24
    6520:	cb 01       	movw	r24, r22
    6522:	bc 01       	movw	r22, r24
    6524:	cd 01       	movw	r24, r26
    6526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    652a:	dc 01       	movw	r26, r24
    652c:	cb 01       	movw	r24, r22
    652e:	9a a3       	std	Y+34, r25	; 0x22
    6530:	89 a3       	std	Y+33, r24	; 0x21
    6532:	0f c0       	rjmp	.+30     	; 0x6552 <Check_Login_Sucsess+0x2e4>
    6534:	80 e9       	ldi	r24, 0x90	; 144
    6536:	91 e0       	ldi	r25, 0x01	; 1
    6538:	98 a3       	std	Y+32, r25	; 0x20
    653a:	8f 8f       	std	Y+31, r24	; 0x1f
    653c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    653e:	98 a1       	ldd	r25, Y+32	; 0x20
    6540:	01 97       	sbiw	r24, 0x01	; 1
    6542:	f1 f7       	brne	.-4      	; 0x6540 <Check_Login_Sucsess+0x2d2>
    6544:	98 a3       	std	Y+32, r25	; 0x20
    6546:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6548:	89 a1       	ldd	r24, Y+33	; 0x21
    654a:	9a a1       	ldd	r25, Y+34	; 0x22
    654c:	01 97       	sbiw	r24, 0x01	; 1
    654e:	9a a3       	std	Y+34, r25	; 0x22
    6550:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6552:	89 a1       	ldd	r24, Y+33	; 0x21
    6554:	9a a1       	ldd	r25, Y+34	; 0x22
    6556:	00 97       	sbiw	r24, 0x00	; 0
    6558:	69 f7       	brne	.-38     	; 0x6534 <Check_Login_Sucsess+0x2c6>
    655a:	14 c0       	rjmp	.+40     	; 0x6584 <Check_Login_Sucsess+0x316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    655c:	6b a1       	ldd	r22, Y+35	; 0x23
    655e:	7c a1       	ldd	r23, Y+36	; 0x24
    6560:	8d a1       	ldd	r24, Y+37	; 0x25
    6562:	9e a1       	ldd	r25, Y+38	; 0x26
    6564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6568:	dc 01       	movw	r26, r24
    656a:	cb 01       	movw	r24, r22
    656c:	9a a3       	std	Y+34, r25	; 0x22
    656e:	89 a3       	std	Y+33, r24	; 0x21
    6570:	89 a1       	ldd	r24, Y+33	; 0x21
    6572:	9a a1       	ldd	r25, Y+34	; 0x22
    6574:	9e 8f       	std	Y+30, r25	; 0x1e
    6576:	8d 8f       	std	Y+29, r24	; 0x1d
    6578:	8d 8d       	ldd	r24, Y+29	; 0x1d
    657a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    657c:	01 97       	sbiw	r24, 0x01	; 1
    657e:	f1 f7       	brne	.-4      	; 0x657c <Check_Login_Sucsess+0x30e>
    6580:	9e 8f       	std	Y+30, r25	; 0x1e
    6582:	8d 8f       	std	Y+29, r24	; 0x1d
			
			_delay_ms(200);
			wifi_connect();
    6584:	0e 94 e5 18 	call	0x31ca	; 0x31ca <wifi_connect>
    6588:	80 e0       	ldi	r24, 0x00	; 0
    658a:	90 e0       	ldi	r25, 0x00	; 0
    658c:	a8 e4       	ldi	r26, 0x48	; 72
    658e:	b3 e4       	ldi	r27, 0x43	; 67
    6590:	89 8f       	std	Y+25, r24	; 0x19
    6592:	9a 8f       	std	Y+26, r25	; 0x1a
    6594:	ab 8f       	std	Y+27, r26	; 0x1b
    6596:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6598:	69 8d       	ldd	r22, Y+25	; 0x19
    659a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    659c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    659e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    65a0:	20 e0       	ldi	r18, 0x00	; 0
    65a2:	30 e0       	ldi	r19, 0x00	; 0
    65a4:	4a e7       	ldi	r20, 0x7A	; 122
    65a6:	55 e4       	ldi	r21, 0x45	; 69
    65a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    65ac:	dc 01       	movw	r26, r24
    65ae:	cb 01       	movw	r24, r22
    65b0:	8d 8b       	std	Y+21, r24	; 0x15
    65b2:	9e 8b       	std	Y+22, r25	; 0x16
    65b4:	af 8b       	std	Y+23, r26	; 0x17
    65b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    65b8:	6d 89       	ldd	r22, Y+21	; 0x15
    65ba:	7e 89       	ldd	r23, Y+22	; 0x16
    65bc:	8f 89       	ldd	r24, Y+23	; 0x17
    65be:	98 8d       	ldd	r25, Y+24	; 0x18
    65c0:	20 e0       	ldi	r18, 0x00	; 0
    65c2:	30 e0       	ldi	r19, 0x00	; 0
    65c4:	40 e8       	ldi	r20, 0x80	; 128
    65c6:	5f e3       	ldi	r21, 0x3F	; 63
    65c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    65cc:	88 23       	and	r24, r24
    65ce:	2c f4       	brge	.+10     	; 0x65da <Check_Login_Sucsess+0x36c>
		__ticks = 1;
    65d0:	81 e0       	ldi	r24, 0x01	; 1
    65d2:	90 e0       	ldi	r25, 0x00	; 0
    65d4:	9c 8b       	std	Y+20, r25	; 0x14
    65d6:	8b 8b       	std	Y+19, r24	; 0x13
    65d8:	3f c0       	rjmp	.+126    	; 0x6658 <Check_Login_Sucsess+0x3ea>
	else if (__tmp > 65535)
    65da:	6d 89       	ldd	r22, Y+21	; 0x15
    65dc:	7e 89       	ldd	r23, Y+22	; 0x16
    65de:	8f 89       	ldd	r24, Y+23	; 0x17
    65e0:	98 8d       	ldd	r25, Y+24	; 0x18
    65e2:	20 e0       	ldi	r18, 0x00	; 0
    65e4:	3f ef       	ldi	r19, 0xFF	; 255
    65e6:	4f e7       	ldi	r20, 0x7F	; 127
    65e8:	57 e4       	ldi	r21, 0x47	; 71
    65ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    65ee:	18 16       	cp	r1, r24
    65f0:	4c f5       	brge	.+82     	; 0x6644 <Check_Login_Sucsess+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    65f2:	69 8d       	ldd	r22, Y+25	; 0x19
    65f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    65f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    65f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    65fa:	20 e0       	ldi	r18, 0x00	; 0
    65fc:	30 e0       	ldi	r19, 0x00	; 0
    65fe:	40 e2       	ldi	r20, 0x20	; 32
    6600:	51 e4       	ldi	r21, 0x41	; 65
    6602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6606:	dc 01       	movw	r26, r24
    6608:	cb 01       	movw	r24, r22
    660a:	bc 01       	movw	r22, r24
    660c:	cd 01       	movw	r24, r26
    660e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6612:	dc 01       	movw	r26, r24
    6614:	cb 01       	movw	r24, r22
    6616:	9c 8b       	std	Y+20, r25	; 0x14
    6618:	8b 8b       	std	Y+19, r24	; 0x13
    661a:	0f c0       	rjmp	.+30     	; 0x663a <Check_Login_Sucsess+0x3cc>
    661c:	80 e9       	ldi	r24, 0x90	; 144
    661e:	91 e0       	ldi	r25, 0x01	; 1
    6620:	9a 8b       	std	Y+18, r25	; 0x12
    6622:	89 8b       	std	Y+17, r24	; 0x11
    6624:	89 89       	ldd	r24, Y+17	; 0x11
    6626:	9a 89       	ldd	r25, Y+18	; 0x12
    6628:	01 97       	sbiw	r24, 0x01	; 1
    662a:	f1 f7       	brne	.-4      	; 0x6628 <Check_Login_Sucsess+0x3ba>
    662c:	9a 8b       	std	Y+18, r25	; 0x12
    662e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6630:	8b 89       	ldd	r24, Y+19	; 0x13
    6632:	9c 89       	ldd	r25, Y+20	; 0x14
    6634:	01 97       	sbiw	r24, 0x01	; 1
    6636:	9c 8b       	std	Y+20, r25	; 0x14
    6638:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    663a:	8b 89       	ldd	r24, Y+19	; 0x13
    663c:	9c 89       	ldd	r25, Y+20	; 0x14
    663e:	00 97       	sbiw	r24, 0x00	; 0
    6640:	69 f7       	brne	.-38     	; 0x661c <Check_Login_Sucsess+0x3ae>
    6642:	14 c0       	rjmp	.+40     	; 0x666c <Check_Login_Sucsess+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6644:	6d 89       	ldd	r22, Y+21	; 0x15
    6646:	7e 89       	ldd	r23, Y+22	; 0x16
    6648:	8f 89       	ldd	r24, Y+23	; 0x17
    664a:	98 8d       	ldd	r25, Y+24	; 0x18
    664c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6650:	dc 01       	movw	r26, r24
    6652:	cb 01       	movw	r24, r22
    6654:	9c 8b       	std	Y+20, r25	; 0x14
    6656:	8b 8b       	std	Y+19, r24	; 0x13
    6658:	8b 89       	ldd	r24, Y+19	; 0x13
    665a:	9c 89       	ldd	r25, Y+20	; 0x14
    665c:	98 8b       	std	Y+16, r25	; 0x10
    665e:	8f 87       	std	Y+15, r24	; 0x0f
    6660:	8f 85       	ldd	r24, Y+15	; 0x0f
    6662:	98 89       	ldd	r25, Y+16	; 0x10
    6664:	01 97       	sbiw	r24, 0x01	; 1
    6666:	f1 f7       	brne	.-4      	; 0x6664 <Check_Login_Sucsess+0x3f6>
    6668:	98 8b       	std	Y+16, r25	; 0x10
    666a:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(200);
			
			Show_Menu_Wifi();
    666c:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <Show_Menu_Wifi>
			H_LCD_void_Clear_Display();
    6670:	0e 94 be 2b 	call	0x577c	; 0x577c <H_LCD_void_Clear_Display>
    6674:	80 e0       	ldi	r24, 0x00	; 0
    6676:	90 e0       	ldi	r25, 0x00	; 0
    6678:	a8 e4       	ldi	r26, 0x48	; 72
    667a:	b3 e4       	ldi	r27, 0x43	; 67
    667c:	8b 87       	std	Y+11, r24	; 0x0b
    667e:	9c 87       	std	Y+12, r25	; 0x0c
    6680:	ad 87       	std	Y+13, r26	; 0x0d
    6682:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6684:	6b 85       	ldd	r22, Y+11	; 0x0b
    6686:	7c 85       	ldd	r23, Y+12	; 0x0c
    6688:	8d 85       	ldd	r24, Y+13	; 0x0d
    668a:	9e 85       	ldd	r25, Y+14	; 0x0e
    668c:	20 e0       	ldi	r18, 0x00	; 0
    668e:	30 e0       	ldi	r19, 0x00	; 0
    6690:	4a e7       	ldi	r20, 0x7A	; 122
    6692:	55 e4       	ldi	r21, 0x45	; 69
    6694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6698:	dc 01       	movw	r26, r24
    669a:	cb 01       	movw	r24, r22
    669c:	8f 83       	std	Y+7, r24	; 0x07
    669e:	98 87       	std	Y+8, r25	; 0x08
    66a0:	a9 87       	std	Y+9, r26	; 0x09
    66a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    66a4:	6f 81       	ldd	r22, Y+7	; 0x07
    66a6:	78 85       	ldd	r23, Y+8	; 0x08
    66a8:	89 85       	ldd	r24, Y+9	; 0x09
    66aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    66ac:	20 e0       	ldi	r18, 0x00	; 0
    66ae:	30 e0       	ldi	r19, 0x00	; 0
    66b0:	40 e8       	ldi	r20, 0x80	; 128
    66b2:	5f e3       	ldi	r21, 0x3F	; 63
    66b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    66b8:	88 23       	and	r24, r24
    66ba:	2c f4       	brge	.+10     	; 0x66c6 <Check_Login_Sucsess+0x458>
		__ticks = 1;
    66bc:	81 e0       	ldi	r24, 0x01	; 1
    66be:	90 e0       	ldi	r25, 0x00	; 0
    66c0:	9e 83       	std	Y+6, r25	; 0x06
    66c2:	8d 83       	std	Y+5, r24	; 0x05
    66c4:	3f c0       	rjmp	.+126    	; 0x6744 <Check_Login_Sucsess+0x4d6>
	else if (__tmp > 65535)
    66c6:	6f 81       	ldd	r22, Y+7	; 0x07
    66c8:	78 85       	ldd	r23, Y+8	; 0x08
    66ca:	89 85       	ldd	r24, Y+9	; 0x09
    66cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    66ce:	20 e0       	ldi	r18, 0x00	; 0
    66d0:	3f ef       	ldi	r19, 0xFF	; 255
    66d2:	4f e7       	ldi	r20, 0x7F	; 127
    66d4:	57 e4       	ldi	r21, 0x47	; 71
    66d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    66da:	18 16       	cp	r1, r24
    66dc:	4c f5       	brge	.+82     	; 0x6730 <Check_Login_Sucsess+0x4c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    66de:	6b 85       	ldd	r22, Y+11	; 0x0b
    66e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    66e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    66e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    66e6:	20 e0       	ldi	r18, 0x00	; 0
    66e8:	30 e0       	ldi	r19, 0x00	; 0
    66ea:	40 e2       	ldi	r20, 0x20	; 32
    66ec:	51 e4       	ldi	r21, 0x41	; 65
    66ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    66f2:	dc 01       	movw	r26, r24
    66f4:	cb 01       	movw	r24, r22
    66f6:	bc 01       	movw	r22, r24
    66f8:	cd 01       	movw	r24, r26
    66fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    66fe:	dc 01       	movw	r26, r24
    6700:	cb 01       	movw	r24, r22
    6702:	9e 83       	std	Y+6, r25	; 0x06
    6704:	8d 83       	std	Y+5, r24	; 0x05
    6706:	0f c0       	rjmp	.+30     	; 0x6726 <Check_Login_Sucsess+0x4b8>
    6708:	80 e9       	ldi	r24, 0x90	; 144
    670a:	91 e0       	ldi	r25, 0x01	; 1
    670c:	9c 83       	std	Y+4, r25	; 0x04
    670e:	8b 83       	std	Y+3, r24	; 0x03
    6710:	8b 81       	ldd	r24, Y+3	; 0x03
    6712:	9c 81       	ldd	r25, Y+4	; 0x04
    6714:	01 97       	sbiw	r24, 0x01	; 1
    6716:	f1 f7       	brne	.-4      	; 0x6714 <Check_Login_Sucsess+0x4a6>
    6718:	9c 83       	std	Y+4, r25	; 0x04
    671a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    671c:	8d 81       	ldd	r24, Y+5	; 0x05
    671e:	9e 81       	ldd	r25, Y+6	; 0x06
    6720:	01 97       	sbiw	r24, 0x01	; 1
    6722:	9e 83       	std	Y+6, r25	; 0x06
    6724:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6726:	8d 81       	ldd	r24, Y+5	; 0x05
    6728:	9e 81       	ldd	r25, Y+6	; 0x06
    672a:	00 97       	sbiw	r24, 0x00	; 0
    672c:	69 f7       	brne	.-38     	; 0x6708 <Check_Login_Sucsess+0x49a>
    672e:	14 c0       	rjmp	.+40     	; 0x6758 <Check_Login_Sucsess+0x4ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6730:	6f 81       	ldd	r22, Y+7	; 0x07
    6732:	78 85       	ldd	r23, Y+8	; 0x08
    6734:	89 85       	ldd	r24, Y+9	; 0x09
    6736:	9a 85       	ldd	r25, Y+10	; 0x0a
    6738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    673c:	dc 01       	movw	r26, r24
    673e:	cb 01       	movw	r24, r22
    6740:	9e 83       	std	Y+6, r25	; 0x06
    6742:	8d 83       	std	Y+5, r24	; 0x05
    6744:	8d 81       	ldd	r24, Y+5	; 0x05
    6746:	9e 81       	ldd	r25, Y+6	; 0x06
    6748:	9a 83       	std	Y+2, r25	; 0x02
    674a:	89 83       	std	Y+1, r24	; 0x01
    674c:	89 81       	ldd	r24, Y+1	; 0x01
    674e:	9a 81       	ldd	r25, Y+2	; 0x02
    6750:	01 97       	sbiw	r24, 0x01	; 1
    6752:	f1 f7       	brne	.-4      	; 0x6750 <Check_Login_Sucsess+0x4e2>
    6754:	9a 83       	std	Y+2, r25	; 0x02
    6756:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(200);
			break;
		}

		
	}
    6758:	ca 5b       	subi	r28, 0xBA	; 186
    675a:	df 4f       	sbci	r29, 0xFF	; 255
    675c:	0f b6       	in	r0, 0x3f	; 63
    675e:	f8 94       	cli
    6760:	de bf       	out	0x3e, r29	; 62
    6762:	0f be       	out	0x3f, r0	; 63
    6764:	cd bf       	out	0x3d, r28	; 61
    6766:	cf 91       	pop	r28
    6768:	df 91       	pop	r29
    676a:	1f 91       	pop	r17
    676c:	0f 91       	pop	r16
    676e:	08 95       	ret

00006770 <Logout_Request_Handler>:
}

void Logout_Request_Handler()
{
    6770:	df 93       	push	r29
    6772:	cf 93       	push	r28
    6774:	cd b7       	in	r28, 0x3d	; 61
    6776:	de b7       	in	r29, 0x3e	; 62
    6778:	e8 97       	sbiw	r28, 0x38	; 56
    677a:	0f b6       	in	r0, 0x3f	; 63
    677c:	f8 94       	cli
    677e:	de bf       	out	0x3e, r29	; 62
    6780:	0f be       	out	0x3f, r0	; 63
    6782:	cd bf       	out	0x3d, r28	; 61
	if(Logout_Request_Flag == Logout_Requested)
    6784:	80 91 7a 06 	lds	r24, 0x067A
    6788:	8a 37       	cpi	r24, 0x7A	; 122
    678a:	09 f0       	breq	.+2      	; 0x678e <Logout_Request_Handler+0x1e>
    678c:	e8 c1       	rjmp	.+976    	; 0x6b5e <Logout_Request_Handler+0x3ee>
	{
		Login_Sucsess_Flag = 0;
    678e:	10 92 6b 06 	sts	0x066B, r1
		H_LCD_void_Clear_Display();
    6792:	0e 94 be 2b 	call	0x577c	; 0x577c <H_LCD_void_Clear_Display>
    6796:	80 e0       	ldi	r24, 0x00	; 0
    6798:	90 e0       	ldi	r25, 0x00	; 0
    679a:	a8 e4       	ldi	r26, 0x48	; 72
    679c:	b3 e4       	ldi	r27, 0x43	; 67
    679e:	8d ab       	std	Y+53, r24	; 0x35
    67a0:	9e ab       	std	Y+54, r25	; 0x36
    67a2:	af ab       	std	Y+55, r26	; 0x37
    67a4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    67a6:	6d a9       	ldd	r22, Y+53	; 0x35
    67a8:	7e a9       	ldd	r23, Y+54	; 0x36
    67aa:	8f a9       	ldd	r24, Y+55	; 0x37
    67ac:	98 ad       	ldd	r25, Y+56	; 0x38
    67ae:	20 e0       	ldi	r18, 0x00	; 0
    67b0:	30 e0       	ldi	r19, 0x00	; 0
    67b2:	4a e7       	ldi	r20, 0x7A	; 122
    67b4:	55 e4       	ldi	r21, 0x45	; 69
    67b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    67ba:	dc 01       	movw	r26, r24
    67bc:	cb 01       	movw	r24, r22
    67be:	89 ab       	std	Y+49, r24	; 0x31
    67c0:	9a ab       	std	Y+50, r25	; 0x32
    67c2:	ab ab       	std	Y+51, r26	; 0x33
    67c4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    67c6:	69 a9       	ldd	r22, Y+49	; 0x31
    67c8:	7a a9       	ldd	r23, Y+50	; 0x32
    67ca:	8b a9       	ldd	r24, Y+51	; 0x33
    67cc:	9c a9       	ldd	r25, Y+52	; 0x34
    67ce:	20 e0       	ldi	r18, 0x00	; 0
    67d0:	30 e0       	ldi	r19, 0x00	; 0
    67d2:	40 e8       	ldi	r20, 0x80	; 128
    67d4:	5f e3       	ldi	r21, 0x3F	; 63
    67d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    67da:	88 23       	and	r24, r24
    67dc:	2c f4       	brge	.+10     	; 0x67e8 <Logout_Request_Handler+0x78>
		__ticks = 1;
    67de:	81 e0       	ldi	r24, 0x01	; 1
    67e0:	90 e0       	ldi	r25, 0x00	; 0
    67e2:	98 ab       	std	Y+48, r25	; 0x30
    67e4:	8f a7       	std	Y+47, r24	; 0x2f
    67e6:	3f c0       	rjmp	.+126    	; 0x6866 <Logout_Request_Handler+0xf6>
	else if (__tmp > 65535)
    67e8:	69 a9       	ldd	r22, Y+49	; 0x31
    67ea:	7a a9       	ldd	r23, Y+50	; 0x32
    67ec:	8b a9       	ldd	r24, Y+51	; 0x33
    67ee:	9c a9       	ldd	r25, Y+52	; 0x34
    67f0:	20 e0       	ldi	r18, 0x00	; 0
    67f2:	3f ef       	ldi	r19, 0xFF	; 255
    67f4:	4f e7       	ldi	r20, 0x7F	; 127
    67f6:	57 e4       	ldi	r21, 0x47	; 71
    67f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    67fc:	18 16       	cp	r1, r24
    67fe:	4c f5       	brge	.+82     	; 0x6852 <Logout_Request_Handler+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6800:	6d a9       	ldd	r22, Y+53	; 0x35
    6802:	7e a9       	ldd	r23, Y+54	; 0x36
    6804:	8f a9       	ldd	r24, Y+55	; 0x37
    6806:	98 ad       	ldd	r25, Y+56	; 0x38
    6808:	20 e0       	ldi	r18, 0x00	; 0
    680a:	30 e0       	ldi	r19, 0x00	; 0
    680c:	40 e2       	ldi	r20, 0x20	; 32
    680e:	51 e4       	ldi	r21, 0x41	; 65
    6810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6814:	dc 01       	movw	r26, r24
    6816:	cb 01       	movw	r24, r22
    6818:	bc 01       	movw	r22, r24
    681a:	cd 01       	movw	r24, r26
    681c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6820:	dc 01       	movw	r26, r24
    6822:	cb 01       	movw	r24, r22
    6824:	98 ab       	std	Y+48, r25	; 0x30
    6826:	8f a7       	std	Y+47, r24	; 0x2f
    6828:	0f c0       	rjmp	.+30     	; 0x6848 <Logout_Request_Handler+0xd8>
    682a:	80 e9       	ldi	r24, 0x90	; 144
    682c:	91 e0       	ldi	r25, 0x01	; 1
    682e:	9e a7       	std	Y+46, r25	; 0x2e
    6830:	8d a7       	std	Y+45, r24	; 0x2d
    6832:	8d a5       	ldd	r24, Y+45	; 0x2d
    6834:	9e a5       	ldd	r25, Y+46	; 0x2e
    6836:	01 97       	sbiw	r24, 0x01	; 1
    6838:	f1 f7       	brne	.-4      	; 0x6836 <Logout_Request_Handler+0xc6>
    683a:	9e a7       	std	Y+46, r25	; 0x2e
    683c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    683e:	8f a5       	ldd	r24, Y+47	; 0x2f
    6840:	98 a9       	ldd	r25, Y+48	; 0x30
    6842:	01 97       	sbiw	r24, 0x01	; 1
    6844:	98 ab       	std	Y+48, r25	; 0x30
    6846:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6848:	8f a5       	ldd	r24, Y+47	; 0x2f
    684a:	98 a9       	ldd	r25, Y+48	; 0x30
    684c:	00 97       	sbiw	r24, 0x00	; 0
    684e:	69 f7       	brne	.-38     	; 0x682a <Logout_Request_Handler+0xba>
    6850:	14 c0       	rjmp	.+40     	; 0x687a <Logout_Request_Handler+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6852:	69 a9       	ldd	r22, Y+49	; 0x31
    6854:	7a a9       	ldd	r23, Y+50	; 0x32
    6856:	8b a9       	ldd	r24, Y+51	; 0x33
    6858:	9c a9       	ldd	r25, Y+52	; 0x34
    685a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    685e:	dc 01       	movw	r26, r24
    6860:	cb 01       	movw	r24, r22
    6862:	98 ab       	std	Y+48, r25	; 0x30
    6864:	8f a7       	std	Y+47, r24	; 0x2f
    6866:	8f a5       	ldd	r24, Y+47	; 0x2f
    6868:	98 a9       	ldd	r25, Y+48	; 0x30
    686a:	9c a7       	std	Y+44, r25	; 0x2c
    686c:	8b a7       	std	Y+43, r24	; 0x2b
    686e:	8b a5       	ldd	r24, Y+43	; 0x2b
    6870:	9c a5       	ldd	r25, Y+44	; 0x2c
    6872:	01 97       	sbiw	r24, 0x01	; 1
    6874:	f1 f7       	brne	.-4      	; 0x6872 <Logout_Request_Handler+0x102>
    6876:	9c a7       	std	Y+44, r25	; 0x2c
    6878:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(200);
		H_LCD_void_sendString(" System Logout Requested... ");
    687a:	8f e5       	ldi	r24, 0x5F	; 95
    687c:	92 e0       	ldi	r25, 0x02	; 2
    687e:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <H_LCD_void_sendString>
    6882:	80 e0       	ldi	r24, 0x00	; 0
    6884:	90 e8       	ldi	r25, 0x80	; 128
    6886:	ab e3       	ldi	r26, 0x3B	; 59
    6888:	b5 e4       	ldi	r27, 0x45	; 69
    688a:	8f a3       	std	Y+39, r24	; 0x27
    688c:	98 a7       	std	Y+40, r25	; 0x28
    688e:	a9 a7       	std	Y+41, r26	; 0x29
    6890:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6892:	6f a1       	ldd	r22, Y+39	; 0x27
    6894:	78 a5       	ldd	r23, Y+40	; 0x28
    6896:	89 a5       	ldd	r24, Y+41	; 0x29
    6898:	9a a5       	ldd	r25, Y+42	; 0x2a
    689a:	20 e0       	ldi	r18, 0x00	; 0
    689c:	30 e0       	ldi	r19, 0x00	; 0
    689e:	4a e7       	ldi	r20, 0x7A	; 122
    68a0:	55 e4       	ldi	r21, 0x45	; 69
    68a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    68a6:	dc 01       	movw	r26, r24
    68a8:	cb 01       	movw	r24, r22
    68aa:	8b a3       	std	Y+35, r24	; 0x23
    68ac:	9c a3       	std	Y+36, r25	; 0x24
    68ae:	ad a3       	std	Y+37, r26	; 0x25
    68b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    68b2:	6b a1       	ldd	r22, Y+35	; 0x23
    68b4:	7c a1       	ldd	r23, Y+36	; 0x24
    68b6:	8d a1       	ldd	r24, Y+37	; 0x25
    68b8:	9e a1       	ldd	r25, Y+38	; 0x26
    68ba:	20 e0       	ldi	r18, 0x00	; 0
    68bc:	30 e0       	ldi	r19, 0x00	; 0
    68be:	40 e8       	ldi	r20, 0x80	; 128
    68c0:	5f e3       	ldi	r21, 0x3F	; 63
    68c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    68c6:	88 23       	and	r24, r24
    68c8:	2c f4       	brge	.+10     	; 0x68d4 <Logout_Request_Handler+0x164>
		__ticks = 1;
    68ca:	81 e0       	ldi	r24, 0x01	; 1
    68cc:	90 e0       	ldi	r25, 0x00	; 0
    68ce:	9a a3       	std	Y+34, r25	; 0x22
    68d0:	89 a3       	std	Y+33, r24	; 0x21
    68d2:	3f c0       	rjmp	.+126    	; 0x6952 <Logout_Request_Handler+0x1e2>
	else if (__tmp > 65535)
    68d4:	6b a1       	ldd	r22, Y+35	; 0x23
    68d6:	7c a1       	ldd	r23, Y+36	; 0x24
    68d8:	8d a1       	ldd	r24, Y+37	; 0x25
    68da:	9e a1       	ldd	r25, Y+38	; 0x26
    68dc:	20 e0       	ldi	r18, 0x00	; 0
    68de:	3f ef       	ldi	r19, 0xFF	; 255
    68e0:	4f e7       	ldi	r20, 0x7F	; 127
    68e2:	57 e4       	ldi	r21, 0x47	; 71
    68e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    68e8:	18 16       	cp	r1, r24
    68ea:	4c f5       	brge	.+82     	; 0x693e <Logout_Request_Handler+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    68ec:	6f a1       	ldd	r22, Y+39	; 0x27
    68ee:	78 a5       	ldd	r23, Y+40	; 0x28
    68f0:	89 a5       	ldd	r24, Y+41	; 0x29
    68f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    68f4:	20 e0       	ldi	r18, 0x00	; 0
    68f6:	30 e0       	ldi	r19, 0x00	; 0
    68f8:	40 e2       	ldi	r20, 0x20	; 32
    68fa:	51 e4       	ldi	r21, 0x41	; 65
    68fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6900:	dc 01       	movw	r26, r24
    6902:	cb 01       	movw	r24, r22
    6904:	bc 01       	movw	r22, r24
    6906:	cd 01       	movw	r24, r26
    6908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    690c:	dc 01       	movw	r26, r24
    690e:	cb 01       	movw	r24, r22
    6910:	9a a3       	std	Y+34, r25	; 0x22
    6912:	89 a3       	std	Y+33, r24	; 0x21
    6914:	0f c0       	rjmp	.+30     	; 0x6934 <Logout_Request_Handler+0x1c4>
    6916:	80 e9       	ldi	r24, 0x90	; 144
    6918:	91 e0       	ldi	r25, 0x01	; 1
    691a:	98 a3       	std	Y+32, r25	; 0x20
    691c:	8f 8f       	std	Y+31, r24	; 0x1f
    691e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6920:	98 a1       	ldd	r25, Y+32	; 0x20
    6922:	01 97       	sbiw	r24, 0x01	; 1
    6924:	f1 f7       	brne	.-4      	; 0x6922 <Logout_Request_Handler+0x1b2>
    6926:	98 a3       	std	Y+32, r25	; 0x20
    6928:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    692a:	89 a1       	ldd	r24, Y+33	; 0x21
    692c:	9a a1       	ldd	r25, Y+34	; 0x22
    692e:	01 97       	sbiw	r24, 0x01	; 1
    6930:	9a a3       	std	Y+34, r25	; 0x22
    6932:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6934:	89 a1       	ldd	r24, Y+33	; 0x21
    6936:	9a a1       	ldd	r25, Y+34	; 0x22
    6938:	00 97       	sbiw	r24, 0x00	; 0
    693a:	69 f7       	brne	.-38     	; 0x6916 <Logout_Request_Handler+0x1a6>
    693c:	14 c0       	rjmp	.+40     	; 0x6966 <Logout_Request_Handler+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    693e:	6b a1       	ldd	r22, Y+35	; 0x23
    6940:	7c a1       	ldd	r23, Y+36	; 0x24
    6942:	8d a1       	ldd	r24, Y+37	; 0x25
    6944:	9e a1       	ldd	r25, Y+38	; 0x26
    6946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    694a:	dc 01       	movw	r26, r24
    694c:	cb 01       	movw	r24, r22
    694e:	9a a3       	std	Y+34, r25	; 0x22
    6950:	89 a3       	std	Y+33, r24	; 0x21
    6952:	89 a1       	ldd	r24, Y+33	; 0x21
    6954:	9a a1       	ldd	r25, Y+34	; 0x22
    6956:	9e 8f       	std	Y+30, r25	; 0x1e
    6958:	8d 8f       	std	Y+29, r24	; 0x1d
    695a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    695c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    695e:	01 97       	sbiw	r24, 0x01	; 1
    6960:	f1 f7       	brne	.-4      	; 0x695e <Logout_Request_Handler+0x1ee>
    6962:	9e 8f       	std	Y+30, r25	; 0x1e
    6964:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(3000);
		H_LCD_void_Clear_Display();
    6966:	0e 94 be 2b 	call	0x577c	; 0x577c <H_LCD_void_Clear_Display>
		UART_sendString("AT+CIPCLOSE=1\r\n");
    696a:	8c e7       	ldi	r24, 0x7C	; 124
    696c:	92 e0       	ldi	r25, 0x02	; 2
    696e:	0e 94 c4 07 	call	0xf88	; 0xf88 <UART_sendString>
		H_LCD_void_sendString(" Wifi Closed ... ");
    6972:	8c e8       	ldi	r24, 0x8C	; 140
    6974:	92 e0       	ldi	r25, 0x02	; 2
    6976:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <H_LCD_void_sendString>
    697a:	80 e0       	ldi	r24, 0x00	; 0
    697c:	90 e8       	ldi	r25, 0x80	; 128
    697e:	ab e3       	ldi	r26, 0x3B	; 59
    6980:	b5 e4       	ldi	r27, 0x45	; 69
    6982:	89 8f       	std	Y+25, r24	; 0x19
    6984:	9a 8f       	std	Y+26, r25	; 0x1a
    6986:	ab 8f       	std	Y+27, r26	; 0x1b
    6988:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    698a:	69 8d       	ldd	r22, Y+25	; 0x19
    698c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    698e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6990:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6992:	20 e0       	ldi	r18, 0x00	; 0
    6994:	30 e0       	ldi	r19, 0x00	; 0
    6996:	4a e7       	ldi	r20, 0x7A	; 122
    6998:	55 e4       	ldi	r21, 0x45	; 69
    699a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    699e:	dc 01       	movw	r26, r24
    69a0:	cb 01       	movw	r24, r22
    69a2:	8d 8b       	std	Y+21, r24	; 0x15
    69a4:	9e 8b       	std	Y+22, r25	; 0x16
    69a6:	af 8b       	std	Y+23, r26	; 0x17
    69a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    69aa:	6d 89       	ldd	r22, Y+21	; 0x15
    69ac:	7e 89       	ldd	r23, Y+22	; 0x16
    69ae:	8f 89       	ldd	r24, Y+23	; 0x17
    69b0:	98 8d       	ldd	r25, Y+24	; 0x18
    69b2:	20 e0       	ldi	r18, 0x00	; 0
    69b4:	30 e0       	ldi	r19, 0x00	; 0
    69b6:	40 e8       	ldi	r20, 0x80	; 128
    69b8:	5f e3       	ldi	r21, 0x3F	; 63
    69ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    69be:	88 23       	and	r24, r24
    69c0:	2c f4       	brge	.+10     	; 0x69cc <Logout_Request_Handler+0x25c>
		__ticks = 1;
    69c2:	81 e0       	ldi	r24, 0x01	; 1
    69c4:	90 e0       	ldi	r25, 0x00	; 0
    69c6:	9c 8b       	std	Y+20, r25	; 0x14
    69c8:	8b 8b       	std	Y+19, r24	; 0x13
    69ca:	3f c0       	rjmp	.+126    	; 0x6a4a <Logout_Request_Handler+0x2da>
	else if (__tmp > 65535)
    69cc:	6d 89       	ldd	r22, Y+21	; 0x15
    69ce:	7e 89       	ldd	r23, Y+22	; 0x16
    69d0:	8f 89       	ldd	r24, Y+23	; 0x17
    69d2:	98 8d       	ldd	r25, Y+24	; 0x18
    69d4:	20 e0       	ldi	r18, 0x00	; 0
    69d6:	3f ef       	ldi	r19, 0xFF	; 255
    69d8:	4f e7       	ldi	r20, 0x7F	; 127
    69da:	57 e4       	ldi	r21, 0x47	; 71
    69dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    69e0:	18 16       	cp	r1, r24
    69e2:	4c f5       	brge	.+82     	; 0x6a36 <Logout_Request_Handler+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    69e4:	69 8d       	ldd	r22, Y+25	; 0x19
    69e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    69e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    69ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    69ec:	20 e0       	ldi	r18, 0x00	; 0
    69ee:	30 e0       	ldi	r19, 0x00	; 0
    69f0:	40 e2       	ldi	r20, 0x20	; 32
    69f2:	51 e4       	ldi	r21, 0x41	; 65
    69f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    69f8:	dc 01       	movw	r26, r24
    69fa:	cb 01       	movw	r24, r22
    69fc:	bc 01       	movw	r22, r24
    69fe:	cd 01       	movw	r24, r26
    6a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a04:	dc 01       	movw	r26, r24
    6a06:	cb 01       	movw	r24, r22
    6a08:	9c 8b       	std	Y+20, r25	; 0x14
    6a0a:	8b 8b       	std	Y+19, r24	; 0x13
    6a0c:	0f c0       	rjmp	.+30     	; 0x6a2c <Logout_Request_Handler+0x2bc>
    6a0e:	80 e9       	ldi	r24, 0x90	; 144
    6a10:	91 e0       	ldi	r25, 0x01	; 1
    6a12:	9a 8b       	std	Y+18, r25	; 0x12
    6a14:	89 8b       	std	Y+17, r24	; 0x11
    6a16:	89 89       	ldd	r24, Y+17	; 0x11
    6a18:	9a 89       	ldd	r25, Y+18	; 0x12
    6a1a:	01 97       	sbiw	r24, 0x01	; 1
    6a1c:	f1 f7       	brne	.-4      	; 0x6a1a <Logout_Request_Handler+0x2aa>
    6a1e:	9a 8b       	std	Y+18, r25	; 0x12
    6a20:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6a22:	8b 89       	ldd	r24, Y+19	; 0x13
    6a24:	9c 89       	ldd	r25, Y+20	; 0x14
    6a26:	01 97       	sbiw	r24, 0x01	; 1
    6a28:	9c 8b       	std	Y+20, r25	; 0x14
    6a2a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6a2c:	8b 89       	ldd	r24, Y+19	; 0x13
    6a2e:	9c 89       	ldd	r25, Y+20	; 0x14
    6a30:	00 97       	sbiw	r24, 0x00	; 0
    6a32:	69 f7       	brne	.-38     	; 0x6a0e <Logout_Request_Handler+0x29e>
    6a34:	14 c0       	rjmp	.+40     	; 0x6a5e <Logout_Request_Handler+0x2ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6a36:	6d 89       	ldd	r22, Y+21	; 0x15
    6a38:	7e 89       	ldd	r23, Y+22	; 0x16
    6a3a:	8f 89       	ldd	r24, Y+23	; 0x17
    6a3c:	98 8d       	ldd	r25, Y+24	; 0x18
    6a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a42:	dc 01       	movw	r26, r24
    6a44:	cb 01       	movw	r24, r22
    6a46:	9c 8b       	std	Y+20, r25	; 0x14
    6a48:	8b 8b       	std	Y+19, r24	; 0x13
    6a4a:	8b 89       	ldd	r24, Y+19	; 0x13
    6a4c:	9c 89       	ldd	r25, Y+20	; 0x14
    6a4e:	98 8b       	std	Y+16, r25	; 0x10
    6a50:	8f 87       	std	Y+15, r24	; 0x0f
    6a52:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a54:	98 89       	ldd	r25, Y+16	; 0x10
    6a56:	01 97       	sbiw	r24, 0x01	; 1
    6a58:	f1 f7       	brne	.-4      	; 0x6a56 <Logout_Request_Handler+0x2e6>
    6a5a:	98 8b       	std	Y+16, r25	; 0x10
    6a5c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(3000);
		H_LCD_void_Clear_Display();
    6a5e:	0e 94 be 2b 	call	0x577c	; 0x577c <H_LCD_void_Clear_Display>
    6a62:	80 e0       	ldi	r24, 0x00	; 0
    6a64:	90 e0       	ldi	r25, 0x00	; 0
    6a66:	a8 e4       	ldi	r26, 0x48	; 72
    6a68:	b3 e4       	ldi	r27, 0x43	; 67
    6a6a:	8b 87       	std	Y+11, r24	; 0x0b
    6a6c:	9c 87       	std	Y+12, r25	; 0x0c
    6a6e:	ad 87       	std	Y+13, r26	; 0x0d
    6a70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6a72:	6b 85       	ldd	r22, Y+11	; 0x0b
    6a74:	7c 85       	ldd	r23, Y+12	; 0x0c
    6a76:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a78:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a7a:	20 e0       	ldi	r18, 0x00	; 0
    6a7c:	30 e0       	ldi	r19, 0x00	; 0
    6a7e:	4a e7       	ldi	r20, 0x7A	; 122
    6a80:	55 e4       	ldi	r21, 0x45	; 69
    6a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a86:	dc 01       	movw	r26, r24
    6a88:	cb 01       	movw	r24, r22
    6a8a:	8f 83       	std	Y+7, r24	; 0x07
    6a8c:	98 87       	std	Y+8, r25	; 0x08
    6a8e:	a9 87       	std	Y+9, r26	; 0x09
    6a90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6a92:	6f 81       	ldd	r22, Y+7	; 0x07
    6a94:	78 85       	ldd	r23, Y+8	; 0x08
    6a96:	89 85       	ldd	r24, Y+9	; 0x09
    6a98:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a9a:	20 e0       	ldi	r18, 0x00	; 0
    6a9c:	30 e0       	ldi	r19, 0x00	; 0
    6a9e:	40 e8       	ldi	r20, 0x80	; 128
    6aa0:	5f e3       	ldi	r21, 0x3F	; 63
    6aa2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6aa6:	88 23       	and	r24, r24
    6aa8:	2c f4       	brge	.+10     	; 0x6ab4 <Logout_Request_Handler+0x344>
		__ticks = 1;
    6aaa:	81 e0       	ldi	r24, 0x01	; 1
    6aac:	90 e0       	ldi	r25, 0x00	; 0
    6aae:	9e 83       	std	Y+6, r25	; 0x06
    6ab0:	8d 83       	std	Y+5, r24	; 0x05
    6ab2:	3f c0       	rjmp	.+126    	; 0x6b32 <Logout_Request_Handler+0x3c2>
	else if (__tmp > 65535)
    6ab4:	6f 81       	ldd	r22, Y+7	; 0x07
    6ab6:	78 85       	ldd	r23, Y+8	; 0x08
    6ab8:	89 85       	ldd	r24, Y+9	; 0x09
    6aba:	9a 85       	ldd	r25, Y+10	; 0x0a
    6abc:	20 e0       	ldi	r18, 0x00	; 0
    6abe:	3f ef       	ldi	r19, 0xFF	; 255
    6ac0:	4f e7       	ldi	r20, 0x7F	; 127
    6ac2:	57 e4       	ldi	r21, 0x47	; 71
    6ac4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6ac8:	18 16       	cp	r1, r24
    6aca:	4c f5       	brge	.+82     	; 0x6b1e <Logout_Request_Handler+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6acc:	6b 85       	ldd	r22, Y+11	; 0x0b
    6ace:	7c 85       	ldd	r23, Y+12	; 0x0c
    6ad0:	8d 85       	ldd	r24, Y+13	; 0x0d
    6ad2:	9e 85       	ldd	r25, Y+14	; 0x0e
    6ad4:	20 e0       	ldi	r18, 0x00	; 0
    6ad6:	30 e0       	ldi	r19, 0x00	; 0
    6ad8:	40 e2       	ldi	r20, 0x20	; 32
    6ada:	51 e4       	ldi	r21, 0x41	; 65
    6adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6ae0:	dc 01       	movw	r26, r24
    6ae2:	cb 01       	movw	r24, r22
    6ae4:	bc 01       	movw	r22, r24
    6ae6:	cd 01       	movw	r24, r26
    6ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6aec:	dc 01       	movw	r26, r24
    6aee:	cb 01       	movw	r24, r22
    6af0:	9e 83       	std	Y+6, r25	; 0x06
    6af2:	8d 83       	std	Y+5, r24	; 0x05
    6af4:	0f c0       	rjmp	.+30     	; 0x6b14 <Logout_Request_Handler+0x3a4>
    6af6:	80 e9       	ldi	r24, 0x90	; 144
    6af8:	91 e0       	ldi	r25, 0x01	; 1
    6afa:	9c 83       	std	Y+4, r25	; 0x04
    6afc:	8b 83       	std	Y+3, r24	; 0x03
    6afe:	8b 81       	ldd	r24, Y+3	; 0x03
    6b00:	9c 81       	ldd	r25, Y+4	; 0x04
    6b02:	01 97       	sbiw	r24, 0x01	; 1
    6b04:	f1 f7       	brne	.-4      	; 0x6b02 <Logout_Request_Handler+0x392>
    6b06:	9c 83       	std	Y+4, r25	; 0x04
    6b08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    6b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    6b0e:	01 97       	sbiw	r24, 0x01	; 1
    6b10:	9e 83       	std	Y+6, r25	; 0x06
    6b12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6b14:	8d 81       	ldd	r24, Y+5	; 0x05
    6b16:	9e 81       	ldd	r25, Y+6	; 0x06
    6b18:	00 97       	sbiw	r24, 0x00	; 0
    6b1a:	69 f7       	brne	.-38     	; 0x6af6 <Logout_Request_Handler+0x386>
    6b1c:	14 c0       	rjmp	.+40     	; 0x6b46 <Logout_Request_Handler+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b1e:	6f 81       	ldd	r22, Y+7	; 0x07
    6b20:	78 85       	ldd	r23, Y+8	; 0x08
    6b22:	89 85       	ldd	r24, Y+9	; 0x09
    6b24:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b2a:	dc 01       	movw	r26, r24
    6b2c:	cb 01       	movw	r24, r22
    6b2e:	9e 83       	std	Y+6, r25	; 0x06
    6b30:	8d 83       	std	Y+5, r24	; 0x05
    6b32:	8d 81       	ldd	r24, Y+5	; 0x05
    6b34:	9e 81       	ldd	r25, Y+6	; 0x06
    6b36:	9a 83       	std	Y+2, r25	; 0x02
    6b38:	89 83       	std	Y+1, r24	; 0x01
    6b3a:	89 81       	ldd	r24, Y+1	; 0x01
    6b3c:	9a 81       	ldd	r25, Y+2	; 0x02
    6b3e:	01 97       	sbiw	r24, 0x01	; 1
    6b40:	f1 f7       	brne	.-4      	; 0x6b3e <Logout_Request_Handler+0x3ce>
    6b42:	9a 83       	std	Y+2, r25	; 0x02
    6b44:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
		
		Motor_State_Flag = 0;
    6b46:	10 92 6c 06 	sts	0x066C, r1
		LED_State_Flag =0;
    6b4a:	10 92 82 06 	sts	0x0682, r1
		MOTOR_ON(MOTOR_CW , 0);
    6b4e:	81 e0       	ldi	r24, 0x01	; 1
    6b50:	60 e0       	ldi	r22, 0x00	; 0
    6b52:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <MOTOR_ON>
		M_TIMER1_void_Stop();
    6b56:	0e 94 22 0a 	call	0x1444	; 0x1444 <M_TIMER1_void_Stop>
		Check_Login_Sucsess();
    6b5a:	0e 94 37 31 	call	0x626e	; 0x626e <Check_Login_Sucsess>
		
	}
	
    6b5e:	e8 96       	adiw	r28, 0x38	; 56
    6b60:	0f b6       	in	r0, 0x3f	; 63
    6b62:	f8 94       	cli
    6b64:	de bf       	out	0x3e, r29	; 62
    6b66:	0f be       	out	0x3f, r0	; 63
    6b68:	cd bf       	out	0x3d, r28	; 61
    6b6a:	cf 91       	pop	r28
    6b6c:	df 91       	pop	r29
    6b6e:	08 95       	ret

00006b70 <__mulsi3>:
    6b70:	62 9f       	mul	r22, r18
    6b72:	d0 01       	movw	r26, r0
    6b74:	73 9f       	mul	r23, r19
    6b76:	f0 01       	movw	r30, r0
    6b78:	82 9f       	mul	r24, r18
    6b7a:	e0 0d       	add	r30, r0
    6b7c:	f1 1d       	adc	r31, r1
    6b7e:	64 9f       	mul	r22, r20
    6b80:	e0 0d       	add	r30, r0
    6b82:	f1 1d       	adc	r31, r1
    6b84:	92 9f       	mul	r25, r18
    6b86:	f0 0d       	add	r31, r0
    6b88:	83 9f       	mul	r24, r19
    6b8a:	f0 0d       	add	r31, r0
    6b8c:	74 9f       	mul	r23, r20
    6b8e:	f0 0d       	add	r31, r0
    6b90:	65 9f       	mul	r22, r21
    6b92:	f0 0d       	add	r31, r0
    6b94:	99 27       	eor	r25, r25
    6b96:	72 9f       	mul	r23, r18
    6b98:	b0 0d       	add	r27, r0
    6b9a:	e1 1d       	adc	r30, r1
    6b9c:	f9 1f       	adc	r31, r25
    6b9e:	63 9f       	mul	r22, r19
    6ba0:	b0 0d       	add	r27, r0
    6ba2:	e1 1d       	adc	r30, r1
    6ba4:	f9 1f       	adc	r31, r25
    6ba6:	bd 01       	movw	r22, r26
    6ba8:	cf 01       	movw	r24, r30
    6baa:	11 24       	eor	r1, r1
    6bac:	08 95       	ret

00006bae <__udivmodqi4>:
    6bae:	99 1b       	sub	r25, r25
    6bb0:	79 e0       	ldi	r23, 0x09	; 9
    6bb2:	04 c0       	rjmp	.+8      	; 0x6bbc <__udivmodqi4_ep>

00006bb4 <__udivmodqi4_loop>:
    6bb4:	99 1f       	adc	r25, r25
    6bb6:	96 17       	cp	r25, r22
    6bb8:	08 f0       	brcs	.+2      	; 0x6bbc <__udivmodqi4_ep>
    6bba:	96 1b       	sub	r25, r22

00006bbc <__udivmodqi4_ep>:
    6bbc:	88 1f       	adc	r24, r24
    6bbe:	7a 95       	dec	r23
    6bc0:	c9 f7       	brne	.-14     	; 0x6bb4 <__udivmodqi4_loop>
    6bc2:	80 95       	com	r24
    6bc4:	08 95       	ret

00006bc6 <__divmodhi4>:
    6bc6:	97 fb       	bst	r25, 7
    6bc8:	09 2e       	mov	r0, r25
    6bca:	07 26       	eor	r0, r23
    6bcc:	0a d0       	rcall	.+20     	; 0x6be2 <__divmodhi4_neg1>
    6bce:	77 fd       	sbrc	r23, 7
    6bd0:	04 d0       	rcall	.+8      	; 0x6bda <__divmodhi4_neg2>
    6bd2:	49 d0       	rcall	.+146    	; 0x6c66 <__udivmodhi4>
    6bd4:	06 d0       	rcall	.+12     	; 0x6be2 <__divmodhi4_neg1>
    6bd6:	00 20       	and	r0, r0
    6bd8:	1a f4       	brpl	.+6      	; 0x6be0 <__divmodhi4_exit>

00006bda <__divmodhi4_neg2>:
    6bda:	70 95       	com	r23
    6bdc:	61 95       	neg	r22
    6bde:	7f 4f       	sbci	r23, 0xFF	; 255

00006be0 <__divmodhi4_exit>:
    6be0:	08 95       	ret

00006be2 <__divmodhi4_neg1>:
    6be2:	f6 f7       	brtc	.-4      	; 0x6be0 <__divmodhi4_exit>
    6be4:	90 95       	com	r25
    6be6:	81 95       	neg	r24
    6be8:	9f 4f       	sbci	r25, 0xFF	; 255
    6bea:	08 95       	ret

00006bec <__udivmodsi4>:
    6bec:	a1 e2       	ldi	r26, 0x21	; 33
    6bee:	1a 2e       	mov	r1, r26
    6bf0:	aa 1b       	sub	r26, r26
    6bf2:	bb 1b       	sub	r27, r27
    6bf4:	fd 01       	movw	r30, r26
    6bf6:	0d c0       	rjmp	.+26     	; 0x6c12 <__udivmodsi4_ep>

00006bf8 <__udivmodsi4_loop>:
    6bf8:	aa 1f       	adc	r26, r26
    6bfa:	bb 1f       	adc	r27, r27
    6bfc:	ee 1f       	adc	r30, r30
    6bfe:	ff 1f       	adc	r31, r31
    6c00:	a2 17       	cp	r26, r18
    6c02:	b3 07       	cpc	r27, r19
    6c04:	e4 07       	cpc	r30, r20
    6c06:	f5 07       	cpc	r31, r21
    6c08:	20 f0       	brcs	.+8      	; 0x6c12 <__udivmodsi4_ep>
    6c0a:	a2 1b       	sub	r26, r18
    6c0c:	b3 0b       	sbc	r27, r19
    6c0e:	e4 0b       	sbc	r30, r20
    6c10:	f5 0b       	sbc	r31, r21

00006c12 <__udivmodsi4_ep>:
    6c12:	66 1f       	adc	r22, r22
    6c14:	77 1f       	adc	r23, r23
    6c16:	88 1f       	adc	r24, r24
    6c18:	99 1f       	adc	r25, r25
    6c1a:	1a 94       	dec	r1
    6c1c:	69 f7       	brne	.-38     	; 0x6bf8 <__udivmodsi4_loop>
    6c1e:	60 95       	com	r22
    6c20:	70 95       	com	r23
    6c22:	80 95       	com	r24
    6c24:	90 95       	com	r25
    6c26:	9b 01       	movw	r18, r22
    6c28:	ac 01       	movw	r20, r24
    6c2a:	bd 01       	movw	r22, r26
    6c2c:	cf 01       	movw	r24, r30
    6c2e:	08 95       	ret

00006c30 <__divmodsi4>:
    6c30:	97 fb       	bst	r25, 7
    6c32:	09 2e       	mov	r0, r25
    6c34:	05 26       	eor	r0, r21
    6c36:	0e d0       	rcall	.+28     	; 0x6c54 <__divmodsi4_neg1>
    6c38:	57 fd       	sbrc	r21, 7
    6c3a:	04 d0       	rcall	.+8      	; 0x6c44 <__divmodsi4_neg2>
    6c3c:	d7 df       	rcall	.-82     	; 0x6bec <__udivmodsi4>
    6c3e:	0a d0       	rcall	.+20     	; 0x6c54 <__divmodsi4_neg1>
    6c40:	00 1c       	adc	r0, r0
    6c42:	38 f4       	brcc	.+14     	; 0x6c52 <__divmodsi4_exit>

00006c44 <__divmodsi4_neg2>:
    6c44:	50 95       	com	r21
    6c46:	40 95       	com	r20
    6c48:	30 95       	com	r19
    6c4a:	21 95       	neg	r18
    6c4c:	3f 4f       	sbci	r19, 0xFF	; 255
    6c4e:	4f 4f       	sbci	r20, 0xFF	; 255
    6c50:	5f 4f       	sbci	r21, 0xFF	; 255

00006c52 <__divmodsi4_exit>:
    6c52:	08 95       	ret

00006c54 <__divmodsi4_neg1>:
    6c54:	f6 f7       	brtc	.-4      	; 0x6c52 <__divmodsi4_exit>
    6c56:	90 95       	com	r25
    6c58:	80 95       	com	r24
    6c5a:	70 95       	com	r23
    6c5c:	61 95       	neg	r22
    6c5e:	7f 4f       	sbci	r23, 0xFF	; 255
    6c60:	8f 4f       	sbci	r24, 0xFF	; 255
    6c62:	9f 4f       	sbci	r25, 0xFF	; 255
    6c64:	08 95       	ret

00006c66 <__udivmodhi4>:
    6c66:	aa 1b       	sub	r26, r26
    6c68:	bb 1b       	sub	r27, r27
    6c6a:	51 e1       	ldi	r21, 0x11	; 17
    6c6c:	07 c0       	rjmp	.+14     	; 0x6c7c <__udivmodhi4_ep>

00006c6e <__udivmodhi4_loop>:
    6c6e:	aa 1f       	adc	r26, r26
    6c70:	bb 1f       	adc	r27, r27
    6c72:	a6 17       	cp	r26, r22
    6c74:	b7 07       	cpc	r27, r23
    6c76:	10 f0       	brcs	.+4      	; 0x6c7c <__udivmodhi4_ep>
    6c78:	a6 1b       	sub	r26, r22
    6c7a:	b7 0b       	sbc	r27, r23

00006c7c <__udivmodhi4_ep>:
    6c7c:	88 1f       	adc	r24, r24
    6c7e:	99 1f       	adc	r25, r25
    6c80:	5a 95       	dec	r21
    6c82:	a9 f7       	brne	.-22     	; 0x6c6e <__udivmodhi4_loop>
    6c84:	80 95       	com	r24
    6c86:	90 95       	com	r25
    6c88:	bc 01       	movw	r22, r24
    6c8a:	cd 01       	movw	r24, r26
    6c8c:	08 95       	ret

00006c8e <__prologue_saves__>:
    6c8e:	2f 92       	push	r2
    6c90:	3f 92       	push	r3
    6c92:	4f 92       	push	r4
    6c94:	5f 92       	push	r5
    6c96:	6f 92       	push	r6
    6c98:	7f 92       	push	r7
    6c9a:	8f 92       	push	r8
    6c9c:	9f 92       	push	r9
    6c9e:	af 92       	push	r10
    6ca0:	bf 92       	push	r11
    6ca2:	cf 92       	push	r12
    6ca4:	df 92       	push	r13
    6ca6:	ef 92       	push	r14
    6ca8:	ff 92       	push	r15
    6caa:	0f 93       	push	r16
    6cac:	1f 93       	push	r17
    6cae:	cf 93       	push	r28
    6cb0:	df 93       	push	r29
    6cb2:	cd b7       	in	r28, 0x3d	; 61
    6cb4:	de b7       	in	r29, 0x3e	; 62
    6cb6:	ca 1b       	sub	r28, r26
    6cb8:	db 0b       	sbc	r29, r27
    6cba:	0f b6       	in	r0, 0x3f	; 63
    6cbc:	f8 94       	cli
    6cbe:	de bf       	out	0x3e, r29	; 62
    6cc0:	0f be       	out	0x3f, r0	; 63
    6cc2:	cd bf       	out	0x3d, r28	; 61
    6cc4:	09 94       	ijmp

00006cc6 <__epilogue_restores__>:
    6cc6:	2a 88       	ldd	r2, Y+18	; 0x12
    6cc8:	39 88       	ldd	r3, Y+17	; 0x11
    6cca:	48 88       	ldd	r4, Y+16	; 0x10
    6ccc:	5f 84       	ldd	r5, Y+15	; 0x0f
    6cce:	6e 84       	ldd	r6, Y+14	; 0x0e
    6cd0:	7d 84       	ldd	r7, Y+13	; 0x0d
    6cd2:	8c 84       	ldd	r8, Y+12	; 0x0c
    6cd4:	9b 84       	ldd	r9, Y+11	; 0x0b
    6cd6:	aa 84       	ldd	r10, Y+10	; 0x0a
    6cd8:	b9 84       	ldd	r11, Y+9	; 0x09
    6cda:	c8 84       	ldd	r12, Y+8	; 0x08
    6cdc:	df 80       	ldd	r13, Y+7	; 0x07
    6cde:	ee 80       	ldd	r14, Y+6	; 0x06
    6ce0:	fd 80       	ldd	r15, Y+5	; 0x05
    6ce2:	0c 81       	ldd	r16, Y+4	; 0x04
    6ce4:	1b 81       	ldd	r17, Y+3	; 0x03
    6ce6:	aa 81       	ldd	r26, Y+2	; 0x02
    6ce8:	b9 81       	ldd	r27, Y+1	; 0x01
    6cea:	ce 0f       	add	r28, r30
    6cec:	d1 1d       	adc	r29, r1
    6cee:	0f b6       	in	r0, 0x3f	; 63
    6cf0:	f8 94       	cli
    6cf2:	de bf       	out	0x3e, r29	; 62
    6cf4:	0f be       	out	0x3f, r0	; 63
    6cf6:	cd bf       	out	0x3d, r28	; 61
    6cf8:	ed 01       	movw	r28, r26
    6cfa:	08 95       	ret

00006cfc <strchr>:
    6cfc:	fc 01       	movw	r30, r24
    6cfe:	81 91       	ld	r24, Z+
    6d00:	86 17       	cp	r24, r22
    6d02:	21 f0       	breq	.+8      	; 0x6d0c <strchr+0x10>
    6d04:	88 23       	and	r24, r24
    6d06:	d9 f7       	brne	.-10     	; 0x6cfe <strchr+0x2>
    6d08:	99 27       	eor	r25, r25
    6d0a:	08 95       	ret
    6d0c:	31 97       	sbiw	r30, 0x01	; 1
    6d0e:	cf 01       	movw	r24, r30
    6d10:	08 95       	ret

00006d12 <strlen>:
    6d12:	fc 01       	movw	r30, r24
    6d14:	01 90       	ld	r0, Z+
    6d16:	00 20       	and	r0, r0
    6d18:	e9 f7       	brne	.-6      	; 0x6d14 <strlen+0x2>
    6d1a:	80 95       	com	r24
    6d1c:	90 95       	com	r25
    6d1e:	8e 0f       	add	r24, r30
    6d20:	9f 1f       	adc	r25, r31
    6d22:	08 95       	ret

00006d24 <strstr>:
    6d24:	fb 01       	movw	r30, r22
    6d26:	51 91       	ld	r21, Z+
    6d28:	55 23       	and	r21, r21
    6d2a:	a9 f0       	breq	.+42     	; 0x6d56 <strstr+0x32>
    6d2c:	bf 01       	movw	r22, r30
    6d2e:	dc 01       	movw	r26, r24
    6d30:	4d 91       	ld	r20, X+
    6d32:	45 17       	cp	r20, r21
    6d34:	41 11       	cpse	r20, r1
    6d36:	e1 f7       	brne	.-8      	; 0x6d30 <strstr+0xc>
    6d38:	59 f4       	brne	.+22     	; 0x6d50 <strstr+0x2c>
    6d3a:	cd 01       	movw	r24, r26
    6d3c:	01 90       	ld	r0, Z+
    6d3e:	00 20       	and	r0, r0
    6d40:	49 f0       	breq	.+18     	; 0x6d54 <strstr+0x30>
    6d42:	4d 91       	ld	r20, X+
    6d44:	40 15       	cp	r20, r0
    6d46:	41 11       	cpse	r20, r1
    6d48:	c9 f3       	breq	.-14     	; 0x6d3c <strstr+0x18>
    6d4a:	fb 01       	movw	r30, r22
    6d4c:	41 11       	cpse	r20, r1
    6d4e:	ef cf       	rjmp	.-34     	; 0x6d2e <strstr+0xa>
    6d50:	81 e0       	ldi	r24, 0x01	; 1
    6d52:	90 e0       	ldi	r25, 0x00	; 0
    6d54:	01 97       	sbiw	r24, 0x01	; 1
    6d56:	08 95       	ret

00006d58 <itoa>:
    6d58:	fb 01       	movw	r30, r22
    6d5a:	9f 01       	movw	r18, r30
    6d5c:	e8 94       	clt
    6d5e:	42 30       	cpi	r20, 0x02	; 2
    6d60:	c4 f0       	brlt	.+48     	; 0x6d92 <itoa+0x3a>
    6d62:	45 32       	cpi	r20, 0x25	; 37
    6d64:	b4 f4       	brge	.+44     	; 0x6d92 <itoa+0x3a>
    6d66:	4a 30       	cpi	r20, 0x0A	; 10
    6d68:	29 f4       	brne	.+10     	; 0x6d74 <itoa+0x1c>
    6d6a:	97 fb       	bst	r25, 7
    6d6c:	1e f4       	brtc	.+6      	; 0x6d74 <itoa+0x1c>
    6d6e:	90 95       	com	r25
    6d70:	81 95       	neg	r24
    6d72:	9f 4f       	sbci	r25, 0xFF	; 255
    6d74:	64 2f       	mov	r22, r20
    6d76:	77 27       	eor	r23, r23
    6d78:	0e 94 33 36 	call	0x6c66	; 0x6c66 <__udivmodhi4>
    6d7c:	80 5d       	subi	r24, 0xD0	; 208
    6d7e:	8a 33       	cpi	r24, 0x3A	; 58
    6d80:	0c f0       	brlt	.+2      	; 0x6d84 <itoa+0x2c>
    6d82:	89 5d       	subi	r24, 0xD9	; 217
    6d84:	81 93       	st	Z+, r24
    6d86:	cb 01       	movw	r24, r22
    6d88:	00 97       	sbiw	r24, 0x00	; 0
    6d8a:	a1 f7       	brne	.-24     	; 0x6d74 <itoa+0x1c>
    6d8c:	16 f4       	brtc	.+4      	; 0x6d92 <itoa+0x3a>
    6d8e:	5d e2       	ldi	r21, 0x2D	; 45
    6d90:	51 93       	st	Z+, r21
    6d92:	10 82       	st	Z, r1
    6d94:	c9 01       	movw	r24, r18
    6d96:	0c 94 e4 38 	jmp	0x71c8	; 0x71c8 <strrev>

00006d9a <sprintf>:
    6d9a:	ae e0       	ldi	r26, 0x0E	; 14
    6d9c:	b0 e0       	ldi	r27, 0x00	; 0
    6d9e:	e3 ed       	ldi	r30, 0xD3	; 211
    6da0:	f6 e3       	ldi	r31, 0x36	; 54
    6da2:	0c 94 55 36 	jmp	0x6caa	; 0x6caa <__prologue_saves__+0x1c>
    6da6:	0d 89       	ldd	r16, Y+21	; 0x15
    6da8:	1e 89       	ldd	r17, Y+22	; 0x16
    6daa:	86 e0       	ldi	r24, 0x06	; 6
    6dac:	8c 83       	std	Y+4, r24	; 0x04
    6dae:	1a 83       	std	Y+2, r17	; 0x02
    6db0:	09 83       	std	Y+1, r16	; 0x01
    6db2:	8f ef       	ldi	r24, 0xFF	; 255
    6db4:	9f e7       	ldi	r25, 0x7F	; 127
    6db6:	9e 83       	std	Y+6, r25	; 0x06
    6db8:	8d 83       	std	Y+5, r24	; 0x05
    6dba:	9e 01       	movw	r18, r28
    6dbc:	27 5e       	subi	r18, 0xE7	; 231
    6dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    6dc0:	ce 01       	movw	r24, r28
    6dc2:	01 96       	adiw	r24, 0x01	; 1
    6dc4:	6f 89       	ldd	r22, Y+23	; 0x17
    6dc6:	78 8d       	ldd	r23, Y+24	; 0x18
    6dc8:	a9 01       	movw	r20, r18
    6dca:	0e 94 f1 36 	call	0x6de2	; 0x6de2 <vfprintf>
    6dce:	2f 81       	ldd	r18, Y+7	; 0x07
    6dd0:	38 85       	ldd	r19, Y+8	; 0x08
    6dd2:	02 0f       	add	r16, r18
    6dd4:	13 1f       	adc	r17, r19
    6dd6:	f8 01       	movw	r30, r16
    6dd8:	10 82       	st	Z, r1
    6dda:	2e 96       	adiw	r28, 0x0e	; 14
    6ddc:	e4 e0       	ldi	r30, 0x04	; 4
    6dde:	0c 94 71 36 	jmp	0x6ce2	; 0x6ce2 <__epilogue_restores__+0x1c>

00006de2 <vfprintf>:
    6de2:	ab e0       	ldi	r26, 0x0B	; 11
    6de4:	b0 e0       	ldi	r27, 0x00	; 0
    6de6:	e7 ef       	ldi	r30, 0xF7	; 247
    6de8:	f6 e3       	ldi	r31, 0x36	; 54
    6dea:	0c 94 47 36 	jmp	0x6c8e	; 0x6c8e <__prologue_saves__>
    6dee:	3c 01       	movw	r6, r24
    6df0:	2b 01       	movw	r4, r22
    6df2:	5a 01       	movw	r10, r20
    6df4:	fc 01       	movw	r30, r24
    6df6:	17 82       	std	Z+7, r1	; 0x07
    6df8:	16 82       	std	Z+6, r1	; 0x06
    6dfa:	83 81       	ldd	r24, Z+3	; 0x03
    6dfc:	81 fd       	sbrc	r24, 1
    6dfe:	03 c0       	rjmp	.+6      	; 0x6e06 <vfprintf+0x24>
    6e00:	6f ef       	ldi	r22, 0xFF	; 255
    6e02:	7f ef       	ldi	r23, 0xFF	; 255
    6e04:	c6 c1       	rjmp	.+908    	; 0x7192 <vfprintf+0x3b0>
    6e06:	9a e0       	ldi	r25, 0x0A	; 10
    6e08:	89 2e       	mov	r8, r25
    6e0a:	1e 01       	movw	r2, r28
    6e0c:	08 94       	sec
    6e0e:	21 1c       	adc	r2, r1
    6e10:	31 1c       	adc	r3, r1
    6e12:	f3 01       	movw	r30, r6
    6e14:	23 81       	ldd	r18, Z+3	; 0x03
    6e16:	f2 01       	movw	r30, r4
    6e18:	23 fd       	sbrc	r18, 3
    6e1a:	85 91       	lpm	r24, Z+
    6e1c:	23 ff       	sbrs	r18, 3
    6e1e:	81 91       	ld	r24, Z+
    6e20:	2f 01       	movw	r4, r30
    6e22:	88 23       	and	r24, r24
    6e24:	09 f4       	brne	.+2      	; 0x6e28 <vfprintf+0x46>
    6e26:	b2 c1       	rjmp	.+868    	; 0x718c <vfprintf+0x3aa>
    6e28:	85 32       	cpi	r24, 0x25	; 37
    6e2a:	39 f4       	brne	.+14     	; 0x6e3a <vfprintf+0x58>
    6e2c:	23 fd       	sbrc	r18, 3
    6e2e:	85 91       	lpm	r24, Z+
    6e30:	23 ff       	sbrs	r18, 3
    6e32:	81 91       	ld	r24, Z+
    6e34:	2f 01       	movw	r4, r30
    6e36:	85 32       	cpi	r24, 0x25	; 37
    6e38:	29 f4       	brne	.+10     	; 0x6e44 <vfprintf+0x62>
    6e3a:	90 e0       	ldi	r25, 0x00	; 0
    6e3c:	b3 01       	movw	r22, r6
    6e3e:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <fputc>
    6e42:	e7 cf       	rjmp	.-50     	; 0x6e12 <vfprintf+0x30>
    6e44:	98 2f       	mov	r25, r24
    6e46:	ff 24       	eor	r15, r15
    6e48:	ee 24       	eor	r14, r14
    6e4a:	99 24       	eor	r9, r9
    6e4c:	ff e1       	ldi	r31, 0x1F	; 31
    6e4e:	ff 15       	cp	r31, r15
    6e50:	d0 f0       	brcs	.+52     	; 0x6e86 <vfprintf+0xa4>
    6e52:	9b 32       	cpi	r25, 0x2B	; 43
    6e54:	69 f0       	breq	.+26     	; 0x6e70 <vfprintf+0x8e>
    6e56:	9c 32       	cpi	r25, 0x2C	; 44
    6e58:	28 f4       	brcc	.+10     	; 0x6e64 <vfprintf+0x82>
    6e5a:	90 32       	cpi	r25, 0x20	; 32
    6e5c:	59 f0       	breq	.+22     	; 0x6e74 <vfprintf+0x92>
    6e5e:	93 32       	cpi	r25, 0x23	; 35
    6e60:	91 f4       	brne	.+36     	; 0x6e86 <vfprintf+0xa4>
    6e62:	0e c0       	rjmp	.+28     	; 0x6e80 <vfprintf+0x9e>
    6e64:	9d 32       	cpi	r25, 0x2D	; 45
    6e66:	49 f0       	breq	.+18     	; 0x6e7a <vfprintf+0x98>
    6e68:	90 33       	cpi	r25, 0x30	; 48
    6e6a:	69 f4       	brne	.+26     	; 0x6e86 <vfprintf+0xa4>
    6e6c:	41 e0       	ldi	r20, 0x01	; 1
    6e6e:	24 c0       	rjmp	.+72     	; 0x6eb8 <vfprintf+0xd6>
    6e70:	52 e0       	ldi	r21, 0x02	; 2
    6e72:	f5 2a       	or	r15, r21
    6e74:	84 e0       	ldi	r24, 0x04	; 4
    6e76:	f8 2a       	or	r15, r24
    6e78:	28 c0       	rjmp	.+80     	; 0x6eca <vfprintf+0xe8>
    6e7a:	98 e0       	ldi	r25, 0x08	; 8
    6e7c:	f9 2a       	or	r15, r25
    6e7e:	25 c0       	rjmp	.+74     	; 0x6eca <vfprintf+0xe8>
    6e80:	e0 e1       	ldi	r30, 0x10	; 16
    6e82:	fe 2a       	or	r15, r30
    6e84:	22 c0       	rjmp	.+68     	; 0x6eca <vfprintf+0xe8>
    6e86:	f7 fc       	sbrc	r15, 7
    6e88:	29 c0       	rjmp	.+82     	; 0x6edc <vfprintf+0xfa>
    6e8a:	89 2f       	mov	r24, r25
    6e8c:	80 53       	subi	r24, 0x30	; 48
    6e8e:	8a 30       	cpi	r24, 0x0A	; 10
    6e90:	70 f4       	brcc	.+28     	; 0x6eae <vfprintf+0xcc>
    6e92:	f6 fe       	sbrs	r15, 6
    6e94:	05 c0       	rjmp	.+10     	; 0x6ea0 <vfprintf+0xbe>
    6e96:	98 9c       	mul	r9, r8
    6e98:	90 2c       	mov	r9, r0
    6e9a:	11 24       	eor	r1, r1
    6e9c:	98 0e       	add	r9, r24
    6e9e:	15 c0       	rjmp	.+42     	; 0x6eca <vfprintf+0xe8>
    6ea0:	e8 9c       	mul	r14, r8
    6ea2:	e0 2c       	mov	r14, r0
    6ea4:	11 24       	eor	r1, r1
    6ea6:	e8 0e       	add	r14, r24
    6ea8:	f0 e2       	ldi	r31, 0x20	; 32
    6eaa:	ff 2a       	or	r15, r31
    6eac:	0e c0       	rjmp	.+28     	; 0x6eca <vfprintf+0xe8>
    6eae:	9e 32       	cpi	r25, 0x2E	; 46
    6eb0:	29 f4       	brne	.+10     	; 0x6ebc <vfprintf+0xda>
    6eb2:	f6 fc       	sbrc	r15, 6
    6eb4:	6b c1       	rjmp	.+726    	; 0x718c <vfprintf+0x3aa>
    6eb6:	40 e4       	ldi	r20, 0x40	; 64
    6eb8:	f4 2a       	or	r15, r20
    6eba:	07 c0       	rjmp	.+14     	; 0x6eca <vfprintf+0xe8>
    6ebc:	9c 36       	cpi	r25, 0x6C	; 108
    6ebe:	19 f4       	brne	.+6      	; 0x6ec6 <vfprintf+0xe4>
    6ec0:	50 e8       	ldi	r21, 0x80	; 128
    6ec2:	f5 2a       	or	r15, r21
    6ec4:	02 c0       	rjmp	.+4      	; 0x6eca <vfprintf+0xe8>
    6ec6:	98 36       	cpi	r25, 0x68	; 104
    6ec8:	49 f4       	brne	.+18     	; 0x6edc <vfprintf+0xfa>
    6eca:	f2 01       	movw	r30, r4
    6ecc:	23 fd       	sbrc	r18, 3
    6ece:	95 91       	lpm	r25, Z+
    6ed0:	23 ff       	sbrs	r18, 3
    6ed2:	91 91       	ld	r25, Z+
    6ed4:	2f 01       	movw	r4, r30
    6ed6:	99 23       	and	r25, r25
    6ed8:	09 f0       	breq	.+2      	; 0x6edc <vfprintf+0xfa>
    6eda:	b8 cf       	rjmp	.-144    	; 0x6e4c <vfprintf+0x6a>
    6edc:	89 2f       	mov	r24, r25
    6ede:	85 54       	subi	r24, 0x45	; 69
    6ee0:	83 30       	cpi	r24, 0x03	; 3
    6ee2:	18 f0       	brcs	.+6      	; 0x6eea <vfprintf+0x108>
    6ee4:	80 52       	subi	r24, 0x20	; 32
    6ee6:	83 30       	cpi	r24, 0x03	; 3
    6ee8:	38 f4       	brcc	.+14     	; 0x6ef8 <vfprintf+0x116>
    6eea:	44 e0       	ldi	r20, 0x04	; 4
    6eec:	50 e0       	ldi	r21, 0x00	; 0
    6eee:	a4 0e       	add	r10, r20
    6ef0:	b5 1e       	adc	r11, r21
    6ef2:	5f e3       	ldi	r21, 0x3F	; 63
    6ef4:	59 83       	std	Y+1, r21	; 0x01
    6ef6:	0f c0       	rjmp	.+30     	; 0x6f16 <vfprintf+0x134>
    6ef8:	93 36       	cpi	r25, 0x63	; 99
    6efa:	31 f0       	breq	.+12     	; 0x6f08 <vfprintf+0x126>
    6efc:	93 37       	cpi	r25, 0x73	; 115
    6efe:	79 f0       	breq	.+30     	; 0x6f1e <vfprintf+0x13c>
    6f00:	93 35       	cpi	r25, 0x53	; 83
    6f02:	09 f0       	breq	.+2      	; 0x6f06 <vfprintf+0x124>
    6f04:	56 c0       	rjmp	.+172    	; 0x6fb2 <vfprintf+0x1d0>
    6f06:	20 c0       	rjmp	.+64     	; 0x6f48 <vfprintf+0x166>
    6f08:	f5 01       	movw	r30, r10
    6f0a:	80 81       	ld	r24, Z
    6f0c:	89 83       	std	Y+1, r24	; 0x01
    6f0e:	42 e0       	ldi	r20, 0x02	; 2
    6f10:	50 e0       	ldi	r21, 0x00	; 0
    6f12:	a4 0e       	add	r10, r20
    6f14:	b5 1e       	adc	r11, r21
    6f16:	61 01       	movw	r12, r2
    6f18:	01 e0       	ldi	r16, 0x01	; 1
    6f1a:	10 e0       	ldi	r17, 0x00	; 0
    6f1c:	12 c0       	rjmp	.+36     	; 0x6f42 <vfprintf+0x160>
    6f1e:	f5 01       	movw	r30, r10
    6f20:	c0 80       	ld	r12, Z
    6f22:	d1 80       	ldd	r13, Z+1	; 0x01
    6f24:	f6 fc       	sbrc	r15, 6
    6f26:	03 c0       	rjmp	.+6      	; 0x6f2e <vfprintf+0x14c>
    6f28:	6f ef       	ldi	r22, 0xFF	; 255
    6f2a:	7f ef       	ldi	r23, 0xFF	; 255
    6f2c:	02 c0       	rjmp	.+4      	; 0x6f32 <vfprintf+0x150>
    6f2e:	69 2d       	mov	r22, r9
    6f30:	70 e0       	ldi	r23, 0x00	; 0
    6f32:	42 e0       	ldi	r20, 0x02	; 2
    6f34:	50 e0       	ldi	r21, 0x00	; 0
    6f36:	a4 0e       	add	r10, r20
    6f38:	b5 1e       	adc	r11, r21
    6f3a:	c6 01       	movw	r24, r12
    6f3c:	0e 94 d9 38 	call	0x71b2	; 0x71b2 <strnlen>
    6f40:	8c 01       	movw	r16, r24
    6f42:	5f e7       	ldi	r21, 0x7F	; 127
    6f44:	f5 22       	and	r15, r21
    6f46:	14 c0       	rjmp	.+40     	; 0x6f70 <vfprintf+0x18e>
    6f48:	f5 01       	movw	r30, r10
    6f4a:	c0 80       	ld	r12, Z
    6f4c:	d1 80       	ldd	r13, Z+1	; 0x01
    6f4e:	f6 fc       	sbrc	r15, 6
    6f50:	03 c0       	rjmp	.+6      	; 0x6f58 <vfprintf+0x176>
    6f52:	6f ef       	ldi	r22, 0xFF	; 255
    6f54:	7f ef       	ldi	r23, 0xFF	; 255
    6f56:	02 c0       	rjmp	.+4      	; 0x6f5c <vfprintf+0x17a>
    6f58:	69 2d       	mov	r22, r9
    6f5a:	70 e0       	ldi	r23, 0x00	; 0
    6f5c:	42 e0       	ldi	r20, 0x02	; 2
    6f5e:	50 e0       	ldi	r21, 0x00	; 0
    6f60:	a4 0e       	add	r10, r20
    6f62:	b5 1e       	adc	r11, r21
    6f64:	c6 01       	movw	r24, r12
    6f66:	0e 94 ce 38 	call	0x719c	; 0x719c <strnlen_P>
    6f6a:	8c 01       	movw	r16, r24
    6f6c:	50 e8       	ldi	r21, 0x80	; 128
    6f6e:	f5 2a       	or	r15, r21
    6f70:	f3 fe       	sbrs	r15, 3
    6f72:	07 c0       	rjmp	.+14     	; 0x6f82 <vfprintf+0x1a0>
    6f74:	1a c0       	rjmp	.+52     	; 0x6faa <vfprintf+0x1c8>
    6f76:	80 e2       	ldi	r24, 0x20	; 32
    6f78:	90 e0       	ldi	r25, 0x00	; 0
    6f7a:	b3 01       	movw	r22, r6
    6f7c:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <fputc>
    6f80:	ea 94       	dec	r14
    6f82:	8e 2d       	mov	r24, r14
    6f84:	90 e0       	ldi	r25, 0x00	; 0
    6f86:	08 17       	cp	r16, r24
    6f88:	19 07       	cpc	r17, r25
    6f8a:	a8 f3       	brcs	.-22     	; 0x6f76 <vfprintf+0x194>
    6f8c:	0e c0       	rjmp	.+28     	; 0x6faa <vfprintf+0x1c8>
    6f8e:	f6 01       	movw	r30, r12
    6f90:	f7 fc       	sbrc	r15, 7
    6f92:	85 91       	lpm	r24, Z+
    6f94:	f7 fe       	sbrs	r15, 7
    6f96:	81 91       	ld	r24, Z+
    6f98:	6f 01       	movw	r12, r30
    6f9a:	90 e0       	ldi	r25, 0x00	; 0
    6f9c:	b3 01       	movw	r22, r6
    6f9e:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <fputc>
    6fa2:	e1 10       	cpse	r14, r1
    6fa4:	ea 94       	dec	r14
    6fa6:	01 50       	subi	r16, 0x01	; 1
    6fa8:	10 40       	sbci	r17, 0x00	; 0
    6faa:	01 15       	cp	r16, r1
    6fac:	11 05       	cpc	r17, r1
    6fae:	79 f7       	brne	.-34     	; 0x6f8e <vfprintf+0x1ac>
    6fb0:	ea c0       	rjmp	.+468    	; 0x7186 <vfprintf+0x3a4>
    6fb2:	94 36       	cpi	r25, 0x64	; 100
    6fb4:	11 f0       	breq	.+4      	; 0x6fba <vfprintf+0x1d8>
    6fb6:	99 36       	cpi	r25, 0x69	; 105
    6fb8:	69 f5       	brne	.+90     	; 0x7014 <vfprintf+0x232>
    6fba:	f7 fe       	sbrs	r15, 7
    6fbc:	08 c0       	rjmp	.+16     	; 0x6fce <vfprintf+0x1ec>
    6fbe:	f5 01       	movw	r30, r10
    6fc0:	20 81       	ld	r18, Z
    6fc2:	31 81       	ldd	r19, Z+1	; 0x01
    6fc4:	42 81       	ldd	r20, Z+2	; 0x02
    6fc6:	53 81       	ldd	r21, Z+3	; 0x03
    6fc8:	84 e0       	ldi	r24, 0x04	; 4
    6fca:	90 e0       	ldi	r25, 0x00	; 0
    6fcc:	0a c0       	rjmp	.+20     	; 0x6fe2 <vfprintf+0x200>
    6fce:	f5 01       	movw	r30, r10
    6fd0:	80 81       	ld	r24, Z
    6fd2:	91 81       	ldd	r25, Z+1	; 0x01
    6fd4:	9c 01       	movw	r18, r24
    6fd6:	44 27       	eor	r20, r20
    6fd8:	37 fd       	sbrc	r19, 7
    6fda:	40 95       	com	r20
    6fdc:	54 2f       	mov	r21, r20
    6fde:	82 e0       	ldi	r24, 0x02	; 2
    6fe0:	90 e0       	ldi	r25, 0x00	; 0
    6fe2:	a8 0e       	add	r10, r24
    6fe4:	b9 1e       	adc	r11, r25
    6fe6:	9f e6       	ldi	r25, 0x6F	; 111
    6fe8:	f9 22       	and	r15, r25
    6fea:	57 ff       	sbrs	r21, 7
    6fec:	09 c0       	rjmp	.+18     	; 0x7000 <vfprintf+0x21e>
    6fee:	50 95       	com	r21
    6ff0:	40 95       	com	r20
    6ff2:	30 95       	com	r19
    6ff4:	21 95       	neg	r18
    6ff6:	3f 4f       	sbci	r19, 0xFF	; 255
    6ff8:	4f 4f       	sbci	r20, 0xFF	; 255
    6ffa:	5f 4f       	sbci	r21, 0xFF	; 255
    6ffc:	e0 e8       	ldi	r30, 0x80	; 128
    6ffe:	fe 2a       	or	r15, r30
    7000:	ca 01       	movw	r24, r20
    7002:	b9 01       	movw	r22, r18
    7004:	a1 01       	movw	r20, r2
    7006:	2a e0       	ldi	r18, 0x0A	; 10
    7008:	30 e0       	ldi	r19, 0x00	; 0
    700a:	0e 94 20 39 	call	0x7240	; 0x7240 <__ultoa_invert>
    700e:	d8 2e       	mov	r13, r24
    7010:	d2 18       	sub	r13, r2
    7012:	40 c0       	rjmp	.+128    	; 0x7094 <vfprintf+0x2b2>
    7014:	95 37       	cpi	r25, 0x75	; 117
    7016:	29 f4       	brne	.+10     	; 0x7022 <vfprintf+0x240>
    7018:	1f 2d       	mov	r17, r15
    701a:	1f 7e       	andi	r17, 0xEF	; 239
    701c:	2a e0       	ldi	r18, 0x0A	; 10
    701e:	30 e0       	ldi	r19, 0x00	; 0
    7020:	1d c0       	rjmp	.+58     	; 0x705c <vfprintf+0x27a>
    7022:	1f 2d       	mov	r17, r15
    7024:	19 7f       	andi	r17, 0xF9	; 249
    7026:	9f 36       	cpi	r25, 0x6F	; 111
    7028:	61 f0       	breq	.+24     	; 0x7042 <vfprintf+0x260>
    702a:	90 37       	cpi	r25, 0x70	; 112
    702c:	20 f4       	brcc	.+8      	; 0x7036 <vfprintf+0x254>
    702e:	98 35       	cpi	r25, 0x58	; 88
    7030:	09 f0       	breq	.+2      	; 0x7034 <vfprintf+0x252>
    7032:	ac c0       	rjmp	.+344    	; 0x718c <vfprintf+0x3aa>
    7034:	0f c0       	rjmp	.+30     	; 0x7054 <vfprintf+0x272>
    7036:	90 37       	cpi	r25, 0x70	; 112
    7038:	39 f0       	breq	.+14     	; 0x7048 <vfprintf+0x266>
    703a:	98 37       	cpi	r25, 0x78	; 120
    703c:	09 f0       	breq	.+2      	; 0x7040 <vfprintf+0x25e>
    703e:	a6 c0       	rjmp	.+332    	; 0x718c <vfprintf+0x3aa>
    7040:	04 c0       	rjmp	.+8      	; 0x704a <vfprintf+0x268>
    7042:	28 e0       	ldi	r18, 0x08	; 8
    7044:	30 e0       	ldi	r19, 0x00	; 0
    7046:	0a c0       	rjmp	.+20     	; 0x705c <vfprintf+0x27a>
    7048:	10 61       	ori	r17, 0x10	; 16
    704a:	14 fd       	sbrc	r17, 4
    704c:	14 60       	ori	r17, 0x04	; 4
    704e:	20 e1       	ldi	r18, 0x10	; 16
    7050:	30 e0       	ldi	r19, 0x00	; 0
    7052:	04 c0       	rjmp	.+8      	; 0x705c <vfprintf+0x27a>
    7054:	14 fd       	sbrc	r17, 4
    7056:	16 60       	ori	r17, 0x06	; 6
    7058:	20 e1       	ldi	r18, 0x10	; 16
    705a:	32 e0       	ldi	r19, 0x02	; 2
    705c:	17 ff       	sbrs	r17, 7
    705e:	08 c0       	rjmp	.+16     	; 0x7070 <vfprintf+0x28e>
    7060:	f5 01       	movw	r30, r10
    7062:	60 81       	ld	r22, Z
    7064:	71 81       	ldd	r23, Z+1	; 0x01
    7066:	82 81       	ldd	r24, Z+2	; 0x02
    7068:	93 81       	ldd	r25, Z+3	; 0x03
    706a:	44 e0       	ldi	r20, 0x04	; 4
    706c:	50 e0       	ldi	r21, 0x00	; 0
    706e:	08 c0       	rjmp	.+16     	; 0x7080 <vfprintf+0x29e>
    7070:	f5 01       	movw	r30, r10
    7072:	80 81       	ld	r24, Z
    7074:	91 81       	ldd	r25, Z+1	; 0x01
    7076:	bc 01       	movw	r22, r24
    7078:	80 e0       	ldi	r24, 0x00	; 0
    707a:	90 e0       	ldi	r25, 0x00	; 0
    707c:	42 e0       	ldi	r20, 0x02	; 2
    707e:	50 e0       	ldi	r21, 0x00	; 0
    7080:	a4 0e       	add	r10, r20
    7082:	b5 1e       	adc	r11, r21
    7084:	a1 01       	movw	r20, r2
    7086:	0e 94 20 39 	call	0x7240	; 0x7240 <__ultoa_invert>
    708a:	d8 2e       	mov	r13, r24
    708c:	d2 18       	sub	r13, r2
    708e:	8f e7       	ldi	r24, 0x7F	; 127
    7090:	f8 2e       	mov	r15, r24
    7092:	f1 22       	and	r15, r17
    7094:	f6 fe       	sbrs	r15, 6
    7096:	0b c0       	rjmp	.+22     	; 0x70ae <vfprintf+0x2cc>
    7098:	5e ef       	ldi	r21, 0xFE	; 254
    709a:	f5 22       	and	r15, r21
    709c:	d9 14       	cp	r13, r9
    709e:	38 f4       	brcc	.+14     	; 0x70ae <vfprintf+0x2cc>
    70a0:	f4 fe       	sbrs	r15, 4
    70a2:	07 c0       	rjmp	.+14     	; 0x70b2 <vfprintf+0x2d0>
    70a4:	f2 fc       	sbrc	r15, 2
    70a6:	05 c0       	rjmp	.+10     	; 0x70b2 <vfprintf+0x2d0>
    70a8:	8f ee       	ldi	r24, 0xEF	; 239
    70aa:	f8 22       	and	r15, r24
    70ac:	02 c0       	rjmp	.+4      	; 0x70b2 <vfprintf+0x2d0>
    70ae:	1d 2d       	mov	r17, r13
    70b0:	01 c0       	rjmp	.+2      	; 0x70b4 <vfprintf+0x2d2>
    70b2:	19 2d       	mov	r17, r9
    70b4:	f4 fe       	sbrs	r15, 4
    70b6:	0d c0       	rjmp	.+26     	; 0x70d2 <vfprintf+0x2f0>
    70b8:	fe 01       	movw	r30, r28
    70ba:	ed 0d       	add	r30, r13
    70bc:	f1 1d       	adc	r31, r1
    70be:	80 81       	ld	r24, Z
    70c0:	80 33       	cpi	r24, 0x30	; 48
    70c2:	19 f4       	brne	.+6      	; 0x70ca <vfprintf+0x2e8>
    70c4:	99 ee       	ldi	r25, 0xE9	; 233
    70c6:	f9 22       	and	r15, r25
    70c8:	08 c0       	rjmp	.+16     	; 0x70da <vfprintf+0x2f8>
    70ca:	1f 5f       	subi	r17, 0xFF	; 255
    70cc:	f2 fe       	sbrs	r15, 2
    70ce:	05 c0       	rjmp	.+10     	; 0x70da <vfprintf+0x2f8>
    70d0:	03 c0       	rjmp	.+6      	; 0x70d8 <vfprintf+0x2f6>
    70d2:	8f 2d       	mov	r24, r15
    70d4:	86 78       	andi	r24, 0x86	; 134
    70d6:	09 f0       	breq	.+2      	; 0x70da <vfprintf+0x2f8>
    70d8:	1f 5f       	subi	r17, 0xFF	; 255
    70da:	0f 2d       	mov	r16, r15
    70dc:	f3 fc       	sbrc	r15, 3
    70de:	14 c0       	rjmp	.+40     	; 0x7108 <vfprintf+0x326>
    70e0:	f0 fe       	sbrs	r15, 0
    70e2:	0f c0       	rjmp	.+30     	; 0x7102 <vfprintf+0x320>
    70e4:	1e 15       	cp	r17, r14
    70e6:	10 f0       	brcs	.+4      	; 0x70ec <vfprintf+0x30a>
    70e8:	9d 2c       	mov	r9, r13
    70ea:	0b c0       	rjmp	.+22     	; 0x7102 <vfprintf+0x320>
    70ec:	9d 2c       	mov	r9, r13
    70ee:	9e 0c       	add	r9, r14
    70f0:	91 1a       	sub	r9, r17
    70f2:	1e 2d       	mov	r17, r14
    70f4:	06 c0       	rjmp	.+12     	; 0x7102 <vfprintf+0x320>
    70f6:	80 e2       	ldi	r24, 0x20	; 32
    70f8:	90 e0       	ldi	r25, 0x00	; 0
    70fa:	b3 01       	movw	r22, r6
    70fc:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <fputc>
    7100:	1f 5f       	subi	r17, 0xFF	; 255
    7102:	1e 15       	cp	r17, r14
    7104:	c0 f3       	brcs	.-16     	; 0x70f6 <vfprintf+0x314>
    7106:	04 c0       	rjmp	.+8      	; 0x7110 <vfprintf+0x32e>
    7108:	1e 15       	cp	r17, r14
    710a:	10 f4       	brcc	.+4      	; 0x7110 <vfprintf+0x32e>
    710c:	e1 1a       	sub	r14, r17
    710e:	01 c0       	rjmp	.+2      	; 0x7112 <vfprintf+0x330>
    7110:	ee 24       	eor	r14, r14
    7112:	04 ff       	sbrs	r16, 4
    7114:	0f c0       	rjmp	.+30     	; 0x7134 <vfprintf+0x352>
    7116:	80 e3       	ldi	r24, 0x30	; 48
    7118:	90 e0       	ldi	r25, 0x00	; 0
    711a:	b3 01       	movw	r22, r6
    711c:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <fputc>
    7120:	02 ff       	sbrs	r16, 2
    7122:	1d c0       	rjmp	.+58     	; 0x715e <vfprintf+0x37c>
    7124:	01 fd       	sbrc	r16, 1
    7126:	03 c0       	rjmp	.+6      	; 0x712e <vfprintf+0x34c>
    7128:	88 e7       	ldi	r24, 0x78	; 120
    712a:	90 e0       	ldi	r25, 0x00	; 0
    712c:	0e c0       	rjmp	.+28     	; 0x714a <vfprintf+0x368>
    712e:	88 e5       	ldi	r24, 0x58	; 88
    7130:	90 e0       	ldi	r25, 0x00	; 0
    7132:	0b c0       	rjmp	.+22     	; 0x714a <vfprintf+0x368>
    7134:	80 2f       	mov	r24, r16
    7136:	86 78       	andi	r24, 0x86	; 134
    7138:	91 f0       	breq	.+36     	; 0x715e <vfprintf+0x37c>
    713a:	01 ff       	sbrs	r16, 1
    713c:	02 c0       	rjmp	.+4      	; 0x7142 <vfprintf+0x360>
    713e:	8b e2       	ldi	r24, 0x2B	; 43
    7140:	01 c0       	rjmp	.+2      	; 0x7144 <vfprintf+0x362>
    7142:	80 e2       	ldi	r24, 0x20	; 32
    7144:	f7 fc       	sbrc	r15, 7
    7146:	8d e2       	ldi	r24, 0x2D	; 45
    7148:	90 e0       	ldi	r25, 0x00	; 0
    714a:	b3 01       	movw	r22, r6
    714c:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <fputc>
    7150:	06 c0       	rjmp	.+12     	; 0x715e <vfprintf+0x37c>
    7152:	80 e3       	ldi	r24, 0x30	; 48
    7154:	90 e0       	ldi	r25, 0x00	; 0
    7156:	b3 01       	movw	r22, r6
    7158:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <fputc>
    715c:	9a 94       	dec	r9
    715e:	d9 14       	cp	r13, r9
    7160:	c0 f3       	brcs	.-16     	; 0x7152 <vfprintf+0x370>
    7162:	da 94       	dec	r13
    7164:	f1 01       	movw	r30, r2
    7166:	ed 0d       	add	r30, r13
    7168:	f1 1d       	adc	r31, r1
    716a:	80 81       	ld	r24, Z
    716c:	90 e0       	ldi	r25, 0x00	; 0
    716e:	b3 01       	movw	r22, r6
    7170:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <fputc>
    7174:	dd 20       	and	r13, r13
    7176:	a9 f7       	brne	.-22     	; 0x7162 <vfprintf+0x380>
    7178:	06 c0       	rjmp	.+12     	; 0x7186 <vfprintf+0x3a4>
    717a:	80 e2       	ldi	r24, 0x20	; 32
    717c:	90 e0       	ldi	r25, 0x00	; 0
    717e:	b3 01       	movw	r22, r6
    7180:	0e 94 f4 38 	call	0x71e8	; 0x71e8 <fputc>
    7184:	ea 94       	dec	r14
    7186:	ee 20       	and	r14, r14
    7188:	c1 f7       	brne	.-16     	; 0x717a <vfprintf+0x398>
    718a:	43 ce       	rjmp	.-890    	; 0x6e12 <vfprintf+0x30>
    718c:	f3 01       	movw	r30, r6
    718e:	66 81       	ldd	r22, Z+6	; 0x06
    7190:	77 81       	ldd	r23, Z+7	; 0x07
    7192:	cb 01       	movw	r24, r22
    7194:	2b 96       	adiw	r28, 0x0b	; 11
    7196:	e2 e1       	ldi	r30, 0x12	; 18
    7198:	0c 94 63 36 	jmp	0x6cc6	; 0x6cc6 <__epilogue_restores__>

0000719c <strnlen_P>:
    719c:	fc 01       	movw	r30, r24
    719e:	05 90       	lpm	r0, Z+
    71a0:	61 50       	subi	r22, 0x01	; 1
    71a2:	70 40       	sbci	r23, 0x00	; 0
    71a4:	01 10       	cpse	r0, r1
    71a6:	d8 f7       	brcc	.-10     	; 0x719e <strnlen_P+0x2>
    71a8:	80 95       	com	r24
    71aa:	90 95       	com	r25
    71ac:	8e 0f       	add	r24, r30
    71ae:	9f 1f       	adc	r25, r31
    71b0:	08 95       	ret

000071b2 <strnlen>:
    71b2:	fc 01       	movw	r30, r24
    71b4:	61 50       	subi	r22, 0x01	; 1
    71b6:	70 40       	sbci	r23, 0x00	; 0
    71b8:	01 90       	ld	r0, Z+
    71ba:	01 10       	cpse	r0, r1
    71bc:	d8 f7       	brcc	.-10     	; 0x71b4 <strnlen+0x2>
    71be:	80 95       	com	r24
    71c0:	90 95       	com	r25
    71c2:	8e 0f       	add	r24, r30
    71c4:	9f 1f       	adc	r25, r31
    71c6:	08 95       	ret

000071c8 <strrev>:
    71c8:	dc 01       	movw	r26, r24
    71ca:	fc 01       	movw	r30, r24
    71cc:	67 2f       	mov	r22, r23
    71ce:	71 91       	ld	r23, Z+
    71d0:	77 23       	and	r23, r23
    71d2:	e1 f7       	brne	.-8      	; 0x71cc <strrev+0x4>
    71d4:	32 97       	sbiw	r30, 0x02	; 2
    71d6:	04 c0       	rjmp	.+8      	; 0x71e0 <strrev+0x18>
    71d8:	7c 91       	ld	r23, X
    71da:	6d 93       	st	X+, r22
    71dc:	70 83       	st	Z, r23
    71de:	62 91       	ld	r22, -Z
    71e0:	ae 17       	cp	r26, r30
    71e2:	bf 07       	cpc	r27, r31
    71e4:	c8 f3       	brcs	.-14     	; 0x71d8 <strrev+0x10>
    71e6:	08 95       	ret

000071e8 <fputc>:
    71e8:	0f 93       	push	r16
    71ea:	1f 93       	push	r17
    71ec:	cf 93       	push	r28
    71ee:	df 93       	push	r29
    71f0:	8c 01       	movw	r16, r24
    71f2:	eb 01       	movw	r28, r22
    71f4:	8b 81       	ldd	r24, Y+3	; 0x03
    71f6:	81 ff       	sbrs	r24, 1
    71f8:	1b c0       	rjmp	.+54     	; 0x7230 <fputc+0x48>
    71fa:	82 ff       	sbrs	r24, 2
    71fc:	0d c0       	rjmp	.+26     	; 0x7218 <fputc+0x30>
    71fe:	2e 81       	ldd	r18, Y+6	; 0x06
    7200:	3f 81       	ldd	r19, Y+7	; 0x07
    7202:	8c 81       	ldd	r24, Y+4	; 0x04
    7204:	9d 81       	ldd	r25, Y+5	; 0x05
    7206:	28 17       	cp	r18, r24
    7208:	39 07       	cpc	r19, r25
    720a:	64 f4       	brge	.+24     	; 0x7224 <fputc+0x3c>
    720c:	e8 81       	ld	r30, Y
    720e:	f9 81       	ldd	r31, Y+1	; 0x01
    7210:	01 93       	st	Z+, r16
    7212:	f9 83       	std	Y+1, r31	; 0x01
    7214:	e8 83       	st	Y, r30
    7216:	06 c0       	rjmp	.+12     	; 0x7224 <fputc+0x3c>
    7218:	e8 85       	ldd	r30, Y+8	; 0x08
    721a:	f9 85       	ldd	r31, Y+9	; 0x09
    721c:	80 2f       	mov	r24, r16
    721e:	09 95       	icall
    7220:	89 2b       	or	r24, r25
    7222:	31 f4       	brne	.+12     	; 0x7230 <fputc+0x48>
    7224:	8e 81       	ldd	r24, Y+6	; 0x06
    7226:	9f 81       	ldd	r25, Y+7	; 0x07
    7228:	01 96       	adiw	r24, 0x01	; 1
    722a:	9f 83       	std	Y+7, r25	; 0x07
    722c:	8e 83       	std	Y+6, r24	; 0x06
    722e:	02 c0       	rjmp	.+4      	; 0x7234 <fputc+0x4c>
    7230:	0f ef       	ldi	r16, 0xFF	; 255
    7232:	1f ef       	ldi	r17, 0xFF	; 255
    7234:	c8 01       	movw	r24, r16
    7236:	df 91       	pop	r29
    7238:	cf 91       	pop	r28
    723a:	1f 91       	pop	r17
    723c:	0f 91       	pop	r16
    723e:	08 95       	ret

00007240 <__ultoa_invert>:
    7240:	fa 01       	movw	r30, r20
    7242:	aa 27       	eor	r26, r26
    7244:	28 30       	cpi	r18, 0x08	; 8
    7246:	51 f1       	breq	.+84     	; 0x729c <__ultoa_invert+0x5c>
    7248:	20 31       	cpi	r18, 0x10	; 16
    724a:	81 f1       	breq	.+96     	; 0x72ac <__ultoa_invert+0x6c>
    724c:	e8 94       	clt
    724e:	6f 93       	push	r22
    7250:	6e 7f       	andi	r22, 0xFE	; 254
    7252:	6e 5f       	subi	r22, 0xFE	; 254
    7254:	7f 4f       	sbci	r23, 0xFF	; 255
    7256:	8f 4f       	sbci	r24, 0xFF	; 255
    7258:	9f 4f       	sbci	r25, 0xFF	; 255
    725a:	af 4f       	sbci	r26, 0xFF	; 255
    725c:	b1 e0       	ldi	r27, 0x01	; 1
    725e:	3e d0       	rcall	.+124    	; 0x72dc <__ultoa_invert+0x9c>
    7260:	b4 e0       	ldi	r27, 0x04	; 4
    7262:	3c d0       	rcall	.+120    	; 0x72dc <__ultoa_invert+0x9c>
    7264:	67 0f       	add	r22, r23
    7266:	78 1f       	adc	r23, r24
    7268:	89 1f       	adc	r24, r25
    726a:	9a 1f       	adc	r25, r26
    726c:	a1 1d       	adc	r26, r1
    726e:	68 0f       	add	r22, r24
    7270:	79 1f       	adc	r23, r25
    7272:	8a 1f       	adc	r24, r26
    7274:	91 1d       	adc	r25, r1
    7276:	a1 1d       	adc	r26, r1
    7278:	6a 0f       	add	r22, r26
    727a:	71 1d       	adc	r23, r1
    727c:	81 1d       	adc	r24, r1
    727e:	91 1d       	adc	r25, r1
    7280:	a1 1d       	adc	r26, r1
    7282:	20 d0       	rcall	.+64     	; 0x72c4 <__ultoa_invert+0x84>
    7284:	09 f4       	brne	.+2      	; 0x7288 <__ultoa_invert+0x48>
    7286:	68 94       	set
    7288:	3f 91       	pop	r19
    728a:	2a e0       	ldi	r18, 0x0A	; 10
    728c:	26 9f       	mul	r18, r22
    728e:	11 24       	eor	r1, r1
    7290:	30 19       	sub	r19, r0
    7292:	30 5d       	subi	r19, 0xD0	; 208
    7294:	31 93       	st	Z+, r19
    7296:	de f6       	brtc	.-74     	; 0x724e <__ultoa_invert+0xe>
    7298:	cf 01       	movw	r24, r30
    729a:	08 95       	ret
    729c:	46 2f       	mov	r20, r22
    729e:	47 70       	andi	r20, 0x07	; 7
    72a0:	40 5d       	subi	r20, 0xD0	; 208
    72a2:	41 93       	st	Z+, r20
    72a4:	b3 e0       	ldi	r27, 0x03	; 3
    72a6:	0f d0       	rcall	.+30     	; 0x72c6 <__ultoa_invert+0x86>
    72a8:	c9 f7       	brne	.-14     	; 0x729c <__ultoa_invert+0x5c>
    72aa:	f6 cf       	rjmp	.-20     	; 0x7298 <__ultoa_invert+0x58>
    72ac:	46 2f       	mov	r20, r22
    72ae:	4f 70       	andi	r20, 0x0F	; 15
    72b0:	40 5d       	subi	r20, 0xD0	; 208
    72b2:	4a 33       	cpi	r20, 0x3A	; 58
    72b4:	18 f0       	brcs	.+6      	; 0x72bc <__ultoa_invert+0x7c>
    72b6:	49 5d       	subi	r20, 0xD9	; 217
    72b8:	31 fd       	sbrc	r19, 1
    72ba:	40 52       	subi	r20, 0x20	; 32
    72bc:	41 93       	st	Z+, r20
    72be:	02 d0       	rcall	.+4      	; 0x72c4 <__ultoa_invert+0x84>
    72c0:	a9 f7       	brne	.-22     	; 0x72ac <__ultoa_invert+0x6c>
    72c2:	ea cf       	rjmp	.-44     	; 0x7298 <__ultoa_invert+0x58>
    72c4:	b4 e0       	ldi	r27, 0x04	; 4
    72c6:	a6 95       	lsr	r26
    72c8:	97 95       	ror	r25
    72ca:	87 95       	ror	r24
    72cc:	77 95       	ror	r23
    72ce:	67 95       	ror	r22
    72d0:	ba 95       	dec	r27
    72d2:	c9 f7       	brne	.-14     	; 0x72c6 <__ultoa_invert+0x86>
    72d4:	00 97       	sbiw	r24, 0x00	; 0
    72d6:	61 05       	cpc	r22, r1
    72d8:	71 05       	cpc	r23, r1
    72da:	08 95       	ret
    72dc:	9b 01       	movw	r18, r22
    72de:	ac 01       	movw	r20, r24
    72e0:	0a 2e       	mov	r0, r26
    72e2:	06 94       	lsr	r0
    72e4:	57 95       	ror	r21
    72e6:	47 95       	ror	r20
    72e8:	37 95       	ror	r19
    72ea:	27 95       	ror	r18
    72ec:	ba 95       	dec	r27
    72ee:	c9 f7       	brne	.-14     	; 0x72e2 <__ultoa_invert+0xa2>
    72f0:	62 0f       	add	r22, r18
    72f2:	73 1f       	adc	r23, r19
    72f4:	84 1f       	adc	r24, r20
    72f6:	95 1f       	adc	r25, r21
    72f8:	a0 1d       	adc	r26, r0
    72fa:	08 95       	ret

000072fc <_exit>:
    72fc:	f8 94       	cli

000072fe <__stop_program>:
    72fe:	ff cf       	rjmp	.-2      	; 0x72fe <__stop_program>
