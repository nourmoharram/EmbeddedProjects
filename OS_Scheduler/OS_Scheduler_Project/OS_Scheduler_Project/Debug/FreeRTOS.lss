
FreeRTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000046c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000208  00800060  000046c0  00004754  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000085  00800268  00800268  0000495c  2**0
                  ALLOC
  3 .stab         00005934  00000000  00000000  0000495c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000041fd  00000000  00000000  0000a290  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000e48d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000e62d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000e81f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00010c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00011fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00013188  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00013348  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0001363e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013fac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__vector_1>
       8:	0c 94 7c 13 	jmp	0x26f8	; 0x26f8 <__vector_2>
       c:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 d5 0e 	jmp	0x1daa	; 0x1daa <__vector_10>
      2c:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 ff 18 	jmp	0x31fe	; 0x31fe <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ec       	ldi	r30, 0xC0	; 192
      68:	f6 e4       	ldi	r31, 0x46	; 70
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a8 e6       	ldi	r26, 0x68	; 104
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3e       	cpi	r26, 0xED	; 237
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6a 21 	call	0x42d4	; 0x42d4 <main>
      8a:	0c 94 5e 23 	jmp	0x46bc	; 0x46bc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 27 23 	jmp	0x464e	; 0x464e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e7       	ldi	r26, 0x72	; 114
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 33 23 	jmp	0x4666	; 0x4666 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4f 23 	jmp	0x469e	; 0x469e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 33 23 	jmp	0x4666	; 0x4666 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4f 23 	jmp	0x469e	; 0x469e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 27 23 	jmp	0x464e	; 0x464e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e7       	ldi	r24, 0x72	; 114
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2f 23 	jmp	0x465e	; 0x465e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e7       	ldi	r22, 0x72	; 114
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 4b 23 	jmp	0x4696	; 0x4696 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 33 23 	jmp	0x4666	; 0x4666 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 4f 23 	jmp	0x469e	; 0x469e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 33 23 	jmp	0x4666	; 0x4666 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 4f 23 	jmp	0x469e	; 0x469e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 33 23 	jmp	0x4666	; 0x4666 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 4f 23 	jmp	0x469e	; 0x469e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 37 23 	jmp	0x466e	; 0x466e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 53 23 	jmp	0x46a6	; 0x46a6 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 2f 23 	jmp	0x465e	; 0x465e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 4b 23 	jmp	0x4696	; 0x4696 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e6 58       	subi	r30, 0x86	; 134
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <OS_Init>:

static u8 index=0;
static Task_Config Task_Arr[NUMBER_OF_TASKS];
//volatile static u16 Timer_Counter=0;
void OS_Init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	M_void_Timer_Init(Normal_Mode,Normal_Port);
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	0e 94 39 0b 	call	0x1672	; 0x1672 <M_void_Timer_Init>
	M_void_EnableTIMERInt(Normal_Mode);
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <M_void_EnableTIMERInt>
	M_void_setCallBack(Normal_Mode,Schedular_Start);
     e44:	23 ea       	ldi	r18, 0xA3	; 163
     e46:	37 e0       	ldi	r19, 0x07	; 7
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	b9 01       	movw	r22, r18
     e4c:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <M_void_setCallBack>
	GIE_voidEnable();
     e50:	0e 94 50 11 	call	0x22a0	; 0x22a0 <GIE_voidEnable>
}
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	08 95       	ret

00000e5a <OS_Create_Task>:

void OS_Create_Task(Task_Config *Ptr_to_task)
{
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	00 d0       	rcall	.+0      	; 0xe60 <OS_Create_Task+0x6>
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	9a 83       	std	Y+2, r25	; 0x02
     e66:	89 83       	std	Y+1, r24	; 0x01
	if(index<NUMBER_OF_TASKS)
     e68:	80 91 68 02 	lds	r24, 0x0268
     e6c:	85 30       	cpi	r24, 0x05	; 5
     e6e:	08 f0       	brcs	.+2      	; 0xe72 <OS_Create_Task+0x18>
     e70:	65 c0       	rjmp	.+202    	; 0xf3c <OS_Create_Task+0xe2>
	{
		index=(Ptr_to_task->Task_Priority)-1;
     e72:	e9 81       	ldd	r30, Y+1	; 0x01
     e74:	fa 81       	ldd	r31, Y+2	; 0x02
     e76:	83 81       	ldd	r24, Z+3	; 0x03
     e78:	94 81       	ldd	r25, Z+4	; 0x04
     e7a:	81 50       	subi	r24, 0x01	; 1
     e7c:	80 93 68 02 	sts	0x0268, r24
		Task_Arr[index].Task_Periodicty= Ptr_to_task->Task_Periodicty;
     e80:	80 91 68 02 	lds	r24, 0x0268
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	e9 81       	ldd	r30, Y+1	; 0x01
     e8a:	fa 81       	ldd	r31, Y+2	; 0x02
     e8c:	41 81       	ldd	r20, Z+1	; 0x01
     e8e:	52 81       	ldd	r21, Z+2	; 0x02
     e90:	c9 01       	movw	r24, r18
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	82 0f       	add	r24, r18
     e98:	93 1f       	adc	r25, r19
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	82 0f       	add	r24, r18
     ea4:	93 1f       	adc	r25, r19
     ea6:	fc 01       	movw	r30, r24
     ea8:	e6 59       	subi	r30, 0x96	; 150
     eaa:	fd 4f       	sbci	r31, 0xFD	; 253
     eac:	51 83       	std	Z+1, r21	; 0x01
     eae:	40 83       	st	Z, r20
		Task_Arr[index].Task_Handler=Ptr_to_task->Task_Handler;
     eb0:	80 91 68 02 	lds	r24, 0x0268
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	e9 81       	ldd	r30, Y+1	; 0x01
     eba:	fa 81       	ldd	r31, Y+2	; 0x02
     ebc:	43 85       	ldd	r20, Z+11	; 0x0b
     ebe:	54 85       	ldd	r21, Z+12	; 0x0c
     ec0:	c9 01       	movw	r24, r18
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	82 0f       	add	r24, r18
     ec8:	93 1f       	adc	r25, r19
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	82 0f       	add	r24, r18
     ed4:	93 1f       	adc	r25, r19
     ed6:	fc 01       	movw	r30, r24
     ed8:	ec 58       	subi	r30, 0x8C	; 140
     eda:	fd 4f       	sbci	r31, 0xFD	; 253
     edc:	51 83       	std	Z+1, r21	; 0x01
     ede:	40 83       	st	Z, r20
		Task_Arr[index].First_Delay=Ptr_to_task->First_Delay;
     ee0:	80 91 68 02 	lds	r24, 0x0268
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	e9 81       	ldd	r30, Y+1	; 0x01
     eea:	fa 81       	ldd	r31, Y+2	; 0x02
     eec:	45 81       	ldd	r20, Z+5	; 0x05
     eee:	56 81       	ldd	r21, Z+6	; 0x06
     ef0:	c9 01       	movw	r24, r18
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	82 0f       	add	r24, r18
     ef8:	93 1f       	adc	r25, r19
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	82 0f       	add	r24, r18
     f04:	93 1f       	adc	r25, r19
     f06:	fc 01       	movw	r30, r24
     f08:	e2 59       	subi	r30, 0x92	; 146
     f0a:	fd 4f       	sbci	r31, 0xFD	; 253
     f0c:	51 83       	std	Z+1, r21	; 0x01
     f0e:	40 83       	st	Z, r20
		Task_Arr[index].Task_State=Ptr_to_task->Task_State;
     f10:	80 91 68 02 	lds	r24, 0x0268
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	e9 81       	ldd	r30, Y+1	; 0x01
     f1a:	fa 81       	ldd	r31, Y+2	; 0x02
     f1c:	40 81       	ld	r20, Z
     f1e:	c9 01       	movw	r24, r18
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	82 0f       	add	r24, r18
     f26:	93 1f       	adc	r25, r19
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	82 0f       	add	r24, r18
     f32:	93 1f       	adc	r25, r19
     f34:	fc 01       	movw	r30, r24
     f36:	e7 59       	subi	r30, 0x97	; 151
     f38:	fd 4f       	sbci	r31, 0xFD	; 253
     f3a:	40 83       	st	Z, r20
	}
}
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <Schedular_Start>:
}


*/
void Schedular_Start(void)
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	0f 92       	push	r0
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62

	u8 i;

	for (i = 0; i < NUMBER_OF_TASKS; i++)
     f50:	19 82       	std	Y+1, r1	; 0x01
     f52:	13 c1       	rjmp	.+550    	; 0x117a <Schedular_Start+0x234>
	{
		/*modifications*/
		if(Task_Arr[i].Delay_Time==0)
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	c9 01       	movw	r24, r18
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	82 0f       	add	r24, r18
     f62:	93 1f       	adc	r25, r19
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	82 0f       	add	r24, r18
     f6e:	93 1f       	adc	r25, r19
     f70:	fc 01       	movw	r30, r24
     f72:	e0 59       	subi	r30, 0x90	; 144
     f74:	fd 4f       	sbci	r31, 0xFD	; 253
     f76:	80 81       	ld	r24, Z
     f78:	91 81       	ldd	r25, Z+1	; 0x01
     f7a:	a2 81       	ldd	r26, Z+2	; 0x02
     f7c:	b3 81       	ldd	r27, Z+3	; 0x03
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	a1 05       	cpc	r26, r1
     f82:	b1 05       	cpc	r27, r1
     f84:	99 f4       	brne	.+38     	; 0xfac <Schedular_Start+0x66>
		{
			Task_Arr[i].Task_State=Ready;
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	c9 01       	movw	r24, r18
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	82 0f       	add	r24, r18
     f94:	93 1f       	adc	r25, r19
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	82 0f       	add	r24, r18
     fa0:	93 1f       	adc	r25, r19
     fa2:	fc 01       	movw	r30, r24
     fa4:	e7 59       	subi	r30, 0x97	; 151
     fa6:	fd 4f       	sbci	r31, 0xFD	; 253
     fa8:	10 82       	st	Z, r1
     faa:	2d c0       	rjmp	.+90     	; 0x1006 <Schedular_Start+0xc0>
		}
		else
		{
			Task_Arr[i].Delay_Time--;
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	c9 01       	movw	r24, r18
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	82 0f       	add	r24, r18
     fba:	93 1f       	adc	r25, r19
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	82 0f       	add	r24, r18
     fc6:	93 1f       	adc	r25, r19
     fc8:	fc 01       	movw	r30, r24
     fca:	e0 59       	subi	r30, 0x90	; 144
     fcc:	fd 4f       	sbci	r31, 0xFD	; 253
     fce:	80 81       	ld	r24, Z
     fd0:	91 81       	ldd	r25, Z+1	; 0x01
     fd2:	a2 81       	ldd	r26, Z+2	; 0x02
     fd4:	b3 81       	ldd	r27, Z+3	; 0x03
     fd6:	ac 01       	movw	r20, r24
     fd8:	bd 01       	movw	r22, r26
     fda:	41 50       	subi	r20, 0x01	; 1
     fdc:	50 40       	sbci	r21, 0x00	; 0
     fde:	60 40       	sbci	r22, 0x00	; 0
     fe0:	70 40       	sbci	r23, 0x00	; 0
     fe2:	c9 01       	movw	r24, r18
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	82 0f       	add	r24, r18
     fea:	93 1f       	adc	r25, r19
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	82 0f       	add	r24, r18
     ff6:	93 1f       	adc	r25, r19
     ff8:	fc 01       	movw	r30, r24
     ffa:	e0 59       	subi	r30, 0x90	; 144
     ffc:	fd 4f       	sbci	r31, 0xFD	; 253
     ffe:	40 83       	st	Z, r20
    1000:	51 83       	std	Z+1, r21	; 0x01
    1002:	62 83       	std	Z+2, r22	; 0x02
    1004:	73 83       	std	Z+3, r23	; 0x03
		}

		/*Old implementation*/
		if(Task_Arr[i].Task_Periodicty != 0)
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	c9 01       	movw	r24, r18
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	82 0f       	add	r24, r18
    1014:	93 1f       	adc	r25, r19
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	82 0f       	add	r24, r18
    1020:	93 1f       	adc	r25, r19
    1022:	fc 01       	movw	r30, r24
    1024:	e6 59       	subi	r30, 0x96	; 150
    1026:	fd 4f       	sbci	r31, 0xFD	; 253
    1028:	80 81       	ld	r24, Z
    102a:	91 81       	ldd	r25, Z+1	; 0x01
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	09 f4       	brne	.+2      	; 0x1032 <Schedular_Start+0xec>
    1030:	a1 c0       	rjmp	.+322    	; 0x1174 <Schedular_Start+0x22e>
		{

				if(Task_Arr[i].Task_State==Ready)
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	c9 01       	movw	r24, r18
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	82 0f       	add	r24, r18
    1040:	93 1f       	adc	r25, r19
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	82 0f       	add	r24, r18
    104c:	93 1f       	adc	r25, r19
    104e:	fc 01       	movw	r30, r24
    1050:	e7 59       	subi	r30, 0x97	; 151
    1052:	fd 4f       	sbci	r31, 0xFD	; 253
    1054:	80 81       	ld	r24, Z
    1056:	88 23       	and	r24, r24
    1058:	09 f0       	breq	.+2      	; 0x105c <Schedular_Start+0x116>
    105a:	8c c0       	rjmp	.+280    	; 0x1174 <Schedular_Start+0x22e>
				{
					if(Task_Arr[i].First_Delay!=0)
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	c9 01       	movw	r24, r18
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	82 0f       	add	r24, r18
    106a:	93 1f       	adc	r25, r19
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	82 0f       	add	r24, r18
    1076:	93 1f       	adc	r25, r19
    1078:	fc 01       	movw	r30, r24
    107a:	e2 59       	subi	r30, 0x92	; 146
    107c:	fd 4f       	sbci	r31, 0xFD	; 253
    107e:	80 81       	ld	r24, Z
    1080:	91 81       	ldd	r25, Z+1	; 0x01
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	09 f4       	brne	.+2      	; 0x1088 <Schedular_Start+0x142>
    1086:	76 c0       	rjmp	.+236    	; 0x1174 <Schedular_Start+0x22e>
					{
						Task_Arr[i].First_Delay--;
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	c9 01       	movw	r24, r18
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	82 0f       	add	r24, r18
    1096:	93 1f       	adc	r25, r19
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	82 0f       	add	r24, r18
    10a2:	93 1f       	adc	r25, r19
    10a4:	fc 01       	movw	r30, r24
    10a6:	e2 59       	subi	r30, 0x92	; 146
    10a8:	fd 4f       	sbci	r31, 0xFD	; 253
    10aa:	80 81       	ld	r24, Z
    10ac:	91 81       	ldd	r25, Z+1	; 0x01
    10ae:	ac 01       	movw	r20, r24
    10b0:	41 50       	subi	r20, 0x01	; 1
    10b2:	50 40       	sbci	r21, 0x00	; 0
    10b4:	c9 01       	movw	r24, r18
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	82 0f       	add	r24, r18
    10bc:	93 1f       	adc	r25, r19
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	82 0f       	add	r24, r18
    10c8:	93 1f       	adc	r25, r19
    10ca:	fc 01       	movw	r30, r24
    10cc:	e2 59       	subi	r30, 0x92	; 146
    10ce:	fd 4f       	sbci	r31, 0xFD	; 253
    10d0:	51 83       	std	Z+1, r21	; 0x01
    10d2:	40 83       	st	Z, r20
						if(Task_Arr[i].First_Delay == 0)
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	c9 01       	movw	r24, r18
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	82 0f       	add	r24, r18
    10e2:	93 1f       	adc	r25, r19
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	82 0f       	add	r24, r18
    10ee:	93 1f       	adc	r25, r19
    10f0:	fc 01       	movw	r30, r24
    10f2:	e2 59       	subi	r30, 0x92	; 146
    10f4:	fd 4f       	sbci	r31, 0xFD	; 253
    10f6:	80 81       	ld	r24, Z
    10f8:	91 81       	ldd	r25, Z+1	; 0x01
    10fa:	00 97       	sbiw	r24, 0x00	; 0
    10fc:	d9 f5       	brne	.+118    	; 0x1174 <Schedular_Start+0x22e>
						{
							//H_LCD_void_sendString("Scheduler");

							Task_Arr[i].Task_Handler();
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	c9 01       	movw	r24, r18
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	82 0f       	add	r24, r18
    110c:	93 1f       	adc	r25, r19
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	82 0f       	add	r24, r18
    1118:	93 1f       	adc	r25, r19
    111a:	fc 01       	movw	r30, r24
    111c:	ec 58       	subi	r30, 0x8C	; 140
    111e:	fd 4f       	sbci	r31, 0xFD	; 253
    1120:	01 90       	ld	r0, Z+
    1122:	f0 81       	ld	r31, Z
    1124:	e0 2d       	mov	r30, r0
    1126:	09 95       	icall
							Task_Arr[i].First_Delay=Task_Arr[i].Task_Periodicty;
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	48 2f       	mov	r20, r24
    112c:	50 e0       	ldi	r21, 0x00	; 0
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	c9 01       	movw	r24, r18
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	82 0f       	add	r24, r18
    113c:	93 1f       	adc	r25, r19
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	82 0f       	add	r24, r18
    1148:	93 1f       	adc	r25, r19
    114a:	fc 01       	movw	r30, r24
    114c:	e6 59       	subi	r30, 0x96	; 150
    114e:	fd 4f       	sbci	r31, 0xFD	; 253
    1150:	20 81       	ld	r18, Z
    1152:	31 81       	ldd	r19, Z+1	; 0x01
    1154:	ca 01       	movw	r24, r20
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	84 0f       	add	r24, r20
    115c:	95 1f       	adc	r25, r21
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	84 0f       	add	r24, r20
    1168:	95 1f       	adc	r25, r21
    116a:	fc 01       	movw	r30, r24
    116c:	e2 59       	subi	r30, 0x92	; 146
    116e:	fd 4f       	sbci	r31, 0xFD	; 253
    1170:	31 83       	std	Z+1, r19	; 0x01
    1172:	20 83       	st	Z, r18
void Schedular_Start(void)
{

	u8 i;

	for (i = 0; i < NUMBER_OF_TASKS; i++)
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	8f 5f       	subi	r24, 0xFF	; 255
    1178:	89 83       	std	Y+1, r24	; 0x01
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	85 30       	cpi	r24, 0x05	; 5
    117e:	08 f4       	brcc	.+2      	; 0x1182 <Schedular_Start+0x23c>
    1180:	e9 ce       	rjmp	.-558    	; 0xf54 <Schedular_Start+0xe>
					}

				}
		}
	}
}
    1182:	0f 90       	pop	r0
    1184:	cf 91       	pop	r28
    1186:	df 91       	pop	r29
    1188:	08 95       	ret

0000118a <OS_Start>:

void OS_Start(void)
{
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
	M_TIMER0_setDelayTimeMilliSec(20,Normal_Mode,CLK_1024);
    1192:	64 e1       	ldi	r22, 0x14	; 20
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	40 e0       	ldi	r20, 0x00	; 0
    119c:	25 e0       	ldi	r18, 0x05	; 5
    119e:	0e 94 cb 0c 	call	0x1996	; 0x1996 <M_TIMER0_setDelayTimeMilliSec>

}
    11a2:	cf 91       	pop	r28
    11a4:	df 91       	pop	r29
    11a6:	08 95       	ret

000011a8 <OS_Susbend>:



void OS_Susbend(u8 priority)
{
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	0f 92       	push	r0
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	89 83       	std	Y+1, r24	; 0x01
	if(priority<NUMBER_OF_TASKS)
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	85 30       	cpi	r24, 0x05	; 5
    11b8:	b0 f4       	brcc	.+44     	; 0x11e6 <OS_Susbend+0x3e>
	{
		Task_Arr[priority-1].Task_State=Susbend;
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	88 2f       	mov	r24, r24
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	9c 01       	movw	r18, r24
    11c2:	21 50       	subi	r18, 0x01	; 1
    11c4:	30 40       	sbci	r19, 0x00	; 0
    11c6:	c9 01       	movw	r24, r18
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	82 0f       	add	r24, r18
    11ce:	93 1f       	adc	r25, r19
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	82 0f       	add	r24, r18
    11da:	93 1f       	adc	r25, r19
    11dc:	fc 01       	movw	r30, r24
    11de:	e7 59       	subi	r30, 0x97	; 151
    11e0:	fd 4f       	sbci	r31, 0xFD	; 253
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	80 83       	st	Z, r24

	}
}
    11e6:	0f 90       	pop	r0
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	08 95       	ret

000011ee <OS_Resume>:

void OS_Resume(u8 priority)
{
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	0f 92       	push	r0
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    11f8:	89 83       	std	Y+1, r24	; 0x01
	if(priority<NUMBER_OF_TASKS)
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	85 30       	cpi	r24, 0x05	; 5
    11fe:	60 f5       	brcc	.+88     	; 0x1258 <OS_Resume+0x6a>
	{
		if(Task_Arr[priority-1].Task_State==Susbend)
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	88 2f       	mov	r24, r24
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	9c 01       	movw	r18, r24
    1208:	21 50       	subi	r18, 0x01	; 1
    120a:	30 40       	sbci	r19, 0x00	; 0
    120c:	c9 01       	movw	r24, r18
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	82 0f       	add	r24, r18
    1214:	93 1f       	adc	r25, r19
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	82 0f       	add	r24, r18
    1220:	93 1f       	adc	r25, r19
    1222:	fc 01       	movw	r30, r24
    1224:	e7 59       	subi	r30, 0x97	; 151
    1226:	fd 4f       	sbci	r31, 0xFD	; 253
    1228:	80 81       	ld	r24, Z
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	a9 f4       	brne	.+42     	; 0x1258 <OS_Resume+0x6a>
		{
			Task_Arr[priority-1].Task_State=Ready;
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	88 2f       	mov	r24, r24
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	9c 01       	movw	r18, r24
    1236:	21 50       	subi	r18, 0x01	; 1
    1238:	30 40       	sbci	r19, 0x00	; 0
    123a:	c9 01       	movw	r24, r18
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	82 0f       	add	r24, r18
    1242:	93 1f       	adc	r25, r19
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	82 0f       	add	r24, r18
    124e:	93 1f       	adc	r25, r19
    1250:	fc 01       	movw	r30, r24
    1252:	e7 59       	subi	r30, 0x97	; 151
    1254:	fd 4f       	sbci	r31, 0xFD	; 253
    1256:	10 82       	st	Z, r1
		}
	}

}
    1258:	0f 90       	pop	r0
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <OS_Delete>:

void OS_Delete(u8 priority)
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	0f 92       	push	r0
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	89 83       	std	Y+1, r24	; 0x01
	if(priority<NUMBER_OF_TASKS)
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	85 30       	cpi	r24, 0x05	; 5
    1270:	60 f5       	brcc	.+88     	; 0x12ca <OS_Delete+0x6a>
	{
		Task_Arr[priority-1].Task_Periodicty=0;
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	88 2f       	mov	r24, r24
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	9c 01       	movw	r18, r24
    127a:	21 50       	subi	r18, 0x01	; 1
    127c:	30 40       	sbci	r19, 0x00	; 0
    127e:	c9 01       	movw	r24, r18
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	82 0f       	add	r24, r18
    1286:	93 1f       	adc	r25, r19
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	82 0f       	add	r24, r18
    1292:	93 1f       	adc	r25, r19
    1294:	fc 01       	movw	r30, r24
    1296:	e6 59       	subi	r30, 0x96	; 150
    1298:	fd 4f       	sbci	r31, 0xFD	; 253
    129a:	11 82       	std	Z+1, r1	; 0x01
    129c:	10 82       	st	Z, r1
		Task_Arr[priority-1].Task_Handler=NULL;
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	88 2f       	mov	r24, r24
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	9c 01       	movw	r18, r24
    12a6:	21 50       	subi	r18, 0x01	; 1
    12a8:	30 40       	sbci	r19, 0x00	; 0
    12aa:	c9 01       	movw	r24, r18
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	82 0f       	add	r24, r18
    12b2:	93 1f       	adc	r25, r19
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	82 0f       	add	r24, r18
    12be:	93 1f       	adc	r25, r19
    12c0:	fc 01       	movw	r30, r24
    12c2:	ec 58       	subi	r30, 0x8C	; 140
    12c4:	fd 4f       	sbci	r31, 0xFD	; 253
    12c6:	11 82       	std	Z+1, r1	; 0x01
    12c8:	10 82       	st	Z, r1
	}

}
    12ca:	0f 90       	pop	r0
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <OS_Delay>:
void OS_Delay(u8 Priority,u32 Delay_Ticks)
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <OS_Delay+0x6>
    12d8:	00 d0       	rcall	.+0      	; 0x12da <OS_Delay+0x8>
    12da:	0f 92       	push	r0
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	89 83       	std	Y+1, r24	; 0x01
    12e2:	4a 83       	std	Y+2, r20	; 0x02
    12e4:	5b 83       	std	Y+3, r21	; 0x03
    12e6:	6c 83       	std	Y+4, r22	; 0x04
    12e8:	7d 83       	std	Y+5, r23	; 0x05
	Task_Arr[Priority-1].Delay_Time=Delay_Ticks;
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	88 2f       	mov	r24, r24
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	9c 01       	movw	r18, r24
    12f2:	21 50       	subi	r18, 0x01	; 1
    12f4:	30 40       	sbci	r19, 0x00	; 0
    12f6:	c9 01       	movw	r24, r18
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	82 0f       	add	r24, r18
    12fe:	93 1f       	adc	r25, r19
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	82 0f       	add	r24, r18
    130a:	93 1f       	adc	r25, r19
    130c:	fc 01       	movw	r30, r24
    130e:	e0 59       	subi	r30, 0x90	; 144
    1310:	fd 4f       	sbci	r31, 0xFD	; 253
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	9b 81       	ldd	r25, Y+3	; 0x03
    1316:	ac 81       	ldd	r26, Y+4	; 0x04
    1318:	bd 81       	ldd	r27, Y+5	; 0x05
    131a:	80 83       	st	Z, r24
    131c:	91 83       	std	Z+1, r25	; 0x01
    131e:	a2 83       	std	Z+2, r26	; 0x02
    1320:	b3 83       	std	Z+3, r27	; 0x03
	Task_Arr[Priority-1].Task_State=Susbend;
    1322:	89 81       	ldd	r24, Y+1	; 0x01
    1324:	88 2f       	mov	r24, r24
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	9c 01       	movw	r18, r24
    132a:	21 50       	subi	r18, 0x01	; 1
    132c:	30 40       	sbci	r19, 0x00	; 0
    132e:	c9 01       	movw	r24, r18
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	82 0f       	add	r24, r18
    1336:	93 1f       	adc	r25, r19
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	82 0f       	add	r24, r18
    1342:	93 1f       	adc	r25, r19
    1344:	fc 01       	movw	r30, r24
    1346:	e7 59       	subi	r30, 0x97	; 151
    1348:	fd 4f       	sbci	r31, 0xFD	; 253
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	80 83       	st	Z, r24

}
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	cf 91       	pop	r28
    135a:	df 91       	pop	r29
    135c:	08 95       	ret

0000135e <M_TIMER1_void_Init>:

void (*ICU_CallBackFun)(void) = NULL ;


void M_TIMER1_void_Init(TIMER_1_MD Local_Mode,TIMER_1_WG Local_WG)
{
    135e:	df 93       	push	r29
    1360:	cf 93       	push	r28
    1362:	00 d0       	rcall	.+0      	; 0x1364 <M_TIMER1_void_Init+0x6>
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
    1368:	89 83       	std	Y+1, r24	; 0x01
    136a:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_Mode == TIMER_1_NM)
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	88 23       	and	r24, r24
    1370:	a9 f5       	brne	.+106    	; 0x13dc <M_TIMER1_void_Init+0x7e>
	{
		/*Select normal mode*/
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1372:	af e4       	ldi	r26, 0x4F	; 79
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	ef e4       	ldi	r30, 0x4F	; 79
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	8e 7f       	andi	r24, 0xFE	; 254
    137e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1380:	af e4       	ldi	r26, 0x4F	; 79
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	ef e4       	ldi	r30, 0x4F	; 79
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	8d 7f       	andi	r24, 0xFD	; 253
    138c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    138e:	ae e4       	ldi	r26, 0x4E	; 78
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	ee e4       	ldi	r30, 0x4E	; 78
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	91 81       	ldd	r25, Z+1	; 0x01
    139a:	87 7f       	andi	r24, 0xF7	; 247
    139c:	11 96       	adiw	r26, 0x01	; 1
    139e:	9c 93       	st	X, r25
    13a0:	8e 93       	st	-X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    13a2:	ae e4       	ldi	r26, 0x4E	; 78
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	ee e4       	ldi	r30, 0x4E	; 78
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	91 81       	ldd	r25, Z+1	; 0x01
    13ae:	8f 7e       	andi	r24, 0xEF	; 239
    13b0:	11 96       	adiw	r26, 0x01	; 1
    13b2:	9c 93       	st	X, r25
    13b4:	8e 93       	st	-X, r24
		if(Local_WG == TIMER_1_NWG)
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	88 23       	and	r24, r24
    13ba:	09 f0       	breq	.+2      	; 0x13be <M_TIMER1_void_Init+0x60>
    13bc:	42 c0       	rjmp	.+132    	; 0x1442 <M_TIMER1_void_Init+0xe4>
		{
			/*Select compare output mode*/
			CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    13be:	af e4       	ldi	r26, 0x4F	; 79
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	ef e4       	ldi	r30, 0x4F	; 79
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	8f 7b       	andi	r24, 0xBF	; 191
    13ca:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    13cc:	af e4       	ldi	r26, 0x4F	; 79
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	ef e4       	ldi	r30, 0x4F	; 79
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	8f 77       	andi	r24, 0x7F	; 127
    13d8:	8c 93       	st	X, r24
    13da:	33 c0       	rjmp	.+102    	; 0x1442 <M_TIMER1_void_Init+0xe4>
		}
	}
	else if(Local_Mode== TIMER_1_FASTPWM)
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	81 f5       	brne	.+96     	; 0x1442 <M_TIMER1_void_Init+0xe4>
	{
		/*Select Fast-PWM Non-inverting mode*/
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    13e2:	af e4       	ldi	r26, 0x4F	; 79
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	ef e4       	ldi	r30, 0x4F	; 79
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	80 68       	ori	r24, 0x80	; 128
    13ee:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    13f0:	af e4       	ldi	r26, 0x4F	; 79
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	ef e4       	ldi	r30, 0x4F	; 79
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	8f 7b       	andi	r24, 0xBF	; 191
    13fc:	8c 93       	st	X, r24
		/*Setting waveform for fast PWM*/
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    13fe:	af e4       	ldi	r26, 0x4F	; 79
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	ef e4       	ldi	r30, 0x4F	; 79
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	8e 7f       	andi	r24, 0xFE	; 254
    140a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    140c:	af e4       	ldi	r26, 0x4F	; 79
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	ef e4       	ldi	r30, 0x4F	; 79
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	82 60       	ori	r24, 0x02	; 2
    1418:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    141a:	ae e4       	ldi	r26, 0x4E	; 78
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	ee e4       	ldi	r30, 0x4E	; 78
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	91 81       	ldd	r25, Z+1	; 0x01
    1426:	88 60       	ori	r24, 0x08	; 8
    1428:	11 96       	adiw	r26, 0x01	; 1
    142a:	9c 93       	st	X, r25
    142c:	8e 93       	st	-X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    142e:	ae e4       	ldi	r26, 0x4E	; 78
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	ee e4       	ldi	r30, 0x4E	; 78
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	91 81       	ldd	r25, Z+1	; 0x01
    143a:	80 61       	ori	r24, 0x10	; 16
    143c:	11 96       	adiw	r26, 0x01	; 1
    143e:	9c 93       	st	X, r25
    1440:	8e 93       	st	-X, r24
	}
}
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	08 95       	ret

0000144c <M_TIMER1_void_Start>:

void M_TIMER1_void_Start(TIMER1_PRESCALER Local_Prescaller)
{
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	0f 92       	push	r0
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	89 83       	std	Y+1, r24	; 0x01
	if(Local_Prescaller== TIMER1_CLK_8)
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	82 30       	cpi	r24, 0x02	; 2
    145c:	f9 f4       	brne	.+62     	; 0x149c <M_TIMER1_void_Start+0x50>
	{
		CLR_BIT(TCCR1B,TCCR1B_CS10);
    145e:	ae e4       	ldi	r26, 0x4E	; 78
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	ee e4       	ldi	r30, 0x4E	; 78
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	91 81       	ldd	r25, Z+1	; 0x01
    146a:	8e 7f       	andi	r24, 0xFE	; 254
    146c:	11 96       	adiw	r26, 0x01	; 1
    146e:	9c 93       	st	X, r25
    1470:	8e 93       	st	-X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    1472:	ae e4       	ldi	r26, 0x4E	; 78
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	ee e4       	ldi	r30, 0x4E	; 78
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	91 81       	ldd	r25, Z+1	; 0x01
    147e:	82 60       	ori	r24, 0x02	; 2
    1480:	11 96       	adiw	r26, 0x01	; 1
    1482:	9c 93       	st	X, r25
    1484:	8e 93       	st	-X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);
    1486:	ae e4       	ldi	r26, 0x4E	; 78
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	ee e4       	ldi	r30, 0x4E	; 78
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	91 81       	ldd	r25, Z+1	; 0x01
    1492:	8b 7f       	andi	r24, 0xFB	; 251
    1494:	11 96       	adiw	r26, 0x01	; 1
    1496:	9c 93       	st	X, r25
    1498:	8e 93       	st	-X, r24
    149a:	21 c0       	rjmp	.+66     	; 0x14de <M_TIMER1_void_Start+0x92>
	}
	else if(Local_Prescaller==TIMER1_NO_CLK_SOURCE)
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	88 23       	and	r24, r24
    14a0:	f1 f4       	brne	.+60     	; 0x14de <M_TIMER1_void_Start+0x92>
	{
		CLR_BIT(TCCR1B,TCCR1B_CS10);
    14a2:	ae e4       	ldi	r26, 0x4E	; 78
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	ee e4       	ldi	r30, 0x4E	; 78
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	91 81       	ldd	r25, Z+1	; 0x01
    14ae:	8e 7f       	andi	r24, 0xFE	; 254
    14b0:	11 96       	adiw	r26, 0x01	; 1
    14b2:	9c 93       	st	X, r25
    14b4:	8e 93       	st	-X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS11);
    14b6:	ae e4       	ldi	r26, 0x4E	; 78
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	ee e4       	ldi	r30, 0x4E	; 78
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	91 81       	ldd	r25, Z+1	; 0x01
    14c2:	8d 7f       	andi	r24, 0xFD	; 253
    14c4:	11 96       	adiw	r26, 0x01	; 1
    14c6:	9c 93       	st	X, r25
    14c8:	8e 93       	st	-X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);
    14ca:	ae e4       	ldi	r26, 0x4E	; 78
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	ee e4       	ldi	r30, 0x4E	; 78
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	91 81       	ldd	r25, Z+1	; 0x01
    14d6:	8b 7f       	andi	r24, 0xFB	; 251
    14d8:	11 96       	adiw	r26, 0x01	; 1
    14da:	9c 93       	st	X, r25
    14dc:	8e 93       	st	-X, r24
	}
}
    14de:	0f 90       	pop	r0
    14e0:	cf 91       	pop	r28
    14e2:	df 91       	pop	r29
    14e4:	08 95       	ret

000014e6 <TIMER1_voidSetICR>:


void TIMER1_voidSetICR(u16 Copy_u16TopValue)
{
    14e6:	df 93       	push	r29
    14e8:	cf 93       	push	r28
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <TIMER1_voidSetICR+0x6>
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	9a 83       	std	Y+2, r25	; 0x02
    14f2:	89 83       	std	Y+1, r24	; 0x01
	ICR1= Copy_u16TopValue;
    14f4:	e6 e4       	ldi	r30, 0x46	; 70
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	9a 81       	ldd	r25, Y+2	; 0x02
    14fc:	91 83       	std	Z+1, r25	; 0x01
    14fe:	80 83       	st	Z, r24

}
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <TIMER1_voidSetCompareMatch>:

void TIMER1_voidSetCompareMatch(u16 Copy_u16Comparematch)
{
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	00 d0       	rcall	.+0      	; 0x1510 <TIMER1_voidSetCompareMatch+0x6>
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	9a 83       	std	Y+2, r25	; 0x02
    1516:	89 83       	std	Y+1, r24	; 0x01
	OCR1A= Copy_u16Comparematch;
    1518:	ea e4       	ldi	r30, 0x4A	; 74
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	9a 81       	ldd	r25, Y+2	; 0x02
    1520:	91 83       	std	Z+1, r25	; 0x01
    1522:	80 83       	st	Z, r24

}
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	08 95       	ret

0000152e <M_TIMER1_void_Stop>:
void M_TIMER1_void_Stop(void)
{
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    1536:	ae e4       	ldi	r26, 0x4E	; 78
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	ee e4       	ldi	r30, 0x4E	; 78
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	91 81       	ldd	r25, Z+1	; 0x01
    1542:	8e 7f       	andi	r24, 0xFE	; 254
    1544:	11 96       	adiw	r26, 0x01	; 1
    1546:	9c 93       	st	X, r25
    1548:	8e 93       	st	-X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS11);
    154a:	ae e4       	ldi	r26, 0x4E	; 78
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	ee e4       	ldi	r30, 0x4E	; 78
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	91 81       	ldd	r25, Z+1	; 0x01
    1556:	8d 7f       	andi	r24, 0xFD	; 253
    1558:	11 96       	adiw	r26, 0x01	; 1
    155a:	9c 93       	st	X, r25
    155c:	8e 93       	st	-X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    155e:	ae e4       	ldi	r26, 0x4E	; 78
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	ee e4       	ldi	r30, 0x4E	; 78
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	91 81       	ldd	r25, Z+1	; 0x01
    156a:	8b 7f       	andi	r24, 0xFB	; 251
    156c:	11 96       	adiw	r26, 0x01	; 1
    156e:	9c 93       	st	X, r25
    1570:	8e 93       	st	-X, r24

}
    1572:	cf 91       	pop	r28
    1574:	df 91       	pop	r29
    1576:	08 95       	ret

00001578 <M_TIMER1_void_ICU_Enable>:

void M_TIMER1_void_ICU_Enable(void)
{
    1578:	df 93       	push	r29
    157a:	cf 93       	push	r28
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
	/*Enable ICU Interrupt*/
	SET_BIT(TIMSK,TIMSK_TICIE1);
    1580:	a9 e5       	ldi	r26, 0x59	; 89
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e9 e5       	ldi	r30, 0x59	; 89
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	80 62       	ori	r24, 0x20	; 32
    158c:	8c 93       	st	X, r24
	/*Set trigger to rising edge*/
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    158e:	ae e4       	ldi	r26, 0x4E	; 78
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	ee e4       	ldi	r30, 0x4E	; 78
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	91 81       	ldd	r25, Z+1	; 0x01
    159a:	80 64       	ori	r24, 0x40	; 64
    159c:	11 96       	adiw	r26, 0x01	; 1
    159e:	9c 93       	st	X, r25
    15a0:	8e 93       	st	-X, r24

}
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <M_TIMER1_void_ICU_TriggerSelect>:


void M_TIMER1_void_ICU_TriggerSelect(ICU_Trigger Local_Trigger)
{
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	0f 92       	push	r0
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	89 83       	std	Y+1, r24	; 0x01
	if(Local_Trigger == ICU_FALLING)
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	88 23       	and	r24, r24
    15b8:	59 f4       	brne	.+22     	; 0x15d0 <M_TIMER1_void_ICU_TriggerSelect+0x28>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    15ba:	ae e4       	ldi	r26, 0x4E	; 78
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	ee e4       	ldi	r30, 0x4E	; 78
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	91 81       	ldd	r25, Z+1	; 0x01
    15c6:	8f 7b       	andi	r24, 0xBF	; 191
    15c8:	11 96       	adiw	r26, 0x01	; 1
    15ca:	9c 93       	st	X, r25
    15cc:	8e 93       	st	-X, r24
    15ce:	0d c0       	rjmp	.+26     	; 0x15ea <M_TIMER1_void_ICU_TriggerSelect+0x42>

	}
	else if(Local_Trigger == ICU_RISING)
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	81 30       	cpi	r24, 0x01	; 1
    15d4:	51 f4       	brne	.+20     	; 0x15ea <M_TIMER1_void_ICU_TriggerSelect+0x42>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    15d6:	ae e4       	ldi	r26, 0x4E	; 78
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	ee e4       	ldi	r30, 0x4E	; 78
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	91 81       	ldd	r25, Z+1	; 0x01
    15e2:	80 64       	ori	r24, 0x40	; 64
    15e4:	11 96       	adiw	r26, 0x01	; 1
    15e6:	9c 93       	st	X, r25
    15e8:	8e 93       	st	-X, r24

	}
}
    15ea:	0f 90       	pop	r0
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <M_TIMER1_void_ICU_INTERRUPTDIS>:

void M_TIMER1_void_ICU_INTERRUPTDIS(void)
{
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
	/*Enable ICU Interrupt*/
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    15fa:	a9 e5       	ldi	r26, 0x59	; 89
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e9 e5       	ldi	r30, 0x59	; 89
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	8f 7d       	andi	r24, 0xDF	; 223
    1606:	8c 93       	st	X, r24
}
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <M_TIMER1_void_ICU_Reading>:

u16 M_TIMER1_void_ICU_Reading(void)
{
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1616:	e6 e4       	ldi	r30, 0x46	; 70
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	91 81       	ldd	r25, Z+1	; 0x01
}
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	08 95       	ret

00001624 <M_TIMER1_void_ICU_SetCallBack>:

void M_TIMER1_void_ICU_SetCallBack(void)
{
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62

}
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	08 95       	ret

00001632 <M_TIMER1_u8_Reset_flag>:

u8 M_TIMER1_u8_Reset_flag(TIMER1_INTERRUPT_TYPE Local_type)
{
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	0f 92       	push	r0
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	89 83       	std	Y+1, r24	; 0x01
	if(Local_type == TIMER1_ICU_Mode)
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	88 23       	and	r24, r24
    1642:	41 f4       	brne	.+16     	; 0x1654 <M_TIMER1_u8_Reset_flag+0x22>
	{
		SET_BIT(TIFR,TIFR_ICF1);
    1644:	a8 e5       	ldi	r26, 0x58	; 88
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e8 e5       	ldi	r30, 0x58	; 88
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	80 62       	ori	r24, 0x20	; 32
    1650:	8c 93       	st	X, r24
    1652:	0a c0       	rjmp	.+20     	; 0x1668 <M_TIMER1_u8_Reset_flag+0x36>
	}
	else if(Local_type == TIMER1_OVF)
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	83 30       	cpi	r24, 0x03	; 3
    1658:	39 f4       	brne	.+14     	; 0x1668 <M_TIMER1_u8_Reset_flag+0x36>
	{
		SET_BIT(TIFR,TIFR_TOV1);
    165a:	a8 e5       	ldi	r26, 0x58	; 88
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	e8 e5       	ldi	r30, 0x58	; 88
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	84 60       	ori	r24, 0x04	; 4
    1666:	8c 93       	st	X, r24
	}
	return 0;
    1668:	80 e0       	ldi	r24, 0x00	; 0
}
    166a:	0f 90       	pop	r0
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <M_void_Timer_Init>:
static u32 No_of_over_flows=0;
static u8 No_of_Remaning=0;
static u32 Global_No_of_overflows=0;

void M_void_Timer_Init(Timer_Mode T_MODE, Wave_Form_Generation WG_M)
{
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	2c 97       	sbiw	r28, 0x0c	; 12
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	de bf       	out	0x3e, r29	; 62
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	cd bf       	out	0x3d, r28	; 61
    1686:	89 83       	std	Y+1, r24	; 0x01
    1688:	6a 83       	std	Y+2, r22	; 0x02
	switch(T_MODE)
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	3c 87       	std	Y+12, r19	; 0x0c
    1692:	2b 87       	std	Y+11, r18	; 0x0b
    1694:	8b 85       	ldd	r24, Y+11	; 0x0b
    1696:	9c 85       	ldd	r25, Y+12	; 0x0c
    1698:	81 30       	cpi	r24, 0x01	; 1
    169a:	91 05       	cpc	r25, r1
    169c:	09 f4       	brne	.+2      	; 0x16a0 <M_void_Timer_Init+0x2e>
    169e:	66 c0       	rjmp	.+204    	; 0x176c <M_void_Timer_Init+0xfa>
    16a0:	2b 85       	ldd	r18, Y+11	; 0x0b
    16a2:	3c 85       	ldd	r19, Y+12	; 0x0c
    16a4:	22 30       	cpi	r18, 0x02	; 2
    16a6:	31 05       	cpc	r19, r1
    16a8:	2c f4       	brge	.+10     	; 0x16b4 <M_void_Timer_Init+0x42>
    16aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    16ac:	9c 85       	ldd	r25, Y+12	; 0x0c
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	71 f0       	breq	.+28     	; 0x16ce <M_void_Timer_Init+0x5c>
    16b2:	23 c1       	rjmp	.+582    	; 0x18fa <M_void_Timer_Init+0x288>
    16b4:	2b 85       	ldd	r18, Y+11	; 0x0b
    16b6:	3c 85       	ldd	r19, Y+12	; 0x0c
    16b8:	22 30       	cpi	r18, 0x02	; 2
    16ba:	31 05       	cpc	r19, r1
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <M_void_Timer_Init+0x4e>
    16be:	a6 c0       	rjmp	.+332    	; 0x180c <M_void_Timer_Init+0x19a>
    16c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    16c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    16c4:	83 30       	cpi	r24, 0x03	; 3
    16c6:	91 05       	cpc	r25, r1
    16c8:	09 f4       	brne	.+2      	; 0x16cc <M_void_Timer_Init+0x5a>
    16ca:	dc c0       	rjmp	.+440    	; 0x1884 <M_void_Timer_Init+0x212>
    16cc:	16 c1       	rjmp	.+556    	; 0x18fa <M_void_Timer_Init+0x288>
	{
	case Normal_Mode:
		TCCR0 &= CLEAR_TIMER_MODE_REG;
    16ce:	a3 e5       	ldi	r26, 0x53	; 83
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	e3 e5       	ldi	r30, 0x53	; 83
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	87 7d       	andi	r24, 0xD7	; 215
    16da:	8c 93       	st	X, r24
		TCCR0 |=SET_NORMAL_MODE_MASK;
    16dc:	a3 e5       	ldi	r26, 0x53	; 83
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e3 e5       	ldi	r30, 0x53	; 83
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	8c 93       	st	X, r24
		switch(WG_M)
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	3a 87       	std	Y+10, r19	; 0x0a
    16f0:	29 87       	std	Y+9, r18	; 0x09
    16f2:	89 85       	ldd	r24, Y+9	; 0x09
    16f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f6:	82 30       	cpi	r24, 0x02	; 2
    16f8:	91 05       	cpc	r25, r1
    16fa:	d1 f0       	breq	.+52     	; 0x1730 <M_void_Timer_Init+0xbe>
    16fc:	29 85       	ldd	r18, Y+9	; 0x09
    16fe:	3a 85       	ldd	r19, Y+10	; 0x0a
    1700:	23 30       	cpi	r18, 0x03	; 3
    1702:	31 05       	cpc	r19, r1
    1704:	21 f1       	breq	.+72     	; 0x174e <M_void_Timer_Init+0xdc>
    1706:	89 85       	ldd	r24, Y+9	; 0x09
    1708:	9a 85       	ldd	r25, Y+10	; 0x0a
    170a:	81 30       	cpi	r24, 0x01	; 1
    170c:	91 05       	cpc	r25, r1
    170e:	09 f0       	breq	.+2      	; 0x1712 <M_void_Timer_Init+0xa0>
    1710:	f4 c0       	rjmp	.+488    	; 0x18fa <M_void_Timer_Init+0x288>
		{
		case Toggle_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    1712:	a3 e5       	ldi	r26, 0x53	; 83
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e3 e5       	ldi	r30, 0x53	; 83
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	8f 7c       	andi	r24, 0xCF	; 207
    171e:	8c 93       	st	X, r24
			TCCR0 |= TOGGLE_PORT_MASK;
    1720:	a3 e5       	ldi	r26, 0x53	; 83
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e3 e5       	ldi	r30, 0x53	; 83
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	80 61       	ori	r24, 0x10	; 16
    172c:	8c 93       	st	X, r24
    172e:	e5 c0       	rjmp	.+458    	; 0x18fa <M_void_Timer_Init+0x288>
			break;
		case Clear_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    1730:	a3 e5       	ldi	r26, 0x53	; 83
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e3 e5       	ldi	r30, 0x53	; 83
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	8f 7c       	andi	r24, 0xCF	; 207
    173c:	8c 93       	st	X, r24
			TCCR0 |= CLEAR_PORT_MASK;
    173e:	a3 e5       	ldi	r26, 0x53	; 83
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e3 e5       	ldi	r30, 0x53	; 83
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	80 62       	ori	r24, 0x20	; 32
    174a:	8c 93       	st	X, r24
    174c:	d6 c0       	rjmp	.+428    	; 0x18fa <M_void_Timer_Init+0x288>
			break;
		case Set_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    174e:	a3 e5       	ldi	r26, 0x53	; 83
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e3 e5       	ldi	r30, 0x53	; 83
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	8f 7c       	andi	r24, 0xCF	; 207
    175a:	8c 93       	st	X, r24
			TCCR0 |= SET_PORT_MASK;
    175c:	a3 e5       	ldi	r26, 0x53	; 83
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e3 e5       	ldi	r30, 0x53	; 83
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	80 63       	ori	r24, 0x30	; 48
    1768:	8c 93       	st	X, r24
    176a:	c7 c0       	rjmp	.+398    	; 0x18fa <M_void_Timer_Init+0x288>
		default:
			break;
		}
		break;
	case CTC_Mode:
		TCCR0 &= CLEAR_TIMER_MODE_REG;
    176c:	a3 e5       	ldi	r26, 0x53	; 83
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e3 e5       	ldi	r30, 0x53	; 83
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	87 7d       	andi	r24, 0xD7	; 215
    1778:	8c 93       	st	X, r24
		TCCR0 |=SET_CTC_MODE_MASK;
    177a:	a3 e5       	ldi	r26, 0x53	; 83
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e3 e5       	ldi	r30, 0x53	; 83
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	88 60       	ori	r24, 0x08	; 8
    1786:	8c 93       	st	X, r24
		switch(WG_M)
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	38 87       	std	Y+8, r19	; 0x08
    1790:	2f 83       	std	Y+7, r18	; 0x07
    1792:	8f 81       	ldd	r24, Y+7	; 0x07
    1794:	98 85       	ldd	r25, Y+8	; 0x08
    1796:	82 30       	cpi	r24, 0x02	; 2
    1798:	91 05       	cpc	r25, r1
    179a:	d1 f0       	breq	.+52     	; 0x17d0 <M_void_Timer_Init+0x15e>
    179c:	2f 81       	ldd	r18, Y+7	; 0x07
    179e:	38 85       	ldd	r19, Y+8	; 0x08
    17a0:	23 30       	cpi	r18, 0x03	; 3
    17a2:	31 05       	cpc	r19, r1
    17a4:	21 f1       	breq	.+72     	; 0x17ee <M_void_Timer_Init+0x17c>
    17a6:	8f 81       	ldd	r24, Y+7	; 0x07
    17a8:	98 85       	ldd	r25, Y+8	; 0x08
    17aa:	81 30       	cpi	r24, 0x01	; 1
    17ac:	91 05       	cpc	r25, r1
    17ae:	09 f0       	breq	.+2      	; 0x17b2 <M_void_Timer_Init+0x140>
    17b0:	a4 c0       	rjmp	.+328    	; 0x18fa <M_void_Timer_Init+0x288>
		{
		case Toggle_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    17b2:	a3 e5       	ldi	r26, 0x53	; 83
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e3 e5       	ldi	r30, 0x53	; 83
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	8f 7c       	andi	r24, 0xCF	; 207
    17be:	8c 93       	st	X, r24
			TCCR0 |= TOGGLE_PORT_MASK;
    17c0:	a3 e5       	ldi	r26, 0x53	; 83
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e3 e5       	ldi	r30, 0x53	; 83
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	80 61       	ori	r24, 0x10	; 16
    17cc:	8c 93       	st	X, r24
    17ce:	95 c0       	rjmp	.+298    	; 0x18fa <M_void_Timer_Init+0x288>
			break;
		case Clear_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    17d0:	a3 e5       	ldi	r26, 0x53	; 83
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e3 e5       	ldi	r30, 0x53	; 83
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	8f 7c       	andi	r24, 0xCF	; 207
    17dc:	8c 93       	st	X, r24
			TCCR0 |= CLEAR_PORT_MASK;
    17de:	a3 e5       	ldi	r26, 0x53	; 83
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e3 e5       	ldi	r30, 0x53	; 83
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	80 62       	ori	r24, 0x20	; 32
    17ea:	8c 93       	st	X, r24
    17ec:	86 c0       	rjmp	.+268    	; 0x18fa <M_void_Timer_Init+0x288>
			break;
		case Set_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    17ee:	a3 e5       	ldi	r26, 0x53	; 83
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e3 e5       	ldi	r30, 0x53	; 83
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	8f 7c       	andi	r24, 0xCF	; 207
    17fa:	8c 93       	st	X, r24
			TCCR0 |= SET_PORT_MASK;
    17fc:	a3 e5       	ldi	r26, 0x53	; 83
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e3 e5       	ldi	r30, 0x53	; 83
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	80 63       	ori	r24, 0x30	; 48
    1808:	8c 93       	st	X, r24
    180a:	77 c0       	rjmp	.+238    	; 0x18fa <M_void_Timer_Init+0x288>
		default:
			break;
		}
		break;
	case Fast_PWM:
		TCCR0 &= CLEAR_TIMER_MODE_REG;
    180c:	a3 e5       	ldi	r26, 0x53	; 83
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	e3 e5       	ldi	r30, 0x53	; 83
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	87 7d       	andi	r24, 0xD7	; 215
    1818:	8c 93       	st	X, r24
		TCCR0 |=SET_FAST_MODE_MASK;
    181a:	a3 e5       	ldi	r26, 0x53	; 83
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	e3 e5       	ldi	r30, 0x53	; 83
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	88 64       	ori	r24, 0x48	; 72
    1826:	8c 93       	st	X, r24
		switch(WG_M)
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	3e 83       	std	Y+6, r19	; 0x06
    1830:	2d 83       	std	Y+5, r18	; 0x05
    1832:	8d 81       	ldd	r24, Y+5	; 0x05
    1834:	9e 81       	ldd	r25, Y+6	; 0x06
    1836:	84 30       	cpi	r24, 0x04	; 4
    1838:	91 05       	cpc	r25, r1
    183a:	31 f0       	breq	.+12     	; 0x1848 <M_void_Timer_Init+0x1d6>
    183c:	2d 81       	ldd	r18, Y+5	; 0x05
    183e:	3e 81       	ldd	r19, Y+6	; 0x06
    1840:	25 30       	cpi	r18, 0x05	; 5
    1842:	31 05       	cpc	r19, r1
    1844:	81 f0       	breq	.+32     	; 0x1866 <M_void_Timer_Init+0x1f4>
    1846:	59 c0       	rjmp	.+178    	; 0x18fa <M_void_Timer_Init+0x288>
		{
		case Inverting_Mode:
			TCCR0 &= CLEAR_WAVEG_MASK;
    1848:	a3 e5       	ldi	r26, 0x53	; 83
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e3 e5       	ldi	r30, 0x53	; 83
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	8f 7c       	andi	r24, 0xCF	; 207
    1854:	8c 93       	st	X, r24
			TCCR0 |= INVERTING_FAST_MASK;
    1856:	a3 e5       	ldi	r26, 0x53	; 83
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e3 e5       	ldi	r30, 0x53	; 83
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	80 63       	ori	r24, 0x30	; 48
    1862:	8c 93       	st	X, r24
    1864:	4a c0       	rjmp	.+148    	; 0x18fa <M_void_Timer_Init+0x288>
			break;
		case Non_Invering_Mode:
			TCCR0 &= CLEAR_WAVEG_MASK;
    1866:	a3 e5       	ldi	r26, 0x53	; 83
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e3 e5       	ldi	r30, 0x53	; 83
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	8f 7c       	andi	r24, 0xCF	; 207
    1872:	8c 93       	st	X, r24
			TCCR0 |= NON_INVERTING_FAST_MASK;
    1874:	a3 e5       	ldi	r26, 0x53	; 83
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	e3 e5       	ldi	r30, 0x53	; 83
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	80 62       	ori	r24, 0x20	; 32
    1880:	8c 93       	st	X, r24
    1882:	3b c0       	rjmp	.+118    	; 0x18fa <M_void_Timer_Init+0x288>
		default:
			break;
		}
		break;
	case Phase_Correct_PWM:
		TCCR0 &= CLEAR_TIMER_MODE_REG;
    1884:	a3 e5       	ldi	r26, 0x53	; 83
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e3 e5       	ldi	r30, 0x53	; 83
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	87 7d       	andi	r24, 0xD7	; 215
    1890:	8c 93       	st	X, r24
		TCCR0 |=SET_PWM_PHASE_MODE_MASK;
    1892:	a3 e5       	ldi	r26, 0x53	; 83
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e3 e5       	ldi	r30, 0x53	; 83
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	80 64       	ori	r24, 0x40	; 64
    189e:	8c 93       	st	X, r24
		switch(WG_M)
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	3c 83       	std	Y+4, r19	; 0x04
    18a8:	2b 83       	std	Y+3, r18	; 0x03
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	9c 81       	ldd	r25, Y+4	; 0x04
    18ae:	84 30       	cpi	r24, 0x04	; 4
    18b0:	91 05       	cpc	r25, r1
    18b2:	31 f0       	breq	.+12     	; 0x18c0 <M_void_Timer_Init+0x24e>
    18b4:	2b 81       	ldd	r18, Y+3	; 0x03
    18b6:	3c 81       	ldd	r19, Y+4	; 0x04
    18b8:	25 30       	cpi	r18, 0x05	; 5
    18ba:	31 05       	cpc	r19, r1
    18bc:	81 f0       	breq	.+32     	; 0x18de <M_void_Timer_Init+0x26c>
    18be:	1d c0       	rjmp	.+58     	; 0x18fa <M_void_Timer_Init+0x288>
		{
		case Inverting_Mode:
			TCCR0 &= CLEAR_WAVEG_MASK;
    18c0:	a3 e5       	ldi	r26, 0x53	; 83
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	e3 e5       	ldi	r30, 0x53	; 83
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	8f 7c       	andi	r24, 0xCF	; 207
    18cc:	8c 93       	st	X, r24
			TCCR0 |= INVERTING_PHASE_MASK;
    18ce:	a3 e5       	ldi	r26, 0x53	; 83
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	e3 e5       	ldi	r30, 0x53	; 83
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	80 63       	ori	r24, 0x30	; 48
    18da:	8c 93       	st	X, r24
    18dc:	0e c0       	rjmp	.+28     	; 0x18fa <M_void_Timer_Init+0x288>
			break;
		case Non_Invering_Mode:
			TCCR0 &= CLEAR_WAVEG_MASK;
    18de:	a3 e5       	ldi	r26, 0x53	; 83
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e3 e5       	ldi	r30, 0x53	; 83
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	8f 7c       	andi	r24, 0xCF	; 207
    18ea:	8c 93       	st	X, r24
			TCCR0 |= NON_INVERTING_PHASE_MASK;
    18ec:	a3 e5       	ldi	r26, 0x53	; 83
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e3 e5       	ldi	r30, 0x53	; 83
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	80 62       	ori	r24, 0x20	; 32
    18f8:	8c 93       	st	X, r24
		default:
			break;
		}
		break;
	}
}
    18fa:	2c 96       	adiw	r28, 0x0c	; 12
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	f8 94       	cli
    1900:	de bf       	out	0x3e, r29	; 62
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	cd bf       	out	0x3d, r28	; 61
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	08 95       	ret

0000190c <M_void_Timer_start>:
void M_void_Timer_start(PRE_SCALLER Pre_scaller_select)
{
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	0f 92       	push	r0
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
    1916:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= CLEAR_PRESCALLER_MASK;
    1918:	a3 e5       	ldi	r26, 0x53	; 83
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e3 e5       	ldi	r30, 0x53	; 83
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	88 7f       	andi	r24, 0xF8	; 248
    1924:	8c 93       	st	X, r24
	TCCR0 |= Pre_scaller_select;
    1926:	a3 e5       	ldi	r26, 0x53	; 83
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	e3 e5       	ldi	r30, 0x53	; 83
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	90 81       	ld	r25, Z
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	89 2b       	or	r24, r25
    1934:	8c 93       	st	X, r24

}
    1936:	0f 90       	pop	r0
    1938:	cf 91       	pop	r28
    193a:	df 91       	pop	r29
    193c:	08 95       	ret

0000193e <M_void_Timer_stop>:
void M_void_Timer_stop(void)
{
    193e:	df 93       	push	r29
    1940:	cf 93       	push	r28
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= CLEAR_PRESCALLER_MASK;
    1946:	a3 e5       	ldi	r26, 0x53	; 83
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	e3 e5       	ldi	r30, 0x53	; 83
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	88 7f       	andi	r24, 0xF8	; 248
    1952:	8c 93       	st	X, r24
	TCCR0 |= NO_CLK_SOURCE;
    1954:	a3 e5       	ldi	r26, 0x53	; 83
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	e3 e5       	ldi	r30, 0x53	; 83
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	8c 93       	st	X, r24
}
    1960:	cf 91       	pop	r28
    1962:	df 91       	pop	r29
    1964:	08 95       	ret

00001966 <Timer_u8__GetCounts>:

u8 Timer_u8__GetCounts(void)
{
    1966:	df 93       	push	r29
    1968:	cf 93       	push	r28
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    196e:	e2 e5       	ldi	r30, 0x52	; 82
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
}
    1974:	cf 91       	pop	r28
    1976:	df 91       	pop	r29
    1978:	08 95       	ret

0000197a <M_void_Timer_Set_Preload>:
void M_void_Timer_Set_Preload(u8 Pre_load)
{
    197a:	df 93       	push	r29
    197c:	cf 93       	push	r28
    197e:	0f 92       	push	r0
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
    1984:	89 83       	std	Y+1, r24	; 0x01
	TCNT0= Pre_load;
    1986:	e2 e5       	ldi	r30, 0x52	; 82
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	80 83       	st	Z, r24
}
    198e:	0f 90       	pop	r0
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <M_TIMER0_setDelayTimeMilliSec>:

void M_TIMER0_setDelayTimeMilliSec(u32 Local_DelayTime, Timer_Mode Local_Mode, PRE_SCALLER Local_Prescaller)
{
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    199e:	ac 97       	sbiw	r28, 0x2c	; 44
    19a0:	0f b6       	in	r0, 0x3f	; 63
    19a2:	f8 94       	cli
    19a4:	de bf       	out	0x3e, r29	; 62
    19a6:	0f be       	out	0x3f, r0	; 63
    19a8:	cd bf       	out	0x3d, r28	; 61
    19aa:	6a a3       	std	Y+34, r22	; 0x22
    19ac:	7b a3       	std	Y+35, r23	; 0x23
    19ae:	8c a3       	std	Y+36, r24	; 0x24
    19b0:	9d a3       	std	Y+37, r25	; 0x25
    19b2:	4e a3       	std	Y+38, r20	; 0x26
    19b4:	2f a3       	std	Y+39, r18	; 0x27
	u32 Pre_scallers[5]={1,8,64,256,1024};
    19b6:	ce 01       	movw	r24, r28
    19b8:	0e 96       	adiw	r24, 0x0e	; 14
    19ba:	99 a7       	std	Y+41, r25	; 0x29
    19bc:	88 a7       	std	Y+40, r24	; 0x28
    19be:	e8 ec       	ldi	r30, 0xC8	; 200
    19c0:	f1 e0       	ldi	r31, 0x01	; 1
    19c2:	fb a7       	std	Y+43, r31	; 0x2b
    19c4:	ea a7       	std	Y+42, r30	; 0x2a
    19c6:	f4 e1       	ldi	r31, 0x14	; 20
    19c8:	fc a7       	std	Y+44, r31	; 0x2c
    19ca:	ea a5       	ldd	r30, Y+42	; 0x2a
    19cc:	fb a5       	ldd	r31, Y+43	; 0x2b
    19ce:	00 80       	ld	r0, Z
    19d0:	8a a5       	ldd	r24, Y+42	; 0x2a
    19d2:	9b a5       	ldd	r25, Y+43	; 0x2b
    19d4:	01 96       	adiw	r24, 0x01	; 1
    19d6:	9b a7       	std	Y+43, r25	; 0x2b
    19d8:	8a a7       	std	Y+42, r24	; 0x2a
    19da:	e8 a5       	ldd	r30, Y+40	; 0x28
    19dc:	f9 a5       	ldd	r31, Y+41	; 0x29
    19de:	00 82       	st	Z, r0
    19e0:	88 a5       	ldd	r24, Y+40	; 0x28
    19e2:	99 a5       	ldd	r25, Y+41	; 0x29
    19e4:	01 96       	adiw	r24, 0x01	; 1
    19e6:	99 a7       	std	Y+41, r25	; 0x29
    19e8:	88 a7       	std	Y+40, r24	; 0x28
    19ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    19ec:	91 50       	subi	r25, 0x01	; 1
    19ee:	9c a7       	std	Y+44, r25	; 0x2c
    19f0:	ec a5       	ldd	r30, Y+44	; 0x2c
    19f2:	ee 23       	and	r30, r30
    19f4:	51 f7       	brne	.-44     	; 0x19ca <M_TIMER0_setDelayTimeMilliSec+0x34>
	f32 TickTime = (f32)Pre_scallers[4]/16;
    19f6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19f8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    19fa:	a8 a1       	ldd	r26, Y+32	; 0x20
    19fc:	b9 a1       	ldd	r27, Y+33	; 0x21
    19fe:	bc 01       	movw	r22, r24
    1a00:	cd 01       	movw	r24, r26
    1a02:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	bc 01       	movw	r22, r24
    1a0c:	cd 01       	movw	r24, r26
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	40 e8       	ldi	r20, 0x80	; 128
    1a14:	51 e4       	ldi	r21, 0x41	; 65
    1a16:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	8a 87       	std	Y+10, r24	; 0x0a
    1a20:	9b 87       	std	Y+11, r25	; 0x0b
    1a22:	ac 87       	std	Y+12, r26	; 0x0c
    1a24:	bd 87       	std	Y+13, r27	; 0x0d

	u32 DesiredTickS = 0;
    1a26:	1e 82       	std	Y+6, r1	; 0x06
    1a28:	1f 82       	std	Y+7, r1	; 0x07
    1a2a:	18 86       	std	Y+8, r1	; 0x08
    1a2c:	19 86       	std	Y+9, r1	; 0x09
	u32 CTC_Value = 0 ;
    1a2e:	1a 82       	std	Y+2, r1	; 0x02
    1a30:	1b 82       	std	Y+3, r1	; 0x03
    1a32:	1c 82       	std	Y+4, r1	; 0x04
    1a34:	1d 82       	std	Y+5, r1	; 0x05
	/* Calculate the desired Tick*/
	 DesiredTickS = (f32)Local_DelayTime*1000/ (TickTime) ;
    1a36:	6a a1       	ldd	r22, Y+34	; 0x22
    1a38:	7b a1       	ldd	r23, Y+35	; 0x23
    1a3a:	8c a1       	ldd	r24, Y+36	; 0x24
    1a3c:	9d a1       	ldd	r25, Y+37	; 0x25
    1a3e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	bc 01       	movw	r22, r24
    1a48:	cd 01       	movw	r24, r26
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	4a e7       	ldi	r20, 0x7A	; 122
    1a50:	54 e4       	ldi	r21, 0x44	; 68
    1a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	cd 01       	movw	r24, r26
    1a5e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a60:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a62:	4c 85       	ldd	r20, Y+12	; 0x0c
    1a64:	5d 85       	ldd	r21, Y+13	; 0x0d
    1a66:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	bc 01       	movw	r22, r24
    1a70:	cd 01       	movw	r24, r26
    1a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	8e 83       	std	Y+6, r24	; 0x06
    1a7c:	9f 83       	std	Y+7, r25	; 0x07
    1a7e:	a8 87       	std	Y+8, r26	; 0x08
    1a80:	b9 87       	std	Y+9, r27	; 0x09

	if(Local_Mode == Normal_Mode)
    1a82:	8e a1       	ldd	r24, Y+38	; 0x26
    1a84:	88 23       	and	r24, r24
    1a86:	c9 f5       	brne	.+114    	; 0x1afa <M_TIMER0_setDelayTimeMilliSec+0x164>
	{
		 /*Store the numbers of over flow */
		 No_of_over_flows = DesiredTickS/ 256 ;
    1a88:	8e 81       	ldd	r24, Y+6	; 0x06
    1a8a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a8c:	a8 85       	ldd	r26, Y+8	; 0x08
    1a8e:	b9 85       	ldd	r27, Y+9	; 0x09
    1a90:	89 2f       	mov	r24, r25
    1a92:	9a 2f       	mov	r25, r26
    1a94:	ab 2f       	mov	r26, r27
    1a96:	bb 27       	eor	r27, r27
    1a98:	80 93 b0 02 	sts	0x02B0, r24
    1a9c:	90 93 b1 02 	sts	0x02B1, r25
    1aa0:	a0 93 b2 02 	sts	0x02B2, r26
    1aa4:	b0 93 b3 02 	sts	0x02B3, r27
		 /* Store the Number of remaining if found */
		 No_of_Remaning = DesiredTickS % 256;
    1aa8:	8e 81       	ldd	r24, Y+6	; 0x06
    1aaa:	80 93 b4 02 	sts	0x02B4, r24
		 /*if there is remaining then start from it */
		 if(DesiredTickS % 256 != 0)
    1aae:	8e 81       	ldd	r24, Y+6	; 0x06
    1ab0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ab2:	a8 85       	ldd	r26, Y+8	; 0x08
    1ab4:	b9 85       	ldd	r27, Y+9	; 0x09
    1ab6:	90 70       	andi	r25, 0x00	; 0
    1ab8:	a0 70       	andi	r26, 0x00	; 0
    1aba:	b0 70       	andi	r27, 0x00	; 0
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	a1 05       	cpc	r26, r1
    1ac0:	b1 05       	cpc	r27, r1
    1ac2:	09 f4       	brne	.+2      	; 0x1ac6 <M_TIMER0_setDelayTimeMilliSec+0x130>
    1ac4:	57 c0       	rjmp	.+174    	; 0x1b74 <M_TIMER0_setDelayTimeMilliSec+0x1de>
		 {
			 TCNT0 = 256 - No_of_Remaning ;
    1ac6:	e2 e5       	ldi	r30, 0x52	; 82
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 91 b4 02 	lds	r24, 0x02B4
    1ace:	81 95       	neg	r24
    1ad0:	80 83       	st	Z, r24
			 No_of_over_flows ++ ;
    1ad2:	80 91 b0 02 	lds	r24, 0x02B0
    1ad6:	90 91 b1 02 	lds	r25, 0x02B1
    1ada:	a0 91 b2 02 	lds	r26, 0x02B2
    1ade:	b0 91 b3 02 	lds	r27, 0x02B3
    1ae2:	01 96       	adiw	r24, 0x01	; 1
    1ae4:	a1 1d       	adc	r26, r1
    1ae6:	b1 1d       	adc	r27, r1
    1ae8:	80 93 b0 02 	sts	0x02B0, r24
    1aec:	90 93 b1 02 	sts	0x02B1, r25
    1af0:	a0 93 b2 02 	sts	0x02B2, r26
    1af4:	b0 93 b3 02 	sts	0x02B3, r27
    1af8:	3d c0       	rjmp	.+122    	; 0x1b74 <M_TIMER0_setDelayTimeMilliSec+0x1de>

		 }


	}
	else if(Local_Mode == CTC_Mode)
    1afa:	8e a1       	ldd	r24, Y+38	; 0x26
    1afc:	81 30       	cpi	r24, 0x01	; 1
    1afe:	d1 f5       	brne	.+116    	; 0x1b74 <M_TIMER0_setDelayTimeMilliSec+0x1de>
	{
		CTC_Value = 255 ;
    1b00:	8f ef       	ldi	r24, 0xFF	; 255
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	a0 e0       	ldi	r26, 0x00	; 0
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	8a 83       	std	Y+2, r24	; 0x02
    1b0a:	9b 83       	std	Y+3, r25	; 0x03
    1b0c:	ac 83       	std	Y+4, r26	; 0x04
    1b0e:	bd 83       	std	Y+5, r27	; 0x05
		u8 NoOfCompMatch = 0;
    1b10:	19 82       	std	Y+1, r1	; 0x01
    1b12:	0b c0       	rjmp	.+22     	; 0x1b2a <M_TIMER0_setDelayTimeMilliSec+0x194>

		while(DesiredTickS % CTC_Value)
		{
			CTC_Value -- ;
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	9b 81       	ldd	r25, Y+3	; 0x03
    1b18:	ac 81       	ldd	r26, Y+4	; 0x04
    1b1a:	bd 81       	ldd	r27, Y+5	; 0x05
    1b1c:	01 97       	sbiw	r24, 0x01	; 1
    1b1e:	a1 09       	sbc	r26, r1
    1b20:	b1 09       	sbc	r27, r1
    1b22:	8a 83       	std	Y+2, r24	; 0x02
    1b24:	9b 83       	std	Y+3, r25	; 0x03
    1b26:	ac 83       	std	Y+4, r26	; 0x04
    1b28:	bd 83       	std	Y+5, r27	; 0x05
	else if(Local_Mode == CTC_Mode)
	{
		CTC_Value = 255 ;
		u8 NoOfCompMatch = 0;

		while(DesiredTickS % CTC_Value)
    1b2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b2c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b2e:	a8 85       	ldd	r26, Y+8	; 0x08
    1b30:	b9 85       	ldd	r27, Y+9	; 0x09
    1b32:	2a 81       	ldd	r18, Y+2	; 0x02
    1b34:	3b 81       	ldd	r19, Y+3	; 0x03
    1b36:	4c 81       	ldd	r20, Y+4	; 0x04
    1b38:	5d 81       	ldd	r21, Y+5	; 0x05
    1b3a:	bc 01       	movw	r22, r24
    1b3c:	cd 01       	movw	r24, r26
    1b3e:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <__udivmodsi4>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	a1 05       	cpc	r26, r1
    1b4a:	b1 05       	cpc	r27, r1
    1b4c:	19 f7       	brne	.-58     	; 0x1b14 <M_TIMER0_setDelayTimeMilliSec+0x17e>
		{
			CTC_Value -- ;
		}
		NoOfCompMatch = DesiredTickS % CTC_Value ;
    1b4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b50:	9f 81       	ldd	r25, Y+7	; 0x07
    1b52:	a8 85       	ldd	r26, Y+8	; 0x08
    1b54:	b9 85       	ldd	r27, Y+9	; 0x09
    1b56:	2a 81       	ldd	r18, Y+2	; 0x02
    1b58:	3b 81       	ldd	r19, Y+3	; 0x03
    1b5a:	4c 81       	ldd	r20, Y+4	; 0x04
    1b5c:	5d 81       	ldd	r21, Y+5	; 0x05
    1b5e:	bc 01       	movw	r22, r24
    1b60:	cd 01       	movw	r24, r26
    1b62:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <__udivmodsi4>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	89 83       	std	Y+1, r24	; 0x01
		OCR0 = NoOfCompMatch;
    1b6c:	ec e5       	ldi	r30, 0x5C	; 92
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	80 83       	st	Z, r24
	}
	else if(Local_Mode == Fast_PWM)
	{

	}
	M_void_Timer_start(Local_Prescaller);
    1b74:	8f a1       	ldd	r24, Y+39	; 0x27
    1b76:	0e 94 86 0c 	call	0x190c	; 0x190c <M_void_Timer_start>
}
    1b7a:	ac 96       	adiw	r28, 0x2c	; 44
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	f8 94       	cli
    1b80:	de bf       	out	0x3e, r29	; 62
    1b82:	0f be       	out	0x3f, r0	; 63
    1b84:	cd bf       	out	0x3d, r28	; 61
    1b86:	cf 91       	pop	r28
    1b88:	df 91       	pop	r29
    1b8a:	08 95       	ret

00001b8c <M_void_EnableTIMERInt>:

void M_void_EnableTIMERInt(Timer_Mode T_MODE)
{
    1b8c:	df 93       	push	r29
    1b8e:	cf 93       	push	r28
    1b90:	00 d0       	rcall	.+0      	; 0x1b92 <M_void_EnableTIMERInt+0x6>
    1b92:	0f 92       	push	r0
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	89 83       	std	Y+1, r24	; 0x01
	switch(T_MODE)
    1b9a:	89 81       	ldd	r24, Y+1	; 0x01
    1b9c:	28 2f       	mov	r18, r24
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	3b 83       	std	Y+3, r19	; 0x03
    1ba2:	2a 83       	std	Y+2, r18	; 0x02
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba8:	00 97       	sbiw	r24, 0x00	; 0
    1baa:	31 f0       	breq	.+12     	; 0x1bb8 <M_void_EnableTIMERInt+0x2c>
    1bac:	2a 81       	ldd	r18, Y+2	; 0x02
    1bae:	3b 81       	ldd	r19, Y+3	; 0x03
    1bb0:	21 30       	cpi	r18, 0x01	; 1
    1bb2:	31 05       	cpc	r19, r1
    1bb4:	81 f0       	breq	.+32     	; 0x1bd6 <M_void_EnableTIMERInt+0x4a>
    1bb6:	1d c0       	rjmp	.+58     	; 0x1bf2 <M_void_EnableTIMERInt+0x66>
	{
	case Normal_Mode:
		TIMSK &= NORMAL_MODE_INTERRUPT_CLEAR;
    1bb8:	a9 e5       	ldi	r26, 0x59	; 89
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	e9 e5       	ldi	r30, 0x59	; 89
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	8e 7f       	andi	r24, 0xFE	; 254
    1bc4:	8c 93       	st	X, r24
		TIMSK |= NORMAL_MODE_INTERRUPT_SET;
    1bc6:	a9 e5       	ldi	r26, 0x59	; 89
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e9 e5       	ldi	r30, 0x59	; 89
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	81 60       	ori	r24, 0x01	; 1
    1bd2:	8c 93       	st	X, r24
    1bd4:	0e c0       	rjmp	.+28     	; 0x1bf2 <M_void_EnableTIMERInt+0x66>
		break;
	case CTC_Mode:
		TIMSK &= CTC_MODE_INTERRUPT_CLEAR;
    1bd6:	a9 e5       	ldi	r26, 0x59	; 89
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e9 e5       	ldi	r30, 0x59	; 89
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	8d 7f       	andi	r24, 0xFD	; 253
    1be2:	8c 93       	st	X, r24
		TIMSK |= CTC_MODE_INTERRUPT_SET;
    1be4:	a9 e5       	ldi	r26, 0x59	; 89
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e9 e5       	ldi	r30, 0x59	; 89
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	82 60       	ori	r24, 0x02	; 2
    1bf0:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <M_void_DisableTIMERInt>:
void M_void_DisableTIMERInt(Timer_Mode T_MODE)
{
    1bfe:	df 93       	push	r29
    1c00:	cf 93       	push	r28
    1c02:	00 d0       	rcall	.+0      	; 0x1c04 <M_void_DisableTIMERInt+0x6>
    1c04:	0f 92       	push	r0
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	89 83       	std	Y+1, r24	; 0x01
	switch(T_MODE)
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	28 2f       	mov	r18, r24
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	3b 83       	std	Y+3, r19	; 0x03
    1c14:	2a 83       	std	Y+2, r18	; 0x02
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	9b 81       	ldd	r25, Y+3	; 0x03
    1c1a:	00 97       	sbiw	r24, 0x00	; 0
    1c1c:	31 f0       	breq	.+12     	; 0x1c2a <M_void_DisableTIMERInt+0x2c>
    1c1e:	2a 81       	ldd	r18, Y+2	; 0x02
    1c20:	3b 81       	ldd	r19, Y+3	; 0x03
    1c22:	21 30       	cpi	r18, 0x01	; 1
    1c24:	31 05       	cpc	r19, r1
    1c26:	79 f0       	breq	.+30     	; 0x1c46 <M_void_DisableTIMERInt+0x48>
    1c28:	1b c0       	rjmp	.+54     	; 0x1c60 <M_void_DisableTIMERInt+0x62>
	{
	case Normal_Mode:
		TIMSK &= NORMAL_MODE_INTERRUPT_CLEAR;
    1c2a:	a9 e5       	ldi	r26, 0x59	; 89
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	e9 e5       	ldi	r30, 0x59	; 89
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	8e 7f       	andi	r24, 0xFE	; 254
    1c36:	8c 93       	st	X, r24
		TIMSK |= NORMAL_MODE_INTERRUPT_RESET;
    1c38:	a9 e5       	ldi	r26, 0x59	; 89
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e9 e5       	ldi	r30, 0x59	; 89
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	8c 93       	st	X, r24
    1c44:	0d c0       	rjmp	.+26     	; 0x1c60 <M_void_DisableTIMERInt+0x62>
		break;
	case CTC_Mode:
		TIMSK &= CTC_MODE_INTERRUPT_CLEAR;
    1c46:	a9 e5       	ldi	r26, 0x59	; 89
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	e9 e5       	ldi	r30, 0x59	; 89
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	8d 7f       	andi	r24, 0xFD	; 253
    1c52:	8c 93       	st	X, r24
		TIMSK |= CTC_MODE_INTERRUPT_RESET;
    1c54:	a9 e5       	ldi	r26, 0x59	; 89
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e9 e5       	ldi	r30, 0x59	; 89
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	08 95       	ret

00001c6c <M_void_setCallBack>:

void M_void_setCallBack(Timer_Mode T_MODE,void (*Copy_pvINTFunc)(void))
{
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	00 d0       	rcall	.+0      	; 0x1c72 <M_void_setCallBack+0x6>
    1c72:	00 d0       	rcall	.+0      	; 0x1c74 <M_void_setCallBack+0x8>
    1c74:	0f 92       	push	r0
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
    1c7a:	89 83       	std	Y+1, r24	; 0x01
    1c7c:	7b 83       	std	Y+3, r23	; 0x03
    1c7e:	6a 83       	std	Y+2, r22	; 0x02

	switch(T_MODE)
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	3d 83       	std	Y+5, r19	; 0x05
    1c88:	2c 83       	std	Y+4, r18	; 0x04
    1c8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	31 f0       	breq	.+12     	; 0x1c9e <M_void_setCallBack+0x32>
    1c92:	2c 81       	ldd	r18, Y+4	; 0x04
    1c94:	3d 81       	ldd	r19, Y+5	; 0x05
    1c96:	21 30       	cpi	r18, 0x01	; 1
    1c98:	31 05       	cpc	r19, r1
    1c9a:	61 f0       	breq	.+24     	; 0x1cb4 <M_void_setCallBack+0x48>
    1c9c:	15 c0       	rjmp	.+42     	; 0x1cc8 <M_void_setCallBack+0x5c>
	{
	case Normal_Mode:
		if(Copy_pvINTFunc!= NULL)
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca2:	00 97       	sbiw	r24, 0x00	; 0
    1ca4:	89 f0       	breq	.+34     	; 0x1cc8 <M_void_setCallBack+0x5c>
		{
			EXTI_ARRCALLBACK2FUNC[0]=Copy_pvINTFunc;
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	9b 81       	ldd	r25, Y+3	; 0x03
    1caa:	90 93 ad 02 	sts	0x02AD, r25
    1cae:	80 93 ac 02 	sts	0x02AC, r24
    1cb2:	0a c0       	rjmp	.+20     	; 0x1cc8 <M_void_setCallBack+0x5c>
		}
		break;
	case CTC_Mode:
		if(Copy_pvINTFunc!= NULL)
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb8:	00 97       	sbiw	r24, 0x00	; 0
    1cba:	31 f0       	breq	.+12     	; 0x1cc8 <M_void_setCallBack+0x5c>
		{
			EXTI_ARRCALLBACK2FUNC[1]=Copy_pvINTFunc;
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc0:	90 93 af 02 	sts	0x02AF, r25
    1cc4:	80 93 ae 02 	sts	0x02AE, r24
		}
		break;
	}
}
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	cf 91       	pop	r28
    1cd4:	df 91       	pop	r29
    1cd6:	08 95       	ret

00001cd8 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    1cd8:	1f 92       	push	r1
    1cda:	0f 92       	push	r0
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	0f 92       	push	r0
    1ce0:	11 24       	eor	r1, r1
    1ce2:	2f 93       	push	r18
    1ce4:	3f 93       	push	r19
    1ce6:	4f 93       	push	r20
    1ce8:	5f 93       	push	r21
    1cea:	6f 93       	push	r22
    1cec:	7f 93       	push	r23
    1cee:	8f 93       	push	r24
    1cf0:	9f 93       	push	r25
    1cf2:	af 93       	push	r26
    1cf4:	bf 93       	push	r27
    1cf6:	ef 93       	push	r30
    1cf8:	ff 93       	push	r31
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
	Global_No_of_overflows++;
    1d02:	80 91 b5 02 	lds	r24, 0x02B5
    1d06:	90 91 b6 02 	lds	r25, 0x02B6
    1d0a:	a0 91 b7 02 	lds	r26, 0x02B7
    1d0e:	b0 91 b8 02 	lds	r27, 0x02B8
    1d12:	01 96       	adiw	r24, 0x01	; 1
    1d14:	a1 1d       	adc	r26, r1
    1d16:	b1 1d       	adc	r27, r1
    1d18:	80 93 b5 02 	sts	0x02B5, r24
    1d1c:	90 93 b6 02 	sts	0x02B6, r25
    1d20:	a0 93 b7 02 	sts	0x02B7, r26
    1d24:	b0 93 b8 02 	sts	0x02B8, r27
	if(EXTI_ARRCALLBACK2FUNC[0]!=NULL)
    1d28:	80 91 ac 02 	lds	r24, 0x02AC
    1d2c:	90 91 ad 02 	lds	r25, 0x02AD
    1d30:	00 97       	sbiw	r24, 0x00	; 0
    1d32:	41 f1       	breq	.+80     	; 0x1d84 <__vector_11+0xac>
	{
		if(Global_No_of_overflows==No_of_over_flows)
    1d34:	20 91 b5 02 	lds	r18, 0x02B5
    1d38:	30 91 b6 02 	lds	r19, 0x02B6
    1d3c:	40 91 b7 02 	lds	r20, 0x02B7
    1d40:	50 91 b8 02 	lds	r21, 0x02B8
    1d44:	80 91 b0 02 	lds	r24, 0x02B0
    1d48:	90 91 b1 02 	lds	r25, 0x02B1
    1d4c:	a0 91 b2 02 	lds	r26, 0x02B2
    1d50:	b0 91 b3 02 	lds	r27, 0x02B3
    1d54:	28 17       	cp	r18, r24
    1d56:	39 07       	cpc	r19, r25
    1d58:	4a 07       	cpc	r20, r26
    1d5a:	5b 07       	cpc	r21, r27
    1d5c:	99 f4       	brne	.+38     	; 0x1d84 <__vector_11+0xac>
		{
			EXTI_ARRCALLBACK2FUNC[0]();
    1d5e:	e0 91 ac 02 	lds	r30, 0x02AC
    1d62:	f0 91 ad 02 	lds	r31, 0x02AD
    1d66:	09 95       	icall
			Global_No_of_overflows=0;
    1d68:	10 92 b5 02 	sts	0x02B5, r1
    1d6c:	10 92 b6 02 	sts	0x02B6, r1
    1d70:	10 92 b7 02 	sts	0x02B7, r1
    1d74:	10 92 b8 02 	sts	0x02B8, r1
			TCNT0 = 256 - No_of_Remaning;
    1d78:	e2 e5       	ldi	r30, 0x52	; 82
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 91 b4 02 	lds	r24, 0x02B4
    1d80:	81 95       	neg	r24
    1d82:	80 83       	st	Z, r24
		}
	}

}
    1d84:	cf 91       	pop	r28
    1d86:	df 91       	pop	r29
    1d88:	ff 91       	pop	r31
    1d8a:	ef 91       	pop	r30
    1d8c:	bf 91       	pop	r27
    1d8e:	af 91       	pop	r26
    1d90:	9f 91       	pop	r25
    1d92:	8f 91       	pop	r24
    1d94:	7f 91       	pop	r23
    1d96:	6f 91       	pop	r22
    1d98:	5f 91       	pop	r21
    1d9a:	4f 91       	pop	r20
    1d9c:	3f 91       	pop	r19
    1d9e:	2f 91       	pop	r18
    1da0:	0f 90       	pop	r0
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	0f 90       	pop	r0
    1da6:	1f 90       	pop	r1
    1da8:	18 95       	reti

00001daa <__vector_10>:
ISR(TIMER0_COMP_vect)
{
    1daa:	1f 92       	push	r1
    1dac:	0f 92       	push	r0
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	0f 92       	push	r0
    1db2:	11 24       	eor	r1, r1
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62

}
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	0f 90       	pop	r0
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	0f 90       	pop	r0
    1dc6:	1f 90       	pop	r1
    1dc8:	18 95       	reti

00001dca <Port_Init>:
  parameters (in)  :
  parameters (out) : none
  Return Value     : void
******************************************/
void Port_Init(const Port_ConfigType * ConfigPtr)
{
    1dca:	df 93       	push	r29
    1dcc:	cf 93       	push	r28
    1dce:	cd b7       	in	r28, 0x3d	; 61
    1dd0:	de b7       	in	r29, 0x3e	; 62
    1dd2:	2b 97       	sbiw	r28, 0x0b	; 11
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	f8 94       	cli
    1dd8:	de bf       	out	0x3e, r29	; 62
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	cd bf       	out	0x3d, r28	; 61
    1dde:	9d 83       	std	Y+5, r25	; 0x05
    1de0:	8c 83       	std	Y+4, r24	; 0x04

	if(ConfigPtr == NULL)
    1de2:	8c 81       	ldd	r24, Y+4	; 0x04
    1de4:	9d 81       	ldd	r25, Y+5	; 0x05
    1de6:	00 97       	sbiw	r24, 0x00	; 0
    1de8:	09 f4       	brne	.+2      	; 0x1dec <Port_Init+0x22>
    1dea:	51 c2       	rjmp	.+1186   	; 0x228e <Port_Init+0x4c4>
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<PORT_PINS_CONFIG_ARR_SIZE;i++)
    1dec:	1b 82       	std	Y+3, r1	; 0x03
    1dee:	4b c2       	rjmp	.+1174   	; 0x2286 <Port_Init+0x4bc>
			{
				Local_pin =(ConfigPtr[i].Port_PinNumber)%10 ;
    1df0:	8b 81       	ldd	r24, Y+3	; 0x03
    1df2:	88 2f       	mov	r24, r24
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	9c 01       	movw	r18, r24
    1df8:	22 0f       	add	r18, r18
    1dfa:	33 1f       	adc	r19, r19
    1dfc:	22 0f       	add	r18, r18
    1dfe:	33 1f       	adc	r19, r19
    1e00:	8c 81       	ldd	r24, Y+4	; 0x04
    1e02:	9d 81       	ldd	r25, Y+5	; 0x05
    1e04:	fc 01       	movw	r30, r24
    1e06:	e2 0f       	add	r30, r18
    1e08:	f3 1f       	adc	r31, r19
    1e0a:	80 81       	ld	r24, Z
    1e0c:	9a e0       	ldi	r25, 0x0A	; 10
    1e0e:	69 2f       	mov	r22, r25
    1e10:	0e 94 ca 22 	call	0x4594	; 0x4594 <__udivmodqi4>
    1e14:	89 2f       	mov	r24, r25
    1e16:	8a 83       	std	Y+2, r24	; 0x02
				Local_port =(ConfigPtr[i].Port_PinNumber)/10 ;
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	88 2f       	mov	r24, r24
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	9c 01       	movw	r18, r24
    1e20:	22 0f       	add	r18, r18
    1e22:	33 1f       	adc	r19, r19
    1e24:	22 0f       	add	r18, r18
    1e26:	33 1f       	adc	r19, r19
    1e28:	8c 81       	ldd	r24, Y+4	; 0x04
    1e2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	e2 0f       	add	r30, r18
    1e30:	f3 1f       	adc	r31, r19
    1e32:	80 81       	ld	r24, Z
    1e34:	9a e0       	ldi	r25, 0x0A	; 10
    1e36:	69 2f       	mov	r22, r25
    1e38:	0e 94 ca 22 	call	0x4594	; 0x4594 <__udivmodqi4>
    1e3c:	89 83       	std	Y+1, r24	; 0x01
				// step1 : set direction
				if(ConfigPtr[i].Port_PinDirection == PORT_PINDIR_INPUT || ConfigPtr[i].Port_PinDirection ==PORT_PINDIR_OUTPUT)
    1e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e40:	88 2f       	mov	r24, r24
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	9c 01       	movw	r18, r24
    1e46:	22 0f       	add	r18, r18
    1e48:	33 1f       	adc	r19, r19
    1e4a:	22 0f       	add	r18, r18
    1e4c:	33 1f       	adc	r19, r19
    1e4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e50:	9d 81       	ldd	r25, Y+5	; 0x05
    1e52:	fc 01       	movw	r30, r24
    1e54:	e2 0f       	add	r30, r18
    1e56:	f3 1f       	adc	r31, r19
    1e58:	82 81       	ldd	r24, Z+2	; 0x02
    1e5a:	88 23       	and	r24, r24
    1e5c:	89 f0       	breq	.+34     	; 0x1e80 <Port_Init+0xb6>
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	88 2f       	mov	r24, r24
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	9c 01       	movw	r18, r24
    1e66:	22 0f       	add	r18, r18
    1e68:	33 1f       	adc	r19, r19
    1e6a:	22 0f       	add	r18, r18
    1e6c:	33 1f       	adc	r19, r19
    1e6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e70:	9d 81       	ldd	r25, Y+5	; 0x05
    1e72:	fc 01       	movw	r30, r24
    1e74:	e2 0f       	add	r30, r18
    1e76:	f3 1f       	adc	r31, r19
    1e78:	82 81       	ldd	r24, Z+2	; 0x02
    1e7a:	81 30       	cpi	r24, 0x01	; 1
    1e7c:	09 f0       	breq	.+2      	; 0x1e80 <Port_Init+0xb6>
    1e7e:	00 c2       	rjmp	.+1024   	; 0x2280 <Port_Init+0x4b6>
				{
					switch(Local_port)
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	28 2f       	mov	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	3b 87       	std	Y+11, r19	; 0x0b
    1e88:	2a 87       	std	Y+10, r18	; 0x0a
    1e8a:	6a 85       	ldd	r22, Y+10	; 0x0a
    1e8c:	7b 85       	ldd	r23, Y+11	; 0x0b
    1e8e:	62 30       	cpi	r22, 0x02	; 2
    1e90:	71 05       	cpc	r23, r1
    1e92:	d1 f1       	breq	.+116    	; 0x1f08 <Port_Init+0x13e>
    1e94:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e96:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e98:	83 30       	cpi	r24, 0x03	; 3
    1e9a:	91 05       	cpc	r25, r1
    1e9c:	34 f4       	brge	.+12     	; 0x1eaa <Port_Init+0xe0>
    1e9e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ea0:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ea2:	21 30       	cpi	r18, 0x01	; 1
    1ea4:	31 05       	cpc	r19, r1
    1ea6:	71 f0       	breq	.+28     	; 0x1ec4 <Port_Init+0xfa>
    1ea8:	94 c0       	rjmp	.+296    	; 0x1fd2 <Port_Init+0x208>
    1eaa:	6a 85       	ldd	r22, Y+10	; 0x0a
    1eac:	7b 85       	ldd	r23, Y+11	; 0x0b
    1eae:	63 30       	cpi	r22, 0x03	; 3
    1eb0:	71 05       	cpc	r23, r1
    1eb2:	09 f4       	brne	.+2      	; 0x1eb6 <Port_Init+0xec>
    1eb4:	4b c0       	rjmp	.+150    	; 0x1f4c <Port_Init+0x182>
    1eb6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eb8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eba:	84 30       	cpi	r24, 0x04	; 4
    1ebc:	91 05       	cpc	r25, r1
    1ebe:	09 f4       	brne	.+2      	; 0x1ec2 <Port_Init+0xf8>
    1ec0:	67 c0       	rjmp	.+206    	; 0x1f90 <Port_Init+0x1c6>
    1ec2:	87 c0       	rjmp	.+270    	; 0x1fd2 <Port_Init+0x208>
					{
					case PORT_PORTA:DDRA_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1ec4:	aa e3       	ldi	r26, 0x3A	; 58
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	ea e3       	ldi	r30, 0x3A	; 58
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	40 81       	ld	r20, Z
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed0:	88 2f       	mov	r24, r24
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	9c 01       	movw	r18, r24
    1ed6:	22 0f       	add	r18, r18
    1ed8:	33 1f       	adc	r19, r19
    1eda:	22 0f       	add	r18, r18
    1edc:	33 1f       	adc	r19, r19
    1ede:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	e2 0f       	add	r30, r18
    1ee6:	f3 1f       	adc	r31, r19
    1ee8:	82 81       	ldd	r24, Z+2	; 0x02
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef0:	88 2f       	mov	r24, r24
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	b9 01       	movw	r22, r18
    1ef6:	02 c0       	rjmp	.+4      	; 0x1efc <Port_Init+0x132>
    1ef8:	66 0f       	add	r22, r22
    1efa:	77 1f       	adc	r23, r23
    1efc:	8a 95       	dec	r24
    1efe:	e2 f7       	brpl	.-8      	; 0x1ef8 <Port_Init+0x12e>
    1f00:	cb 01       	movw	r24, r22
    1f02:	84 2b       	or	r24, r20
    1f04:	8c 93       	st	X, r24
    1f06:	65 c0       	rjmp	.+202    	; 0x1fd2 <Port_Init+0x208>
					case PORT_PORTB:DDRB_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1f08:	a7 e3       	ldi	r26, 0x37	; 55
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	e7 e3       	ldi	r30, 0x37	; 55
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	40 81       	ld	r20, Z
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	88 2f       	mov	r24, r24
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	9c 01       	movw	r18, r24
    1f1a:	22 0f       	add	r18, r18
    1f1c:	33 1f       	adc	r19, r19
    1f1e:	22 0f       	add	r18, r18
    1f20:	33 1f       	adc	r19, r19
    1f22:	8c 81       	ldd	r24, Y+4	; 0x04
    1f24:	9d 81       	ldd	r25, Y+5	; 0x05
    1f26:	fc 01       	movw	r30, r24
    1f28:	e2 0f       	add	r30, r18
    1f2a:	f3 1f       	adc	r31, r19
    1f2c:	82 81       	ldd	r24, Z+2	; 0x02
    1f2e:	28 2f       	mov	r18, r24
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	88 2f       	mov	r24, r24
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	b9 01       	movw	r22, r18
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <Port_Init+0x176>
    1f3c:	66 0f       	add	r22, r22
    1f3e:	77 1f       	adc	r23, r23
    1f40:	8a 95       	dec	r24
    1f42:	e2 f7       	brpl	.-8      	; 0x1f3c <Port_Init+0x172>
    1f44:	cb 01       	movw	r24, r22
    1f46:	84 2b       	or	r24, r20
    1f48:	8c 93       	st	X, r24
    1f4a:	43 c0       	rjmp	.+134    	; 0x1fd2 <Port_Init+0x208>
					case PORT_PORTC:DDRC_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1f4c:	a4 e3       	ldi	r26, 0x34	; 52
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	e4 e3       	ldi	r30, 0x34	; 52
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	40 81       	ld	r20, Z
    1f56:	8b 81       	ldd	r24, Y+3	; 0x03
    1f58:	88 2f       	mov	r24, r24
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	9c 01       	movw	r18, r24
    1f5e:	22 0f       	add	r18, r18
    1f60:	33 1f       	adc	r19, r19
    1f62:	22 0f       	add	r18, r18
    1f64:	33 1f       	adc	r19, r19
    1f66:	8c 81       	ldd	r24, Y+4	; 0x04
    1f68:	9d 81       	ldd	r25, Y+5	; 0x05
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	e2 0f       	add	r30, r18
    1f6e:	f3 1f       	adc	r31, r19
    1f70:	82 81       	ldd	r24, Z+2	; 0x02
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	88 2f       	mov	r24, r24
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	b9 01       	movw	r22, r18
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <Port_Init+0x1ba>
    1f80:	66 0f       	add	r22, r22
    1f82:	77 1f       	adc	r23, r23
    1f84:	8a 95       	dec	r24
    1f86:	e2 f7       	brpl	.-8      	; 0x1f80 <Port_Init+0x1b6>
    1f88:	cb 01       	movw	r24, r22
    1f8a:	84 2b       	or	r24, r20
    1f8c:	8c 93       	st	X, r24
    1f8e:	21 c0       	rjmp	.+66     	; 0x1fd2 <Port_Init+0x208>
					case PORT_PORTD:DDRD_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1f90:	a1 e3       	ldi	r26, 0x31	; 49
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	e1 e3       	ldi	r30, 0x31	; 49
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	40 81       	ld	r20, Z
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	88 2f       	mov	r24, r24
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	9c 01       	movw	r18, r24
    1fa2:	22 0f       	add	r18, r18
    1fa4:	33 1f       	adc	r19, r19
    1fa6:	22 0f       	add	r18, r18
    1fa8:	33 1f       	adc	r19, r19
    1faa:	8c 81       	ldd	r24, Y+4	; 0x04
    1fac:	9d 81       	ldd	r25, Y+5	; 0x05
    1fae:	fc 01       	movw	r30, r24
    1fb0:	e2 0f       	add	r30, r18
    1fb2:	f3 1f       	adc	r31, r19
    1fb4:	82 81       	ldd	r24, Z+2	; 0x02
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbc:	88 2f       	mov	r24, r24
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	b9 01       	movw	r22, r18
    1fc2:	02 c0       	rjmp	.+4      	; 0x1fc8 <Port_Init+0x1fe>
    1fc4:	66 0f       	add	r22, r22
    1fc6:	77 1f       	adc	r23, r23
    1fc8:	8a 95       	dec	r24
    1fca:	e2 f7       	brpl	.-8      	; 0x1fc4 <Port_Init+0x1fa>
    1fcc:	cb 01       	movw	r24, r22
    1fce:	84 2b       	or	r24, r20
    1fd0:	8c 93       	st	X, r24

					}
					// step 2 : config initial pin value
					if(ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_LOW || ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_HIGH)
    1fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd4:	88 2f       	mov	r24, r24
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	9c 01       	movw	r18, r24
    1fda:	22 0f       	add	r18, r18
    1fdc:	33 1f       	adc	r19, r19
    1fde:	22 0f       	add	r18, r18
    1fe0:	33 1f       	adc	r19, r19
    1fe2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	e2 0f       	add	r30, r18
    1fea:	f3 1f       	adc	r31, r19
    1fec:	81 81       	ldd	r24, Z+1	; 0x01
    1fee:	88 23       	and	r24, r24
    1ff0:	89 f0       	breq	.+34     	; 0x2014 <Port_Init+0x24a>
    1ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff4:	88 2f       	mov	r24, r24
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	9c 01       	movw	r18, r24
    1ffa:	22 0f       	add	r18, r18
    1ffc:	33 1f       	adc	r19, r19
    1ffe:	22 0f       	add	r18, r18
    2000:	33 1f       	adc	r19, r19
    2002:	8c 81       	ldd	r24, Y+4	; 0x04
    2004:	9d 81       	ldd	r25, Y+5	; 0x05
    2006:	fc 01       	movw	r30, r24
    2008:	e2 0f       	add	r30, r18
    200a:	f3 1f       	adc	r31, r19
    200c:	81 81       	ldd	r24, Z+1	; 0x01
    200e:	81 30       	cpi	r24, 0x01	; 1
    2010:	09 f0       	breq	.+2      	; 0x2014 <Port_Init+0x24a>
    2012:	36 c1       	rjmp	.+620    	; 0x2280 <Port_Init+0x4b6>
					{
						switch(Local_port)
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	28 2f       	mov	r18, r24
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	39 87       	std	Y+9, r19	; 0x09
    201c:	28 87       	std	Y+8, r18	; 0x08
    201e:	68 85       	ldd	r22, Y+8	; 0x08
    2020:	79 85       	ldd	r23, Y+9	; 0x09
    2022:	62 30       	cpi	r22, 0x02	; 2
    2024:	71 05       	cpc	r23, r1
    2026:	d1 f1       	breq	.+116    	; 0x209c <Port_Init+0x2d2>
    2028:	88 85       	ldd	r24, Y+8	; 0x08
    202a:	99 85       	ldd	r25, Y+9	; 0x09
    202c:	83 30       	cpi	r24, 0x03	; 3
    202e:	91 05       	cpc	r25, r1
    2030:	34 f4       	brge	.+12     	; 0x203e <Port_Init+0x274>
    2032:	28 85       	ldd	r18, Y+8	; 0x08
    2034:	39 85       	ldd	r19, Y+9	; 0x09
    2036:	21 30       	cpi	r18, 0x01	; 1
    2038:	31 05       	cpc	r19, r1
    203a:	71 f0       	breq	.+28     	; 0x2058 <Port_Init+0x28e>
    203c:	94 c0       	rjmp	.+296    	; 0x2166 <Port_Init+0x39c>
    203e:	68 85       	ldd	r22, Y+8	; 0x08
    2040:	79 85       	ldd	r23, Y+9	; 0x09
    2042:	63 30       	cpi	r22, 0x03	; 3
    2044:	71 05       	cpc	r23, r1
    2046:	09 f4       	brne	.+2      	; 0x204a <Port_Init+0x280>
    2048:	4b c0       	rjmp	.+150    	; 0x20e0 <Port_Init+0x316>
    204a:	88 85       	ldd	r24, Y+8	; 0x08
    204c:	99 85       	ldd	r25, Y+9	; 0x09
    204e:	84 30       	cpi	r24, 0x04	; 4
    2050:	91 05       	cpc	r25, r1
    2052:	09 f4       	brne	.+2      	; 0x2056 <Port_Init+0x28c>
    2054:	67 c0       	rjmp	.+206    	; 0x2124 <Port_Init+0x35a>
    2056:	87 c0       	rjmp	.+270    	; 0x2166 <Port_Init+0x39c>
						{
						case PORT_PORTA:  PORTA_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    2058:	ab e3       	ldi	r26, 0x3B	; 59
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	eb e3       	ldi	r30, 0x3B	; 59
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	40 81       	ld	r20, Z
    2062:	8b 81       	ldd	r24, Y+3	; 0x03
    2064:	88 2f       	mov	r24, r24
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	9c 01       	movw	r18, r24
    206a:	22 0f       	add	r18, r18
    206c:	33 1f       	adc	r19, r19
    206e:	22 0f       	add	r18, r18
    2070:	33 1f       	adc	r19, r19
    2072:	8c 81       	ldd	r24, Y+4	; 0x04
    2074:	9d 81       	ldd	r25, Y+5	; 0x05
    2076:	fc 01       	movw	r30, r24
    2078:	e2 0f       	add	r30, r18
    207a:	f3 1f       	adc	r31, r19
    207c:	81 81       	ldd	r24, Z+1	; 0x01
    207e:	28 2f       	mov	r18, r24
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	8a 81       	ldd	r24, Y+2	; 0x02
    2084:	88 2f       	mov	r24, r24
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	b9 01       	movw	r22, r18
    208a:	02 c0       	rjmp	.+4      	; 0x2090 <Port_Init+0x2c6>
    208c:	66 0f       	add	r22, r22
    208e:	77 1f       	adc	r23, r23
    2090:	8a 95       	dec	r24
    2092:	e2 f7       	brpl	.-8      	; 0x208c <Port_Init+0x2c2>
    2094:	cb 01       	movw	r24, r22
    2096:	84 2b       	or	r24, r20
    2098:	8c 93       	st	X, r24
    209a:	65 c0       	rjmp	.+202    	; 0x2166 <Port_Init+0x39c>
						case PORT_PORTB:  PORTB_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    209c:	a8 e3       	ldi	r26, 0x38	; 56
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e8 e3       	ldi	r30, 0x38	; 56
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	40 81       	ld	r20, Z
    20a6:	8b 81       	ldd	r24, Y+3	; 0x03
    20a8:	88 2f       	mov	r24, r24
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	9c 01       	movw	r18, r24
    20ae:	22 0f       	add	r18, r18
    20b0:	33 1f       	adc	r19, r19
    20b2:	22 0f       	add	r18, r18
    20b4:	33 1f       	adc	r19, r19
    20b6:	8c 81       	ldd	r24, Y+4	; 0x04
    20b8:	9d 81       	ldd	r25, Y+5	; 0x05
    20ba:	fc 01       	movw	r30, r24
    20bc:	e2 0f       	add	r30, r18
    20be:	f3 1f       	adc	r31, r19
    20c0:	81 81       	ldd	r24, Z+1	; 0x01
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	8a 81       	ldd	r24, Y+2	; 0x02
    20c8:	88 2f       	mov	r24, r24
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	b9 01       	movw	r22, r18
    20ce:	02 c0       	rjmp	.+4      	; 0x20d4 <Port_Init+0x30a>
    20d0:	66 0f       	add	r22, r22
    20d2:	77 1f       	adc	r23, r23
    20d4:	8a 95       	dec	r24
    20d6:	e2 f7       	brpl	.-8      	; 0x20d0 <Port_Init+0x306>
    20d8:	cb 01       	movw	r24, r22
    20da:	84 2b       	or	r24, r20
    20dc:	8c 93       	st	X, r24
    20de:	43 c0       	rjmp	.+134    	; 0x2166 <Port_Init+0x39c>
						case PORT_PORTC:  PORTC_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    20e0:	a5 e3       	ldi	r26, 0x35	; 53
    20e2:	b0 e0       	ldi	r27, 0x00	; 0
    20e4:	e5 e3       	ldi	r30, 0x35	; 53
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	40 81       	ld	r20, Z
    20ea:	8b 81       	ldd	r24, Y+3	; 0x03
    20ec:	88 2f       	mov	r24, r24
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	9c 01       	movw	r18, r24
    20f2:	22 0f       	add	r18, r18
    20f4:	33 1f       	adc	r19, r19
    20f6:	22 0f       	add	r18, r18
    20f8:	33 1f       	adc	r19, r19
    20fa:	8c 81       	ldd	r24, Y+4	; 0x04
    20fc:	9d 81       	ldd	r25, Y+5	; 0x05
    20fe:	fc 01       	movw	r30, r24
    2100:	e2 0f       	add	r30, r18
    2102:	f3 1f       	adc	r31, r19
    2104:	81 81       	ldd	r24, Z+1	; 0x01
    2106:	28 2f       	mov	r18, r24
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	88 2f       	mov	r24, r24
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	b9 01       	movw	r22, r18
    2112:	02 c0       	rjmp	.+4      	; 0x2118 <Port_Init+0x34e>
    2114:	66 0f       	add	r22, r22
    2116:	77 1f       	adc	r23, r23
    2118:	8a 95       	dec	r24
    211a:	e2 f7       	brpl	.-8      	; 0x2114 <Port_Init+0x34a>
    211c:	cb 01       	movw	r24, r22
    211e:	84 2b       	or	r24, r20
    2120:	8c 93       	st	X, r24
    2122:	21 c0       	rjmp	.+66     	; 0x2166 <Port_Init+0x39c>
						case PORT_PORTD:  PORTD_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    2124:	a2 e3       	ldi	r26, 0x32	; 50
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e2 e3       	ldi	r30, 0x32	; 50
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	40 81       	ld	r20, Z
    212e:	8b 81       	ldd	r24, Y+3	; 0x03
    2130:	88 2f       	mov	r24, r24
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	9c 01       	movw	r18, r24
    2136:	22 0f       	add	r18, r18
    2138:	33 1f       	adc	r19, r19
    213a:	22 0f       	add	r18, r18
    213c:	33 1f       	adc	r19, r19
    213e:	8c 81       	ldd	r24, Y+4	; 0x04
    2140:	9d 81       	ldd	r25, Y+5	; 0x05
    2142:	fc 01       	movw	r30, r24
    2144:	e2 0f       	add	r30, r18
    2146:	f3 1f       	adc	r31, r19
    2148:	81 81       	ldd	r24, Z+1	; 0x01
    214a:	28 2f       	mov	r18, r24
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	8a 81       	ldd	r24, Y+2	; 0x02
    2150:	88 2f       	mov	r24, r24
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	b9 01       	movw	r22, r18
    2156:	02 c0       	rjmp	.+4      	; 0x215c <Port_Init+0x392>
    2158:	66 0f       	add	r22, r22
    215a:	77 1f       	adc	r23, r23
    215c:	8a 95       	dec	r24
    215e:	e2 f7       	brpl	.-8      	; 0x2158 <Port_Init+0x38e>
    2160:	cb 01       	movw	r24, r22
    2162:	84 2b       	or	r24, r20
    2164:	8c 93       	st	X, r24

						}
						// step 3 : config Pin Internal Attach
						if(ConfigPtr[i].Port_PinDirection==PORT_PINDIR_OUTPUT && ConfigPtr[i].Port_PinInternalAttach == PORT_PIN_IN_ATTATCH_PULLUP)
    2166:	8b 81       	ldd	r24, Y+3	; 0x03
    2168:	88 2f       	mov	r24, r24
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	9c 01       	movw	r18, r24
    216e:	22 0f       	add	r18, r18
    2170:	33 1f       	adc	r19, r19
    2172:	22 0f       	add	r18, r18
    2174:	33 1f       	adc	r19, r19
    2176:	8c 81       	ldd	r24, Y+4	; 0x04
    2178:	9d 81       	ldd	r25, Y+5	; 0x05
    217a:	fc 01       	movw	r30, r24
    217c:	e2 0f       	add	r30, r18
    217e:	f3 1f       	adc	r31, r19
    2180:	82 81       	ldd	r24, Z+2	; 0x02
    2182:	81 30       	cpi	r24, 0x01	; 1
    2184:	09 f0       	breq	.+2      	; 0x2188 <Port_Init+0x3be>
    2186:	7c c0       	rjmp	.+248    	; 0x2280 <Port_Init+0x4b6>
    2188:	8b 81       	ldd	r24, Y+3	; 0x03
    218a:	88 2f       	mov	r24, r24
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	9c 01       	movw	r18, r24
    2190:	22 0f       	add	r18, r18
    2192:	33 1f       	adc	r19, r19
    2194:	22 0f       	add	r18, r18
    2196:	33 1f       	adc	r19, r19
    2198:	8c 81       	ldd	r24, Y+4	; 0x04
    219a:	9d 81       	ldd	r25, Y+5	; 0x05
    219c:	fc 01       	movw	r30, r24
    219e:	e2 0f       	add	r30, r18
    21a0:	f3 1f       	adc	r31, r19
    21a2:	83 81       	ldd	r24, Z+3	; 0x03
    21a4:	88 23       	and	r24, r24
    21a6:	09 f0       	breq	.+2      	; 0x21aa <Port_Init+0x3e0>
    21a8:	6b c0       	rjmp	.+214    	; 0x2280 <Port_Init+0x4b6>
						{
							switch(Local_port)
    21aa:	89 81       	ldd	r24, Y+1	; 0x01
    21ac:	28 2f       	mov	r18, r24
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	3f 83       	std	Y+7, r19	; 0x07
    21b2:	2e 83       	std	Y+6, r18	; 0x06
    21b4:	6e 81       	ldd	r22, Y+6	; 0x06
    21b6:	7f 81       	ldd	r23, Y+7	; 0x07
    21b8:	62 30       	cpi	r22, 0x02	; 2
    21ba:	71 05       	cpc	r23, r1
    21bc:	49 f1       	breq	.+82     	; 0x2210 <Port_Init+0x446>
    21be:	8e 81       	ldd	r24, Y+6	; 0x06
    21c0:	9f 81       	ldd	r25, Y+7	; 0x07
    21c2:	83 30       	cpi	r24, 0x03	; 3
    21c4:	91 05       	cpc	r25, r1
    21c6:	34 f4       	brge	.+12     	; 0x21d4 <Port_Init+0x40a>
    21c8:	2e 81       	ldd	r18, Y+6	; 0x06
    21ca:	3f 81       	ldd	r19, Y+7	; 0x07
    21cc:	21 30       	cpi	r18, 0x01	; 1
    21ce:	31 05       	cpc	r19, r1
    21d0:	61 f0       	breq	.+24     	; 0x21ea <Port_Init+0x420>
    21d2:	56 c0       	rjmp	.+172    	; 0x2280 <Port_Init+0x4b6>
    21d4:	6e 81       	ldd	r22, Y+6	; 0x06
    21d6:	7f 81       	ldd	r23, Y+7	; 0x07
    21d8:	63 30       	cpi	r22, 0x03	; 3
    21da:	71 05       	cpc	r23, r1
    21dc:	61 f1       	breq	.+88     	; 0x2236 <Port_Init+0x46c>
    21de:	8e 81       	ldd	r24, Y+6	; 0x06
    21e0:	9f 81       	ldd	r25, Y+7	; 0x07
    21e2:	84 30       	cpi	r24, 0x04	; 4
    21e4:	91 05       	cpc	r25, r1
    21e6:	d1 f1       	breq	.+116    	; 0x225c <Port_Init+0x492>
    21e8:	4b c0       	rjmp	.+150    	; 0x2280 <Port_Init+0x4b6>
							{
							case PORT_PORTA:PORTA_REG |= (u8)(1<< Local_pin);break;
    21ea:	ab e3       	ldi	r26, 0x3B	; 59
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	eb e3       	ldi	r30, 0x3B	; 59
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	40 81       	ld	r20, Z
    21f4:	8a 81       	ldd	r24, Y+2	; 0x02
    21f6:	28 2f       	mov	r18, r24
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	02 2e       	mov	r0, r18
    2200:	02 c0       	rjmp	.+4      	; 0x2206 <Port_Init+0x43c>
    2202:	88 0f       	add	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	0a 94       	dec	r0
    2208:	e2 f7       	brpl	.-8      	; 0x2202 <Port_Init+0x438>
    220a:	84 2b       	or	r24, r20
    220c:	8c 93       	st	X, r24
    220e:	38 c0       	rjmp	.+112    	; 0x2280 <Port_Init+0x4b6>
							case PORT_PORTB:PORTB_REG |= (u8)(1<< Local_pin);break;
    2210:	a8 e3       	ldi	r26, 0x38	; 56
    2212:	b0 e0       	ldi	r27, 0x00	; 0
    2214:	e8 e3       	ldi	r30, 0x38	; 56
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	40 81       	ld	r20, Z
    221a:	8a 81       	ldd	r24, Y+2	; 0x02
    221c:	28 2f       	mov	r18, r24
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	02 2e       	mov	r0, r18
    2226:	02 c0       	rjmp	.+4      	; 0x222c <Port_Init+0x462>
    2228:	88 0f       	add	r24, r24
    222a:	99 1f       	adc	r25, r25
    222c:	0a 94       	dec	r0
    222e:	e2 f7       	brpl	.-8      	; 0x2228 <Port_Init+0x45e>
    2230:	84 2b       	or	r24, r20
    2232:	8c 93       	st	X, r24
    2234:	25 c0       	rjmp	.+74     	; 0x2280 <Port_Init+0x4b6>
							case PORT_PORTC:PORTC_REG |= (u8)(1<< Local_pin);break;
    2236:	a5 e3       	ldi	r26, 0x35	; 53
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	e5 e3       	ldi	r30, 0x35	; 53
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	40 81       	ld	r20, Z
    2240:	8a 81       	ldd	r24, Y+2	; 0x02
    2242:	28 2f       	mov	r18, r24
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	02 2e       	mov	r0, r18
    224c:	02 c0       	rjmp	.+4      	; 0x2252 <Port_Init+0x488>
    224e:	88 0f       	add	r24, r24
    2250:	99 1f       	adc	r25, r25
    2252:	0a 94       	dec	r0
    2254:	e2 f7       	brpl	.-8      	; 0x224e <Port_Init+0x484>
    2256:	84 2b       	or	r24, r20
    2258:	8c 93       	st	X, r24
    225a:	12 c0       	rjmp	.+36     	; 0x2280 <Port_Init+0x4b6>
							case PORT_PORTD:PORTD_REG |= (u8)(1<< Local_pin);break;
    225c:	a2 e3       	ldi	r26, 0x32	; 50
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	e2 e3       	ldi	r30, 0x32	; 50
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	40 81       	ld	r20, Z
    2266:	8a 81       	ldd	r24, Y+2	; 0x02
    2268:	28 2f       	mov	r18, r24
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	02 2e       	mov	r0, r18
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <Port_Init+0x4ae>
    2274:	88 0f       	add	r24, r24
    2276:	99 1f       	adc	r25, r25
    2278:	0a 94       	dec	r0
    227a:	e2 f7       	brpl	.-8      	; 0x2274 <Port_Init+0x4aa>
    227c:	84 2b       	or	r24, r20
    227e:	8c 93       	st	X, r24
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<PORT_PINS_CONFIG_ARR_SIZE;i++)
    2280:	8b 81       	ldd	r24, Y+3	; 0x03
    2282:	8f 5f       	subi	r24, 0xFF	; 255
    2284:	8b 83       	std	Y+3, r24	; 0x03
    2286:	8b 81       	ldd	r24, Y+3	; 0x03
    2288:	80 32       	cpi	r24, 0x20	; 32
    228a:	08 f4       	brcc	.+2      	; 0x228e <Port_Init+0x4c4>
    228c:	b1 cd       	rjmp	.-1182   	; 0x1df0 <Port_Init+0x26>
					//report error
				}

		    }//for
		}//else
}
    228e:	2b 96       	adiw	r28, 0x0b	; 11
    2290:	0f b6       	in	r0, 0x3f	; 63
    2292:	f8 94       	cli
    2294:	de bf       	out	0x3e, r29	; 62
    2296:	0f be       	out	0x3f, r0	; 63
    2298:	cd bf       	out	0x3d, r28	; 61
    229a:	cf 91       	pop	r28
    229c:	df 91       	pop	r29
    229e:	08 95       	ret

000022a0 <GIE_voidEnable>:
#include"STD_TYPES.h"
#include"BIT_MATH.h"
#include"../Mcu_HW.h"

void GIE_voidEnable(void)
{
    22a0:	df 93       	push	r29
    22a2:	cf 93       	push	r28
    22a4:	cd b7       	in	r28, 0x3d	; 61
    22a6:	de b7       	in	r29, 0x3e	; 62
	//Enable GIE for External interrupt
	SET_BIT(SREG,SREG_I);
    22a8:	af e5       	ldi	r26, 0x5F	; 95
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	ef e5       	ldi	r30, 0x5F	; 95
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	80 68       	ori	r24, 0x80	; 128
    22b4:	8c 93       	st	X, r24
}
    22b6:	cf 91       	pop	r28
    22b8:	df 91       	pop	r29
    22ba:	08 95       	ret

000022bc <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    22bc:	df 93       	push	r29
    22be:	cf 93       	push	r28
    22c0:	cd b7       	in	r28, 0x3d	; 61
    22c2:	de b7       	in	r29, 0x3e	; 62
	//Disable GIE for external Interrupt
	CLR_BIT(SREG,SREG_I);
    22c4:	af e5       	ldi	r26, 0x5F	; 95
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	ef e5       	ldi	r30, 0x5F	; 95
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	8f 77       	andi	r24, 0x7F	; 127
    22d0:	8c 93       	st	X, r24
}
    22d2:	cf 91       	pop	r28
    22d4:	df 91       	pop	r29
    22d6:	08 95       	ret

000022d8 <Enable_Int>:
 */
static void (*EXTI_ARRCALLBACK2FUNC[3])(void) ={NULL_POINTER,NULL_POINTER,NULL_POINTER};


void Enable_Int(const EXT_I * ConfigArr)
{
    22d8:	df 93       	push	r29
    22da:	cf 93       	push	r28
    22dc:	cd b7       	in	r28, 0x3d	; 61
    22de:	de b7       	in	r29, 0x3e	; 62
    22e0:	2b 97       	sbiw	r28, 0x0b	; 11
    22e2:	0f b6       	in	r0, 0x3f	; 63
    22e4:	f8 94       	cli
    22e6:	de bf       	out	0x3e, r29	; 62
    22e8:	0f be       	out	0x3f, r0	; 63
    22ea:	cd bf       	out	0x3d, r28	; 61
    22ec:	9b 83       	std	Y+3, r25	; 0x03
    22ee:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter;
	for(Local_u8Counter=0;Local_u8Counter<3;Local_u8Counter++)
    22f0:	19 82       	std	Y+1, r1	; 0x01
    22f2:	0e c1       	rjmp	.+540    	; 0x2510 <Enable_Int+0x238>
	{
		switch(ConfigArr[Local_u8Counter].Interrupt_ID)
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	88 2f       	mov	r24, r24
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	9c 01       	movw	r18, r24
    22fc:	22 0f       	add	r18, r18
    22fe:	33 1f       	adc	r19, r19
    2300:	8a 81       	ldd	r24, Y+2	; 0x02
    2302:	9b 81       	ldd	r25, Y+3	; 0x03
    2304:	fc 01       	movw	r30, r24
    2306:	e2 0f       	add	r30, r18
    2308:	f3 1f       	adc	r31, r19
    230a:	80 81       	ld	r24, Z
    230c:	28 2f       	mov	r18, r24
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	3b 87       	std	Y+11, r19	; 0x0b
    2312:	2a 87       	std	Y+10, r18	; 0x0a
    2314:	8a 85       	ldd	r24, Y+10	; 0x0a
    2316:	9b 85       	ldd	r25, Y+11	; 0x0b
    2318:	81 30       	cpi	r24, 0x01	; 1
    231a:	91 05       	cpc	r25, r1
    231c:	09 f4       	brne	.+2      	; 0x2320 <Enable_Int+0x48>
    231e:	4a c0       	rjmp	.+148    	; 0x23b4 <Enable_Int+0xdc>
    2320:	2a 85       	ldd	r18, Y+10	; 0x0a
    2322:	3b 85       	ldd	r19, Y+11	; 0x0b
    2324:	22 30       	cpi	r18, 0x02	; 2
    2326:	31 05       	cpc	r19, r1
    2328:	09 f4       	brne	.+2      	; 0x232c <Enable_Int+0x54>
    232a:	b1 c0       	rjmp	.+354    	; 0x248e <Enable_Int+0x1b6>
    232c:	8a 85       	ldd	r24, Y+10	; 0x0a
    232e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2330:	00 97       	sbiw	r24, 0x00	; 0
    2332:	09 f0       	breq	.+2      	; 0x2336 <Enable_Int+0x5e>
    2334:	ea c0       	rjmp	.+468    	; 0x250a <Enable_Int+0x232>
		{
		case EXTI0:
			switch(ConfigArr[Local_u8Counter].Trigger_value)
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	88 2f       	mov	r24, r24
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	9c 01       	movw	r18, r24
    233e:	22 0f       	add	r18, r18
    2340:	33 1f       	adc	r19, r19
    2342:	8a 81       	ldd	r24, Y+2	; 0x02
    2344:	9b 81       	ldd	r25, Y+3	; 0x03
    2346:	fc 01       	movw	r30, r24
    2348:	e2 0f       	add	r30, r18
    234a:	f3 1f       	adc	r31, r19
    234c:	81 81       	ldd	r24, Z+1	; 0x01
    234e:	28 2f       	mov	r18, r24
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	39 87       	std	Y+9, r19	; 0x09
    2354:	28 87       	std	Y+8, r18	; 0x08
    2356:	88 85       	ldd	r24, Y+8	; 0x08
    2358:	99 85       	ldd	r25, Y+9	; 0x09
    235a:	00 97       	sbiw	r24, 0x00	; 0
    235c:	31 f0       	breq	.+12     	; 0x236a <Enable_Int+0x92>
    235e:	28 85       	ldd	r18, Y+8	; 0x08
    2360:	39 85       	ldd	r19, Y+9	; 0x09
    2362:	21 30       	cpi	r18, 0x01	; 1
    2364:	31 05       	cpc	r19, r1
    2366:	81 f0       	breq	.+32     	; 0x2388 <Enable_Int+0xb0>
    2368:	1d c0       	rjmp	.+58     	; 0x23a4 <Enable_Int+0xcc>
			{
			case Low_level:
				/*set sense control for INT0 To Low level*/
				CLR_BIT(MCUCR,MCUCR_ISC01);
    236a:	a5 e5       	ldi	r26, 0x55	; 85
    236c:	b0 e0       	ldi	r27, 0x00	; 0
    236e:	e5 e5       	ldi	r30, 0x55	; 85
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	8d 7f       	andi	r24, 0xFD	; 253
    2376:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC00);
    2378:	a5 e5       	ldi	r26, 0x55	; 85
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	e5 e5       	ldi	r30, 0x55	; 85
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	80 81       	ld	r24, Z
    2382:	8e 7f       	andi	r24, 0xFE	; 254
    2384:	8c 93       	st	X, r24
    2386:	0e c0       	rjmp	.+28     	; 0x23a4 <Enable_Int+0xcc>
				break;
			case On_change:
				/*set sense control for INT0 To On change*/
				CLR_BIT(MCUCR,MCUCR_ISC01);
    2388:	a5 e5       	ldi	r26, 0x55	; 85
    238a:	b0 e0       	ldi	r27, 0x00	; 0
    238c:	e5 e5       	ldi	r30, 0x55	; 85
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	80 81       	ld	r24, Z
    2392:	8d 7f       	andi	r24, 0xFD	; 253
    2394:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC00);
    2396:	a5 e5       	ldi	r26, 0x55	; 85
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	e5 e5       	ldi	r30, 0x55	; 85
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	80 81       	ld	r24, Z
    23a0:	81 60       	ori	r24, 0x01	; 1
    23a2:	8c 93       	st	X, r24
				break;
			default:
				break;
			}
			/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER ENABLE BIT6*/
			SET_BIT(GICR,GICR_INT0);
    23a4:	ab e5       	ldi	r26, 0x5B	; 91
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	eb e5       	ldi	r30, 0x5B	; 91
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
    23ae:	80 64       	ori	r24, 0x40	; 64
    23b0:	8c 93       	st	X, r24
    23b2:	ab c0       	rjmp	.+342    	; 0x250a <Enable_Int+0x232>
			break;
			case EXTI1:
				switch(ConfigArr[Local_u8Counter].Trigger_value)
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	88 2f       	mov	r24, r24
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	9c 01       	movw	r18, r24
    23bc:	22 0f       	add	r18, r18
    23be:	33 1f       	adc	r19, r19
    23c0:	8a 81       	ldd	r24, Y+2	; 0x02
    23c2:	9b 81       	ldd	r25, Y+3	; 0x03
    23c4:	fc 01       	movw	r30, r24
    23c6:	e2 0f       	add	r30, r18
    23c8:	f3 1f       	adc	r31, r19
    23ca:	81 81       	ldd	r24, Z+1	; 0x01
    23cc:	28 2f       	mov	r18, r24
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	3f 83       	std	Y+7, r19	; 0x07
    23d2:	2e 83       	std	Y+6, r18	; 0x06
    23d4:	8e 81       	ldd	r24, Y+6	; 0x06
    23d6:	9f 81       	ldd	r25, Y+7	; 0x07
    23d8:	81 30       	cpi	r24, 0x01	; 1
    23da:	91 05       	cpc	r25, r1
    23dc:	21 f1       	breq	.+72     	; 0x2426 <Enable_Int+0x14e>
    23de:	2e 81       	ldd	r18, Y+6	; 0x06
    23e0:	3f 81       	ldd	r19, Y+7	; 0x07
    23e2:	22 30       	cpi	r18, 0x02	; 2
    23e4:	31 05       	cpc	r19, r1
    23e6:	2c f4       	brge	.+10     	; 0x23f2 <Enable_Int+0x11a>
    23e8:	8e 81       	ldd	r24, Y+6	; 0x06
    23ea:	9f 81       	ldd	r25, Y+7	; 0x07
    23ec:	00 97       	sbiw	r24, 0x00	; 0
    23ee:	61 f0       	breq	.+24     	; 0x2408 <Enable_Int+0x130>
    23f0:	46 c0       	rjmp	.+140    	; 0x247e <Enable_Int+0x1a6>
    23f2:	2e 81       	ldd	r18, Y+6	; 0x06
    23f4:	3f 81       	ldd	r19, Y+7	; 0x07
    23f6:	22 30       	cpi	r18, 0x02	; 2
    23f8:	31 05       	cpc	r19, r1
    23fa:	21 f1       	breq	.+72     	; 0x2444 <Enable_Int+0x16c>
    23fc:	8e 81       	ldd	r24, Y+6	; 0x06
    23fe:	9f 81       	ldd	r25, Y+7	; 0x07
    2400:	83 30       	cpi	r24, 0x03	; 3
    2402:	91 05       	cpc	r25, r1
    2404:	71 f1       	breq	.+92     	; 0x2462 <Enable_Int+0x18a>
    2406:	3b c0       	rjmp	.+118    	; 0x247e <Enable_Int+0x1a6>
				{
				case Low_level:
					/*set sense control for INT0 To falling edge*/
					SET_BIT(MCUCR,MCUCR_ISC01);
    2408:	a5 e5       	ldi	r26, 0x55	; 85
    240a:	b0 e0       	ldi	r27, 0x00	; 0
    240c:	e5 e5       	ldi	r30, 0x55	; 85
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	80 81       	ld	r24, Z
    2412:	82 60       	ori	r24, 0x02	; 2
    2414:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,MCUCR_ISC00);
    2416:	a5 e5       	ldi	r26, 0x55	; 85
    2418:	b0 e0       	ldi	r27, 0x00	; 0
    241a:	e5 e5       	ldi	r30, 0x55	; 85
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	80 81       	ld	r24, Z
    2420:	8e 7f       	andi	r24, 0xFE	; 254
    2422:	8c 93       	st	X, r24
    2424:	2c c0       	rjmp	.+88     	; 0x247e <Enable_Int+0x1a6>
					break;
				case On_change:
					/*set sense control for INT0 To On change*/
					CLR_BIT(MCUCR,MCUCR_ISC01);
    2426:	a5 e5       	ldi	r26, 0x55	; 85
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	e5 e5       	ldi	r30, 0x55	; 85
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	8d 7f       	andi	r24, 0xFD	; 253
    2432:	8c 93       	st	X, r24
					SET_BIT(MCUCR,MCUCR_ISC00);
    2434:	a5 e5       	ldi	r26, 0x55	; 85
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	e5 e5       	ldi	r30, 0x55	; 85
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	81 60       	ori	r24, 0x01	; 1
    2440:	8c 93       	st	X, r24
    2442:	1d c0       	rjmp	.+58     	; 0x247e <Enable_Int+0x1a6>
					break;
				case Falling_edge:
					/*set sense control for INT0 To falling edge*/
					SET_BIT(MCUCR,MCUCR_ISC01);
    2444:	a5 e5       	ldi	r26, 0x55	; 85
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	e5 e5       	ldi	r30, 0x55	; 85
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	82 60       	ori	r24, 0x02	; 2
    2450:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,MCUCR_ISC00);
    2452:	a5 e5       	ldi	r26, 0x55	; 85
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	e5 e5       	ldi	r30, 0x55	; 85
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	8e 7f       	andi	r24, 0xFE	; 254
    245e:	8c 93       	st	X, r24
    2460:	0e c0       	rjmp	.+28     	; 0x247e <Enable_Int+0x1a6>
					break;
				case Rising_edge:
					/*set sense control for INT0 To Rising edge*/
					SET_BIT(MCUCR,MCUCR_ISC01);
    2462:	a5 e5       	ldi	r26, 0x55	; 85
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	e5 e5       	ldi	r30, 0x55	; 85
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	82 60       	ori	r24, 0x02	; 2
    246e:	8c 93       	st	X, r24
					SET_BIT(MCUCR,MCUCR_ISC00);
    2470:	a5 e5       	ldi	r26, 0x55	; 85
    2472:	b0 e0       	ldi	r27, 0x00	; 0
    2474:	e5 e5       	ldi	r30, 0x55	; 85
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	81 60       	ori	r24, 0x01	; 1
    247c:	8c 93       	st	X, r24
					break;
				default:
					break;
				}
				/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER ENABLE BIT7*/
				SET_BIT(GICR,GICR_INT1);
    247e:	ab e5       	ldi	r26, 0x5B	; 91
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	eb e5       	ldi	r30, 0x5B	; 91
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	80 68       	ori	r24, 0x80	; 128
    248a:	8c 93       	st	X, r24
    248c:	3e c0       	rjmp	.+124    	; 0x250a <Enable_Int+0x232>
				break;
				case EXTI2:
					switch(ConfigArr[Local_u8Counter].Trigger_value)
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	88 2f       	mov	r24, r24
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	9c 01       	movw	r18, r24
    2496:	22 0f       	add	r18, r18
    2498:	33 1f       	adc	r19, r19
    249a:	8a 81       	ldd	r24, Y+2	; 0x02
    249c:	9b 81       	ldd	r25, Y+3	; 0x03
    249e:	fc 01       	movw	r30, r24
    24a0:	e2 0f       	add	r30, r18
    24a2:	f3 1f       	adc	r31, r19
    24a4:	81 81       	ldd	r24, Z+1	; 0x01
    24a6:	28 2f       	mov	r18, r24
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	3d 83       	std	Y+5, r19	; 0x05
    24ac:	2c 83       	std	Y+4, r18	; 0x04
    24ae:	8c 81       	ldd	r24, Y+4	; 0x04
    24b0:	9d 81       	ldd	r25, Y+5	; 0x05
    24b2:	00 97       	sbiw	r24, 0x00	; 0
    24b4:	31 f0       	breq	.+12     	; 0x24c2 <Enable_Int+0x1ea>
    24b6:	2c 81       	ldd	r18, Y+4	; 0x04
    24b8:	3d 81       	ldd	r19, Y+5	; 0x05
    24ba:	21 30       	cpi	r18, 0x01	; 1
    24bc:	31 05       	cpc	r19, r1
    24be:	81 f0       	breq	.+32     	; 0x24e0 <Enable_Int+0x208>
    24c0:	1d c0       	rjmp	.+58     	; 0x24fc <Enable_Int+0x224>
					{
					case Low_level:
						/*set sense control for INT0 To falling edge*/
						SET_BIT(MCUCR,MCUCR_ISC01);
    24c2:	a5 e5       	ldi	r26, 0x55	; 85
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	e5 e5       	ldi	r30, 0x55	; 85
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	80 81       	ld	r24, Z
    24cc:	82 60       	ori	r24, 0x02	; 2
    24ce:	8c 93       	st	X, r24
						CLR_BIT(MCUCR,MCUCR_ISC00);
    24d0:	a5 e5       	ldi	r26, 0x55	; 85
    24d2:	b0 e0       	ldi	r27, 0x00	; 0
    24d4:	e5 e5       	ldi	r30, 0x55	; 85
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	80 81       	ld	r24, Z
    24da:	8e 7f       	andi	r24, 0xFE	; 254
    24dc:	8c 93       	st	X, r24
    24de:	0e c0       	rjmp	.+28     	; 0x24fc <Enable_Int+0x224>
						break;
					case On_change:
						/*set sense control for INT0 To On change*/
						CLR_BIT(MCUCR,MCUCR_ISC01);
    24e0:	a5 e5       	ldi	r26, 0x55	; 85
    24e2:	b0 e0       	ldi	r27, 0x00	; 0
    24e4:	e5 e5       	ldi	r30, 0x55	; 85
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	80 81       	ld	r24, Z
    24ea:	8d 7f       	andi	r24, 0xFD	; 253
    24ec:	8c 93       	st	X, r24
						SET_BIT(MCUCR,MCUCR_ISC00);
    24ee:	a5 e5       	ldi	r26, 0x55	; 85
    24f0:	b0 e0       	ldi	r27, 0x00	; 0
    24f2:	e5 e5       	ldi	r30, 0x55	; 85
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	80 81       	ld	r24, Z
    24f8:	81 60       	ori	r24, 0x01	; 1
    24fa:	8c 93       	st	X, r24
						break;
					default:
						break;
					}
					/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER ENABLE BIT5*/
					SET_BIT(GICR,GICR_INT2);
    24fc:	ab e5       	ldi	r26, 0x5B	; 91
    24fe:	b0 e0       	ldi	r27, 0x00	; 0
    2500:	eb e5       	ldi	r30, 0x5B	; 91
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	80 62       	ori	r24, 0x20	; 32
    2508:	8c 93       	st	X, r24


void Enable_Int(const EXT_I * ConfigArr)
{
	u8 Local_u8Counter;
	for(Local_u8Counter=0;Local_u8Counter<3;Local_u8Counter++)
    250a:	89 81       	ldd	r24, Y+1	; 0x01
    250c:	8f 5f       	subi	r24, 0xFF	; 255
    250e:	89 83       	std	Y+1, r24	; 0x01
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	83 30       	cpi	r24, 0x03	; 3
    2514:	08 f4       	brcc	.+2      	; 0x2518 <Enable_Int+0x240>
    2516:	ee ce       	rjmp	.-548    	; 0x22f4 <Enable_Int+0x1c>
					SET_BIT(GICR,GICR_INT2);
					break;
		}
	}

}
    2518:	2b 96       	adiw	r28, 0x0b	; 11
    251a:	0f b6       	in	r0, 0x3f	; 63
    251c:	f8 94       	cli
    251e:	de bf       	out	0x3e, r29	; 62
    2520:	0f be       	out	0x3f, r0	; 63
    2522:	cd bf       	out	0x3d, r28	; 61
    2524:	cf 91       	pop	r28
    2526:	df 91       	pop	r29
    2528:	08 95       	ret

0000252a <Disable_Int>:

void Disable_Int(const EXT_I * ConfigArr)
{
    252a:	df 93       	push	r29
    252c:	cf 93       	push	r28
    252e:	00 d0       	rcall	.+0      	; 0x2530 <Disable_Int+0x6>
    2530:	00 d0       	rcall	.+0      	; 0x2532 <Disable_Int+0x8>
    2532:	cd b7       	in	r28, 0x3d	; 61
    2534:	de b7       	in	r29, 0x3e	; 62
    2536:	9a 83       	std	Y+2, r25	; 0x02
    2538:	89 83       	std	Y+1, r24	; 0x01
	switch(ConfigArr->Interrupt_ID)
    253a:	e9 81       	ldd	r30, Y+1	; 0x01
    253c:	fa 81       	ldd	r31, Y+2	; 0x02
    253e:	80 81       	ld	r24, Z
    2540:	28 2f       	mov	r18, r24
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	3c 83       	std	Y+4, r19	; 0x04
    2546:	2b 83       	std	Y+3, r18	; 0x03
    2548:	8b 81       	ldd	r24, Y+3	; 0x03
    254a:	9c 81       	ldd	r25, Y+4	; 0x04
    254c:	81 30       	cpi	r24, 0x01	; 1
    254e:	91 05       	cpc	r25, r1
    2550:	89 f0       	breq	.+34     	; 0x2574 <Disable_Int+0x4a>
    2552:	2b 81       	ldd	r18, Y+3	; 0x03
    2554:	3c 81       	ldd	r19, Y+4	; 0x04
    2556:	22 30       	cpi	r18, 0x02	; 2
    2558:	31 05       	cpc	r19, r1
    255a:	a1 f0       	breq	.+40     	; 0x2584 <Disable_Int+0x5a>
    255c:	8b 81       	ldd	r24, Y+3	; 0x03
    255e:	9c 81       	ldd	r25, Y+4	; 0x04
    2560:	00 97       	sbiw	r24, 0x00	; 0
    2562:	b9 f4       	brne	.+46     	; 0x2592 <Disable_Int+0x68>
	{
	case EXTI0:
		/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER DISABLE BIT6*/
		CLR_BIT(GICR,GICR_INT0);
    2564:	ab e5       	ldi	r26, 0x5B	; 91
    2566:	b0 e0       	ldi	r27, 0x00	; 0
    2568:	eb e5       	ldi	r30, 0x5B	; 91
    256a:	f0 e0       	ldi	r31, 0x00	; 0
    256c:	80 81       	ld	r24, Z
    256e:	8f 7b       	andi	r24, 0xBF	; 191
    2570:	8c 93       	st	X, r24
    2572:	0f c0       	rjmp	.+30     	; 0x2592 <Disable_Int+0x68>
		break;
	case EXTI1:
		/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER DISABLE BIT7*/
		CLR_BIT(GICR,GICR_INT1);
    2574:	ab e5       	ldi	r26, 0x5B	; 91
    2576:	b0 e0       	ldi	r27, 0x00	; 0
    2578:	eb e5       	ldi	r30, 0x5B	; 91
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	80 81       	ld	r24, Z
    257e:	8f 77       	andi	r24, 0x7F	; 127
    2580:	8c 93       	st	X, r24
    2582:	07 c0       	rjmp	.+14     	; 0x2592 <Disable_Int+0x68>
		break;
	case EXTI2:
		/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER DISABLE BIT5*/
		CLR_BIT(GICR,GICR_INT2);
    2584:	ab e5       	ldi	r26, 0x5B	; 91
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	eb e5       	ldi	r30, 0x5B	; 91
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	80 81       	ld	r24, Z
    258e:	8f 7d       	andi	r24, 0xDF	; 223
    2590:	8c 93       	st	X, r24
		break;
	}
}
    2592:	0f 90       	pop	r0
    2594:	0f 90       	pop	r0
    2596:	0f 90       	pop	r0
    2598:	0f 90       	pop	r0
    259a:	cf 91       	pop	r28
    259c:	df 91       	pop	r29
    259e:	08 95       	ret

000025a0 <EXTI_u8INTSetCallBack>:
u8 EXTI_u8INTSetCallBack(const EXT_I * ConfigArr,void (*Copy_pvINTFunc)(void))
{
    25a0:	df 93       	push	r29
    25a2:	cf 93       	push	r28
    25a4:	cd b7       	in	r28, 0x3d	; 61
    25a6:	de b7       	in	r29, 0x3e	; 62
    25a8:	28 97       	sbiw	r28, 0x08	; 8
    25aa:	0f b6       	in	r0, 0x3f	; 63
    25ac:	f8 94       	cli
    25ae:	de bf       	out	0x3e, r29	; 62
    25b0:	0f be       	out	0x3f, r0	; 63
    25b2:	cd bf       	out	0x3d, r28	; 61
    25b4:	9c 83       	std	Y+4, r25	; 0x04
    25b6:	8b 83       	std	Y+3, r24	; 0x03
    25b8:	7e 83       	std	Y+6, r23	; 0x06
    25ba:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8ErrorStatus=NO_ERROR;
    25bc:	82 e0       	ldi	r24, 0x02	; 2
    25be:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8counter;
	for(Local_u8counter=0;Local_u8counter<3;Local_u8counter++)
    25c0:	19 82       	std	Y+1, r1	; 0x01
    25c2:	59 c0       	rjmp	.+178    	; 0x2676 <EXTI_u8INTSetCallBack+0xd6>
	{
		switch(ConfigArr[Local_u8counter].Interrupt_ID)
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	88 2f       	mov	r24, r24
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	9c 01       	movw	r18, r24
    25cc:	22 0f       	add	r18, r18
    25ce:	33 1f       	adc	r19, r19
    25d0:	8b 81       	ldd	r24, Y+3	; 0x03
    25d2:	9c 81       	ldd	r25, Y+4	; 0x04
    25d4:	fc 01       	movw	r30, r24
    25d6:	e2 0f       	add	r30, r18
    25d8:	f3 1f       	adc	r31, r19
    25da:	80 81       	ld	r24, Z
    25dc:	28 2f       	mov	r18, r24
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	38 87       	std	Y+8, r19	; 0x08
    25e2:	2f 83       	std	Y+7, r18	; 0x07
    25e4:	8f 81       	ldd	r24, Y+7	; 0x07
    25e6:	98 85       	ldd	r25, Y+8	; 0x08
    25e8:	81 30       	cpi	r24, 0x01	; 1
    25ea:	91 05       	cpc	r25, r1
    25ec:	e1 f0       	breq	.+56     	; 0x2626 <EXTI_u8INTSetCallBack+0x86>
    25ee:	2f 81       	ldd	r18, Y+7	; 0x07
    25f0:	38 85       	ldd	r19, Y+8	; 0x08
    25f2:	22 30       	cpi	r18, 0x02	; 2
    25f4:	31 05       	cpc	r19, r1
    25f6:	51 f1       	breq	.+84     	; 0x264c <EXTI_u8INTSetCallBack+0xac>
    25f8:	8f 81       	ldd	r24, Y+7	; 0x07
    25fa:	98 85       	ldd	r25, Y+8	; 0x08
    25fc:	00 97       	sbiw	r24, 0x00	; 0
    25fe:	c1 f5       	brne	.+112    	; 0x2670 <EXTI_u8INTSetCallBack+0xd0>
		{
		case EXTI0:
			if(Copy_pvINTFunc != NULL)
    2600:	8d 81       	ldd	r24, Y+5	; 0x05
    2602:	9e 81       	ldd	r25, Y+6	; 0x06
    2604:	00 97       	sbiw	r24, 0x00	; 0
    2606:	69 f0       	breq	.+26     	; 0x2622 <EXTI_u8INTSetCallBack+0x82>
			{
				EXTI_ARRCALLBACK2FUNC[Local_u8counter]=Copy_pvINTFunc;
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	88 2f       	mov	r24, r24
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	88 0f       	add	r24, r24
    2610:	99 1f       	adc	r25, r25
    2612:	fc 01       	movw	r30, r24
    2614:	e7 54       	subi	r30, 0x47	; 71
    2616:	fd 4f       	sbci	r31, 0xFD	; 253
    2618:	8d 81       	ldd	r24, Y+5	; 0x05
    261a:	9e 81       	ldd	r25, Y+6	; 0x06
    261c:	91 83       	std	Z+1, r25	; 0x01
    261e:	80 83       	st	Z, r24
    2620:	27 c0       	rjmp	.+78     	; 0x2670 <EXTI_u8INTSetCallBack+0xd0>
			}
			else
			{
				Local_u8ErrorStatus = NULL_POINTER;
    2622:	1a 82       	std	Y+2, r1	; 0x02
    2624:	25 c0       	rjmp	.+74     	; 0x2670 <EXTI_u8INTSetCallBack+0xd0>
			}
			break;
		case EXTI1:
			if(Copy_pvINTFunc != NULL)
    2626:	8d 81       	ldd	r24, Y+5	; 0x05
    2628:	9e 81       	ldd	r25, Y+6	; 0x06
    262a:	00 97       	sbiw	r24, 0x00	; 0
    262c:	69 f0       	breq	.+26     	; 0x2648 <EXTI_u8INTSetCallBack+0xa8>
			{
				EXTI_ARRCALLBACK2FUNC[Local_u8counter]=Copy_pvINTFunc;
    262e:	89 81       	ldd	r24, Y+1	; 0x01
    2630:	88 2f       	mov	r24, r24
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	88 0f       	add	r24, r24
    2636:	99 1f       	adc	r25, r25
    2638:	fc 01       	movw	r30, r24
    263a:	e7 54       	subi	r30, 0x47	; 71
    263c:	fd 4f       	sbci	r31, 0xFD	; 253
    263e:	8d 81       	ldd	r24, Y+5	; 0x05
    2640:	9e 81       	ldd	r25, Y+6	; 0x06
    2642:	91 83       	std	Z+1, r25	; 0x01
    2644:	80 83       	st	Z, r24
    2646:	14 c0       	rjmp	.+40     	; 0x2670 <EXTI_u8INTSetCallBack+0xd0>
			}
			else
			{
				Local_u8ErrorStatus = NULL_POINTER;
    2648:	1a 82       	std	Y+2, r1	; 0x02
    264a:	12 c0       	rjmp	.+36     	; 0x2670 <EXTI_u8INTSetCallBack+0xd0>
			}
			break;
		case EXTI2:
			if(Copy_pvINTFunc != NULL)
    264c:	8d 81       	ldd	r24, Y+5	; 0x05
    264e:	9e 81       	ldd	r25, Y+6	; 0x06
    2650:	00 97       	sbiw	r24, 0x00	; 0
    2652:	69 f0       	breq	.+26     	; 0x266e <EXTI_u8INTSetCallBack+0xce>
			{
				EXTI_ARRCALLBACK2FUNC[Local_u8counter]=Copy_pvINTFunc;
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	88 2f       	mov	r24, r24
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	88 0f       	add	r24, r24
    265c:	99 1f       	adc	r25, r25
    265e:	fc 01       	movw	r30, r24
    2660:	e7 54       	subi	r30, 0x47	; 71
    2662:	fd 4f       	sbci	r31, 0xFD	; 253
    2664:	8d 81       	ldd	r24, Y+5	; 0x05
    2666:	9e 81       	ldd	r25, Y+6	; 0x06
    2668:	91 83       	std	Z+1, r25	; 0x01
    266a:	80 83       	st	Z, r24
    266c:	01 c0       	rjmp	.+2      	; 0x2670 <EXTI_u8INTSetCallBack+0xd0>
			}
			else
			{
				Local_u8ErrorStatus = NULL_POINTER;
    266e:	1a 82       	std	Y+2, r1	; 0x02
}
u8 EXTI_u8INTSetCallBack(const EXT_I * ConfigArr,void (*Copy_pvINTFunc)(void))
{
	u8 Local_u8ErrorStatus=NO_ERROR;
	u8 Local_u8counter;
	for(Local_u8counter=0;Local_u8counter<3;Local_u8counter++)
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	8f 5f       	subi	r24, 0xFF	; 255
    2674:	89 83       	std	Y+1, r24	; 0x01
    2676:	89 81       	ldd	r24, Y+1	; 0x01
    2678:	83 30       	cpi	r24, 0x03	; 3
    267a:	08 f4       	brcc	.+2      	; 0x267e <EXTI_u8INTSetCallBack+0xde>
    267c:	a3 cf       	rjmp	.-186    	; 0x25c4 <EXTI_u8INTSetCallBack+0x24>
			}
			break;
		}
	}

	return Local_u8ErrorStatus;
    267e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2680:	28 96       	adiw	r28, 0x08	; 8
    2682:	0f b6       	in	r0, 0x3f	; 63
    2684:	f8 94       	cli
    2686:	de bf       	out	0x3e, r29	; 62
    2688:	0f be       	out	0x3f, r0	; 63
    268a:	cd bf       	out	0x3d, r28	; 61
    268c:	cf 91       	pop	r28
    268e:	df 91       	pop	r29
    2690:	08 95       	ret

00002692 <__vector_1>:

ISR(INT0_vect)
{
    2692:	1f 92       	push	r1
    2694:	0f 92       	push	r0
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	0f 92       	push	r0
    269a:	11 24       	eor	r1, r1
    269c:	2f 93       	push	r18
    269e:	3f 93       	push	r19
    26a0:	4f 93       	push	r20
    26a2:	5f 93       	push	r21
    26a4:	6f 93       	push	r22
    26a6:	7f 93       	push	r23
    26a8:	8f 93       	push	r24
    26aa:	9f 93       	push	r25
    26ac:	af 93       	push	r26
    26ae:	bf 93       	push	r27
    26b0:	ef 93       	push	r30
    26b2:	ff 93       	push	r31
    26b4:	df 93       	push	r29
    26b6:	cf 93       	push	r28
    26b8:	cd b7       	in	r28, 0x3d	; 61
    26ba:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ARRCALLBACK2FUNC[0] != NULL)
    26bc:	80 91 b9 02 	lds	r24, 0x02B9
    26c0:	90 91 ba 02 	lds	r25, 0x02BA
    26c4:	00 97       	sbiw	r24, 0x00	; 0
    26c6:	29 f0       	breq	.+10     	; 0x26d2 <__vector_1+0x40>
		{
		EXTI_ARRCALLBACK2FUNC[0]();
    26c8:	e0 91 b9 02 	lds	r30, 0x02B9
    26cc:	f0 91 ba 02 	lds	r31, 0x02BA
    26d0:	09 95       	icall
		}
		else
		{
			/*Stop*/
		}
}
    26d2:	cf 91       	pop	r28
    26d4:	df 91       	pop	r29
    26d6:	ff 91       	pop	r31
    26d8:	ef 91       	pop	r30
    26da:	bf 91       	pop	r27
    26dc:	af 91       	pop	r26
    26de:	9f 91       	pop	r25
    26e0:	8f 91       	pop	r24
    26e2:	7f 91       	pop	r23
    26e4:	6f 91       	pop	r22
    26e6:	5f 91       	pop	r21
    26e8:	4f 91       	pop	r20
    26ea:	3f 91       	pop	r19
    26ec:	2f 91       	pop	r18
    26ee:	0f 90       	pop	r0
    26f0:	0f be       	out	0x3f, r0	; 63
    26f2:	0f 90       	pop	r0
    26f4:	1f 90       	pop	r1
    26f6:	18 95       	reti

000026f8 <__vector_2>:
ISR(INT1_vect)
{
    26f8:	1f 92       	push	r1
    26fa:	0f 92       	push	r0
    26fc:	0f b6       	in	r0, 0x3f	; 63
    26fe:	0f 92       	push	r0
    2700:	11 24       	eor	r1, r1
    2702:	df 93       	push	r29
    2704:	cf 93       	push	r28
    2706:	cd b7       	in	r28, 0x3d	; 61
    2708:	de b7       	in	r29, 0x3e	; 62

}
    270a:	cf 91       	pop	r28
    270c:	df 91       	pop	r29
    270e:	0f 90       	pop	r0
    2710:	0f be       	out	0x3f, r0	; 63
    2712:	0f 90       	pop	r0
    2714:	1f 90       	pop	r1
    2716:	18 95       	reti

00002718 <__vector_3>:
ISR(INT2_vect)
{
    2718:	1f 92       	push	r1
    271a:	0f 92       	push	r0
    271c:	0f b6       	in	r0, 0x3f	; 63
    271e:	0f 92       	push	r0
    2720:	11 24       	eor	r1, r1
    2722:	df 93       	push	r29
    2724:	cf 93       	push	r28
    2726:	cd b7       	in	r28, 0x3d	; 61
    2728:	de b7       	in	r29, 0x3e	; 62

}
    272a:	cf 91       	pop	r28
    272c:	df 91       	pop	r29
    272e:	0f 90       	pop	r0
    2730:	0f be       	out	0x3f, r0	; 63
    2732:	0f 90       	pop	r0
    2734:	1f 90       	pop	r1
    2736:	18 95       	reti

00002738 <M_Dio_en_getPinValue>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : Dio_HIGH or DIO_LOW
******************************************/
Dio_LevelType  M_Dio_en_getPinValue(Dio_ChannelType ChannelId)
{
    2738:	df 93       	push	r29
    273a:	cf 93       	push	r28
    273c:	00 d0       	rcall	.+0      	; 0x273e <M_Dio_en_getPinValue+0x6>
    273e:	00 d0       	rcall	.+0      	; 0x2740 <M_Dio_en_getPinValue+0x8>
    2740:	00 d0       	rcall	.+0      	; 0x2742 <M_Dio_en_getPinValue+0xa>
    2742:	cd b7       	in	r28, 0x3d	; 61
    2744:	de b7       	in	r29, 0x3e	; 62
    2746:	8c 83       	std	Y+4, r24	; 0x04
	u8 pin = ChannelId % 10;
    2748:	8c 81       	ldd	r24, Y+4	; 0x04
    274a:	9a e0       	ldi	r25, 0x0A	; 10
    274c:	69 2f       	mov	r22, r25
    274e:	0e 94 ca 22 	call	0x4594	; 0x4594 <__udivmodqi4>
    2752:	89 2f       	mov	r24, r25
    2754:	8b 83       	std	Y+3, r24	; 0x03
	u8 port = ChannelId / 10;
    2756:	8c 81       	ldd	r24, Y+4	; 0x04
    2758:	9a e0       	ldi	r25, 0x0A	; 10
    275a:	69 2f       	mov	r22, r25
    275c:	0e 94 ca 22 	call	0x4594	; 0x4594 <__udivmodqi4>
    2760:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType Local_levelType;
	switch(port)
    2762:	8a 81       	ldd	r24, Y+2	; 0x02
    2764:	28 2f       	mov	r18, r24
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	3e 83       	std	Y+6, r19	; 0x06
    276a:	2d 83       	std	Y+5, r18	; 0x05
    276c:	4d 81       	ldd	r20, Y+5	; 0x05
    276e:	5e 81       	ldd	r21, Y+6	; 0x06
    2770:	42 30       	cpi	r20, 0x02	; 2
    2772:	51 05       	cpc	r21, r1
    2774:	41 f1       	breq	.+80     	; 0x27c6 <M_Dio_en_getPinValue+0x8e>
    2776:	8d 81       	ldd	r24, Y+5	; 0x05
    2778:	9e 81       	ldd	r25, Y+6	; 0x06
    277a:	83 30       	cpi	r24, 0x03	; 3
    277c:	91 05       	cpc	r25, r1
    277e:	34 f4       	brge	.+12     	; 0x278c <M_Dio_en_getPinValue+0x54>
    2780:	2d 81       	ldd	r18, Y+5	; 0x05
    2782:	3e 81       	ldd	r19, Y+6	; 0x06
    2784:	21 30       	cpi	r18, 0x01	; 1
    2786:	31 05       	cpc	r19, r1
    2788:	61 f0       	breq	.+24     	; 0x27a2 <M_Dio_en_getPinValue+0x6a>
    278a:	52 c0       	rjmp	.+164    	; 0x2830 <M_Dio_en_getPinValue+0xf8>
    278c:	4d 81       	ldd	r20, Y+5	; 0x05
    278e:	5e 81       	ldd	r21, Y+6	; 0x06
    2790:	43 30       	cpi	r20, 0x03	; 3
    2792:	51 05       	cpc	r21, r1
    2794:	51 f1       	breq	.+84     	; 0x27ea <M_Dio_en_getPinValue+0xb2>
    2796:	8d 81       	ldd	r24, Y+5	; 0x05
    2798:	9e 81       	ldd	r25, Y+6	; 0x06
    279a:	84 30       	cpi	r24, 0x04	; 4
    279c:	91 05       	cpc	r25, r1
    279e:	b9 f1       	breq	.+110    	; 0x280e <M_Dio_en_getPinValue+0xd6>
    27a0:	47 c0       	rjmp	.+142    	; 0x2830 <M_Dio_en_getPinValue+0xf8>
	{
	case DIO_PORTA :Local_levelType = GET_BIT( PINA_REG,pin);break;
    27a2:	e9 e3       	ldi	r30, 0x39	; 57
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	80 81       	ld	r24, Z
    27a8:	28 2f       	mov	r18, r24
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	8b 81       	ldd	r24, Y+3	; 0x03
    27ae:	88 2f       	mov	r24, r24
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	a9 01       	movw	r20, r18
    27b4:	02 c0       	rjmp	.+4      	; 0x27ba <M_Dio_en_getPinValue+0x82>
    27b6:	55 95       	asr	r21
    27b8:	47 95       	ror	r20
    27ba:	8a 95       	dec	r24
    27bc:	e2 f7       	brpl	.-8      	; 0x27b6 <M_Dio_en_getPinValue+0x7e>
    27be:	ca 01       	movw	r24, r20
    27c0:	81 70       	andi	r24, 0x01	; 1
    27c2:	89 83       	std	Y+1, r24	; 0x01
    27c4:	35 c0       	rjmp	.+106    	; 0x2830 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTB :Local_levelType = GET_BIT( PINB_REG,pin);break;
    27c6:	e6 e3       	ldi	r30, 0x36	; 54
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	28 2f       	mov	r18, r24
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	8b 81       	ldd	r24, Y+3	; 0x03
    27d2:	88 2f       	mov	r24, r24
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	a9 01       	movw	r20, r18
    27d8:	02 c0       	rjmp	.+4      	; 0x27de <M_Dio_en_getPinValue+0xa6>
    27da:	55 95       	asr	r21
    27dc:	47 95       	ror	r20
    27de:	8a 95       	dec	r24
    27e0:	e2 f7       	brpl	.-8      	; 0x27da <M_Dio_en_getPinValue+0xa2>
    27e2:	ca 01       	movw	r24, r20
    27e4:	81 70       	andi	r24, 0x01	; 1
    27e6:	89 83       	std	Y+1, r24	; 0x01
    27e8:	23 c0       	rjmp	.+70     	; 0x2830 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTC :Local_levelType = GET_BIT( PINC_REG,pin);break;
    27ea:	e3 e3       	ldi	r30, 0x33	; 51
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 81       	ld	r24, Z
    27f0:	28 2f       	mov	r18, r24
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	8b 81       	ldd	r24, Y+3	; 0x03
    27f6:	88 2f       	mov	r24, r24
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	a9 01       	movw	r20, r18
    27fc:	02 c0       	rjmp	.+4      	; 0x2802 <M_Dio_en_getPinValue+0xca>
    27fe:	55 95       	asr	r21
    2800:	47 95       	ror	r20
    2802:	8a 95       	dec	r24
    2804:	e2 f7       	brpl	.-8      	; 0x27fe <M_Dio_en_getPinValue+0xc6>
    2806:	ca 01       	movw	r24, r20
    2808:	81 70       	andi	r24, 0x01	; 1
    280a:	89 83       	std	Y+1, r24	; 0x01
    280c:	11 c0       	rjmp	.+34     	; 0x2830 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTD :Local_levelType = GET_BIT( PIND_REG,pin);break;
    280e:	e0 e3       	ldi	r30, 0x30	; 48
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	80 81       	ld	r24, Z
    2814:	28 2f       	mov	r18, r24
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	8b 81       	ldd	r24, Y+3	; 0x03
    281a:	88 2f       	mov	r24, r24
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	a9 01       	movw	r20, r18
    2820:	02 c0       	rjmp	.+4      	; 0x2826 <M_Dio_en_getPinValue+0xee>
    2822:	55 95       	asr	r21
    2824:	47 95       	ror	r20
    2826:	8a 95       	dec	r24
    2828:	e2 f7       	brpl	.-8      	; 0x2822 <M_Dio_en_getPinValue+0xea>
    282a:	ca 01       	movw	r24, r20
    282c:	81 70       	andi	r24, 0x01	; 1
    282e:	89 83       	std	Y+1, r24	; 0x01
	}
    return Local_levelType ;
    2830:	89 81       	ldd	r24, Y+1	; 0x01
}
    2832:	26 96       	adiw	r28, 0x06	; 6
    2834:	0f b6       	in	r0, 0x3f	; 63
    2836:	f8 94       	cli
    2838:	de bf       	out	0x3e, r29	; 62
    283a:	0f be       	out	0x3f, r0	; 63
    283c:	cd bf       	out	0x3d, r28	; 61
    283e:	cf 91       	pop	r28
    2840:	df 91       	pop	r29
    2842:	08 95       	ret

00002844 <M_Dio_void_setPinValue>:
  parameters (in)  :  channelId (pin) ,Level (Dio_HIGH or Dio_LOW)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPinValue(Dio_ChannelType ChannelId,Dio_LevelType Level)
{
    2844:	df 93       	push	r29
    2846:	cf 93       	push	r28
    2848:	cd b7       	in	r28, 0x3d	; 61
    284a:	de b7       	in	r29, 0x3e	; 62
    284c:	28 97       	sbiw	r28, 0x08	; 8
    284e:	0f b6       	in	r0, 0x3f	; 63
    2850:	f8 94       	cli
    2852:	de bf       	out	0x3e, r29	; 62
    2854:	0f be       	out	0x3f, r0	; 63
    2856:	cd bf       	out	0x3d, r28	; 61
    2858:	8b 83       	std	Y+3, r24	; 0x03
    285a:	6c 83       	std	Y+4, r22	; 0x04
	u8 pin = ChannelId % 10;
    285c:	8b 81       	ldd	r24, Y+3	; 0x03
    285e:	9a e0       	ldi	r25, 0x0A	; 10
    2860:	69 2f       	mov	r22, r25
    2862:	0e 94 ca 22 	call	0x4594	; 0x4594 <__udivmodqi4>
    2866:	89 2f       	mov	r24, r25
    2868:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = ChannelId / 10;
    286a:	8b 81       	ldd	r24, Y+3	; 0x03
    286c:	9a e0       	ldi	r25, 0x0A	; 10
    286e:	69 2f       	mov	r22, r25
    2870:	0e 94 ca 22 	call	0x4594	; 0x4594 <__udivmodqi4>
    2874:	89 83       	std	Y+1, r24	; 0x01

	if(Level == DIO_HIGH)
    2876:	8c 81       	ldd	r24, Y+4	; 0x04
    2878:	81 30       	cpi	r24, 0x01	; 1
    287a:	09 f0       	breq	.+2      	; 0x287e <M_Dio_void_setPinValue+0x3a>
    287c:	70 c0       	rjmp	.+224    	; 0x295e <M_Dio_void_setPinValue+0x11a>
	{
		switch(port)
    287e:	89 81       	ldd	r24, Y+1	; 0x01
    2880:	28 2f       	mov	r18, r24
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	38 87       	std	Y+8, r19	; 0x08
    2886:	2f 83       	std	Y+7, r18	; 0x07
    2888:	8f 81       	ldd	r24, Y+7	; 0x07
    288a:	98 85       	ldd	r25, Y+8	; 0x08
    288c:	82 30       	cpi	r24, 0x02	; 2
    288e:	91 05       	cpc	r25, r1
    2890:	51 f1       	breq	.+84     	; 0x28e6 <M_Dio_void_setPinValue+0xa2>
    2892:	2f 81       	ldd	r18, Y+7	; 0x07
    2894:	38 85       	ldd	r19, Y+8	; 0x08
    2896:	23 30       	cpi	r18, 0x03	; 3
    2898:	31 05       	cpc	r19, r1
    289a:	34 f4       	brge	.+12     	; 0x28a8 <M_Dio_void_setPinValue+0x64>
    289c:	8f 81       	ldd	r24, Y+7	; 0x07
    289e:	98 85       	ldd	r25, Y+8	; 0x08
    28a0:	81 30       	cpi	r24, 0x01	; 1
    28a2:	91 05       	cpc	r25, r1
    28a4:	61 f0       	breq	.+24     	; 0x28be <M_Dio_void_setPinValue+0x7a>
    28a6:	d3 c0       	rjmp	.+422    	; 0x2a4e <M_Dio_void_setPinValue+0x20a>
    28a8:	2f 81       	ldd	r18, Y+7	; 0x07
    28aa:	38 85       	ldd	r19, Y+8	; 0x08
    28ac:	23 30       	cpi	r18, 0x03	; 3
    28ae:	31 05       	cpc	r19, r1
    28b0:	71 f1       	breq	.+92     	; 0x290e <M_Dio_void_setPinValue+0xca>
    28b2:	8f 81       	ldd	r24, Y+7	; 0x07
    28b4:	98 85       	ldd	r25, Y+8	; 0x08
    28b6:	84 30       	cpi	r24, 0x04	; 4
    28b8:	91 05       	cpc	r25, r1
    28ba:	e9 f1       	breq	.+122    	; 0x2936 <M_Dio_void_setPinValue+0xf2>
    28bc:	c8 c0       	rjmp	.+400    	; 0x2a4e <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : SET_BIT( PORTA_REG,pin);break;
    28be:	ab e3       	ldi	r26, 0x3B	; 59
    28c0:	b0 e0       	ldi	r27, 0x00	; 0
    28c2:	eb e3       	ldi	r30, 0x3B	; 59
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	80 81       	ld	r24, Z
    28c8:	48 2f       	mov	r20, r24
    28ca:	8a 81       	ldd	r24, Y+2	; 0x02
    28cc:	28 2f       	mov	r18, r24
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	02 2e       	mov	r0, r18
    28d6:	02 c0       	rjmp	.+4      	; 0x28dc <M_Dio_void_setPinValue+0x98>
    28d8:	88 0f       	add	r24, r24
    28da:	99 1f       	adc	r25, r25
    28dc:	0a 94       	dec	r0
    28de:	e2 f7       	brpl	.-8      	; 0x28d8 <M_Dio_void_setPinValue+0x94>
    28e0:	84 2b       	or	r24, r20
    28e2:	8c 93       	st	X, r24
    28e4:	b4 c0       	rjmp	.+360    	; 0x2a4e <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : SET_BIT( PORTB_REG,pin);break;
    28e6:	a8 e3       	ldi	r26, 0x38	; 56
    28e8:	b0 e0       	ldi	r27, 0x00	; 0
    28ea:	e8 e3       	ldi	r30, 0x38	; 56
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	80 81       	ld	r24, Z
    28f0:	48 2f       	mov	r20, r24
    28f2:	8a 81       	ldd	r24, Y+2	; 0x02
    28f4:	28 2f       	mov	r18, r24
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	02 2e       	mov	r0, r18
    28fe:	02 c0       	rjmp	.+4      	; 0x2904 <M_Dio_void_setPinValue+0xc0>
    2900:	88 0f       	add	r24, r24
    2902:	99 1f       	adc	r25, r25
    2904:	0a 94       	dec	r0
    2906:	e2 f7       	brpl	.-8      	; 0x2900 <M_Dio_void_setPinValue+0xbc>
    2908:	84 2b       	or	r24, r20
    290a:	8c 93       	st	X, r24
    290c:	a0 c0       	rjmp	.+320    	; 0x2a4e <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : SET_BIT( PORTC_REG,pin);break;
    290e:	a5 e3       	ldi	r26, 0x35	; 53
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	e5 e3       	ldi	r30, 0x35	; 53
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	80 81       	ld	r24, Z
    2918:	48 2f       	mov	r20, r24
    291a:	8a 81       	ldd	r24, Y+2	; 0x02
    291c:	28 2f       	mov	r18, r24
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	02 2e       	mov	r0, r18
    2926:	02 c0       	rjmp	.+4      	; 0x292c <M_Dio_void_setPinValue+0xe8>
    2928:	88 0f       	add	r24, r24
    292a:	99 1f       	adc	r25, r25
    292c:	0a 94       	dec	r0
    292e:	e2 f7       	brpl	.-8      	; 0x2928 <M_Dio_void_setPinValue+0xe4>
    2930:	84 2b       	or	r24, r20
    2932:	8c 93       	st	X, r24
    2934:	8c c0       	rjmp	.+280    	; 0x2a4e <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : SET_BIT( PORTD_REG,pin);break;
    2936:	a2 e3       	ldi	r26, 0x32	; 50
    2938:	b0 e0       	ldi	r27, 0x00	; 0
    293a:	e2 e3       	ldi	r30, 0x32	; 50
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	80 81       	ld	r24, Z
    2940:	48 2f       	mov	r20, r24
    2942:	8a 81       	ldd	r24, Y+2	; 0x02
    2944:	28 2f       	mov	r18, r24
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	02 2e       	mov	r0, r18
    294e:	02 c0       	rjmp	.+4      	; 0x2954 <M_Dio_void_setPinValue+0x110>
    2950:	88 0f       	add	r24, r24
    2952:	99 1f       	adc	r25, r25
    2954:	0a 94       	dec	r0
    2956:	e2 f7       	brpl	.-8      	; 0x2950 <M_Dio_void_setPinValue+0x10c>
    2958:	84 2b       	or	r24, r20
    295a:	8c 93       	st	X, r24
    295c:	78 c0       	rjmp	.+240    	; 0x2a4e <M_Dio_void_setPinValue+0x20a>
		}

	}
	else if (Level == DIO_LOW)
    295e:	8c 81       	ldd	r24, Y+4	; 0x04
    2960:	88 23       	and	r24, r24
    2962:	09 f0       	breq	.+2      	; 0x2966 <M_Dio_void_setPinValue+0x122>
    2964:	74 c0       	rjmp	.+232    	; 0x2a4e <M_Dio_void_setPinValue+0x20a>
	{
		switch(port)
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	28 2f       	mov	r18, r24
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	3e 83       	std	Y+6, r19	; 0x06
    296e:	2d 83       	std	Y+5, r18	; 0x05
    2970:	8d 81       	ldd	r24, Y+5	; 0x05
    2972:	9e 81       	ldd	r25, Y+6	; 0x06
    2974:	82 30       	cpi	r24, 0x02	; 2
    2976:	91 05       	cpc	r25, r1
    2978:	61 f1       	breq	.+88     	; 0x29d2 <M_Dio_void_setPinValue+0x18e>
    297a:	2d 81       	ldd	r18, Y+5	; 0x05
    297c:	3e 81       	ldd	r19, Y+6	; 0x06
    297e:	23 30       	cpi	r18, 0x03	; 3
    2980:	31 05       	cpc	r19, r1
    2982:	34 f4       	brge	.+12     	; 0x2990 <M_Dio_void_setPinValue+0x14c>
    2984:	8d 81       	ldd	r24, Y+5	; 0x05
    2986:	9e 81       	ldd	r25, Y+6	; 0x06
    2988:	81 30       	cpi	r24, 0x01	; 1
    298a:	91 05       	cpc	r25, r1
    298c:	69 f0       	breq	.+26     	; 0x29a8 <M_Dio_void_setPinValue+0x164>
    298e:	5f c0       	rjmp	.+190    	; 0x2a4e <M_Dio_void_setPinValue+0x20a>
    2990:	2d 81       	ldd	r18, Y+5	; 0x05
    2992:	3e 81       	ldd	r19, Y+6	; 0x06
    2994:	23 30       	cpi	r18, 0x03	; 3
    2996:	31 05       	cpc	r19, r1
    2998:	89 f1       	breq	.+98     	; 0x29fc <M_Dio_void_setPinValue+0x1b8>
    299a:	8d 81       	ldd	r24, Y+5	; 0x05
    299c:	9e 81       	ldd	r25, Y+6	; 0x06
    299e:	84 30       	cpi	r24, 0x04	; 4
    29a0:	91 05       	cpc	r25, r1
    29a2:	09 f4       	brne	.+2      	; 0x29a6 <M_Dio_void_setPinValue+0x162>
    29a4:	40 c0       	rjmp	.+128    	; 0x2a26 <M_Dio_void_setPinValue+0x1e2>
    29a6:	53 c0       	rjmp	.+166    	; 0x2a4e <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : CLR_BIT( PORTA_REG,pin);break;
    29a8:	ab e3       	ldi	r26, 0x3B	; 59
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
    29ac:	eb e3       	ldi	r30, 0x3B	; 59
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	80 81       	ld	r24, Z
    29b2:	48 2f       	mov	r20, r24
    29b4:	8a 81       	ldd	r24, Y+2	; 0x02
    29b6:	28 2f       	mov	r18, r24
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	02 2e       	mov	r0, r18
    29c0:	02 c0       	rjmp	.+4      	; 0x29c6 <M_Dio_void_setPinValue+0x182>
    29c2:	88 0f       	add	r24, r24
    29c4:	99 1f       	adc	r25, r25
    29c6:	0a 94       	dec	r0
    29c8:	e2 f7       	brpl	.-8      	; 0x29c2 <M_Dio_void_setPinValue+0x17e>
    29ca:	80 95       	com	r24
    29cc:	84 23       	and	r24, r20
    29ce:	8c 93       	st	X, r24
    29d0:	3e c0       	rjmp	.+124    	; 0x2a4e <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : CLR_BIT( PORTB_REG,pin);break;
    29d2:	a8 e3       	ldi	r26, 0x38	; 56
    29d4:	b0 e0       	ldi	r27, 0x00	; 0
    29d6:	e8 e3       	ldi	r30, 0x38	; 56
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	80 81       	ld	r24, Z
    29dc:	48 2f       	mov	r20, r24
    29de:	8a 81       	ldd	r24, Y+2	; 0x02
    29e0:	28 2f       	mov	r18, r24
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	02 2e       	mov	r0, r18
    29ea:	02 c0       	rjmp	.+4      	; 0x29f0 <M_Dio_void_setPinValue+0x1ac>
    29ec:	88 0f       	add	r24, r24
    29ee:	99 1f       	adc	r25, r25
    29f0:	0a 94       	dec	r0
    29f2:	e2 f7       	brpl	.-8      	; 0x29ec <M_Dio_void_setPinValue+0x1a8>
    29f4:	80 95       	com	r24
    29f6:	84 23       	and	r24, r20
    29f8:	8c 93       	st	X, r24
    29fa:	29 c0       	rjmp	.+82     	; 0x2a4e <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : CLR_BIT( PORTC_REG,pin);break;
    29fc:	a5 e3       	ldi	r26, 0x35	; 53
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
    2a00:	e5 e3       	ldi	r30, 0x35	; 53
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	48 2f       	mov	r20, r24
    2a08:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0a:	28 2f       	mov	r18, r24
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	02 2e       	mov	r0, r18
    2a14:	02 c0       	rjmp	.+4      	; 0x2a1a <M_Dio_void_setPinValue+0x1d6>
    2a16:	88 0f       	add	r24, r24
    2a18:	99 1f       	adc	r25, r25
    2a1a:	0a 94       	dec	r0
    2a1c:	e2 f7       	brpl	.-8      	; 0x2a16 <M_Dio_void_setPinValue+0x1d2>
    2a1e:	80 95       	com	r24
    2a20:	84 23       	and	r24, r20
    2a22:	8c 93       	st	X, r24
    2a24:	14 c0       	rjmp	.+40     	; 0x2a4e <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : CLR_BIT( PORTD_REG,pin);break;
    2a26:	a2 e3       	ldi	r26, 0x32	; 50
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	e2 e3       	ldi	r30, 0x32	; 50
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	80 81       	ld	r24, Z
    2a30:	48 2f       	mov	r20, r24
    2a32:	8a 81       	ldd	r24, Y+2	; 0x02
    2a34:	28 2f       	mov	r18, r24
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	02 2e       	mov	r0, r18
    2a3e:	02 c0       	rjmp	.+4      	; 0x2a44 <M_Dio_void_setPinValue+0x200>
    2a40:	88 0f       	add	r24, r24
    2a42:	99 1f       	adc	r25, r25
    2a44:	0a 94       	dec	r0
    2a46:	e2 f7       	brpl	.-8      	; 0x2a40 <M_Dio_void_setPinValue+0x1fc>
    2a48:	80 95       	com	r24
    2a4a:	84 23       	and	r24, r20
    2a4c:	8c 93       	st	X, r24
		}

	}

}
    2a4e:	28 96       	adiw	r28, 0x08	; 8
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	f8 94       	cli
    2a54:	de bf       	out	0x3e, r29	; 62
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	cd bf       	out	0x3d, r28	; 61
    2a5a:	cf 91       	pop	r28
    2a5c:	df 91       	pop	r29
    2a5e:	08 95       	ret

00002a60 <M_Dio_en_getPortValue>:
  parameters (in)  :  PortId
  parameters (out) :  Non
  Return Value     : Dio_PortLevelType
******************************************/
Dio_PortLevelType M_Dio_en_getPortValue(Dio_PortType PortId)
{
    2a60:	df 93       	push	r29
    2a62:	cf 93       	push	r28
    2a64:	00 d0       	rcall	.+0      	; 0x2a66 <M_Dio_en_getPortValue+0x6>
    2a66:	00 d0       	rcall	.+0      	; 0x2a68 <M_Dio_en_getPortValue+0x8>
    2a68:	cd b7       	in	r28, 0x3d	; 61
    2a6a:	de b7       	in	r29, 0x3e	; 62
    2a6c:	8a 83       	std	Y+2, r24	; 0x02
	Dio_PortLevelType Local_Reading;

	switch( PortId)
    2a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a70:	28 2f       	mov	r18, r24
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	3c 83       	std	Y+4, r19	; 0x04
    2a76:	2b 83       	std	Y+3, r18	; 0x03
    2a78:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a7c:	82 30       	cpi	r24, 0x02	; 2
    2a7e:	91 05       	cpc	r25, r1
    2a80:	d9 f0       	breq	.+54     	; 0x2ab8 <M_Dio_en_getPortValue+0x58>
    2a82:	2b 81       	ldd	r18, Y+3	; 0x03
    2a84:	3c 81       	ldd	r19, Y+4	; 0x04
    2a86:	23 30       	cpi	r18, 0x03	; 3
    2a88:	31 05       	cpc	r19, r1
    2a8a:	34 f4       	brge	.+12     	; 0x2a98 <M_Dio_en_getPortValue+0x38>
    2a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a90:	81 30       	cpi	r24, 0x01	; 1
    2a92:	91 05       	cpc	r25, r1
    2a94:	61 f0       	breq	.+24     	; 0x2aae <M_Dio_en_getPortValue+0x4e>
    2a96:	1e c0       	rjmp	.+60     	; 0x2ad4 <M_Dio_en_getPortValue+0x74>
    2a98:	2b 81       	ldd	r18, Y+3	; 0x03
    2a9a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a9c:	23 30       	cpi	r18, 0x03	; 3
    2a9e:	31 05       	cpc	r19, r1
    2aa0:	81 f0       	breq	.+32     	; 0x2ac2 <M_Dio_en_getPortValue+0x62>
    2aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa6:	84 30       	cpi	r24, 0x04	; 4
    2aa8:	91 05       	cpc	r25, r1
    2aaa:	81 f0       	breq	.+32     	; 0x2acc <M_Dio_en_getPortValue+0x6c>
    2aac:	13 c0       	rjmp	.+38     	; 0x2ad4 <M_Dio_en_getPortValue+0x74>
	{
	case DIO_PORTA :Local_Reading =  PORTA_REG;break;
    2aae:	eb e3       	ldi	r30, 0x3B	; 59
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	80 81       	ld	r24, Z
    2ab4:	89 83       	std	Y+1, r24	; 0x01
    2ab6:	0e c0       	rjmp	.+28     	; 0x2ad4 <M_Dio_en_getPortValue+0x74>
	case DIO_PORTB :Local_Reading =  PORTB_REG;break;
    2ab8:	e8 e3       	ldi	r30, 0x38	; 56
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	89 83       	std	Y+1, r24	; 0x01
    2ac0:	09 c0       	rjmp	.+18     	; 0x2ad4 <M_Dio_en_getPortValue+0x74>
	case DIO_PORTC :Local_Reading =  PORTC_REG;break;
    2ac2:	e5 e3       	ldi	r30, 0x35	; 53
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	80 81       	ld	r24, Z
    2ac8:	89 83       	std	Y+1, r24	; 0x01
    2aca:	04 c0       	rjmp	.+8      	; 0x2ad4 <M_Dio_en_getPortValue+0x74>
	case DIO_PORTD :Local_Reading =  PORTD_REG;break;
    2acc:	e2 e3       	ldi	r30, 0x32	; 50
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	80 81       	ld	r24, Z
    2ad2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_Reading;
    2ad4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ad6:	0f 90       	pop	r0
    2ad8:	0f 90       	pop	r0
    2ada:	0f 90       	pop	r0
    2adc:	0f 90       	pop	r0
    2ade:	cf 91       	pop	r28
    2ae0:	df 91       	pop	r29
    2ae2:	08 95       	ret

00002ae4 <M_Dio_void_setPortValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPortValue(Dio_PortType PortId,Dio_PortLevelType Level)
{
    2ae4:	df 93       	push	r29
    2ae6:	cf 93       	push	r28
    2ae8:	00 d0       	rcall	.+0      	; 0x2aea <M_Dio_void_setPortValue+0x6>
    2aea:	00 d0       	rcall	.+0      	; 0x2aec <M_Dio_void_setPortValue+0x8>
    2aec:	cd b7       	in	r28, 0x3d	; 61
    2aee:	de b7       	in	r29, 0x3e	; 62
    2af0:	89 83       	std	Y+1, r24	; 0x01
    2af2:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortId)
    2af4:	89 81       	ldd	r24, Y+1	; 0x01
    2af6:	28 2f       	mov	r18, r24
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	3c 83       	std	Y+4, r19	; 0x04
    2afc:	2b 83       	std	Y+3, r18	; 0x03
    2afe:	8b 81       	ldd	r24, Y+3	; 0x03
    2b00:	9c 81       	ldd	r25, Y+4	; 0x04
    2b02:	82 30       	cpi	r24, 0x02	; 2
    2b04:	91 05       	cpc	r25, r1
    2b06:	d9 f0       	breq	.+54     	; 0x2b3e <M_Dio_void_setPortValue+0x5a>
    2b08:	2b 81       	ldd	r18, Y+3	; 0x03
    2b0a:	3c 81       	ldd	r19, Y+4	; 0x04
    2b0c:	23 30       	cpi	r18, 0x03	; 3
    2b0e:	31 05       	cpc	r19, r1
    2b10:	34 f4       	brge	.+12     	; 0x2b1e <M_Dio_void_setPortValue+0x3a>
    2b12:	8b 81       	ldd	r24, Y+3	; 0x03
    2b14:	9c 81       	ldd	r25, Y+4	; 0x04
    2b16:	81 30       	cpi	r24, 0x01	; 1
    2b18:	91 05       	cpc	r25, r1
    2b1a:	61 f0       	breq	.+24     	; 0x2b34 <M_Dio_void_setPortValue+0x50>
    2b1c:	1e c0       	rjmp	.+60     	; 0x2b5a <M_Dio_void_setPortValue+0x76>
    2b1e:	2b 81       	ldd	r18, Y+3	; 0x03
    2b20:	3c 81       	ldd	r19, Y+4	; 0x04
    2b22:	23 30       	cpi	r18, 0x03	; 3
    2b24:	31 05       	cpc	r19, r1
    2b26:	81 f0       	breq	.+32     	; 0x2b48 <M_Dio_void_setPortValue+0x64>
    2b28:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2c:	84 30       	cpi	r24, 0x04	; 4
    2b2e:	91 05       	cpc	r25, r1
    2b30:	81 f0       	breq	.+32     	; 0x2b52 <M_Dio_void_setPortValue+0x6e>
    2b32:	13 c0       	rjmp	.+38     	; 0x2b5a <M_Dio_void_setPortValue+0x76>
	{
    	case DIO_PORTA : PORTA_REG = Level;break;
    2b34:	eb e3       	ldi	r30, 0x3B	; 59
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3a:	80 83       	st	Z, r24
    2b3c:	0e c0       	rjmp	.+28     	; 0x2b5a <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTB : PORTB_REG = Level;break;
    2b3e:	e8 e3       	ldi	r30, 0x38	; 56
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	8a 81       	ldd	r24, Y+2	; 0x02
    2b44:	80 83       	st	Z, r24
    2b46:	09 c0       	rjmp	.+18     	; 0x2b5a <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTC : PORTC_REG = Level;break;
    2b48:	e5 e3       	ldi	r30, 0x35	; 53
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4e:	80 83       	st	Z, r24
    2b50:	04 c0       	rjmp	.+8      	; 0x2b5a <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTD : PORTD_REG = Level;break;
    2b52:	e2 e3       	ldi	r30, 0x32	; 50
    2b54:	f0 e0       	ldi	r31, 0x00	; 0
    2b56:	8a 81       	ldd	r24, Y+2	; 0x02
    2b58:	80 83       	st	Z, r24
	}
}
    2b5a:	0f 90       	pop	r0
    2b5c:	0f 90       	pop	r0
    2b5e:	0f 90       	pop	r0
    2b60:	0f 90       	pop	r0
    2b62:	cf 91       	pop	r28
    2b64:	df 91       	pop	r29
    2b66:	08 95       	ret

00002b68 <M_Dio_void_togglePinValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_togglePinValue(Dio_ChannelType channelId)
{
    2b68:	df 93       	push	r29
    2b6a:	cf 93       	push	r28
    2b6c:	00 d0       	rcall	.+0      	; 0x2b6e <M_Dio_void_togglePinValue+0x6>
    2b6e:	00 d0       	rcall	.+0      	; 0x2b70 <M_Dio_void_togglePinValue+0x8>
    2b70:	0f 92       	push	r0
    2b72:	cd b7       	in	r28, 0x3d	; 61
    2b74:	de b7       	in	r29, 0x3e	; 62
    2b76:	8b 83       	std	Y+3, r24	; 0x03
	u8 pin = channelId % 10;
    2b78:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7a:	9a e0       	ldi	r25, 0x0A	; 10
    2b7c:	69 2f       	mov	r22, r25
    2b7e:	0e 94 ca 22 	call	0x4594	; 0x4594 <__udivmodqi4>
    2b82:	89 2f       	mov	r24, r25
    2b84:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = channelId/ 10;
    2b86:	8b 81       	ldd	r24, Y+3	; 0x03
    2b88:	9a e0       	ldi	r25, 0x0A	; 10
    2b8a:	69 2f       	mov	r22, r25
    2b8c:	0e 94 ca 22 	call	0x4594	; 0x4594 <__udivmodqi4>
    2b90:	89 83       	std	Y+1, r24	; 0x01

	switch(port)
    2b92:	89 81       	ldd	r24, Y+1	; 0x01
    2b94:	28 2f       	mov	r18, r24
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	3d 83       	std	Y+5, r19	; 0x05
    2b9a:	2c 83       	std	Y+4, r18	; 0x04
    2b9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b9e:	9d 81       	ldd	r25, Y+5	; 0x05
    2ba0:	82 30       	cpi	r24, 0x02	; 2
    2ba2:	91 05       	cpc	r25, r1
    2ba4:	51 f1       	breq	.+84     	; 0x2bfa <M_Dio_void_togglePinValue+0x92>
    2ba6:	2c 81       	ldd	r18, Y+4	; 0x04
    2ba8:	3d 81       	ldd	r19, Y+5	; 0x05
    2baa:	23 30       	cpi	r18, 0x03	; 3
    2bac:	31 05       	cpc	r19, r1
    2bae:	34 f4       	brge	.+12     	; 0x2bbc <M_Dio_void_togglePinValue+0x54>
    2bb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb2:	9d 81       	ldd	r25, Y+5	; 0x05
    2bb4:	81 30       	cpi	r24, 0x01	; 1
    2bb6:	91 05       	cpc	r25, r1
    2bb8:	61 f0       	breq	.+24     	; 0x2bd2 <M_Dio_void_togglePinValue+0x6a>
    2bba:	5a c0       	rjmp	.+180    	; 0x2c70 <M_Dio_void_togglePinValue+0x108>
    2bbc:	2c 81       	ldd	r18, Y+4	; 0x04
    2bbe:	3d 81       	ldd	r19, Y+5	; 0x05
    2bc0:	23 30       	cpi	r18, 0x03	; 3
    2bc2:	31 05       	cpc	r19, r1
    2bc4:	71 f1       	breq	.+92     	; 0x2c22 <M_Dio_void_togglePinValue+0xba>
    2bc6:	8c 81       	ldd	r24, Y+4	; 0x04
    2bc8:	9d 81       	ldd	r25, Y+5	; 0x05
    2bca:	84 30       	cpi	r24, 0x04	; 4
    2bcc:	91 05       	cpc	r25, r1
    2bce:	e9 f1       	breq	.+122    	; 0x2c4a <M_Dio_void_togglePinValue+0xe2>
    2bd0:	4f c0       	rjmp	.+158    	; 0x2c70 <M_Dio_void_togglePinValue+0x108>
	{
	case DIO_PORTA :TOG_BIT( PORTA_REG,pin);break;
    2bd2:	ab e3       	ldi	r26, 0x3B	; 59
    2bd4:	b0 e0       	ldi	r27, 0x00	; 0
    2bd6:	eb e3       	ldi	r30, 0x3B	; 59
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	80 81       	ld	r24, Z
    2bdc:	48 2f       	mov	r20, r24
    2bde:	8a 81       	ldd	r24, Y+2	; 0x02
    2be0:	28 2f       	mov	r18, r24
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	02 2e       	mov	r0, r18
    2bea:	02 c0       	rjmp	.+4      	; 0x2bf0 <M_Dio_void_togglePinValue+0x88>
    2bec:	88 0f       	add	r24, r24
    2bee:	99 1f       	adc	r25, r25
    2bf0:	0a 94       	dec	r0
    2bf2:	e2 f7       	brpl	.-8      	; 0x2bec <M_Dio_void_togglePinValue+0x84>
    2bf4:	84 27       	eor	r24, r20
    2bf6:	8c 93       	st	X, r24
    2bf8:	3b c0       	rjmp	.+118    	; 0x2c70 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTB :TOG_BIT( PORTB_REG,pin);break;
    2bfa:	a8 e3       	ldi	r26, 0x38	; 56
    2bfc:	b0 e0       	ldi	r27, 0x00	; 0
    2bfe:	e8 e3       	ldi	r30, 0x38	; 56
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	80 81       	ld	r24, Z
    2c04:	48 2f       	mov	r20, r24
    2c06:	8a 81       	ldd	r24, Y+2	; 0x02
    2c08:	28 2f       	mov	r18, r24
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	02 2e       	mov	r0, r18
    2c12:	02 c0       	rjmp	.+4      	; 0x2c18 <M_Dio_void_togglePinValue+0xb0>
    2c14:	88 0f       	add	r24, r24
    2c16:	99 1f       	adc	r25, r25
    2c18:	0a 94       	dec	r0
    2c1a:	e2 f7       	brpl	.-8      	; 0x2c14 <M_Dio_void_togglePinValue+0xac>
    2c1c:	84 27       	eor	r24, r20
    2c1e:	8c 93       	st	X, r24
    2c20:	27 c0       	rjmp	.+78     	; 0x2c70 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTC :TOG_BIT( PORTC_REG,pin);break;
    2c22:	a5 e3       	ldi	r26, 0x35	; 53
    2c24:	b0 e0       	ldi	r27, 0x00	; 0
    2c26:	e5 e3       	ldi	r30, 0x35	; 53
    2c28:	f0 e0       	ldi	r31, 0x00	; 0
    2c2a:	80 81       	ld	r24, Z
    2c2c:	48 2f       	mov	r20, r24
    2c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c30:	28 2f       	mov	r18, r24
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	02 2e       	mov	r0, r18
    2c3a:	02 c0       	rjmp	.+4      	; 0x2c40 <M_Dio_void_togglePinValue+0xd8>
    2c3c:	88 0f       	add	r24, r24
    2c3e:	99 1f       	adc	r25, r25
    2c40:	0a 94       	dec	r0
    2c42:	e2 f7       	brpl	.-8      	; 0x2c3c <M_Dio_void_togglePinValue+0xd4>
    2c44:	84 27       	eor	r24, r20
    2c46:	8c 93       	st	X, r24
    2c48:	13 c0       	rjmp	.+38     	; 0x2c70 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTD :TOG_BIT( PORTD_REG,pin);break;
    2c4a:	a2 e3       	ldi	r26, 0x32	; 50
    2c4c:	b0 e0       	ldi	r27, 0x00	; 0
    2c4e:	e2 e3       	ldi	r30, 0x32	; 50
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	80 81       	ld	r24, Z
    2c54:	48 2f       	mov	r20, r24
    2c56:	8a 81       	ldd	r24, Y+2	; 0x02
    2c58:	28 2f       	mov	r18, r24
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	81 e0       	ldi	r24, 0x01	; 1
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	02 2e       	mov	r0, r18
    2c62:	02 c0       	rjmp	.+4      	; 0x2c68 <M_Dio_void_togglePinValue+0x100>
    2c64:	88 0f       	add	r24, r24
    2c66:	99 1f       	adc	r25, r25
    2c68:	0a 94       	dec	r0
    2c6a:	e2 f7       	brpl	.-8      	; 0x2c64 <M_Dio_void_togglePinValue+0xfc>
    2c6c:	84 27       	eor	r24, r20
    2c6e:	8c 93       	st	X, r24
	}

}
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	0f 90       	pop	r0
    2c76:	0f 90       	pop	r0
    2c78:	0f 90       	pop	r0
    2c7a:	cf 91       	pop	r28
    2c7c:	df 91       	pop	r29
    2c7e:	08 95       	ret

00002c80 <ADC_Init>:
#include"CLCD/CLCD_Init.h"

static void (*ADC_ptr_FUNC)(void)=NULL;

void ADC_Init(ADC_ConfigType *Ptr_to_ADC)
{
    2c80:	df 93       	push	r29
    2c82:	cf 93       	push	r28
    2c84:	cd b7       	in	r28, 0x3d	; 61
    2c86:	de b7       	in	r29, 0x3e	; 62
    2c88:	2a 97       	sbiw	r28, 0x0a	; 10
    2c8a:	0f b6       	in	r0, 0x3f	; 63
    2c8c:	f8 94       	cli
    2c8e:	de bf       	out	0x3e, r29	; 62
    2c90:	0f be       	out	0x3f, r0	; 63
    2c92:	cd bf       	out	0x3d, r28	; 61
    2c94:	9a 83       	std	Y+2, r25	; 0x02
    2c96:	89 83       	std	Y+1, r24	; 0x01
	/*Select VCC*/
	switch(Ptr_to_ADC->Voltage_Ref_Value)
    2c98:	e9 81       	ldd	r30, Y+1	; 0x01
    2c9a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c9c:	80 81       	ld	r24, Z
    2c9e:	28 2f       	mov	r18, r24
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	3a 87       	std	Y+10, r19	; 0x0a
    2ca4:	29 87       	std	Y+9, r18	; 0x09
    2ca6:	89 85       	ldd	r24, Y+9	; 0x09
    2ca8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2caa:	80 34       	cpi	r24, 0x40	; 64
    2cac:	91 05       	cpc	r25, r1
    2cae:	31 f0       	breq	.+12     	; 0x2cbc <ADC_Init+0x3c>
    2cb0:	29 85       	ldd	r18, Y+9	; 0x09
    2cb2:	3a 85       	ldd	r19, Y+10	; 0x0a
    2cb4:	20 3c       	cpi	r18, 0xC0	; 192
    2cb6:	31 05       	cpc	r19, r1
    2cb8:	81 f0       	breq	.+32     	; 0x2cda <ADC_Init+0x5a>
    2cba:	1d c0       	rjmp	.+58     	; 0x2cf6 <ADC_Init+0x76>
	{
	case VCC_5V:
		CLR_BIT(ADMUX,ADMUX_REFS1);
    2cbc:	a7 e2       	ldi	r26, 0x27	; 39
    2cbe:	b0 e0       	ldi	r27, 0x00	; 0
    2cc0:	e7 e2       	ldi	r30, 0x27	; 39
    2cc2:	f0 e0       	ldi	r31, 0x00	; 0
    2cc4:	80 81       	ld	r24, Z
    2cc6:	8f 77       	andi	r24, 0x7F	; 127
    2cc8:	8c 93       	st	X, r24
		SET_BIT(ADMUX,ADMUX_REFS0);
    2cca:	a7 e2       	ldi	r26, 0x27	; 39
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	e7 e2       	ldi	r30, 0x27	; 39
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	80 81       	ld	r24, Z
    2cd4:	80 64       	ori	r24, 0x40	; 64
    2cd6:	8c 93       	st	X, r24
    2cd8:	0e c0       	rjmp	.+28     	; 0x2cf6 <ADC_Init+0x76>
		break;
	case VREF_2_5_V:
		SET_BIT(ADMUX,ADMUX_REFS1);
    2cda:	a7 e2       	ldi	r26, 0x27	; 39
    2cdc:	b0 e0       	ldi	r27, 0x00	; 0
    2cde:	e7 e2       	ldi	r30, 0x27	; 39
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	80 81       	ld	r24, Z
    2ce4:	80 68       	ori	r24, 0x80	; 128
    2ce6:	8c 93       	st	X, r24
		SET_BIT(ADMUX,ADMUX_REFS0);
    2ce8:	a7 e2       	ldi	r26, 0x27	; 39
    2cea:	b0 e0       	ldi	r27, 0x00	; 0
    2cec:	e7 e2       	ldi	r30, 0x27	; 39
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
    2cf0:	80 81       	ld	r24, Z
    2cf2:	80 64       	ori	r24, 0x40	; 64
    2cf4:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
	/*Select adjust type*/
	switch(Ptr_to_ADC->AdjustType)
    2cf6:	e9 81       	ldd	r30, Y+1	; 0x01
    2cf8:	fa 81       	ldd	r31, Y+2	; 0x02
    2cfa:	82 81       	ldd	r24, Z+2	; 0x02
    2cfc:	28 2f       	mov	r18, r24
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	38 87       	std	Y+8, r19	; 0x08
    2d02:	2f 83       	std	Y+7, r18	; 0x07
    2d04:	8f 81       	ldd	r24, Y+7	; 0x07
    2d06:	98 85       	ldd	r25, Y+8	; 0x08
    2d08:	00 97       	sbiw	r24, 0x00	; 0
    2d0a:	31 f0       	breq	.+12     	; 0x2d18 <ADC_Init+0x98>
    2d0c:	2f 81       	ldd	r18, Y+7	; 0x07
    2d0e:	38 85       	ldd	r19, Y+8	; 0x08
    2d10:	20 32       	cpi	r18, 0x20	; 32
    2d12:	31 05       	cpc	r19, r1
    2d14:	49 f0       	breq	.+18     	; 0x2d28 <ADC_Init+0xa8>
    2d16:	0f c0       	rjmp	.+30     	; 0x2d36 <ADC_Init+0xb6>
	{
	case Right_Adjust:
		CLR_BIT(ADMUX,ADMUX_ADLAR);
    2d18:	a7 e2       	ldi	r26, 0x27	; 39
    2d1a:	b0 e0       	ldi	r27, 0x00	; 0
    2d1c:	e7 e2       	ldi	r30, 0x27	; 39
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	80 81       	ld	r24, Z
    2d22:	8f 7d       	andi	r24, 0xDF	; 223
    2d24:	8c 93       	st	X, r24
    2d26:	07 c0       	rjmp	.+14     	; 0x2d36 <ADC_Init+0xb6>
		break;
	case Left_Adjust:
		SET_BIT(ADMUX,ADMUX_ADLAR);
    2d28:	a7 e2       	ldi	r26, 0x27	; 39
    2d2a:	b0 e0       	ldi	r27, 0x00	; 0
    2d2c:	e7 e2       	ldi	r30, 0x27	; 39
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	80 81       	ld	r24, Z
    2d32:	80 62       	ori	r24, 0x20	; 32
    2d34:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
	/*Select PRESCALLER*/
	switch(Ptr_to_ADC->Pre_Scaller)
    2d36:	e9 81       	ldd	r30, Y+1	; 0x01
    2d38:	fa 81       	ldd	r31, Y+2	; 0x02
    2d3a:	81 81       	ldd	r24, Z+1	; 0x01
    2d3c:	28 2f       	mov	r18, r24
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	3e 83       	std	Y+6, r19	; 0x06
    2d42:	2d 83       	std	Y+5, r18	; 0x05
    2d44:	8d 81       	ldd	r24, Y+5	; 0x05
    2d46:	9e 81       	ldd	r25, Y+6	; 0x06
    2d48:	83 30       	cpi	r24, 0x03	; 3
    2d4a:	91 05       	cpc	r25, r1
    2d4c:	09 f4       	brne	.+2      	; 0x2d50 <ADC_Init+0xd0>
    2d4e:	70 c0       	rjmp	.+224    	; 0x2e30 <ADC_Init+0x1b0>
    2d50:	2d 81       	ldd	r18, Y+5	; 0x05
    2d52:	3e 81       	ldd	r19, Y+6	; 0x06
    2d54:	24 30       	cpi	r18, 0x04	; 4
    2d56:	31 05       	cpc	r19, r1
    2d58:	84 f4       	brge	.+32     	; 0x2d7a <ADC_Init+0xfa>
    2d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d5e:	81 30       	cpi	r24, 0x01	; 1
    2d60:	91 05       	cpc	r25, r1
    2d62:	d1 f1       	breq	.+116    	; 0x2dd8 <ADC_Init+0x158>
    2d64:	2d 81       	ldd	r18, Y+5	; 0x05
    2d66:	3e 81       	ldd	r19, Y+6	; 0x06
    2d68:	22 30       	cpi	r18, 0x02	; 2
    2d6a:	31 05       	cpc	r19, r1
    2d6c:	0c f0       	brlt	.+2      	; 0x2d70 <ADC_Init+0xf0>
    2d6e:	4a c0       	rjmp	.+148    	; 0x2e04 <ADC_Init+0x184>
    2d70:	8d 81       	ldd	r24, Y+5	; 0x05
    2d72:	9e 81       	ldd	r25, Y+6	; 0x06
    2d74:	00 97       	sbiw	r24, 0x00	; 0
    2d76:	d1 f0       	breq	.+52     	; 0x2dac <ADC_Init+0x12c>
    2d78:	c8 c0       	rjmp	.+400    	; 0x2f0a <ADC_Init+0x28a>
    2d7a:	2d 81       	ldd	r18, Y+5	; 0x05
    2d7c:	3e 81       	ldd	r19, Y+6	; 0x06
    2d7e:	25 30       	cpi	r18, 0x05	; 5
    2d80:	31 05       	cpc	r19, r1
    2d82:	09 f4       	brne	.+2      	; 0x2d86 <ADC_Init+0x106>
    2d84:	81 c0       	rjmp	.+258    	; 0x2e88 <ADC_Init+0x208>
    2d86:	8d 81       	ldd	r24, Y+5	; 0x05
    2d88:	9e 81       	ldd	r25, Y+6	; 0x06
    2d8a:	85 30       	cpi	r24, 0x05	; 5
    2d8c:	91 05       	cpc	r25, r1
    2d8e:	0c f4       	brge	.+2      	; 0x2d92 <ADC_Init+0x112>
    2d90:	65 c0       	rjmp	.+202    	; 0x2e5c <ADC_Init+0x1dc>
    2d92:	2d 81       	ldd	r18, Y+5	; 0x05
    2d94:	3e 81       	ldd	r19, Y+6	; 0x06
    2d96:	26 30       	cpi	r18, 0x06	; 6
    2d98:	31 05       	cpc	r19, r1
    2d9a:	09 f4       	brne	.+2      	; 0x2d9e <ADC_Init+0x11e>
    2d9c:	8b c0       	rjmp	.+278    	; 0x2eb4 <ADC_Init+0x234>
    2d9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2da0:	9e 81       	ldd	r25, Y+6	; 0x06
    2da2:	87 30       	cpi	r24, 0x07	; 7
    2da4:	91 05       	cpc	r25, r1
    2da6:	09 f4       	brne	.+2      	; 0x2daa <ADC_Init+0x12a>
    2da8:	9b c0       	rjmp	.+310    	; 0x2ee0 <ADC_Init+0x260>
    2daa:	af c0       	rjmp	.+350    	; 0x2f0a <ADC_Init+0x28a>
	{
	case DIV_BY_2_0:
		CLR_BIT(ADCSRA,ADCSRA_ADPS0);
    2dac:	a6 e2       	ldi	r26, 0x26	; 38
    2dae:	b0 e0       	ldi	r27, 0x00	; 0
    2db0:	e6 e2       	ldi	r30, 0x26	; 38
    2db2:	f0 e0       	ldi	r31, 0x00	; 0
    2db4:	80 81       	ld	r24, Z
    2db6:	8e 7f       	andi	r24, 0xFE	; 254
    2db8:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADCSRA_ADPS1);
    2dba:	a6 e2       	ldi	r26, 0x26	; 38
    2dbc:	b0 e0       	ldi	r27, 0x00	; 0
    2dbe:	e6 e2       	ldi	r30, 0x26	; 38
    2dc0:	f0 e0       	ldi	r31, 0x00	; 0
    2dc2:	80 81       	ld	r24, Z
    2dc4:	8d 7f       	andi	r24, 0xFD	; 253
    2dc6:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADCSRA_ADPS2);
    2dc8:	a6 e2       	ldi	r26, 0x26	; 38
    2dca:	b0 e0       	ldi	r27, 0x00	; 0
    2dcc:	e6 e2       	ldi	r30, 0x26	; 38
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	80 81       	ld	r24, Z
    2dd2:	8b 7f       	andi	r24, 0xFB	; 251
    2dd4:	8c 93       	st	X, r24
    2dd6:	99 c0       	rjmp	.+306    	; 0x2f0a <ADC_Init+0x28a>
		break;
	case DIV_BY_2:
		SET_BIT(ADCSRA,ADCSRA_ADPS0);
    2dd8:	a6 e2       	ldi	r26, 0x26	; 38
    2dda:	b0 e0       	ldi	r27, 0x00	; 0
    2ddc:	e6 e2       	ldi	r30, 0x26	; 38
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	80 81       	ld	r24, Z
    2de2:	81 60       	ori	r24, 0x01	; 1
    2de4:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADCSRA_ADPS1);
    2de6:	a6 e2       	ldi	r26, 0x26	; 38
    2de8:	b0 e0       	ldi	r27, 0x00	; 0
    2dea:	e6 e2       	ldi	r30, 0x26	; 38
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	80 81       	ld	r24, Z
    2df0:	8d 7f       	andi	r24, 0xFD	; 253
    2df2:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADCSRA_ADPS2);
    2df4:	a6 e2       	ldi	r26, 0x26	; 38
    2df6:	b0 e0       	ldi	r27, 0x00	; 0
    2df8:	e6 e2       	ldi	r30, 0x26	; 38
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	80 81       	ld	r24, Z
    2dfe:	8b 7f       	andi	r24, 0xFB	; 251
    2e00:	8c 93       	st	X, r24
    2e02:	83 c0       	rjmp	.+262    	; 0x2f0a <ADC_Init+0x28a>
		break;
	case DIV_BY_4:
		CLR_BIT(ADCSRA,ADCSRA_ADPS0);
    2e04:	a6 e2       	ldi	r26, 0x26	; 38
    2e06:	b0 e0       	ldi	r27, 0x00	; 0
    2e08:	e6 e2       	ldi	r30, 0x26	; 38
    2e0a:	f0 e0       	ldi	r31, 0x00	; 0
    2e0c:	80 81       	ld	r24, Z
    2e0e:	8e 7f       	andi	r24, 0xFE	; 254
    2e10:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS1);
    2e12:	a6 e2       	ldi	r26, 0x26	; 38
    2e14:	b0 e0       	ldi	r27, 0x00	; 0
    2e16:	e6 e2       	ldi	r30, 0x26	; 38
    2e18:	f0 e0       	ldi	r31, 0x00	; 0
    2e1a:	80 81       	ld	r24, Z
    2e1c:	82 60       	ori	r24, 0x02	; 2
    2e1e:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADCSRA_ADPS2);
    2e20:	a6 e2       	ldi	r26, 0x26	; 38
    2e22:	b0 e0       	ldi	r27, 0x00	; 0
    2e24:	e6 e2       	ldi	r30, 0x26	; 38
    2e26:	f0 e0       	ldi	r31, 0x00	; 0
    2e28:	80 81       	ld	r24, Z
    2e2a:	8b 7f       	andi	r24, 0xFB	; 251
    2e2c:	8c 93       	st	X, r24
    2e2e:	6d c0       	rjmp	.+218    	; 0x2f0a <ADC_Init+0x28a>
		break;
	case DIV_BY_8:
		SET_BIT(ADCSRA,ADCSRA_ADPS0);
    2e30:	a6 e2       	ldi	r26, 0x26	; 38
    2e32:	b0 e0       	ldi	r27, 0x00	; 0
    2e34:	e6 e2       	ldi	r30, 0x26	; 38
    2e36:	f0 e0       	ldi	r31, 0x00	; 0
    2e38:	80 81       	ld	r24, Z
    2e3a:	81 60       	ori	r24, 0x01	; 1
    2e3c:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS1);
    2e3e:	a6 e2       	ldi	r26, 0x26	; 38
    2e40:	b0 e0       	ldi	r27, 0x00	; 0
    2e42:	e6 e2       	ldi	r30, 0x26	; 38
    2e44:	f0 e0       	ldi	r31, 0x00	; 0
    2e46:	80 81       	ld	r24, Z
    2e48:	82 60       	ori	r24, 0x02	; 2
    2e4a:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADCSRA_ADPS2);
    2e4c:	a6 e2       	ldi	r26, 0x26	; 38
    2e4e:	b0 e0       	ldi	r27, 0x00	; 0
    2e50:	e6 e2       	ldi	r30, 0x26	; 38
    2e52:	f0 e0       	ldi	r31, 0x00	; 0
    2e54:	80 81       	ld	r24, Z
    2e56:	8b 7f       	andi	r24, 0xFB	; 251
    2e58:	8c 93       	st	X, r24
    2e5a:	57 c0       	rjmp	.+174    	; 0x2f0a <ADC_Init+0x28a>
		break;
	case DIV_BY_16:
		CLR_BIT(ADCSRA,ADCSRA_ADPS0);
    2e5c:	a6 e2       	ldi	r26, 0x26	; 38
    2e5e:	b0 e0       	ldi	r27, 0x00	; 0
    2e60:	e6 e2       	ldi	r30, 0x26	; 38
    2e62:	f0 e0       	ldi	r31, 0x00	; 0
    2e64:	80 81       	ld	r24, Z
    2e66:	8e 7f       	andi	r24, 0xFE	; 254
    2e68:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADCSRA_ADPS1);
    2e6a:	a6 e2       	ldi	r26, 0x26	; 38
    2e6c:	b0 e0       	ldi	r27, 0x00	; 0
    2e6e:	e6 e2       	ldi	r30, 0x26	; 38
    2e70:	f0 e0       	ldi	r31, 0x00	; 0
    2e72:	80 81       	ld	r24, Z
    2e74:	8d 7f       	andi	r24, 0xFD	; 253
    2e76:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS2);
    2e78:	a6 e2       	ldi	r26, 0x26	; 38
    2e7a:	b0 e0       	ldi	r27, 0x00	; 0
    2e7c:	e6 e2       	ldi	r30, 0x26	; 38
    2e7e:	f0 e0       	ldi	r31, 0x00	; 0
    2e80:	80 81       	ld	r24, Z
    2e82:	84 60       	ori	r24, 0x04	; 4
    2e84:	8c 93       	st	X, r24
    2e86:	41 c0       	rjmp	.+130    	; 0x2f0a <ADC_Init+0x28a>
		break;
	case DIV_BY_32:
		SET_BIT(ADCSRA,ADCSRA_ADPS0);
    2e88:	a6 e2       	ldi	r26, 0x26	; 38
    2e8a:	b0 e0       	ldi	r27, 0x00	; 0
    2e8c:	e6 e2       	ldi	r30, 0x26	; 38
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	80 81       	ld	r24, Z
    2e92:	81 60       	ori	r24, 0x01	; 1
    2e94:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADCSRA_ADPS1);
    2e96:	a6 e2       	ldi	r26, 0x26	; 38
    2e98:	b0 e0       	ldi	r27, 0x00	; 0
    2e9a:	e6 e2       	ldi	r30, 0x26	; 38
    2e9c:	f0 e0       	ldi	r31, 0x00	; 0
    2e9e:	80 81       	ld	r24, Z
    2ea0:	8d 7f       	andi	r24, 0xFD	; 253
    2ea2:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS2);
    2ea4:	a6 e2       	ldi	r26, 0x26	; 38
    2ea6:	b0 e0       	ldi	r27, 0x00	; 0
    2ea8:	e6 e2       	ldi	r30, 0x26	; 38
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	80 81       	ld	r24, Z
    2eae:	84 60       	ori	r24, 0x04	; 4
    2eb0:	8c 93       	st	X, r24
    2eb2:	2b c0       	rjmp	.+86     	; 0x2f0a <ADC_Init+0x28a>
		break;
	case DIV_BY_64:
		CLR_BIT(ADCSRA,ADCSRA_ADPS0);
    2eb4:	a6 e2       	ldi	r26, 0x26	; 38
    2eb6:	b0 e0       	ldi	r27, 0x00	; 0
    2eb8:	e6 e2       	ldi	r30, 0x26	; 38
    2eba:	f0 e0       	ldi	r31, 0x00	; 0
    2ebc:	80 81       	ld	r24, Z
    2ebe:	8e 7f       	andi	r24, 0xFE	; 254
    2ec0:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS1);
    2ec2:	a6 e2       	ldi	r26, 0x26	; 38
    2ec4:	b0 e0       	ldi	r27, 0x00	; 0
    2ec6:	e6 e2       	ldi	r30, 0x26	; 38
    2ec8:	f0 e0       	ldi	r31, 0x00	; 0
    2eca:	80 81       	ld	r24, Z
    2ecc:	82 60       	ori	r24, 0x02	; 2
    2ece:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS2);
    2ed0:	a6 e2       	ldi	r26, 0x26	; 38
    2ed2:	b0 e0       	ldi	r27, 0x00	; 0
    2ed4:	e6 e2       	ldi	r30, 0x26	; 38
    2ed6:	f0 e0       	ldi	r31, 0x00	; 0
    2ed8:	80 81       	ld	r24, Z
    2eda:	84 60       	ori	r24, 0x04	; 4
    2edc:	8c 93       	st	X, r24
    2ede:	15 c0       	rjmp	.+42     	; 0x2f0a <ADC_Init+0x28a>
		break;
	case DIV_BY_128:
		SET_BIT(ADCSRA,ADCSRA_ADPS0);
    2ee0:	a6 e2       	ldi	r26, 0x26	; 38
    2ee2:	b0 e0       	ldi	r27, 0x00	; 0
    2ee4:	e6 e2       	ldi	r30, 0x26	; 38
    2ee6:	f0 e0       	ldi	r31, 0x00	; 0
    2ee8:	80 81       	ld	r24, Z
    2eea:	81 60       	ori	r24, 0x01	; 1
    2eec:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS1);
    2eee:	a6 e2       	ldi	r26, 0x26	; 38
    2ef0:	b0 e0       	ldi	r27, 0x00	; 0
    2ef2:	e6 e2       	ldi	r30, 0x26	; 38
    2ef4:	f0 e0       	ldi	r31, 0x00	; 0
    2ef6:	80 81       	ld	r24, Z
    2ef8:	82 60       	ori	r24, 0x02	; 2
    2efa:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS2);
    2efc:	a6 e2       	ldi	r26, 0x26	; 38
    2efe:	b0 e0       	ldi	r27, 0x00	; 0
    2f00:	e6 e2       	ldi	r30, 0x26	; 38
    2f02:	f0 e0       	ldi	r31, 0x00	; 0
    2f04:	80 81       	ld	r24, Z
    2f06:	84 60       	ori	r24, 0x04	; 4
    2f08:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
	/*Enable or Disable Auto trigger*/
	switch(Ptr_to_ADC->Trigger)
    2f0a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f0c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f0e:	84 81       	ldd	r24, Z+4	; 0x04
    2f10:	28 2f       	mov	r18, r24
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	3c 83       	std	Y+4, r19	; 0x04
    2f16:	2b 83       	std	Y+3, r18	; 0x03
    2f18:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1c:	00 97       	sbiw	r24, 0x00	; 0
    2f1e:	31 f0       	breq	.+12     	; 0x2f2c <ADC_Init+0x2ac>
    2f20:	2b 81       	ldd	r18, Y+3	; 0x03
    2f22:	3c 81       	ldd	r19, Y+4	; 0x04
    2f24:	21 30       	cpi	r18, 0x01	; 1
    2f26:	31 05       	cpc	r19, r1
    2f28:	49 f0       	breq	.+18     	; 0x2f3c <ADC_Init+0x2bc>
    2f2a:	0f c0       	rjmp	.+30     	; 0x2f4a <ADC_Init+0x2ca>
	{
	case AUTO_Trigger_Enable:
		SET_BIT(ADCSRA,ADCSRA_ADATE);
    2f2c:	a6 e2       	ldi	r26, 0x26	; 38
    2f2e:	b0 e0       	ldi	r27, 0x00	; 0
    2f30:	e6 e2       	ldi	r30, 0x26	; 38
    2f32:	f0 e0       	ldi	r31, 0x00	; 0
    2f34:	80 81       	ld	r24, Z
    2f36:	80 62       	ori	r24, 0x20	; 32
    2f38:	8c 93       	st	X, r24
    2f3a:	07 c0       	rjmp	.+14     	; 0x2f4a <ADC_Init+0x2ca>
		break;
	case AUTO_Trigger_Disable:
		CLR_BIT(ADCSRA,ADCSRA_ADATE);
    2f3c:	a6 e2       	ldi	r26, 0x26	; 38
    2f3e:	b0 e0       	ldi	r27, 0x00	; 0
    2f40:	e6 e2       	ldi	r30, 0x26	; 38
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	80 81       	ld	r24, Z
    2f46:	8f 7d       	andi	r24, 0xDF	; 223
    2f48:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
	/*Trigger type*/
	switch(Ptr_to_ADC->Trigger_Type)
    2f4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f4e:	85 81       	ldd	r24, Z+5	; 0x05
    2f50:	88 2f       	mov	r24, r24
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	00 97       	sbiw	r24, 0x00	; 0
    2f56:	69 f4       	brne	.+26     	; 0x2f72 <ADC_Init+0x2f2>
	{
	case Free_Runnin_Mode:
		SFIOR &= SFIOR_ADC_FREE_RUNNING_MODE_CLEAR;
    2f58:	a0 e5       	ldi	r26, 0x50	; 80
    2f5a:	b0 e0       	ldi	r27, 0x00	; 0
    2f5c:	e0 e5       	ldi	r30, 0x50	; 80
    2f5e:	f0 e0       	ldi	r31, 0x00	; 0
    2f60:	80 81       	ld	r24, Z
    2f62:	8f 71       	andi	r24, 0x1F	; 31
    2f64:	8c 93       	st	X, r24
		SFIOR |= SFIOR_ADC_FREE_RUNNING_MODE_SET;
    2f66:	a0 e5       	ldi	r26, 0x50	; 80
    2f68:	b0 e0       	ldi	r27, 0x00	; 0
    2f6a:	e0 e5       	ldi	r30, 0x50	; 80
    2f6c:	f0 e0       	ldi	r31, 0x00	; 0
    2f6e:	80 81       	ld	r24, Z
    2f70:	8c 93       	st	X, r24
	default:
		break;
	}

	/*ADC_ENABLE*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    2f72:	a6 e2       	ldi	r26, 0x26	; 38
    2f74:	b0 e0       	ldi	r27, 0x00	; 0
    2f76:	e6 e2       	ldi	r30, 0x26	; 38
    2f78:	f0 e0       	ldi	r31, 0x00	; 0
    2f7a:	80 81       	ld	r24, Z
    2f7c:	80 68       	ori	r24, 0x80	; 128
    2f7e:	8c 93       	st	X, r24
}
    2f80:	2a 96       	adiw	r28, 0x0a	; 10
    2f82:	0f b6       	in	r0, 0x3f	; 63
    2f84:	f8 94       	cli
    2f86:	de bf       	out	0x3e, r29	; 62
    2f88:	0f be       	out	0x3f, r0	; 63
    2f8a:	cd bf       	out	0x3d, r28	; 61
    2f8c:	cf 91       	pop	r28
    2f8e:	df 91       	pop	r29
    2f90:	08 95       	ret

00002f92 <ADC_getDigitalValueSynchNonBlocking>:


u16 ADC_getDigitalValueSynchNonBlocking(Analog_Channel_Select Channel,ADC_Start ADC_Status)
{
    2f92:	df 93       	push	r29
    2f94:	cf 93       	push	r28
    2f96:	cd b7       	in	r28, 0x3d	; 61
    2f98:	de b7       	in	r29, 0x3e	; 62
    2f9a:	2a 97       	sbiw	r28, 0x0a	; 10
    2f9c:	0f b6       	in	r0, 0x3f	; 63
    2f9e:	f8 94       	cli
    2fa0:	de bf       	out	0x3e, r29	; 62
    2fa2:	0f be       	out	0x3f, r0	; 63
    2fa4:	cd bf       	out	0x3d, r28	; 61
    2fa6:	8d 83       	std	Y+5, r24	; 0x05
    2fa8:	6e 83       	std	Y+6, r22	; 0x06
	u16 Reading_value=0;
    2faa:	1c 82       	std	Y+4, r1	; 0x04
    2fac:	1b 82       	std	Y+3, r1	; 0x03
	u16 Counter=0;
    2fae:	1a 82       	std	Y+2, r1	; 0x02
    2fb0:	19 82       	std	Y+1, r1	; 0x01

	/*Select ADC Port*/
	ADMUX &= ADMUX_MUX_CLEAR;
    2fb2:	a7 e2       	ldi	r26, 0x27	; 39
    2fb4:	b0 e0       	ldi	r27, 0x00	; 0
    2fb6:	e7 e2       	ldi	r30, 0x27	; 39
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	80 81       	ld	r24, Z
    2fbc:	80 7e       	andi	r24, 0xE0	; 224
    2fbe:	8c 93       	st	X, r24
	ADMUX |= Channel;
    2fc0:	a7 e2       	ldi	r26, 0x27	; 39
    2fc2:	b0 e0       	ldi	r27, 0x00	; 0
    2fc4:	e7 e2       	ldi	r30, 0x27	; 39
    2fc6:	f0 e0       	ldi	r31, 0x00	; 0
    2fc8:	90 81       	ld	r25, Z
    2fca:	8d 81       	ldd	r24, Y+5	; 0x05
    2fcc:	89 2b       	or	r24, r25
    2fce:	8c 93       	st	X, r24
	/*Enable ADC*/
	switch(ADC_Status)
    2fd0:	8e 81       	ldd	r24, Y+6	; 0x06
    2fd2:	28 2f       	mov	r18, r24
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	3a 87       	std	Y+10, r19	; 0x0a
    2fd8:	29 87       	std	Y+9, r18	; 0x09
    2fda:	89 85       	ldd	r24, Y+9	; 0x09
    2fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fde:	00 97       	sbiw	r24, 0x00	; 0
    2fe0:	69 f0       	breq	.+26     	; 0x2ffc <ADC_getDigitalValueSynchNonBlocking+0x6a>
    2fe2:	29 85       	ldd	r18, Y+9	; 0x09
    2fe4:	3a 85       	ldd	r19, Y+10	; 0x0a
    2fe6:	21 30       	cpi	r18, 0x01	; 1
    2fe8:	31 05       	cpc	r19, r1
    2fea:	79 f4       	brne	.+30     	; 0x300a <ADC_getDigitalValueSynchNonBlocking+0x78>
	{
	case ENABLE:
		SET_BIT(ADCSRA,ADCSRA_ADEN);
    2fec:	a6 e2       	ldi	r26, 0x26	; 38
    2fee:	b0 e0       	ldi	r27, 0x00	; 0
    2ff0:	e6 e2       	ldi	r30, 0x26	; 38
    2ff2:	f0 e0       	ldi	r31, 0x00	; 0
    2ff4:	80 81       	ld	r24, Z
    2ff6:	80 68       	ori	r24, 0x80	; 128
    2ff8:	8c 93       	st	X, r24
    2ffa:	07 c0       	rjmp	.+14     	; 0x300a <ADC_getDigitalValueSynchNonBlocking+0x78>
		break;
	case DISABLE:
		CLR_BIT(ADCSRA,ADCSRA_ADEN);
    2ffc:	a6 e2       	ldi	r26, 0x26	; 38
    2ffe:	b0 e0       	ldi	r27, 0x00	; 0
    3000:	e6 e2       	ldi	r30, 0x26	; 38
    3002:	f0 e0       	ldi	r31, 0x00	; 0
    3004:	80 81       	ld	r24, Z
    3006:	8f 77       	andi	r24, 0x7F	; 127
    3008:	8c 93       	st	X, r24
		break;
	}
	/*Start Conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    300a:	a6 e2       	ldi	r26, 0x26	; 38
    300c:	b0 e0       	ldi	r27, 0x00	; 0
    300e:	e6 e2       	ldi	r30, 0x26	; 38
    3010:	f0 e0       	ldi	r31, 0x00	; 0
    3012:	80 81       	ld	r24, Z
    3014:	80 64       	ori	r24, 0x40	; 64
    3016:	8c 93       	st	X, r24
    3018:	05 c0       	rjmp	.+10     	; 0x3024 <ADC_getDigitalValueSynchNonBlocking+0x92>
	/*loop for the conversion to end*/
	while((GET_BIT(ADCSRA,ADCSRA_ADSC))==1 || Counter<MAX_DELAY)
	{
		Counter++;
    301a:	89 81       	ldd	r24, Y+1	; 0x01
    301c:	9a 81       	ldd	r25, Y+2	; 0x02
    301e:	01 96       	adiw	r24, 0x01	; 1
    3020:	9a 83       	std	Y+2, r25	; 0x02
    3022:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/*Start Conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
	/*loop for the conversion to end*/
	while((GET_BIT(ADCSRA,ADCSRA_ADSC))==1 || Counter<MAX_DELAY)
    3024:	e6 e2       	ldi	r30, 0x26	; 38
    3026:	f0 e0       	ldi	r31, 0x00	; 0
    3028:	80 81       	ld	r24, Z
    302a:	82 95       	swap	r24
    302c:	86 95       	lsr	r24
    302e:	86 95       	lsr	r24
    3030:	83 70       	andi	r24, 0x03	; 3
    3032:	88 2f       	mov	r24, r24
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	81 70       	andi	r24, 0x01	; 1
    3038:	90 70       	andi	r25, 0x00	; 0
    303a:	88 23       	and	r24, r24
    303c:	71 f7       	brne	.-36     	; 0x301a <ADC_getDigitalValueSynchNonBlocking+0x88>
    303e:	89 81       	ldd	r24, Y+1	; 0x01
    3040:	9a 81       	ldd	r25, Y+2	; 0x02
    3042:	33 ec       	ldi	r19, 0xC3	; 195
    3044:	80 35       	cpi	r24, 0x50	; 80
    3046:	93 07       	cpc	r25, r19
    3048:	40 f3       	brcs	.-48     	; 0x301a <ADC_getDigitalValueSynchNonBlocking+0x88>
	{
		Counter++;
	}
	if((GET_BIT(ADCSRA,ADCSRA_ADSC))==0)
    304a:	e6 e2       	ldi	r30, 0x26	; 38
    304c:	f0 e0       	ldi	r31, 0x00	; 0
    304e:	80 81       	ld	r24, Z
    3050:	82 95       	swap	r24
    3052:	86 95       	lsr	r24
    3054:	86 95       	lsr	r24
    3056:	83 70       	andi	r24, 0x03	; 3
    3058:	88 2f       	mov	r24, r24
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	81 70       	andi	r24, 0x01	; 1
    305e:	90 70       	andi	r25, 0x00	; 0
    3060:	00 97       	sbiw	r24, 0x00	; 0
    3062:	39 f4       	brne	.+14     	; 0x3072 <ADC_getDigitalValueSynchNonBlocking+0xe0>
	{

		return ADCL_L;
    3064:	e4 e2       	ldi	r30, 0x24	; 36
    3066:	f0 e0       	ldi	r31, 0x00	; 0
    3068:	80 81       	ld	r24, Z
    306a:	91 81       	ldd	r25, Z+1	; 0x01
    306c:	98 87       	std	Y+8, r25	; 0x08
    306e:	8f 83       	std	Y+7, r24	; 0x07
    3070:	02 c0       	rjmp	.+4      	; 0x3076 <ADC_getDigitalValueSynchNonBlocking+0xe4>
	}
	else
	{
		return 0;
    3072:	18 86       	std	Y+8, r1	; 0x08
    3074:	1f 82       	std	Y+7, r1	; 0x07
    3076:	8f 81       	ldd	r24, Y+7	; 0x07
    3078:	98 85       	ldd	r25, Y+8	; 0x08
	}
}
    307a:	2a 96       	adiw	r28, 0x0a	; 10
    307c:	0f b6       	in	r0, 0x3f	; 63
    307e:	f8 94       	cli
    3080:	de bf       	out	0x3e, r29	; 62
    3082:	0f be       	out	0x3f, r0	; 63
    3084:	cd bf       	out	0x3d, r28	; 61
    3086:	cf 91       	pop	r28
    3088:	df 91       	pop	r29
    308a:	08 95       	ret

0000308c <ADC_getDigitalValueAsynchCallBack>:


void ADC_getDigitalValueAsynchCallBack(Analog_Channel_Select Channel,ADC_Start ADC_Status,Interrupt_Status Interrupt_status)
{
    308c:	df 93       	push	r29
    308e:	cf 93       	push	r28
    3090:	cd b7       	in	r28, 0x3d	; 61
    3092:	de b7       	in	r29, 0x3e	; 62
    3094:	27 97       	sbiw	r28, 0x07	; 7
    3096:	0f b6       	in	r0, 0x3f	; 63
    3098:	f8 94       	cli
    309a:	de bf       	out	0x3e, r29	; 62
    309c:	0f be       	out	0x3f, r0	; 63
    309e:	cd bf       	out	0x3d, r28	; 61
    30a0:	89 83       	std	Y+1, r24	; 0x01
    30a2:	6a 83       	std	Y+2, r22	; 0x02
    30a4:	4b 83       	std	Y+3, r20	; 0x03

	/*Select ADC Port*/
	ADMUX &= ADMUX_MUX_CLEAR;
    30a6:	a7 e2       	ldi	r26, 0x27	; 39
    30a8:	b0 e0       	ldi	r27, 0x00	; 0
    30aa:	e7 e2       	ldi	r30, 0x27	; 39
    30ac:	f0 e0       	ldi	r31, 0x00	; 0
    30ae:	80 81       	ld	r24, Z
    30b0:	80 7e       	andi	r24, 0xE0	; 224
    30b2:	8c 93       	st	X, r24
	ADMUX |= Channel;
    30b4:	a7 e2       	ldi	r26, 0x27	; 39
    30b6:	b0 e0       	ldi	r27, 0x00	; 0
    30b8:	e7 e2       	ldi	r30, 0x27	; 39
    30ba:	f0 e0       	ldi	r31, 0x00	; 0
    30bc:	90 81       	ld	r25, Z
    30be:	89 81       	ldd	r24, Y+1	; 0x01
    30c0:	89 2b       	or	r24, r25
    30c2:	8c 93       	st	X, r24
	/*Enable ADC*/
	switch(ADC_Status)
    30c4:	8a 81       	ldd	r24, Y+2	; 0x02
    30c6:	28 2f       	mov	r18, r24
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	3f 83       	std	Y+7, r19	; 0x07
    30cc:	2e 83       	std	Y+6, r18	; 0x06
    30ce:	8e 81       	ldd	r24, Y+6	; 0x06
    30d0:	9f 81       	ldd	r25, Y+7	; 0x07
    30d2:	00 97       	sbiw	r24, 0x00	; 0
    30d4:	a1 f0       	breq	.+40     	; 0x30fe <ADC_getDigitalValueAsynchCallBack+0x72>
    30d6:	2e 81       	ldd	r18, Y+6	; 0x06
    30d8:	3f 81       	ldd	r19, Y+7	; 0x07
    30da:	21 30       	cpi	r18, 0x01	; 1
    30dc:	31 05       	cpc	r19, r1
    30de:	b1 f4       	brne	.+44     	; 0x310c <ADC_getDigitalValueAsynchCallBack+0x80>
	{
	case ENABLE:
		ADCSRA &= ADCSRA_ADC_ENABLE_MASK_CLEAR;
    30e0:	a6 e2       	ldi	r26, 0x26	; 38
    30e2:	b0 e0       	ldi	r27, 0x00	; 0
    30e4:	e6 e2       	ldi	r30, 0x26	; 38
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	80 81       	ld	r24, Z
    30ea:	8f 77       	andi	r24, 0x7F	; 127
    30ec:	8c 93       	st	X, r24
		ADCSRA |= ADCSRA_ADC_ENABLE_MASK_SET;
    30ee:	a6 e2       	ldi	r26, 0x26	; 38
    30f0:	b0 e0       	ldi	r27, 0x00	; 0
    30f2:	e6 e2       	ldi	r30, 0x26	; 38
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
    30f6:	80 81       	ld	r24, Z
    30f8:	80 68       	ori	r24, 0x80	; 128
    30fa:	8c 93       	st	X, r24
    30fc:	07 c0       	rjmp	.+14     	; 0x310c <ADC_getDigitalValueAsynchCallBack+0x80>
		break;
	case DISABLE:
		ADCSRA &= ADCSRA_ADC_ENABLE_MASK_CLEAR;
    30fe:	a6 e2       	ldi	r26, 0x26	; 38
    3100:	b0 e0       	ldi	r27, 0x00	; 0
    3102:	e6 e2       	ldi	r30, 0x26	; 38
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	80 81       	ld	r24, Z
    3108:	8f 77       	andi	r24, 0x7F	; 127
    310a:	8c 93       	st	X, r24
		break;
	}


	/*Enable Interrupt*/
	switch(Interrupt_status)
    310c:	8b 81       	ldd	r24, Y+3	; 0x03
    310e:	28 2f       	mov	r18, r24
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	3d 83       	std	Y+5, r19	; 0x05
    3114:	2c 83       	std	Y+4, r18	; 0x04
    3116:	8c 81       	ldd	r24, Y+4	; 0x04
    3118:	9d 81       	ldd	r25, Y+5	; 0x05
    311a:	00 97       	sbiw	r24, 0x00	; 0
    311c:	31 f0       	breq	.+12     	; 0x312a <ADC_getDigitalValueAsynchCallBack+0x9e>
    311e:	2c 81       	ldd	r18, Y+4	; 0x04
    3120:	3d 81       	ldd	r19, Y+5	; 0x05
    3122:	21 30       	cpi	r18, 0x01	; 1
    3124:	31 05       	cpc	r19, r1
    3126:	81 f0       	breq	.+32     	; 0x3148 <ADC_getDigitalValueAsynchCallBack+0xbc>
    3128:	16 c0       	rjmp	.+44     	; 0x3156 <ADC_getDigitalValueAsynchCallBack+0xca>
	{
	case Interrupt_Enable:
		ADCSRA &= ADC_Interrupt_Clear_Mask;
    312a:	a6 e2       	ldi	r26, 0x26	; 38
    312c:	b0 e0       	ldi	r27, 0x00	; 0
    312e:	e6 e2       	ldi	r30, 0x26	; 38
    3130:	f0 e0       	ldi	r31, 0x00	; 0
    3132:	80 81       	ld	r24, Z
    3134:	87 7f       	andi	r24, 0xF7	; 247
    3136:	8c 93       	st	X, r24
		ADCSRA |= ADC_Interrupt_Set_Mask;
    3138:	a6 e2       	ldi	r26, 0x26	; 38
    313a:	b0 e0       	ldi	r27, 0x00	; 0
    313c:	e6 e2       	ldi	r30, 0x26	; 38
    313e:	f0 e0       	ldi	r31, 0x00	; 0
    3140:	80 81       	ld	r24, Z
    3142:	88 60       	ori	r24, 0x08	; 8
    3144:	8c 93       	st	X, r24
    3146:	07 c0       	rjmp	.+14     	; 0x3156 <ADC_getDigitalValueAsynchCallBack+0xca>
		break;
	case Interrupt_Disable:
		ADCSRA &= ADC_Interrupt_Clear_Mask;
    3148:	a6 e2       	ldi	r26, 0x26	; 38
    314a:	b0 e0       	ldi	r27, 0x00	; 0
    314c:	e6 e2       	ldi	r30, 0x26	; 38
    314e:	f0 e0       	ldi	r31, 0x00	; 0
    3150:	80 81       	ld	r24, Z
    3152:	87 7f       	andi	r24, 0xF7	; 247
    3154:	8c 93       	st	X, r24
	default:
		break;
	}
	//SET_BIT(ADCSRA,ADCSRA_ADIE);
	/*Start Conversion*/
	ADCSRA &= ADCSRA_ADC_START_CONV_CLEAR;
    3156:	a6 e2       	ldi	r26, 0x26	; 38
    3158:	b0 e0       	ldi	r27, 0x00	; 0
    315a:	e6 e2       	ldi	r30, 0x26	; 38
    315c:	f0 e0       	ldi	r31, 0x00	; 0
    315e:	80 81       	ld	r24, Z
    3160:	8f 7b       	andi	r24, 0xBF	; 191
    3162:	8c 93       	st	X, r24
	ADCSRA |= ADCSRA_ADC_START_CONV_SET;
    3164:	a6 e2       	ldi	r26, 0x26	; 38
    3166:	b0 e0       	ldi	r27, 0x00	; 0
    3168:	e6 e2       	ldi	r30, 0x26	; 38
    316a:	f0 e0       	ldi	r31, 0x00	; 0
    316c:	80 81       	ld	r24, Z
    316e:	80 64       	ori	r24, 0x40	; 64
    3170:	8c 93       	st	X, r24

}
    3172:	27 96       	adiw	r28, 0x07	; 7
    3174:	0f b6       	in	r0, 0x3f	; 63
    3176:	f8 94       	cli
    3178:	de bf       	out	0x3e, r29	; 62
    317a:	0f be       	out	0x3f, r0	; 63
    317c:	cd bf       	out	0x3d, r28	; 61
    317e:	cf 91       	pop	r28
    3180:	df 91       	pop	r29
    3182:	08 95       	ret

00003184 <ADC_Get_Value_Reading>:

u16 ADC_Get_Value_Reading(void)
{
    3184:	df 93       	push	r29
    3186:	cf 93       	push	r28
    3188:	cd b7       	in	r28, 0x3d	; 61
    318a:	de b7       	in	r29, 0x3e	; 62
	return ADCL_L;
    318c:	e4 e2       	ldi	r30, 0x24	; 36
    318e:	f0 e0       	ldi	r31, 0x00	; 0
    3190:	80 81       	ld	r24, Z
    3192:	91 81       	ldd	r25, Z+1	; 0x01
}
    3194:	cf 91       	pop	r28
    3196:	df 91       	pop	r29
    3198:	08 95       	ret

0000319a <ADC_Interrupt_Enable>:
void ADC_Interrupt_Enable(void)
{
    319a:	df 93       	push	r29
    319c:	cf 93       	push	r28
    319e:	cd b7       	in	r28, 0x3d	; 61
    31a0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADCSRA_ADIE);
    31a2:	a6 e2       	ldi	r26, 0x26	; 38
    31a4:	b0 e0       	ldi	r27, 0x00	; 0
    31a6:	e6 e2       	ldi	r30, 0x26	; 38
    31a8:	f0 e0       	ldi	r31, 0x00	; 0
    31aa:	80 81       	ld	r24, Z
    31ac:	88 60       	ori	r24, 0x08	; 8
    31ae:	8c 93       	st	X, r24

}
    31b0:	cf 91       	pop	r28
    31b2:	df 91       	pop	r29
    31b4:	08 95       	ret

000031b6 <ADC_Interrupt_Disable>:
void ADC_Interrupt_Disable(void)
{
    31b6:	df 93       	push	r29
    31b8:	cf 93       	push	r28
    31ba:	cd b7       	in	r28, 0x3d	; 61
    31bc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
    31be:	a6 e2       	ldi	r26, 0x26	; 38
    31c0:	b0 e0       	ldi	r27, 0x00	; 0
    31c2:	e6 e2       	ldi	r30, 0x26	; 38
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	80 81       	ld	r24, Z
    31c8:	87 7f       	andi	r24, 0xF7	; 247
    31ca:	8c 93       	st	X, r24

}
    31cc:	cf 91       	pop	r28
    31ce:	df 91       	pop	r29
    31d0:	08 95       	ret

000031d2 <ADC_u8INTSetCallBack>:
void ADC_u8INTSetCallBack(void (*Copy_pvINTFunc)(void))
{
    31d2:	df 93       	push	r29
    31d4:	cf 93       	push	r28
    31d6:	00 d0       	rcall	.+0      	; 0x31d8 <ADC_u8INTSetCallBack+0x6>
    31d8:	cd b7       	in	r28, 0x3d	; 61
    31da:	de b7       	in	r29, 0x3e	; 62
    31dc:	9a 83       	std	Y+2, r25	; 0x02
    31de:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvINTFunc != NULL)
    31e0:	89 81       	ldd	r24, Y+1	; 0x01
    31e2:	9a 81       	ldd	r25, Y+2	; 0x02
    31e4:	00 97       	sbiw	r24, 0x00	; 0
    31e6:	31 f0       	breq	.+12     	; 0x31f4 <ADC_u8INTSetCallBack+0x22>
	{
		ADC_ptr_FUNC=Copy_pvINTFunc;
    31e8:	89 81       	ldd	r24, Y+1	; 0x01
    31ea:	9a 81       	ldd	r25, Y+2	; 0x02
    31ec:	90 93 c0 02 	sts	0x02C0, r25
    31f0:	80 93 bf 02 	sts	0x02BF, r24
	}
}
    31f4:	0f 90       	pop	r0
    31f6:	0f 90       	pop	r0
    31f8:	cf 91       	pop	r28
    31fa:	df 91       	pop	r29
    31fc:	08 95       	ret

000031fe <__vector_16>:
void __vector_16 (void)  __attribute__((signal));
void __vector_16 (void)
{
    31fe:	1f 92       	push	r1
    3200:	0f 92       	push	r0
    3202:	0f b6       	in	r0, 0x3f	; 63
    3204:	0f 92       	push	r0
    3206:	11 24       	eor	r1, r1
    3208:	2f 93       	push	r18
    320a:	3f 93       	push	r19
    320c:	4f 93       	push	r20
    320e:	5f 93       	push	r21
    3210:	6f 93       	push	r22
    3212:	7f 93       	push	r23
    3214:	8f 93       	push	r24
    3216:	9f 93       	push	r25
    3218:	af 93       	push	r26
    321a:	bf 93       	push	r27
    321c:	ef 93       	push	r30
    321e:	ff 93       	push	r31
    3220:	df 93       	push	r29
    3222:	cf 93       	push	r28
    3224:	cd b7       	in	r28, 0x3d	; 61
    3226:	de b7       	in	r29, 0x3e	; 62
	if(ADC_ptr_FUNC != NULL)
    3228:	80 91 bf 02 	lds	r24, 0x02BF
    322c:	90 91 c0 02 	lds	r25, 0x02C0
    3230:	00 97       	sbiw	r24, 0x00	; 0
    3232:	29 f0       	breq	.+10     	; 0x323e <__vector_16+0x40>
	{
		ADC_ptr_FUNC();
    3234:	e0 91 bf 02 	lds	r30, 0x02BF
    3238:	f0 91 c0 02 	lds	r31, 0x02C0
    323c:	09 95       	icall
	}
	else
	{
		/*Stop*/
	}
}
    323e:	cf 91       	pop	r28
    3240:	df 91       	pop	r29
    3242:	ff 91       	pop	r31
    3244:	ef 91       	pop	r30
    3246:	bf 91       	pop	r27
    3248:	af 91       	pop	r26
    324a:	9f 91       	pop	r25
    324c:	8f 91       	pop	r24
    324e:	7f 91       	pop	r23
    3250:	6f 91       	pop	r22
    3252:	5f 91       	pop	r21
    3254:	4f 91       	pop	r20
    3256:	3f 91       	pop	r19
    3258:	2f 91       	pop	r18
    325a:	0f 90       	pop	r0
    325c:	0f be       	out	0x3f, r0	; 63
    325e:	0f 90       	pop	r0
    3260:	1f 90       	pop	r1
    3262:	18 95       	reti

00003264 <H_Relay_Void_WorkOn>:
#include "Relay_Cfg.h"
#include "Relay_Int.h"
#include "Relay_Priv.h"

void H_Relay_Void_WorkOn(Realy_Type relay)
{
    3264:	df 93       	push	r29
    3266:	cf 93       	push	r28
    3268:	00 d0       	rcall	.+0      	; 0x326a <H_Relay_Void_WorkOn+0x6>
    326a:	0f 92       	push	r0
    326c:	cd b7       	in	r28, 0x3d	; 61
    326e:	de b7       	in	r29, 0x3e	; 62
    3270:	89 83       	std	Y+1, r24	; 0x01
	switch(relay)
    3272:	89 81       	ldd	r24, Y+1	; 0x01
    3274:	28 2f       	mov	r18, r24
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	3b 83       	std	Y+3, r19	; 0x03
    327a:	2a 83       	std	Y+2, r18	; 0x02
    327c:	8a 81       	ldd	r24, Y+2	; 0x02
    327e:	9b 81       	ldd	r25, Y+3	; 0x03
    3280:	81 30       	cpi	r24, 0x01	; 1
    3282:	91 05       	cpc	r25, r1
    3284:	31 f0       	breq	.+12     	; 0x3292 <H_Relay_Void_WorkOn+0x2e>
    3286:	2a 81       	ldd	r18, Y+2	; 0x02
    3288:	3b 81       	ldd	r19, Y+3	; 0x03
    328a:	22 30       	cpi	r18, 0x02	; 2
    328c:	31 05       	cpc	r19, r1
    328e:	31 f0       	breq	.+12     	; 0x329c <H_Relay_Void_WorkOn+0x38>
    3290:	09 c0       	rjmp	.+18     	; 0x32a4 <H_Relay_Void_WorkOn+0x40>
	{
	case Relay_1:
		M_Dio_void_setPinValue(RELAY_1_PIN, DIO_HIGH);
    3292:	85 e2       	ldi	r24, 0x25	; 37
    3294:	61 e0       	ldi	r22, 0x01	; 1
    3296:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
    329a:	04 c0       	rjmp	.+8      	; 0x32a4 <H_Relay_Void_WorkOn+0x40>
	break;
	case Relay_2:
		M_Dio_void_setPinValue(RELAY_2_PIN, DIO_HIGH);
    329c:	81 e1       	ldi	r24, 0x11	; 17
    329e:	61 e0       	ldi	r22, 0x01	; 1
    32a0:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
	break;
	}
}
    32a4:	0f 90       	pop	r0
    32a6:	0f 90       	pop	r0
    32a8:	0f 90       	pop	r0
    32aa:	cf 91       	pop	r28
    32ac:	df 91       	pop	r29
    32ae:	08 95       	ret

000032b0 <H_Relay_Void_WorkOff>:

void H_Relay_Void_WorkOff(Realy_Type relay)
{
    32b0:	df 93       	push	r29
    32b2:	cf 93       	push	r28
    32b4:	00 d0       	rcall	.+0      	; 0x32b6 <H_Relay_Void_WorkOff+0x6>
    32b6:	0f 92       	push	r0
    32b8:	cd b7       	in	r28, 0x3d	; 61
    32ba:	de b7       	in	r29, 0x3e	; 62
    32bc:	89 83       	std	Y+1, r24	; 0x01
	switch(relay)
    32be:	89 81       	ldd	r24, Y+1	; 0x01
    32c0:	28 2f       	mov	r18, r24
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	3b 83       	std	Y+3, r19	; 0x03
    32c6:	2a 83       	std	Y+2, r18	; 0x02
    32c8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ca:	9b 81       	ldd	r25, Y+3	; 0x03
    32cc:	81 30       	cpi	r24, 0x01	; 1
    32ce:	91 05       	cpc	r25, r1
    32d0:	31 f0       	breq	.+12     	; 0x32de <H_Relay_Void_WorkOff+0x2e>
    32d2:	2a 81       	ldd	r18, Y+2	; 0x02
    32d4:	3b 81       	ldd	r19, Y+3	; 0x03
    32d6:	22 30       	cpi	r18, 0x02	; 2
    32d8:	31 05       	cpc	r19, r1
    32da:	31 f0       	breq	.+12     	; 0x32e8 <H_Relay_Void_WorkOff+0x38>
    32dc:	09 c0       	rjmp	.+18     	; 0x32f0 <H_Relay_Void_WorkOff+0x40>
	{
	case Relay_1:
		M_Dio_void_setPinValue(RELAY_1_PIN, DIO_LOW);
    32de:	85 e2       	ldi	r24, 0x25	; 37
    32e0:	60 e0       	ldi	r22, 0x00	; 0
    32e2:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
    32e6:	04 c0       	rjmp	.+8      	; 0x32f0 <H_Relay_Void_WorkOff+0x40>
	break;
	case Relay_2:
		M_Dio_void_setPinValue(RELAY_2_PIN, DIO_LOW);
    32e8:	81 e1       	ldi	r24, 0x11	; 17
    32ea:	60 e0       	ldi	r22, 0x00	; 0
    32ec:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
	break;
	}
}
    32f0:	0f 90       	pop	r0
    32f2:	0f 90       	pop	r0
    32f4:	0f 90       	pop	r0
    32f6:	cf 91       	pop	r28
    32f8:	df 91       	pop	r29
    32fa:	08 95       	ret

000032fc <H_readPB>:
#include"PB_Types.h"
#include"PB_CFG.h"
#include"PB_Init.h"

PB_State H_readPB(PB_ID PushBID,PB_ActiveType Mode)
{
    32fc:	df 93       	push	r29
    32fe:	cf 93       	push	r28
    3300:	cd b7       	in	r28, 0x3d	; 61
    3302:	de b7       	in	r29, 0x3e	; 62
    3304:	64 97       	sbiw	r28, 0x14	; 20
    3306:	0f b6       	in	r0, 0x3f	; 63
    3308:	f8 94       	cli
    330a:	de bf       	out	0x3e, r29	; 62
    330c:	0f be       	out	0x3f, r0	; 63
    330e:	cd bf       	out	0x3d, r28	; 61
    3310:	89 8b       	std	Y+17, r24	; 0x11
    3312:	6a 8b       	std	Y+18, r22	; 0x12
	PB_State Button_state=PB_RELEASED;
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	88 8b       	std	Y+16, r24	; 0x10
	Dio_LevelType Local_pin_value;
	switch(PushBID)
    3318:	89 89       	ldd	r24, Y+17	; 0x11
    331a:	28 2f       	mov	r18, r24
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	3c 8b       	std	Y+20, r19	; 0x14
    3320:	2b 8b       	std	Y+19, r18	; 0x13
    3322:	8b 89       	ldd	r24, Y+19	; 0x13
    3324:	9c 89       	ldd	r25, Y+20	; 0x14
    3326:	81 30       	cpi	r24, 0x01	; 1
    3328:	91 05       	cpc	r25, r1
    332a:	09 f4       	brne	.+2      	; 0x332e <H_readPB+0x32>
    332c:	9b c0       	rjmp	.+310    	; 0x3464 <H_readPB+0x168>
    332e:	2b 89       	ldd	r18, Y+19	; 0x13
    3330:	3c 89       	ldd	r19, Y+20	; 0x14
    3332:	22 30       	cpi	r18, 0x02	; 2
    3334:	31 05       	cpc	r19, r1
    3336:	2c f4       	brge	.+10     	; 0x3342 <H_readPB+0x46>
    3338:	8b 89       	ldd	r24, Y+19	; 0x13
    333a:	9c 89       	ldd	r25, Y+20	; 0x14
    333c:	00 97       	sbiw	r24, 0x00	; 0
    333e:	71 f0       	breq	.+28     	; 0x335c <H_readPB+0x60>
    3340:	c3 c0       	rjmp	.+390    	; 0x34c8 <H_readPB+0x1cc>
    3342:	2b 89       	ldd	r18, Y+19	; 0x13
    3344:	3c 89       	ldd	r19, Y+20	; 0x14
    3346:	22 30       	cpi	r18, 0x02	; 2
    3348:	31 05       	cpc	r19, r1
    334a:	09 f4       	brne	.+2      	; 0x334e <H_readPB+0x52>
    334c:	9c c0       	rjmp	.+312    	; 0x3486 <H_readPB+0x18a>
    334e:	8b 89       	ldd	r24, Y+19	; 0x13
    3350:	9c 89       	ldd	r25, Y+20	; 0x14
    3352:	83 30       	cpi	r24, 0x03	; 3
    3354:	91 05       	cpc	r25, r1
    3356:	09 f4       	brne	.+2      	; 0x335a <H_readPB+0x5e>
    3358:	a7 c0       	rjmp	.+334    	; 0x34a8 <H_readPB+0x1ac>
    335a:	b6 c0       	rjmp	.+364    	; 0x34c8 <H_readPB+0x1cc>
	{
	case PB_ID1:
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW1);
    335c:	8f e2       	ldi	r24, 0x2F	; 47
    335e:	0e 94 9c 13 	call	0x2738	; 0x2738 <M_Dio_en_getPinValue>
    3362:	8f 87       	std	Y+15, r24	; 0x0f
		if(Local_pin_value==PB_PRESSED_ACTL)
    3364:	8f 85       	ldd	r24, Y+15	; 0x0f
    3366:	88 23       	and	r24, r24
    3368:	09 f0       	breq	.+2      	; 0x336c <H_readPB+0x70>
    336a:	ae c0       	rjmp	.+348    	; 0x34c8 <H_readPB+0x1cc>
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	a8 e4       	ldi	r26, 0x48	; 72
    3372:	b2 e4       	ldi	r27, 0x42	; 66
    3374:	8b 87       	std	Y+11, r24	; 0x0b
    3376:	9c 87       	std	Y+12, r25	; 0x0c
    3378:	ad 87       	std	Y+13, r26	; 0x0d
    337a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    337c:	6b 85       	ldd	r22, Y+11	; 0x0b
    337e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3380:	8d 85       	ldd	r24, Y+13	; 0x0d
    3382:	9e 85       	ldd	r25, Y+14	; 0x0e
    3384:	20 e0       	ldi	r18, 0x00	; 0
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	4a e7       	ldi	r20, 0x7A	; 122
    338a:	55 e4       	ldi	r21, 0x45	; 69
    338c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3390:	dc 01       	movw	r26, r24
    3392:	cb 01       	movw	r24, r22
    3394:	8f 83       	std	Y+7, r24	; 0x07
    3396:	98 87       	std	Y+8, r25	; 0x08
    3398:	a9 87       	std	Y+9, r26	; 0x09
    339a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    339c:	6f 81       	ldd	r22, Y+7	; 0x07
    339e:	78 85       	ldd	r23, Y+8	; 0x08
    33a0:	89 85       	ldd	r24, Y+9	; 0x09
    33a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    33a4:	20 e0       	ldi	r18, 0x00	; 0
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	40 e8       	ldi	r20, 0x80	; 128
    33aa:	5f e3       	ldi	r21, 0x3F	; 63
    33ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33b0:	88 23       	and	r24, r24
    33b2:	2c f4       	brge	.+10     	; 0x33be <H_readPB+0xc2>
		__ticks = 1;
    33b4:	81 e0       	ldi	r24, 0x01	; 1
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	9e 83       	std	Y+6, r25	; 0x06
    33ba:	8d 83       	std	Y+5, r24	; 0x05
    33bc:	3f c0       	rjmp	.+126    	; 0x343c <H_readPB+0x140>
	else if (__tmp > 65535)
    33be:	6f 81       	ldd	r22, Y+7	; 0x07
    33c0:	78 85       	ldd	r23, Y+8	; 0x08
    33c2:	89 85       	ldd	r24, Y+9	; 0x09
    33c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    33c6:	20 e0       	ldi	r18, 0x00	; 0
    33c8:	3f ef       	ldi	r19, 0xFF	; 255
    33ca:	4f e7       	ldi	r20, 0x7F	; 127
    33cc:	57 e4       	ldi	r21, 0x47	; 71
    33ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33d2:	18 16       	cp	r1, r24
    33d4:	4c f5       	brge	.+82     	; 0x3428 <H_readPB+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    33d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    33da:	8d 85       	ldd	r24, Y+13	; 0x0d
    33dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    33de:	20 e0       	ldi	r18, 0x00	; 0
    33e0:	30 e0       	ldi	r19, 0x00	; 0
    33e2:	40 e2       	ldi	r20, 0x20	; 32
    33e4:	51 e4       	ldi	r21, 0x41	; 65
    33e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ea:	dc 01       	movw	r26, r24
    33ec:	cb 01       	movw	r24, r22
    33ee:	bc 01       	movw	r22, r24
    33f0:	cd 01       	movw	r24, r26
    33f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f6:	dc 01       	movw	r26, r24
    33f8:	cb 01       	movw	r24, r22
    33fa:	9e 83       	std	Y+6, r25	; 0x06
    33fc:	8d 83       	std	Y+5, r24	; 0x05
    33fe:	0f c0       	rjmp	.+30     	; 0x341e <H_readPB+0x122>
    3400:	80 e9       	ldi	r24, 0x90	; 144
    3402:	91 e0       	ldi	r25, 0x01	; 1
    3404:	9c 83       	std	Y+4, r25	; 0x04
    3406:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3408:	8b 81       	ldd	r24, Y+3	; 0x03
    340a:	9c 81       	ldd	r25, Y+4	; 0x04
    340c:	01 97       	sbiw	r24, 0x01	; 1
    340e:	f1 f7       	brne	.-4      	; 0x340c <H_readPB+0x110>
    3410:	9c 83       	std	Y+4, r25	; 0x04
    3412:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3414:	8d 81       	ldd	r24, Y+5	; 0x05
    3416:	9e 81       	ldd	r25, Y+6	; 0x06
    3418:	01 97       	sbiw	r24, 0x01	; 1
    341a:	9e 83       	std	Y+6, r25	; 0x06
    341c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    341e:	8d 81       	ldd	r24, Y+5	; 0x05
    3420:	9e 81       	ldd	r25, Y+6	; 0x06
    3422:	00 97       	sbiw	r24, 0x00	; 0
    3424:	69 f7       	brne	.-38     	; 0x3400 <H_readPB+0x104>
    3426:	19 c0       	rjmp	.+50     	; 0x345a <H_readPB+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3428:	6f 81       	ldd	r22, Y+7	; 0x07
    342a:	78 85       	ldd	r23, Y+8	; 0x08
    342c:	89 85       	ldd	r24, Y+9	; 0x09
    342e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3434:	dc 01       	movw	r26, r24
    3436:	cb 01       	movw	r24, r22
    3438:	9e 83       	std	Y+6, r25	; 0x06
    343a:	8d 83       	std	Y+5, r24	; 0x05
    343c:	8d 81       	ldd	r24, Y+5	; 0x05
    343e:	9e 81       	ldd	r25, Y+6	; 0x06
    3440:	9a 83       	std	Y+2, r25	; 0x02
    3442:	89 83       	std	Y+1, r24	; 0x01
    3444:	89 81       	ldd	r24, Y+1	; 0x01
    3446:	9a 81       	ldd	r25, Y+2	; 0x02
    3448:	01 97       	sbiw	r24, 0x01	; 1
    344a:	f1 f7       	brne	.-4      	; 0x3448 <H_readPB+0x14c>
    344c:	9a 83       	std	Y+2, r25	; 0x02
    344e:	89 83       	std	Y+1, r24	; 0x01
    3450:	04 c0       	rjmp	.+8      	; 0x345a <H_readPB+0x15e>
		{
			_delay_ms(50);
			while(Local_pin_value==PB_PRESSED_ACTL)
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW1);
    3452:	8f e2       	ldi	r24, 0x2F	; 47
    3454:	0e 94 9c 13 	call	0x2738	; 0x2738 <M_Dio_en_getPinValue>
    3458:	8f 87       	std	Y+15, r24	; 0x0f
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW1);
		if(Local_pin_value==PB_PRESSED_ACTL)
		{
			_delay_ms(50);
			while(Local_pin_value==PB_PRESSED_ACTL)
    345a:	8f 85       	ldd	r24, Y+15	; 0x0f
    345c:	88 23       	and	r24, r24
    345e:	c9 f3       	breq	.-14     	; 0x3452 <H_readPB+0x156>
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW1);
			}
			Button_state=PB_PRESSED;
    3460:	18 8a       	std	Y+16, r1	; 0x10
    3462:	32 c0       	rjmp	.+100    	; 0x34c8 <H_readPB+0x1cc>
#error("Wrong Activation Mode")
#endif
	break;
	case PB_ID2:
#if(Mode == PB_ACTIVE_LOW)
			Local_pin_value=M_Dio_en_getPinValue(PB_SW2);
    3464:	8e e2       	ldi	r24, 0x2E	; 46
    3466:	0e 94 9c 13 	call	0x2738	; 0x2738 <M_Dio_en_getPinValue>
    346a:	8f 87       	std	Y+15, r24	; 0x0f
			if(Local_pin_value==PB_PRESSED_ACTL)
    346c:	8f 85       	ldd	r24, Y+15	; 0x0f
    346e:	88 23       	and	r24, r24
    3470:	59 f5       	brne	.+86     	; 0x34c8 <H_readPB+0x1cc>
    3472:	04 c0       	rjmp	.+8      	; 0x347c <H_readPB+0x180>
			{
				while(Local_pin_value==PB_PRESSED_ACTL)
				{
					Local_pin_value=M_Dio_en_getPinValue(PB_SW2);
    3474:	8e e2       	ldi	r24, 0x2E	; 46
    3476:	0e 94 9c 13 	call	0x2738	; 0x2738 <M_Dio_en_getPinValue>
    347a:	8f 87       	std	Y+15, r24	; 0x0f
	case PB_ID2:
#if(Mode == PB_ACTIVE_LOW)
			Local_pin_value=M_Dio_en_getPinValue(PB_SW2);
			if(Local_pin_value==PB_PRESSED_ACTL)
			{
				while(Local_pin_value==PB_PRESSED_ACTL)
    347c:	8f 85       	ldd	r24, Y+15	; 0x0f
    347e:	88 23       	and	r24, r24
    3480:	c9 f3       	breq	.-14     	; 0x3474 <H_readPB+0x178>
				{
					Local_pin_value=M_Dio_en_getPinValue(PB_SW2);
				}
				Button_state=PB_PRESSED;
    3482:	18 8a       	std	Y+16, r1	; 0x10
    3484:	21 c0       	rjmp	.+66     	; 0x34c8 <H_readPB+0x1cc>
#error("Wrong Activation Mode")
#endif
		break;
		case PB_ID3:
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW3);
    3486:	8d e2       	ldi	r24, 0x2D	; 45
    3488:	0e 94 9c 13 	call	0x2738	; 0x2738 <M_Dio_en_getPinValue>
    348c:	8f 87       	std	Y+15, r24	; 0x0f
		if(Local_pin_value==PB_PRESSED_ACTL)
    348e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3490:	88 23       	and	r24, r24
    3492:	d1 f4       	brne	.+52     	; 0x34c8 <H_readPB+0x1cc>
    3494:	04 c0       	rjmp	.+8      	; 0x349e <H_readPB+0x1a2>
		{
			while(Local_pin_value==PB_PRESSED_ACTL)
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW3);
    3496:	8d e2       	ldi	r24, 0x2D	; 45
    3498:	0e 94 9c 13 	call	0x2738	; 0x2738 <M_Dio_en_getPinValue>
    349c:	8f 87       	std	Y+15, r24	; 0x0f
		case PB_ID3:
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW3);
		if(Local_pin_value==PB_PRESSED_ACTL)
		{
			while(Local_pin_value==PB_PRESSED_ACTL)
    349e:	8f 85       	ldd	r24, Y+15	; 0x0f
    34a0:	88 23       	and	r24, r24
    34a2:	c9 f3       	breq	.-14     	; 0x3496 <H_readPB+0x19a>
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW3);
			}
			Button_state=PB_PRESSED;
    34a4:	18 8a       	std	Y+16, r1	; 0x10
    34a6:	10 c0       	rjmp	.+32     	; 0x34c8 <H_readPB+0x1cc>
#error("Wrong Activation Mode")
#endif
	break;
	case PB_ID4:
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW4);
    34a8:	8b e2       	ldi	r24, 0x2B	; 43
    34aa:	0e 94 9c 13 	call	0x2738	; 0x2738 <M_Dio_en_getPinValue>
    34ae:	8f 87       	std	Y+15, r24	; 0x0f
		if(Local_pin_value==PB_PRESSED_ACTL)
    34b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    34b2:	88 23       	and	r24, r24
    34b4:	49 f4       	brne	.+18     	; 0x34c8 <H_readPB+0x1cc>
    34b6:	04 c0       	rjmp	.+8      	; 0x34c0 <H_readPB+0x1c4>
		{
			while(Local_pin_value==PB_PRESSED_ACTL)
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW4);
    34b8:	8b e2       	ldi	r24, 0x2B	; 43
    34ba:	0e 94 9c 13 	call	0x2738	; 0x2738 <M_Dio_en_getPinValue>
    34be:	8f 87       	std	Y+15, r24	; 0x0f
	case PB_ID4:
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW4);
		if(Local_pin_value==PB_PRESSED_ACTL)
		{
			while(Local_pin_value==PB_PRESSED_ACTL)
    34c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    34c2:	88 23       	and	r24, r24
    34c4:	c9 f3       	breq	.-14     	; 0x34b8 <H_readPB+0x1bc>
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW4);
			}
			Button_state=PB_PRESSED;
    34c6:	18 8a       	std	Y+16, r1	; 0x10
#else
#error("Wrong Activation Mode")
#endif
	break;
	}
	return Button_state;
    34c8:	88 89       	ldd	r24, Y+16	; 0x10
}
    34ca:	64 96       	adiw	r28, 0x14	; 20
    34cc:	0f b6       	in	r0, 0x3f	; 63
    34ce:	f8 94       	cli
    34d0:	de bf       	out	0x3e, r29	; 62
    34d2:	0f be       	out	0x3f, r0	; 63
    34d4:	cd bf       	out	0x3d, r28	; 61
    34d6:	cf 91       	pop	r28
    34d8:	df 91       	pop	r29
    34da:	08 95       	ret

000034dc <H_Temprature_void_Init>:



ADC_ConfigType ADC_OBJECT={VCC_5V,DIV_BY_8,Right_Adjust,ADC0,AUTO_Trigger_Disable,Free_Runnin_Mode};
void H_Temprature_void_Init(void)
{
    34dc:	df 93       	push	r29
    34de:	cf 93       	push	r28
    34e0:	cd b7       	in	r28, 0x3d	; 61
    34e2:	de b7       	in	r29, 0x3e	; 62
	ADC_Init(&ADC_OBJECT);
    34e4:	8a e7       	ldi	r24, 0x7A	; 122
    34e6:	91 e0       	ldi	r25, 0x01	; 1
    34e8:	0e 94 40 16 	call	0x2c80	; 0x2c80 <ADC_Init>


}
    34ec:	cf 91       	pop	r28
    34ee:	df 91       	pop	r29
    34f0:	08 95       	ret

000034f2 <H_Temprature_u16_Read>:
u16 H_Temprature_u16_Read(void)
{
    34f2:	df 93       	push	r29
    34f4:	cf 93       	push	r28
    34f6:	00 d0       	rcall	.+0      	; 0x34f8 <H_Temprature_u16_Read+0x6>
    34f8:	00 d0       	rcall	.+0      	; 0x34fa <H_Temprature_u16_Read+0x8>
    34fa:	cd b7       	in	r28, 0x3d	; 61
    34fc:	de b7       	in	r29, 0x3e	; 62
	u16 Return_value=0;
    34fe:	1c 82       	std	Y+4, r1	; 0x04
    3500:	1b 82       	std	Y+3, r1	; 0x03
	u16 Temp_value=0;
    3502:	1a 82       	std	Y+2, r1	; 0x02
    3504:	19 82       	std	Y+1, r1	; 0x01
	Return_value=ADC_getDigitalValueSynchNonBlocking(ADC0,ENABLE);
    3506:	80 e0       	ldi	r24, 0x00	; 0
    3508:	61 e0       	ldi	r22, 0x01	; 1
    350a:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <ADC_getDigitalValueSynchNonBlocking>
    350e:	9c 83       	std	Y+4, r25	; 0x04
    3510:	8b 83       	std	Y+3, r24	; 0x03
	//H_LCD_void_gotoXY(1,0);
	//H_LCD_void_sendIntNum(Return_value);
	Temp_value=(((Return_value*5)/10)-1);
    3512:	2b 81       	ldd	r18, Y+3	; 0x03
    3514:	3c 81       	ldd	r19, Y+4	; 0x04
    3516:	c9 01       	movw	r24, r18
    3518:	88 0f       	add	r24, r24
    351a:	99 1f       	adc	r25, r25
    351c:	88 0f       	add	r24, r24
    351e:	99 1f       	adc	r25, r25
    3520:	82 0f       	add	r24, r18
    3522:	93 1f       	adc	r25, r19
    3524:	2a e0       	ldi	r18, 0x0A	; 10
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	b9 01       	movw	r22, r18
    352a:	0e 94 d6 22 	call	0x45ac	; 0x45ac <__udivmodhi4>
    352e:	cb 01       	movw	r24, r22
    3530:	01 97       	sbiw	r24, 0x01	; 1
    3532:	9a 83       	std	Y+2, r25	; 0x02
    3534:	89 83       	std	Y+1, r24	; 0x01
	//H_LCD_void_sendIntNum(Temp_value);
	return Temp_value;
    3536:	89 81       	ldd	r24, Y+1	; 0x01
    3538:	9a 81       	ldd	r25, Y+2	; 0x02
}
    353a:	0f 90       	pop	r0
    353c:	0f 90       	pop	r0
    353e:	0f 90       	pop	r0
    3540:	0f 90       	pop	r0
    3542:	cf 91       	pop	r28
    3544:	df 91       	pop	r29
    3546:	08 95       	ret

00003548 <H_LED_void_Turn_on>:
#include"LED_CFG.h"
#include"LED_Init.h"


void H_LED_void_Turn_on(u8 ledID)
{
    3548:	df 93       	push	r29
    354a:	cf 93       	push	r28
    354c:	00 d0       	rcall	.+0      	; 0x354e <H_LED_void_Turn_on+0x6>
    354e:	0f 92       	push	r0
    3550:	cd b7       	in	r28, 0x3d	; 61
    3552:	de b7       	in	r29, 0x3e	; 62
    3554:	89 83       	std	Y+1, r24	; 0x01
	switch(ledID)
    3556:	89 81       	ldd	r24, Y+1	; 0x01
    3558:	28 2f       	mov	r18, r24
    355a:	30 e0       	ldi	r19, 0x00	; 0
    355c:	3b 83       	std	Y+3, r19	; 0x03
    355e:	2a 83       	std	Y+2, r18	; 0x02
    3560:	8a 81       	ldd	r24, Y+2	; 0x02
    3562:	9b 81       	ldd	r25, Y+3	; 0x03
    3564:	81 30       	cpi	r24, 0x01	; 1
    3566:	91 05       	cpc	r25, r1
    3568:	f9 f0       	breq	.+62     	; 0x35a8 <H_LED_void_Turn_on+0x60>
    356a:	2a 81       	ldd	r18, Y+2	; 0x02
    356c:	3b 81       	ldd	r19, Y+3	; 0x03
    356e:	22 30       	cpi	r18, 0x02	; 2
    3570:	31 05       	cpc	r19, r1
    3572:	2c f4       	brge	.+10     	; 0x357e <H_LED_void_Turn_on+0x36>
    3574:	8a 81       	ldd	r24, Y+2	; 0x02
    3576:	9b 81       	ldd	r25, Y+3	; 0x03
    3578:	00 97       	sbiw	r24, 0x00	; 0
    357a:	61 f0       	breq	.+24     	; 0x3594 <H_LED_void_Turn_on+0x4c>
    357c:	1e c0       	rjmp	.+60     	; 0x35ba <H_LED_void_Turn_on+0x72>
    357e:	2a 81       	ldd	r18, Y+2	; 0x02
    3580:	3b 81       	ldd	r19, Y+3	; 0x03
    3582:	22 30       	cpi	r18, 0x02	; 2
    3584:	31 05       	cpc	r19, r1
    3586:	59 f0       	breq	.+22     	; 0x359e <H_LED_void_Turn_on+0x56>
    3588:	8a 81       	ldd	r24, Y+2	; 0x02
    358a:	9b 81       	ldd	r25, Y+3	; 0x03
    358c:	83 30       	cpi	r24, 0x03	; 3
    358e:	91 05       	cpc	r25, r1
    3590:	81 f0       	breq	.+32     	; 0x35b2 <H_LED_void_Turn_on+0x6a>
    3592:	13 c0       	rjmp	.+38     	; 0x35ba <H_LED_void_Turn_on+0x72>
	{
	case LED_RED:
#if(LED_RED_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_RED_PIN,DIO_HIGH);
    3594:	8b e1       	ldi	r24, 0x1B	; 27
    3596:	61 e0       	ldi	r22, 0x01	; 1
    3598:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
    359c:	0e c0       	rjmp	.+28     	; 0x35ba <H_LED_void_Turn_on+0x72>
#error("Wrong Led direction")
#endif
		break;
	case LED_GREEN:
#if(LED_GREEN_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_GREEN_PIN,DIO_HIGH);
    359e:	8e e0       	ldi	r24, 0x0E	; 14
    35a0:	61 e0       	ldi	r22, 0x01	; 1
    35a2:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
    35a6:	09 c0       	rjmp	.+18     	; 0x35ba <H_LED_void_Turn_on+0x72>
#error("Wrong Led direction")
#endif
		break;
	case LED_BLUE:
#if(LED_BLUE_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_BLUE_PIN,DIO_HIGH);
    35a8:	8f e0       	ldi	r24, 0x0F	; 15
    35aa:	61 e0       	ldi	r22, 0x01	; 1
    35ac:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
    35b0:	04 c0       	rjmp	.+8      	; 0x35ba <H_LED_void_Turn_on+0x72>
#error("Wrong Led direction")
#endif
		break;
	case LED_YELLOW:
#if(LED_YELLOW_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_YELLOW_PIN,DIO_HIGH);
    35b2:	80 e1       	ldi	r24, 0x10	; 16
    35b4:	61 e0       	ldi	r22, 0x01	; 1
    35b6:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
#error("Wrong Led direction")
#endif
		break;

	}
}
    35ba:	0f 90       	pop	r0
    35bc:	0f 90       	pop	r0
    35be:	0f 90       	pop	r0
    35c0:	cf 91       	pop	r28
    35c2:	df 91       	pop	r29
    35c4:	08 95       	ret

000035c6 <H_LED_void_Turn_off>:
void H_LED_void_Turn_off(u8 ledID)
{
    35c6:	df 93       	push	r29
    35c8:	cf 93       	push	r28
    35ca:	00 d0       	rcall	.+0      	; 0x35cc <H_LED_void_Turn_off+0x6>
    35cc:	0f 92       	push	r0
    35ce:	cd b7       	in	r28, 0x3d	; 61
    35d0:	de b7       	in	r29, 0x3e	; 62
    35d2:	89 83       	std	Y+1, r24	; 0x01
	switch(ledID)
    35d4:	89 81       	ldd	r24, Y+1	; 0x01
    35d6:	28 2f       	mov	r18, r24
    35d8:	30 e0       	ldi	r19, 0x00	; 0
    35da:	3b 83       	std	Y+3, r19	; 0x03
    35dc:	2a 83       	std	Y+2, r18	; 0x02
    35de:	8a 81       	ldd	r24, Y+2	; 0x02
    35e0:	9b 81       	ldd	r25, Y+3	; 0x03
    35e2:	81 30       	cpi	r24, 0x01	; 1
    35e4:	91 05       	cpc	r25, r1
    35e6:	f9 f0       	breq	.+62     	; 0x3626 <H_LED_void_Turn_off+0x60>
    35e8:	2a 81       	ldd	r18, Y+2	; 0x02
    35ea:	3b 81       	ldd	r19, Y+3	; 0x03
    35ec:	22 30       	cpi	r18, 0x02	; 2
    35ee:	31 05       	cpc	r19, r1
    35f0:	2c f4       	brge	.+10     	; 0x35fc <H_LED_void_Turn_off+0x36>
    35f2:	8a 81       	ldd	r24, Y+2	; 0x02
    35f4:	9b 81       	ldd	r25, Y+3	; 0x03
    35f6:	00 97       	sbiw	r24, 0x00	; 0
    35f8:	61 f0       	breq	.+24     	; 0x3612 <H_LED_void_Turn_off+0x4c>
    35fa:	1e c0       	rjmp	.+60     	; 0x3638 <H_LED_void_Turn_off+0x72>
    35fc:	2a 81       	ldd	r18, Y+2	; 0x02
    35fe:	3b 81       	ldd	r19, Y+3	; 0x03
    3600:	22 30       	cpi	r18, 0x02	; 2
    3602:	31 05       	cpc	r19, r1
    3604:	59 f0       	breq	.+22     	; 0x361c <H_LED_void_Turn_off+0x56>
    3606:	8a 81       	ldd	r24, Y+2	; 0x02
    3608:	9b 81       	ldd	r25, Y+3	; 0x03
    360a:	83 30       	cpi	r24, 0x03	; 3
    360c:	91 05       	cpc	r25, r1
    360e:	81 f0       	breq	.+32     	; 0x3630 <H_LED_void_Turn_off+0x6a>
    3610:	13 c0       	rjmp	.+38     	; 0x3638 <H_LED_void_Turn_off+0x72>
		{
		case LED_RED:
#if(LED_RED_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_RED_PIN,DIO_LOW);
    3612:	8b e1       	ldi	r24, 0x1B	; 27
    3614:	60 e0       	ldi	r22, 0x00	; 0
    3616:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
    361a:	0e c0       	rjmp	.+28     	; 0x3638 <H_LED_void_Turn_off+0x72>
#error("Wrong Led direction")
#endif
		break;
		case LED_GREEN:
#if(LED_GREEN_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_GREEN_PIN,DIO_LOW);
    361c:	8e e0       	ldi	r24, 0x0E	; 14
    361e:	60 e0       	ldi	r22, 0x00	; 0
    3620:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
    3624:	09 c0       	rjmp	.+18     	; 0x3638 <H_LED_void_Turn_off+0x72>
#error("Wrong Led direction")
#endif
		break;
		case LED_BLUE:
#if(LED_BLUE_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_BLUE_PIN,DIO_LOW);
    3626:	8f e0       	ldi	r24, 0x0F	; 15
    3628:	60 e0       	ldi	r22, 0x00	; 0
    362a:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
    362e:	04 c0       	rjmp	.+8      	; 0x3638 <H_LED_void_Turn_off+0x72>
#error("Wrong Led direction")
#endif
		break;
		case LED_YELLOW:
#if(LED_YELLOW_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_YELLOW_PIN,DIO_LOW);
    3630:	80 e1       	ldi	r24, 0x10	; 16
    3632:	60 e0       	ldi	r22, 0x00	; 0
    3634:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
#error("Wrong Led direction")
#endif
		break;

		}
}
    3638:	0f 90       	pop	r0
    363a:	0f 90       	pop	r0
    363c:	0f 90       	pop	r0
    363e:	cf 91       	pop	r28
    3640:	df 91       	pop	r29
    3642:	08 95       	ret

00003644 <H_LED_void_Toggle>:

void H_LED_void_Toggle(u8 ledID)
{
    3644:	df 93       	push	r29
    3646:	cf 93       	push	r28
    3648:	00 d0       	rcall	.+0      	; 0x364a <H_LED_void_Toggle+0x6>
    364a:	0f 92       	push	r0
    364c:	cd b7       	in	r28, 0x3d	; 61
    364e:	de b7       	in	r29, 0x3e	; 62
    3650:	89 83       	std	Y+1, r24	; 0x01
	switch(ledID)
    3652:	89 81       	ldd	r24, Y+1	; 0x01
    3654:	28 2f       	mov	r18, r24
    3656:	30 e0       	ldi	r19, 0x00	; 0
    3658:	3b 83       	std	Y+3, r19	; 0x03
    365a:	2a 83       	std	Y+2, r18	; 0x02
    365c:	8a 81       	ldd	r24, Y+2	; 0x02
    365e:	9b 81       	ldd	r25, Y+3	; 0x03
    3660:	81 30       	cpi	r24, 0x01	; 1
    3662:	91 05       	cpc	r25, r1
    3664:	e9 f0       	breq	.+58     	; 0x36a0 <H_LED_void_Toggle+0x5c>
    3666:	2a 81       	ldd	r18, Y+2	; 0x02
    3668:	3b 81       	ldd	r19, Y+3	; 0x03
    366a:	22 30       	cpi	r18, 0x02	; 2
    366c:	31 05       	cpc	r19, r1
    366e:	2c f4       	brge	.+10     	; 0x367a <H_LED_void_Toggle+0x36>
    3670:	8a 81       	ldd	r24, Y+2	; 0x02
    3672:	9b 81       	ldd	r25, Y+3	; 0x03
    3674:	00 97       	sbiw	r24, 0x00	; 0
    3676:	61 f0       	breq	.+24     	; 0x3690 <H_LED_void_Toggle+0x4c>
    3678:	1a c0       	rjmp	.+52     	; 0x36ae <H_LED_void_Toggle+0x6a>
    367a:	2a 81       	ldd	r18, Y+2	; 0x02
    367c:	3b 81       	ldd	r19, Y+3	; 0x03
    367e:	22 30       	cpi	r18, 0x02	; 2
    3680:	31 05       	cpc	r19, r1
    3682:	51 f0       	breq	.+20     	; 0x3698 <H_LED_void_Toggle+0x54>
    3684:	8a 81       	ldd	r24, Y+2	; 0x02
    3686:	9b 81       	ldd	r25, Y+3	; 0x03
    3688:	83 30       	cpi	r24, 0x03	; 3
    368a:	91 05       	cpc	r25, r1
    368c:	69 f0       	breq	.+26     	; 0x36a8 <H_LED_void_Toggle+0x64>
    368e:	0f c0       	rjmp	.+30     	; 0x36ae <H_LED_void_Toggle+0x6a>
	{
		case LED_RED:
			M_Dio_void_togglePinValue(LED_RED_PIN);
    3690:	8b e1       	ldi	r24, 0x1B	; 27
    3692:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <M_Dio_void_togglePinValue>
    3696:	0b c0       	rjmp	.+22     	; 0x36ae <H_LED_void_Toggle+0x6a>
		break;
		case LED_GREEN:
			M_Dio_void_togglePinValue(LED_GREEN_PIN);
    3698:	8e e0       	ldi	r24, 0x0E	; 14
    369a:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <M_Dio_void_togglePinValue>
    369e:	07 c0       	rjmp	.+14     	; 0x36ae <H_LED_void_Toggle+0x6a>
		break;
		case LED_BLUE:
			M_Dio_void_togglePinValue(LED_BLUE_PIN);
    36a0:	8f e0       	ldi	r24, 0x0F	; 15
    36a2:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <M_Dio_void_togglePinValue>
    36a6:	03 c0       	rjmp	.+6      	; 0x36ae <H_LED_void_Toggle+0x6a>
		break;
		case LED_YELLOW:
			M_Dio_void_togglePinValue(LED_YELLOW_PIN);
    36a8:	80 e1       	ldi	r24, 0x10	; 16
    36aa:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <M_Dio_void_togglePinValue>
		break;

	}
}
    36ae:	0f 90       	pop	r0
    36b0:	0f 90       	pop	r0
    36b2:	0f 90       	pop	r0
    36b4:	cf 91       	pop	r28
    36b6:	df 91       	pop	r29
    36b8:	08 95       	ret

000036ba <H_DC_MOTOR_START>:
#include"DC_MOTOR_Private.h"
#include"DC_MOTOR_Types.h"
#include"DC_MOTOR_Init.h"

void H_DC_MOTOR_START(u16 PWM_FREQ,u16 DUTY_CYCLE,DC_M_DIR MOTOR_DIRECTION)
{
    36ba:	df 93       	push	r29
    36bc:	cf 93       	push	r28
    36be:	cd b7       	in	r28, 0x3d	; 61
    36c0:	de b7       	in	r29, 0x3e	; 62
    36c2:	27 97       	sbiw	r28, 0x07	; 7
    36c4:	0f b6       	in	r0, 0x3f	; 63
    36c6:	f8 94       	cli
    36c8:	de bf       	out	0x3e, r29	; 62
    36ca:	0f be       	out	0x3f, r0	; 63
    36cc:	cd bf       	out	0x3d, r28	; 61
    36ce:	9a 83       	std	Y+2, r25	; 0x02
    36d0:	89 83       	std	Y+1, r24	; 0x01
    36d2:	7c 83       	std	Y+4, r23	; 0x04
    36d4:	6b 83       	std	Y+3, r22	; 0x03
    36d6:	4d 83       	std	Y+5, r20	; 0x05
	M_TIMER1_void_Init(TIMER_1_FASTPWM,TIMER_1_NON_INVERTING_FAST);
    36d8:	81 e0       	ldi	r24, 0x01	; 1
    36da:	61 e0       	ldi	r22, 0x01	; 1
    36dc:	0e 94 af 09 	call	0x135e	; 0x135e <M_TIMER1_void_Init>
	TIMER1_voidSetICR(PWM_FREQ);
    36e0:	89 81       	ldd	r24, Y+1	; 0x01
    36e2:	9a 81       	ldd	r25, Y+2	; 0x02
    36e4:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <TIMER1_voidSetICR>
	TIMER1_voidSetCompareMatch(DUTY_CYCLE);
    36e8:	8b 81       	ldd	r24, Y+3	; 0x03
    36ea:	9c 81       	ldd	r25, Y+4	; 0x04
    36ec:	0e 94 85 0a 	call	0x150a	; 0x150a <TIMER1_voidSetCompareMatch>
	switch(MOTOR_DIRECTION)
    36f0:	8d 81       	ldd	r24, Y+5	; 0x05
    36f2:	28 2f       	mov	r18, r24
    36f4:	30 e0       	ldi	r19, 0x00	; 0
    36f6:	3f 83       	std	Y+7, r19	; 0x07
    36f8:	2e 83       	std	Y+6, r18	; 0x06
    36fa:	8e 81       	ldd	r24, Y+6	; 0x06
    36fc:	9f 81       	ldd	r25, Y+7	; 0x07
    36fe:	81 30       	cpi	r24, 0x01	; 1
    3700:	91 05       	cpc	r25, r1
    3702:	31 f0       	breq	.+12     	; 0x3710 <H_DC_MOTOR_START+0x56>
    3704:	2e 81       	ldd	r18, Y+6	; 0x06
    3706:	3f 81       	ldd	r19, Y+7	; 0x07
    3708:	22 30       	cpi	r18, 0x02	; 2
    370a:	31 05       	cpc	r19, r1
    370c:	31 f0       	breq	.+12     	; 0x371a <H_DC_MOTOR_START+0x60>
    370e:	09 c0       	rjmp	.+18     	; 0x3722 <H_DC_MOTOR_START+0x68>
	{
	case FORWARD_DIRECTION:
		M_Dio_void_setPinValue(DIO_PB5,DIO_HIGH);
    3710:	89 e1       	ldi	r24, 0x19	; 25
    3712:	61 e0       	ldi	r22, 0x01	; 1
    3714:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
    3718:	04 c0       	rjmp	.+8      	; 0x3722 <H_DC_MOTOR_START+0x68>
		break;
	case BACKWARD_DIRECTION:
		M_Dio_void_setPinValue(DIO_PB5,DIO_LOW);
    371a:	89 e1       	ldi	r24, 0x19	; 25
    371c:	60 e0       	ldi	r22, 0x00	; 0
    371e:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
		break;
	default:
		break;
	}
	M_Dio_void_setPinValue(DIO_PB6,DIO_HIGH);
    3722:	8a e1       	ldi	r24, 0x1A	; 26
    3724:	61 e0       	ldi	r22, 0x01	; 1
    3726:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
	M_TIMER1_void_Start(TIMER1_CLK_8);
    372a:	82 e0       	ldi	r24, 0x02	; 2
    372c:	0e 94 26 0a 	call	0x144c	; 0x144c <M_TIMER1_void_Start>

}
    3730:	27 96       	adiw	r28, 0x07	; 7
    3732:	0f b6       	in	r0, 0x3f	; 63
    3734:	f8 94       	cli
    3736:	de bf       	out	0x3e, r29	; 62
    3738:	0f be       	out	0x3f, r0	; 63
    373a:	cd bf       	out	0x3d, r28	; 61
    373c:	cf 91       	pop	r28
    373e:	df 91       	pop	r29
    3740:	08 95       	ret

00003742 <H_DC_MOTOR_STOP>:
void H_DC_MOTOR_STOP(void)
{
    3742:	df 93       	push	r29
    3744:	cf 93       	push	r28
    3746:	cd b7       	in	r28, 0x3d	; 61
    3748:	de b7       	in	r29, 0x3e	; 62
	M_TIMER1_void_Start(TIMER1_NO_CLK_SOURCE);
    374a:	80 e0       	ldi	r24, 0x00	; 0
    374c:	0e 94 26 0a 	call	0x144c	; 0x144c <M_TIMER1_void_Start>
	M_Dio_void_setPinValue(DIO_PB6,DIO_LOW);
    3750:	8a e1       	ldi	r24, 0x1A	; 26
    3752:	60 e0       	ldi	r22, 0x00	; 0
    3754:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
}
    3758:	cf 91       	pop	r28
    375a:	df 91       	pop	r29
    375c:	08 95       	ret

0000375e <H_LCD_void_latchByte>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
    375e:	df 93       	push	r29
    3760:	cf 93       	push	r28
    3762:	cd b7       	in	r28, 0x3d	; 61
    3764:	de b7       	in	r29, 0x3e	; 62
    3766:	ab 97       	sbiw	r28, 0x2b	; 43
    3768:	0f b6       	in	r0, 0x3f	; 63
    376a:	f8 94       	cli
    376c:	de bf       	out	0x3e, r29	; 62
    376e:	0f be       	out	0x3f, r0	; 63
    3770:	cd bf       	out	0x3d, r28	; 61
    3772:	8b a7       	std	Y+43, r24	; 0x2b
#if(LCD_MODE == _4_BIT_MODE)
	//enable = zero
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
    3774:	8c e0       	ldi	r24, 0x0C	; 12
    3776:	60 e0       	ldi	r22, 0x00	; 0
    3778:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_D4,GET_BIT(copy_u8Byte,4));
    377c:	8b a5       	ldd	r24, Y+43	; 0x2b
    377e:	82 95       	swap	r24
    3780:	8f 70       	andi	r24, 0x0F	; 15
    3782:	98 2f       	mov	r25, r24
    3784:	91 70       	andi	r25, 0x01	; 1
    3786:	84 e1       	ldi	r24, 0x14	; 20
    3788:	69 2f       	mov	r22, r25
    378a:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D5,GET_BIT(copy_u8Byte,5));
    378e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3790:	82 95       	swap	r24
    3792:	86 95       	lsr	r24
    3794:	87 70       	andi	r24, 0x07	; 7
    3796:	98 2f       	mov	r25, r24
    3798:	91 70       	andi	r25, 0x01	; 1
    379a:	85 e1       	ldi	r24, 0x15	; 21
    379c:	69 2f       	mov	r22, r25
    379e:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D6,GET_BIT(copy_u8Byte,6));
    37a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    37a4:	82 95       	swap	r24
    37a6:	86 95       	lsr	r24
    37a8:	86 95       	lsr	r24
    37aa:	83 70       	andi	r24, 0x03	; 3
    37ac:	98 2f       	mov	r25, r24
    37ae:	91 70       	andi	r25, 0x01	; 1
    37b0:	86 e1       	ldi	r24, 0x16	; 22
    37b2:	69 2f       	mov	r22, r25
    37b4:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D7,GET_BIT(copy_u8Byte,7));
    37b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    37ba:	98 2f       	mov	r25, r24
    37bc:	99 1f       	adc	r25, r25
    37be:	99 27       	eor	r25, r25
    37c0:	99 1f       	adc	r25, r25
    37c2:	88 e1       	ldi	r24, 0x18	; 24
    37c4:	69 2f       	mov	r22, r25
    37c6:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_HIGH);
    37ca:	8c e0       	ldi	r24, 0x0C	; 12
    37cc:	61 e0       	ldi	r22, 0x01	; 1
    37ce:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
    37d2:	80 e0       	ldi	r24, 0x00	; 0
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	a0 e8       	ldi	r26, 0x80	; 128
    37d8:	bf e3       	ldi	r27, 0x3F	; 63
    37da:	8f a3       	std	Y+39, r24	; 0x27
    37dc:	98 a7       	std	Y+40, r25	; 0x28
    37de:	a9 a7       	std	Y+41, r26	; 0x29
    37e0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37e2:	6f a1       	ldd	r22, Y+39	; 0x27
    37e4:	78 a5       	ldd	r23, Y+40	; 0x28
    37e6:	89 a5       	ldd	r24, Y+41	; 0x29
    37e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	30 e0       	ldi	r19, 0x00	; 0
    37ee:	4a e7       	ldi	r20, 0x7A	; 122
    37f0:	55 e4       	ldi	r21, 0x45	; 69
    37f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f6:	dc 01       	movw	r26, r24
    37f8:	cb 01       	movw	r24, r22
    37fa:	8b a3       	std	Y+35, r24	; 0x23
    37fc:	9c a3       	std	Y+36, r25	; 0x24
    37fe:	ad a3       	std	Y+37, r26	; 0x25
    3800:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3802:	6b a1       	ldd	r22, Y+35	; 0x23
    3804:	7c a1       	ldd	r23, Y+36	; 0x24
    3806:	8d a1       	ldd	r24, Y+37	; 0x25
    3808:	9e a1       	ldd	r25, Y+38	; 0x26
    380a:	20 e0       	ldi	r18, 0x00	; 0
    380c:	30 e0       	ldi	r19, 0x00	; 0
    380e:	40 e8       	ldi	r20, 0x80	; 128
    3810:	5f e3       	ldi	r21, 0x3F	; 63
    3812:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3816:	88 23       	and	r24, r24
    3818:	2c f4       	brge	.+10     	; 0x3824 <H_LCD_void_latchByte+0xc6>
		__ticks = 1;
    381a:	81 e0       	ldi	r24, 0x01	; 1
    381c:	90 e0       	ldi	r25, 0x00	; 0
    381e:	9a a3       	std	Y+34, r25	; 0x22
    3820:	89 a3       	std	Y+33, r24	; 0x21
    3822:	3f c0       	rjmp	.+126    	; 0x38a2 <H_LCD_void_latchByte+0x144>
	else if (__tmp > 65535)
    3824:	6b a1       	ldd	r22, Y+35	; 0x23
    3826:	7c a1       	ldd	r23, Y+36	; 0x24
    3828:	8d a1       	ldd	r24, Y+37	; 0x25
    382a:	9e a1       	ldd	r25, Y+38	; 0x26
    382c:	20 e0       	ldi	r18, 0x00	; 0
    382e:	3f ef       	ldi	r19, 0xFF	; 255
    3830:	4f e7       	ldi	r20, 0x7F	; 127
    3832:	57 e4       	ldi	r21, 0x47	; 71
    3834:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3838:	18 16       	cp	r1, r24
    383a:	4c f5       	brge	.+82     	; 0x388e <H_LCD_void_latchByte+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    383c:	6f a1       	ldd	r22, Y+39	; 0x27
    383e:	78 a5       	ldd	r23, Y+40	; 0x28
    3840:	89 a5       	ldd	r24, Y+41	; 0x29
    3842:	9a a5       	ldd	r25, Y+42	; 0x2a
    3844:	20 e0       	ldi	r18, 0x00	; 0
    3846:	30 e0       	ldi	r19, 0x00	; 0
    3848:	40 e2       	ldi	r20, 0x20	; 32
    384a:	51 e4       	ldi	r21, 0x41	; 65
    384c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3850:	dc 01       	movw	r26, r24
    3852:	cb 01       	movw	r24, r22
    3854:	bc 01       	movw	r22, r24
    3856:	cd 01       	movw	r24, r26
    3858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    385c:	dc 01       	movw	r26, r24
    385e:	cb 01       	movw	r24, r22
    3860:	9a a3       	std	Y+34, r25	; 0x22
    3862:	89 a3       	std	Y+33, r24	; 0x21
    3864:	0f c0       	rjmp	.+30     	; 0x3884 <H_LCD_void_latchByte+0x126>
    3866:	80 e9       	ldi	r24, 0x90	; 144
    3868:	91 e0       	ldi	r25, 0x01	; 1
    386a:	98 a3       	std	Y+32, r25	; 0x20
    386c:	8f 8f       	std	Y+31, r24	; 0x1f
    386e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3870:	98 a1       	ldd	r25, Y+32	; 0x20
    3872:	01 97       	sbiw	r24, 0x01	; 1
    3874:	f1 f7       	brne	.-4      	; 0x3872 <H_LCD_void_latchByte+0x114>
    3876:	98 a3       	std	Y+32, r25	; 0x20
    3878:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    387a:	89 a1       	ldd	r24, Y+33	; 0x21
    387c:	9a a1       	ldd	r25, Y+34	; 0x22
    387e:	01 97       	sbiw	r24, 0x01	; 1
    3880:	9a a3       	std	Y+34, r25	; 0x22
    3882:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3884:	89 a1       	ldd	r24, Y+33	; 0x21
    3886:	9a a1       	ldd	r25, Y+34	; 0x22
    3888:	00 97       	sbiw	r24, 0x00	; 0
    388a:	69 f7       	brne	.-38     	; 0x3866 <H_LCD_void_latchByte+0x108>
    388c:	14 c0       	rjmp	.+40     	; 0x38b6 <H_LCD_void_latchByte+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    388e:	6b a1       	ldd	r22, Y+35	; 0x23
    3890:	7c a1       	ldd	r23, Y+36	; 0x24
    3892:	8d a1       	ldd	r24, Y+37	; 0x25
    3894:	9e a1       	ldd	r25, Y+38	; 0x26
    3896:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    389a:	dc 01       	movw	r26, r24
    389c:	cb 01       	movw	r24, r22
    389e:	9a a3       	std	Y+34, r25	; 0x22
    38a0:	89 a3       	std	Y+33, r24	; 0x21
    38a2:	89 a1       	ldd	r24, Y+33	; 0x21
    38a4:	9a a1       	ldd	r25, Y+34	; 0x22
    38a6:	9e 8f       	std	Y+30, r25	; 0x1e
    38a8:	8d 8f       	std	Y+29, r24	; 0x1d
    38aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38ae:	01 97       	sbiw	r24, 0x01	; 1
    38b0:	f1 f7       	brne	.-4      	; 0x38ae <H_LCD_void_latchByte+0x150>
    38b2:	9e 8f       	std	Y+30, r25	; 0x1e
    38b4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
    38b6:	8c e0       	ldi	r24, 0x0C	; 12
    38b8:	60 e0       	ldi	r22, 0x00	; 0
    38ba:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_D4,GET_BIT(copy_u8Byte,0));
    38be:	8b a5       	ldd	r24, Y+43	; 0x2b
    38c0:	98 2f       	mov	r25, r24
    38c2:	91 70       	andi	r25, 0x01	; 1
    38c4:	84 e1       	ldi	r24, 0x14	; 20
    38c6:	69 2f       	mov	r22, r25
    38c8:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D5,GET_BIT(copy_u8Byte,1));
    38cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    38ce:	86 95       	lsr	r24
    38d0:	98 2f       	mov	r25, r24
    38d2:	91 70       	andi	r25, 0x01	; 1
    38d4:	85 e1       	ldi	r24, 0x15	; 21
    38d6:	69 2f       	mov	r22, r25
    38d8:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D6,GET_BIT(copy_u8Byte,2));
    38dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    38de:	86 95       	lsr	r24
    38e0:	86 95       	lsr	r24
    38e2:	98 2f       	mov	r25, r24
    38e4:	91 70       	andi	r25, 0x01	; 1
    38e6:	86 e1       	ldi	r24, 0x16	; 22
    38e8:	69 2f       	mov	r22, r25
    38ea:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D7,GET_BIT(copy_u8Byte,3));
    38ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    38f0:	86 95       	lsr	r24
    38f2:	86 95       	lsr	r24
    38f4:	86 95       	lsr	r24
    38f6:	98 2f       	mov	r25, r24
    38f8:	91 70       	andi	r25, 0x01	; 1
    38fa:	88 e1       	ldi	r24, 0x18	; 24
    38fc:	69 2f       	mov	r22, r25
    38fe:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_HIGH);
    3902:	8c e0       	ldi	r24, 0x0C	; 12
    3904:	61 e0       	ldi	r22, 0x01	; 1
    3906:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
    390a:	80 e0       	ldi	r24, 0x00	; 0
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	a0 e8       	ldi	r26, 0x80	; 128
    3910:	bf e3       	ldi	r27, 0x3F	; 63
    3912:	89 8f       	std	Y+25, r24	; 0x19
    3914:	9a 8f       	std	Y+26, r25	; 0x1a
    3916:	ab 8f       	std	Y+27, r26	; 0x1b
    3918:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    391a:	69 8d       	ldd	r22, Y+25	; 0x19
    391c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    391e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3920:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3922:	20 e0       	ldi	r18, 0x00	; 0
    3924:	30 e0       	ldi	r19, 0x00	; 0
    3926:	4a e7       	ldi	r20, 0x7A	; 122
    3928:	55 e4       	ldi	r21, 0x45	; 69
    392a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    392e:	dc 01       	movw	r26, r24
    3930:	cb 01       	movw	r24, r22
    3932:	8d 8b       	std	Y+21, r24	; 0x15
    3934:	9e 8b       	std	Y+22, r25	; 0x16
    3936:	af 8b       	std	Y+23, r26	; 0x17
    3938:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    393a:	6d 89       	ldd	r22, Y+21	; 0x15
    393c:	7e 89       	ldd	r23, Y+22	; 0x16
    393e:	8f 89       	ldd	r24, Y+23	; 0x17
    3940:	98 8d       	ldd	r25, Y+24	; 0x18
    3942:	20 e0       	ldi	r18, 0x00	; 0
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	40 e8       	ldi	r20, 0x80	; 128
    3948:	5f e3       	ldi	r21, 0x3F	; 63
    394a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    394e:	88 23       	and	r24, r24
    3950:	2c f4       	brge	.+10     	; 0x395c <H_LCD_void_latchByte+0x1fe>
		__ticks = 1;
    3952:	81 e0       	ldi	r24, 0x01	; 1
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	9c 8b       	std	Y+20, r25	; 0x14
    3958:	8b 8b       	std	Y+19, r24	; 0x13
    395a:	3f c0       	rjmp	.+126    	; 0x39da <H_LCD_void_latchByte+0x27c>
	else if (__tmp > 65535)
    395c:	6d 89       	ldd	r22, Y+21	; 0x15
    395e:	7e 89       	ldd	r23, Y+22	; 0x16
    3960:	8f 89       	ldd	r24, Y+23	; 0x17
    3962:	98 8d       	ldd	r25, Y+24	; 0x18
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	3f ef       	ldi	r19, 0xFF	; 255
    3968:	4f e7       	ldi	r20, 0x7F	; 127
    396a:	57 e4       	ldi	r21, 0x47	; 71
    396c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3970:	18 16       	cp	r1, r24
    3972:	4c f5       	brge	.+82     	; 0x39c6 <H_LCD_void_latchByte+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3974:	69 8d       	ldd	r22, Y+25	; 0x19
    3976:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3978:	8b 8d       	ldd	r24, Y+27	; 0x1b
    397a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    397c:	20 e0       	ldi	r18, 0x00	; 0
    397e:	30 e0       	ldi	r19, 0x00	; 0
    3980:	40 e2       	ldi	r20, 0x20	; 32
    3982:	51 e4       	ldi	r21, 0x41	; 65
    3984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3988:	dc 01       	movw	r26, r24
    398a:	cb 01       	movw	r24, r22
    398c:	bc 01       	movw	r22, r24
    398e:	cd 01       	movw	r24, r26
    3990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3994:	dc 01       	movw	r26, r24
    3996:	cb 01       	movw	r24, r22
    3998:	9c 8b       	std	Y+20, r25	; 0x14
    399a:	8b 8b       	std	Y+19, r24	; 0x13
    399c:	0f c0       	rjmp	.+30     	; 0x39bc <H_LCD_void_latchByte+0x25e>
    399e:	80 e9       	ldi	r24, 0x90	; 144
    39a0:	91 e0       	ldi	r25, 0x01	; 1
    39a2:	9a 8b       	std	Y+18, r25	; 0x12
    39a4:	89 8b       	std	Y+17, r24	; 0x11
    39a6:	89 89       	ldd	r24, Y+17	; 0x11
    39a8:	9a 89       	ldd	r25, Y+18	; 0x12
    39aa:	01 97       	sbiw	r24, 0x01	; 1
    39ac:	f1 f7       	brne	.-4      	; 0x39aa <H_LCD_void_latchByte+0x24c>
    39ae:	9a 8b       	std	Y+18, r25	; 0x12
    39b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39b2:	8b 89       	ldd	r24, Y+19	; 0x13
    39b4:	9c 89       	ldd	r25, Y+20	; 0x14
    39b6:	01 97       	sbiw	r24, 0x01	; 1
    39b8:	9c 8b       	std	Y+20, r25	; 0x14
    39ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39bc:	8b 89       	ldd	r24, Y+19	; 0x13
    39be:	9c 89       	ldd	r25, Y+20	; 0x14
    39c0:	00 97       	sbiw	r24, 0x00	; 0
    39c2:	69 f7       	brne	.-38     	; 0x399e <H_LCD_void_latchByte+0x240>
    39c4:	14 c0       	rjmp	.+40     	; 0x39ee <H_LCD_void_latchByte+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39c6:	6d 89       	ldd	r22, Y+21	; 0x15
    39c8:	7e 89       	ldd	r23, Y+22	; 0x16
    39ca:	8f 89       	ldd	r24, Y+23	; 0x17
    39cc:	98 8d       	ldd	r25, Y+24	; 0x18
    39ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39d2:	dc 01       	movw	r26, r24
    39d4:	cb 01       	movw	r24, r22
    39d6:	9c 8b       	std	Y+20, r25	; 0x14
    39d8:	8b 8b       	std	Y+19, r24	; 0x13
    39da:	8b 89       	ldd	r24, Y+19	; 0x13
    39dc:	9c 89       	ldd	r25, Y+20	; 0x14
    39de:	98 8b       	std	Y+16, r25	; 0x10
    39e0:	8f 87       	std	Y+15, r24	; 0x0f
    39e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    39e4:	98 89       	ldd	r25, Y+16	; 0x10
    39e6:	01 97       	sbiw	r24, 0x01	; 1
    39e8:	f1 f7       	brne	.-4      	; 0x39e6 <H_LCD_void_latchByte+0x288>
    39ea:	98 8b       	std	Y+16, r25	; 0x10
    39ec:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
    39ee:	8c e0       	ldi	r24, 0x0C	; 12
    39f0:	60 e0       	ldi	r22, 0x00	; 0
    39f2:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
    39f6:	80 e0       	ldi	r24, 0x00	; 0
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	a0 e8       	ldi	r26, 0x80	; 128
    39fc:	bf e3       	ldi	r27, 0x3F	; 63
    39fe:	8b 87       	std	Y+11, r24	; 0x0b
    3a00:	9c 87       	std	Y+12, r25	; 0x0c
    3a02:	ad 87       	std	Y+13, r26	; 0x0d
    3a04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a06:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a08:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a0e:	20 e0       	ldi	r18, 0x00	; 0
    3a10:	30 e0       	ldi	r19, 0x00	; 0
    3a12:	4a e7       	ldi	r20, 0x7A	; 122
    3a14:	55 e4       	ldi	r21, 0x45	; 69
    3a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a1a:	dc 01       	movw	r26, r24
    3a1c:	cb 01       	movw	r24, r22
    3a1e:	8f 83       	std	Y+7, r24	; 0x07
    3a20:	98 87       	std	Y+8, r25	; 0x08
    3a22:	a9 87       	std	Y+9, r26	; 0x09
    3a24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a26:	6f 81       	ldd	r22, Y+7	; 0x07
    3a28:	78 85       	ldd	r23, Y+8	; 0x08
    3a2a:	89 85       	ldd	r24, Y+9	; 0x09
    3a2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a2e:	20 e0       	ldi	r18, 0x00	; 0
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	40 e8       	ldi	r20, 0x80	; 128
    3a34:	5f e3       	ldi	r21, 0x3F	; 63
    3a36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a3a:	88 23       	and	r24, r24
    3a3c:	2c f4       	brge	.+10     	; 0x3a48 <H_LCD_void_latchByte+0x2ea>
		__ticks = 1;
    3a3e:	81 e0       	ldi	r24, 0x01	; 1
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	9e 83       	std	Y+6, r25	; 0x06
    3a44:	8d 83       	std	Y+5, r24	; 0x05
    3a46:	3f c0       	rjmp	.+126    	; 0x3ac6 <H_LCD_void_latchByte+0x368>
	else if (__tmp > 65535)
    3a48:	6f 81       	ldd	r22, Y+7	; 0x07
    3a4a:	78 85       	ldd	r23, Y+8	; 0x08
    3a4c:	89 85       	ldd	r24, Y+9	; 0x09
    3a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a50:	20 e0       	ldi	r18, 0x00	; 0
    3a52:	3f ef       	ldi	r19, 0xFF	; 255
    3a54:	4f e7       	ldi	r20, 0x7F	; 127
    3a56:	57 e4       	ldi	r21, 0x47	; 71
    3a58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a5c:	18 16       	cp	r1, r24
    3a5e:	4c f5       	brge	.+82     	; 0x3ab2 <H_LCD_void_latchByte+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a60:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a62:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a64:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a66:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a68:	20 e0       	ldi	r18, 0x00	; 0
    3a6a:	30 e0       	ldi	r19, 0x00	; 0
    3a6c:	40 e2       	ldi	r20, 0x20	; 32
    3a6e:	51 e4       	ldi	r21, 0x41	; 65
    3a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a74:	dc 01       	movw	r26, r24
    3a76:	cb 01       	movw	r24, r22
    3a78:	bc 01       	movw	r22, r24
    3a7a:	cd 01       	movw	r24, r26
    3a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a80:	dc 01       	movw	r26, r24
    3a82:	cb 01       	movw	r24, r22
    3a84:	9e 83       	std	Y+6, r25	; 0x06
    3a86:	8d 83       	std	Y+5, r24	; 0x05
    3a88:	0f c0       	rjmp	.+30     	; 0x3aa8 <H_LCD_void_latchByte+0x34a>
    3a8a:	80 e9       	ldi	r24, 0x90	; 144
    3a8c:	91 e0       	ldi	r25, 0x01	; 1
    3a8e:	9c 83       	std	Y+4, r25	; 0x04
    3a90:	8b 83       	std	Y+3, r24	; 0x03
    3a92:	8b 81       	ldd	r24, Y+3	; 0x03
    3a94:	9c 81       	ldd	r25, Y+4	; 0x04
    3a96:	01 97       	sbiw	r24, 0x01	; 1
    3a98:	f1 f7       	brne	.-4      	; 0x3a96 <H_LCD_void_latchByte+0x338>
    3a9a:	9c 83       	std	Y+4, r25	; 0x04
    3a9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa2:	01 97       	sbiw	r24, 0x01	; 1
    3aa4:	9e 83       	std	Y+6, r25	; 0x06
    3aa6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    3aaa:	9e 81       	ldd	r25, Y+6	; 0x06
    3aac:	00 97       	sbiw	r24, 0x00	; 0
    3aae:	69 f7       	brne	.-38     	; 0x3a8a <H_LCD_void_latchByte+0x32c>
    3ab0:	14 c0       	rjmp	.+40     	; 0x3ada <H_LCD_void_latchByte+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ab2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ab4:	78 85       	ldd	r23, Y+8	; 0x08
    3ab6:	89 85       	ldd	r24, Y+9	; 0x09
    3ab8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3abe:	dc 01       	movw	r26, r24
    3ac0:	cb 01       	movw	r24, r22
    3ac2:	9e 83       	std	Y+6, r25	; 0x06
    3ac4:	8d 83       	std	Y+5, r24	; 0x05
    3ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac8:	9e 81       	ldd	r25, Y+6	; 0x06
    3aca:	9a 83       	std	Y+2, r25	; 0x02
    3acc:	89 83       	std	Y+1, r24	; 0x01
    3ace:	89 81       	ldd	r24, Y+1	; 0x01
    3ad0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ad2:	01 97       	sbiw	r24, 0x01	; 1
    3ad4:	f1 f7       	brne	.-4      	; 0x3ad2 <H_LCD_void_latchByte+0x374>
    3ad6:	9a 83       	std	Y+2, r25	; 0x02
    3ad8:	89 83       	std	Y+1, r24	; 0x01
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
	_delay_ms(30);

#endif

}
    3ada:	ab 96       	adiw	r28, 0x2b	; 43
    3adc:	0f b6       	in	r0, 0x3f	; 63
    3ade:	f8 94       	cli
    3ae0:	de bf       	out	0x3e, r29	; 62
    3ae2:	0f be       	out	0x3f, r0	; 63
    3ae4:	cd bf       	out	0x3d, r28	; 61
    3ae6:	cf 91       	pop	r28
    3ae8:	df 91       	pop	r29
    3aea:	08 95       	ret

00003aec <H_LCD_void_Init>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_Init(void)
{
    3aec:	0f 93       	push	r16
    3aee:	1f 93       	push	r17
    3af0:	df 93       	push	r29
    3af2:	cf 93       	push	r28
    3af4:	cd b7       	in	r28, 0x3d	; 61
    3af6:	de b7       	in	r29, 0x3e	; 62
    3af8:	c6 54       	subi	r28, 0x46	; 70
    3afa:	d0 40       	sbci	r29, 0x00	; 0
    3afc:	0f b6       	in	r0, 0x3f	; 63
    3afe:	f8 94       	cli
    3b00:	de bf       	out	0x3e, r29	; 62
    3b02:	0f be       	out	0x3f, r0	; 63
    3b04:	cd bf       	out	0x3d, r28	; 61
    3b06:	fe 01       	movw	r30, r28
    3b08:	ed 5b       	subi	r30, 0xBD	; 189
    3b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0c:	80 e0       	ldi	r24, 0x00	; 0
    3b0e:	90 e0       	ldi	r25, 0x00	; 0
    3b10:	a6 e1       	ldi	r26, 0x16	; 22
    3b12:	b3 e4       	ldi	r27, 0x43	; 67
    3b14:	80 83       	st	Z, r24
    3b16:	91 83       	std	Z+1, r25	; 0x01
    3b18:	a2 83       	std	Z+2, r26	; 0x02
    3b1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b1c:	8e 01       	movw	r16, r28
    3b1e:	01 5c       	subi	r16, 0xC1	; 193
    3b20:	1f 4f       	sbci	r17, 0xFF	; 255
    3b22:	fe 01       	movw	r30, r28
    3b24:	ed 5b       	subi	r30, 0xBD	; 189
    3b26:	ff 4f       	sbci	r31, 0xFF	; 255
    3b28:	60 81       	ld	r22, Z
    3b2a:	71 81       	ldd	r23, Z+1	; 0x01
    3b2c:	82 81       	ldd	r24, Z+2	; 0x02
    3b2e:	93 81       	ldd	r25, Z+3	; 0x03
    3b30:	20 e0       	ldi	r18, 0x00	; 0
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	4a e7       	ldi	r20, 0x7A	; 122
    3b36:	55 e4       	ldi	r21, 0x45	; 69
    3b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b3c:	dc 01       	movw	r26, r24
    3b3e:	cb 01       	movw	r24, r22
    3b40:	f8 01       	movw	r30, r16
    3b42:	80 83       	st	Z, r24
    3b44:	91 83       	std	Z+1, r25	; 0x01
    3b46:	a2 83       	std	Z+2, r26	; 0x02
    3b48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b4a:	fe 01       	movw	r30, r28
    3b4c:	ff 96       	adiw	r30, 0x3f	; 63
    3b4e:	60 81       	ld	r22, Z
    3b50:	71 81       	ldd	r23, Z+1	; 0x01
    3b52:	82 81       	ldd	r24, Z+2	; 0x02
    3b54:	93 81       	ldd	r25, Z+3	; 0x03
    3b56:	20 e0       	ldi	r18, 0x00	; 0
    3b58:	30 e0       	ldi	r19, 0x00	; 0
    3b5a:	40 e8       	ldi	r20, 0x80	; 128
    3b5c:	5f e3       	ldi	r21, 0x3F	; 63
    3b5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b62:	88 23       	and	r24, r24
    3b64:	2c f4       	brge	.+10     	; 0x3b70 <H_LCD_void_Init+0x84>
		__ticks = 1;
    3b66:	81 e0       	ldi	r24, 0x01	; 1
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	9e af       	std	Y+62, r25	; 0x3e
    3b6c:	8d af       	std	Y+61, r24	; 0x3d
    3b6e:	46 c0       	rjmp	.+140    	; 0x3bfc <H_LCD_void_Init+0x110>
	else if (__tmp > 65535)
    3b70:	fe 01       	movw	r30, r28
    3b72:	ff 96       	adiw	r30, 0x3f	; 63
    3b74:	60 81       	ld	r22, Z
    3b76:	71 81       	ldd	r23, Z+1	; 0x01
    3b78:	82 81       	ldd	r24, Z+2	; 0x02
    3b7a:	93 81       	ldd	r25, Z+3	; 0x03
    3b7c:	20 e0       	ldi	r18, 0x00	; 0
    3b7e:	3f ef       	ldi	r19, 0xFF	; 255
    3b80:	4f e7       	ldi	r20, 0x7F	; 127
    3b82:	57 e4       	ldi	r21, 0x47	; 71
    3b84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b88:	18 16       	cp	r1, r24
    3b8a:	64 f5       	brge	.+88     	; 0x3be4 <H_LCD_void_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b8c:	fe 01       	movw	r30, r28
    3b8e:	ed 5b       	subi	r30, 0xBD	; 189
    3b90:	ff 4f       	sbci	r31, 0xFF	; 255
    3b92:	60 81       	ld	r22, Z
    3b94:	71 81       	ldd	r23, Z+1	; 0x01
    3b96:	82 81       	ldd	r24, Z+2	; 0x02
    3b98:	93 81       	ldd	r25, Z+3	; 0x03
    3b9a:	20 e0       	ldi	r18, 0x00	; 0
    3b9c:	30 e0       	ldi	r19, 0x00	; 0
    3b9e:	40 e2       	ldi	r20, 0x20	; 32
    3ba0:	51 e4       	ldi	r21, 0x41	; 65
    3ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ba6:	dc 01       	movw	r26, r24
    3ba8:	cb 01       	movw	r24, r22
    3baa:	bc 01       	movw	r22, r24
    3bac:	cd 01       	movw	r24, r26
    3bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bb2:	dc 01       	movw	r26, r24
    3bb4:	cb 01       	movw	r24, r22
    3bb6:	9e af       	std	Y+62, r25	; 0x3e
    3bb8:	8d af       	std	Y+61, r24	; 0x3d
    3bba:	0f c0       	rjmp	.+30     	; 0x3bda <H_LCD_void_Init+0xee>
    3bbc:	80 e9       	ldi	r24, 0x90	; 144
    3bbe:	91 e0       	ldi	r25, 0x01	; 1
    3bc0:	9c af       	std	Y+60, r25	; 0x3c
    3bc2:	8b af       	std	Y+59, r24	; 0x3b
    3bc4:	8b ad       	ldd	r24, Y+59	; 0x3b
    3bc6:	9c ad       	ldd	r25, Y+60	; 0x3c
    3bc8:	01 97       	sbiw	r24, 0x01	; 1
    3bca:	f1 f7       	brne	.-4      	; 0x3bc8 <H_LCD_void_Init+0xdc>
    3bcc:	9c af       	std	Y+60, r25	; 0x3c
    3bce:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bd0:	8d ad       	ldd	r24, Y+61	; 0x3d
    3bd2:	9e ad       	ldd	r25, Y+62	; 0x3e
    3bd4:	01 97       	sbiw	r24, 0x01	; 1
    3bd6:	9e af       	std	Y+62, r25	; 0x3e
    3bd8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bda:	8d ad       	ldd	r24, Y+61	; 0x3d
    3bdc:	9e ad       	ldd	r25, Y+62	; 0x3e
    3bde:	00 97       	sbiw	r24, 0x00	; 0
    3be0:	69 f7       	brne	.-38     	; 0x3bbc <H_LCD_void_Init+0xd0>
    3be2:	16 c0       	rjmp	.+44     	; 0x3c10 <H_LCD_void_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3be4:	fe 01       	movw	r30, r28
    3be6:	ff 96       	adiw	r30, 0x3f	; 63
    3be8:	60 81       	ld	r22, Z
    3bea:	71 81       	ldd	r23, Z+1	; 0x01
    3bec:	82 81       	ldd	r24, Z+2	; 0x02
    3bee:	93 81       	ldd	r25, Z+3	; 0x03
    3bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bf4:	dc 01       	movw	r26, r24
    3bf6:	cb 01       	movw	r24, r22
    3bf8:	9e af       	std	Y+62, r25	; 0x3e
    3bfa:	8d af       	std	Y+61, r24	; 0x3d
    3bfc:	8d ad       	ldd	r24, Y+61	; 0x3d
    3bfe:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c00:	9a af       	std	Y+58, r25	; 0x3a
    3c02:	89 af       	std	Y+57, r24	; 0x39
    3c04:	89 ad       	ldd	r24, Y+57	; 0x39
    3c06:	9a ad       	ldd	r25, Y+58	; 0x3a
    3c08:	01 97       	sbiw	r24, 0x01	; 1
    3c0a:	f1 f7       	brne	.-4      	; 0x3c08 <H_LCD_void_Init+0x11c>
    3c0c:	9a af       	std	Y+58, r25	; 0x3a
    3c0e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(150);
	M_Dio_void_setPinValue(CLCD_RS_PIN,DIO_LOW);
    3c10:	8d e0       	ldi	r24, 0x0D	; 13
    3c12:	60 e0       	ldi	r22, 0x00	; 0
    3c14:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
	/*Function set*/
#if(LCD_MODE == _4_BIT_MODE)
	H_LCD_void_sendCommand(CLCD_FUNCTION_SET_1);
    3c18:	82 e0       	ldi	r24, 0x02	; 2
    3c1a:	0e 94 00 20 	call	0x4000	; 0x4000 <H_LCD_void_sendCommand>
    3c1e:	80 e0       	ldi	r24, 0x00	; 0
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	a0 ea       	ldi	r26, 0xA0	; 160
    3c24:	b0 e4       	ldi	r27, 0x40	; 64
    3c26:	8d ab       	std	Y+53, r24	; 0x35
    3c28:	9e ab       	std	Y+54, r25	; 0x36
    3c2a:	af ab       	std	Y+55, r26	; 0x37
    3c2c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c2e:	6d a9       	ldd	r22, Y+53	; 0x35
    3c30:	7e a9       	ldd	r23, Y+54	; 0x36
    3c32:	8f a9       	ldd	r24, Y+55	; 0x37
    3c34:	98 ad       	ldd	r25, Y+56	; 0x38
    3c36:	20 e0       	ldi	r18, 0x00	; 0
    3c38:	30 e0       	ldi	r19, 0x00	; 0
    3c3a:	4a e7       	ldi	r20, 0x7A	; 122
    3c3c:	55 e4       	ldi	r21, 0x45	; 69
    3c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c42:	dc 01       	movw	r26, r24
    3c44:	cb 01       	movw	r24, r22
    3c46:	89 ab       	std	Y+49, r24	; 0x31
    3c48:	9a ab       	std	Y+50, r25	; 0x32
    3c4a:	ab ab       	std	Y+51, r26	; 0x33
    3c4c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3c4e:	69 a9       	ldd	r22, Y+49	; 0x31
    3c50:	7a a9       	ldd	r23, Y+50	; 0x32
    3c52:	8b a9       	ldd	r24, Y+51	; 0x33
    3c54:	9c a9       	ldd	r25, Y+52	; 0x34
    3c56:	20 e0       	ldi	r18, 0x00	; 0
    3c58:	30 e0       	ldi	r19, 0x00	; 0
    3c5a:	40 e8       	ldi	r20, 0x80	; 128
    3c5c:	5f e3       	ldi	r21, 0x3F	; 63
    3c5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c62:	88 23       	and	r24, r24
    3c64:	2c f4       	brge	.+10     	; 0x3c70 <H_LCD_void_Init+0x184>
		__ticks = 1;
    3c66:	81 e0       	ldi	r24, 0x01	; 1
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	98 ab       	std	Y+48, r25	; 0x30
    3c6c:	8f a7       	std	Y+47, r24	; 0x2f
    3c6e:	3f c0       	rjmp	.+126    	; 0x3cee <H_LCD_void_Init+0x202>
	else if (__tmp > 65535)
    3c70:	69 a9       	ldd	r22, Y+49	; 0x31
    3c72:	7a a9       	ldd	r23, Y+50	; 0x32
    3c74:	8b a9       	ldd	r24, Y+51	; 0x33
    3c76:	9c a9       	ldd	r25, Y+52	; 0x34
    3c78:	20 e0       	ldi	r18, 0x00	; 0
    3c7a:	3f ef       	ldi	r19, 0xFF	; 255
    3c7c:	4f e7       	ldi	r20, 0x7F	; 127
    3c7e:	57 e4       	ldi	r21, 0x47	; 71
    3c80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c84:	18 16       	cp	r1, r24
    3c86:	4c f5       	brge	.+82     	; 0x3cda <H_LCD_void_Init+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c88:	6d a9       	ldd	r22, Y+53	; 0x35
    3c8a:	7e a9       	ldd	r23, Y+54	; 0x36
    3c8c:	8f a9       	ldd	r24, Y+55	; 0x37
    3c8e:	98 ad       	ldd	r25, Y+56	; 0x38
    3c90:	20 e0       	ldi	r18, 0x00	; 0
    3c92:	30 e0       	ldi	r19, 0x00	; 0
    3c94:	40 e2       	ldi	r20, 0x20	; 32
    3c96:	51 e4       	ldi	r21, 0x41	; 65
    3c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c9c:	dc 01       	movw	r26, r24
    3c9e:	cb 01       	movw	r24, r22
    3ca0:	bc 01       	movw	r22, r24
    3ca2:	cd 01       	movw	r24, r26
    3ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ca8:	dc 01       	movw	r26, r24
    3caa:	cb 01       	movw	r24, r22
    3cac:	98 ab       	std	Y+48, r25	; 0x30
    3cae:	8f a7       	std	Y+47, r24	; 0x2f
    3cb0:	0f c0       	rjmp	.+30     	; 0x3cd0 <H_LCD_void_Init+0x1e4>
    3cb2:	80 e9       	ldi	r24, 0x90	; 144
    3cb4:	91 e0       	ldi	r25, 0x01	; 1
    3cb6:	9e a7       	std	Y+46, r25	; 0x2e
    3cb8:	8d a7       	std	Y+45, r24	; 0x2d
    3cba:	8d a5       	ldd	r24, Y+45	; 0x2d
    3cbc:	9e a5       	ldd	r25, Y+46	; 0x2e
    3cbe:	01 97       	sbiw	r24, 0x01	; 1
    3cc0:	f1 f7       	brne	.-4      	; 0x3cbe <H_LCD_void_Init+0x1d2>
    3cc2:	9e a7       	std	Y+46, r25	; 0x2e
    3cc4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cc6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3cc8:	98 a9       	ldd	r25, Y+48	; 0x30
    3cca:	01 97       	sbiw	r24, 0x01	; 1
    3ccc:	98 ab       	std	Y+48, r25	; 0x30
    3cce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3cd2:	98 a9       	ldd	r25, Y+48	; 0x30
    3cd4:	00 97       	sbiw	r24, 0x00	; 0
    3cd6:	69 f7       	brne	.-38     	; 0x3cb2 <H_LCD_void_Init+0x1c6>
    3cd8:	14 c0       	rjmp	.+40     	; 0x3d02 <H_LCD_void_Init+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cda:	69 a9       	ldd	r22, Y+49	; 0x31
    3cdc:	7a a9       	ldd	r23, Y+50	; 0x32
    3cde:	8b a9       	ldd	r24, Y+51	; 0x33
    3ce0:	9c a9       	ldd	r25, Y+52	; 0x34
    3ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ce6:	dc 01       	movw	r26, r24
    3ce8:	cb 01       	movw	r24, r22
    3cea:	98 ab       	std	Y+48, r25	; 0x30
    3cec:	8f a7       	std	Y+47, r24	; 0x2f
    3cee:	8f a5       	ldd	r24, Y+47	; 0x2f
    3cf0:	98 a9       	ldd	r25, Y+48	; 0x30
    3cf2:	9c a7       	std	Y+44, r25	; 0x2c
    3cf4:	8b a7       	std	Y+43, r24	; 0x2b
    3cf6:	8b a5       	ldd	r24, Y+43	; 0x2b
    3cf8:	9c a5       	ldd	r25, Y+44	; 0x2c
    3cfa:	01 97       	sbiw	r24, 0x01	; 1
    3cfc:	f1 f7       	brne	.-4      	; 0x3cfa <H_LCD_void_Init+0x20e>
    3cfe:	9c a7       	std	Y+44, r25	; 0x2c
    3d00:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	H_LCD_void_sendCommand(CLCD_FUNCTION_SET_2);
    3d02:	88 e2       	ldi	r24, 0x28	; 40
    3d04:	0e 94 00 20 	call	0x4000	; 0x4000 <H_LCD_void_sendCommand>
    3d08:	80 e0       	ldi	r24, 0x00	; 0
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	a0 ea       	ldi	r26, 0xA0	; 160
    3d0e:	b0 e4       	ldi	r27, 0x40	; 64
    3d10:	8f a3       	std	Y+39, r24	; 0x27
    3d12:	98 a7       	std	Y+40, r25	; 0x28
    3d14:	a9 a7       	std	Y+41, r26	; 0x29
    3d16:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d18:	6f a1       	ldd	r22, Y+39	; 0x27
    3d1a:	78 a5       	ldd	r23, Y+40	; 0x28
    3d1c:	89 a5       	ldd	r24, Y+41	; 0x29
    3d1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d20:	20 e0       	ldi	r18, 0x00	; 0
    3d22:	30 e0       	ldi	r19, 0x00	; 0
    3d24:	4a e7       	ldi	r20, 0x7A	; 122
    3d26:	55 e4       	ldi	r21, 0x45	; 69
    3d28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d2c:	dc 01       	movw	r26, r24
    3d2e:	cb 01       	movw	r24, r22
    3d30:	8b a3       	std	Y+35, r24	; 0x23
    3d32:	9c a3       	std	Y+36, r25	; 0x24
    3d34:	ad a3       	std	Y+37, r26	; 0x25
    3d36:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3d38:	6b a1       	ldd	r22, Y+35	; 0x23
    3d3a:	7c a1       	ldd	r23, Y+36	; 0x24
    3d3c:	8d a1       	ldd	r24, Y+37	; 0x25
    3d3e:	9e a1       	ldd	r25, Y+38	; 0x26
    3d40:	20 e0       	ldi	r18, 0x00	; 0
    3d42:	30 e0       	ldi	r19, 0x00	; 0
    3d44:	40 e8       	ldi	r20, 0x80	; 128
    3d46:	5f e3       	ldi	r21, 0x3F	; 63
    3d48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d4c:	88 23       	and	r24, r24
    3d4e:	2c f4       	brge	.+10     	; 0x3d5a <H_LCD_void_Init+0x26e>
		__ticks = 1;
    3d50:	81 e0       	ldi	r24, 0x01	; 1
    3d52:	90 e0       	ldi	r25, 0x00	; 0
    3d54:	9a a3       	std	Y+34, r25	; 0x22
    3d56:	89 a3       	std	Y+33, r24	; 0x21
    3d58:	3f c0       	rjmp	.+126    	; 0x3dd8 <H_LCD_void_Init+0x2ec>
	else if (__tmp > 65535)
    3d5a:	6b a1       	ldd	r22, Y+35	; 0x23
    3d5c:	7c a1       	ldd	r23, Y+36	; 0x24
    3d5e:	8d a1       	ldd	r24, Y+37	; 0x25
    3d60:	9e a1       	ldd	r25, Y+38	; 0x26
    3d62:	20 e0       	ldi	r18, 0x00	; 0
    3d64:	3f ef       	ldi	r19, 0xFF	; 255
    3d66:	4f e7       	ldi	r20, 0x7F	; 127
    3d68:	57 e4       	ldi	r21, 0x47	; 71
    3d6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d6e:	18 16       	cp	r1, r24
    3d70:	4c f5       	brge	.+82     	; 0x3dc4 <H_LCD_void_Init+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d72:	6f a1       	ldd	r22, Y+39	; 0x27
    3d74:	78 a5       	ldd	r23, Y+40	; 0x28
    3d76:	89 a5       	ldd	r24, Y+41	; 0x29
    3d78:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d7a:	20 e0       	ldi	r18, 0x00	; 0
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	40 e2       	ldi	r20, 0x20	; 32
    3d80:	51 e4       	ldi	r21, 0x41	; 65
    3d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d86:	dc 01       	movw	r26, r24
    3d88:	cb 01       	movw	r24, r22
    3d8a:	bc 01       	movw	r22, r24
    3d8c:	cd 01       	movw	r24, r26
    3d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d92:	dc 01       	movw	r26, r24
    3d94:	cb 01       	movw	r24, r22
    3d96:	9a a3       	std	Y+34, r25	; 0x22
    3d98:	89 a3       	std	Y+33, r24	; 0x21
    3d9a:	0f c0       	rjmp	.+30     	; 0x3dba <H_LCD_void_Init+0x2ce>
    3d9c:	80 e9       	ldi	r24, 0x90	; 144
    3d9e:	91 e0       	ldi	r25, 0x01	; 1
    3da0:	98 a3       	std	Y+32, r25	; 0x20
    3da2:	8f 8f       	std	Y+31, r24	; 0x1f
    3da4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3da6:	98 a1       	ldd	r25, Y+32	; 0x20
    3da8:	01 97       	sbiw	r24, 0x01	; 1
    3daa:	f1 f7       	brne	.-4      	; 0x3da8 <H_LCD_void_Init+0x2bc>
    3dac:	98 a3       	std	Y+32, r25	; 0x20
    3dae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3db0:	89 a1       	ldd	r24, Y+33	; 0x21
    3db2:	9a a1       	ldd	r25, Y+34	; 0x22
    3db4:	01 97       	sbiw	r24, 0x01	; 1
    3db6:	9a a3       	std	Y+34, r25	; 0x22
    3db8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dba:	89 a1       	ldd	r24, Y+33	; 0x21
    3dbc:	9a a1       	ldd	r25, Y+34	; 0x22
    3dbe:	00 97       	sbiw	r24, 0x00	; 0
    3dc0:	69 f7       	brne	.-38     	; 0x3d9c <H_LCD_void_Init+0x2b0>
    3dc2:	14 c0       	rjmp	.+40     	; 0x3dec <H_LCD_void_Init+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dc4:	6b a1       	ldd	r22, Y+35	; 0x23
    3dc6:	7c a1       	ldd	r23, Y+36	; 0x24
    3dc8:	8d a1       	ldd	r24, Y+37	; 0x25
    3dca:	9e a1       	ldd	r25, Y+38	; 0x26
    3dcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dd0:	dc 01       	movw	r26, r24
    3dd2:	cb 01       	movw	r24, r22
    3dd4:	9a a3       	std	Y+34, r25	; 0x22
    3dd6:	89 a3       	std	Y+33, r24	; 0x21
    3dd8:	89 a1       	ldd	r24, Y+33	; 0x21
    3dda:	9a a1       	ldd	r25, Y+34	; 0x22
    3ddc:	9e 8f       	std	Y+30, r25	; 0x1e
    3dde:	8d 8f       	std	Y+29, r24	; 0x1d
    3de0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3de2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3de4:	01 97       	sbiw	r24, 0x01	; 1
    3de6:	f1 f7       	brne	.-4      	; 0x3de4 <H_LCD_void_Init+0x2f8>
    3de8:	9e 8f       	std	Y+30, r25	; 0x1e
    3dea:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	/*Display ON/OFF*/
	H_LCD_void_sendCommand(CLCD_DISPLAY);
    3dec:	8c e0       	ldi	r24, 0x0C	; 12
    3dee:	0e 94 00 20 	call	0x4000	; 0x4000 <H_LCD_void_sendCommand>
    3df2:	80 e0       	ldi	r24, 0x00	; 0
    3df4:	90 e0       	ldi	r25, 0x00	; 0
    3df6:	a0 ea       	ldi	r26, 0xA0	; 160
    3df8:	b0 e4       	ldi	r27, 0x40	; 64
    3dfa:	89 8f       	std	Y+25, r24	; 0x19
    3dfc:	9a 8f       	std	Y+26, r25	; 0x1a
    3dfe:	ab 8f       	std	Y+27, r26	; 0x1b
    3e00:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e02:	69 8d       	ldd	r22, Y+25	; 0x19
    3e04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e0a:	20 e0       	ldi	r18, 0x00	; 0
    3e0c:	30 e0       	ldi	r19, 0x00	; 0
    3e0e:	4a e7       	ldi	r20, 0x7A	; 122
    3e10:	55 e4       	ldi	r21, 0x45	; 69
    3e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e16:	dc 01       	movw	r26, r24
    3e18:	cb 01       	movw	r24, r22
    3e1a:	8d 8b       	std	Y+21, r24	; 0x15
    3e1c:	9e 8b       	std	Y+22, r25	; 0x16
    3e1e:	af 8b       	std	Y+23, r26	; 0x17
    3e20:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3e22:	6d 89       	ldd	r22, Y+21	; 0x15
    3e24:	7e 89       	ldd	r23, Y+22	; 0x16
    3e26:	8f 89       	ldd	r24, Y+23	; 0x17
    3e28:	98 8d       	ldd	r25, Y+24	; 0x18
    3e2a:	20 e0       	ldi	r18, 0x00	; 0
    3e2c:	30 e0       	ldi	r19, 0x00	; 0
    3e2e:	40 e8       	ldi	r20, 0x80	; 128
    3e30:	5f e3       	ldi	r21, 0x3F	; 63
    3e32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e36:	88 23       	and	r24, r24
    3e38:	2c f4       	brge	.+10     	; 0x3e44 <H_LCD_void_Init+0x358>
		__ticks = 1;
    3e3a:	81 e0       	ldi	r24, 0x01	; 1
    3e3c:	90 e0       	ldi	r25, 0x00	; 0
    3e3e:	9c 8b       	std	Y+20, r25	; 0x14
    3e40:	8b 8b       	std	Y+19, r24	; 0x13
    3e42:	3f c0       	rjmp	.+126    	; 0x3ec2 <H_LCD_void_Init+0x3d6>
	else if (__tmp > 65535)
    3e44:	6d 89       	ldd	r22, Y+21	; 0x15
    3e46:	7e 89       	ldd	r23, Y+22	; 0x16
    3e48:	8f 89       	ldd	r24, Y+23	; 0x17
    3e4a:	98 8d       	ldd	r25, Y+24	; 0x18
    3e4c:	20 e0       	ldi	r18, 0x00	; 0
    3e4e:	3f ef       	ldi	r19, 0xFF	; 255
    3e50:	4f e7       	ldi	r20, 0x7F	; 127
    3e52:	57 e4       	ldi	r21, 0x47	; 71
    3e54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e58:	18 16       	cp	r1, r24
    3e5a:	4c f5       	brge	.+82     	; 0x3eae <H_LCD_void_Init+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e5c:	69 8d       	ldd	r22, Y+25	; 0x19
    3e5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e64:	20 e0       	ldi	r18, 0x00	; 0
    3e66:	30 e0       	ldi	r19, 0x00	; 0
    3e68:	40 e2       	ldi	r20, 0x20	; 32
    3e6a:	51 e4       	ldi	r21, 0x41	; 65
    3e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e70:	dc 01       	movw	r26, r24
    3e72:	cb 01       	movw	r24, r22
    3e74:	bc 01       	movw	r22, r24
    3e76:	cd 01       	movw	r24, r26
    3e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e7c:	dc 01       	movw	r26, r24
    3e7e:	cb 01       	movw	r24, r22
    3e80:	9c 8b       	std	Y+20, r25	; 0x14
    3e82:	8b 8b       	std	Y+19, r24	; 0x13
    3e84:	0f c0       	rjmp	.+30     	; 0x3ea4 <H_LCD_void_Init+0x3b8>
    3e86:	80 e9       	ldi	r24, 0x90	; 144
    3e88:	91 e0       	ldi	r25, 0x01	; 1
    3e8a:	9a 8b       	std	Y+18, r25	; 0x12
    3e8c:	89 8b       	std	Y+17, r24	; 0x11
    3e8e:	89 89       	ldd	r24, Y+17	; 0x11
    3e90:	9a 89       	ldd	r25, Y+18	; 0x12
    3e92:	01 97       	sbiw	r24, 0x01	; 1
    3e94:	f1 f7       	brne	.-4      	; 0x3e92 <H_LCD_void_Init+0x3a6>
    3e96:	9a 8b       	std	Y+18, r25	; 0x12
    3e98:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e9a:	8b 89       	ldd	r24, Y+19	; 0x13
    3e9c:	9c 89       	ldd	r25, Y+20	; 0x14
    3e9e:	01 97       	sbiw	r24, 0x01	; 1
    3ea0:	9c 8b       	std	Y+20, r25	; 0x14
    3ea2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ea4:	8b 89       	ldd	r24, Y+19	; 0x13
    3ea6:	9c 89       	ldd	r25, Y+20	; 0x14
    3ea8:	00 97       	sbiw	r24, 0x00	; 0
    3eaa:	69 f7       	brne	.-38     	; 0x3e86 <H_LCD_void_Init+0x39a>
    3eac:	14 c0       	rjmp	.+40     	; 0x3ed6 <H_LCD_void_Init+0x3ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eae:	6d 89       	ldd	r22, Y+21	; 0x15
    3eb0:	7e 89       	ldd	r23, Y+22	; 0x16
    3eb2:	8f 89       	ldd	r24, Y+23	; 0x17
    3eb4:	98 8d       	ldd	r25, Y+24	; 0x18
    3eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eba:	dc 01       	movw	r26, r24
    3ebc:	cb 01       	movw	r24, r22
    3ebe:	9c 8b       	std	Y+20, r25	; 0x14
    3ec0:	8b 8b       	std	Y+19, r24	; 0x13
    3ec2:	8b 89       	ldd	r24, Y+19	; 0x13
    3ec4:	9c 89       	ldd	r25, Y+20	; 0x14
    3ec6:	98 8b       	std	Y+16, r25	; 0x10
    3ec8:	8f 87       	std	Y+15, r24	; 0x0f
    3eca:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ecc:	98 89       	ldd	r25, Y+16	; 0x10
    3ece:	01 97       	sbiw	r24, 0x01	; 1
    3ed0:	f1 f7       	brne	.-4      	; 0x3ece <H_LCD_void_Init+0x3e2>
    3ed2:	98 8b       	std	Y+16, r25	; 0x10
    3ed4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	/*Display clear*/
	H_LCD_void_sendCommand(CLCD_CLEAR);
    3ed6:	81 e0       	ldi	r24, 0x01	; 1
    3ed8:	0e 94 00 20 	call	0x4000	; 0x4000 <H_LCD_void_sendCommand>
    3edc:	80 e0       	ldi	r24, 0x00	; 0
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	a0 ea       	ldi	r26, 0xA0	; 160
    3ee2:	b0 e4       	ldi	r27, 0x40	; 64
    3ee4:	8b 87       	std	Y+11, r24	; 0x0b
    3ee6:	9c 87       	std	Y+12, r25	; 0x0c
    3ee8:	ad 87       	std	Y+13, r26	; 0x0d
    3eea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3eec:	6b 85       	ldd	r22, Y+11	; 0x0b
    3eee:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ef0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ef2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ef4:	20 e0       	ldi	r18, 0x00	; 0
    3ef6:	30 e0       	ldi	r19, 0x00	; 0
    3ef8:	4a e7       	ldi	r20, 0x7A	; 122
    3efa:	55 e4       	ldi	r21, 0x45	; 69
    3efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f00:	dc 01       	movw	r26, r24
    3f02:	cb 01       	movw	r24, r22
    3f04:	8f 83       	std	Y+7, r24	; 0x07
    3f06:	98 87       	std	Y+8, r25	; 0x08
    3f08:	a9 87       	std	Y+9, r26	; 0x09
    3f0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f0c:	6f 81       	ldd	r22, Y+7	; 0x07
    3f0e:	78 85       	ldd	r23, Y+8	; 0x08
    3f10:	89 85       	ldd	r24, Y+9	; 0x09
    3f12:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f14:	20 e0       	ldi	r18, 0x00	; 0
    3f16:	30 e0       	ldi	r19, 0x00	; 0
    3f18:	40 e8       	ldi	r20, 0x80	; 128
    3f1a:	5f e3       	ldi	r21, 0x3F	; 63
    3f1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f20:	88 23       	and	r24, r24
    3f22:	2c f4       	brge	.+10     	; 0x3f2e <H_LCD_void_Init+0x442>
		__ticks = 1;
    3f24:	81 e0       	ldi	r24, 0x01	; 1
    3f26:	90 e0       	ldi	r25, 0x00	; 0
    3f28:	9e 83       	std	Y+6, r25	; 0x06
    3f2a:	8d 83       	std	Y+5, r24	; 0x05
    3f2c:	3f c0       	rjmp	.+126    	; 0x3fac <H_LCD_void_Init+0x4c0>
	else if (__tmp > 65535)
    3f2e:	6f 81       	ldd	r22, Y+7	; 0x07
    3f30:	78 85       	ldd	r23, Y+8	; 0x08
    3f32:	89 85       	ldd	r24, Y+9	; 0x09
    3f34:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f36:	20 e0       	ldi	r18, 0x00	; 0
    3f38:	3f ef       	ldi	r19, 0xFF	; 255
    3f3a:	4f e7       	ldi	r20, 0x7F	; 127
    3f3c:	57 e4       	ldi	r21, 0x47	; 71
    3f3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f42:	18 16       	cp	r1, r24
    3f44:	4c f5       	brge	.+82     	; 0x3f98 <H_LCD_void_Init+0x4ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f46:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f48:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f4e:	20 e0       	ldi	r18, 0x00	; 0
    3f50:	30 e0       	ldi	r19, 0x00	; 0
    3f52:	40 e2       	ldi	r20, 0x20	; 32
    3f54:	51 e4       	ldi	r21, 0x41	; 65
    3f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f5a:	dc 01       	movw	r26, r24
    3f5c:	cb 01       	movw	r24, r22
    3f5e:	bc 01       	movw	r22, r24
    3f60:	cd 01       	movw	r24, r26
    3f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f66:	dc 01       	movw	r26, r24
    3f68:	cb 01       	movw	r24, r22
    3f6a:	9e 83       	std	Y+6, r25	; 0x06
    3f6c:	8d 83       	std	Y+5, r24	; 0x05
    3f6e:	0f c0       	rjmp	.+30     	; 0x3f8e <H_LCD_void_Init+0x4a2>
    3f70:	80 e9       	ldi	r24, 0x90	; 144
    3f72:	91 e0       	ldi	r25, 0x01	; 1
    3f74:	9c 83       	std	Y+4, r25	; 0x04
    3f76:	8b 83       	std	Y+3, r24	; 0x03
    3f78:	8b 81       	ldd	r24, Y+3	; 0x03
    3f7a:	9c 81       	ldd	r25, Y+4	; 0x04
    3f7c:	01 97       	sbiw	r24, 0x01	; 1
    3f7e:	f1 f7       	brne	.-4      	; 0x3f7c <H_LCD_void_Init+0x490>
    3f80:	9c 83       	std	Y+4, r25	; 0x04
    3f82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f84:	8d 81       	ldd	r24, Y+5	; 0x05
    3f86:	9e 81       	ldd	r25, Y+6	; 0x06
    3f88:	01 97       	sbiw	r24, 0x01	; 1
    3f8a:	9e 83       	std	Y+6, r25	; 0x06
    3f8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f90:	9e 81       	ldd	r25, Y+6	; 0x06
    3f92:	00 97       	sbiw	r24, 0x00	; 0
    3f94:	69 f7       	brne	.-38     	; 0x3f70 <H_LCD_void_Init+0x484>
    3f96:	14 c0       	rjmp	.+40     	; 0x3fc0 <H_LCD_void_Init+0x4d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f98:	6f 81       	ldd	r22, Y+7	; 0x07
    3f9a:	78 85       	ldd	r23, Y+8	; 0x08
    3f9c:	89 85       	ldd	r24, Y+9	; 0x09
    3f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fa4:	dc 01       	movw	r26, r24
    3fa6:	cb 01       	movw	r24, r22
    3fa8:	9e 83       	std	Y+6, r25	; 0x06
    3faa:	8d 83       	std	Y+5, r24	; 0x05
    3fac:	8d 81       	ldd	r24, Y+5	; 0x05
    3fae:	9e 81       	ldd	r25, Y+6	; 0x06
    3fb0:	9a 83       	std	Y+2, r25	; 0x02
    3fb2:	89 83       	std	Y+1, r24	; 0x01
    3fb4:	89 81       	ldd	r24, Y+1	; 0x01
    3fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    3fb8:	01 97       	sbiw	r24, 0x01	; 1
    3fba:	f1 f7       	brne	.-4      	; 0x3fb8 <H_LCD_void_Init+0x4cc>
    3fbc:	9a 83       	std	Y+2, r25	; 0x02
    3fbe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	H_LCD_void_sendCommand(CLCD_ENTRY_MODE_SET);
    3fc0:	86 e0       	ldi	r24, 0x06	; 6
    3fc2:	0e 94 00 20 	call	0x4000	; 0x4000 <H_LCD_void_sendCommand>
	/*clear display*/
	H_LCD_void_sendCommand(0b00000001);

#endif

}
    3fc6:	ca 5b       	subi	r28, 0xBA	; 186
    3fc8:	df 4f       	sbci	r29, 0xFF	; 255
    3fca:	0f b6       	in	r0, 0x3f	; 63
    3fcc:	f8 94       	cli
    3fce:	de bf       	out	0x3e, r29	; 62
    3fd0:	0f be       	out	0x3f, r0	; 63
    3fd2:	cd bf       	out	0x3d, r28	; 61
    3fd4:	cf 91       	pop	r28
    3fd6:	df 91       	pop	r29
    3fd8:	1f 91       	pop	r17
    3fda:	0f 91       	pop	r16
    3fdc:	08 95       	ret

00003fde <H_LCD_void_sendData>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_sendData(u8 copy_u8data )
{
    3fde:	df 93       	push	r29
    3fe0:	cf 93       	push	r28
    3fe2:	0f 92       	push	r0
    3fe4:	cd b7       	in	r28, 0x3d	; 61
    3fe6:	de b7       	in	r29, 0x3e	; 62
    3fe8:	89 83       	std	Y+1, r24	; 0x01
	/*SET RS TO ZERO*/
	M_Dio_void_setPinValue(CLCD_RS_PIN,DIO_HIGH);
    3fea:	8d e0       	ldi	r24, 0x0D	; 13
    3fec:	61 e0       	ldi	r22, 0x01	; 1
    3fee:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
	/*Write command*/
	H_LCD_void_latchByte(copy_u8data);
    3ff2:	89 81       	ldd	r24, Y+1	; 0x01
    3ff4:	0e 94 af 1b 	call	0x375e	; 0x375e <H_LCD_void_latchByte>

}
    3ff8:	0f 90       	pop	r0
    3ffa:	cf 91       	pop	r28
    3ffc:	df 91       	pop	r29
    3ffe:	08 95       	ret

00004000 <H_LCD_void_sendCommand>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_sendCommand(u8 copy_u8command)
{
    4000:	df 93       	push	r29
    4002:	cf 93       	push	r28
    4004:	0f 92       	push	r0
    4006:	cd b7       	in	r28, 0x3d	; 61
    4008:	de b7       	in	r29, 0x3e	; 62
    400a:	89 83       	std	Y+1, r24	; 0x01
	/*SET RS TO ZERO*/
	M_Dio_void_setPinValue(CLCD_RS_PIN,DIO_LOW);
    400c:	8d e0       	ldi	r24, 0x0D	; 13
    400e:	60 e0       	ldi	r22, 0x00	; 0
    4010:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
	/*Write command*/
	H_LCD_void_latchByte(copy_u8command);
    4014:	89 81       	ldd	r24, Y+1	; 0x01
    4016:	0e 94 af 1b 	call	0x375e	; 0x375e <H_LCD_void_latchByte>

}
    401a:	0f 90       	pop	r0
    401c:	cf 91       	pop	r28
    401e:	df 91       	pop	r29
    4020:	08 95       	ret

00004022 <H_LCD_void_sendString>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_sendString(const char * pstr)
{
    4022:	df 93       	push	r29
    4024:	cf 93       	push	r28
    4026:	00 d0       	rcall	.+0      	; 0x4028 <H_LCD_void_sendString+0x6>
    4028:	0f 92       	push	r0
    402a:	cd b7       	in	r28, 0x3d	; 61
    402c:	de b7       	in	r29, 0x3e	; 62
    402e:	9b 83       	std	Y+3, r25	; 0x03
    4030:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter;
	for(counter=0;pstr[counter]!=0;counter++)
    4032:	19 82       	std	Y+1, r1	; 0x01
    4034:	0e c0       	rjmp	.+28     	; 0x4052 <H_LCD_void_sendString+0x30>
	{
		H_LCD_void_sendData(pstr[counter]);
    4036:	89 81       	ldd	r24, Y+1	; 0x01
    4038:	28 2f       	mov	r18, r24
    403a:	30 e0       	ldi	r19, 0x00	; 0
    403c:	8a 81       	ldd	r24, Y+2	; 0x02
    403e:	9b 81       	ldd	r25, Y+3	; 0x03
    4040:	fc 01       	movw	r30, r24
    4042:	e2 0f       	add	r30, r18
    4044:	f3 1f       	adc	r31, r19
    4046:	80 81       	ld	r24, Z
    4048:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <H_LCD_void_sendData>
  Return Value     : void
******************************************/
void H_LCD_void_sendString(const char * pstr)
{
	u8 counter;
	for(counter=0;pstr[counter]!=0;counter++)
    404c:	89 81       	ldd	r24, Y+1	; 0x01
    404e:	8f 5f       	subi	r24, 0xFF	; 255
    4050:	89 83       	std	Y+1, r24	; 0x01
    4052:	89 81       	ldd	r24, Y+1	; 0x01
    4054:	28 2f       	mov	r18, r24
    4056:	30 e0       	ldi	r19, 0x00	; 0
    4058:	8a 81       	ldd	r24, Y+2	; 0x02
    405a:	9b 81       	ldd	r25, Y+3	; 0x03
    405c:	fc 01       	movw	r30, r24
    405e:	e2 0f       	add	r30, r18
    4060:	f3 1f       	adc	r31, r19
    4062:	80 81       	ld	r24, Z
    4064:	88 23       	and	r24, r24
    4066:	39 f7       	brne	.-50     	; 0x4036 <H_LCD_void_sendString+0x14>
	{
		H_LCD_void_sendData(pstr[counter]);
	}
}
    4068:	0f 90       	pop	r0
    406a:	0f 90       	pop	r0
    406c:	0f 90       	pop	r0
    406e:	cf 91       	pop	r28
    4070:	df 91       	pop	r29
    4072:	08 95       	ret

00004074 <H_LCD_void_sendIntNum>:
	//H_LCD_void_sendData(copy_s32Num+'0');

}
*/
void H_LCD_void_sendIntNum(s32 copy_s32Num)
{
    4074:	0f 93       	push	r16
    4076:	1f 93       	push	r17
    4078:	df 93       	push	r29
    407a:	cf 93       	push	r28
    407c:	cd b7       	in	r28, 0x3d	; 61
    407e:	de b7       	in	r29, 0x3e	; 62
    4080:	a5 97       	sbiw	r28, 0x25	; 37
    4082:	0f b6       	in	r0, 0x3f	; 63
    4084:	f8 94       	cli
    4086:	de bf       	out	0x3e, r29	; 62
    4088:	0f be       	out	0x3f, r0	; 63
    408a:	cd bf       	out	0x3d, r28	; 61
    408c:	6a a3       	std	Y+34, r22	; 0x22
    408e:	7b a3       	std	Y+35, r23	; 0x23
    4090:	8c a3       	std	Y+36, r24	; 0x24
    4092:	9d a3       	std	Y+37, r25	; 0x25
	/* Local Variable to save the numbers digits*/
	s32 Local_Variable[8] = {0} ;
    4094:	80 e2       	ldi	r24, 0x20	; 32
    4096:	fe 01       	movw	r30, r28
    4098:	32 96       	adiw	r30, 0x02	; 2
    409a:	df 01       	movw	r26, r30
    409c:	98 2f       	mov	r25, r24
    409e:	1d 92       	st	X+, r1
    40a0:	9a 95       	dec	r25
    40a2:	e9 f7       	brne	.-6      	; 0x409e <H_LCD_void_sendIntNum+0x2a>
	u8 Local_Counter = 0 ;
    40a4:	19 82       	std	Y+1, r1	; 0x01

	/* Check if the number is negative */
	if (copy_s32Num < 0)
    40a6:	8a a1       	ldd	r24, Y+34	; 0x22
    40a8:	9b a1       	ldd	r25, Y+35	; 0x23
    40aa:	ac a1       	ldd	r26, Y+36	; 0x24
    40ac:	bd a1       	ldd	r27, Y+37	; 0x25
    40ae:	bb 23       	and	r27, r27
    40b0:	0c f0       	brlt	.+2      	; 0x40b4 <H_LCD_void_sendIntNum+0x40>
    40b2:	4a c0       	rjmp	.+148    	; 0x4148 <H_LCD_void_sendIntNum+0xd4>
	{
	/*Remove Negative Sign from number*/
	copy_s32Num = copy_s32Num * -1 ;
    40b4:	8a a1       	ldd	r24, Y+34	; 0x22
    40b6:	9b a1       	ldd	r25, Y+35	; 0x23
    40b8:	ac a1       	ldd	r26, Y+36	; 0x24
    40ba:	bd a1       	ldd	r27, Y+37	; 0x25
    40bc:	b0 95       	com	r27
    40be:	a0 95       	com	r26
    40c0:	90 95       	com	r25
    40c2:	81 95       	neg	r24
    40c4:	9f 4f       	sbci	r25, 0xFF	; 255
    40c6:	af 4f       	sbci	r26, 0xFF	; 255
    40c8:	bf 4f       	sbci	r27, 0xFF	; 255
    40ca:	8a a3       	std	Y+34, r24	; 0x22
    40cc:	9b a3       	std	Y+35, r25	; 0x23
    40ce:	ac a3       	std	Y+36, r26	; 0x24
    40d0:	bd a3       	std	Y+37, r27	; 0x25
	/*Send Negative Sign */
	H_LCD_void_sendData('-');
    40d2:	8d e2       	ldi	r24, 0x2D	; 45
    40d4:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <H_LCD_void_sendData>
    40d8:	37 c0       	rjmp	.+110    	; 0x4148 <H_LCD_void_sendIntNum+0xd4>
	}
	/* While loop to split the Numbers and save it in Local_Variable*/
	while (copy_s32Num != 0)
	{
	Local_Variable[Local_Counter] = copy_s32Num % 10 ;
    40da:	89 81       	ldd	r24, Y+1	; 0x01
    40dc:	08 2f       	mov	r16, r24
    40de:	10 e0       	ldi	r17, 0x00	; 0
    40e0:	8a a1       	ldd	r24, Y+34	; 0x22
    40e2:	9b a1       	ldd	r25, Y+35	; 0x23
    40e4:	ac a1       	ldd	r26, Y+36	; 0x24
    40e6:	bd a1       	ldd	r27, Y+37	; 0x25
    40e8:	2a e0       	ldi	r18, 0x0A	; 10
    40ea:	30 e0       	ldi	r19, 0x00	; 0
    40ec:	40 e0       	ldi	r20, 0x00	; 0
    40ee:	50 e0       	ldi	r21, 0x00	; 0
    40f0:	bc 01       	movw	r22, r24
    40f2:	cd 01       	movw	r24, r26
    40f4:	0e 94 0c 23 	call	0x4618	; 0x4618 <__divmodsi4>
    40f8:	dc 01       	movw	r26, r24
    40fa:	cb 01       	movw	r24, r22
    40fc:	ac 01       	movw	r20, r24
    40fe:	bd 01       	movw	r22, r26
    4100:	98 01       	movw	r18, r16
    4102:	22 0f       	add	r18, r18
    4104:	33 1f       	adc	r19, r19
    4106:	22 0f       	add	r18, r18
    4108:	33 1f       	adc	r19, r19
    410a:	ce 01       	movw	r24, r28
    410c:	01 96       	adiw	r24, 0x01	; 1
    410e:	82 0f       	add	r24, r18
    4110:	93 1f       	adc	r25, r19
    4112:	fc 01       	movw	r30, r24
    4114:	31 96       	adiw	r30, 0x01	; 1
    4116:	40 83       	st	Z, r20
    4118:	51 83       	std	Z+1, r21	; 0x01
    411a:	62 83       	std	Z+2, r22	; 0x02
    411c:	73 83       	std	Z+3, r23	; 0x03
	copy_s32Num = copy_s32Num / 10 ;
    411e:	8a a1       	ldd	r24, Y+34	; 0x22
    4120:	9b a1       	ldd	r25, Y+35	; 0x23
    4122:	ac a1       	ldd	r26, Y+36	; 0x24
    4124:	bd a1       	ldd	r27, Y+37	; 0x25
    4126:	2a e0       	ldi	r18, 0x0A	; 10
    4128:	30 e0       	ldi	r19, 0x00	; 0
    412a:	40 e0       	ldi	r20, 0x00	; 0
    412c:	50 e0       	ldi	r21, 0x00	; 0
    412e:	bc 01       	movw	r22, r24
    4130:	cd 01       	movw	r24, r26
    4132:	0e 94 0c 23 	call	0x4618	; 0x4618 <__divmodsi4>
    4136:	da 01       	movw	r26, r20
    4138:	c9 01       	movw	r24, r18
    413a:	8a a3       	std	Y+34, r24	; 0x22
    413c:	9b a3       	std	Y+35, r25	; 0x23
    413e:	ac a3       	std	Y+36, r26	; 0x24
    4140:	bd a3       	std	Y+37, r27	; 0x25
	Local_Counter ++ ;
    4142:	89 81       	ldd	r24, Y+1	; 0x01
    4144:	8f 5f       	subi	r24, 0xFF	; 255
    4146:	89 83       	std	Y+1, r24	; 0x01
	copy_s32Num = copy_s32Num * -1 ;
	/*Send Negative Sign */
	H_LCD_void_sendData('-');
	}
	/* While loop to split the Numbers and save it in Local_Variable*/
	while (copy_s32Num != 0)
    4148:	8a a1       	ldd	r24, Y+34	; 0x22
    414a:	9b a1       	ldd	r25, Y+35	; 0x23
    414c:	ac a1       	ldd	r26, Y+36	; 0x24
    414e:	bd a1       	ldd	r27, Y+37	; 0x25
    4150:	00 97       	sbiw	r24, 0x00	; 0
    4152:	a1 05       	cpc	r26, r1
    4154:	b1 05       	cpc	r27, r1
    4156:	09 f6       	brne	.-126    	; 0x40da <H_LCD_void_sendIntNum+0x66>
	copy_s32Num = copy_s32Num / 10 ;
	Local_Counter ++ ;

	}
	/* For loop to send the numbers using SendData*/
	for (Local_Counter --; Local_Counter < '0' ; Local_Counter--)
    4158:	89 81       	ldd	r24, Y+1	; 0x01
    415a:	81 50       	subi	r24, 0x01	; 1
    415c:	89 83       	std	Y+1, r24	; 0x01
    415e:	18 c0       	rjmp	.+48     	; 0x4190 <H_LCD_void_sendIntNum+0x11c>
	{
		 H_LCD_void_sendData('0' + Local_Variable[Local_Counter]);
    4160:	89 81       	ldd	r24, Y+1	; 0x01
    4162:	88 2f       	mov	r24, r24
    4164:	90 e0       	ldi	r25, 0x00	; 0
    4166:	9c 01       	movw	r18, r24
    4168:	22 0f       	add	r18, r18
    416a:	33 1f       	adc	r19, r19
    416c:	22 0f       	add	r18, r18
    416e:	33 1f       	adc	r19, r19
    4170:	ce 01       	movw	r24, r28
    4172:	01 96       	adiw	r24, 0x01	; 1
    4174:	82 0f       	add	r24, r18
    4176:	93 1f       	adc	r25, r19
    4178:	fc 01       	movw	r30, r24
    417a:	31 96       	adiw	r30, 0x01	; 1
    417c:	80 81       	ld	r24, Z
    417e:	91 81       	ldd	r25, Z+1	; 0x01
    4180:	a2 81       	ldd	r26, Z+2	; 0x02
    4182:	b3 81       	ldd	r27, Z+3	; 0x03
    4184:	80 5d       	subi	r24, 0xD0	; 208
    4186:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <H_LCD_void_sendData>
	copy_s32Num = copy_s32Num / 10 ;
	Local_Counter ++ ;

	}
	/* For loop to send the numbers using SendData*/
	for (Local_Counter --; Local_Counter < '0' ; Local_Counter--)
    418a:	89 81       	ldd	r24, Y+1	; 0x01
    418c:	81 50       	subi	r24, 0x01	; 1
    418e:	89 83       	std	Y+1, r24	; 0x01
    4190:	89 81       	ldd	r24, Y+1	; 0x01
    4192:	80 33       	cpi	r24, 0x30	; 48
    4194:	28 f3       	brcs	.-54     	; 0x4160 <H_LCD_void_sendIntNum+0xec>
	{
		 H_LCD_void_sendData('0' + Local_Variable[Local_Counter]);
	}
}
    4196:	a5 96       	adiw	r28, 0x25	; 37
    4198:	0f b6       	in	r0, 0x3f	; 63
    419a:	f8 94       	cli
    419c:	de bf       	out	0x3e, r29	; 62
    419e:	0f be       	out	0x3f, r0	; 63
    41a0:	cd bf       	out	0x3d, r28	; 61
    41a2:	cf 91       	pop	r28
    41a4:	df 91       	pop	r29
    41a6:	1f 91       	pop	r17
    41a8:	0f 91       	pop	r16
    41aa:	08 95       	ret

000041ac <H_LCD_void_gotoXY>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col)
{
    41ac:	df 93       	push	r29
    41ae:	cf 93       	push	r28
    41b0:	00 d0       	rcall	.+0      	; 0x41b2 <H_LCD_void_gotoXY+0x6>
    41b2:	0f 92       	push	r0
    41b4:	cd b7       	in	r28, 0x3d	; 61
    41b6:	de b7       	in	r29, 0x3e	; 62
    41b8:	8a 83       	std	Y+2, r24	; 0x02
    41ba:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(copy_u8Row == 1)
    41bc:	8a 81       	ldd	r24, Y+2	; 0x02
    41be:	81 30       	cpi	r24, 0x01	; 1
    41c0:	19 f4       	brne	.+6      	; 0x41c8 <H_LCD_void_gotoXY+0x1c>
	{
		Local_u8Address = copy_u8Col;
    41c2:	8b 81       	ldd	r24, Y+3	; 0x03
    41c4:	89 83       	std	Y+1, r24	; 0x01
    41c6:	14 c0       	rjmp	.+40     	; 0x41f0 <H_LCD_void_gotoXY+0x44>
	}
	else if(copy_u8Row == 2)
    41c8:	8a 81       	ldd	r24, Y+2	; 0x02
    41ca:	82 30       	cpi	r24, 0x02	; 2
    41cc:	21 f4       	brne	.+8      	; 0x41d6 <H_LCD_void_gotoXY+0x2a>
	{
		Local_u8Address = copy_u8Col + 0x40;
    41ce:	8b 81       	ldd	r24, Y+3	; 0x03
    41d0:	80 5c       	subi	r24, 0xC0	; 192
    41d2:	89 83       	std	Y+1, r24	; 0x01
    41d4:	0d c0       	rjmp	.+26     	; 0x41f0 <H_LCD_void_gotoXY+0x44>
	}
	else if(copy_u8Row == 3)
    41d6:	8a 81       	ldd	r24, Y+2	; 0x02
    41d8:	83 30       	cpi	r24, 0x03	; 3
    41da:	21 f4       	brne	.+8      	; 0x41e4 <H_LCD_void_gotoXY+0x38>
	{
		Local_u8Address = copy_u8Col + 0x14;
    41dc:	8b 81       	ldd	r24, Y+3	; 0x03
    41de:	8c 5e       	subi	r24, 0xEC	; 236
    41e0:	89 83       	std	Y+1, r24	; 0x01
    41e2:	06 c0       	rjmp	.+12     	; 0x41f0 <H_LCD_void_gotoXY+0x44>
	}
	else if(copy_u8Row == 4)
    41e4:	8a 81       	ldd	r24, Y+2	; 0x02
    41e6:	84 30       	cpi	r24, 0x04	; 4
    41e8:	19 f4       	brne	.+6      	; 0x41f0 <H_LCD_void_gotoXY+0x44>
	{
		Local_u8Address = copy_u8Col + 0x54;
    41ea:	8b 81       	ldd	r24, Y+3	; 0x03
    41ec:	8c 5a       	subi	r24, 0xAC	; 172
    41ee:	89 83       	std	Y+1, r24	; 0x01
	else
	{

	}
	//128 Is added to the address to set the most significant bit by 1 according to DDRAM address instruction
	H_LCD_void_sendCommand(Local_u8Address+128);
    41f0:	89 81       	ldd	r24, Y+1	; 0x01
    41f2:	80 58       	subi	r24, 0x80	; 128
    41f4:	0e 94 00 20 	call	0x4000	; 0x4000 <H_LCD_void_sendCommand>
}
    41f8:	0f 90       	pop	r0
    41fa:	0f 90       	pop	r0
    41fc:	0f 90       	pop	r0
    41fe:	cf 91       	pop	r28
    4200:	df 91       	pop	r29
    4202:	08 95       	ret

00004204 <H_LCD_void_creatCustomChar>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_creatCustomChar (const u8 * ArrPattern,u8 copy_u8charCode)
{
    4204:	df 93       	push	r29
    4206:	cf 93       	push	r28
    4208:	00 d0       	rcall	.+0      	; 0x420a <H_LCD_void_creatCustomChar+0x6>
    420a:	00 d0       	rcall	.+0      	; 0x420c <H_LCD_void_creatCustomChar+0x8>
    420c:	0f 92       	push	r0
    420e:	cd b7       	in	r28, 0x3d	; 61
    4210:	de b7       	in	r29, 0x3e	; 62
    4212:	9c 83       	std	Y+4, r25	; 0x04
    4214:	8b 83       	std	Y+3, r24	; 0x03
    4216:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_counter=0;
    4218:	1a 82       	std	Y+2, r1	; 0x02
	/*first calculate CGRAM address since each block of address is 8bytes*/
	u8 Local_u8CGramaddress=0;
    421a:	19 82       	std	Y+1, r1	; 0x01
	Local_u8CGramaddress = copy_u8charCode*8;
    421c:	8d 81       	ldd	r24, Y+5	; 0x05
    421e:	88 2f       	mov	r24, r24
    4220:	90 e0       	ldi	r25, 0x00	; 0
    4222:	88 0f       	add	r24, r24
    4224:	99 1f       	adc	r25, r25
    4226:	88 0f       	add	r24, r24
    4228:	99 1f       	adc	r25, r25
    422a:	88 0f       	add	r24, r24
    422c:	99 1f       	adc	r25, r25
    422e:	89 83       	std	Y+1, r24	; 0x01
	/*Access CGRAM block using function Send command by setting bit 6 and clearing bit7*/
	H_LCD_void_sendCommand(Local_u8CGramaddress+64);
    4230:	89 81       	ldd	r24, Y+1	; 0x01
    4232:	80 5c       	subi	r24, 0xC0	; 192
    4234:	0e 94 00 20 	call	0x4000	; 0x4000 <H_LCD_void_sendCommand>
	/*write the pattern to the CG ram */
	for(Local_counter=0;Local_counter<8;Local_counter++) /*<8 since there are 8 memory locations only for cgram (64bytes)*/
    4238:	1a 82       	std	Y+2, r1	; 0x02
    423a:	0e c0       	rjmp	.+28     	; 0x4258 <H_LCD_void_creatCustomChar+0x54>
	{
		H_LCD_void_sendData(ArrPattern[Local_counter]);
    423c:	8a 81       	ldd	r24, Y+2	; 0x02
    423e:	28 2f       	mov	r18, r24
    4240:	30 e0       	ldi	r19, 0x00	; 0
    4242:	8b 81       	ldd	r24, Y+3	; 0x03
    4244:	9c 81       	ldd	r25, Y+4	; 0x04
    4246:	fc 01       	movw	r30, r24
    4248:	e2 0f       	add	r30, r18
    424a:	f3 1f       	adc	r31, r19
    424c:	80 81       	ld	r24, Z
    424e:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <H_LCD_void_sendData>
	u8 Local_u8CGramaddress=0;
	Local_u8CGramaddress = copy_u8charCode*8;
	/*Access CGRAM block using function Send command by setting bit 6 and clearing bit7*/
	H_LCD_void_sendCommand(Local_u8CGramaddress+64);
	/*write the pattern to the CG ram */
	for(Local_counter=0;Local_counter<8;Local_counter++) /*<8 since there are 8 memory locations only for cgram (64bytes)*/
    4252:	8a 81       	ldd	r24, Y+2	; 0x02
    4254:	8f 5f       	subi	r24, 0xFF	; 255
    4256:	8a 83       	std	Y+2, r24	; 0x02
    4258:	8a 81       	ldd	r24, Y+2	; 0x02
    425a:	88 30       	cpi	r24, 0x08	; 8
    425c:	78 f3       	brcs	.-34     	; 0x423c <H_LCD_void_creatCustomChar+0x38>
	{
		H_LCD_void_sendData(ArrPattern[Local_counter]);
	}
	H_LCD_void_gotoXY(1,0);
    425e:	81 e0       	ldi	r24, 0x01	; 1
    4260:	60 e0       	ldi	r22, 0x00	; 0
    4262:	0e 94 d6 20 	call	0x41ac	; 0x41ac <H_LCD_void_gotoXY>
	H_LCD_void_sendData(copy_u8charCode);
    4266:	8d 81       	ldd	r24, Y+5	; 0x05
    4268:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <H_LCD_void_sendData>

}
    426c:	0f 90       	pop	r0
    426e:	0f 90       	pop	r0
    4270:	0f 90       	pop	r0
    4272:	0f 90       	pop	r0
    4274:	0f 90       	pop	r0
    4276:	cf 91       	pop	r28
    4278:	df 91       	pop	r29
    427a:	08 95       	ret

0000427c <H_LCD_void_displayCustomChar>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_displayCustomChar (u8 copy_u8charCode)
{
    427c:	df 93       	push	r29
    427e:	cf 93       	push	r28
    4280:	0f 92       	push	r0
    4282:	cd b7       	in	r28, 0x3d	; 61
    4284:	de b7       	in	r29, 0x3e	; 62
    4286:	89 83       	std	Y+1, r24	; 0x01
	/*give the custom char number to send data*/
	H_LCD_void_sendData(copy_u8charCode);
    4288:	89 81       	ldd	r24, Y+1	; 0x01
    428a:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <H_LCD_void_sendData>
}
    428e:	0f 90       	pop	r0
    4290:	cf 91       	pop	r28
    4292:	df 91       	pop	r29
    4294:	08 95       	ret

00004296 <H_LCD_void_ClearDisplay>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_ClearDisplay(void)
{
    4296:	df 93       	push	r29
    4298:	cf 93       	push	r28
    429a:	cd b7       	in	r28, 0x3d	; 61
    429c:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_sendCommand(CLCD_CLEAR);
    429e:	81 e0       	ldi	r24, 0x01	; 1
    42a0:	0e 94 00 20 	call	0x4000	; 0x4000 <H_LCD_void_sendCommand>
}
    42a4:	cf 91       	pop	r28
    42a6:	df 91       	pop	r29
    42a8:	08 95       	ret

000042aa <H_BUZZER_Void_TurnOn>:
#include "Buzzer_Int.h"
#include "Buzzer_Types.h"
#include "Buzzer_Priv.h"

void H_BUZZER_Void_TurnOn(void)
{
    42aa:	df 93       	push	r29
    42ac:	cf 93       	push	r28
    42ae:	cd b7       	in	r28, 0x3d	; 61
    42b0:	de b7       	in	r29, 0x3e	; 62
	//M_Dio_void_setPinValue(BUZZER_1_PIN, DIO_HIGH);
	M_Dio_void_togglePinValue(BUZZER_1_PIN);
    42b2:	84 e2       	ldi	r24, 0x24	; 36
    42b4:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <M_Dio_void_togglePinValue>
}
    42b8:	cf 91       	pop	r28
    42ba:	df 91       	pop	r29
    42bc:	08 95       	ret

000042be <H_BUZZER_Void_TurnOff>:
void H_BUZZER_Void_TurnOff(void)
{
    42be:	df 93       	push	r29
    42c0:	cf 93       	push	r28
    42c2:	cd b7       	in	r28, 0x3d	; 61
    42c4:	de b7       	in	r29, 0x3e	; 62
	M_Dio_void_setPinValue(BUZZER_1_PIN, DIO_LOW);
    42c6:	84 e2       	ldi	r24, 0x24	; 36
    42c8:	60 e0       	ldi	r22, 0x00	; 0
    42ca:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
}
    42ce:	cf 91       	pop	r28
    42d0:	df 91       	pop	r29
    42d2:	08 95       	ret

000042d4 <main>:
Task_Config Task2 ={Ready,50,2,50,0,Task_2}; //buzzer 1000ms
Task_Config Task3 ={Ready,30,3,1,0,Task_3}; //led 600 ms
Task_Config Task4 ={Ready,40,4,1,0,Task_4}; //relay  800 ms
Task_Config Task5 ={Ready,100,5,1,0,Task_5}; //temp  2000ms
int main(void)
{
    42d4:	df 93       	push	r29
    42d6:	cf 93       	push	r28
    42d8:	cd b7       	in	r28, 0x3d	; 61
    42da:	de b7       	in	r29, 0x3e	; 62

	Port_Init(PORT_Config_Arr);
    42dc:	88 ee       	ldi	r24, 0xE8	; 232
    42de:	91 e0       	ldi	r25, 0x01	; 1
    42e0:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <Port_Init>
	H_LCD_void_Init();
    42e4:	0e 94 76 1d 	call	0x3aec	; 0x3aec <H_LCD_void_Init>
	H_Temprature_void_Init();
    42e8:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <H_Temprature_void_Init>


	OS_Init();
    42ec:	0e 94 17 07 	call	0xe2e	; 0xe2e <OS_Init>
	OS_Create_Task(&Task1);
    42f0:	86 e8       	ldi	r24, 0x86	; 134
    42f2:	91 e0       	ldi	r25, 0x01	; 1
    42f4:	0e 94 2d 07 	call	0xe5a	; 0xe5a <OS_Create_Task>
	OS_Create_Task(&Task2);
    42f8:	83 e9       	ldi	r24, 0x93	; 147
    42fa:	91 e0       	ldi	r25, 0x01	; 1
    42fc:	0e 94 2d 07 	call	0xe5a	; 0xe5a <OS_Create_Task>
	OS_Create_Task(&Task3);
    4300:	80 ea       	ldi	r24, 0xA0	; 160
    4302:	91 e0       	ldi	r25, 0x01	; 1
    4304:	0e 94 2d 07 	call	0xe5a	; 0xe5a <OS_Create_Task>
	OS_Create_Task(&Task4);
    4308:	8d ea       	ldi	r24, 0xAD	; 173
    430a:	91 e0       	ldi	r25, 0x01	; 1
    430c:	0e 94 2d 07 	call	0xe5a	; 0xe5a <OS_Create_Task>
	OS_Create_Task(&Task5);
    4310:	8a eb       	ldi	r24, 0xBA	; 186
    4312:	91 e0       	ldi	r25, 0x01	; 1
    4314:	0e 94 2d 07 	call	0xe5a	; 0xe5a <OS_Create_Task>
	OS_Start();
    4318:	0e 94 c5 08 	call	0x118a	; 0x118a <OS_Start>
    431c:	ff cf       	rjmp	.-2      	; 0x431c <main+0x48>

0000431e <Task_1>:

	}
}

void Task_1(void)
{
    431e:	df 93       	push	r29
    4320:	cf 93       	push	r28
    4322:	cd b7       	in	r28, 0x3d	; 61
    4324:	de b7       	in	r29, 0x3e	; 62
	static u8 x=1;
	static u8 y=0;
	H_LCD_void_gotoXY(x,y);
    4326:	80 91 c7 01 	lds	r24, 0x01C7
    432a:	90 91 c1 02 	lds	r25, 0x02C1
    432e:	69 2f       	mov	r22, r25
    4330:	0e 94 d6 20 	call	0x41ac	; 0x41ac <H_LCD_void_gotoXY>
	H_LCD_void_sendString("Nour");
    4334:	80 e6       	ldi	r24, 0x60	; 96
    4336:	90 e0       	ldi	r25, 0x00	; 0
    4338:	0e 94 11 20 	call	0x4022	; 0x4022 <H_LCD_void_sendString>
	y+=4;
    433c:	80 91 c1 02 	lds	r24, 0x02C1
    4340:	8c 5f       	subi	r24, 0xFC	; 252
    4342:	80 93 c1 02 	sts	0x02C1, r24
	if(y>19)
    4346:	80 91 c1 02 	lds	r24, 0x02C1
    434a:	84 31       	cpi	r24, 0x14	; 20
    434c:	90 f0       	brcs	.+36     	; 0x4372 <Task_1+0x54>
	{
		x++;
    434e:	80 91 c7 01 	lds	r24, 0x01C7
    4352:	8f 5f       	subi	r24, 0xFF	; 255
    4354:	80 93 c7 01 	sts	0x01C7, r24
		y=0;
    4358:	10 92 c1 02 	sts	0x02C1, r1
		if(x==4)
    435c:	80 91 c7 01 	lds	r24, 0x01C7
    4360:	84 30       	cpi	r24, 0x04	; 4
    4362:	39 f4       	brne	.+14     	; 0x4372 <Task_1+0x54>
		{
			x=1;
    4364:	81 e0       	ldi	r24, 0x01	; 1
    4366:	80 93 c7 01 	sts	0x01C7, r24
			y=0;
    436a:	10 92 c1 02 	sts	0x02C1, r1
			H_LCD_void_ClearDisplay();
    436e:	0e 94 4b 21 	call	0x4296	; 0x4296 <H_LCD_void_ClearDisplay>

		}
	}
}
    4372:	cf 91       	pop	r28
    4374:	df 91       	pop	r29
    4376:	08 95       	ret

00004378 <Task_2>:
void Task_2(void)
{
    4378:	df 93       	push	r29
    437a:	cf 93       	push	r28
    437c:	cd b7       	in	r28, 0x3d	; 61
    437e:	de b7       	in	r29, 0x3e	; 62
    4380:	2e 97       	sbiw	r28, 0x0e	; 14
    4382:	0f b6       	in	r0, 0x3f	; 63
    4384:	f8 94       	cli
    4386:	de bf       	out	0x3e, r29	; 62
    4388:	0f be       	out	0x3f, r0	; 63
    438a:	cd bf       	out	0x3d, r28	; 61
	static u8 i=0;
	i++;
    438c:	80 91 c2 02 	lds	r24, 0x02C2
    4390:	8f 5f       	subi	r24, 0xFF	; 255
    4392:	80 93 c2 02 	sts	0x02C2, r24
	if(i==10)
    4396:	80 91 c2 02 	lds	r24, 0x02C2
    439a:	8a 30       	cpi	r24, 0x0A	; 10
    439c:	29 f4       	brne	.+10     	; 0x43a8 <Task_2+0x30>
	{
		M_Dio_void_togglePinValue(DIO_PB5);
    439e:	89 e1       	ldi	r24, 0x19	; 25
    43a0:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <M_Dio_void_togglePinValue>
		i=0;
    43a4:	10 92 c2 02 	sts	0x02C2, r1
	}
	//ENABLE
	M_Dio_void_setPinValue(DIO_PB6,DIO_HIGH);
    43a8:	8a e1       	ldi	r24, 0x1A	; 26
    43aa:	61 e0       	ldi	r22, 0x01	; 1
    43ac:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(DIO_PB3,DIO_HIGH);
    43b0:	87 e1       	ldi	r24, 0x17	; 23
    43b2:	61 e0       	ldi	r22, 0x01	; 1
    43b4:	0e 94 22 14 	call	0x2844	; 0x2844 <M_Dio_void_setPinValue>
	H_BUZZER_Void_TurnOn();
    43b8:	0e 94 55 21 	call	0x42aa	; 0x42aa <H_BUZZER_Void_TurnOn>
    43bc:	80 e0       	ldi	r24, 0x00	; 0
    43be:	90 e0       	ldi	r25, 0x00	; 0
    43c0:	a0 e2       	ldi	r26, 0x20	; 32
    43c2:	b1 e4       	ldi	r27, 0x41	; 65
    43c4:	8b 87       	std	Y+11, r24	; 0x0b
    43c6:	9c 87       	std	Y+12, r25	; 0x0c
    43c8:	ad 87       	std	Y+13, r26	; 0x0d
    43ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    43ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    43d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    43d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    43d4:	20 e0       	ldi	r18, 0x00	; 0
    43d6:	30 e0       	ldi	r19, 0x00	; 0
    43d8:	4a e7       	ldi	r20, 0x7A	; 122
    43da:	55 e4       	ldi	r21, 0x45	; 69
    43dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43e0:	dc 01       	movw	r26, r24
    43e2:	cb 01       	movw	r24, r22
    43e4:	8f 83       	std	Y+7, r24	; 0x07
    43e6:	98 87       	std	Y+8, r25	; 0x08
    43e8:	a9 87       	std	Y+9, r26	; 0x09
    43ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43ec:	6f 81       	ldd	r22, Y+7	; 0x07
    43ee:	78 85       	ldd	r23, Y+8	; 0x08
    43f0:	89 85       	ldd	r24, Y+9	; 0x09
    43f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    43f4:	20 e0       	ldi	r18, 0x00	; 0
    43f6:	30 e0       	ldi	r19, 0x00	; 0
    43f8:	40 e8       	ldi	r20, 0x80	; 128
    43fa:	5f e3       	ldi	r21, 0x3F	; 63
    43fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4400:	88 23       	and	r24, r24
    4402:	2c f4       	brge	.+10     	; 0x440e <Task_2+0x96>
		__ticks = 1;
    4404:	81 e0       	ldi	r24, 0x01	; 1
    4406:	90 e0       	ldi	r25, 0x00	; 0
    4408:	9e 83       	std	Y+6, r25	; 0x06
    440a:	8d 83       	std	Y+5, r24	; 0x05
    440c:	3f c0       	rjmp	.+126    	; 0x448c <Task_2+0x114>
	else if (__tmp > 65535)
    440e:	6f 81       	ldd	r22, Y+7	; 0x07
    4410:	78 85       	ldd	r23, Y+8	; 0x08
    4412:	89 85       	ldd	r24, Y+9	; 0x09
    4414:	9a 85       	ldd	r25, Y+10	; 0x0a
    4416:	20 e0       	ldi	r18, 0x00	; 0
    4418:	3f ef       	ldi	r19, 0xFF	; 255
    441a:	4f e7       	ldi	r20, 0x7F	; 127
    441c:	57 e4       	ldi	r21, 0x47	; 71
    441e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4422:	18 16       	cp	r1, r24
    4424:	4c f5       	brge	.+82     	; 0x4478 <Task_2+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4426:	6b 85       	ldd	r22, Y+11	; 0x0b
    4428:	7c 85       	ldd	r23, Y+12	; 0x0c
    442a:	8d 85       	ldd	r24, Y+13	; 0x0d
    442c:	9e 85       	ldd	r25, Y+14	; 0x0e
    442e:	20 e0       	ldi	r18, 0x00	; 0
    4430:	30 e0       	ldi	r19, 0x00	; 0
    4432:	40 e2       	ldi	r20, 0x20	; 32
    4434:	51 e4       	ldi	r21, 0x41	; 65
    4436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    443a:	dc 01       	movw	r26, r24
    443c:	cb 01       	movw	r24, r22
    443e:	bc 01       	movw	r22, r24
    4440:	cd 01       	movw	r24, r26
    4442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4446:	dc 01       	movw	r26, r24
    4448:	cb 01       	movw	r24, r22
    444a:	9e 83       	std	Y+6, r25	; 0x06
    444c:	8d 83       	std	Y+5, r24	; 0x05
    444e:	0f c0       	rjmp	.+30     	; 0x446e <Task_2+0xf6>
    4450:	80 e9       	ldi	r24, 0x90	; 144
    4452:	91 e0       	ldi	r25, 0x01	; 1
    4454:	9c 83       	std	Y+4, r25	; 0x04
    4456:	8b 83       	std	Y+3, r24	; 0x03
    4458:	8b 81       	ldd	r24, Y+3	; 0x03
    445a:	9c 81       	ldd	r25, Y+4	; 0x04
    445c:	01 97       	sbiw	r24, 0x01	; 1
    445e:	f1 f7       	brne	.-4      	; 0x445c <Task_2+0xe4>
    4460:	9c 83       	std	Y+4, r25	; 0x04
    4462:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4464:	8d 81       	ldd	r24, Y+5	; 0x05
    4466:	9e 81       	ldd	r25, Y+6	; 0x06
    4468:	01 97       	sbiw	r24, 0x01	; 1
    446a:	9e 83       	std	Y+6, r25	; 0x06
    446c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    446e:	8d 81       	ldd	r24, Y+5	; 0x05
    4470:	9e 81       	ldd	r25, Y+6	; 0x06
    4472:	00 97       	sbiw	r24, 0x00	; 0
    4474:	69 f7       	brne	.-38     	; 0x4450 <Task_2+0xd8>
    4476:	14 c0       	rjmp	.+40     	; 0x44a0 <Task_2+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4478:	6f 81       	ldd	r22, Y+7	; 0x07
    447a:	78 85       	ldd	r23, Y+8	; 0x08
    447c:	89 85       	ldd	r24, Y+9	; 0x09
    447e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4484:	dc 01       	movw	r26, r24
    4486:	cb 01       	movw	r24, r22
    4488:	9e 83       	std	Y+6, r25	; 0x06
    448a:	8d 83       	std	Y+5, r24	; 0x05
    448c:	8d 81       	ldd	r24, Y+5	; 0x05
    448e:	9e 81       	ldd	r25, Y+6	; 0x06
    4490:	9a 83       	std	Y+2, r25	; 0x02
    4492:	89 83       	std	Y+1, r24	; 0x01
    4494:	89 81       	ldd	r24, Y+1	; 0x01
    4496:	9a 81       	ldd	r25, Y+2	; 0x02
    4498:	01 97       	sbiw	r24, 0x01	; 1
    449a:	f1 f7       	brne	.-4      	; 0x4498 <Task_2+0x120>
    449c:	9a 83       	std	Y+2, r25	; 0x02
    449e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	H_BUZZER_Void_TurnOn();
    44a0:	0e 94 55 21 	call	0x42aa	; 0x42aa <H_BUZZER_Void_TurnOn>
}
    44a4:	2e 96       	adiw	r28, 0x0e	; 14
    44a6:	0f b6       	in	r0, 0x3f	; 63
    44a8:	f8 94       	cli
    44aa:	de bf       	out	0x3e, r29	; 62
    44ac:	0f be       	out	0x3f, r0	; 63
    44ae:	cd bf       	out	0x3d, r28	; 61
    44b0:	cf 91       	pop	r28
    44b2:	df 91       	pop	r29
    44b4:	08 95       	ret

000044b6 <Task_3>:
void Task_3(void)
{
    44b6:	df 93       	push	r29
    44b8:	cf 93       	push	r28
    44ba:	cd b7       	in	r28, 0x3d	; 61
    44bc:	de b7       	in	r29, 0x3e	; 62

	H_LED_void_Toggle(LED_BLUE);
    44be:	81 e0       	ldi	r24, 0x01	; 1
    44c0:	0e 94 22 1b 	call	0x3644	; 0x3644 <H_LED_void_Toggle>
	H_LED_void_Toggle(LED_GREEN);
    44c4:	82 e0       	ldi	r24, 0x02	; 2
    44c6:	0e 94 22 1b 	call	0x3644	; 0x3644 <H_LED_void_Toggle>
	H_LED_void_Toggle(LED_YELLOW);
    44ca:	83 e0       	ldi	r24, 0x03	; 3
    44cc:	0e 94 22 1b 	call	0x3644	; 0x3644 <H_LED_void_Toggle>


}
    44d0:	cf 91       	pop	r28
    44d2:	df 91       	pop	r29
    44d4:	08 95       	ret

000044d6 <Task_4>:
void Task_4(void)
{
    44d6:	df 93       	push	r29
    44d8:	cf 93       	push	r28
    44da:	cd b7       	in	r28, 0x3d	; 61
    44dc:	de b7       	in	r29, 0x3e	; 62
	static u8 Flag_Relay=0;
	static u8 counter=0;
	if(Flag_Relay==1)
    44de:	80 91 c4 02 	lds	r24, 0x02C4
    44e2:	81 30       	cpi	r24, 0x01	; 1
    44e4:	99 f4       	brne	.+38     	; 0x450c <Task_4+0x36>
	{
		H_Relay_Void_WorkOff(Relay_1);
    44e6:	81 e0       	ldi	r24, 0x01	; 1
    44e8:	0e 94 58 19 	call	0x32b0	; 0x32b0 <H_Relay_Void_WorkOff>
		H_Relay_Void_WorkOn(Relay_2);
    44ec:	82 e0       	ldi	r24, 0x02	; 2
    44ee:	0e 94 32 19 	call	0x3264	; 0x3264 <H_Relay_Void_WorkOn>
		counter++;
    44f2:	80 91 c3 02 	lds	r24, 0x02C3
    44f6:	8f 5f       	subi	r24, 0xFF	; 255
    44f8:	80 93 c3 02 	sts	0x02C3, r24
		if(counter==5)
    44fc:	80 91 c3 02 	lds	r24, 0x02C3
    4500:	85 30       	cpi	r24, 0x05	; 5
    4502:	21 f4       	brne	.+8      	; 0x450c <Task_4+0x36>
		{
			Flag_Relay=0;
    4504:	10 92 c4 02 	sts	0x02C4, r1
			counter=0;
    4508:	10 92 c3 02 	sts	0x02C3, r1

		}
	}
	if(Flag_Relay==0)
    450c:	80 91 c4 02 	lds	r24, 0x02C4
    4510:	88 23       	and	r24, r24
    4512:	a1 f4       	brne	.+40     	; 0x453c <Task_4+0x66>
	{
		H_Relay_Void_WorkOn(Relay_1);
    4514:	81 e0       	ldi	r24, 0x01	; 1
    4516:	0e 94 32 19 	call	0x3264	; 0x3264 <H_Relay_Void_WorkOn>
		H_Relay_Void_WorkOff(Relay_2);
    451a:	82 e0       	ldi	r24, 0x02	; 2
    451c:	0e 94 58 19 	call	0x32b0	; 0x32b0 <H_Relay_Void_WorkOff>
		counter++;
    4520:	80 91 c3 02 	lds	r24, 0x02C3
    4524:	8f 5f       	subi	r24, 0xFF	; 255
    4526:	80 93 c3 02 	sts	0x02C3, r24
		if(counter==5)
    452a:	80 91 c3 02 	lds	r24, 0x02C3
    452e:	85 30       	cpi	r24, 0x05	; 5
    4530:	29 f4       	brne	.+10     	; 0x453c <Task_4+0x66>
		{
			Flag_Relay=1;
    4532:	81 e0       	ldi	r24, 0x01	; 1
    4534:	80 93 c4 02 	sts	0x02C4, r24
			counter=0;
    4538:	10 92 c3 02 	sts	0x02C3, r1

		}

	}
}
    453c:	cf 91       	pop	r28
    453e:	df 91       	pop	r29
    4540:	08 95       	ret

00004542 <Task_5>:
void Task_5(void)
{
    4542:	df 93       	push	r29
    4544:	cf 93       	push	r28
    4546:	00 d0       	rcall	.+0      	; 0x4548 <Task_5+0x6>
    4548:	cd b7       	in	r28, 0x3d	; 61
    454a:	de b7       	in	r29, 0x3e	; 62
	 u16 Temp_value;
	Temp_value=H_Temprature_u16_Read();
    454c:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <H_Temprature_u16_Read>
    4550:	9a 83       	std	Y+2, r25	; 0x02
    4552:	89 83       	std	Y+1, r24	; 0x01
	Temp_value/=19;
    4554:	89 81       	ldd	r24, Y+1	; 0x01
    4556:	9a 81       	ldd	r25, Y+2	; 0x02
    4558:	23 e1       	ldi	r18, 0x13	; 19
    455a:	30 e0       	ldi	r19, 0x00	; 0
    455c:	b9 01       	movw	r22, r18
    455e:	0e 94 d6 22 	call	0x45ac	; 0x45ac <__udivmodhi4>
    4562:	cb 01       	movw	r24, r22
    4564:	9a 83       	std	Y+2, r25	; 0x02
    4566:	89 83       	std	Y+1, r24	; 0x01
	H_LCD_void_gotoXY(4,0);
    4568:	84 e0       	ldi	r24, 0x04	; 4
    456a:	60 e0       	ldi	r22, 0x00	; 0
    456c:	0e 94 d6 20 	call	0x41ac	; 0x41ac <H_LCD_void_gotoXY>
	H_LCD_void_sendString("Temperature:");
    4570:	85 e6       	ldi	r24, 0x65	; 101
    4572:	90 e0       	ldi	r25, 0x00	; 0
    4574:	0e 94 11 20 	call	0x4022	; 0x4022 <H_LCD_void_sendString>
	H_LCD_void_sendIntNum(Temp_value);
    4578:	89 81       	ldd	r24, Y+1	; 0x01
    457a:	9a 81       	ldd	r25, Y+2	; 0x02
    457c:	cc 01       	movw	r24, r24
    457e:	a0 e0       	ldi	r26, 0x00	; 0
    4580:	b0 e0       	ldi	r27, 0x00	; 0
    4582:	bc 01       	movw	r22, r24
    4584:	cd 01       	movw	r24, r26
    4586:	0e 94 3a 20 	call	0x4074	; 0x4074 <H_LCD_void_sendIntNum>

}
    458a:	0f 90       	pop	r0
    458c:	0f 90       	pop	r0
    458e:	cf 91       	pop	r28
    4590:	df 91       	pop	r29
    4592:	08 95       	ret

00004594 <__udivmodqi4>:
    4594:	99 1b       	sub	r25, r25
    4596:	79 e0       	ldi	r23, 0x09	; 9
    4598:	04 c0       	rjmp	.+8      	; 0x45a2 <__udivmodqi4_ep>

0000459a <__udivmodqi4_loop>:
    459a:	99 1f       	adc	r25, r25
    459c:	96 17       	cp	r25, r22
    459e:	08 f0       	brcs	.+2      	; 0x45a2 <__udivmodqi4_ep>
    45a0:	96 1b       	sub	r25, r22

000045a2 <__udivmodqi4_ep>:
    45a2:	88 1f       	adc	r24, r24
    45a4:	7a 95       	dec	r23
    45a6:	c9 f7       	brne	.-14     	; 0x459a <__udivmodqi4_loop>
    45a8:	80 95       	com	r24
    45aa:	08 95       	ret

000045ac <__udivmodhi4>:
    45ac:	aa 1b       	sub	r26, r26
    45ae:	bb 1b       	sub	r27, r27
    45b0:	51 e1       	ldi	r21, 0x11	; 17
    45b2:	07 c0       	rjmp	.+14     	; 0x45c2 <__udivmodhi4_ep>

000045b4 <__udivmodhi4_loop>:
    45b4:	aa 1f       	adc	r26, r26
    45b6:	bb 1f       	adc	r27, r27
    45b8:	a6 17       	cp	r26, r22
    45ba:	b7 07       	cpc	r27, r23
    45bc:	10 f0       	brcs	.+4      	; 0x45c2 <__udivmodhi4_ep>
    45be:	a6 1b       	sub	r26, r22
    45c0:	b7 0b       	sbc	r27, r23

000045c2 <__udivmodhi4_ep>:
    45c2:	88 1f       	adc	r24, r24
    45c4:	99 1f       	adc	r25, r25
    45c6:	5a 95       	dec	r21
    45c8:	a9 f7       	brne	.-22     	; 0x45b4 <__udivmodhi4_loop>
    45ca:	80 95       	com	r24
    45cc:	90 95       	com	r25
    45ce:	bc 01       	movw	r22, r24
    45d0:	cd 01       	movw	r24, r26
    45d2:	08 95       	ret

000045d4 <__udivmodsi4>:
    45d4:	a1 e2       	ldi	r26, 0x21	; 33
    45d6:	1a 2e       	mov	r1, r26
    45d8:	aa 1b       	sub	r26, r26
    45da:	bb 1b       	sub	r27, r27
    45dc:	fd 01       	movw	r30, r26
    45de:	0d c0       	rjmp	.+26     	; 0x45fa <__udivmodsi4_ep>

000045e0 <__udivmodsi4_loop>:
    45e0:	aa 1f       	adc	r26, r26
    45e2:	bb 1f       	adc	r27, r27
    45e4:	ee 1f       	adc	r30, r30
    45e6:	ff 1f       	adc	r31, r31
    45e8:	a2 17       	cp	r26, r18
    45ea:	b3 07       	cpc	r27, r19
    45ec:	e4 07       	cpc	r30, r20
    45ee:	f5 07       	cpc	r31, r21
    45f0:	20 f0       	brcs	.+8      	; 0x45fa <__udivmodsi4_ep>
    45f2:	a2 1b       	sub	r26, r18
    45f4:	b3 0b       	sbc	r27, r19
    45f6:	e4 0b       	sbc	r30, r20
    45f8:	f5 0b       	sbc	r31, r21

000045fa <__udivmodsi4_ep>:
    45fa:	66 1f       	adc	r22, r22
    45fc:	77 1f       	adc	r23, r23
    45fe:	88 1f       	adc	r24, r24
    4600:	99 1f       	adc	r25, r25
    4602:	1a 94       	dec	r1
    4604:	69 f7       	brne	.-38     	; 0x45e0 <__udivmodsi4_loop>
    4606:	60 95       	com	r22
    4608:	70 95       	com	r23
    460a:	80 95       	com	r24
    460c:	90 95       	com	r25
    460e:	9b 01       	movw	r18, r22
    4610:	ac 01       	movw	r20, r24
    4612:	bd 01       	movw	r22, r26
    4614:	cf 01       	movw	r24, r30
    4616:	08 95       	ret

00004618 <__divmodsi4>:
    4618:	97 fb       	bst	r25, 7
    461a:	09 2e       	mov	r0, r25
    461c:	05 26       	eor	r0, r21
    461e:	0e d0       	rcall	.+28     	; 0x463c <__divmodsi4_neg1>
    4620:	57 fd       	sbrc	r21, 7
    4622:	04 d0       	rcall	.+8      	; 0x462c <__divmodsi4_neg2>
    4624:	d7 df       	rcall	.-82     	; 0x45d4 <__udivmodsi4>
    4626:	0a d0       	rcall	.+20     	; 0x463c <__divmodsi4_neg1>
    4628:	00 1c       	adc	r0, r0
    462a:	38 f4       	brcc	.+14     	; 0x463a <__divmodsi4_exit>

0000462c <__divmodsi4_neg2>:
    462c:	50 95       	com	r21
    462e:	40 95       	com	r20
    4630:	30 95       	com	r19
    4632:	21 95       	neg	r18
    4634:	3f 4f       	sbci	r19, 0xFF	; 255
    4636:	4f 4f       	sbci	r20, 0xFF	; 255
    4638:	5f 4f       	sbci	r21, 0xFF	; 255

0000463a <__divmodsi4_exit>:
    463a:	08 95       	ret

0000463c <__divmodsi4_neg1>:
    463c:	f6 f7       	brtc	.-4      	; 0x463a <__divmodsi4_exit>
    463e:	90 95       	com	r25
    4640:	80 95       	com	r24
    4642:	70 95       	com	r23
    4644:	61 95       	neg	r22
    4646:	7f 4f       	sbci	r23, 0xFF	; 255
    4648:	8f 4f       	sbci	r24, 0xFF	; 255
    464a:	9f 4f       	sbci	r25, 0xFF	; 255
    464c:	08 95       	ret

0000464e <__prologue_saves__>:
    464e:	2f 92       	push	r2
    4650:	3f 92       	push	r3
    4652:	4f 92       	push	r4
    4654:	5f 92       	push	r5
    4656:	6f 92       	push	r6
    4658:	7f 92       	push	r7
    465a:	8f 92       	push	r8
    465c:	9f 92       	push	r9
    465e:	af 92       	push	r10
    4660:	bf 92       	push	r11
    4662:	cf 92       	push	r12
    4664:	df 92       	push	r13
    4666:	ef 92       	push	r14
    4668:	ff 92       	push	r15
    466a:	0f 93       	push	r16
    466c:	1f 93       	push	r17
    466e:	cf 93       	push	r28
    4670:	df 93       	push	r29
    4672:	cd b7       	in	r28, 0x3d	; 61
    4674:	de b7       	in	r29, 0x3e	; 62
    4676:	ca 1b       	sub	r28, r26
    4678:	db 0b       	sbc	r29, r27
    467a:	0f b6       	in	r0, 0x3f	; 63
    467c:	f8 94       	cli
    467e:	de bf       	out	0x3e, r29	; 62
    4680:	0f be       	out	0x3f, r0	; 63
    4682:	cd bf       	out	0x3d, r28	; 61
    4684:	09 94       	ijmp

00004686 <__epilogue_restores__>:
    4686:	2a 88       	ldd	r2, Y+18	; 0x12
    4688:	39 88       	ldd	r3, Y+17	; 0x11
    468a:	48 88       	ldd	r4, Y+16	; 0x10
    468c:	5f 84       	ldd	r5, Y+15	; 0x0f
    468e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4690:	7d 84       	ldd	r7, Y+13	; 0x0d
    4692:	8c 84       	ldd	r8, Y+12	; 0x0c
    4694:	9b 84       	ldd	r9, Y+11	; 0x0b
    4696:	aa 84       	ldd	r10, Y+10	; 0x0a
    4698:	b9 84       	ldd	r11, Y+9	; 0x09
    469a:	c8 84       	ldd	r12, Y+8	; 0x08
    469c:	df 80       	ldd	r13, Y+7	; 0x07
    469e:	ee 80       	ldd	r14, Y+6	; 0x06
    46a0:	fd 80       	ldd	r15, Y+5	; 0x05
    46a2:	0c 81       	ldd	r16, Y+4	; 0x04
    46a4:	1b 81       	ldd	r17, Y+3	; 0x03
    46a6:	aa 81       	ldd	r26, Y+2	; 0x02
    46a8:	b9 81       	ldd	r27, Y+1	; 0x01
    46aa:	ce 0f       	add	r28, r30
    46ac:	d1 1d       	adc	r29, r1
    46ae:	0f b6       	in	r0, 0x3f	; 63
    46b0:	f8 94       	cli
    46b2:	de bf       	out	0x3e, r29	; 62
    46b4:	0f be       	out	0x3f, r0	; 63
    46b6:	cd bf       	out	0x3d, r28	; 61
    46b8:	ed 01       	movw	r28, r26
    46ba:	08 95       	ret

000046bc <_exit>:
    46bc:	f8 94       	cli

000046be <__stop_program>:
    46be:	ff cf       	rjmp	.-2      	; 0x46be <__stop_program>
