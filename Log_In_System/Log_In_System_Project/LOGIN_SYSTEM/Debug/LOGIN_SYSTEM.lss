
LOGIN_SYSTEM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004798  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000029c  00800060  00004798  0000482c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  008002fc  008002fc  00004ac8  2**0
                  ALLOC
  3 .stab         00005c4c  00000000  00000000  00004ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003c75  00000000  00000000  0000a714  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000e389  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000e529  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000e71b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00010b26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00011eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00013084  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00013244  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0001353a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013ea8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2f 10 	jmp	0x205e	; 0x205e <__vector_1>
       8:	0c 94 62 10 	jmp	0x20c4	; 0x20c4 <__vector_2>
       c:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__vector_10>
      2c:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	f7 e4       	ldi	r31, 0x47	; 71
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3f       	cpi	r26, 0xFC	; 252
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	ac ef       	ldi	r26, 0xFC	; 252
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 31       	cpi	r26, 0x15	; 21
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0e 23 	call	0x461c	; 0x461c <main>
      8a:	0c 94 ca 23 	jmp	0x4794	; 0x4794 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 93 23 	jmp	0x4726	; 0x4726 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e0       	ldi	r26, 0x0E	; 14
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 af 23 	jmp	0x475e	; 0x475e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9f 23 	jmp	0x473e	; 0x473e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bb 23 	jmp	0x4776	; 0x4776 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9f 23 	jmp	0x473e	; 0x473e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bb 23 	jmp	0x4776	; 0x4776 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 93 23 	jmp	0x4726	; 0x4726 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e0       	ldi	r24, 0x0E	; 14
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 af 23 	jmp	0x475e	; 0x475e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9b 23 	jmp	0x4736	; 0x4736 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e0       	ldi	r22, 0x0E	; 14
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b7 23 	jmp	0x476e	; 0x476e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 9f 23 	jmp	0x473e	; 0x473e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 bb 23 	jmp	0x4776	; 0x4776 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 9f 23 	jmp	0x473e	; 0x473e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 bb 23 	jmp	0x4776	; 0x4776 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 9f 23 	jmp	0x473e	; 0x473e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 bb 23 	jmp	0x4776	; 0x4776 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a3 23 	jmp	0x4746	; 0x4746 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 bf 23 	jmp	0x477e	; 0x477e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 9b 23 	jmp	0x4736	; 0x4736 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 b7 23 	jmp	0x476e	; 0x476e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ea 5e       	subi	r30, 0xEA	; 234
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ICU_Init>:



/*used to initialize time1 to use ICU*/
void ICU_Init(const ICU_ConfigType *Ptr_Config)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <ICU_Init+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
	/*Select normal mode*/
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
     e3c:	af e4       	ldi	r26, 0x4F	; 79
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	ef e4       	ldi	r30, 0x4F	; 79
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	8e 7f       	andi	r24, 0xFE	; 254
     e48:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_WGM11);
     e4a:	af e4       	ldi	r26, 0x4F	; 79
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	ef e4       	ldi	r30, 0x4F	; 79
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	8d 7f       	andi	r24, 0xFD	; 253
     e56:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_WGM12);
     e58:	ae e4       	ldi	r26, 0x4E	; 78
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	ee e4       	ldi	r30, 0x4E	; 78
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	87 7f       	andi	r24, 0xF7	; 247
     e64:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_WGM13);
     e66:	ae e4       	ldi	r26, 0x4E	; 78
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	ee e4       	ldi	r30, 0x4E	; 78
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	8f 7e       	andi	r24, 0xEF	; 239
     e72:	8c 93       	st	X, r24

	/*Select compare output mode*/
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
     e74:	af e4       	ldi	r26, 0x4F	; 79
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	ef e4       	ldi	r30, 0x4F	; 79
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	8f 7b       	andi	r24, 0xBF	; 191
     e80:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_COM1A1);
     e82:	af e4       	ldi	r26, 0x4F	; 79
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	ef e4       	ldi	r30, 0x4F	; 79
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	8f 77       	andi	r24, 0x7F	; 127
     e8e:	8c 93       	st	X, r24

	/*set trigger edge to rising edge for ICU*/
	SET_BIT(TCCR1B,TCCR1B_ICES1);
     e90:	ae e4       	ldi	r26, 0x4E	; 78
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	ee e4       	ldi	r30, 0x4E	; 78
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	80 64       	ori	r24, 0x40	; 64
     e9c:	8c 93       	st	X, r24

	/*Set pre-scaller to 8 CLK*/
	CLR_BIT(TCCR1B,TCCR1B_CS10);
     e9e:	ae e4       	ldi	r26, 0x4E	; 78
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	ee e4       	ldi	r30, 0x4E	; 78
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	8e 7f       	andi	r24, 0xFE	; 254
     eaa:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
     eac:	ae e4       	ldi	r26, 0x4E	; 78
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	ee e4       	ldi	r30, 0x4E	; 78
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	82 60       	ori	r24, 0x02	; 2
     eb8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
     eba:	ae e4       	ldi	r26, 0x4E	; 78
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	ee e4       	ldi	r30, 0x4E	; 78
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	8b 7f       	andi	r24, 0xFB	; 251
     ec6:	8c 93       	st	X, r24
	/*Set initial value for timer1*/
	TCNT1=0;
     ec8:	ec e4       	ldi	r30, 0x4C	; 76
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	11 82       	std	Z+1, r1	; 0x01
     ece:	10 82       	st	Z, r1
	/*Initial value for the input capture register*/
	ICR1=0;
     ed0:	e6 e4       	ldi	r30, 0x46	; 70
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	11 82       	std	Z+1, r1	; 0x01
     ed6:	10 82       	st	Z, r1
	/*Enable the input capture interrupt to generate the interrupt upon detecting the rising edge*/
	SET_BIT(TIMSK,TIMSK_TICIE1);
     ed8:	a9 e5       	ldi	r26, 0x59	; 89
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e9 e5       	ldi	r30, 0x59	; 89
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	80 62       	ori	r24, 0x20	; 32
     ee4:	8c 93       	st	X, r24

}
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	08 95       	ret

00000ef0 <ICU_Set_Edge_detection>:
/*used to set the required edge for capture*/
void ICU_Set_Edge_detection(const ICU_Trigger EDGE_TYPE)
{
     ef0:	df 93       	push	r29
     ef2:	cf 93       	push	r28
     ef4:	0f 92       	push	r0
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	89 83       	std	Y+1, r24	; 0x01
	if(EDGE_TYPE == ICU_FALLING)
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	88 23       	and	r24, r24
     f00:	41 f4       	brne	.+16     	; 0xf12 <ICU_Set_Edge_detection+0x22>
		{
			CLR_BIT(TCCR1B,TCCR1B_ICES1);
     f02:	ae e4       	ldi	r26, 0x4E	; 78
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	ee e4       	ldi	r30, 0x4E	; 78
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	8f 7b       	andi	r24, 0xBF	; 191
     f0e:	8c 93       	st	X, r24
     f10:	0a c0       	rjmp	.+20     	; 0xf26 <ICU_Set_Edge_detection+0x36>

		}
	else if(EDGE_TYPE == ICU_RISING)
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	81 30       	cpi	r24, 0x01	; 1
     f16:	39 f4       	brne	.+14     	; 0xf26 <ICU_Set_Edge_detection+0x36>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
     f18:	ae e4       	ldi	r26, 0x4E	; 78
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	ee e4       	ldi	r30, 0x4E	; 78
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	80 64       	ori	r24, 0x40	; 64
     f24:	8c 93       	st	X, r24

	}
}
     f26:	0f 90       	pop	r0
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <ICU_Get_Captured_value>:
/*get the capture value*/
u16 ICU_Get_Captured_value(void)
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
     f36:	e6 e4       	ldi	r30, 0x46	; 70
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	91 81       	ldd	r25, Z+1	; 0x01
}
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <ICU_Clear_timer_value>:
/*Clear timer1 value to start count from zero*/
void ICU_Clear_timer_value(void)
{
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
	TCNT1=0;
     f4c:	ec e4       	ldi	r30, 0x4C	; 76
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	11 82       	std	Z+1, r1	; 0x01
     f52:	10 82       	st	Z, r1
}
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <ICU_Disable>:
/*function to disable timer1 to stop icu*/
void ICU_Disable(void)
{
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
     f62:	ef e4       	ldi	r30, 0x4F	; 79
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	10 82       	st	Z, r1
	TCCR1B = 0;
     f68:	ee e4       	ldi	r30, 0x4E	; 78
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	10 82       	st	Z, r1
	TCNT1 = 0;
     f6e:	ec e4       	ldi	r30, 0x4C	; 76
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	11 82       	std	Z+1, r1	; 0x01
     f74:	10 82       	st	Z, r1
	ICR1 = 0;
     f76:	e6 e4       	ldi	r30, 0x46	; 70
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	11 82       	std	Z+1, r1	; 0x01
     f7c:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	CLR_BIT(TIMSK,TIMSK_TICIE1);
     f7e:	a9 e5       	ldi	r26, 0x59	; 89
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e9 e5       	ldi	r30, 0x59	; 89
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	8f 7d       	andi	r24, 0xDF	; 223
     f8a:	8c 93       	st	X, r24
}
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <ICU_Set_CallBack>:
/*SET Call back function*/

void ICU_Set_CallBack(void (*ptr_to_func)(void))
{
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	00 d0       	rcall	.+0      	; 0xf98 <ICU_Set_CallBack+0x6>
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	9a 83       	std	Y+2, r25	; 0x02
     f9e:	89 83       	std	Y+1, r24	; 0x01
	ICU_CallBackFun=ptr_to_func;
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	9a 81       	ldd	r25, Y+2	; 0x02
     fa4:	90 93 fd 02 	sts	0x02FD, r25
     fa8:	80 93 fc 02 	sts	0x02FC, r24
}
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	08 95       	ret

00000fb6 <__vector_6>:
ISR(TIMER1_CAPT_vect)
{
     fb6:	1f 92       	push	r1
     fb8:	0f 92       	push	r0
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	0f 92       	push	r0
     fbe:	11 24       	eor	r1, r1
     fc0:	2f 93       	push	r18
     fc2:	3f 93       	push	r19
     fc4:	4f 93       	push	r20
     fc6:	5f 93       	push	r21
     fc8:	6f 93       	push	r22
     fca:	7f 93       	push	r23
     fcc:	8f 93       	push	r24
     fce:	9f 93       	push	r25
     fd0:	af 93       	push	r26
     fd2:	bf 93       	push	r27
     fd4:	ef 93       	push	r30
     fd6:	ff 93       	push	r31
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
	if(ICU_CallBackFun != NULL)
     fe0:	80 91 fc 02 	lds	r24, 0x02FC
     fe4:	90 91 fd 02 	lds	r25, 0x02FD
     fe8:	00 97       	sbiw	r24, 0x00	; 0
     fea:	29 f0       	breq	.+10     	; 0xff6 <__vector_6+0x40>
	{
		ICU_CallBackFun();
     fec:	e0 91 fc 02 	lds	r30, 0x02FC
     ff0:	f0 91 fd 02 	lds	r31, 0x02FD
     ff4:	09 95       	icall
	}
}
     ff6:	cf 91       	pop	r28
     ff8:	df 91       	pop	r29
     ffa:	ff 91       	pop	r31
     ffc:	ef 91       	pop	r30
     ffe:	bf 91       	pop	r27
    1000:	af 91       	pop	r26
    1002:	9f 91       	pop	r25
    1004:	8f 91       	pop	r24
    1006:	7f 91       	pop	r23
    1008:	6f 91       	pop	r22
    100a:	5f 91       	pop	r21
    100c:	4f 91       	pop	r20
    100e:	3f 91       	pop	r19
    1010:	2f 91       	pop	r18
    1012:	0f 90       	pop	r0
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	0f 90       	pop	r0
    1018:	1f 90       	pop	r1
    101a:	18 95       	reti

0000101c <M_void_Timer_Init>:
static u32 No_of_over_flows=0;
static u8 No_of_Remaning=0;
static u32 Global_No_of_overflows=0;

void M_void_Timer_Init(Timer_Mode T_MODE, Wave_Form_Generation WG_M)
{
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	2c 97       	sbiw	r28, 0x0c	; 12
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	f8 94       	cli
    102a:	de bf       	out	0x3e, r29	; 62
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	cd bf       	out	0x3d, r28	; 61
    1030:	89 83       	std	Y+1, r24	; 0x01
    1032:	6a 83       	std	Y+2, r22	; 0x02
	switch(T_MODE)
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	3c 87       	std	Y+12, r19	; 0x0c
    103c:	2b 87       	std	Y+11, r18	; 0x0b
    103e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1040:	9c 85       	ldd	r25, Y+12	; 0x0c
    1042:	81 30       	cpi	r24, 0x01	; 1
    1044:	91 05       	cpc	r25, r1
    1046:	09 f4       	brne	.+2      	; 0x104a <M_void_Timer_Init+0x2e>
    1048:	66 c0       	rjmp	.+204    	; 0x1116 <M_void_Timer_Init+0xfa>
    104a:	2b 85       	ldd	r18, Y+11	; 0x0b
    104c:	3c 85       	ldd	r19, Y+12	; 0x0c
    104e:	22 30       	cpi	r18, 0x02	; 2
    1050:	31 05       	cpc	r19, r1
    1052:	2c f4       	brge	.+10     	; 0x105e <M_void_Timer_Init+0x42>
    1054:	8b 85       	ldd	r24, Y+11	; 0x0b
    1056:	9c 85       	ldd	r25, Y+12	; 0x0c
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	71 f0       	breq	.+28     	; 0x1078 <M_void_Timer_Init+0x5c>
    105c:	23 c1       	rjmp	.+582    	; 0x12a4 <M_void_Timer_Init+0x288>
    105e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1060:	3c 85       	ldd	r19, Y+12	; 0x0c
    1062:	22 30       	cpi	r18, 0x02	; 2
    1064:	31 05       	cpc	r19, r1
    1066:	09 f4       	brne	.+2      	; 0x106a <M_void_Timer_Init+0x4e>
    1068:	a6 c0       	rjmp	.+332    	; 0x11b6 <M_void_Timer_Init+0x19a>
    106a:	8b 85       	ldd	r24, Y+11	; 0x0b
    106c:	9c 85       	ldd	r25, Y+12	; 0x0c
    106e:	83 30       	cpi	r24, 0x03	; 3
    1070:	91 05       	cpc	r25, r1
    1072:	09 f4       	brne	.+2      	; 0x1076 <M_void_Timer_Init+0x5a>
    1074:	dc c0       	rjmp	.+440    	; 0x122e <M_void_Timer_Init+0x212>
    1076:	16 c1       	rjmp	.+556    	; 0x12a4 <M_void_Timer_Init+0x288>
	{
	case Normal_Mode:
		TCCR0 &= CLEAR_TIMER_MODE_REG;
    1078:	a3 e5       	ldi	r26, 0x53	; 83
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e3 e5       	ldi	r30, 0x53	; 83
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	87 7d       	andi	r24, 0xD7	; 215
    1084:	8c 93       	st	X, r24
		TCCR0 |=SET_NORMAL_MODE_MASK;
    1086:	a3 e5       	ldi	r26, 0x53	; 83
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e3 e5       	ldi	r30, 0x53	; 83
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	8c 93       	st	X, r24
		switch(WG_M)
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	3a 87       	std	Y+10, r19	; 0x0a
    109a:	29 87       	std	Y+9, r18	; 0x09
    109c:	89 85       	ldd	r24, Y+9	; 0x09
    109e:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a0:	82 30       	cpi	r24, 0x02	; 2
    10a2:	91 05       	cpc	r25, r1
    10a4:	d1 f0       	breq	.+52     	; 0x10da <M_void_Timer_Init+0xbe>
    10a6:	29 85       	ldd	r18, Y+9	; 0x09
    10a8:	3a 85       	ldd	r19, Y+10	; 0x0a
    10aa:	23 30       	cpi	r18, 0x03	; 3
    10ac:	31 05       	cpc	r19, r1
    10ae:	21 f1       	breq	.+72     	; 0x10f8 <M_void_Timer_Init+0xdc>
    10b0:	89 85       	ldd	r24, Y+9	; 0x09
    10b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b4:	81 30       	cpi	r24, 0x01	; 1
    10b6:	91 05       	cpc	r25, r1
    10b8:	09 f0       	breq	.+2      	; 0x10bc <M_void_Timer_Init+0xa0>
    10ba:	f4 c0       	rjmp	.+488    	; 0x12a4 <M_void_Timer_Init+0x288>
		{
		case Toggle_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    10bc:	a3 e5       	ldi	r26, 0x53	; 83
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e3 e5       	ldi	r30, 0x53	; 83
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	8f 7c       	andi	r24, 0xCF	; 207
    10c8:	8c 93       	st	X, r24
			TCCR0 |= TOGGLE_PORT_MASK;
    10ca:	a3 e5       	ldi	r26, 0x53	; 83
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e3 e5       	ldi	r30, 0x53	; 83
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	80 61       	ori	r24, 0x10	; 16
    10d6:	8c 93       	st	X, r24
    10d8:	e5 c0       	rjmp	.+458    	; 0x12a4 <M_void_Timer_Init+0x288>
			break;
		case Clear_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    10da:	a3 e5       	ldi	r26, 0x53	; 83
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e3 e5       	ldi	r30, 0x53	; 83
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	8f 7c       	andi	r24, 0xCF	; 207
    10e6:	8c 93       	st	X, r24
			TCCR0 |= CLEAR_PORT_MASK;
    10e8:	a3 e5       	ldi	r26, 0x53	; 83
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e3 e5       	ldi	r30, 0x53	; 83
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	80 62       	ori	r24, 0x20	; 32
    10f4:	8c 93       	st	X, r24
    10f6:	d6 c0       	rjmp	.+428    	; 0x12a4 <M_void_Timer_Init+0x288>
			break;
		case Set_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    10f8:	a3 e5       	ldi	r26, 0x53	; 83
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e3 e5       	ldi	r30, 0x53	; 83
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	8f 7c       	andi	r24, 0xCF	; 207
    1104:	8c 93       	st	X, r24
			TCCR0 |= SET_PORT_MASK;
    1106:	a3 e5       	ldi	r26, 0x53	; 83
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e3 e5       	ldi	r30, 0x53	; 83
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	80 63       	ori	r24, 0x30	; 48
    1112:	8c 93       	st	X, r24
    1114:	c7 c0       	rjmp	.+398    	; 0x12a4 <M_void_Timer_Init+0x288>
		default:
			break;
		}
		break;
	case CTC_Mode:
		TCCR0 &= CLEAR_TIMER_MODE_REG;
    1116:	a3 e5       	ldi	r26, 0x53	; 83
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e3 e5       	ldi	r30, 0x53	; 83
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	87 7d       	andi	r24, 0xD7	; 215
    1122:	8c 93       	st	X, r24
		TCCR0 |=SET_CTC_MODE_MASK;
    1124:	a3 e5       	ldi	r26, 0x53	; 83
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e3 e5       	ldi	r30, 0x53	; 83
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	88 60       	ori	r24, 0x08	; 8
    1130:	8c 93       	st	X, r24
		switch(WG_M)
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	38 87       	std	Y+8, r19	; 0x08
    113a:	2f 83       	std	Y+7, r18	; 0x07
    113c:	8f 81       	ldd	r24, Y+7	; 0x07
    113e:	98 85       	ldd	r25, Y+8	; 0x08
    1140:	82 30       	cpi	r24, 0x02	; 2
    1142:	91 05       	cpc	r25, r1
    1144:	d1 f0       	breq	.+52     	; 0x117a <M_void_Timer_Init+0x15e>
    1146:	2f 81       	ldd	r18, Y+7	; 0x07
    1148:	38 85       	ldd	r19, Y+8	; 0x08
    114a:	23 30       	cpi	r18, 0x03	; 3
    114c:	31 05       	cpc	r19, r1
    114e:	21 f1       	breq	.+72     	; 0x1198 <M_void_Timer_Init+0x17c>
    1150:	8f 81       	ldd	r24, Y+7	; 0x07
    1152:	98 85       	ldd	r25, Y+8	; 0x08
    1154:	81 30       	cpi	r24, 0x01	; 1
    1156:	91 05       	cpc	r25, r1
    1158:	09 f0       	breq	.+2      	; 0x115c <M_void_Timer_Init+0x140>
    115a:	a4 c0       	rjmp	.+328    	; 0x12a4 <M_void_Timer_Init+0x288>
		{
		case Toggle_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    115c:	a3 e5       	ldi	r26, 0x53	; 83
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e3 e5       	ldi	r30, 0x53	; 83
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	8f 7c       	andi	r24, 0xCF	; 207
    1168:	8c 93       	st	X, r24
			TCCR0 |= TOGGLE_PORT_MASK;
    116a:	a3 e5       	ldi	r26, 0x53	; 83
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e3 e5       	ldi	r30, 0x53	; 83
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	80 61       	ori	r24, 0x10	; 16
    1176:	8c 93       	st	X, r24
    1178:	95 c0       	rjmp	.+298    	; 0x12a4 <M_void_Timer_Init+0x288>
			break;
		case Clear_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    117a:	a3 e5       	ldi	r26, 0x53	; 83
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e3 e5       	ldi	r30, 0x53	; 83
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	8f 7c       	andi	r24, 0xCF	; 207
    1186:	8c 93       	st	X, r24
			TCCR0 |= CLEAR_PORT_MASK;
    1188:	a3 e5       	ldi	r26, 0x53	; 83
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e3 e5       	ldi	r30, 0x53	; 83
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	80 62       	ori	r24, 0x20	; 32
    1194:	8c 93       	st	X, r24
    1196:	86 c0       	rjmp	.+268    	; 0x12a4 <M_void_Timer_Init+0x288>
			break;
		case Set_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    1198:	a3 e5       	ldi	r26, 0x53	; 83
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e3 e5       	ldi	r30, 0x53	; 83
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	8f 7c       	andi	r24, 0xCF	; 207
    11a4:	8c 93       	st	X, r24
			TCCR0 |= SET_PORT_MASK;
    11a6:	a3 e5       	ldi	r26, 0x53	; 83
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e3 e5       	ldi	r30, 0x53	; 83
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	80 63       	ori	r24, 0x30	; 48
    11b2:	8c 93       	st	X, r24
    11b4:	77 c0       	rjmp	.+238    	; 0x12a4 <M_void_Timer_Init+0x288>
		default:
			break;
		}
		break;
	case Fast_PWM:
		TCCR0 &= CLEAR_TIMER_MODE_REG;
    11b6:	a3 e5       	ldi	r26, 0x53	; 83
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e3 e5       	ldi	r30, 0x53	; 83
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	87 7d       	andi	r24, 0xD7	; 215
    11c2:	8c 93       	st	X, r24
		TCCR0 |=SET_FAST_MODE_MASK;
    11c4:	a3 e5       	ldi	r26, 0x53	; 83
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e3 e5       	ldi	r30, 0x53	; 83
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	88 64       	ori	r24, 0x48	; 72
    11d0:	8c 93       	st	X, r24
		switch(WG_M)
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	3e 83       	std	Y+6, r19	; 0x06
    11da:	2d 83       	std	Y+5, r18	; 0x05
    11dc:	8d 81       	ldd	r24, Y+5	; 0x05
    11de:	9e 81       	ldd	r25, Y+6	; 0x06
    11e0:	84 30       	cpi	r24, 0x04	; 4
    11e2:	91 05       	cpc	r25, r1
    11e4:	31 f0       	breq	.+12     	; 0x11f2 <M_void_Timer_Init+0x1d6>
    11e6:	2d 81       	ldd	r18, Y+5	; 0x05
    11e8:	3e 81       	ldd	r19, Y+6	; 0x06
    11ea:	25 30       	cpi	r18, 0x05	; 5
    11ec:	31 05       	cpc	r19, r1
    11ee:	81 f0       	breq	.+32     	; 0x1210 <M_void_Timer_Init+0x1f4>
    11f0:	59 c0       	rjmp	.+178    	; 0x12a4 <M_void_Timer_Init+0x288>
		{
		case Inverting_Mode:
			TCCR0 &= CLEAR_WAVEG_MASK;
    11f2:	a3 e5       	ldi	r26, 0x53	; 83
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e3 e5       	ldi	r30, 0x53	; 83
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	8f 7c       	andi	r24, 0xCF	; 207
    11fe:	8c 93       	st	X, r24
			TCCR0 |= INVERTING_FAST_MASK;
    1200:	a3 e5       	ldi	r26, 0x53	; 83
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e3 e5       	ldi	r30, 0x53	; 83
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	80 63       	ori	r24, 0x30	; 48
    120c:	8c 93       	st	X, r24
    120e:	4a c0       	rjmp	.+148    	; 0x12a4 <M_void_Timer_Init+0x288>
			break;
		case Non_Invering_Mode:
			TCCR0 &= CLEAR_WAVEG_MASK;
    1210:	a3 e5       	ldi	r26, 0x53	; 83
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e3 e5       	ldi	r30, 0x53	; 83
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	8f 7c       	andi	r24, 0xCF	; 207
    121c:	8c 93       	st	X, r24
			TCCR0 |= NON_INVERTING_FAST_MASK;
    121e:	a3 e5       	ldi	r26, 0x53	; 83
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e3 e5       	ldi	r30, 0x53	; 83
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	80 62       	ori	r24, 0x20	; 32
    122a:	8c 93       	st	X, r24
    122c:	3b c0       	rjmp	.+118    	; 0x12a4 <M_void_Timer_Init+0x288>
		default:
			break;
		}
		break;
	case Phase_Correct_PWM:
		TCCR0 &= CLEAR_TIMER_MODE_REG;
    122e:	a3 e5       	ldi	r26, 0x53	; 83
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e3 e5       	ldi	r30, 0x53	; 83
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	87 7d       	andi	r24, 0xD7	; 215
    123a:	8c 93       	st	X, r24
		TCCR0 |=SET_PWM_PHASE_MODE_MASK;
    123c:	a3 e5       	ldi	r26, 0x53	; 83
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e3 e5       	ldi	r30, 0x53	; 83
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	80 64       	ori	r24, 0x40	; 64
    1248:	8c 93       	st	X, r24
		switch(WG_M)
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	3c 83       	std	Y+4, r19	; 0x04
    1252:	2b 83       	std	Y+3, r18	; 0x03
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	9c 81       	ldd	r25, Y+4	; 0x04
    1258:	84 30       	cpi	r24, 0x04	; 4
    125a:	91 05       	cpc	r25, r1
    125c:	31 f0       	breq	.+12     	; 0x126a <M_void_Timer_Init+0x24e>
    125e:	2b 81       	ldd	r18, Y+3	; 0x03
    1260:	3c 81       	ldd	r19, Y+4	; 0x04
    1262:	25 30       	cpi	r18, 0x05	; 5
    1264:	31 05       	cpc	r19, r1
    1266:	81 f0       	breq	.+32     	; 0x1288 <M_void_Timer_Init+0x26c>
    1268:	1d c0       	rjmp	.+58     	; 0x12a4 <M_void_Timer_Init+0x288>
		{
		case Inverting_Mode:
			TCCR0 &= CLEAR_WAVEG_MASK;
    126a:	a3 e5       	ldi	r26, 0x53	; 83
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e3 e5       	ldi	r30, 0x53	; 83
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	8f 7c       	andi	r24, 0xCF	; 207
    1276:	8c 93       	st	X, r24
			TCCR0 |= INVERTING_PHASE_MASK;
    1278:	a3 e5       	ldi	r26, 0x53	; 83
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e3 e5       	ldi	r30, 0x53	; 83
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	80 63       	ori	r24, 0x30	; 48
    1284:	8c 93       	st	X, r24
    1286:	0e c0       	rjmp	.+28     	; 0x12a4 <M_void_Timer_Init+0x288>
			break;
		case Non_Invering_Mode:
			TCCR0 &= CLEAR_WAVEG_MASK;
    1288:	a3 e5       	ldi	r26, 0x53	; 83
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e3 e5       	ldi	r30, 0x53	; 83
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	8f 7c       	andi	r24, 0xCF	; 207
    1294:	8c 93       	st	X, r24
			TCCR0 |= NON_INVERTING_PHASE_MASK;
    1296:	a3 e5       	ldi	r26, 0x53	; 83
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e3 e5       	ldi	r30, 0x53	; 83
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	80 62       	ori	r24, 0x20	; 32
    12a2:	8c 93       	st	X, r24
		default:
			break;
		}
		break;
	}
}
    12a4:	2c 96       	adiw	r28, 0x0c	; 12
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	f8 94       	cli
    12aa:	de bf       	out	0x3e, r29	; 62
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	cd bf       	out	0x3d, r28	; 61
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <M_void_Timer_start>:
void M_void_Timer_start(PRE_SCALLER Pre_scaller_select)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	0f 92       	push	r0
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
    12c0:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= CLEAR_PRESCALLER_MASK;
    12c2:	a3 e5       	ldi	r26, 0x53	; 83
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e3 e5       	ldi	r30, 0x53	; 83
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	88 7f       	andi	r24, 0xF8	; 248
    12ce:	8c 93       	st	X, r24
	TCCR0 |= Pre_scaller_select;
    12d0:	a3 e5       	ldi	r26, 0x53	; 83
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e3 e5       	ldi	r30, 0x53	; 83
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	90 81       	ld	r25, Z
    12da:	89 81       	ldd	r24, Y+1	; 0x01
    12dc:	89 2b       	or	r24, r25
    12de:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
	*/
}
    12e0:	0f 90       	pop	r0
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <M_void_Timer_stop>:
void M_void_Timer_stop(void)
{
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= CLEAR_PRESCALLER_MASK;
    12f0:	a3 e5       	ldi	r26, 0x53	; 83
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e3 e5       	ldi	r30, 0x53	; 83
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	88 7f       	andi	r24, 0xF8	; 248
    12fc:	8c 93       	st	X, r24
	TCCR0 |= NO_CLK_SOURCE;
    12fe:	a3 e5       	ldi	r26, 0x53	; 83
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e3 e5       	ldi	r30, 0x53	; 83
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	8c 93       	st	X, r24
}
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <Timer_u8__GetCounts>:

u8 Timer_u8__GetCounts(void)
{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    1318:	e2 e5       	ldi	r30, 0x52	; 82
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
}
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <M_void_Timer_Set_Preload>:
void M_void_Timer_Set_Preload(u8 Pre_load)
{
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	0f 92       	push	r0
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0= Pre_load;
    1330:	e2 e5       	ldi	r30, 0x52	; 82
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	80 83       	st	Z, r24
}
    1338:	0f 90       	pop	r0
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	08 95       	ret

00001340 <M_TIMER0_setDelayTimeMilliSec>:

void M_TIMER0_setDelayTimeMilliSec(u32 Local_DelayTime, Timer_Mode Local_Mode, PRE_SCALLER Local_Prescaller)
{
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	ac 97       	sbiw	r28, 0x2c	; 44
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	de bf       	out	0x3e, r29	; 62
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	cd bf       	out	0x3d, r28	; 61
    1354:	6a a3       	std	Y+34, r22	; 0x22
    1356:	7b a3       	std	Y+35, r23	; 0x23
    1358:	8c a3       	std	Y+36, r24	; 0x24
    135a:	9d a3       	std	Y+37, r25	; 0x25
    135c:	4e a3       	std	Y+38, r20	; 0x26
    135e:	2f a3       	std	Y+39, r18	; 0x27
	/*		*/
	u32 Pre_scallers[5]={1,8,64,256,1024};
    1360:	ce 01       	movw	r24, r28
    1362:	0e 96       	adiw	r24, 0x0e	; 14
    1364:	99 a7       	std	Y+41, r25	; 0x29
    1366:	88 a7       	std	Y+40, r24	; 0x28
    1368:	ec e5       	ldi	r30, 0x5C	; 92
    136a:	f2 e0       	ldi	r31, 0x02	; 2
    136c:	fb a7       	std	Y+43, r31	; 0x2b
    136e:	ea a7       	std	Y+42, r30	; 0x2a
    1370:	f4 e1       	ldi	r31, 0x14	; 20
    1372:	fc a7       	std	Y+44, r31	; 0x2c
    1374:	ea a5       	ldd	r30, Y+42	; 0x2a
    1376:	fb a5       	ldd	r31, Y+43	; 0x2b
    1378:	00 80       	ld	r0, Z
    137a:	8a a5       	ldd	r24, Y+42	; 0x2a
    137c:	9b a5       	ldd	r25, Y+43	; 0x2b
    137e:	01 96       	adiw	r24, 0x01	; 1
    1380:	9b a7       	std	Y+43, r25	; 0x2b
    1382:	8a a7       	std	Y+42, r24	; 0x2a
    1384:	e8 a5       	ldd	r30, Y+40	; 0x28
    1386:	f9 a5       	ldd	r31, Y+41	; 0x29
    1388:	00 82       	st	Z, r0
    138a:	88 a5       	ldd	r24, Y+40	; 0x28
    138c:	99 a5       	ldd	r25, Y+41	; 0x29
    138e:	01 96       	adiw	r24, 0x01	; 1
    1390:	99 a7       	std	Y+41, r25	; 0x29
    1392:	88 a7       	std	Y+40, r24	; 0x28
    1394:	9c a5       	ldd	r25, Y+44	; 0x2c
    1396:	91 50       	subi	r25, 0x01	; 1
    1398:	9c a7       	std	Y+44, r25	; 0x2c
    139a:	ec a5       	ldd	r30, Y+44	; 0x2c
    139c:	ee 23       	and	r30, r30
    139e:	51 f7       	brne	.-44     	; 0x1374 <M_TIMER0_setDelayTimeMilliSec+0x34>
	f32 TickTime = (f32)Pre_scallers[Local_Prescaller-1]/ F_CPU;
    13a0:	8f a1       	ldd	r24, Y+39	; 0x27
    13a2:	88 2f       	mov	r24, r24
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	01 97       	sbiw	r24, 0x01	; 1
    13a8:	9c 01       	movw	r18, r24
    13aa:	22 0f       	add	r18, r18
    13ac:	33 1f       	adc	r19, r19
    13ae:	22 0f       	add	r18, r18
    13b0:	33 1f       	adc	r19, r19
    13b2:	ce 01       	movw	r24, r28
    13b4:	01 96       	adiw	r24, 0x01	; 1
    13b6:	82 0f       	add	r24, r18
    13b8:	93 1f       	adc	r25, r19
    13ba:	fc 01       	movw	r30, r24
    13bc:	3d 96       	adiw	r30, 0x0d	; 13
    13be:	80 81       	ld	r24, Z
    13c0:	91 81       	ldd	r25, Z+1	; 0x01
    13c2:	a2 81       	ldd	r26, Z+2	; 0x02
    13c4:	b3 81       	ldd	r27, Z+3	; 0x03
    13c6:	bc 01       	movw	r22, r24
    13c8:	cd 01       	movw	r24, r26
    13ca:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	bc 01       	movw	r22, r24
    13d4:	cd 01       	movw	r24, r26
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	40 e8       	ldi	r20, 0x80	; 128
    13dc:	51 e4       	ldi	r21, 0x41	; 65
    13de:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    13e2:	dc 01       	movw	r26, r24
    13e4:	cb 01       	movw	r24, r22
    13e6:	8a 87       	std	Y+10, r24	; 0x0a
    13e8:	9b 87       	std	Y+11, r25	; 0x0b
    13ea:	ac 87       	std	Y+12, r26	; 0x0c
    13ec:	bd 87       	std	Y+13, r27	; 0x0d
	u32 DesiredTickS = 0;
    13ee:	1e 82       	std	Y+6, r1	; 0x06
    13f0:	1f 82       	std	Y+7, r1	; 0x07
    13f2:	18 86       	std	Y+8, r1	; 0x08
    13f4:	19 86       	std	Y+9, r1	; 0x09
	u32 CTC_Value = 0 ;
    13f6:	1a 82       	std	Y+2, r1	; 0x02
    13f8:	1b 82       	std	Y+3, r1	; 0x03
    13fa:	1c 82       	std	Y+4, r1	; 0x04
    13fc:	1d 82       	std	Y+5, r1	; 0x05
	/* Calculate the desired Tick*/
	 //DesiredTickS = (f32)Local_DelayTime * 1000 / TickTime ;
	 DesiredTickS = (Local_DelayTime*1000000)/TickTime ;
    13fe:	8a a1       	ldd	r24, Y+34	; 0x22
    1400:	9b a1       	ldd	r25, Y+35	; 0x23
    1402:	ac a1       	ldd	r26, Y+36	; 0x24
    1404:	bd a1       	ldd	r27, Y+37	; 0x25
    1406:	20 e4       	ldi	r18, 0x40	; 64
    1408:	32 e4       	ldi	r19, 0x42	; 66
    140a:	4f e0       	ldi	r20, 0x0F	; 15
    140c:	50 e0       	ldi	r21, 0x00	; 0
    140e:	bc 01       	movw	r22, r24
    1410:	cd 01       	movw	r24, r26
    1412:	0e 94 17 23 	call	0x462e	; 0x462e <__mulsi3>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	bc 01       	movw	r22, r24
    141c:	cd 01       	movw	r24, r26
    141e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1422:	dc 01       	movw	r26, r24
    1424:	cb 01       	movw	r24, r22
    1426:	bc 01       	movw	r22, r24
    1428:	cd 01       	movw	r24, r26
    142a:	2a 85       	ldd	r18, Y+10	; 0x0a
    142c:	3b 85       	ldd	r19, Y+11	; 0x0b
    142e:	4c 85       	ldd	r20, Y+12	; 0x0c
    1430:	5d 85       	ldd	r21, Y+13	; 0x0d
    1432:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	bc 01       	movw	r22, r24
    143c:	cd 01       	movw	r24, r26
    143e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	8e 83       	std	Y+6, r24	; 0x06
    1448:	9f 83       	std	Y+7, r25	; 0x07
    144a:	a8 87       	std	Y+8, r26	; 0x08
    144c:	b9 87       	std	Y+9, r27	; 0x09

	 //H_LCD_void_sendIntNum(DesiredTickS);

	if(Local_Mode == Normal_Mode)
    144e:	8e a1       	ldd	r24, Y+38	; 0x26
    1450:	88 23       	and	r24, r24
    1452:	c9 f5       	brne	.+114    	; 0x14c6 <M_TIMER0_setDelayTimeMilliSec+0x186>
	{
		 /*Store the numbers of over flow */
		 No_of_over_flows = DesiredTickS/ 256 ;
    1454:	8e 81       	ldd	r24, Y+6	; 0x06
    1456:	9f 81       	ldd	r25, Y+7	; 0x07
    1458:	a8 85       	ldd	r26, Y+8	; 0x08
    145a:	b9 85       	ldd	r27, Y+9	; 0x09
    145c:	89 2f       	mov	r24, r25
    145e:	9a 2f       	mov	r25, r26
    1460:	ab 2f       	mov	r26, r27
    1462:	bb 27       	eor	r27, r27
    1464:	80 93 02 03 	sts	0x0302, r24
    1468:	90 93 03 03 	sts	0x0303, r25
    146c:	a0 93 04 03 	sts	0x0304, r26
    1470:	b0 93 05 03 	sts	0x0305, r27
		 /* Store the Number of remaining if found */
		 No_of_Remaning = DesiredTickS % 256;
    1474:	8e 81       	ldd	r24, Y+6	; 0x06
    1476:	80 93 06 03 	sts	0x0306, r24
		 /*if there is remaining then start from it */
		 if(DesiredTickS % 256 != 0)
    147a:	8e 81       	ldd	r24, Y+6	; 0x06
    147c:	9f 81       	ldd	r25, Y+7	; 0x07
    147e:	a8 85       	ldd	r26, Y+8	; 0x08
    1480:	b9 85       	ldd	r27, Y+9	; 0x09
    1482:	90 70       	andi	r25, 0x00	; 0
    1484:	a0 70       	andi	r26, 0x00	; 0
    1486:	b0 70       	andi	r27, 0x00	; 0
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	a1 05       	cpc	r26, r1
    148c:	b1 05       	cpc	r27, r1
    148e:	09 f4       	brne	.+2      	; 0x1492 <M_TIMER0_setDelayTimeMilliSec+0x152>
    1490:	57 c0       	rjmp	.+174    	; 0x1540 <M_TIMER0_setDelayTimeMilliSec+0x200>
		 {
			 TCNT0 = 256 - No_of_Remaning ;
    1492:	e2 e5       	ldi	r30, 0x52	; 82
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 91 06 03 	lds	r24, 0x0306
    149a:	81 95       	neg	r24
    149c:	80 83       	st	Z, r24
			 No_of_over_flows ++ ;
    149e:	80 91 02 03 	lds	r24, 0x0302
    14a2:	90 91 03 03 	lds	r25, 0x0303
    14a6:	a0 91 04 03 	lds	r26, 0x0304
    14aa:	b0 91 05 03 	lds	r27, 0x0305
    14ae:	01 96       	adiw	r24, 0x01	; 1
    14b0:	a1 1d       	adc	r26, r1
    14b2:	b1 1d       	adc	r27, r1
    14b4:	80 93 02 03 	sts	0x0302, r24
    14b8:	90 93 03 03 	sts	0x0303, r25
    14bc:	a0 93 04 03 	sts	0x0304, r26
    14c0:	b0 93 05 03 	sts	0x0305, r27
    14c4:	3d c0       	rjmp	.+122    	; 0x1540 <M_TIMER0_setDelayTimeMilliSec+0x200>
		 }

		 //H_LCD_void_gotoXY(2,10);
		// H_LCD_void_sendIntNum(No_of_Remaning);
	}
	else if(Local_Mode == CTC_Mode)
    14c6:	8e a1       	ldd	r24, Y+38	; 0x26
    14c8:	81 30       	cpi	r24, 0x01	; 1
    14ca:	d1 f5       	brne	.+116    	; 0x1540 <M_TIMER0_setDelayTimeMilliSec+0x200>
	{
		CTC_Value = 255 ;
    14cc:	8f ef       	ldi	r24, 0xFF	; 255
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	a0 e0       	ldi	r26, 0x00	; 0
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	8a 83       	std	Y+2, r24	; 0x02
    14d6:	9b 83       	std	Y+3, r25	; 0x03
    14d8:	ac 83       	std	Y+4, r26	; 0x04
    14da:	bd 83       	std	Y+5, r27	; 0x05
		u8 NoOfCompMatch = 0;
    14dc:	19 82       	std	Y+1, r1	; 0x01
    14de:	0b c0       	rjmp	.+22     	; 0x14f6 <M_TIMER0_setDelayTimeMilliSec+0x1b6>

		while(DesiredTickS % CTC_Value)
		{
			CTC_Value -- ;
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	9b 81       	ldd	r25, Y+3	; 0x03
    14e4:	ac 81       	ldd	r26, Y+4	; 0x04
    14e6:	bd 81       	ldd	r27, Y+5	; 0x05
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	a1 09       	sbc	r26, r1
    14ec:	b1 09       	sbc	r27, r1
    14ee:	8a 83       	std	Y+2, r24	; 0x02
    14f0:	9b 83       	std	Y+3, r25	; 0x03
    14f2:	ac 83       	std	Y+4, r26	; 0x04
    14f4:	bd 83       	std	Y+5, r27	; 0x05
	else if(Local_Mode == CTC_Mode)
	{
		CTC_Value = 255 ;
		u8 NoOfCompMatch = 0;

		while(DesiredTickS % CTC_Value)
    14f6:	8e 81       	ldd	r24, Y+6	; 0x06
    14f8:	9f 81       	ldd	r25, Y+7	; 0x07
    14fa:	a8 85       	ldd	r26, Y+8	; 0x08
    14fc:	b9 85       	ldd	r27, Y+9	; 0x09
    14fe:	2a 81       	ldd	r18, Y+2	; 0x02
    1500:	3b 81       	ldd	r19, Y+3	; 0x03
    1502:	4c 81       	ldd	r20, Y+4	; 0x04
    1504:	5d 81       	ldd	r21, Y+5	; 0x05
    1506:	bc 01       	movw	r22, r24
    1508:	cd 01       	movw	r24, r26
    150a:	0e 94 56 23 	call	0x46ac	; 0x46ac <__udivmodsi4>
    150e:	dc 01       	movw	r26, r24
    1510:	cb 01       	movw	r24, r22
    1512:	00 97       	sbiw	r24, 0x00	; 0
    1514:	a1 05       	cpc	r26, r1
    1516:	b1 05       	cpc	r27, r1
    1518:	19 f7       	brne	.-58     	; 0x14e0 <M_TIMER0_setDelayTimeMilliSec+0x1a0>
		{
			CTC_Value -- ;
		}
		NoOfCompMatch = DesiredTickS % CTC_Value ;
    151a:	8e 81       	ldd	r24, Y+6	; 0x06
    151c:	9f 81       	ldd	r25, Y+7	; 0x07
    151e:	a8 85       	ldd	r26, Y+8	; 0x08
    1520:	b9 85       	ldd	r27, Y+9	; 0x09
    1522:	2a 81       	ldd	r18, Y+2	; 0x02
    1524:	3b 81       	ldd	r19, Y+3	; 0x03
    1526:	4c 81       	ldd	r20, Y+4	; 0x04
    1528:	5d 81       	ldd	r21, Y+5	; 0x05
    152a:	bc 01       	movw	r22, r24
    152c:	cd 01       	movw	r24, r26
    152e:	0e 94 56 23 	call	0x46ac	; 0x46ac <__udivmodsi4>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	89 83       	std	Y+1, r24	; 0x01
		OCR0 = NoOfCompMatch;
    1538:	ec e5       	ldi	r30, 0x5C	; 92
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	80 83       	st	Z, r24
	}
	else if(Local_Mode == Fast_PWM)
	{

	}
	M_void_Timer_start(Local_Prescaller);
    1540:	8f a1       	ldd	r24, Y+39	; 0x27
    1542:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <M_void_Timer_start>
}
    1546:	ac 96       	adiw	r28, 0x2c	; 44
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	cd bf       	out	0x3d, r28	; 61
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	08 95       	ret

00001558 <M_void_EnableTIMERInt>:

void M_void_EnableTIMERInt(Timer_Mode T_MODE)
{
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	00 d0       	rcall	.+0      	; 0x155e <M_void_EnableTIMERInt+0x6>
    155e:	0f 92       	push	r0
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	89 83       	std	Y+1, r24	; 0x01
	switch(T_MODE)
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	3b 83       	std	Y+3, r19	; 0x03
    156e:	2a 83       	std	Y+2, r18	; 0x02
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	9b 81       	ldd	r25, Y+3	; 0x03
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	31 f0       	breq	.+12     	; 0x1584 <M_void_EnableTIMERInt+0x2c>
    1578:	2a 81       	ldd	r18, Y+2	; 0x02
    157a:	3b 81       	ldd	r19, Y+3	; 0x03
    157c:	21 30       	cpi	r18, 0x01	; 1
    157e:	31 05       	cpc	r19, r1
    1580:	81 f0       	breq	.+32     	; 0x15a2 <M_void_EnableTIMERInt+0x4a>
    1582:	1d c0       	rjmp	.+58     	; 0x15be <M_void_EnableTIMERInt+0x66>
	{
	case Normal_Mode:
		TIMSK &= NORMAL_MODE_INTERRUPT_CLEAR;
    1584:	a9 e5       	ldi	r26, 0x59	; 89
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e9 e5       	ldi	r30, 0x59	; 89
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	8e 7f       	andi	r24, 0xFE	; 254
    1590:	8c 93       	st	X, r24
		TIMSK |= NORMAL_MODE_INTERRUPT_SET;
    1592:	a9 e5       	ldi	r26, 0x59	; 89
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e9 e5       	ldi	r30, 0x59	; 89
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	81 60       	ori	r24, 0x01	; 1
    159e:	8c 93       	st	X, r24
    15a0:	0e c0       	rjmp	.+28     	; 0x15be <M_void_EnableTIMERInt+0x66>
		break;
	case CTC_Mode:
		TIMSK &= CTC_MODE_INTERRUPT_CLEAR;
    15a2:	a9 e5       	ldi	r26, 0x59	; 89
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e9 e5       	ldi	r30, 0x59	; 89
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	8d 7f       	andi	r24, 0xFD	; 253
    15ae:	8c 93       	st	X, r24
		TIMSK |= CTC_MODE_INTERRUPT_SET;
    15b0:	a9 e5       	ldi	r26, 0x59	; 89
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e9 e5       	ldi	r30, 0x59	; 89
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	82 60       	ori	r24, 0x02	; 2
    15bc:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	cf 91       	pop	r28
    15c6:	df 91       	pop	r29
    15c8:	08 95       	ret

000015ca <M_void_DisableTIMERInt>:
void M_void_DisableTIMERInt(Timer_Mode T_MODE)
{
    15ca:	df 93       	push	r29
    15cc:	cf 93       	push	r28
    15ce:	00 d0       	rcall	.+0      	; 0x15d0 <M_void_DisableTIMERInt+0x6>
    15d0:	0f 92       	push	r0
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	89 83       	std	Y+1, r24	; 0x01
	switch(T_MODE)
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	3b 83       	std	Y+3, r19	; 0x03
    15e0:	2a 83       	std	Y+2, r18	; 0x02
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	9b 81       	ldd	r25, Y+3	; 0x03
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	31 f0       	breq	.+12     	; 0x15f6 <M_void_DisableTIMERInt+0x2c>
    15ea:	2a 81       	ldd	r18, Y+2	; 0x02
    15ec:	3b 81       	ldd	r19, Y+3	; 0x03
    15ee:	21 30       	cpi	r18, 0x01	; 1
    15f0:	31 05       	cpc	r19, r1
    15f2:	79 f0       	breq	.+30     	; 0x1612 <M_void_DisableTIMERInt+0x48>
    15f4:	1b c0       	rjmp	.+54     	; 0x162c <M_void_DisableTIMERInt+0x62>
	{
	case Normal_Mode:
		TIMSK &= NORMAL_MODE_INTERRUPT_CLEAR;
    15f6:	a9 e5       	ldi	r26, 0x59	; 89
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e9 e5       	ldi	r30, 0x59	; 89
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	8e 7f       	andi	r24, 0xFE	; 254
    1602:	8c 93       	st	X, r24
		TIMSK |= NORMAL_MODE_INTERRUPT_RESET;
    1604:	a9 e5       	ldi	r26, 0x59	; 89
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e9 e5       	ldi	r30, 0x59	; 89
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	8c 93       	st	X, r24
    1610:	0d c0       	rjmp	.+26     	; 0x162c <M_void_DisableTIMERInt+0x62>
		break;
	case CTC_Mode:
		TIMSK &= CTC_MODE_INTERRUPT_CLEAR;
    1612:	a9 e5       	ldi	r26, 0x59	; 89
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	e9 e5       	ldi	r30, 0x59	; 89
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	8d 7f       	andi	r24, 0xFD	; 253
    161e:	8c 93       	st	X, r24
		TIMSK |= CTC_MODE_INTERRUPT_RESET;
    1620:	a9 e5       	ldi	r26, 0x59	; 89
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e9 e5       	ldi	r30, 0x59	; 89
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	08 95       	ret

00001638 <M_void_setCallBack>:

void M_void_setCallBack(Timer_Mode T_MODE,void (*Copy_pvINTFunc)(void))
{
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	00 d0       	rcall	.+0      	; 0x163e <M_void_setCallBack+0x6>
    163e:	00 d0       	rcall	.+0      	; 0x1640 <M_void_setCallBack+0x8>
    1640:	0f 92       	push	r0
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	89 83       	std	Y+1, r24	; 0x01
    1648:	7b 83       	std	Y+3, r23	; 0x03
    164a:	6a 83       	std	Y+2, r22	; 0x02
	//u8 Local_u8ErrorStatus=NO_ERROR;
//	u8 Local_u8counter;
	switch(T_MODE)
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	3d 83       	std	Y+5, r19	; 0x05
    1654:	2c 83       	std	Y+4, r18	; 0x04
    1656:	8c 81       	ldd	r24, Y+4	; 0x04
    1658:	9d 81       	ldd	r25, Y+5	; 0x05
    165a:	00 97       	sbiw	r24, 0x00	; 0
    165c:	31 f0       	breq	.+12     	; 0x166a <M_void_setCallBack+0x32>
    165e:	2c 81       	ldd	r18, Y+4	; 0x04
    1660:	3d 81       	ldd	r19, Y+5	; 0x05
    1662:	21 30       	cpi	r18, 0x01	; 1
    1664:	31 05       	cpc	r19, r1
    1666:	61 f0       	breq	.+24     	; 0x1680 <M_void_setCallBack+0x48>
    1668:	15 c0       	rjmp	.+42     	; 0x1694 <M_void_setCallBack+0x5c>
	{
	case Normal_Mode:
		if(Copy_pvINTFunc!= NULL)
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	9b 81       	ldd	r25, Y+3	; 0x03
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	89 f0       	breq	.+34     	; 0x1694 <M_void_setCallBack+0x5c>
		{
			EXTI_ARRCALLBACK2FUNC[0]=Copy_pvINTFunc;
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	9b 81       	ldd	r25, Y+3	; 0x03
    1676:	90 93 ff 02 	sts	0x02FF, r25
    167a:	80 93 fe 02 	sts	0x02FE, r24
    167e:	0a c0       	rjmp	.+20     	; 0x1694 <M_void_setCallBack+0x5c>
		}
		break;
	case CTC_Mode:
		if(Copy_pvINTFunc!= NULL)
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	9b 81       	ldd	r25, Y+3	; 0x03
    1684:	00 97       	sbiw	r24, 0x00	; 0
    1686:	31 f0       	breq	.+12     	; 0x1694 <M_void_setCallBack+0x5c>
		{
			EXTI_ARRCALLBACK2FUNC[1]=Copy_pvINTFunc;
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	9b 81       	ldd	r25, Y+3	; 0x03
    168c:	90 93 01 03 	sts	0x0301, r25
    1690:	80 93 00 03 	sts	0x0300, r24
		}
		break;
	}
}
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    16a4:	1f 92       	push	r1
    16a6:	0f 92       	push	r0
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	0f 92       	push	r0
    16ac:	11 24       	eor	r1, r1
    16ae:	2f 93       	push	r18
    16b0:	3f 93       	push	r19
    16b2:	4f 93       	push	r20
    16b4:	5f 93       	push	r21
    16b6:	6f 93       	push	r22
    16b8:	7f 93       	push	r23
    16ba:	8f 93       	push	r24
    16bc:	9f 93       	push	r25
    16be:	af 93       	push	r26
    16c0:	bf 93       	push	r27
    16c2:	ef 93       	push	r30
    16c4:	ff 93       	push	r31
    16c6:	df 93       	push	r29
    16c8:	cf 93       	push	r28
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
	Global_No_of_overflows++;
    16ce:	80 91 07 03 	lds	r24, 0x0307
    16d2:	90 91 08 03 	lds	r25, 0x0308
    16d6:	a0 91 09 03 	lds	r26, 0x0309
    16da:	b0 91 0a 03 	lds	r27, 0x030A
    16de:	01 96       	adiw	r24, 0x01	; 1
    16e0:	a1 1d       	adc	r26, r1
    16e2:	b1 1d       	adc	r27, r1
    16e4:	80 93 07 03 	sts	0x0307, r24
    16e8:	90 93 08 03 	sts	0x0308, r25
    16ec:	a0 93 09 03 	sts	0x0309, r26
    16f0:	b0 93 0a 03 	sts	0x030A, r27
	if(EXTI_ARRCALLBACK2FUNC[0]!=NULL)
    16f4:	80 91 fe 02 	lds	r24, 0x02FE
    16f8:	90 91 ff 02 	lds	r25, 0x02FF
    16fc:	00 97       	sbiw	r24, 0x00	; 0
    16fe:	41 f1       	breq	.+80     	; 0x1750 <__vector_11+0xac>
	{
		if(Global_No_of_overflows==No_of_over_flows)
    1700:	20 91 07 03 	lds	r18, 0x0307
    1704:	30 91 08 03 	lds	r19, 0x0308
    1708:	40 91 09 03 	lds	r20, 0x0309
    170c:	50 91 0a 03 	lds	r21, 0x030A
    1710:	80 91 02 03 	lds	r24, 0x0302
    1714:	90 91 03 03 	lds	r25, 0x0303
    1718:	a0 91 04 03 	lds	r26, 0x0304
    171c:	b0 91 05 03 	lds	r27, 0x0305
    1720:	28 17       	cp	r18, r24
    1722:	39 07       	cpc	r19, r25
    1724:	4a 07       	cpc	r20, r26
    1726:	5b 07       	cpc	r21, r27
    1728:	99 f4       	brne	.+38     	; 0x1750 <__vector_11+0xac>
		{
			EXTI_ARRCALLBACK2FUNC[0]();
    172a:	e0 91 fe 02 	lds	r30, 0x02FE
    172e:	f0 91 ff 02 	lds	r31, 0x02FF
    1732:	09 95       	icall
			Global_No_of_overflows=0;
    1734:	10 92 07 03 	sts	0x0307, r1
    1738:	10 92 08 03 	sts	0x0308, r1
    173c:	10 92 09 03 	sts	0x0309, r1
    1740:	10 92 0a 03 	sts	0x030A, r1
			TCNT0 = 256 - No_of_Remaning;
    1744:	e2 e5       	ldi	r30, 0x52	; 82
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 91 06 03 	lds	r24, 0x0306
    174c:	81 95       	neg	r24
    174e:	80 83       	st	Z, r24
		}
	}

}
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	ff 91       	pop	r31
    1756:	ef 91       	pop	r30
    1758:	bf 91       	pop	r27
    175a:	af 91       	pop	r26
    175c:	9f 91       	pop	r25
    175e:	8f 91       	pop	r24
    1760:	7f 91       	pop	r23
    1762:	6f 91       	pop	r22
    1764:	5f 91       	pop	r21
    1766:	4f 91       	pop	r20
    1768:	3f 91       	pop	r19
    176a:	2f 91       	pop	r18
    176c:	0f 90       	pop	r0
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	0f 90       	pop	r0
    1772:	1f 90       	pop	r1
    1774:	18 95       	reti

00001776 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
    1776:	1f 92       	push	r1
    1778:	0f 92       	push	r0
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	0f 92       	push	r0
    177e:	11 24       	eor	r1, r1
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62

}
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	0f 90       	pop	r0
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	0f 90       	pop	r0
    1792:	1f 90       	pop	r1
    1794:	18 95       	reti

00001796 <Port_Init>:
  parameters (in)  :
  parameters (out) : none
  Return Value     : void
******************************************/
void Port_Init(const Port_ConfigType * ConfigPtr)
{
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	2b 97       	sbiw	r28, 0x0b	; 11
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	f8 94       	cli
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	cd bf       	out	0x3d, r28	; 61
    17aa:	9d 83       	std	Y+5, r25	; 0x05
    17ac:	8c 83       	std	Y+4, r24	; 0x04

	if(ConfigPtr == NULL)
    17ae:	8c 81       	ldd	r24, Y+4	; 0x04
    17b0:	9d 81       	ldd	r25, Y+5	; 0x05
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	09 f4       	brne	.+2      	; 0x17b8 <Port_Init+0x22>
    17b6:	51 c2       	rjmp	.+1186   	; 0x1c5a <Port_Init+0x4c4>
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<PORT_PINS_CONFIG_ARR_SIZE;i++)
    17b8:	1b 82       	std	Y+3, r1	; 0x03
    17ba:	4b c2       	rjmp	.+1174   	; 0x1c52 <Port_Init+0x4bc>
			{
				Local_pin =(ConfigPtr[i].Port_PinNumber)%10 ;
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	88 2f       	mov	r24, r24
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	9c 01       	movw	r18, r24
    17c4:	22 0f       	add	r18, r18
    17c6:	33 1f       	adc	r19, r19
    17c8:	22 0f       	add	r18, r18
    17ca:	33 1f       	adc	r19, r19
    17cc:	8c 81       	ldd	r24, Y+4	; 0x04
    17ce:	9d 81       	ldd	r25, Y+5	; 0x05
    17d0:	fc 01       	movw	r30, r24
    17d2:	e2 0f       	add	r30, r18
    17d4:	f3 1f       	adc	r31, r19
    17d6:	80 81       	ld	r24, Z
    17d8:	9a e0       	ldi	r25, 0x0A	; 10
    17da:	69 2f       	mov	r22, r25
    17dc:	0e 94 36 23 	call	0x466c	; 0x466c <__udivmodqi4>
    17e0:	89 2f       	mov	r24, r25
    17e2:	8a 83       	std	Y+2, r24	; 0x02
				Local_port =(ConfigPtr[i].Port_PinNumber)/10 ;
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	88 2f       	mov	r24, r24
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	9c 01       	movw	r18, r24
    17ec:	22 0f       	add	r18, r18
    17ee:	33 1f       	adc	r19, r19
    17f0:	22 0f       	add	r18, r18
    17f2:	33 1f       	adc	r19, r19
    17f4:	8c 81       	ldd	r24, Y+4	; 0x04
    17f6:	9d 81       	ldd	r25, Y+5	; 0x05
    17f8:	fc 01       	movw	r30, r24
    17fa:	e2 0f       	add	r30, r18
    17fc:	f3 1f       	adc	r31, r19
    17fe:	80 81       	ld	r24, Z
    1800:	9a e0       	ldi	r25, 0x0A	; 10
    1802:	69 2f       	mov	r22, r25
    1804:	0e 94 36 23 	call	0x466c	; 0x466c <__udivmodqi4>
    1808:	89 83       	std	Y+1, r24	; 0x01
				// step1 : set direction
				if(ConfigPtr[i].Port_PinDirection == PORT_PINDIR_INPUT || ConfigPtr[i].Port_PinDirection ==PORT_PINDIR_OUTPUT)
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	88 2f       	mov	r24, r24
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	9c 01       	movw	r18, r24
    1812:	22 0f       	add	r18, r18
    1814:	33 1f       	adc	r19, r19
    1816:	22 0f       	add	r18, r18
    1818:	33 1f       	adc	r19, r19
    181a:	8c 81       	ldd	r24, Y+4	; 0x04
    181c:	9d 81       	ldd	r25, Y+5	; 0x05
    181e:	fc 01       	movw	r30, r24
    1820:	e2 0f       	add	r30, r18
    1822:	f3 1f       	adc	r31, r19
    1824:	82 81       	ldd	r24, Z+2	; 0x02
    1826:	88 23       	and	r24, r24
    1828:	89 f0       	breq	.+34     	; 0x184c <Port_Init+0xb6>
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	88 2f       	mov	r24, r24
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	9c 01       	movw	r18, r24
    1832:	22 0f       	add	r18, r18
    1834:	33 1f       	adc	r19, r19
    1836:	22 0f       	add	r18, r18
    1838:	33 1f       	adc	r19, r19
    183a:	8c 81       	ldd	r24, Y+4	; 0x04
    183c:	9d 81       	ldd	r25, Y+5	; 0x05
    183e:	fc 01       	movw	r30, r24
    1840:	e2 0f       	add	r30, r18
    1842:	f3 1f       	adc	r31, r19
    1844:	82 81       	ldd	r24, Z+2	; 0x02
    1846:	81 30       	cpi	r24, 0x01	; 1
    1848:	09 f0       	breq	.+2      	; 0x184c <Port_Init+0xb6>
    184a:	00 c2       	rjmp	.+1024   	; 0x1c4c <Port_Init+0x4b6>
				{
					switch(Local_port)
    184c:	89 81       	ldd	r24, Y+1	; 0x01
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	3b 87       	std	Y+11, r19	; 0x0b
    1854:	2a 87       	std	Y+10, r18	; 0x0a
    1856:	6a 85       	ldd	r22, Y+10	; 0x0a
    1858:	7b 85       	ldd	r23, Y+11	; 0x0b
    185a:	62 30       	cpi	r22, 0x02	; 2
    185c:	71 05       	cpc	r23, r1
    185e:	d1 f1       	breq	.+116    	; 0x18d4 <Port_Init+0x13e>
    1860:	8a 85       	ldd	r24, Y+10	; 0x0a
    1862:	9b 85       	ldd	r25, Y+11	; 0x0b
    1864:	83 30       	cpi	r24, 0x03	; 3
    1866:	91 05       	cpc	r25, r1
    1868:	34 f4       	brge	.+12     	; 0x1876 <Port_Init+0xe0>
    186a:	2a 85       	ldd	r18, Y+10	; 0x0a
    186c:	3b 85       	ldd	r19, Y+11	; 0x0b
    186e:	21 30       	cpi	r18, 0x01	; 1
    1870:	31 05       	cpc	r19, r1
    1872:	71 f0       	breq	.+28     	; 0x1890 <Port_Init+0xfa>
    1874:	94 c0       	rjmp	.+296    	; 0x199e <Port_Init+0x208>
    1876:	6a 85       	ldd	r22, Y+10	; 0x0a
    1878:	7b 85       	ldd	r23, Y+11	; 0x0b
    187a:	63 30       	cpi	r22, 0x03	; 3
    187c:	71 05       	cpc	r23, r1
    187e:	09 f4       	brne	.+2      	; 0x1882 <Port_Init+0xec>
    1880:	4b c0       	rjmp	.+150    	; 0x1918 <Port_Init+0x182>
    1882:	8a 85       	ldd	r24, Y+10	; 0x0a
    1884:	9b 85       	ldd	r25, Y+11	; 0x0b
    1886:	84 30       	cpi	r24, 0x04	; 4
    1888:	91 05       	cpc	r25, r1
    188a:	09 f4       	brne	.+2      	; 0x188e <Port_Init+0xf8>
    188c:	67 c0       	rjmp	.+206    	; 0x195c <Port_Init+0x1c6>
    188e:	87 c0       	rjmp	.+270    	; 0x199e <Port_Init+0x208>
					{
					case PORT_PORTA:DDRA_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1890:	aa e3       	ldi	r26, 0x3A	; 58
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	ea e3       	ldi	r30, 0x3A	; 58
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	40 81       	ld	r20, Z
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	88 2f       	mov	r24, r24
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	9c 01       	movw	r18, r24
    18a2:	22 0f       	add	r18, r18
    18a4:	33 1f       	adc	r19, r19
    18a6:	22 0f       	add	r18, r18
    18a8:	33 1f       	adc	r19, r19
    18aa:	8c 81       	ldd	r24, Y+4	; 0x04
    18ac:	9d 81       	ldd	r25, Y+5	; 0x05
    18ae:	fc 01       	movw	r30, r24
    18b0:	e2 0f       	add	r30, r18
    18b2:	f3 1f       	adc	r31, r19
    18b4:	82 81       	ldd	r24, Z+2	; 0x02
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	88 2f       	mov	r24, r24
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	b9 01       	movw	r22, r18
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <Port_Init+0x132>
    18c4:	66 0f       	add	r22, r22
    18c6:	77 1f       	adc	r23, r23
    18c8:	8a 95       	dec	r24
    18ca:	e2 f7       	brpl	.-8      	; 0x18c4 <Port_Init+0x12e>
    18cc:	cb 01       	movw	r24, r22
    18ce:	84 2b       	or	r24, r20
    18d0:	8c 93       	st	X, r24
    18d2:	65 c0       	rjmp	.+202    	; 0x199e <Port_Init+0x208>
					case PORT_PORTB:DDRB_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    18d4:	a7 e3       	ldi	r26, 0x37	; 55
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e7 e3       	ldi	r30, 0x37	; 55
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	40 81       	ld	r20, Z
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	88 2f       	mov	r24, r24
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	9c 01       	movw	r18, r24
    18e6:	22 0f       	add	r18, r18
    18e8:	33 1f       	adc	r19, r19
    18ea:	22 0f       	add	r18, r18
    18ec:	33 1f       	adc	r19, r19
    18ee:	8c 81       	ldd	r24, Y+4	; 0x04
    18f0:	9d 81       	ldd	r25, Y+5	; 0x05
    18f2:	fc 01       	movw	r30, r24
    18f4:	e2 0f       	add	r30, r18
    18f6:	f3 1f       	adc	r31, r19
    18f8:	82 81       	ldd	r24, Z+2	; 0x02
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	88 2f       	mov	r24, r24
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	b9 01       	movw	r22, r18
    1906:	02 c0       	rjmp	.+4      	; 0x190c <Port_Init+0x176>
    1908:	66 0f       	add	r22, r22
    190a:	77 1f       	adc	r23, r23
    190c:	8a 95       	dec	r24
    190e:	e2 f7       	brpl	.-8      	; 0x1908 <Port_Init+0x172>
    1910:	cb 01       	movw	r24, r22
    1912:	84 2b       	or	r24, r20
    1914:	8c 93       	st	X, r24
    1916:	43 c0       	rjmp	.+134    	; 0x199e <Port_Init+0x208>
					case PORT_PORTC:DDRC_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1918:	a4 e3       	ldi	r26, 0x34	; 52
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e4 e3       	ldi	r30, 0x34	; 52
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	40 81       	ld	r20, Z
    1922:	8b 81       	ldd	r24, Y+3	; 0x03
    1924:	88 2f       	mov	r24, r24
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	9c 01       	movw	r18, r24
    192a:	22 0f       	add	r18, r18
    192c:	33 1f       	adc	r19, r19
    192e:	22 0f       	add	r18, r18
    1930:	33 1f       	adc	r19, r19
    1932:	8c 81       	ldd	r24, Y+4	; 0x04
    1934:	9d 81       	ldd	r25, Y+5	; 0x05
    1936:	fc 01       	movw	r30, r24
    1938:	e2 0f       	add	r30, r18
    193a:	f3 1f       	adc	r31, r19
    193c:	82 81       	ldd	r24, Z+2	; 0x02
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	88 2f       	mov	r24, r24
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	b9 01       	movw	r22, r18
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <Port_Init+0x1ba>
    194c:	66 0f       	add	r22, r22
    194e:	77 1f       	adc	r23, r23
    1950:	8a 95       	dec	r24
    1952:	e2 f7       	brpl	.-8      	; 0x194c <Port_Init+0x1b6>
    1954:	cb 01       	movw	r24, r22
    1956:	84 2b       	or	r24, r20
    1958:	8c 93       	st	X, r24
    195a:	21 c0       	rjmp	.+66     	; 0x199e <Port_Init+0x208>
					case PORT_PORTD:DDRD_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    195c:	a1 e3       	ldi	r26, 0x31	; 49
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e1 e3       	ldi	r30, 0x31	; 49
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	40 81       	ld	r20, Z
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	88 2f       	mov	r24, r24
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	9c 01       	movw	r18, r24
    196e:	22 0f       	add	r18, r18
    1970:	33 1f       	adc	r19, r19
    1972:	22 0f       	add	r18, r18
    1974:	33 1f       	adc	r19, r19
    1976:	8c 81       	ldd	r24, Y+4	; 0x04
    1978:	9d 81       	ldd	r25, Y+5	; 0x05
    197a:	fc 01       	movw	r30, r24
    197c:	e2 0f       	add	r30, r18
    197e:	f3 1f       	adc	r31, r19
    1980:	82 81       	ldd	r24, Z+2	; 0x02
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	88 2f       	mov	r24, r24
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	b9 01       	movw	r22, r18
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <Port_Init+0x1fe>
    1990:	66 0f       	add	r22, r22
    1992:	77 1f       	adc	r23, r23
    1994:	8a 95       	dec	r24
    1996:	e2 f7       	brpl	.-8      	; 0x1990 <Port_Init+0x1fa>
    1998:	cb 01       	movw	r24, r22
    199a:	84 2b       	or	r24, r20
    199c:	8c 93       	st	X, r24

					}
					// step 2 : config initial pin value
					if(ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_LOW || ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_HIGH)
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	88 2f       	mov	r24, r24
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	9c 01       	movw	r18, r24
    19a6:	22 0f       	add	r18, r18
    19a8:	33 1f       	adc	r19, r19
    19aa:	22 0f       	add	r18, r18
    19ac:	33 1f       	adc	r19, r19
    19ae:	8c 81       	ldd	r24, Y+4	; 0x04
    19b0:	9d 81       	ldd	r25, Y+5	; 0x05
    19b2:	fc 01       	movw	r30, r24
    19b4:	e2 0f       	add	r30, r18
    19b6:	f3 1f       	adc	r31, r19
    19b8:	81 81       	ldd	r24, Z+1	; 0x01
    19ba:	88 23       	and	r24, r24
    19bc:	89 f0       	breq	.+34     	; 0x19e0 <Port_Init+0x24a>
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	88 2f       	mov	r24, r24
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	9c 01       	movw	r18, r24
    19c6:	22 0f       	add	r18, r18
    19c8:	33 1f       	adc	r19, r19
    19ca:	22 0f       	add	r18, r18
    19cc:	33 1f       	adc	r19, r19
    19ce:	8c 81       	ldd	r24, Y+4	; 0x04
    19d0:	9d 81       	ldd	r25, Y+5	; 0x05
    19d2:	fc 01       	movw	r30, r24
    19d4:	e2 0f       	add	r30, r18
    19d6:	f3 1f       	adc	r31, r19
    19d8:	81 81       	ldd	r24, Z+1	; 0x01
    19da:	81 30       	cpi	r24, 0x01	; 1
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <Port_Init+0x24a>
    19de:	36 c1       	rjmp	.+620    	; 0x1c4c <Port_Init+0x4b6>
					{
						switch(Local_port)
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	39 87       	std	Y+9, r19	; 0x09
    19e8:	28 87       	std	Y+8, r18	; 0x08
    19ea:	68 85       	ldd	r22, Y+8	; 0x08
    19ec:	79 85       	ldd	r23, Y+9	; 0x09
    19ee:	62 30       	cpi	r22, 0x02	; 2
    19f0:	71 05       	cpc	r23, r1
    19f2:	d1 f1       	breq	.+116    	; 0x1a68 <Port_Init+0x2d2>
    19f4:	88 85       	ldd	r24, Y+8	; 0x08
    19f6:	99 85       	ldd	r25, Y+9	; 0x09
    19f8:	83 30       	cpi	r24, 0x03	; 3
    19fa:	91 05       	cpc	r25, r1
    19fc:	34 f4       	brge	.+12     	; 0x1a0a <Port_Init+0x274>
    19fe:	28 85       	ldd	r18, Y+8	; 0x08
    1a00:	39 85       	ldd	r19, Y+9	; 0x09
    1a02:	21 30       	cpi	r18, 0x01	; 1
    1a04:	31 05       	cpc	r19, r1
    1a06:	71 f0       	breq	.+28     	; 0x1a24 <Port_Init+0x28e>
    1a08:	94 c0       	rjmp	.+296    	; 0x1b32 <Port_Init+0x39c>
    1a0a:	68 85       	ldd	r22, Y+8	; 0x08
    1a0c:	79 85       	ldd	r23, Y+9	; 0x09
    1a0e:	63 30       	cpi	r22, 0x03	; 3
    1a10:	71 05       	cpc	r23, r1
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <Port_Init+0x280>
    1a14:	4b c0       	rjmp	.+150    	; 0x1aac <Port_Init+0x316>
    1a16:	88 85       	ldd	r24, Y+8	; 0x08
    1a18:	99 85       	ldd	r25, Y+9	; 0x09
    1a1a:	84 30       	cpi	r24, 0x04	; 4
    1a1c:	91 05       	cpc	r25, r1
    1a1e:	09 f4       	brne	.+2      	; 0x1a22 <Port_Init+0x28c>
    1a20:	67 c0       	rjmp	.+206    	; 0x1af0 <Port_Init+0x35a>
    1a22:	87 c0       	rjmp	.+270    	; 0x1b32 <Port_Init+0x39c>
						{
						case PORT_PORTA:  PORTA_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    1a24:	ab e3       	ldi	r26, 0x3B	; 59
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	eb e3       	ldi	r30, 0x3B	; 59
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	40 81       	ld	r20, Z
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	88 2f       	mov	r24, r24
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	9c 01       	movw	r18, r24
    1a36:	22 0f       	add	r18, r18
    1a38:	33 1f       	adc	r19, r19
    1a3a:	22 0f       	add	r18, r18
    1a3c:	33 1f       	adc	r19, r19
    1a3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a40:	9d 81       	ldd	r25, Y+5	; 0x05
    1a42:	fc 01       	movw	r30, r24
    1a44:	e2 0f       	add	r30, r18
    1a46:	f3 1f       	adc	r31, r19
    1a48:	81 81       	ldd	r24, Z+1	; 0x01
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	88 2f       	mov	r24, r24
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	b9 01       	movw	r22, r18
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <Port_Init+0x2c6>
    1a58:	66 0f       	add	r22, r22
    1a5a:	77 1f       	adc	r23, r23
    1a5c:	8a 95       	dec	r24
    1a5e:	e2 f7       	brpl	.-8      	; 0x1a58 <Port_Init+0x2c2>
    1a60:	cb 01       	movw	r24, r22
    1a62:	84 2b       	or	r24, r20
    1a64:	8c 93       	st	X, r24
    1a66:	65 c0       	rjmp	.+202    	; 0x1b32 <Port_Init+0x39c>
						case PORT_PORTB:  PORTB_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    1a68:	a8 e3       	ldi	r26, 0x38	; 56
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e8 e3       	ldi	r30, 0x38	; 56
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	40 81       	ld	r20, Z
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	88 2f       	mov	r24, r24
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	9c 01       	movw	r18, r24
    1a7a:	22 0f       	add	r18, r18
    1a7c:	33 1f       	adc	r19, r19
    1a7e:	22 0f       	add	r18, r18
    1a80:	33 1f       	adc	r19, r19
    1a82:	8c 81       	ldd	r24, Y+4	; 0x04
    1a84:	9d 81       	ldd	r25, Y+5	; 0x05
    1a86:	fc 01       	movw	r30, r24
    1a88:	e2 0f       	add	r30, r18
    1a8a:	f3 1f       	adc	r31, r19
    1a8c:	81 81       	ldd	r24, Z+1	; 0x01
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	88 2f       	mov	r24, r24
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	b9 01       	movw	r22, r18
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <Port_Init+0x30a>
    1a9c:	66 0f       	add	r22, r22
    1a9e:	77 1f       	adc	r23, r23
    1aa0:	8a 95       	dec	r24
    1aa2:	e2 f7       	brpl	.-8      	; 0x1a9c <Port_Init+0x306>
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	84 2b       	or	r24, r20
    1aa8:	8c 93       	st	X, r24
    1aaa:	43 c0       	rjmp	.+134    	; 0x1b32 <Port_Init+0x39c>
						case PORT_PORTC:  PORTC_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    1aac:	a5 e3       	ldi	r26, 0x35	; 53
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e5 e3       	ldi	r30, 0x35	; 53
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	40 81       	ld	r20, Z
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	88 2f       	mov	r24, r24
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	9c 01       	movw	r18, r24
    1abe:	22 0f       	add	r18, r18
    1ac0:	33 1f       	adc	r19, r19
    1ac2:	22 0f       	add	r18, r18
    1ac4:	33 1f       	adc	r19, r19
    1ac6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aca:	fc 01       	movw	r30, r24
    1acc:	e2 0f       	add	r30, r18
    1ace:	f3 1f       	adc	r31, r19
    1ad0:	81 81       	ldd	r24, Z+1	; 0x01
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	88 2f       	mov	r24, r24
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	b9 01       	movw	r22, r18
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <Port_Init+0x34e>
    1ae0:	66 0f       	add	r22, r22
    1ae2:	77 1f       	adc	r23, r23
    1ae4:	8a 95       	dec	r24
    1ae6:	e2 f7       	brpl	.-8      	; 0x1ae0 <Port_Init+0x34a>
    1ae8:	cb 01       	movw	r24, r22
    1aea:	84 2b       	or	r24, r20
    1aec:	8c 93       	st	X, r24
    1aee:	21 c0       	rjmp	.+66     	; 0x1b32 <Port_Init+0x39c>
						case PORT_PORTD:  PORTD_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    1af0:	a2 e3       	ldi	r26, 0x32	; 50
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	e2 e3       	ldi	r30, 0x32	; 50
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	40 81       	ld	r20, Z
    1afa:	8b 81       	ldd	r24, Y+3	; 0x03
    1afc:	88 2f       	mov	r24, r24
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	9c 01       	movw	r18, r24
    1b02:	22 0f       	add	r18, r18
    1b04:	33 1f       	adc	r19, r19
    1b06:	22 0f       	add	r18, r18
    1b08:	33 1f       	adc	r19, r19
    1b0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b0e:	fc 01       	movw	r30, r24
    1b10:	e2 0f       	add	r30, r18
    1b12:	f3 1f       	adc	r31, r19
    1b14:	81 81       	ldd	r24, Z+1	; 0x01
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	88 2f       	mov	r24, r24
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	b9 01       	movw	r22, r18
    1b22:	02 c0       	rjmp	.+4      	; 0x1b28 <Port_Init+0x392>
    1b24:	66 0f       	add	r22, r22
    1b26:	77 1f       	adc	r23, r23
    1b28:	8a 95       	dec	r24
    1b2a:	e2 f7       	brpl	.-8      	; 0x1b24 <Port_Init+0x38e>
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	84 2b       	or	r24, r20
    1b30:	8c 93       	st	X, r24

						}
						// step 3 : config Pin Internal Attach
						if(ConfigPtr[i].Port_PinDirection==PORT_PINDIR_OUTPUT && ConfigPtr[i].Port_PinInternalAttach == PORT_PIN_IN_ATTATCH_PULLUP)
    1b32:	8b 81       	ldd	r24, Y+3	; 0x03
    1b34:	88 2f       	mov	r24, r24
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	9c 01       	movw	r18, r24
    1b3a:	22 0f       	add	r18, r18
    1b3c:	33 1f       	adc	r19, r19
    1b3e:	22 0f       	add	r18, r18
    1b40:	33 1f       	adc	r19, r19
    1b42:	8c 81       	ldd	r24, Y+4	; 0x04
    1b44:	9d 81       	ldd	r25, Y+5	; 0x05
    1b46:	fc 01       	movw	r30, r24
    1b48:	e2 0f       	add	r30, r18
    1b4a:	f3 1f       	adc	r31, r19
    1b4c:	82 81       	ldd	r24, Z+2	; 0x02
    1b4e:	81 30       	cpi	r24, 0x01	; 1
    1b50:	09 f0       	breq	.+2      	; 0x1b54 <Port_Init+0x3be>
    1b52:	7c c0       	rjmp	.+248    	; 0x1c4c <Port_Init+0x4b6>
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	88 2f       	mov	r24, r24
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	9c 01       	movw	r18, r24
    1b5c:	22 0f       	add	r18, r18
    1b5e:	33 1f       	adc	r19, r19
    1b60:	22 0f       	add	r18, r18
    1b62:	33 1f       	adc	r19, r19
    1b64:	8c 81       	ldd	r24, Y+4	; 0x04
    1b66:	9d 81       	ldd	r25, Y+5	; 0x05
    1b68:	fc 01       	movw	r30, r24
    1b6a:	e2 0f       	add	r30, r18
    1b6c:	f3 1f       	adc	r31, r19
    1b6e:	83 81       	ldd	r24, Z+3	; 0x03
    1b70:	88 23       	and	r24, r24
    1b72:	09 f0       	breq	.+2      	; 0x1b76 <Port_Init+0x3e0>
    1b74:	6b c0       	rjmp	.+214    	; 0x1c4c <Port_Init+0x4b6>
						{
							switch(Local_port)
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	3f 83       	std	Y+7, r19	; 0x07
    1b7e:	2e 83       	std	Y+6, r18	; 0x06
    1b80:	6e 81       	ldd	r22, Y+6	; 0x06
    1b82:	7f 81       	ldd	r23, Y+7	; 0x07
    1b84:	62 30       	cpi	r22, 0x02	; 2
    1b86:	71 05       	cpc	r23, r1
    1b88:	49 f1       	breq	.+82     	; 0x1bdc <Port_Init+0x446>
    1b8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b8e:	83 30       	cpi	r24, 0x03	; 3
    1b90:	91 05       	cpc	r25, r1
    1b92:	34 f4       	brge	.+12     	; 0x1ba0 <Port_Init+0x40a>
    1b94:	2e 81       	ldd	r18, Y+6	; 0x06
    1b96:	3f 81       	ldd	r19, Y+7	; 0x07
    1b98:	21 30       	cpi	r18, 0x01	; 1
    1b9a:	31 05       	cpc	r19, r1
    1b9c:	61 f0       	breq	.+24     	; 0x1bb6 <Port_Init+0x420>
    1b9e:	56 c0       	rjmp	.+172    	; 0x1c4c <Port_Init+0x4b6>
    1ba0:	6e 81       	ldd	r22, Y+6	; 0x06
    1ba2:	7f 81       	ldd	r23, Y+7	; 0x07
    1ba4:	63 30       	cpi	r22, 0x03	; 3
    1ba6:	71 05       	cpc	r23, r1
    1ba8:	61 f1       	breq	.+88     	; 0x1c02 <Port_Init+0x46c>
    1baa:	8e 81       	ldd	r24, Y+6	; 0x06
    1bac:	9f 81       	ldd	r25, Y+7	; 0x07
    1bae:	84 30       	cpi	r24, 0x04	; 4
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	d1 f1       	breq	.+116    	; 0x1c28 <Port_Init+0x492>
    1bb4:	4b c0       	rjmp	.+150    	; 0x1c4c <Port_Init+0x4b6>
							{
							case PORT_PORTA:PORTA_REG |= (u8)(1<< Local_pin);break;
    1bb6:	ab e3       	ldi	r26, 0x3B	; 59
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	eb e3       	ldi	r30, 0x3B	; 59
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	40 81       	ld	r20, Z
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	02 2e       	mov	r0, r18
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <Port_Init+0x43c>
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	0a 94       	dec	r0
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <Port_Init+0x438>
    1bd6:	84 2b       	or	r24, r20
    1bd8:	8c 93       	st	X, r24
    1bda:	38 c0       	rjmp	.+112    	; 0x1c4c <Port_Init+0x4b6>
							case PORT_PORTB:PORTB_REG |= (u8)(1<< Local_pin);break;
    1bdc:	a8 e3       	ldi	r26, 0x38	; 56
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	e8 e3       	ldi	r30, 0x38	; 56
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	40 81       	ld	r20, Z
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	02 2e       	mov	r0, r18
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <Port_Init+0x462>
    1bf4:	88 0f       	add	r24, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	0a 94       	dec	r0
    1bfa:	e2 f7       	brpl	.-8      	; 0x1bf4 <Port_Init+0x45e>
    1bfc:	84 2b       	or	r24, r20
    1bfe:	8c 93       	st	X, r24
    1c00:	25 c0       	rjmp	.+74     	; 0x1c4c <Port_Init+0x4b6>
							case PORT_PORTC:PORTC_REG |= (u8)(1<< Local_pin);break;
    1c02:	a5 e3       	ldi	r26, 0x35	; 53
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	e5 e3       	ldi	r30, 0x35	; 53
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	40 81       	ld	r20, Z
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	28 2f       	mov	r18, r24
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	02 2e       	mov	r0, r18
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <Port_Init+0x488>
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	0a 94       	dec	r0
    1c20:	e2 f7       	brpl	.-8      	; 0x1c1a <Port_Init+0x484>
    1c22:	84 2b       	or	r24, r20
    1c24:	8c 93       	st	X, r24
    1c26:	12 c0       	rjmp	.+36     	; 0x1c4c <Port_Init+0x4b6>
							case PORT_PORTD:PORTD_REG |= (u8)(1<< Local_pin);break;
    1c28:	a2 e3       	ldi	r26, 0x32	; 50
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	e2 e3       	ldi	r30, 0x32	; 50
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	40 81       	ld	r20, Z
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	28 2f       	mov	r18, r24
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	02 2e       	mov	r0, r18
    1c3e:	02 c0       	rjmp	.+4      	; 0x1c44 <Port_Init+0x4ae>
    1c40:	88 0f       	add	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	0a 94       	dec	r0
    1c46:	e2 f7       	brpl	.-8      	; 0x1c40 <Port_Init+0x4aa>
    1c48:	84 2b       	or	r24, r20
    1c4a:	8c 93       	st	X, r24
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<PORT_PINS_CONFIG_ARR_SIZE;i++)
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	8f 5f       	subi	r24, 0xFF	; 255
    1c50:	8b 83       	std	Y+3, r24	; 0x03
    1c52:	8b 81       	ldd	r24, Y+3	; 0x03
    1c54:	80 32       	cpi	r24, 0x20	; 32
    1c56:	08 f4       	brcc	.+2      	; 0x1c5a <Port_Init+0x4c4>
    1c58:	b1 cd       	rjmp	.-1182   	; 0x17bc <Port_Init+0x26>
					//report error
				}

		    }//for
		}//else
}
    1c5a:	2b 96       	adiw	r28, 0x0b	; 11
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	f8 94       	cli
    1c60:	de bf       	out	0x3e, r29	; 62
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	cd bf       	out	0x3d, r28	; 61
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	08 95       	ret

00001c6c <GIE_voidEnable>:
#include"STD_TYPES.h"
#include"BIT_MATH.h"
#include"../Mcu_HW.h"

void GIE_voidEnable(void)
{
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
	//Enable GIE for External interrupt
	SET_BIT(SREG,SREG_I);
    1c74:	af e5       	ldi	r26, 0x5F	; 95
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	ef e5       	ldi	r30, 0x5F	; 95
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	80 68       	ori	r24, 0x80	; 128
    1c80:	8c 93       	st	X, r24
}
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret

00001c88 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
	//Disable GIE for external Interrupt
	CLR_BIT(SREG,SREG_I);
    1c90:	af e5       	ldi	r26, 0x5F	; 95
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	ef e5       	ldi	r30, 0x5F	; 95
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
    1c9a:	8f 77       	andi	r24, 0x7F	; 127
    1c9c:	8c 93       	st	X, r24
}
    1c9e:	cf 91       	pop	r28
    1ca0:	df 91       	pop	r29
    1ca2:	08 95       	ret

00001ca4 <Enable_Int>:
 */
static void (*EXTI_ARRCALLBACK2FUNC[3])(void) ={NULL_POINTER,NULL_POINTER,NULL_POINTER};


void Enable_Int(const EXT_I * ConfigArr)
{
    1ca4:	df 93       	push	r29
    1ca6:	cf 93       	push	r28
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62
    1cac:	2b 97       	sbiw	r28, 0x0b	; 11
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	f8 94       	cli
    1cb2:	de bf       	out	0x3e, r29	; 62
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	cd bf       	out	0x3d, r28	; 61
    1cb8:	9b 83       	std	Y+3, r25	; 0x03
    1cba:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter;
	for(Local_u8Counter=0;Local_u8Counter<3;Local_u8Counter++)
    1cbc:	19 82       	std	Y+1, r1	; 0x01
    1cbe:	0e c1       	rjmp	.+540    	; 0x1edc <Enable_Int+0x238>
	{
		switch(ConfigArr[Local_u8Counter].Interrupt_ID)
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	88 2f       	mov	r24, r24
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	9c 01       	movw	r18, r24
    1cc8:	22 0f       	add	r18, r18
    1cca:	33 1f       	adc	r19, r19
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	e2 0f       	add	r30, r18
    1cd4:	f3 1f       	adc	r31, r19
    1cd6:	80 81       	ld	r24, Z
    1cd8:	28 2f       	mov	r18, r24
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	3b 87       	std	Y+11, r19	; 0x0b
    1cde:	2a 87       	std	Y+10, r18	; 0x0a
    1ce0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ce2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ce4:	81 30       	cpi	r24, 0x01	; 1
    1ce6:	91 05       	cpc	r25, r1
    1ce8:	09 f4       	brne	.+2      	; 0x1cec <Enable_Int+0x48>
    1cea:	4a c0       	rjmp	.+148    	; 0x1d80 <Enable_Int+0xdc>
    1cec:	2a 85       	ldd	r18, Y+10	; 0x0a
    1cee:	3b 85       	ldd	r19, Y+11	; 0x0b
    1cf0:	22 30       	cpi	r18, 0x02	; 2
    1cf2:	31 05       	cpc	r19, r1
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <Enable_Int+0x54>
    1cf6:	b1 c0       	rjmp	.+354    	; 0x1e5a <Enable_Int+0x1b6>
    1cf8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cfa:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cfc:	00 97       	sbiw	r24, 0x00	; 0
    1cfe:	09 f0       	breq	.+2      	; 0x1d02 <Enable_Int+0x5e>
    1d00:	ea c0       	rjmp	.+468    	; 0x1ed6 <Enable_Int+0x232>
		{
		case EXTI0:
			switch(ConfigArr[Local_u8Counter].Trigger_value)
    1d02:	89 81       	ldd	r24, Y+1	; 0x01
    1d04:	88 2f       	mov	r24, r24
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	9c 01       	movw	r18, r24
    1d0a:	22 0f       	add	r18, r18
    1d0c:	33 1f       	adc	r19, r19
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	9b 81       	ldd	r25, Y+3	; 0x03
    1d12:	fc 01       	movw	r30, r24
    1d14:	e2 0f       	add	r30, r18
    1d16:	f3 1f       	adc	r31, r19
    1d18:	81 81       	ldd	r24, Z+1	; 0x01
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	39 87       	std	Y+9, r19	; 0x09
    1d20:	28 87       	std	Y+8, r18	; 0x08
    1d22:	88 85       	ldd	r24, Y+8	; 0x08
    1d24:	99 85       	ldd	r25, Y+9	; 0x09
    1d26:	00 97       	sbiw	r24, 0x00	; 0
    1d28:	31 f0       	breq	.+12     	; 0x1d36 <Enable_Int+0x92>
    1d2a:	28 85       	ldd	r18, Y+8	; 0x08
    1d2c:	39 85       	ldd	r19, Y+9	; 0x09
    1d2e:	21 30       	cpi	r18, 0x01	; 1
    1d30:	31 05       	cpc	r19, r1
    1d32:	81 f0       	breq	.+32     	; 0x1d54 <Enable_Int+0xb0>
    1d34:	1d c0       	rjmp	.+58     	; 0x1d70 <Enable_Int+0xcc>
			{
			case Low_level:
				/*set sense control for INT0 To Low level*/
				CLR_BIT(MCUCR,MCUCR_ISC01);
    1d36:	a5 e5       	ldi	r26, 0x55	; 85
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	e5 e5       	ldi	r30, 0x55	; 85
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	8d 7f       	andi	r24, 0xFD	; 253
    1d42:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC00);
    1d44:	a5 e5       	ldi	r26, 0x55	; 85
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	e5 e5       	ldi	r30, 0x55	; 85
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	8e 7f       	andi	r24, 0xFE	; 254
    1d50:	8c 93       	st	X, r24
    1d52:	0e c0       	rjmp	.+28     	; 0x1d70 <Enable_Int+0xcc>
				break;
			case On_change:
				/*set sense control for INT0 To On change*/
				CLR_BIT(MCUCR,MCUCR_ISC01);
    1d54:	a5 e5       	ldi	r26, 0x55	; 85
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e5 e5       	ldi	r30, 0x55	; 85
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	8d 7f       	andi	r24, 0xFD	; 253
    1d60:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC00);
    1d62:	a5 e5       	ldi	r26, 0x55	; 85
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	e5 e5       	ldi	r30, 0x55	; 85
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	81 60       	ori	r24, 0x01	; 1
    1d6e:	8c 93       	st	X, r24
				break;
			default:
				break;
			}
			/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER ENABLE BIT6*/
			SET_BIT(GICR,GICR_INT0);
    1d70:	ab e5       	ldi	r26, 0x5B	; 91
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	eb e5       	ldi	r30, 0x5B	; 91
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	80 64       	ori	r24, 0x40	; 64
    1d7c:	8c 93       	st	X, r24
    1d7e:	ab c0       	rjmp	.+342    	; 0x1ed6 <Enable_Int+0x232>
			break;
			case EXTI1:
				switch(ConfigArr[Local_u8Counter].Trigger_value)
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	88 2f       	mov	r24, r24
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	9c 01       	movw	r18, r24
    1d88:	22 0f       	add	r18, r18
    1d8a:	33 1f       	adc	r19, r19
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d90:	fc 01       	movw	r30, r24
    1d92:	e2 0f       	add	r30, r18
    1d94:	f3 1f       	adc	r31, r19
    1d96:	81 81       	ldd	r24, Z+1	; 0x01
    1d98:	28 2f       	mov	r18, r24
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	3f 83       	std	Y+7, r19	; 0x07
    1d9e:	2e 83       	std	Y+6, r18	; 0x06
    1da0:	8e 81       	ldd	r24, Y+6	; 0x06
    1da2:	9f 81       	ldd	r25, Y+7	; 0x07
    1da4:	81 30       	cpi	r24, 0x01	; 1
    1da6:	91 05       	cpc	r25, r1
    1da8:	21 f1       	breq	.+72     	; 0x1df2 <Enable_Int+0x14e>
    1daa:	2e 81       	ldd	r18, Y+6	; 0x06
    1dac:	3f 81       	ldd	r19, Y+7	; 0x07
    1dae:	22 30       	cpi	r18, 0x02	; 2
    1db0:	31 05       	cpc	r19, r1
    1db2:	2c f4       	brge	.+10     	; 0x1dbe <Enable_Int+0x11a>
    1db4:	8e 81       	ldd	r24, Y+6	; 0x06
    1db6:	9f 81       	ldd	r25, Y+7	; 0x07
    1db8:	00 97       	sbiw	r24, 0x00	; 0
    1dba:	61 f0       	breq	.+24     	; 0x1dd4 <Enable_Int+0x130>
    1dbc:	46 c0       	rjmp	.+140    	; 0x1e4a <Enable_Int+0x1a6>
    1dbe:	2e 81       	ldd	r18, Y+6	; 0x06
    1dc0:	3f 81       	ldd	r19, Y+7	; 0x07
    1dc2:	22 30       	cpi	r18, 0x02	; 2
    1dc4:	31 05       	cpc	r19, r1
    1dc6:	21 f1       	breq	.+72     	; 0x1e10 <Enable_Int+0x16c>
    1dc8:	8e 81       	ldd	r24, Y+6	; 0x06
    1dca:	9f 81       	ldd	r25, Y+7	; 0x07
    1dcc:	83 30       	cpi	r24, 0x03	; 3
    1dce:	91 05       	cpc	r25, r1
    1dd0:	71 f1       	breq	.+92     	; 0x1e2e <Enable_Int+0x18a>
    1dd2:	3b c0       	rjmp	.+118    	; 0x1e4a <Enable_Int+0x1a6>
				{
				case Low_level:
					/*set sense control for INT0 To falling edge*/
					SET_BIT(MCUCR,MCUCR_ISC01);
    1dd4:	a5 e5       	ldi	r26, 0x55	; 85
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e5 e5       	ldi	r30, 0x55	; 85
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	82 60       	ori	r24, 0x02	; 2
    1de0:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,MCUCR_ISC00);
    1de2:	a5 e5       	ldi	r26, 0x55	; 85
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e5 e5       	ldi	r30, 0x55	; 85
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	8e 7f       	andi	r24, 0xFE	; 254
    1dee:	8c 93       	st	X, r24
    1df0:	2c c0       	rjmp	.+88     	; 0x1e4a <Enable_Int+0x1a6>
					break;
				case On_change:
					/*set sense control for INT0 To On change*/
					CLR_BIT(MCUCR,MCUCR_ISC01);
    1df2:	a5 e5       	ldi	r26, 0x55	; 85
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	e5 e5       	ldi	r30, 0x55	; 85
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	8d 7f       	andi	r24, 0xFD	; 253
    1dfe:	8c 93       	st	X, r24
					SET_BIT(MCUCR,MCUCR_ISC00);
    1e00:	a5 e5       	ldi	r26, 0x55	; 85
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e5 e5       	ldi	r30, 0x55	; 85
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	81 60       	ori	r24, 0x01	; 1
    1e0c:	8c 93       	st	X, r24
    1e0e:	1d c0       	rjmp	.+58     	; 0x1e4a <Enable_Int+0x1a6>
					break;
				case Falling_edge:
					/*set sense control for INT0 To falling edge*/
					SET_BIT(MCUCR,MCUCR_ISC01);
    1e10:	a5 e5       	ldi	r26, 0x55	; 85
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e5 e5       	ldi	r30, 0x55	; 85
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	82 60       	ori	r24, 0x02	; 2
    1e1c:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,MCUCR_ISC00);
    1e1e:	a5 e5       	ldi	r26, 0x55	; 85
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	e5 e5       	ldi	r30, 0x55	; 85
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	8e 7f       	andi	r24, 0xFE	; 254
    1e2a:	8c 93       	st	X, r24
    1e2c:	0e c0       	rjmp	.+28     	; 0x1e4a <Enable_Int+0x1a6>
					break;
				case Rising_edge:
					/*set sense control for INT0 To Rising edge*/
					SET_BIT(MCUCR,MCUCR_ISC01);
    1e2e:	a5 e5       	ldi	r26, 0x55	; 85
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e5 e5       	ldi	r30, 0x55	; 85
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	82 60       	ori	r24, 0x02	; 2
    1e3a:	8c 93       	st	X, r24
					SET_BIT(MCUCR,MCUCR_ISC00);
    1e3c:	a5 e5       	ldi	r26, 0x55	; 85
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	e5 e5       	ldi	r30, 0x55	; 85
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	81 60       	ori	r24, 0x01	; 1
    1e48:	8c 93       	st	X, r24
					break;
				default:
					break;
				}
				/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER ENABLE BIT7*/
				SET_BIT(GICR,GICR_INT1);
    1e4a:	ab e5       	ldi	r26, 0x5B	; 91
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	eb e5       	ldi	r30, 0x5B	; 91
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	80 68       	ori	r24, 0x80	; 128
    1e56:	8c 93       	st	X, r24
    1e58:	3e c0       	rjmp	.+124    	; 0x1ed6 <Enable_Int+0x232>
				break;
				case EXTI2:
					switch(ConfigArr[Local_u8Counter].Trigger_value)
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
    1e5c:	88 2f       	mov	r24, r24
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	9c 01       	movw	r18, r24
    1e62:	22 0f       	add	r18, r18
    1e64:	33 1f       	adc	r19, r19
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	9b 81       	ldd	r25, Y+3	; 0x03
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	e2 0f       	add	r30, r18
    1e6e:	f3 1f       	adc	r31, r19
    1e70:	81 81       	ldd	r24, Z+1	; 0x01
    1e72:	28 2f       	mov	r18, r24
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	3d 83       	std	Y+5, r19	; 0x05
    1e78:	2c 83       	std	Y+4, r18	; 0x04
    1e7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e7e:	00 97       	sbiw	r24, 0x00	; 0
    1e80:	31 f0       	breq	.+12     	; 0x1e8e <Enable_Int+0x1ea>
    1e82:	2c 81       	ldd	r18, Y+4	; 0x04
    1e84:	3d 81       	ldd	r19, Y+5	; 0x05
    1e86:	21 30       	cpi	r18, 0x01	; 1
    1e88:	31 05       	cpc	r19, r1
    1e8a:	81 f0       	breq	.+32     	; 0x1eac <Enable_Int+0x208>
    1e8c:	1d c0       	rjmp	.+58     	; 0x1ec8 <Enable_Int+0x224>
					{
					case Low_level:
						/*set sense control for INT0 To falling edge*/
						SET_BIT(MCUCR,MCUCR_ISC01);
    1e8e:	a5 e5       	ldi	r26, 0x55	; 85
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	e5 e5       	ldi	r30, 0x55	; 85
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	82 60       	ori	r24, 0x02	; 2
    1e9a:	8c 93       	st	X, r24
						CLR_BIT(MCUCR,MCUCR_ISC00);
    1e9c:	a5 e5       	ldi	r26, 0x55	; 85
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	e5 e5       	ldi	r30, 0x55	; 85
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	8e 7f       	andi	r24, 0xFE	; 254
    1ea8:	8c 93       	st	X, r24
    1eaa:	0e c0       	rjmp	.+28     	; 0x1ec8 <Enable_Int+0x224>
						break;
					case On_change:
						/*set sense control for INT0 To On change*/
						CLR_BIT(MCUCR,MCUCR_ISC01);
    1eac:	a5 e5       	ldi	r26, 0x55	; 85
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	e5 e5       	ldi	r30, 0x55	; 85
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	8d 7f       	andi	r24, 0xFD	; 253
    1eb8:	8c 93       	st	X, r24
						SET_BIT(MCUCR,MCUCR_ISC00);
    1eba:	a5 e5       	ldi	r26, 0x55	; 85
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	e5 e5       	ldi	r30, 0x55	; 85
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	81 60       	ori	r24, 0x01	; 1
    1ec6:	8c 93       	st	X, r24
						break;
					default:
						break;
					}
					/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER ENABLE BIT5*/
					SET_BIT(GICR,GICR_INT2);
    1ec8:	ab e5       	ldi	r26, 0x5B	; 91
    1eca:	b0 e0       	ldi	r27, 0x00	; 0
    1ecc:	eb e5       	ldi	r30, 0x5B	; 91
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	80 62       	ori	r24, 0x20	; 32
    1ed4:	8c 93       	st	X, r24


void Enable_Int(const EXT_I * ConfigArr)
{
	u8 Local_u8Counter;
	for(Local_u8Counter=0;Local_u8Counter<3;Local_u8Counter++)
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
    1ed8:	8f 5f       	subi	r24, 0xFF	; 255
    1eda:	89 83       	std	Y+1, r24	; 0x01
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	83 30       	cpi	r24, 0x03	; 3
    1ee0:	08 f4       	brcc	.+2      	; 0x1ee4 <Enable_Int+0x240>
    1ee2:	ee ce       	rjmp	.-548    	; 0x1cc0 <Enable_Int+0x1c>
					SET_BIT(GICR,GICR_INT2);
					break;
		}
	}

}
    1ee4:	2b 96       	adiw	r28, 0x0b	; 11
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	f8 94       	cli
    1eea:	de bf       	out	0x3e, r29	; 62
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	cd bf       	out	0x3d, r28	; 61
    1ef0:	cf 91       	pop	r28
    1ef2:	df 91       	pop	r29
    1ef4:	08 95       	ret

00001ef6 <Disable_Int>:

void Disable_Int(const EXT_I * ConfigArr)
{
    1ef6:	df 93       	push	r29
    1ef8:	cf 93       	push	r28
    1efa:	00 d0       	rcall	.+0      	; 0x1efc <Disable_Int+0x6>
    1efc:	00 d0       	rcall	.+0      	; 0x1efe <Disable_Int+0x8>
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
    1f02:	9a 83       	std	Y+2, r25	; 0x02
    1f04:	89 83       	std	Y+1, r24	; 0x01
	switch(ConfigArr->Interrupt_ID)
    1f06:	e9 81       	ldd	r30, Y+1	; 0x01
    1f08:	fa 81       	ldd	r31, Y+2	; 0x02
    1f0a:	80 81       	ld	r24, Z
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	3c 83       	std	Y+4, r19	; 0x04
    1f12:	2b 83       	std	Y+3, r18	; 0x03
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	9c 81       	ldd	r25, Y+4	; 0x04
    1f18:	81 30       	cpi	r24, 0x01	; 1
    1f1a:	91 05       	cpc	r25, r1
    1f1c:	89 f0       	breq	.+34     	; 0x1f40 <Disable_Int+0x4a>
    1f1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f20:	3c 81       	ldd	r19, Y+4	; 0x04
    1f22:	22 30       	cpi	r18, 0x02	; 2
    1f24:	31 05       	cpc	r19, r1
    1f26:	a1 f0       	breq	.+40     	; 0x1f50 <Disable_Int+0x5a>
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	b9 f4       	brne	.+46     	; 0x1f5e <Disable_Int+0x68>
	{
	case EXTI0:
		/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER DISABLE BIT6*/
		CLR_BIT(GICR,GICR_INT0);
    1f30:	ab e5       	ldi	r26, 0x5B	; 91
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	eb e5       	ldi	r30, 0x5B	; 91
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	8f 7b       	andi	r24, 0xBF	; 191
    1f3c:	8c 93       	st	X, r24
    1f3e:	0f c0       	rjmp	.+30     	; 0x1f5e <Disable_Int+0x68>
		break;
	case EXTI1:
		/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER DISABLE BIT7*/
		CLR_BIT(GICR,GICR_INT1);
    1f40:	ab e5       	ldi	r26, 0x5B	; 91
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	eb e5       	ldi	r30, 0x5B	; 91
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	8f 77       	andi	r24, 0x7F	; 127
    1f4c:	8c 93       	st	X, r24
    1f4e:	07 c0       	rjmp	.+14     	; 0x1f5e <Disable_Int+0x68>
		break;
	case EXTI2:
		/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER DISABLE BIT5*/
		CLR_BIT(GICR,GICR_INT2);
    1f50:	ab e5       	ldi	r26, 0x5B	; 91
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	eb e5       	ldi	r30, 0x5B	; 91
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	8f 7d       	andi	r24, 0xDF	; 223
    1f5c:	8c 93       	st	X, r24
		break;
	}
}
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	08 95       	ret

00001f6c <EXTI_u8INTSetCallBack>:
u8 EXTI_u8INTSetCallBack(const EXT_I * ConfigArr,void (*Copy_pvINTFunc)(void))
{
    1f6c:	df 93       	push	r29
    1f6e:	cf 93       	push	r28
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
    1f74:	28 97       	sbiw	r28, 0x08	; 8
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	f8 94       	cli
    1f7a:	de bf       	out	0x3e, r29	; 62
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	cd bf       	out	0x3d, r28	; 61
    1f80:	9c 83       	std	Y+4, r25	; 0x04
    1f82:	8b 83       	std	Y+3, r24	; 0x03
    1f84:	7e 83       	std	Y+6, r23	; 0x06
    1f86:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8ErrorStatus=NO_ERROR;
    1f88:	82 e0       	ldi	r24, 0x02	; 2
    1f8a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8counter;
	for(Local_u8counter=0;Local_u8counter<3;Local_u8counter++)
    1f8c:	19 82       	std	Y+1, r1	; 0x01
    1f8e:	59 c0       	rjmp	.+178    	; 0x2042 <EXTI_u8INTSetCallBack+0xd6>
	{
		switch(ConfigArr[Local_u8counter].Interrupt_ID)
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	88 2f       	mov	r24, r24
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	9c 01       	movw	r18, r24
    1f98:	22 0f       	add	r18, r18
    1f9a:	33 1f       	adc	r19, r19
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa0:	fc 01       	movw	r30, r24
    1fa2:	e2 0f       	add	r30, r18
    1fa4:	f3 1f       	adc	r31, r19
    1fa6:	80 81       	ld	r24, Z
    1fa8:	28 2f       	mov	r18, r24
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	38 87       	std	Y+8, r19	; 0x08
    1fae:	2f 83       	std	Y+7, r18	; 0x07
    1fb0:	8f 81       	ldd	r24, Y+7	; 0x07
    1fb2:	98 85       	ldd	r25, Y+8	; 0x08
    1fb4:	81 30       	cpi	r24, 0x01	; 1
    1fb6:	91 05       	cpc	r25, r1
    1fb8:	e1 f0       	breq	.+56     	; 0x1ff2 <EXTI_u8INTSetCallBack+0x86>
    1fba:	2f 81       	ldd	r18, Y+7	; 0x07
    1fbc:	38 85       	ldd	r19, Y+8	; 0x08
    1fbe:	22 30       	cpi	r18, 0x02	; 2
    1fc0:	31 05       	cpc	r19, r1
    1fc2:	51 f1       	breq	.+84     	; 0x2018 <EXTI_u8INTSetCallBack+0xac>
    1fc4:	8f 81       	ldd	r24, Y+7	; 0x07
    1fc6:	98 85       	ldd	r25, Y+8	; 0x08
    1fc8:	00 97       	sbiw	r24, 0x00	; 0
    1fca:	c1 f5       	brne	.+112    	; 0x203c <EXTI_u8INTSetCallBack+0xd0>
		{
		case EXTI0:
			if(Copy_pvINTFunc != NULL)
    1fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fce:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd0:	00 97       	sbiw	r24, 0x00	; 0
    1fd2:	69 f0       	breq	.+26     	; 0x1fee <EXTI_u8INTSetCallBack+0x82>
			{
				EXTI_ARRCALLBACK2FUNC[Local_u8counter]=Copy_pvINTFunc;
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	88 2f       	mov	r24, r24
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	88 0f       	add	r24, r24
    1fdc:	99 1f       	adc	r25, r25
    1fde:	fc 01       	movw	r30, r24
    1fe0:	e5 5f       	subi	r30, 0xF5	; 245
    1fe2:	fc 4f       	sbci	r31, 0xFC	; 252
    1fe4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe8:	91 83       	std	Z+1, r25	; 0x01
    1fea:	80 83       	st	Z, r24
    1fec:	27 c0       	rjmp	.+78     	; 0x203c <EXTI_u8INTSetCallBack+0xd0>
			}
			else
			{
				Local_u8ErrorStatus = NULL_POINTER;
    1fee:	1a 82       	std	Y+2, r1	; 0x02
    1ff0:	25 c0       	rjmp	.+74     	; 0x203c <EXTI_u8INTSetCallBack+0xd0>
			}
			break;
		case EXTI1:
			if(Copy_pvINTFunc != NULL)
    1ff2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	69 f0       	breq	.+26     	; 0x2014 <EXTI_u8INTSetCallBack+0xa8>
			{
				EXTI_ARRCALLBACK2FUNC[Local_u8counter]=Copy_pvINTFunc;
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	88 2f       	mov	r24, r24
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	88 0f       	add	r24, r24
    2002:	99 1f       	adc	r25, r25
    2004:	fc 01       	movw	r30, r24
    2006:	e5 5f       	subi	r30, 0xF5	; 245
    2008:	fc 4f       	sbci	r31, 0xFC	; 252
    200a:	8d 81       	ldd	r24, Y+5	; 0x05
    200c:	9e 81       	ldd	r25, Y+6	; 0x06
    200e:	91 83       	std	Z+1, r25	; 0x01
    2010:	80 83       	st	Z, r24
    2012:	14 c0       	rjmp	.+40     	; 0x203c <EXTI_u8INTSetCallBack+0xd0>
			}
			else
			{
				Local_u8ErrorStatus = NULL_POINTER;
    2014:	1a 82       	std	Y+2, r1	; 0x02
    2016:	12 c0       	rjmp	.+36     	; 0x203c <EXTI_u8INTSetCallBack+0xd0>
			}
			break;
		case EXTI2:
			if(Copy_pvINTFunc != NULL)
    2018:	8d 81       	ldd	r24, Y+5	; 0x05
    201a:	9e 81       	ldd	r25, Y+6	; 0x06
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	69 f0       	breq	.+26     	; 0x203a <EXTI_u8INTSetCallBack+0xce>
			{
				EXTI_ARRCALLBACK2FUNC[Local_u8counter]=Copy_pvINTFunc;
    2020:	89 81       	ldd	r24, Y+1	; 0x01
    2022:	88 2f       	mov	r24, r24
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	88 0f       	add	r24, r24
    2028:	99 1f       	adc	r25, r25
    202a:	fc 01       	movw	r30, r24
    202c:	e5 5f       	subi	r30, 0xF5	; 245
    202e:	fc 4f       	sbci	r31, 0xFC	; 252
    2030:	8d 81       	ldd	r24, Y+5	; 0x05
    2032:	9e 81       	ldd	r25, Y+6	; 0x06
    2034:	91 83       	std	Z+1, r25	; 0x01
    2036:	80 83       	st	Z, r24
    2038:	01 c0       	rjmp	.+2      	; 0x203c <EXTI_u8INTSetCallBack+0xd0>
			}
			else
			{
				Local_u8ErrorStatus = NULL_POINTER;
    203a:	1a 82       	std	Y+2, r1	; 0x02
}
u8 EXTI_u8INTSetCallBack(const EXT_I * ConfigArr,void (*Copy_pvINTFunc)(void))
{
	u8 Local_u8ErrorStatus=NO_ERROR;
	u8 Local_u8counter;
	for(Local_u8counter=0;Local_u8counter<3;Local_u8counter++)
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	8f 5f       	subi	r24, 0xFF	; 255
    2040:	89 83       	std	Y+1, r24	; 0x01
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	83 30       	cpi	r24, 0x03	; 3
    2046:	08 f4       	brcc	.+2      	; 0x204a <EXTI_u8INTSetCallBack+0xde>
    2048:	a3 cf       	rjmp	.-186    	; 0x1f90 <EXTI_u8INTSetCallBack+0x24>
			}
			break;
		}
	}

	return Local_u8ErrorStatus;
    204a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    204c:	28 96       	adiw	r28, 0x08	; 8
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	f8 94       	cli
    2052:	de bf       	out	0x3e, r29	; 62
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	cd bf       	out	0x3d, r28	; 61
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <__vector_1>:

ISR(INT0_vect)
{
    205e:	1f 92       	push	r1
    2060:	0f 92       	push	r0
    2062:	0f b6       	in	r0, 0x3f	; 63
    2064:	0f 92       	push	r0
    2066:	11 24       	eor	r1, r1
    2068:	2f 93       	push	r18
    206a:	3f 93       	push	r19
    206c:	4f 93       	push	r20
    206e:	5f 93       	push	r21
    2070:	6f 93       	push	r22
    2072:	7f 93       	push	r23
    2074:	8f 93       	push	r24
    2076:	9f 93       	push	r25
    2078:	af 93       	push	r26
    207a:	bf 93       	push	r27
    207c:	ef 93       	push	r30
    207e:	ff 93       	push	r31
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ARRCALLBACK2FUNC[0] != NULL)
    2088:	80 91 0b 03 	lds	r24, 0x030B
    208c:	90 91 0c 03 	lds	r25, 0x030C
    2090:	00 97       	sbiw	r24, 0x00	; 0
    2092:	29 f0       	breq	.+10     	; 0x209e <__vector_1+0x40>
		{
		EXTI_ARRCALLBACK2FUNC[0]();
    2094:	e0 91 0b 03 	lds	r30, 0x030B
    2098:	f0 91 0c 03 	lds	r31, 0x030C
    209c:	09 95       	icall
		}
		else
		{
			/*Stop*/
		}
}
    209e:	cf 91       	pop	r28
    20a0:	df 91       	pop	r29
    20a2:	ff 91       	pop	r31
    20a4:	ef 91       	pop	r30
    20a6:	bf 91       	pop	r27
    20a8:	af 91       	pop	r26
    20aa:	9f 91       	pop	r25
    20ac:	8f 91       	pop	r24
    20ae:	7f 91       	pop	r23
    20b0:	6f 91       	pop	r22
    20b2:	5f 91       	pop	r21
    20b4:	4f 91       	pop	r20
    20b6:	3f 91       	pop	r19
    20b8:	2f 91       	pop	r18
    20ba:	0f 90       	pop	r0
    20bc:	0f be       	out	0x3f, r0	; 63
    20be:	0f 90       	pop	r0
    20c0:	1f 90       	pop	r1
    20c2:	18 95       	reti

000020c4 <__vector_2>:
ISR(INT1_vect)
{
    20c4:	1f 92       	push	r1
    20c6:	0f 92       	push	r0
    20c8:	0f b6       	in	r0, 0x3f	; 63
    20ca:	0f 92       	push	r0
    20cc:	11 24       	eor	r1, r1
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	cd b7       	in	r28, 0x3d	; 61
    20d4:	de b7       	in	r29, 0x3e	; 62

}
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	0f 90       	pop	r0
    20dc:	0f be       	out	0x3f, r0	; 63
    20de:	0f 90       	pop	r0
    20e0:	1f 90       	pop	r1
    20e2:	18 95       	reti

000020e4 <__vector_3>:
ISR(INT2_vect)
{
    20e4:	1f 92       	push	r1
    20e6:	0f 92       	push	r0
    20e8:	0f b6       	in	r0, 0x3f	; 63
    20ea:	0f 92       	push	r0
    20ec:	11 24       	eor	r1, r1
    20ee:	df 93       	push	r29
    20f0:	cf 93       	push	r28
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62

}
    20f6:	cf 91       	pop	r28
    20f8:	df 91       	pop	r29
    20fa:	0f 90       	pop	r0
    20fc:	0f be       	out	0x3f, r0	; 63
    20fe:	0f 90       	pop	r0
    2100:	1f 90       	pop	r1
    2102:	18 95       	reti

00002104 <M_Dio_en_getPinValue>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : Dio_HIGH or DIO_LOW
******************************************/
Dio_LevelType  M_Dio_en_getPinValue(Dio_ChannelType ChannelId)
{
    2104:	df 93       	push	r29
    2106:	cf 93       	push	r28
    2108:	00 d0       	rcall	.+0      	; 0x210a <M_Dio_en_getPinValue+0x6>
    210a:	00 d0       	rcall	.+0      	; 0x210c <M_Dio_en_getPinValue+0x8>
    210c:	00 d0       	rcall	.+0      	; 0x210e <M_Dio_en_getPinValue+0xa>
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	8c 83       	std	Y+4, r24	; 0x04
	u8 pin = ChannelId % 10;
    2114:	8c 81       	ldd	r24, Y+4	; 0x04
    2116:	9a e0       	ldi	r25, 0x0A	; 10
    2118:	69 2f       	mov	r22, r25
    211a:	0e 94 36 23 	call	0x466c	; 0x466c <__udivmodqi4>
    211e:	89 2f       	mov	r24, r25
    2120:	8b 83       	std	Y+3, r24	; 0x03
	u8 port = ChannelId / 10;
    2122:	8c 81       	ldd	r24, Y+4	; 0x04
    2124:	9a e0       	ldi	r25, 0x0A	; 10
    2126:	69 2f       	mov	r22, r25
    2128:	0e 94 36 23 	call	0x466c	; 0x466c <__udivmodqi4>
    212c:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType Local_levelType;
	switch(port)
    212e:	8a 81       	ldd	r24, Y+2	; 0x02
    2130:	28 2f       	mov	r18, r24
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	3e 83       	std	Y+6, r19	; 0x06
    2136:	2d 83       	std	Y+5, r18	; 0x05
    2138:	4d 81       	ldd	r20, Y+5	; 0x05
    213a:	5e 81       	ldd	r21, Y+6	; 0x06
    213c:	42 30       	cpi	r20, 0x02	; 2
    213e:	51 05       	cpc	r21, r1
    2140:	41 f1       	breq	.+80     	; 0x2192 <M_Dio_en_getPinValue+0x8e>
    2142:	8d 81       	ldd	r24, Y+5	; 0x05
    2144:	9e 81       	ldd	r25, Y+6	; 0x06
    2146:	83 30       	cpi	r24, 0x03	; 3
    2148:	91 05       	cpc	r25, r1
    214a:	34 f4       	brge	.+12     	; 0x2158 <M_Dio_en_getPinValue+0x54>
    214c:	2d 81       	ldd	r18, Y+5	; 0x05
    214e:	3e 81       	ldd	r19, Y+6	; 0x06
    2150:	21 30       	cpi	r18, 0x01	; 1
    2152:	31 05       	cpc	r19, r1
    2154:	61 f0       	breq	.+24     	; 0x216e <M_Dio_en_getPinValue+0x6a>
    2156:	52 c0       	rjmp	.+164    	; 0x21fc <M_Dio_en_getPinValue+0xf8>
    2158:	4d 81       	ldd	r20, Y+5	; 0x05
    215a:	5e 81       	ldd	r21, Y+6	; 0x06
    215c:	43 30       	cpi	r20, 0x03	; 3
    215e:	51 05       	cpc	r21, r1
    2160:	51 f1       	breq	.+84     	; 0x21b6 <M_Dio_en_getPinValue+0xb2>
    2162:	8d 81       	ldd	r24, Y+5	; 0x05
    2164:	9e 81       	ldd	r25, Y+6	; 0x06
    2166:	84 30       	cpi	r24, 0x04	; 4
    2168:	91 05       	cpc	r25, r1
    216a:	b9 f1       	breq	.+110    	; 0x21da <M_Dio_en_getPinValue+0xd6>
    216c:	47 c0       	rjmp	.+142    	; 0x21fc <M_Dio_en_getPinValue+0xf8>
	{
	case DIO_PORTA :Local_levelType = GET_BIT( PINA_REG,pin);break;
    216e:	e9 e3       	ldi	r30, 0x39	; 57
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	28 2f       	mov	r18, r24
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	8b 81       	ldd	r24, Y+3	; 0x03
    217a:	88 2f       	mov	r24, r24
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	a9 01       	movw	r20, r18
    2180:	02 c0       	rjmp	.+4      	; 0x2186 <M_Dio_en_getPinValue+0x82>
    2182:	55 95       	asr	r21
    2184:	47 95       	ror	r20
    2186:	8a 95       	dec	r24
    2188:	e2 f7       	brpl	.-8      	; 0x2182 <M_Dio_en_getPinValue+0x7e>
    218a:	ca 01       	movw	r24, r20
    218c:	81 70       	andi	r24, 0x01	; 1
    218e:	89 83       	std	Y+1, r24	; 0x01
    2190:	35 c0       	rjmp	.+106    	; 0x21fc <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTB :Local_levelType = GET_BIT( PINB_REG,pin);break;
    2192:	e6 e3       	ldi	r30, 0x36	; 54
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	28 2f       	mov	r18, r24
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	8b 81       	ldd	r24, Y+3	; 0x03
    219e:	88 2f       	mov	r24, r24
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	a9 01       	movw	r20, r18
    21a4:	02 c0       	rjmp	.+4      	; 0x21aa <M_Dio_en_getPinValue+0xa6>
    21a6:	55 95       	asr	r21
    21a8:	47 95       	ror	r20
    21aa:	8a 95       	dec	r24
    21ac:	e2 f7       	brpl	.-8      	; 0x21a6 <M_Dio_en_getPinValue+0xa2>
    21ae:	ca 01       	movw	r24, r20
    21b0:	81 70       	andi	r24, 0x01	; 1
    21b2:	89 83       	std	Y+1, r24	; 0x01
    21b4:	23 c0       	rjmp	.+70     	; 0x21fc <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTC :Local_levelType = GET_BIT( PINC_REG,pin);break;
    21b6:	e3 e3       	ldi	r30, 0x33	; 51
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	28 2f       	mov	r18, r24
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	8b 81       	ldd	r24, Y+3	; 0x03
    21c2:	88 2f       	mov	r24, r24
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	a9 01       	movw	r20, r18
    21c8:	02 c0       	rjmp	.+4      	; 0x21ce <M_Dio_en_getPinValue+0xca>
    21ca:	55 95       	asr	r21
    21cc:	47 95       	ror	r20
    21ce:	8a 95       	dec	r24
    21d0:	e2 f7       	brpl	.-8      	; 0x21ca <M_Dio_en_getPinValue+0xc6>
    21d2:	ca 01       	movw	r24, r20
    21d4:	81 70       	andi	r24, 0x01	; 1
    21d6:	89 83       	std	Y+1, r24	; 0x01
    21d8:	11 c0       	rjmp	.+34     	; 0x21fc <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTD :Local_levelType = GET_BIT( PIND_REG,pin);break;
    21da:	e0 e3       	ldi	r30, 0x30	; 48
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	28 2f       	mov	r18, r24
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	88 2f       	mov	r24, r24
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	a9 01       	movw	r20, r18
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <M_Dio_en_getPinValue+0xee>
    21ee:	55 95       	asr	r21
    21f0:	47 95       	ror	r20
    21f2:	8a 95       	dec	r24
    21f4:	e2 f7       	brpl	.-8      	; 0x21ee <M_Dio_en_getPinValue+0xea>
    21f6:	ca 01       	movw	r24, r20
    21f8:	81 70       	andi	r24, 0x01	; 1
    21fa:	89 83       	std	Y+1, r24	; 0x01
	}
    return Local_levelType ;
    21fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    21fe:	26 96       	adiw	r28, 0x06	; 6
    2200:	0f b6       	in	r0, 0x3f	; 63
    2202:	f8 94       	cli
    2204:	de bf       	out	0x3e, r29	; 62
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	cd bf       	out	0x3d, r28	; 61
    220a:	cf 91       	pop	r28
    220c:	df 91       	pop	r29
    220e:	08 95       	ret

00002210 <M_Dio_void_setPinValue>:
  parameters (in)  :  channelId (pin) ,Level (Dio_HIGH or Dio_LOW)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPinValue(Dio_ChannelType ChannelId,Dio_LevelType Level)
{
    2210:	df 93       	push	r29
    2212:	cf 93       	push	r28
    2214:	cd b7       	in	r28, 0x3d	; 61
    2216:	de b7       	in	r29, 0x3e	; 62
    2218:	28 97       	sbiw	r28, 0x08	; 8
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	cd bf       	out	0x3d, r28	; 61
    2224:	8b 83       	std	Y+3, r24	; 0x03
    2226:	6c 83       	std	Y+4, r22	; 0x04
	u8 pin = ChannelId % 10;
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	9a e0       	ldi	r25, 0x0A	; 10
    222c:	69 2f       	mov	r22, r25
    222e:	0e 94 36 23 	call	0x466c	; 0x466c <__udivmodqi4>
    2232:	89 2f       	mov	r24, r25
    2234:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = ChannelId / 10;
    2236:	8b 81       	ldd	r24, Y+3	; 0x03
    2238:	9a e0       	ldi	r25, 0x0A	; 10
    223a:	69 2f       	mov	r22, r25
    223c:	0e 94 36 23 	call	0x466c	; 0x466c <__udivmodqi4>
    2240:	89 83       	std	Y+1, r24	; 0x01

	if(Level == DIO_HIGH)
    2242:	8c 81       	ldd	r24, Y+4	; 0x04
    2244:	81 30       	cpi	r24, 0x01	; 1
    2246:	09 f0       	breq	.+2      	; 0x224a <M_Dio_void_setPinValue+0x3a>
    2248:	70 c0       	rjmp	.+224    	; 0x232a <M_Dio_void_setPinValue+0x11a>
	{
		switch(port)
    224a:	89 81       	ldd	r24, Y+1	; 0x01
    224c:	28 2f       	mov	r18, r24
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	38 87       	std	Y+8, r19	; 0x08
    2252:	2f 83       	std	Y+7, r18	; 0x07
    2254:	8f 81       	ldd	r24, Y+7	; 0x07
    2256:	98 85       	ldd	r25, Y+8	; 0x08
    2258:	82 30       	cpi	r24, 0x02	; 2
    225a:	91 05       	cpc	r25, r1
    225c:	51 f1       	breq	.+84     	; 0x22b2 <M_Dio_void_setPinValue+0xa2>
    225e:	2f 81       	ldd	r18, Y+7	; 0x07
    2260:	38 85       	ldd	r19, Y+8	; 0x08
    2262:	23 30       	cpi	r18, 0x03	; 3
    2264:	31 05       	cpc	r19, r1
    2266:	34 f4       	brge	.+12     	; 0x2274 <M_Dio_void_setPinValue+0x64>
    2268:	8f 81       	ldd	r24, Y+7	; 0x07
    226a:	98 85       	ldd	r25, Y+8	; 0x08
    226c:	81 30       	cpi	r24, 0x01	; 1
    226e:	91 05       	cpc	r25, r1
    2270:	61 f0       	breq	.+24     	; 0x228a <M_Dio_void_setPinValue+0x7a>
    2272:	d3 c0       	rjmp	.+422    	; 0x241a <M_Dio_void_setPinValue+0x20a>
    2274:	2f 81       	ldd	r18, Y+7	; 0x07
    2276:	38 85       	ldd	r19, Y+8	; 0x08
    2278:	23 30       	cpi	r18, 0x03	; 3
    227a:	31 05       	cpc	r19, r1
    227c:	71 f1       	breq	.+92     	; 0x22da <M_Dio_void_setPinValue+0xca>
    227e:	8f 81       	ldd	r24, Y+7	; 0x07
    2280:	98 85       	ldd	r25, Y+8	; 0x08
    2282:	84 30       	cpi	r24, 0x04	; 4
    2284:	91 05       	cpc	r25, r1
    2286:	e9 f1       	breq	.+122    	; 0x2302 <M_Dio_void_setPinValue+0xf2>
    2288:	c8 c0       	rjmp	.+400    	; 0x241a <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : SET_BIT( PORTA_REG,pin);break;
    228a:	ab e3       	ldi	r26, 0x3B	; 59
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	eb e3       	ldi	r30, 0x3B	; 59
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 81       	ld	r24, Z
    2294:	48 2f       	mov	r20, r24
    2296:	8a 81       	ldd	r24, Y+2	; 0x02
    2298:	28 2f       	mov	r18, r24
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	02 2e       	mov	r0, r18
    22a2:	02 c0       	rjmp	.+4      	; 0x22a8 <M_Dio_void_setPinValue+0x98>
    22a4:	88 0f       	add	r24, r24
    22a6:	99 1f       	adc	r25, r25
    22a8:	0a 94       	dec	r0
    22aa:	e2 f7       	brpl	.-8      	; 0x22a4 <M_Dio_void_setPinValue+0x94>
    22ac:	84 2b       	or	r24, r20
    22ae:	8c 93       	st	X, r24
    22b0:	b4 c0       	rjmp	.+360    	; 0x241a <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : SET_BIT( PORTB_REG,pin);break;
    22b2:	a8 e3       	ldi	r26, 0x38	; 56
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	e8 e3       	ldi	r30, 0x38	; 56
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	48 2f       	mov	r20, r24
    22be:	8a 81       	ldd	r24, Y+2	; 0x02
    22c0:	28 2f       	mov	r18, r24
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	02 2e       	mov	r0, r18
    22ca:	02 c0       	rjmp	.+4      	; 0x22d0 <M_Dio_void_setPinValue+0xc0>
    22cc:	88 0f       	add	r24, r24
    22ce:	99 1f       	adc	r25, r25
    22d0:	0a 94       	dec	r0
    22d2:	e2 f7       	brpl	.-8      	; 0x22cc <M_Dio_void_setPinValue+0xbc>
    22d4:	84 2b       	or	r24, r20
    22d6:	8c 93       	st	X, r24
    22d8:	a0 c0       	rjmp	.+320    	; 0x241a <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : SET_BIT( PORTC_REG,pin);break;
    22da:	a5 e3       	ldi	r26, 0x35	; 53
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	e5 e3       	ldi	r30, 0x35	; 53
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	48 2f       	mov	r20, r24
    22e6:	8a 81       	ldd	r24, Y+2	; 0x02
    22e8:	28 2f       	mov	r18, r24
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	02 2e       	mov	r0, r18
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <M_Dio_void_setPinValue+0xe8>
    22f4:	88 0f       	add	r24, r24
    22f6:	99 1f       	adc	r25, r25
    22f8:	0a 94       	dec	r0
    22fa:	e2 f7       	brpl	.-8      	; 0x22f4 <M_Dio_void_setPinValue+0xe4>
    22fc:	84 2b       	or	r24, r20
    22fe:	8c 93       	st	X, r24
    2300:	8c c0       	rjmp	.+280    	; 0x241a <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : SET_BIT( PORTD_REG,pin);break;
    2302:	a2 e3       	ldi	r26, 0x32	; 50
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	e2 e3       	ldi	r30, 0x32	; 50
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	48 2f       	mov	r20, r24
    230e:	8a 81       	ldd	r24, Y+2	; 0x02
    2310:	28 2f       	mov	r18, r24
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	02 2e       	mov	r0, r18
    231a:	02 c0       	rjmp	.+4      	; 0x2320 <M_Dio_void_setPinValue+0x110>
    231c:	88 0f       	add	r24, r24
    231e:	99 1f       	adc	r25, r25
    2320:	0a 94       	dec	r0
    2322:	e2 f7       	brpl	.-8      	; 0x231c <M_Dio_void_setPinValue+0x10c>
    2324:	84 2b       	or	r24, r20
    2326:	8c 93       	st	X, r24
    2328:	78 c0       	rjmp	.+240    	; 0x241a <M_Dio_void_setPinValue+0x20a>
		}

	}
	else if (Level == DIO_LOW)
    232a:	8c 81       	ldd	r24, Y+4	; 0x04
    232c:	88 23       	and	r24, r24
    232e:	09 f0       	breq	.+2      	; 0x2332 <M_Dio_void_setPinValue+0x122>
    2330:	74 c0       	rjmp	.+232    	; 0x241a <M_Dio_void_setPinValue+0x20a>
	{
		switch(port)
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	28 2f       	mov	r18, r24
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	3e 83       	std	Y+6, r19	; 0x06
    233a:	2d 83       	std	Y+5, r18	; 0x05
    233c:	8d 81       	ldd	r24, Y+5	; 0x05
    233e:	9e 81       	ldd	r25, Y+6	; 0x06
    2340:	82 30       	cpi	r24, 0x02	; 2
    2342:	91 05       	cpc	r25, r1
    2344:	61 f1       	breq	.+88     	; 0x239e <M_Dio_void_setPinValue+0x18e>
    2346:	2d 81       	ldd	r18, Y+5	; 0x05
    2348:	3e 81       	ldd	r19, Y+6	; 0x06
    234a:	23 30       	cpi	r18, 0x03	; 3
    234c:	31 05       	cpc	r19, r1
    234e:	34 f4       	brge	.+12     	; 0x235c <M_Dio_void_setPinValue+0x14c>
    2350:	8d 81       	ldd	r24, Y+5	; 0x05
    2352:	9e 81       	ldd	r25, Y+6	; 0x06
    2354:	81 30       	cpi	r24, 0x01	; 1
    2356:	91 05       	cpc	r25, r1
    2358:	69 f0       	breq	.+26     	; 0x2374 <M_Dio_void_setPinValue+0x164>
    235a:	5f c0       	rjmp	.+190    	; 0x241a <M_Dio_void_setPinValue+0x20a>
    235c:	2d 81       	ldd	r18, Y+5	; 0x05
    235e:	3e 81       	ldd	r19, Y+6	; 0x06
    2360:	23 30       	cpi	r18, 0x03	; 3
    2362:	31 05       	cpc	r19, r1
    2364:	89 f1       	breq	.+98     	; 0x23c8 <M_Dio_void_setPinValue+0x1b8>
    2366:	8d 81       	ldd	r24, Y+5	; 0x05
    2368:	9e 81       	ldd	r25, Y+6	; 0x06
    236a:	84 30       	cpi	r24, 0x04	; 4
    236c:	91 05       	cpc	r25, r1
    236e:	09 f4       	brne	.+2      	; 0x2372 <M_Dio_void_setPinValue+0x162>
    2370:	40 c0       	rjmp	.+128    	; 0x23f2 <M_Dio_void_setPinValue+0x1e2>
    2372:	53 c0       	rjmp	.+166    	; 0x241a <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : CLR_BIT( PORTA_REG,pin);break;
    2374:	ab e3       	ldi	r26, 0x3B	; 59
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	eb e3       	ldi	r30, 0x3B	; 59
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	48 2f       	mov	r20, r24
    2380:	8a 81       	ldd	r24, Y+2	; 0x02
    2382:	28 2f       	mov	r18, r24
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	02 2e       	mov	r0, r18
    238c:	02 c0       	rjmp	.+4      	; 0x2392 <M_Dio_void_setPinValue+0x182>
    238e:	88 0f       	add	r24, r24
    2390:	99 1f       	adc	r25, r25
    2392:	0a 94       	dec	r0
    2394:	e2 f7       	brpl	.-8      	; 0x238e <M_Dio_void_setPinValue+0x17e>
    2396:	80 95       	com	r24
    2398:	84 23       	and	r24, r20
    239a:	8c 93       	st	X, r24
    239c:	3e c0       	rjmp	.+124    	; 0x241a <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : CLR_BIT( PORTB_REG,pin);break;
    239e:	a8 e3       	ldi	r26, 0x38	; 56
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	e8 e3       	ldi	r30, 0x38	; 56
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	48 2f       	mov	r20, r24
    23aa:	8a 81       	ldd	r24, Y+2	; 0x02
    23ac:	28 2f       	mov	r18, r24
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	02 2e       	mov	r0, r18
    23b6:	02 c0       	rjmp	.+4      	; 0x23bc <M_Dio_void_setPinValue+0x1ac>
    23b8:	88 0f       	add	r24, r24
    23ba:	99 1f       	adc	r25, r25
    23bc:	0a 94       	dec	r0
    23be:	e2 f7       	brpl	.-8      	; 0x23b8 <M_Dio_void_setPinValue+0x1a8>
    23c0:	80 95       	com	r24
    23c2:	84 23       	and	r24, r20
    23c4:	8c 93       	st	X, r24
    23c6:	29 c0       	rjmp	.+82     	; 0x241a <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : CLR_BIT( PORTC_REG,pin);break;
    23c8:	a5 e3       	ldi	r26, 0x35	; 53
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	e5 e3       	ldi	r30, 0x35	; 53
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	48 2f       	mov	r20, r24
    23d4:	8a 81       	ldd	r24, Y+2	; 0x02
    23d6:	28 2f       	mov	r18, r24
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	02 2e       	mov	r0, r18
    23e0:	02 c0       	rjmp	.+4      	; 0x23e6 <M_Dio_void_setPinValue+0x1d6>
    23e2:	88 0f       	add	r24, r24
    23e4:	99 1f       	adc	r25, r25
    23e6:	0a 94       	dec	r0
    23e8:	e2 f7       	brpl	.-8      	; 0x23e2 <M_Dio_void_setPinValue+0x1d2>
    23ea:	80 95       	com	r24
    23ec:	84 23       	and	r24, r20
    23ee:	8c 93       	st	X, r24
    23f0:	14 c0       	rjmp	.+40     	; 0x241a <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : CLR_BIT( PORTD_REG,pin);break;
    23f2:	a2 e3       	ldi	r26, 0x32	; 50
    23f4:	b0 e0       	ldi	r27, 0x00	; 0
    23f6:	e2 e3       	ldi	r30, 0x32	; 50
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	80 81       	ld	r24, Z
    23fc:	48 2f       	mov	r20, r24
    23fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2400:	28 2f       	mov	r18, r24
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	02 2e       	mov	r0, r18
    240a:	02 c0       	rjmp	.+4      	; 0x2410 <M_Dio_void_setPinValue+0x200>
    240c:	88 0f       	add	r24, r24
    240e:	99 1f       	adc	r25, r25
    2410:	0a 94       	dec	r0
    2412:	e2 f7       	brpl	.-8      	; 0x240c <M_Dio_void_setPinValue+0x1fc>
    2414:	80 95       	com	r24
    2416:	84 23       	and	r24, r20
    2418:	8c 93       	st	X, r24
		}

	}

}
    241a:	28 96       	adiw	r28, 0x08	; 8
    241c:	0f b6       	in	r0, 0x3f	; 63
    241e:	f8 94       	cli
    2420:	de bf       	out	0x3e, r29	; 62
    2422:	0f be       	out	0x3f, r0	; 63
    2424:	cd bf       	out	0x3d, r28	; 61
    2426:	cf 91       	pop	r28
    2428:	df 91       	pop	r29
    242a:	08 95       	ret

0000242c <M_Dio_en_getPortValue>:
  parameters (in)  :  PortId
  parameters (out) :  Non
  Return Value     : Dio_PortLevelType
******************************************/
Dio_PortLevelType M_Dio_en_getPortValue(Dio_PortType PortId)
{
    242c:	df 93       	push	r29
    242e:	cf 93       	push	r28
    2430:	00 d0       	rcall	.+0      	; 0x2432 <M_Dio_en_getPortValue+0x6>
    2432:	00 d0       	rcall	.+0      	; 0x2434 <M_Dio_en_getPortValue+0x8>
    2434:	cd b7       	in	r28, 0x3d	; 61
    2436:	de b7       	in	r29, 0x3e	; 62
    2438:	8a 83       	std	Y+2, r24	; 0x02
	Dio_PortLevelType Local_Reading;

	switch( PortId)
    243a:	8a 81       	ldd	r24, Y+2	; 0x02
    243c:	28 2f       	mov	r18, r24
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	3c 83       	std	Y+4, r19	; 0x04
    2442:	2b 83       	std	Y+3, r18	; 0x03
    2444:	8b 81       	ldd	r24, Y+3	; 0x03
    2446:	9c 81       	ldd	r25, Y+4	; 0x04
    2448:	82 30       	cpi	r24, 0x02	; 2
    244a:	91 05       	cpc	r25, r1
    244c:	d9 f0       	breq	.+54     	; 0x2484 <M_Dio_en_getPortValue+0x58>
    244e:	2b 81       	ldd	r18, Y+3	; 0x03
    2450:	3c 81       	ldd	r19, Y+4	; 0x04
    2452:	23 30       	cpi	r18, 0x03	; 3
    2454:	31 05       	cpc	r19, r1
    2456:	34 f4       	brge	.+12     	; 0x2464 <M_Dio_en_getPortValue+0x38>
    2458:	8b 81       	ldd	r24, Y+3	; 0x03
    245a:	9c 81       	ldd	r25, Y+4	; 0x04
    245c:	81 30       	cpi	r24, 0x01	; 1
    245e:	91 05       	cpc	r25, r1
    2460:	61 f0       	breq	.+24     	; 0x247a <M_Dio_en_getPortValue+0x4e>
    2462:	1e c0       	rjmp	.+60     	; 0x24a0 <M_Dio_en_getPortValue+0x74>
    2464:	2b 81       	ldd	r18, Y+3	; 0x03
    2466:	3c 81       	ldd	r19, Y+4	; 0x04
    2468:	23 30       	cpi	r18, 0x03	; 3
    246a:	31 05       	cpc	r19, r1
    246c:	81 f0       	breq	.+32     	; 0x248e <M_Dio_en_getPortValue+0x62>
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	9c 81       	ldd	r25, Y+4	; 0x04
    2472:	84 30       	cpi	r24, 0x04	; 4
    2474:	91 05       	cpc	r25, r1
    2476:	81 f0       	breq	.+32     	; 0x2498 <M_Dio_en_getPortValue+0x6c>
    2478:	13 c0       	rjmp	.+38     	; 0x24a0 <M_Dio_en_getPortValue+0x74>
	{
	case DIO_PORTA :Local_Reading =  PORTA_REG;break;
    247a:	eb e3       	ldi	r30, 0x3B	; 59
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	80 81       	ld	r24, Z
    2480:	89 83       	std	Y+1, r24	; 0x01
    2482:	0e c0       	rjmp	.+28     	; 0x24a0 <M_Dio_en_getPortValue+0x74>
	case DIO_PORTB :Local_Reading =  PORTB_REG;break;
    2484:	e8 e3       	ldi	r30, 0x38	; 56
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	80 81       	ld	r24, Z
    248a:	89 83       	std	Y+1, r24	; 0x01
    248c:	09 c0       	rjmp	.+18     	; 0x24a0 <M_Dio_en_getPortValue+0x74>
	case DIO_PORTC :Local_Reading =  PORTC_REG;break;
    248e:	e5 e3       	ldi	r30, 0x35	; 53
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	89 83       	std	Y+1, r24	; 0x01
    2496:	04 c0       	rjmp	.+8      	; 0x24a0 <M_Dio_en_getPortValue+0x74>
	case DIO_PORTD :Local_Reading =  PORTD_REG;break;
    2498:	e2 e3       	ldi	r30, 0x32	; 50
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	80 81       	ld	r24, Z
    249e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_Reading;
    24a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    24a2:	0f 90       	pop	r0
    24a4:	0f 90       	pop	r0
    24a6:	0f 90       	pop	r0
    24a8:	0f 90       	pop	r0
    24aa:	cf 91       	pop	r28
    24ac:	df 91       	pop	r29
    24ae:	08 95       	ret

000024b0 <M_Dio_void_setPortValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPortValue(Dio_PortType PortId,Dio_PortLevelType Level)
{
    24b0:	df 93       	push	r29
    24b2:	cf 93       	push	r28
    24b4:	00 d0       	rcall	.+0      	; 0x24b6 <M_Dio_void_setPortValue+0x6>
    24b6:	00 d0       	rcall	.+0      	; 0x24b8 <M_Dio_void_setPortValue+0x8>
    24b8:	cd b7       	in	r28, 0x3d	; 61
    24ba:	de b7       	in	r29, 0x3e	; 62
    24bc:	89 83       	std	Y+1, r24	; 0x01
    24be:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortId)
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
    24c2:	28 2f       	mov	r18, r24
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	3c 83       	std	Y+4, r19	; 0x04
    24c8:	2b 83       	std	Y+3, r18	; 0x03
    24ca:	8b 81       	ldd	r24, Y+3	; 0x03
    24cc:	9c 81       	ldd	r25, Y+4	; 0x04
    24ce:	82 30       	cpi	r24, 0x02	; 2
    24d0:	91 05       	cpc	r25, r1
    24d2:	d9 f0       	breq	.+54     	; 0x250a <M_Dio_void_setPortValue+0x5a>
    24d4:	2b 81       	ldd	r18, Y+3	; 0x03
    24d6:	3c 81       	ldd	r19, Y+4	; 0x04
    24d8:	23 30       	cpi	r18, 0x03	; 3
    24da:	31 05       	cpc	r19, r1
    24dc:	34 f4       	brge	.+12     	; 0x24ea <M_Dio_void_setPortValue+0x3a>
    24de:	8b 81       	ldd	r24, Y+3	; 0x03
    24e0:	9c 81       	ldd	r25, Y+4	; 0x04
    24e2:	81 30       	cpi	r24, 0x01	; 1
    24e4:	91 05       	cpc	r25, r1
    24e6:	61 f0       	breq	.+24     	; 0x2500 <M_Dio_void_setPortValue+0x50>
    24e8:	1e c0       	rjmp	.+60     	; 0x2526 <M_Dio_void_setPortValue+0x76>
    24ea:	2b 81       	ldd	r18, Y+3	; 0x03
    24ec:	3c 81       	ldd	r19, Y+4	; 0x04
    24ee:	23 30       	cpi	r18, 0x03	; 3
    24f0:	31 05       	cpc	r19, r1
    24f2:	81 f0       	breq	.+32     	; 0x2514 <M_Dio_void_setPortValue+0x64>
    24f4:	8b 81       	ldd	r24, Y+3	; 0x03
    24f6:	9c 81       	ldd	r25, Y+4	; 0x04
    24f8:	84 30       	cpi	r24, 0x04	; 4
    24fa:	91 05       	cpc	r25, r1
    24fc:	81 f0       	breq	.+32     	; 0x251e <M_Dio_void_setPortValue+0x6e>
    24fe:	13 c0       	rjmp	.+38     	; 0x2526 <M_Dio_void_setPortValue+0x76>
	{
    	case DIO_PORTA : PORTA_REG = Level;break;
    2500:	eb e3       	ldi	r30, 0x3B	; 59
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	8a 81       	ldd	r24, Y+2	; 0x02
    2506:	80 83       	st	Z, r24
    2508:	0e c0       	rjmp	.+28     	; 0x2526 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTB : PORTB_REG = Level;break;
    250a:	e8 e3       	ldi	r30, 0x38	; 56
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	8a 81       	ldd	r24, Y+2	; 0x02
    2510:	80 83       	st	Z, r24
    2512:	09 c0       	rjmp	.+18     	; 0x2526 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTC : PORTC_REG = Level;break;
    2514:	e5 e3       	ldi	r30, 0x35	; 53
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	8a 81       	ldd	r24, Y+2	; 0x02
    251a:	80 83       	st	Z, r24
    251c:	04 c0       	rjmp	.+8      	; 0x2526 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTD : PORTD_REG = Level;break;
    251e:	e2 e3       	ldi	r30, 0x32	; 50
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	8a 81       	ldd	r24, Y+2	; 0x02
    2524:	80 83       	st	Z, r24
	}
}
    2526:	0f 90       	pop	r0
    2528:	0f 90       	pop	r0
    252a:	0f 90       	pop	r0
    252c:	0f 90       	pop	r0
    252e:	cf 91       	pop	r28
    2530:	df 91       	pop	r29
    2532:	08 95       	ret

00002534 <M_Dio_void_togglePinValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_togglePinValue(Dio_ChannelType channelId)
{
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	00 d0       	rcall	.+0      	; 0x253a <M_Dio_void_togglePinValue+0x6>
    253a:	00 d0       	rcall	.+0      	; 0x253c <M_Dio_void_togglePinValue+0x8>
    253c:	0f 92       	push	r0
    253e:	cd b7       	in	r28, 0x3d	; 61
    2540:	de b7       	in	r29, 0x3e	; 62
    2542:	8b 83       	std	Y+3, r24	; 0x03
	u8 pin = channelId % 10;
    2544:	8b 81       	ldd	r24, Y+3	; 0x03
    2546:	9a e0       	ldi	r25, 0x0A	; 10
    2548:	69 2f       	mov	r22, r25
    254a:	0e 94 36 23 	call	0x466c	; 0x466c <__udivmodqi4>
    254e:	89 2f       	mov	r24, r25
    2550:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = channelId/ 10;
    2552:	8b 81       	ldd	r24, Y+3	; 0x03
    2554:	9a e0       	ldi	r25, 0x0A	; 10
    2556:	69 2f       	mov	r22, r25
    2558:	0e 94 36 23 	call	0x466c	; 0x466c <__udivmodqi4>
    255c:	89 83       	std	Y+1, r24	; 0x01

	switch(port)
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	28 2f       	mov	r18, r24
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	3d 83       	std	Y+5, r19	; 0x05
    2566:	2c 83       	std	Y+4, r18	; 0x04
    2568:	8c 81       	ldd	r24, Y+4	; 0x04
    256a:	9d 81       	ldd	r25, Y+5	; 0x05
    256c:	82 30       	cpi	r24, 0x02	; 2
    256e:	91 05       	cpc	r25, r1
    2570:	51 f1       	breq	.+84     	; 0x25c6 <M_Dio_void_togglePinValue+0x92>
    2572:	2c 81       	ldd	r18, Y+4	; 0x04
    2574:	3d 81       	ldd	r19, Y+5	; 0x05
    2576:	23 30       	cpi	r18, 0x03	; 3
    2578:	31 05       	cpc	r19, r1
    257a:	34 f4       	brge	.+12     	; 0x2588 <M_Dio_void_togglePinValue+0x54>
    257c:	8c 81       	ldd	r24, Y+4	; 0x04
    257e:	9d 81       	ldd	r25, Y+5	; 0x05
    2580:	81 30       	cpi	r24, 0x01	; 1
    2582:	91 05       	cpc	r25, r1
    2584:	61 f0       	breq	.+24     	; 0x259e <M_Dio_void_togglePinValue+0x6a>
    2586:	5a c0       	rjmp	.+180    	; 0x263c <M_Dio_void_togglePinValue+0x108>
    2588:	2c 81       	ldd	r18, Y+4	; 0x04
    258a:	3d 81       	ldd	r19, Y+5	; 0x05
    258c:	23 30       	cpi	r18, 0x03	; 3
    258e:	31 05       	cpc	r19, r1
    2590:	71 f1       	breq	.+92     	; 0x25ee <M_Dio_void_togglePinValue+0xba>
    2592:	8c 81       	ldd	r24, Y+4	; 0x04
    2594:	9d 81       	ldd	r25, Y+5	; 0x05
    2596:	84 30       	cpi	r24, 0x04	; 4
    2598:	91 05       	cpc	r25, r1
    259a:	e9 f1       	breq	.+122    	; 0x2616 <M_Dio_void_togglePinValue+0xe2>
    259c:	4f c0       	rjmp	.+158    	; 0x263c <M_Dio_void_togglePinValue+0x108>
	{
	case DIO_PORTA :TOG_BIT( PORTA_REG,pin);break;
    259e:	ab e3       	ldi	r26, 0x3B	; 59
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	eb e3       	ldi	r30, 0x3B	; 59
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	80 81       	ld	r24, Z
    25a8:	48 2f       	mov	r20, r24
    25aa:	8a 81       	ldd	r24, Y+2	; 0x02
    25ac:	28 2f       	mov	r18, r24
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	81 e0       	ldi	r24, 0x01	; 1
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	02 2e       	mov	r0, r18
    25b6:	02 c0       	rjmp	.+4      	; 0x25bc <M_Dio_void_togglePinValue+0x88>
    25b8:	88 0f       	add	r24, r24
    25ba:	99 1f       	adc	r25, r25
    25bc:	0a 94       	dec	r0
    25be:	e2 f7       	brpl	.-8      	; 0x25b8 <M_Dio_void_togglePinValue+0x84>
    25c0:	84 27       	eor	r24, r20
    25c2:	8c 93       	st	X, r24
    25c4:	3b c0       	rjmp	.+118    	; 0x263c <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTB :TOG_BIT( PORTB_REG,pin);break;
    25c6:	a8 e3       	ldi	r26, 0x38	; 56
    25c8:	b0 e0       	ldi	r27, 0x00	; 0
    25ca:	e8 e3       	ldi	r30, 0x38	; 56
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	80 81       	ld	r24, Z
    25d0:	48 2f       	mov	r20, r24
    25d2:	8a 81       	ldd	r24, Y+2	; 0x02
    25d4:	28 2f       	mov	r18, r24
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	02 2e       	mov	r0, r18
    25de:	02 c0       	rjmp	.+4      	; 0x25e4 <M_Dio_void_togglePinValue+0xb0>
    25e0:	88 0f       	add	r24, r24
    25e2:	99 1f       	adc	r25, r25
    25e4:	0a 94       	dec	r0
    25e6:	e2 f7       	brpl	.-8      	; 0x25e0 <M_Dio_void_togglePinValue+0xac>
    25e8:	84 27       	eor	r24, r20
    25ea:	8c 93       	st	X, r24
    25ec:	27 c0       	rjmp	.+78     	; 0x263c <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTC :TOG_BIT( PORTC_REG,pin);break;
    25ee:	a5 e3       	ldi	r26, 0x35	; 53
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	e5 e3       	ldi	r30, 0x35	; 53
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	80 81       	ld	r24, Z
    25f8:	48 2f       	mov	r20, r24
    25fa:	8a 81       	ldd	r24, Y+2	; 0x02
    25fc:	28 2f       	mov	r18, r24
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	02 2e       	mov	r0, r18
    2606:	02 c0       	rjmp	.+4      	; 0x260c <M_Dio_void_togglePinValue+0xd8>
    2608:	88 0f       	add	r24, r24
    260a:	99 1f       	adc	r25, r25
    260c:	0a 94       	dec	r0
    260e:	e2 f7       	brpl	.-8      	; 0x2608 <M_Dio_void_togglePinValue+0xd4>
    2610:	84 27       	eor	r24, r20
    2612:	8c 93       	st	X, r24
    2614:	13 c0       	rjmp	.+38     	; 0x263c <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTD :TOG_BIT( PORTD_REG,pin);break;
    2616:	a2 e3       	ldi	r26, 0x32	; 50
    2618:	b0 e0       	ldi	r27, 0x00	; 0
    261a:	e2 e3       	ldi	r30, 0x32	; 50
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	80 81       	ld	r24, Z
    2620:	48 2f       	mov	r20, r24
    2622:	8a 81       	ldd	r24, Y+2	; 0x02
    2624:	28 2f       	mov	r18, r24
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	02 2e       	mov	r0, r18
    262e:	02 c0       	rjmp	.+4      	; 0x2634 <M_Dio_void_togglePinValue+0x100>
    2630:	88 0f       	add	r24, r24
    2632:	99 1f       	adc	r25, r25
    2634:	0a 94       	dec	r0
    2636:	e2 f7       	brpl	.-8      	; 0x2630 <M_Dio_void_togglePinValue+0xfc>
    2638:	84 27       	eor	r24, r20
    263a:	8c 93       	st	X, r24
	}

}
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	08 95       	ret

0000264c <ADC_Init>:
#include"ADC_Types.h"
#include"ADC_Init.h"


Error_States_ADC ADC_Init(ADC_ConfigType *Ptr_to_ADC)
{
    264c:	df 93       	push	r29
    264e:	cf 93       	push	r28
    2650:	00 d0       	rcall	.+0      	; 0x2652 <ADC_Init+0x6>
    2652:	0f 92       	push	r0
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
    2658:	9b 83       	std	Y+3, r25	; 0x03
    265a:	8a 83       	std	Y+2, r24	; 0x02
	Error_States_ADC Error_state= Valid;
    265c:	19 82       	std	Y+1, r1	; 0x01
	if(Ptr_to_ADC->Voltage_Ref_Value==VCC_5V)
    265e:	ea 81       	ldd	r30, Y+2	; 0x02
    2660:	fb 81       	ldd	r31, Y+3	; 0x03
    2662:	80 81       	ld	r24, Z
    2664:	88 23       	and	r24, r24
    2666:	79 f4       	brne	.+30     	; 0x2686 <ADC_Init+0x3a>
	{
		/*select 5v*/
		CLR_BIT(ADMUX,ADMUX_REFS0);
    2668:	a7 e2       	ldi	r26, 0x27	; 39
    266a:	b0 e0       	ldi	r27, 0x00	; 0
    266c:	e7 e2       	ldi	r30, 0x27	; 39
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	80 81       	ld	r24, Z
    2672:	8f 7b       	andi	r24, 0xBF	; 191
    2674:	8c 93       	st	X, r24
		SET_BIT(ADMUX,ADMUX_REFS1);
    2676:	a7 e2       	ldi	r26, 0x27	; 39
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	e7 e2       	ldi	r30, 0x27	; 39
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	80 81       	ld	r24, Z
    2680:	80 68       	ori	r24, 0x80	; 128
    2682:	8c 93       	st	X, r24
    2684:	13 c0       	rjmp	.+38     	; 0x26ac <ADC_Init+0x60>

	}
	else if(Ptr_to_ADC->Voltage_Ref_Value==VREF_2_5_V)
    2686:	ea 81       	ldd	r30, Y+2	; 0x02
    2688:	fb 81       	ldd	r31, Y+3	; 0x03
    268a:	80 81       	ld	r24, Z
    268c:	81 30       	cpi	r24, 0x01	; 1
    268e:	71 f4       	brne	.+28     	; 0x26ac <ADC_Init+0x60>
	{
		/*select 2.56v*/
		SET_BIT(ADMUX,ADMUX_REFS0);
    2690:	a7 e2       	ldi	r26, 0x27	; 39
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	e7 e2       	ldi	r30, 0x27	; 39
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	80 81       	ld	r24, Z
    269a:	80 64       	ori	r24, 0x40	; 64
    269c:	8c 93       	st	X, r24
		SET_BIT(ADMUX,ADMUX_REFS1);
    269e:	a7 e2       	ldi	r26, 0x27	; 39
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	e7 e2       	ldi	r30, 0x27	; 39
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	80 68       	ori	r24, 0x80	; 128
    26aa:	8c 93       	st	X, r24
	}
	if(Ptr_to_ADC->AdjustType==Right_Adjust)
    26ac:	ea 81       	ldd	r30, Y+2	; 0x02
    26ae:	fb 81       	ldd	r31, Y+3	; 0x03
    26b0:	82 81       	ldd	r24, Z+2	; 0x02
    26b2:	88 23       	and	r24, r24
    26b4:	41 f4       	brne	.+16     	; 0x26c6 <ADC_Init+0x7a>
	{
		/*Select right adjust*/
		CLR_BIT(ADMUX,ADMUX_ADLAR);
    26b6:	a7 e2       	ldi	r26, 0x27	; 39
    26b8:	b0 e0       	ldi	r27, 0x00	; 0
    26ba:	e7 e2       	ldi	r30, 0x27	; 39
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	80 81       	ld	r24, Z
    26c0:	8f 7d       	andi	r24, 0xDF	; 223
    26c2:	8c 93       	st	X, r24
    26c4:	0c c0       	rjmp	.+24     	; 0x26de <ADC_Init+0x92>
	}
	else if(Ptr_to_ADC->AdjustType==Right_Adjust)
    26c6:	ea 81       	ldd	r30, Y+2	; 0x02
    26c8:	fb 81       	ldd	r31, Y+3	; 0x03
    26ca:	82 81       	ldd	r24, Z+2	; 0x02
    26cc:	88 23       	and	r24, r24
    26ce:	39 f4       	brne	.+14     	; 0x26de <ADC_Init+0x92>
	{
		/*Select left adjust*/
		SET_BIT(ADMUX,ADMUX_ADLAR);
    26d0:	a7 e2       	ldi	r26, 0x27	; 39
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	e7 e2       	ldi	r30, 0x27	; 39
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	80 81       	ld	r24, Z
    26da:	80 62       	ori	r24, 0x20	; 32
    26dc:	8c 93       	st	X, r24
	}
	if(Ptr_to_ADC->Pre_Scaller==DIV_BY_128)
    26de:	ea 81       	ldd	r30, Y+2	; 0x02
    26e0:	fb 81       	ldd	r31, Y+3	; 0x03
    26e2:	81 81       	ldd	r24, Z+1	; 0x01
    26e4:	86 30       	cpi	r24, 0x06	; 6
    26e6:	b1 f4       	brne	.+44     	; 0x2714 <ADC_Init+0xc8>
	{
		/*Select Pre-scaller 128*/
		SET_BIT(ADCSRA,ADCSRA_ADPS0);
    26e8:	a6 e2       	ldi	r26, 0x26	; 38
    26ea:	b0 e0       	ldi	r27, 0x00	; 0
    26ec:	e6 e2       	ldi	r30, 0x26	; 38
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	80 81       	ld	r24, Z
    26f2:	81 60       	ori	r24, 0x01	; 1
    26f4:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS1);
    26f6:	a6 e2       	ldi	r26, 0x26	; 38
    26f8:	b0 e0       	ldi	r27, 0x00	; 0
    26fa:	e6 e2       	ldi	r30, 0x26	; 38
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	80 81       	ld	r24, Z
    2700:	82 60       	ori	r24, 0x02	; 2
    2702:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS2);
    2704:	a6 e2       	ldi	r26, 0x26	; 38
    2706:	b0 e0       	ldi	r27, 0x00	; 0
    2708:	e6 e2       	ldi	r30, 0x26	; 38
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	80 81       	ld	r24, Z
    270e:	84 60       	ori	r24, 0x04	; 4
    2710:	8c 93       	st	X, r24
    2712:	1a c0       	rjmp	.+52     	; 0x2748 <ADC_Init+0xfc>

	}
	else if(Ptr_to_ADC->Pre_Scaller==DIV_BY_2)
    2714:	ea 81       	ldd	r30, Y+2	; 0x02
    2716:	fb 81       	ldd	r31, Y+3	; 0x03
    2718:	81 81       	ldd	r24, Z+1	; 0x01
    271a:	88 23       	and	r24, r24
    271c:	a9 f4       	brne	.+42     	; 0x2748 <ADC_Init+0xfc>
	{
		/**/
		CLR_BIT(ADCSRA,ADCSRA_ADPS0);
    271e:	a6 e2       	ldi	r26, 0x26	; 38
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	e6 e2       	ldi	r30, 0x26	; 38
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	8e 7f       	andi	r24, 0xFE	; 254
    272a:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADCSRA_ADPS1);
    272c:	a6 e2       	ldi	r26, 0x26	; 38
    272e:	b0 e0       	ldi	r27, 0x00	; 0
    2730:	e6 e2       	ldi	r30, 0x26	; 38
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	80 81       	ld	r24, Z
    2736:	8d 7f       	andi	r24, 0xFD	; 253
    2738:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA,ADCSRA_ADPS2);
    273a:	a6 e2       	ldi	r26, 0x26	; 38
    273c:	b0 e0       	ldi	r27, 0x00	; 0
    273e:	e6 e2       	ldi	r30, 0x26	; 38
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	80 81       	ld	r24, Z
    2744:	8b 7f       	andi	r24, 0xFB	; 251
    2746:	8c 93       	st	X, r24
	}
	return Error_state;
    2748:	89 81       	ldd	r24, Y+1	; 0x01
}
    274a:	0f 90       	pop	r0
    274c:	0f 90       	pop	r0
    274e:	0f 90       	pop	r0
    2750:	cf 91       	pop	r28
    2752:	df 91       	pop	r29
    2754:	08 95       	ret

00002756 <ADC_getDigitalValueSynchNonBlocking>:

u16 ADC_getDigitalValueSynchNonBlocking(ADC_ConfigType *Ptr_to_ADC)
{
    2756:	df 93       	push	r29
    2758:	cf 93       	push	r28
    275a:	cd b7       	in	r28, 0x3d	; 61
    275c:	de b7       	in	r29, 0x3e	; 62
    275e:	28 97       	sbiw	r28, 0x08	; 8
    2760:	0f b6       	in	r0, 0x3f	; 63
    2762:	f8 94       	cli
    2764:	de bf       	out	0x3e, r29	; 62
    2766:	0f be       	out	0x3f, r0	; 63
    2768:	cd bf       	out	0x3d, r28	; 61
    276a:	9e 83       	std	Y+6, r25	; 0x06
    276c:	8d 83       	std	Y+5, r24	; 0x05
	u16 Reading_value=0;
    276e:	1c 82       	std	Y+4, r1	; 0x04
    2770:	1b 82       	std	Y+3, r1	; 0x03
	u16 Counter=0;
    2772:	1a 82       	std	Y+2, r1	; 0x02
    2774:	19 82       	std	Y+1, r1	; 0x01
	/*Select port*/
	if(Ptr_to_ADC->Channel==ADC0)
    2776:	ed 81       	ldd	r30, Y+5	; 0x05
    2778:	fe 81       	ldd	r31, Y+6	; 0x06
    277a:	83 81       	ldd	r24, Z+3	; 0x03
    277c:	88 23       	and	r24, r24
    277e:	19 f5       	brne	.+70     	; 0x27c6 <ADC_getDigitalValueSynchNonBlocking+0x70>
	{
		/*Select ADC0*/

		CLR_BIT(ADMUX,ADMUX_MUX0);
    2780:	a7 e2       	ldi	r26, 0x27	; 39
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	e7 e2       	ldi	r30, 0x27	; 39
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	8e 7f       	andi	r24, 0xFE	; 254
    278c:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,ADMUX_MUX1);
    278e:	a7 e2       	ldi	r26, 0x27	; 39
    2790:	b0 e0       	ldi	r27, 0x00	; 0
    2792:	e7 e2       	ldi	r30, 0x27	; 39
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	80 81       	ld	r24, Z
    2798:	8d 7f       	andi	r24, 0xFD	; 253
    279a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,ADMUX_MUX2);
    279c:	a7 e2       	ldi	r26, 0x27	; 39
    279e:	b0 e0       	ldi	r27, 0x00	; 0
    27a0:	e7 e2       	ldi	r30, 0x27	; 39
    27a2:	f0 e0       	ldi	r31, 0x00	; 0
    27a4:	80 81       	ld	r24, Z
    27a6:	8b 7f       	andi	r24, 0xFB	; 251
    27a8:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,ADMUX_MUX3);
    27aa:	a7 e2       	ldi	r26, 0x27	; 39
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	e7 e2       	ldi	r30, 0x27	; 39
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	80 81       	ld	r24, Z
    27b4:	87 7f       	andi	r24, 0xF7	; 247
    27b6:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,ADMUX_MUX4);
    27b8:	a7 e2       	ldi	r26, 0x27	; 39
    27ba:	b0 e0       	ldi	r27, 0x00	; 0
    27bc:	e7 e2       	ldi	r30, 0x27	; 39
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	80 81       	ld	r24, Z
    27c2:	8f 7e       	andi	r24, 0xEF	; 239
    27c4:	8c 93       	st	X, r24

	}

	/*Enable ADC*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    27c6:	a6 e2       	ldi	r26, 0x26	; 38
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	e6 e2       	ldi	r30, 0x26	; 38
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	80 81       	ld	r24, Z
    27d0:	80 68       	ori	r24, 0x80	; 128
    27d2:	8c 93       	st	X, r24
	/*Start Conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    27d4:	a6 e2       	ldi	r26, 0x26	; 38
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	e6 e2       	ldi	r30, 0x26	; 38
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	80 81       	ld	r24, Z
    27de:	80 64       	ori	r24, 0x40	; 64
    27e0:	8c 93       	st	X, r24
    27e2:	05 c0       	rjmp	.+10     	; 0x27ee <ADC_getDigitalValueSynchNonBlocking+0x98>
	/*loop for the conversion to end*/
	while((GET_BIT(ADCSRA,ADCSRA_ADSC))==1 || Counter<= MAX_DELAY)
	{
		Counter++;
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	9a 81       	ldd	r25, Y+2	; 0x02
    27e8:	01 96       	adiw	r24, 0x01	; 1
    27ea:	9a 83       	std	Y+2, r25	; 0x02
    27ec:	89 83       	std	Y+1, r24	; 0x01
	/*Enable ADC*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
	/*Start Conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
	/*loop for the conversion to end*/
	while((GET_BIT(ADCSRA,ADCSRA_ADSC))==1 || Counter<= MAX_DELAY)
    27ee:	e6 e2       	ldi	r30, 0x26	; 38
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	80 81       	ld	r24, Z
    27f4:	82 95       	swap	r24
    27f6:	86 95       	lsr	r24
    27f8:	86 95       	lsr	r24
    27fa:	83 70       	andi	r24, 0x03	; 3
    27fc:	88 2f       	mov	r24, r24
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	81 70       	andi	r24, 0x01	; 1
    2802:	90 70       	andi	r25, 0x00	; 0
    2804:	88 23       	and	r24, r24
    2806:	71 f7       	brne	.-36     	; 0x27e4 <ADC_getDigitalValueSynchNonBlocking+0x8e>
    2808:	89 81       	ldd	r24, Y+1	; 0x01
    280a:	9a 81       	ldd	r25, Y+2	; 0x02
    280c:	23 ec       	ldi	r18, 0xC3	; 195
    280e:	81 35       	cpi	r24, 0x51	; 81
    2810:	92 07       	cpc	r25, r18
    2812:	40 f3       	brcs	.-48     	; 0x27e4 <ADC_getDigitalValueSynchNonBlocking+0x8e>
	{
		Counter++;
	}
	if((GET_BIT(ADCSRA,ADCSRA_ADSC))==0)
    2814:	e6 e2       	ldi	r30, 0x26	; 38
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 81       	ld	r24, Z
    281a:	82 95       	swap	r24
    281c:	86 95       	lsr	r24
    281e:	86 95       	lsr	r24
    2820:	83 70       	andi	r24, 0x03	; 3
    2822:	88 2f       	mov	r24, r24
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	81 70       	andi	r24, 0x01	; 1
    2828:	90 70       	andi	r25, 0x00	; 0
    282a:	00 97       	sbiw	r24, 0x00	; 0
    282c:	39 f4       	brne	.+14     	; 0x283c <ADC_getDigitalValueSynchNonBlocking+0xe6>
	{
		//Reading_value= ((ADCL*5)/10);
		//return Reading_value;
		return ADCL;
    282e:	e4 e2       	ldi	r30, 0x24	; 36
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	80 81       	ld	r24, Z
    2834:	91 81       	ldd	r25, Z+1	; 0x01
    2836:	98 87       	std	Y+8, r25	; 0x08
    2838:	8f 83       	std	Y+7, r24	; 0x07
    283a:	02 c0       	rjmp	.+4      	; 0x2840 <ADC_getDigitalValueSynchNonBlocking+0xea>
	}
	else
	{
		return 0;
    283c:	18 86       	std	Y+8, r1	; 0x08
    283e:	1f 82       	std	Y+7, r1	; 0x07
    2840:	8f 81       	ldd	r24, Y+7	; 0x07
    2842:	98 85       	ldd	r25, Y+8	; 0x08
	}
}
    2844:	28 96       	adiw	r28, 0x08	; 8
    2846:	0f b6       	in	r0, 0x3f	; 63
    2848:	f8 94       	cli
    284a:	de bf       	out	0x3e, r29	; 62
    284c:	0f be       	out	0x3f, r0	; 63
    284e:	cd bf       	out	0x3d, r28	; 61
    2850:	cf 91       	pop	r28
    2852:	df 91       	pop	r29
    2854:	08 95       	ret

00002856 <Ultrasonic_init>:
#include<util/delay.h>

volatile static u8 Edge_Count = 0;
volatile static u16 Echo_time = 0;
void Ultrasonic_init(void)
{
    2856:	df 93       	push	r29
    2858:	cf 93       	push	r28
    285a:	00 d0       	rcall	.+0      	; 0x285c <Ultrasonic_init+0x6>
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
	ICU_ConfigType ICU_CFG1= {TIMER1_CLK_8,ICU_RISING};
    2860:	82 e0       	ldi	r24, 0x02	; 2
    2862:	89 83       	std	Y+1, r24	; 0x01
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	8a 83       	std	Y+2, r24	; 0x02
	ICU_Init(&ICU_CFG1);
    2868:	ce 01       	movw	r24, r28
    286a:	01 96       	adiw	r24, 0x01	; 1
    286c:	0e 94 17 07 	call	0xe2e	; 0xe2e <ICU_Init>

	ICU_Set_CallBack(Ultrasonic_edgeProcessing);
    2870:	80 e4       	ldi	r24, 0x40	; 64
    2872:	95 e1       	ldi	r25, 0x15	; 21
    2874:	0e 94 c9 07 	call	0xf92	; 0xf92 <ICU_Set_CallBack>

	//set trigger pin to output
}
    2878:	0f 90       	pop	r0
    287a:	0f 90       	pop	r0
    287c:	cf 91       	pop	r28
    287e:	df 91       	pop	r29
    2880:	08 95       	ret

00002882 <Ultra_Sonic_Trigger>:
void Ultra_Sonic_Trigger(void)
{
    2882:	df 93       	push	r29
    2884:	cf 93       	push	r28
    2886:	cd b7       	in	r28, 0x3d	; 61
    2888:	de b7       	in	r29, 0x3e	; 62
    288a:	68 97       	sbiw	r28, 0x18	; 24
    288c:	0f b6       	in	r0, 0x3f	; 63
    288e:	f8 94       	cli
    2890:	de bf       	out	0x3e, r29	; 62
    2892:	0f be       	out	0x3f, r0	; 63
    2894:	cd bf       	out	0x3d, r28	; 61
	/*send trigger pulse for Ultrasonic pin D0*/
	M_Dio_void_setPinValue(DIO_PD0,DIO_HIGH);
    2896:	88 e2       	ldi	r24, 0x28	; 40
    2898:	61 e0       	ldi	r22, 0x01	; 1
    289a:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	a0 e2       	ldi	r26, 0x20	; 32
    28a4:	b1 e4       	ldi	r27, 0x41	; 65
    28a6:	8d 8b       	std	Y+21, r24	; 0x15
    28a8:	9e 8b       	std	Y+22, r25	; 0x16
    28aa:	af 8b       	std	Y+23, r26	; 0x17
    28ac:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28ae:	6d 89       	ldd	r22, Y+21	; 0x15
    28b0:	7e 89       	ldd	r23, Y+22	; 0x16
    28b2:	8f 89       	ldd	r24, Y+23	; 0x17
    28b4:	98 8d       	ldd	r25, Y+24	; 0x18
    28b6:	2b ea       	ldi	r18, 0xAB	; 171
    28b8:	3a ea       	ldi	r19, 0xAA	; 170
    28ba:	4a ea       	ldi	r20, 0xAA	; 170
    28bc:	50 e4       	ldi	r21, 0x40	; 64
    28be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	89 8b       	std	Y+17, r24	; 0x11
    28c8:	9a 8b       	std	Y+18, r25	; 0x12
    28ca:	ab 8b       	std	Y+19, r26	; 0x13
    28cc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    28ce:	69 89       	ldd	r22, Y+17	; 0x11
    28d0:	7a 89       	ldd	r23, Y+18	; 0x12
    28d2:	8b 89       	ldd	r24, Y+19	; 0x13
    28d4:	9c 89       	ldd	r25, Y+20	; 0x14
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	40 e8       	ldi	r20, 0x80	; 128
    28dc:	5f e3       	ldi	r21, 0x3F	; 63
    28de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28e2:	88 23       	and	r24, r24
    28e4:	1c f4       	brge	.+6      	; 0x28ec <Ultra_Sonic_Trigger+0x6a>
		__ticks = 1;
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	88 8b       	std	Y+16, r24	; 0x10
    28ea:	91 c0       	rjmp	.+290    	; 0x2a0e <Ultra_Sonic_Trigger+0x18c>
	else if (__tmp > 255)
    28ec:	69 89       	ldd	r22, Y+17	; 0x11
    28ee:	7a 89       	ldd	r23, Y+18	; 0x12
    28f0:	8b 89       	ldd	r24, Y+19	; 0x13
    28f2:	9c 89       	ldd	r25, Y+20	; 0x14
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	4f e7       	ldi	r20, 0x7F	; 127
    28fa:	53 e4       	ldi	r21, 0x43	; 67
    28fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2900:	18 16       	cp	r1, r24
    2902:	0c f0       	brlt	.+2      	; 0x2906 <Ultra_Sonic_Trigger+0x84>
    2904:	7b c0       	rjmp	.+246    	; 0x29fc <Ultra_Sonic_Trigger+0x17a>
	{
		_delay_ms(__us / 1000.0);
    2906:	6d 89       	ldd	r22, Y+21	; 0x15
    2908:	7e 89       	ldd	r23, Y+22	; 0x16
    290a:	8f 89       	ldd	r24, Y+23	; 0x17
    290c:	98 8d       	ldd	r25, Y+24	; 0x18
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	4a e7       	ldi	r20, 0x7A	; 122
    2914:	54 e4       	ldi	r21, 0x44	; 68
    2916:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	8c 87       	std	Y+12, r24	; 0x0c
    2920:	9d 87       	std	Y+13, r25	; 0x0d
    2922:	ae 87       	std	Y+14, r26	; 0x0e
    2924:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2926:	6c 85       	ldd	r22, Y+12	; 0x0c
    2928:	7d 85       	ldd	r23, Y+13	; 0x0d
    292a:	8e 85       	ldd	r24, Y+14	; 0x0e
    292c:	9f 85       	ldd	r25, Y+15	; 0x0f
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	4a e7       	ldi	r20, 0x7A	; 122
    2934:	55 e4       	ldi	r21, 0x45	; 69
    2936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	88 87       	std	Y+8, r24	; 0x08
    2940:	99 87       	std	Y+9, r25	; 0x09
    2942:	aa 87       	std	Y+10, r26	; 0x0a
    2944:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2946:	68 85       	ldd	r22, Y+8	; 0x08
    2948:	79 85       	ldd	r23, Y+9	; 0x09
    294a:	8a 85       	ldd	r24, Y+10	; 0x0a
    294c:	9b 85       	ldd	r25, Y+11	; 0x0b
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	40 e8       	ldi	r20, 0x80	; 128
    2954:	5f e3       	ldi	r21, 0x3F	; 63
    2956:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    295a:	88 23       	and	r24, r24
    295c:	2c f4       	brge	.+10     	; 0x2968 <Ultra_Sonic_Trigger+0xe6>
		__ticks = 1;
    295e:	81 e0       	ldi	r24, 0x01	; 1
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	9f 83       	std	Y+7, r25	; 0x07
    2964:	8e 83       	std	Y+6, r24	; 0x06
    2966:	3f c0       	rjmp	.+126    	; 0x29e6 <Ultra_Sonic_Trigger+0x164>
	else if (__tmp > 65535)
    2968:	68 85       	ldd	r22, Y+8	; 0x08
    296a:	79 85       	ldd	r23, Y+9	; 0x09
    296c:	8a 85       	ldd	r24, Y+10	; 0x0a
    296e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	3f ef       	ldi	r19, 0xFF	; 255
    2974:	4f e7       	ldi	r20, 0x7F	; 127
    2976:	57 e4       	ldi	r21, 0x47	; 71
    2978:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    297c:	18 16       	cp	r1, r24
    297e:	4c f5       	brge	.+82     	; 0x29d2 <Ultra_Sonic_Trigger+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2980:	6c 85       	ldd	r22, Y+12	; 0x0c
    2982:	7d 85       	ldd	r23, Y+13	; 0x0d
    2984:	8e 85       	ldd	r24, Y+14	; 0x0e
    2986:	9f 85       	ldd	r25, Y+15	; 0x0f
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	40 e2       	ldi	r20, 0x20	; 32
    298e:	51 e4       	ldi	r21, 0x41	; 65
    2990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	bc 01       	movw	r22, r24
    299a:	cd 01       	movw	r24, r26
    299c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	9f 83       	std	Y+7, r25	; 0x07
    29a6:	8e 83       	std	Y+6, r24	; 0x06
    29a8:	0f c0       	rjmp	.+30     	; 0x29c8 <Ultra_Sonic_Trigger+0x146>
    29aa:	80 e9       	ldi	r24, 0x90	; 144
    29ac:	91 e0       	ldi	r25, 0x01	; 1
    29ae:	9d 83       	std	Y+5, r25	; 0x05
    29b0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29b2:	8c 81       	ldd	r24, Y+4	; 0x04
    29b4:	9d 81       	ldd	r25, Y+5	; 0x05
    29b6:	01 97       	sbiw	r24, 0x01	; 1
    29b8:	f1 f7       	brne	.-4      	; 0x29b6 <Ultra_Sonic_Trigger+0x134>
    29ba:	9d 83       	std	Y+5, r25	; 0x05
    29bc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29be:	8e 81       	ldd	r24, Y+6	; 0x06
    29c0:	9f 81       	ldd	r25, Y+7	; 0x07
    29c2:	01 97       	sbiw	r24, 0x01	; 1
    29c4:	9f 83       	std	Y+7, r25	; 0x07
    29c6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c8:	8e 81       	ldd	r24, Y+6	; 0x06
    29ca:	9f 81       	ldd	r25, Y+7	; 0x07
    29cc:	00 97       	sbiw	r24, 0x00	; 0
    29ce:	69 f7       	brne	.-38     	; 0x29aa <Ultra_Sonic_Trigger+0x128>
    29d0:	24 c0       	rjmp	.+72     	; 0x2a1a <Ultra_Sonic_Trigger+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d2:	68 85       	ldd	r22, Y+8	; 0x08
    29d4:	79 85       	ldd	r23, Y+9	; 0x09
    29d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    29d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    29da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	9f 83       	std	Y+7, r25	; 0x07
    29e4:	8e 83       	std	Y+6, r24	; 0x06
    29e6:	8e 81       	ldd	r24, Y+6	; 0x06
    29e8:	9f 81       	ldd	r25, Y+7	; 0x07
    29ea:	9b 83       	std	Y+3, r25	; 0x03
    29ec:	8a 83       	std	Y+2, r24	; 0x02
    29ee:	8a 81       	ldd	r24, Y+2	; 0x02
    29f0:	9b 81       	ldd	r25, Y+3	; 0x03
    29f2:	01 97       	sbiw	r24, 0x01	; 1
    29f4:	f1 f7       	brne	.-4      	; 0x29f2 <Ultra_Sonic_Trigger+0x170>
    29f6:	9b 83       	std	Y+3, r25	; 0x03
    29f8:	8a 83       	std	Y+2, r24	; 0x02
    29fa:	0f c0       	rjmp	.+30     	; 0x2a1a <Ultra_Sonic_Trigger+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29fc:	69 89       	ldd	r22, Y+17	; 0x11
    29fe:	7a 89       	ldd	r23, Y+18	; 0x12
    2a00:	8b 89       	ldd	r24, Y+19	; 0x13
    2a02:	9c 89       	ldd	r25, Y+20	; 0x14
    2a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	88 8b       	std	Y+16, r24	; 0x10
    2a0e:	88 89       	ldd	r24, Y+16	; 0x10
    2a10:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a12:	89 81       	ldd	r24, Y+1	; 0x01
    2a14:	8a 95       	dec	r24
    2a16:	f1 f7       	brne	.-4      	; 0x2a14 <Ultra_Sonic_Trigger+0x192>
    2a18:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	M_Dio_void_setPinValue(DIO_PD0,DIO_LOW);
    2a1a:	88 e2       	ldi	r24, 0x28	; 40
    2a1c:	60 e0       	ldi	r22, 0x00	; 0
    2a1e:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
}
    2a22:	68 96       	adiw	r28, 0x18	; 24
    2a24:	0f b6       	in	r0, 0x3f	; 63
    2a26:	f8 94       	cli
    2a28:	de bf       	out	0x3e, r29	; 62
    2a2a:	0f be       	out	0x3f, r0	; 63
    2a2c:	cd bf       	out	0x3d, r28	; 61
    2a2e:	cf 91       	pop	r28
    2a30:	df 91       	pop	r29
    2a32:	08 95       	ret

00002a34 <Ultrasonic_readDistance>:
u16 Ultrasonic_readDistance(void)
{
    2a34:	df 93       	push	r29
    2a36:	cf 93       	push	r28
    2a38:	cd b7       	in	r28, 0x3d	; 61
    2a3a:	de b7       	in	r29, 0x3e	; 62
	Ultra_Sonic_Trigger();
    2a3c:	0e 94 41 14 	call	0x2882	; 0x2882 <Ultra_Sonic_Trigger>

	//return (0.017*Echo_time);
	return (0.0085*Echo_time);
    2a40:	80 91 12 03 	lds	r24, 0x0312
    2a44:	90 91 13 03 	lds	r25, 0x0313
    2a48:	cc 01       	movw	r24, r24
    2a4a:	a0 e0       	ldi	r26, 0x00	; 0
    2a4c:	b0 e0       	ldi	r27, 0x00	; 0
    2a4e:	bc 01       	movw	r22, r24
    2a50:	cd 01       	movw	r24, r26
    2a52:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	bc 01       	movw	r22, r24
    2a5c:	cd 01       	movw	r24, r26
    2a5e:	26 e9       	ldi	r18, 0x96	; 150
    2a60:	33 e4       	ldi	r19, 0x43	; 67
    2a62:	4b e0       	ldi	r20, 0x0B	; 11
    2a64:	5c e3       	ldi	r21, 0x3C	; 60
    2a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	bc 01       	movw	r22, r24
    2a70:	cd 01       	movw	r24, r26
    2a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
}
    2a7a:	cf 91       	pop	r28
    2a7c:	df 91       	pop	r29
    2a7e:	08 95       	ret

00002a80 <Ultrasonic_edgeProcessing>:

void Ultrasonic_edgeProcessing(void)
{
    2a80:	df 93       	push	r29
    2a82:	cf 93       	push	r28
    2a84:	cd b7       	in	r28, 0x3d	; 61
    2a86:	de b7       	in	r29, 0x3e	; 62
	Edge_Count++;
    2a88:	80 91 11 03 	lds	r24, 0x0311
    2a8c:	8f 5f       	subi	r24, 0xFF	; 255
    2a8e:	80 93 11 03 	sts	0x0311, r24
	if(Edge_Count==1)
    2a92:	80 91 11 03 	lds	r24, 0x0311
    2a96:	81 30       	cpi	r24, 0x01	; 1
    2a98:	31 f4       	brne	.+12     	; 0x2aa6 <Ultrasonic_edgeProcessing+0x26>
	{
		ICU_Clear_timer_value();
    2a9a:	0e 94 a2 07 	call	0xf44	; 0xf44 <ICU_Clear_timer_value>

		ICU_Set_Edge_detection(ICU_FALLING);
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	0e 94 78 07 	call	0xef0	; 0xef0 <ICU_Set_Edge_detection>
    2aa4:	0f c0       	rjmp	.+30     	; 0x2ac4 <Ultrasonic_edgeProcessing+0x44>
	}
	else if(Edge_Count==2)
    2aa6:	80 91 11 03 	lds	r24, 0x0311
    2aaa:	82 30       	cpi	r24, 0x02	; 2
    2aac:	59 f4       	brne	.+22     	; 0x2ac4 <Ultrasonic_edgeProcessing+0x44>
	{
		Echo_time=ICU_Get_Captured_value();
    2aae:	0e 94 97 07 	call	0xf2e	; 0xf2e <ICU_Get_Captured_value>
    2ab2:	90 93 13 03 	sts	0x0313, r25
    2ab6:	80 93 12 03 	sts	0x0312, r24

		ICU_Set_Edge_detection(ICU_RISING);
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	0e 94 78 07 	call	0xef0	; 0xef0 <ICU_Set_Edge_detection>

		Edge_Count=0;
    2ac0:	10 92 11 03 	sts	0x0311, r1
	}
}
    2ac4:	cf 91       	pop	r28
    2ac6:	df 91       	pop	r29
    2ac8:	08 95       	ret

00002aca <H_SSD_void_displayIntNumber>:
#include"SSD_CFG.h"
#include"SSD_int.h"
#include<util/delay.h>

void H_SSD_void_displayIntNumber(u16 Copy_number)
{
    2aca:	0f 93       	push	r16
    2acc:	1f 93       	push	r17
    2ace:	df 93       	push	r29
    2ad0:	cf 93       	push	r28
    2ad2:	cd b7       	in	r28, 0x3d	; 61
    2ad4:	de b7       	in	r29, 0x3e	; 62
    2ad6:	c0 54       	subi	r28, 0x40	; 64
    2ad8:	d0 40       	sbci	r29, 0x00	; 0
    2ada:	0f b6       	in	r0, 0x3f	; 63
    2adc:	f8 94       	cli
    2ade:	de bf       	out	0x3e, r29	; 62
    2ae0:	0f be       	out	0x3f, r0	; 63
    2ae2:	cd bf       	out	0x3d, r28	; 61
    2ae4:	fe 01       	movw	r30, r28
    2ae6:	ff 96       	adiw	r30, 0x3f	; 63
    2ae8:	91 83       	std	Z+1, r25	; 0x01
    2aea:	80 83       	st	Z, r24
	u8 arr[4]={0};
    2aec:	1b ae       	std	Y+59, r1	; 0x3b
    2aee:	1c ae       	std	Y+60, r1	; 0x3c
    2af0:	1d ae       	std	Y+61, r1	; 0x3d
    2af2:	1e ae       	std	Y+62, r1	; 0x3e
	u8 i=0;
    2af4:	1a ae       	std	Y+58, r1	; 0x3a
    2af6:	24 c0       	rjmp	.+72     	; 0x2b40 <H_SSD_void_displayIntNumber+0x76>
	while(Copy_number >0 && i<4)
	{
		arr[i]= Copy_number %10;
    2af8:	8a ad       	ldd	r24, Y+58	; 0x3a
    2afa:	08 2f       	mov	r16, r24
    2afc:	10 e0       	ldi	r17, 0x00	; 0
    2afe:	fe 01       	movw	r30, r28
    2b00:	ff 96       	adiw	r30, 0x3f	; 63
    2b02:	80 81       	ld	r24, Z
    2b04:	91 81       	ldd	r25, Z+1	; 0x01
    2b06:	2a e0       	ldi	r18, 0x0A	; 10
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	b9 01       	movw	r22, r18
    2b0c:	0e 94 42 23 	call	0x4684	; 0x4684 <__udivmodhi4>
    2b10:	28 2f       	mov	r18, r24
    2b12:	ce 01       	movw	r24, r28
    2b14:	cb 96       	adiw	r24, 0x3b	; 59
    2b16:	fc 01       	movw	r30, r24
    2b18:	e0 0f       	add	r30, r16
    2b1a:	f1 1f       	adc	r31, r17
    2b1c:	20 83       	st	Z, r18
		Copy_number /= 10;
    2b1e:	fe 01       	movw	r30, r28
    2b20:	ff 96       	adiw	r30, 0x3f	; 63
    2b22:	80 81       	ld	r24, Z
    2b24:	91 81       	ldd	r25, Z+1	; 0x01
    2b26:	2a e0       	ldi	r18, 0x0A	; 10
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	b9 01       	movw	r22, r18
    2b2c:	0e 94 42 23 	call	0x4684	; 0x4684 <__udivmodhi4>
    2b30:	cb 01       	movw	r24, r22
    2b32:	fe 01       	movw	r30, r28
    2b34:	ff 96       	adiw	r30, 0x3f	; 63
    2b36:	91 83       	std	Z+1, r25	; 0x01
    2b38:	80 83       	st	Z, r24
		i++;
    2b3a:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b3c:	8f 5f       	subi	r24, 0xFF	; 255
    2b3e:	8a af       	std	Y+58, r24	; 0x3a

void H_SSD_void_displayIntNumber(u16 Copy_number)
{
	u8 arr[4]={0};
	u8 i=0;
	while(Copy_number >0 && i<4)
    2b40:	fe 01       	movw	r30, r28
    2b42:	ff 96       	adiw	r30, 0x3f	; 63
    2b44:	80 81       	ld	r24, Z
    2b46:	91 81       	ldd	r25, Z+1	; 0x01
    2b48:	00 97       	sbiw	r24, 0x00	; 0
    2b4a:	19 f0       	breq	.+6      	; 0x2b52 <H_SSD_void_displayIntNumber+0x88>
    2b4c:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b4e:	84 30       	cpi	r24, 0x04	; 4
    2b50:	98 f2       	brcs	.-90     	; 0x2af8 <H_SSD_void_displayIntNumber+0x2e>
		arr[i]= Copy_number %10;
		Copy_number /= 10;
		i++;
	}
	/*prepare units to be send to BCD(4bits)*/
	for(u8 j=0;j<SSD_DISPLAY_TIME*4;j++)
    2b52:	19 ae       	std	Y+57, r1	; 0x39
	{
		/*prepare units to be send to BCD*/
		i=0;
    2b54:	1a ae       	std	Y+58, r1	; 0x3a
		M_Dio_void_setPinValue(SSD_A_PIN,(arr[i]>>0)&1);
    2b56:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b58:	28 2f       	mov	r18, r24
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	ce 01       	movw	r24, r28
    2b5e:	cb 96       	adiw	r24, 0x3b	; 59
    2b60:	fc 01       	movw	r30, r24
    2b62:	e2 0f       	add	r30, r18
    2b64:	f3 1f       	adc	r31, r19
    2b66:	80 81       	ld	r24, Z
    2b68:	98 2f       	mov	r25, r24
    2b6a:	91 70       	andi	r25, 0x01	; 1
    2b6c:	84 e1       	ldi	r24, 0x14	; 20
    2b6e:	69 2f       	mov	r22, r25
    2b70:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_B_PIN,(arr[i]>>1)&1);
    2b74:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b76:	28 2f       	mov	r18, r24
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	ce 01       	movw	r24, r28
    2b7c:	cb 96       	adiw	r24, 0x3b	; 59
    2b7e:	fc 01       	movw	r30, r24
    2b80:	e2 0f       	add	r30, r18
    2b82:	f3 1f       	adc	r31, r19
    2b84:	80 81       	ld	r24, Z
    2b86:	86 95       	lsr	r24
    2b88:	98 2f       	mov	r25, r24
    2b8a:	91 70       	andi	r25, 0x01	; 1
    2b8c:	85 e1       	ldi	r24, 0x15	; 21
    2b8e:	69 2f       	mov	r22, r25
    2b90:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_C_PIN,(arr[i]>>2)&1);
    2b94:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b96:	28 2f       	mov	r18, r24
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	ce 01       	movw	r24, r28
    2b9c:	cb 96       	adiw	r24, 0x3b	; 59
    2b9e:	fc 01       	movw	r30, r24
    2ba0:	e2 0f       	add	r30, r18
    2ba2:	f3 1f       	adc	r31, r19
    2ba4:	80 81       	ld	r24, Z
    2ba6:	86 95       	lsr	r24
    2ba8:	86 95       	lsr	r24
    2baa:	98 2f       	mov	r25, r24
    2bac:	91 70       	andi	r25, 0x01	; 1
    2bae:	86 e1       	ldi	r24, 0x16	; 22
    2bb0:	69 2f       	mov	r22, r25
    2bb2:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_D_PIN,(arr[i]>>3)&1);
    2bb6:	8a ad       	ldd	r24, Y+58	; 0x3a
    2bb8:	28 2f       	mov	r18, r24
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	ce 01       	movw	r24, r28
    2bbe:	cb 96       	adiw	r24, 0x3b	; 59
    2bc0:	fc 01       	movw	r30, r24
    2bc2:	e2 0f       	add	r30, r18
    2bc4:	f3 1f       	adc	r31, r19
    2bc6:	80 81       	ld	r24, Z
    2bc8:	86 95       	lsr	r24
    2bca:	86 95       	lsr	r24
    2bcc:	86 95       	lsr	r24
    2bce:	98 2f       	mov	r25, r24
    2bd0:	91 70       	andi	r25, 0x01	; 1
    2bd2:	88 e1       	ldi	r24, 0x18	; 24
    2bd4:	69 2f       	mov	r22, r25
    2bd6:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
		/*Enable digit 1 (remember it is pnp - active low*/
		M_Dio_void_setPinValue(SSD_DIG1_EN,DIO_LOW);
    2bda:	8d e0       	ldi	r24, 0x0D	; 13
    2bdc:	60 e0       	ldi	r22, 0x00	; 0
    2bde:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
    2be2:	80 e0       	ldi	r24, 0x00	; 0
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	a0 e8       	ldi	r26, 0x80	; 128
    2be8:	bf e3       	ldi	r27, 0x3F	; 63
    2bea:	8d ab       	std	Y+53, r24	; 0x35
    2bec:	9e ab       	std	Y+54, r25	; 0x36
    2bee:	af ab       	std	Y+55, r26	; 0x37
    2bf0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bf2:	6d a9       	ldd	r22, Y+53	; 0x35
    2bf4:	7e a9       	ldd	r23, Y+54	; 0x36
    2bf6:	8f a9       	ldd	r24, Y+55	; 0x37
    2bf8:	98 ad       	ldd	r25, Y+56	; 0x38
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	4a e7       	ldi	r20, 0x7A	; 122
    2c00:	55 e4       	ldi	r21, 0x45	; 69
    2c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	89 ab       	std	Y+49, r24	; 0x31
    2c0c:	9a ab       	std	Y+50, r25	; 0x32
    2c0e:	ab ab       	std	Y+51, r26	; 0x33
    2c10:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c12:	69 a9       	ldd	r22, Y+49	; 0x31
    2c14:	7a a9       	ldd	r23, Y+50	; 0x32
    2c16:	8b a9       	ldd	r24, Y+51	; 0x33
    2c18:	9c a9       	ldd	r25, Y+52	; 0x34
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	40 e8       	ldi	r20, 0x80	; 128
    2c20:	5f e3       	ldi	r21, 0x3F	; 63
    2c22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c26:	88 23       	and	r24, r24
    2c28:	2c f4       	brge	.+10     	; 0x2c34 <H_SSD_void_displayIntNumber+0x16a>
		__ticks = 1;
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	98 ab       	std	Y+48, r25	; 0x30
    2c30:	8f a7       	std	Y+47, r24	; 0x2f
    2c32:	3f c0       	rjmp	.+126    	; 0x2cb2 <H_SSD_void_displayIntNumber+0x1e8>
	else if (__tmp > 65535)
    2c34:	69 a9       	ldd	r22, Y+49	; 0x31
    2c36:	7a a9       	ldd	r23, Y+50	; 0x32
    2c38:	8b a9       	ldd	r24, Y+51	; 0x33
    2c3a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	3f ef       	ldi	r19, 0xFF	; 255
    2c40:	4f e7       	ldi	r20, 0x7F	; 127
    2c42:	57 e4       	ldi	r21, 0x47	; 71
    2c44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c48:	18 16       	cp	r1, r24
    2c4a:	4c f5       	brge	.+82     	; 0x2c9e <H_SSD_void_displayIntNumber+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c4c:	6d a9       	ldd	r22, Y+53	; 0x35
    2c4e:	7e a9       	ldd	r23, Y+54	; 0x36
    2c50:	8f a9       	ldd	r24, Y+55	; 0x37
    2c52:	98 ad       	ldd	r25, Y+56	; 0x38
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	40 e2       	ldi	r20, 0x20	; 32
    2c5a:	51 e4       	ldi	r21, 0x41	; 65
    2c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	bc 01       	movw	r22, r24
    2c66:	cd 01       	movw	r24, r26
    2c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	98 ab       	std	Y+48, r25	; 0x30
    2c72:	8f a7       	std	Y+47, r24	; 0x2f
    2c74:	0f c0       	rjmp	.+30     	; 0x2c94 <H_SSD_void_displayIntNumber+0x1ca>
    2c76:	80 e9       	ldi	r24, 0x90	; 144
    2c78:	91 e0       	ldi	r25, 0x01	; 1
    2c7a:	9e a7       	std	Y+46, r25	; 0x2e
    2c7c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c7e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c80:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c82:	01 97       	sbiw	r24, 0x01	; 1
    2c84:	f1 f7       	brne	.-4      	; 0x2c82 <H_SSD_void_displayIntNumber+0x1b8>
    2c86:	9e a7       	std	Y+46, r25	; 0x2e
    2c88:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c8c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c8e:	01 97       	sbiw	r24, 0x01	; 1
    2c90:	98 ab       	std	Y+48, r25	; 0x30
    2c92:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c94:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c96:	98 a9       	ldd	r25, Y+48	; 0x30
    2c98:	00 97       	sbiw	r24, 0x00	; 0
    2c9a:	69 f7       	brne	.-38     	; 0x2c76 <H_SSD_void_displayIntNumber+0x1ac>
    2c9c:	14 c0       	rjmp	.+40     	; 0x2cc6 <H_SSD_void_displayIntNumber+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c9e:	69 a9       	ldd	r22, Y+49	; 0x31
    2ca0:	7a a9       	ldd	r23, Y+50	; 0x32
    2ca2:	8b a9       	ldd	r24, Y+51	; 0x33
    2ca4:	9c a9       	ldd	r25, Y+52	; 0x34
    2ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2caa:	dc 01       	movw	r26, r24
    2cac:	cb 01       	movw	r24, r22
    2cae:	98 ab       	std	Y+48, r25	; 0x30
    2cb0:	8f a7       	std	Y+47, r24	; 0x2f
    2cb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cb4:	98 a9       	ldd	r25, Y+48	; 0x30
    2cb6:	9c a7       	std	Y+44, r25	; 0x2c
    2cb8:	8b a7       	std	Y+43, r24	; 0x2b
    2cba:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cbc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cbe:	01 97       	sbiw	r24, 0x01	; 1
    2cc0:	f1 f7       	brne	.-4      	; 0x2cbe <H_SSD_void_displayIntNumber+0x1f4>
    2cc2:	9c a7       	std	Y+44, r25	; 0x2c
    2cc4:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		M_Dio_void_setPinValue(SSD_DIG1_EN,DIO_HIGH);
    2cc6:	8d e0       	ldi	r24, 0x0D	; 13
    2cc8:	61 e0       	ldi	r22, 0x01	; 1
    2cca:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
		/*prepare Tens to be send to BCD(4bits)*/
		i=1;
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	8a af       	std	Y+58, r24	; 0x3a
		M_Dio_void_setPinValue(SSD_A_PIN,(arr[i]>>0)&1);
    2cd2:	8a ad       	ldd	r24, Y+58	; 0x3a
    2cd4:	28 2f       	mov	r18, r24
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	ce 01       	movw	r24, r28
    2cda:	cb 96       	adiw	r24, 0x3b	; 59
    2cdc:	fc 01       	movw	r30, r24
    2cde:	e2 0f       	add	r30, r18
    2ce0:	f3 1f       	adc	r31, r19
    2ce2:	80 81       	ld	r24, Z
    2ce4:	98 2f       	mov	r25, r24
    2ce6:	91 70       	andi	r25, 0x01	; 1
    2ce8:	84 e1       	ldi	r24, 0x14	; 20
    2cea:	69 2f       	mov	r22, r25
    2cec:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_B_PIN,(arr[i]>>1)&1);
    2cf0:	8a ad       	ldd	r24, Y+58	; 0x3a
    2cf2:	28 2f       	mov	r18, r24
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	ce 01       	movw	r24, r28
    2cf8:	cb 96       	adiw	r24, 0x3b	; 59
    2cfa:	fc 01       	movw	r30, r24
    2cfc:	e2 0f       	add	r30, r18
    2cfe:	f3 1f       	adc	r31, r19
    2d00:	80 81       	ld	r24, Z
    2d02:	86 95       	lsr	r24
    2d04:	98 2f       	mov	r25, r24
    2d06:	91 70       	andi	r25, 0x01	; 1
    2d08:	85 e1       	ldi	r24, 0x15	; 21
    2d0a:	69 2f       	mov	r22, r25
    2d0c:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_C_PIN,(arr[i]>>2)&1);
    2d10:	8a ad       	ldd	r24, Y+58	; 0x3a
    2d12:	28 2f       	mov	r18, r24
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	ce 01       	movw	r24, r28
    2d18:	cb 96       	adiw	r24, 0x3b	; 59
    2d1a:	fc 01       	movw	r30, r24
    2d1c:	e2 0f       	add	r30, r18
    2d1e:	f3 1f       	adc	r31, r19
    2d20:	80 81       	ld	r24, Z
    2d22:	86 95       	lsr	r24
    2d24:	86 95       	lsr	r24
    2d26:	98 2f       	mov	r25, r24
    2d28:	91 70       	andi	r25, 0x01	; 1
    2d2a:	86 e1       	ldi	r24, 0x16	; 22
    2d2c:	69 2f       	mov	r22, r25
    2d2e:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_D_PIN,(arr[i]>>3)&1);
    2d32:	8a ad       	ldd	r24, Y+58	; 0x3a
    2d34:	28 2f       	mov	r18, r24
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	ce 01       	movw	r24, r28
    2d3a:	cb 96       	adiw	r24, 0x3b	; 59
    2d3c:	fc 01       	movw	r30, r24
    2d3e:	e2 0f       	add	r30, r18
    2d40:	f3 1f       	adc	r31, r19
    2d42:	80 81       	ld	r24, Z
    2d44:	86 95       	lsr	r24
    2d46:	86 95       	lsr	r24
    2d48:	86 95       	lsr	r24
    2d4a:	98 2f       	mov	r25, r24
    2d4c:	91 70       	andi	r25, 0x01	; 1
    2d4e:	88 e1       	ldi	r24, 0x18	; 24
    2d50:	69 2f       	mov	r22, r25
    2d52:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
		/*Enable digit 2 (remember it is pnp - active low*/
		M_Dio_void_setPinValue(SSD_DIG2_EN,DIO_LOW);
    2d56:	8c e0       	ldi	r24, 0x0C	; 12
    2d58:	60 e0       	ldi	r22, 0x00	; 0
    2d5a:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
    2d5e:	80 e0       	ldi	r24, 0x00	; 0
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	a0 e8       	ldi	r26, 0x80	; 128
    2d64:	bf e3       	ldi	r27, 0x3F	; 63
    2d66:	8f a3       	std	Y+39, r24	; 0x27
    2d68:	98 a7       	std	Y+40, r25	; 0x28
    2d6a:	a9 a7       	std	Y+41, r26	; 0x29
    2d6c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d6e:	6f a1       	ldd	r22, Y+39	; 0x27
    2d70:	78 a5       	ldd	r23, Y+40	; 0x28
    2d72:	89 a5       	ldd	r24, Y+41	; 0x29
    2d74:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	4a e7       	ldi	r20, 0x7A	; 122
    2d7c:	55 e4       	ldi	r21, 0x45	; 69
    2d7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	8b a3       	std	Y+35, r24	; 0x23
    2d88:	9c a3       	std	Y+36, r25	; 0x24
    2d8a:	ad a3       	std	Y+37, r26	; 0x25
    2d8c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d8e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d90:	7c a1       	ldd	r23, Y+36	; 0x24
    2d92:	8d a1       	ldd	r24, Y+37	; 0x25
    2d94:	9e a1       	ldd	r25, Y+38	; 0x26
    2d96:	20 e0       	ldi	r18, 0x00	; 0
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	40 e8       	ldi	r20, 0x80	; 128
    2d9c:	5f e3       	ldi	r21, 0x3F	; 63
    2d9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2da2:	88 23       	and	r24, r24
    2da4:	2c f4       	brge	.+10     	; 0x2db0 <H_SSD_void_displayIntNumber+0x2e6>
		__ticks = 1;
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	9a a3       	std	Y+34, r25	; 0x22
    2dac:	89 a3       	std	Y+33, r24	; 0x21
    2dae:	3f c0       	rjmp	.+126    	; 0x2e2e <H_SSD_void_displayIntNumber+0x364>
	else if (__tmp > 65535)
    2db0:	6b a1       	ldd	r22, Y+35	; 0x23
    2db2:	7c a1       	ldd	r23, Y+36	; 0x24
    2db4:	8d a1       	ldd	r24, Y+37	; 0x25
    2db6:	9e a1       	ldd	r25, Y+38	; 0x26
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	3f ef       	ldi	r19, 0xFF	; 255
    2dbc:	4f e7       	ldi	r20, 0x7F	; 127
    2dbe:	57 e4       	ldi	r21, 0x47	; 71
    2dc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dc4:	18 16       	cp	r1, r24
    2dc6:	4c f5       	brge	.+82     	; 0x2e1a <H_SSD_void_displayIntNumber+0x350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc8:	6f a1       	ldd	r22, Y+39	; 0x27
    2dca:	78 a5       	ldd	r23, Y+40	; 0x28
    2dcc:	89 a5       	ldd	r24, Y+41	; 0x29
    2dce:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	40 e2       	ldi	r20, 0x20	; 32
    2dd6:	51 e4       	ldi	r21, 0x41	; 65
    2dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	bc 01       	movw	r22, r24
    2de2:	cd 01       	movw	r24, r26
    2de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	9a a3       	std	Y+34, r25	; 0x22
    2dee:	89 a3       	std	Y+33, r24	; 0x21
    2df0:	0f c0       	rjmp	.+30     	; 0x2e10 <H_SSD_void_displayIntNumber+0x346>
    2df2:	80 e9       	ldi	r24, 0x90	; 144
    2df4:	91 e0       	ldi	r25, 0x01	; 1
    2df6:	98 a3       	std	Y+32, r25	; 0x20
    2df8:	8f 8f       	std	Y+31, r24	; 0x1f
    2dfa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2dfc:	98 a1       	ldd	r25, Y+32	; 0x20
    2dfe:	01 97       	sbiw	r24, 0x01	; 1
    2e00:	f1 f7       	brne	.-4      	; 0x2dfe <H_SSD_void_displayIntNumber+0x334>
    2e02:	98 a3       	std	Y+32, r25	; 0x20
    2e04:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e06:	89 a1       	ldd	r24, Y+33	; 0x21
    2e08:	9a a1       	ldd	r25, Y+34	; 0x22
    2e0a:	01 97       	sbiw	r24, 0x01	; 1
    2e0c:	9a a3       	std	Y+34, r25	; 0x22
    2e0e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e10:	89 a1       	ldd	r24, Y+33	; 0x21
    2e12:	9a a1       	ldd	r25, Y+34	; 0x22
    2e14:	00 97       	sbiw	r24, 0x00	; 0
    2e16:	69 f7       	brne	.-38     	; 0x2df2 <H_SSD_void_displayIntNumber+0x328>
    2e18:	14 c0       	rjmp	.+40     	; 0x2e42 <H_SSD_void_displayIntNumber+0x378>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e1a:	6b a1       	ldd	r22, Y+35	; 0x23
    2e1c:	7c a1       	ldd	r23, Y+36	; 0x24
    2e1e:	8d a1       	ldd	r24, Y+37	; 0x25
    2e20:	9e a1       	ldd	r25, Y+38	; 0x26
    2e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	9a a3       	std	Y+34, r25	; 0x22
    2e2c:	89 a3       	std	Y+33, r24	; 0x21
    2e2e:	89 a1       	ldd	r24, Y+33	; 0x21
    2e30:	9a a1       	ldd	r25, Y+34	; 0x22
    2e32:	9e 8f       	std	Y+30, r25	; 0x1e
    2e34:	8d 8f       	std	Y+29, r24	; 0x1d
    2e36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e38:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e3a:	01 97       	sbiw	r24, 0x01	; 1
    2e3c:	f1 f7       	brne	.-4      	; 0x2e3a <H_SSD_void_displayIntNumber+0x370>
    2e3e:	9e 8f       	std	Y+30, r25	; 0x1e
    2e40:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		M_Dio_void_setPinValue(SSD_DIG2_EN,DIO_HIGH);
    2e42:	8c e0       	ldi	r24, 0x0C	; 12
    2e44:	61 e0       	ldi	r22, 0x01	; 1
    2e46:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
		/*prepare hundreds to be send to BCD*/
		i=2;
    2e4a:	82 e0       	ldi	r24, 0x02	; 2
    2e4c:	8a af       	std	Y+58, r24	; 0x3a
		M_Dio_void_setPinValue(SSD_A_PIN,(arr[i]>>0)&1);
    2e4e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e50:	28 2f       	mov	r18, r24
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	ce 01       	movw	r24, r28
    2e56:	cb 96       	adiw	r24, 0x3b	; 59
    2e58:	fc 01       	movw	r30, r24
    2e5a:	e2 0f       	add	r30, r18
    2e5c:	f3 1f       	adc	r31, r19
    2e5e:	80 81       	ld	r24, Z
    2e60:	98 2f       	mov	r25, r24
    2e62:	91 70       	andi	r25, 0x01	; 1
    2e64:	84 e1       	ldi	r24, 0x14	; 20
    2e66:	69 2f       	mov	r22, r25
    2e68:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_B_PIN,(arr[i]>>1)&1);
    2e6c:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e6e:	28 2f       	mov	r18, r24
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	ce 01       	movw	r24, r28
    2e74:	cb 96       	adiw	r24, 0x3b	; 59
    2e76:	fc 01       	movw	r30, r24
    2e78:	e2 0f       	add	r30, r18
    2e7a:	f3 1f       	adc	r31, r19
    2e7c:	80 81       	ld	r24, Z
    2e7e:	86 95       	lsr	r24
    2e80:	98 2f       	mov	r25, r24
    2e82:	91 70       	andi	r25, 0x01	; 1
    2e84:	85 e1       	ldi	r24, 0x15	; 21
    2e86:	69 2f       	mov	r22, r25
    2e88:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_C_PIN,(arr[i]>>2)&1);
    2e8c:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e8e:	28 2f       	mov	r18, r24
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	ce 01       	movw	r24, r28
    2e94:	cb 96       	adiw	r24, 0x3b	; 59
    2e96:	fc 01       	movw	r30, r24
    2e98:	e2 0f       	add	r30, r18
    2e9a:	f3 1f       	adc	r31, r19
    2e9c:	80 81       	ld	r24, Z
    2e9e:	86 95       	lsr	r24
    2ea0:	86 95       	lsr	r24
    2ea2:	98 2f       	mov	r25, r24
    2ea4:	91 70       	andi	r25, 0x01	; 1
    2ea6:	86 e1       	ldi	r24, 0x16	; 22
    2ea8:	69 2f       	mov	r22, r25
    2eaa:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_D_PIN,(arr[i]>>3)&1);
    2eae:	8a ad       	ldd	r24, Y+58	; 0x3a
    2eb0:	28 2f       	mov	r18, r24
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	ce 01       	movw	r24, r28
    2eb6:	cb 96       	adiw	r24, 0x3b	; 59
    2eb8:	fc 01       	movw	r30, r24
    2eba:	e2 0f       	add	r30, r18
    2ebc:	f3 1f       	adc	r31, r19
    2ebe:	80 81       	ld	r24, Z
    2ec0:	86 95       	lsr	r24
    2ec2:	86 95       	lsr	r24
    2ec4:	86 95       	lsr	r24
    2ec6:	98 2f       	mov	r25, r24
    2ec8:	91 70       	andi	r25, 0x01	; 1
    2eca:	88 e1       	ldi	r24, 0x18	; 24
    2ecc:	69 2f       	mov	r22, r25
    2ece:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
		/*Enable digit 2 (remember it is pnp - active low*/
		M_Dio_void_setPinValue(SSD_DIG3_EN,DIO_LOW);
    2ed2:	89 e1       	ldi	r24, 0x19	; 25
    2ed4:	60 e0       	ldi	r22, 0x00	; 0
    2ed6:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
    2eda:	80 e0       	ldi	r24, 0x00	; 0
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	a0 e8       	ldi	r26, 0x80	; 128
    2ee0:	bf e3       	ldi	r27, 0x3F	; 63
    2ee2:	89 8f       	std	Y+25, r24	; 0x19
    2ee4:	9a 8f       	std	Y+26, r25	; 0x1a
    2ee6:	ab 8f       	std	Y+27, r26	; 0x1b
    2ee8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eea:	69 8d       	ldd	r22, Y+25	; 0x19
    2eec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2eee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ef0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	4a e7       	ldi	r20, 0x7A	; 122
    2ef8:	55 e4       	ldi	r21, 0x45	; 69
    2efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	8d 8b       	std	Y+21, r24	; 0x15
    2f04:	9e 8b       	std	Y+22, r25	; 0x16
    2f06:	af 8b       	std	Y+23, r26	; 0x17
    2f08:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f0a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f0c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f0e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f10:	98 8d       	ldd	r25, Y+24	; 0x18
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	40 e8       	ldi	r20, 0x80	; 128
    2f18:	5f e3       	ldi	r21, 0x3F	; 63
    2f1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f1e:	88 23       	and	r24, r24
    2f20:	2c f4       	brge	.+10     	; 0x2f2c <H_SSD_void_displayIntNumber+0x462>
		__ticks = 1;
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	9c 8b       	std	Y+20, r25	; 0x14
    2f28:	8b 8b       	std	Y+19, r24	; 0x13
    2f2a:	3f c0       	rjmp	.+126    	; 0x2faa <H_SSD_void_displayIntNumber+0x4e0>
	else if (__tmp > 65535)
    2f2c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f2e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f30:	8f 89       	ldd	r24, Y+23	; 0x17
    2f32:	98 8d       	ldd	r25, Y+24	; 0x18
    2f34:	20 e0       	ldi	r18, 0x00	; 0
    2f36:	3f ef       	ldi	r19, 0xFF	; 255
    2f38:	4f e7       	ldi	r20, 0x7F	; 127
    2f3a:	57 e4       	ldi	r21, 0x47	; 71
    2f3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f40:	18 16       	cp	r1, r24
    2f42:	4c f5       	brge	.+82     	; 0x2f96 <H_SSD_void_displayIntNumber+0x4cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f44:	69 8d       	ldd	r22, Y+25	; 0x19
    2f46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	40 e2       	ldi	r20, 0x20	; 32
    2f52:	51 e4       	ldi	r21, 0x41	; 65
    2f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	bc 01       	movw	r22, r24
    2f5e:	cd 01       	movw	r24, r26
    2f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f64:	dc 01       	movw	r26, r24
    2f66:	cb 01       	movw	r24, r22
    2f68:	9c 8b       	std	Y+20, r25	; 0x14
    2f6a:	8b 8b       	std	Y+19, r24	; 0x13
    2f6c:	0f c0       	rjmp	.+30     	; 0x2f8c <H_SSD_void_displayIntNumber+0x4c2>
    2f6e:	80 e9       	ldi	r24, 0x90	; 144
    2f70:	91 e0       	ldi	r25, 0x01	; 1
    2f72:	9a 8b       	std	Y+18, r25	; 0x12
    2f74:	89 8b       	std	Y+17, r24	; 0x11
    2f76:	89 89       	ldd	r24, Y+17	; 0x11
    2f78:	9a 89       	ldd	r25, Y+18	; 0x12
    2f7a:	01 97       	sbiw	r24, 0x01	; 1
    2f7c:	f1 f7       	brne	.-4      	; 0x2f7a <H_SSD_void_displayIntNumber+0x4b0>
    2f7e:	9a 8b       	std	Y+18, r25	; 0x12
    2f80:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f82:	8b 89       	ldd	r24, Y+19	; 0x13
    2f84:	9c 89       	ldd	r25, Y+20	; 0x14
    2f86:	01 97       	sbiw	r24, 0x01	; 1
    2f88:	9c 8b       	std	Y+20, r25	; 0x14
    2f8a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f8c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f8e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f90:	00 97       	sbiw	r24, 0x00	; 0
    2f92:	69 f7       	brne	.-38     	; 0x2f6e <H_SSD_void_displayIntNumber+0x4a4>
    2f94:	14 c0       	rjmp	.+40     	; 0x2fbe <H_SSD_void_displayIntNumber+0x4f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f96:	6d 89       	ldd	r22, Y+21	; 0x15
    2f98:	7e 89       	ldd	r23, Y+22	; 0x16
    2f9a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f9c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	9c 8b       	std	Y+20, r25	; 0x14
    2fa8:	8b 8b       	std	Y+19, r24	; 0x13
    2faa:	8b 89       	ldd	r24, Y+19	; 0x13
    2fac:	9c 89       	ldd	r25, Y+20	; 0x14
    2fae:	98 8b       	std	Y+16, r25	; 0x10
    2fb0:	8f 87       	std	Y+15, r24	; 0x0f
    2fb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fb4:	98 89       	ldd	r25, Y+16	; 0x10
    2fb6:	01 97       	sbiw	r24, 0x01	; 1
    2fb8:	f1 f7       	brne	.-4      	; 0x2fb6 <H_SSD_void_displayIntNumber+0x4ec>
    2fba:	98 8b       	std	Y+16, r25	; 0x10
    2fbc:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		M_Dio_void_setPinValue(SSD_DIG3_EN,DIO_HIGH);
    2fbe:	89 e1       	ldi	r24, 0x19	; 25
    2fc0:	61 e0       	ldi	r22, 0x01	; 1
    2fc2:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
		/*prepare hundreds to be send to BCD*/
		i=3;
    2fc6:	83 e0       	ldi	r24, 0x03	; 3
    2fc8:	8a af       	std	Y+58, r24	; 0x3a
		M_Dio_void_setPinValue(SSD_A_PIN,(arr[i]>>0)&1);
    2fca:	8a ad       	ldd	r24, Y+58	; 0x3a
    2fcc:	28 2f       	mov	r18, r24
    2fce:	30 e0       	ldi	r19, 0x00	; 0
    2fd0:	ce 01       	movw	r24, r28
    2fd2:	cb 96       	adiw	r24, 0x3b	; 59
    2fd4:	fc 01       	movw	r30, r24
    2fd6:	e2 0f       	add	r30, r18
    2fd8:	f3 1f       	adc	r31, r19
    2fda:	80 81       	ld	r24, Z
    2fdc:	98 2f       	mov	r25, r24
    2fde:	91 70       	andi	r25, 0x01	; 1
    2fe0:	84 e1       	ldi	r24, 0x14	; 20
    2fe2:	69 2f       	mov	r22, r25
    2fe4:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_B_PIN,(arr[i]>>1)&1);
    2fe8:	8a ad       	ldd	r24, Y+58	; 0x3a
    2fea:	28 2f       	mov	r18, r24
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	ce 01       	movw	r24, r28
    2ff0:	cb 96       	adiw	r24, 0x3b	; 59
    2ff2:	fc 01       	movw	r30, r24
    2ff4:	e2 0f       	add	r30, r18
    2ff6:	f3 1f       	adc	r31, r19
    2ff8:	80 81       	ld	r24, Z
    2ffa:	86 95       	lsr	r24
    2ffc:	98 2f       	mov	r25, r24
    2ffe:	91 70       	andi	r25, 0x01	; 1
    3000:	85 e1       	ldi	r24, 0x15	; 21
    3002:	69 2f       	mov	r22, r25
    3004:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_C_PIN,(arr[i]>>2)&1);
    3008:	8a ad       	ldd	r24, Y+58	; 0x3a
    300a:	28 2f       	mov	r18, r24
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	ce 01       	movw	r24, r28
    3010:	cb 96       	adiw	r24, 0x3b	; 59
    3012:	fc 01       	movw	r30, r24
    3014:	e2 0f       	add	r30, r18
    3016:	f3 1f       	adc	r31, r19
    3018:	80 81       	ld	r24, Z
    301a:	86 95       	lsr	r24
    301c:	86 95       	lsr	r24
    301e:	98 2f       	mov	r25, r24
    3020:	91 70       	andi	r25, 0x01	; 1
    3022:	86 e1       	ldi	r24, 0x16	; 22
    3024:	69 2f       	mov	r22, r25
    3026:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(SSD_D_PIN,(arr[i]>>3)&1);
    302a:	8a ad       	ldd	r24, Y+58	; 0x3a
    302c:	28 2f       	mov	r18, r24
    302e:	30 e0       	ldi	r19, 0x00	; 0
    3030:	ce 01       	movw	r24, r28
    3032:	cb 96       	adiw	r24, 0x3b	; 59
    3034:	fc 01       	movw	r30, r24
    3036:	e2 0f       	add	r30, r18
    3038:	f3 1f       	adc	r31, r19
    303a:	80 81       	ld	r24, Z
    303c:	86 95       	lsr	r24
    303e:	86 95       	lsr	r24
    3040:	86 95       	lsr	r24
    3042:	98 2f       	mov	r25, r24
    3044:	91 70       	andi	r25, 0x01	; 1
    3046:	88 e1       	ldi	r24, 0x18	; 24
    3048:	69 2f       	mov	r22, r25
    304a:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
		/*Enable digit 2 (remember it is pnp - active low*/
		M_Dio_void_setPinValue(SSD_DIG4_EN,DIO_LOW);
    304e:	8a e1       	ldi	r24, 0x1A	; 26
    3050:	60 e0       	ldi	r22, 0x00	; 0
    3052:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
    3056:	80 e0       	ldi	r24, 0x00	; 0
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	a0 e8       	ldi	r26, 0x80	; 128
    305c:	bf e3       	ldi	r27, 0x3F	; 63
    305e:	8b 87       	std	Y+11, r24	; 0x0b
    3060:	9c 87       	std	Y+12, r25	; 0x0c
    3062:	ad 87       	std	Y+13, r26	; 0x0d
    3064:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3066:	6b 85       	ldd	r22, Y+11	; 0x0b
    3068:	7c 85       	ldd	r23, Y+12	; 0x0c
    306a:	8d 85       	ldd	r24, Y+13	; 0x0d
    306c:	9e 85       	ldd	r25, Y+14	; 0x0e
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	4a e7       	ldi	r20, 0x7A	; 122
    3074:	55 e4       	ldi	r21, 0x45	; 69
    3076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307a:	dc 01       	movw	r26, r24
    307c:	cb 01       	movw	r24, r22
    307e:	8f 83       	std	Y+7, r24	; 0x07
    3080:	98 87       	std	Y+8, r25	; 0x08
    3082:	a9 87       	std	Y+9, r26	; 0x09
    3084:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3086:	6f 81       	ldd	r22, Y+7	; 0x07
    3088:	78 85       	ldd	r23, Y+8	; 0x08
    308a:	89 85       	ldd	r24, Y+9	; 0x09
    308c:	9a 85       	ldd	r25, Y+10	; 0x0a
    308e:	20 e0       	ldi	r18, 0x00	; 0
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	40 e8       	ldi	r20, 0x80	; 128
    3094:	5f e3       	ldi	r21, 0x3F	; 63
    3096:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    309a:	88 23       	and	r24, r24
    309c:	2c f4       	brge	.+10     	; 0x30a8 <H_SSD_void_displayIntNumber+0x5de>
		__ticks = 1;
    309e:	81 e0       	ldi	r24, 0x01	; 1
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	9e 83       	std	Y+6, r25	; 0x06
    30a4:	8d 83       	std	Y+5, r24	; 0x05
    30a6:	3f c0       	rjmp	.+126    	; 0x3126 <H_SSD_void_displayIntNumber+0x65c>
	else if (__tmp > 65535)
    30a8:	6f 81       	ldd	r22, Y+7	; 0x07
    30aa:	78 85       	ldd	r23, Y+8	; 0x08
    30ac:	89 85       	ldd	r24, Y+9	; 0x09
    30ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	3f ef       	ldi	r19, 0xFF	; 255
    30b4:	4f e7       	ldi	r20, 0x7F	; 127
    30b6:	57 e4       	ldi	r21, 0x47	; 71
    30b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30bc:	18 16       	cp	r1, r24
    30be:	4c f5       	brge	.+82     	; 0x3112 <H_SSD_void_displayIntNumber+0x648>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    30c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    30c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30c8:	20 e0       	ldi	r18, 0x00	; 0
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	40 e2       	ldi	r20, 0x20	; 32
    30ce:	51 e4       	ldi	r21, 0x41	; 65
    30d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d4:	dc 01       	movw	r26, r24
    30d6:	cb 01       	movw	r24, r22
    30d8:	bc 01       	movw	r22, r24
    30da:	cd 01       	movw	r24, r26
    30dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e0:	dc 01       	movw	r26, r24
    30e2:	cb 01       	movw	r24, r22
    30e4:	9e 83       	std	Y+6, r25	; 0x06
    30e6:	8d 83       	std	Y+5, r24	; 0x05
    30e8:	0f c0       	rjmp	.+30     	; 0x3108 <H_SSD_void_displayIntNumber+0x63e>
    30ea:	80 e9       	ldi	r24, 0x90	; 144
    30ec:	91 e0       	ldi	r25, 0x01	; 1
    30ee:	9c 83       	std	Y+4, r25	; 0x04
    30f0:	8b 83       	std	Y+3, r24	; 0x03
    30f2:	8b 81       	ldd	r24, Y+3	; 0x03
    30f4:	9c 81       	ldd	r25, Y+4	; 0x04
    30f6:	01 97       	sbiw	r24, 0x01	; 1
    30f8:	f1 f7       	brne	.-4      	; 0x30f6 <H_SSD_void_displayIntNumber+0x62c>
    30fa:	9c 83       	std	Y+4, r25	; 0x04
    30fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3100:	9e 81       	ldd	r25, Y+6	; 0x06
    3102:	01 97       	sbiw	r24, 0x01	; 1
    3104:	9e 83       	std	Y+6, r25	; 0x06
    3106:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3108:	8d 81       	ldd	r24, Y+5	; 0x05
    310a:	9e 81       	ldd	r25, Y+6	; 0x06
    310c:	00 97       	sbiw	r24, 0x00	; 0
    310e:	69 f7       	brne	.-38     	; 0x30ea <H_SSD_void_displayIntNumber+0x620>
    3110:	14 c0       	rjmp	.+40     	; 0x313a <H_SSD_void_displayIntNumber+0x670>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3112:	6f 81       	ldd	r22, Y+7	; 0x07
    3114:	78 85       	ldd	r23, Y+8	; 0x08
    3116:	89 85       	ldd	r24, Y+9	; 0x09
    3118:	9a 85       	ldd	r25, Y+10	; 0x0a
    311a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    311e:	dc 01       	movw	r26, r24
    3120:	cb 01       	movw	r24, r22
    3122:	9e 83       	std	Y+6, r25	; 0x06
    3124:	8d 83       	std	Y+5, r24	; 0x05
    3126:	8d 81       	ldd	r24, Y+5	; 0x05
    3128:	9e 81       	ldd	r25, Y+6	; 0x06
    312a:	9a 83       	std	Y+2, r25	; 0x02
    312c:	89 83       	std	Y+1, r24	; 0x01
    312e:	89 81       	ldd	r24, Y+1	; 0x01
    3130:	9a 81       	ldd	r25, Y+2	; 0x02
    3132:	01 97       	sbiw	r24, 0x01	; 1
    3134:	f1 f7       	brne	.-4      	; 0x3132 <H_SSD_void_displayIntNumber+0x668>
    3136:	9a 83       	std	Y+2, r25	; 0x02
    3138:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		M_Dio_void_setPinValue(SSD_DIG4_EN,DIO_HIGH);
    313a:	8a e1       	ldi	r24, 0x1A	; 26
    313c:	61 e0       	ldi	r22, 0x01	; 1
    313e:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
		arr[i]= Copy_number %10;
		Copy_number /= 10;
		i++;
	}
	/*prepare units to be send to BCD(4bits)*/
	for(u8 j=0;j<SSD_DISPLAY_TIME*4;j++)
    3142:	89 ad       	ldd	r24, Y+57	; 0x39
    3144:	8f 5f       	subi	r24, 0xFF	; 255
    3146:	89 af       	std	Y+57, r24	; 0x39
    3148:	05 cd       	rjmp	.-1526   	; 0x2b54 <H_SSD_void_displayIntNumber+0x8a>

0000314a <H_readPB>:
#include"PB_Types.h"
#include"PB_CFG.h"
#include"PB_Init.h"

PB_State H_readPB(PB_ID PushBID,PB_ActiveType Mode)
{
    314a:	df 93       	push	r29
    314c:	cf 93       	push	r28
    314e:	cd b7       	in	r28, 0x3d	; 61
    3150:	de b7       	in	r29, 0x3e	; 62
    3152:	64 97       	sbiw	r28, 0x14	; 20
    3154:	0f b6       	in	r0, 0x3f	; 63
    3156:	f8 94       	cli
    3158:	de bf       	out	0x3e, r29	; 62
    315a:	0f be       	out	0x3f, r0	; 63
    315c:	cd bf       	out	0x3d, r28	; 61
    315e:	89 8b       	std	Y+17, r24	; 0x11
    3160:	6a 8b       	std	Y+18, r22	; 0x12
	PB_State Button_state=PB_RELEASED;
    3162:	81 e0       	ldi	r24, 0x01	; 1
    3164:	88 8b       	std	Y+16, r24	; 0x10
	Dio_LevelType Local_pin_value;
	switch(PushBID)
    3166:	89 89       	ldd	r24, Y+17	; 0x11
    3168:	28 2f       	mov	r18, r24
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	3c 8b       	std	Y+20, r19	; 0x14
    316e:	2b 8b       	std	Y+19, r18	; 0x13
    3170:	8b 89       	ldd	r24, Y+19	; 0x13
    3172:	9c 89       	ldd	r25, Y+20	; 0x14
    3174:	81 30       	cpi	r24, 0x01	; 1
    3176:	91 05       	cpc	r25, r1
    3178:	09 f4       	brne	.+2      	; 0x317c <H_readPB+0x32>
    317a:	9b c0       	rjmp	.+310    	; 0x32b2 <H_readPB+0x168>
    317c:	2b 89       	ldd	r18, Y+19	; 0x13
    317e:	3c 89       	ldd	r19, Y+20	; 0x14
    3180:	22 30       	cpi	r18, 0x02	; 2
    3182:	31 05       	cpc	r19, r1
    3184:	2c f4       	brge	.+10     	; 0x3190 <H_readPB+0x46>
    3186:	8b 89       	ldd	r24, Y+19	; 0x13
    3188:	9c 89       	ldd	r25, Y+20	; 0x14
    318a:	00 97       	sbiw	r24, 0x00	; 0
    318c:	71 f0       	breq	.+28     	; 0x31aa <H_readPB+0x60>
    318e:	c3 c0       	rjmp	.+390    	; 0x3316 <H_readPB+0x1cc>
    3190:	2b 89       	ldd	r18, Y+19	; 0x13
    3192:	3c 89       	ldd	r19, Y+20	; 0x14
    3194:	22 30       	cpi	r18, 0x02	; 2
    3196:	31 05       	cpc	r19, r1
    3198:	09 f4       	brne	.+2      	; 0x319c <H_readPB+0x52>
    319a:	9c c0       	rjmp	.+312    	; 0x32d4 <H_readPB+0x18a>
    319c:	8b 89       	ldd	r24, Y+19	; 0x13
    319e:	9c 89       	ldd	r25, Y+20	; 0x14
    31a0:	83 30       	cpi	r24, 0x03	; 3
    31a2:	91 05       	cpc	r25, r1
    31a4:	09 f4       	brne	.+2      	; 0x31a8 <H_readPB+0x5e>
    31a6:	a7 c0       	rjmp	.+334    	; 0x32f6 <H_readPB+0x1ac>
    31a8:	b6 c0       	rjmp	.+364    	; 0x3316 <H_readPB+0x1cc>
	{
	case PB_ID1:
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW1);
    31aa:	8f e2       	ldi	r24, 0x2F	; 47
    31ac:	0e 94 82 10 	call	0x2104	; 0x2104 <M_Dio_en_getPinValue>
    31b0:	8f 87       	std	Y+15, r24	; 0x0f
		if(Local_pin_value==PB_PRESSED_ACTL)
    31b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    31b4:	88 23       	and	r24, r24
    31b6:	09 f0       	breq	.+2      	; 0x31ba <H_readPB+0x70>
    31b8:	ae c0       	rjmp	.+348    	; 0x3316 <H_readPB+0x1cc>
    31ba:	80 e0       	ldi	r24, 0x00	; 0
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	a8 e4       	ldi	r26, 0x48	; 72
    31c0:	b2 e4       	ldi	r27, 0x42	; 66
    31c2:	8b 87       	std	Y+11, r24	; 0x0b
    31c4:	9c 87       	std	Y+12, r25	; 0x0c
    31c6:	ad 87       	std	Y+13, r26	; 0x0d
    31c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    31cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    31ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    31d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    31d2:	20 e0       	ldi	r18, 0x00	; 0
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	4a e7       	ldi	r20, 0x7A	; 122
    31d8:	55 e4       	ldi	r21, 0x45	; 69
    31da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31de:	dc 01       	movw	r26, r24
    31e0:	cb 01       	movw	r24, r22
    31e2:	8f 83       	std	Y+7, r24	; 0x07
    31e4:	98 87       	std	Y+8, r25	; 0x08
    31e6:	a9 87       	std	Y+9, r26	; 0x09
    31e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31ea:	6f 81       	ldd	r22, Y+7	; 0x07
    31ec:	78 85       	ldd	r23, Y+8	; 0x08
    31ee:	89 85       	ldd	r24, Y+9	; 0x09
    31f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f2:	20 e0       	ldi	r18, 0x00	; 0
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	40 e8       	ldi	r20, 0x80	; 128
    31f8:	5f e3       	ldi	r21, 0x3F	; 63
    31fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31fe:	88 23       	and	r24, r24
    3200:	2c f4       	brge	.+10     	; 0x320c <H_readPB+0xc2>
		__ticks = 1;
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	9e 83       	std	Y+6, r25	; 0x06
    3208:	8d 83       	std	Y+5, r24	; 0x05
    320a:	3f c0       	rjmp	.+126    	; 0x328a <H_readPB+0x140>
	else if (__tmp > 65535)
    320c:	6f 81       	ldd	r22, Y+7	; 0x07
    320e:	78 85       	ldd	r23, Y+8	; 0x08
    3210:	89 85       	ldd	r24, Y+9	; 0x09
    3212:	9a 85       	ldd	r25, Y+10	; 0x0a
    3214:	20 e0       	ldi	r18, 0x00	; 0
    3216:	3f ef       	ldi	r19, 0xFF	; 255
    3218:	4f e7       	ldi	r20, 0x7F	; 127
    321a:	57 e4       	ldi	r21, 0x47	; 71
    321c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3220:	18 16       	cp	r1, r24
    3222:	4c f5       	brge	.+82     	; 0x3276 <H_readPB+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3224:	6b 85       	ldd	r22, Y+11	; 0x0b
    3226:	7c 85       	ldd	r23, Y+12	; 0x0c
    3228:	8d 85       	ldd	r24, Y+13	; 0x0d
    322a:	9e 85       	ldd	r25, Y+14	; 0x0e
    322c:	20 e0       	ldi	r18, 0x00	; 0
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	40 e2       	ldi	r20, 0x20	; 32
    3232:	51 e4       	ldi	r21, 0x41	; 65
    3234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3238:	dc 01       	movw	r26, r24
    323a:	cb 01       	movw	r24, r22
    323c:	bc 01       	movw	r22, r24
    323e:	cd 01       	movw	r24, r26
    3240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3244:	dc 01       	movw	r26, r24
    3246:	cb 01       	movw	r24, r22
    3248:	9e 83       	std	Y+6, r25	; 0x06
    324a:	8d 83       	std	Y+5, r24	; 0x05
    324c:	0f c0       	rjmp	.+30     	; 0x326c <H_readPB+0x122>
    324e:	80 e9       	ldi	r24, 0x90	; 144
    3250:	91 e0       	ldi	r25, 0x01	; 1
    3252:	9c 83       	std	Y+4, r25	; 0x04
    3254:	8b 83       	std	Y+3, r24	; 0x03
    3256:	8b 81       	ldd	r24, Y+3	; 0x03
    3258:	9c 81       	ldd	r25, Y+4	; 0x04
    325a:	01 97       	sbiw	r24, 0x01	; 1
    325c:	f1 f7       	brne	.-4      	; 0x325a <H_readPB+0x110>
    325e:	9c 83       	std	Y+4, r25	; 0x04
    3260:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3262:	8d 81       	ldd	r24, Y+5	; 0x05
    3264:	9e 81       	ldd	r25, Y+6	; 0x06
    3266:	01 97       	sbiw	r24, 0x01	; 1
    3268:	9e 83       	std	Y+6, r25	; 0x06
    326a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    326c:	8d 81       	ldd	r24, Y+5	; 0x05
    326e:	9e 81       	ldd	r25, Y+6	; 0x06
    3270:	00 97       	sbiw	r24, 0x00	; 0
    3272:	69 f7       	brne	.-38     	; 0x324e <H_readPB+0x104>
    3274:	19 c0       	rjmp	.+50     	; 0x32a8 <H_readPB+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3276:	6f 81       	ldd	r22, Y+7	; 0x07
    3278:	78 85       	ldd	r23, Y+8	; 0x08
    327a:	89 85       	ldd	r24, Y+9	; 0x09
    327c:	9a 85       	ldd	r25, Y+10	; 0x0a
    327e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3282:	dc 01       	movw	r26, r24
    3284:	cb 01       	movw	r24, r22
    3286:	9e 83       	std	Y+6, r25	; 0x06
    3288:	8d 83       	std	Y+5, r24	; 0x05
    328a:	8d 81       	ldd	r24, Y+5	; 0x05
    328c:	9e 81       	ldd	r25, Y+6	; 0x06
    328e:	9a 83       	std	Y+2, r25	; 0x02
    3290:	89 83       	std	Y+1, r24	; 0x01
    3292:	89 81       	ldd	r24, Y+1	; 0x01
    3294:	9a 81       	ldd	r25, Y+2	; 0x02
    3296:	01 97       	sbiw	r24, 0x01	; 1
    3298:	f1 f7       	brne	.-4      	; 0x3296 <H_readPB+0x14c>
    329a:	9a 83       	std	Y+2, r25	; 0x02
    329c:	89 83       	std	Y+1, r24	; 0x01
    329e:	04 c0       	rjmp	.+8      	; 0x32a8 <H_readPB+0x15e>
		{
			_delay_ms(50);
			while(Local_pin_value==PB_PRESSED_ACTL)
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW1);
    32a0:	8f e2       	ldi	r24, 0x2F	; 47
    32a2:	0e 94 82 10 	call	0x2104	; 0x2104 <M_Dio_en_getPinValue>
    32a6:	8f 87       	std	Y+15, r24	; 0x0f
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW1);
		if(Local_pin_value==PB_PRESSED_ACTL)
		{
			_delay_ms(50);
			while(Local_pin_value==PB_PRESSED_ACTL)
    32a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    32aa:	88 23       	and	r24, r24
    32ac:	c9 f3       	breq	.-14     	; 0x32a0 <H_readPB+0x156>
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW1);
			}
			Button_state=PB_PRESSED;
    32ae:	18 8a       	std	Y+16, r1	; 0x10
    32b0:	32 c0       	rjmp	.+100    	; 0x3316 <H_readPB+0x1cc>
#error("Wrong Activation Mode")
#endif
	break;
	case PB_ID2:
#if(Mode == PB_ACTIVE_LOW)
			Local_pin_value=M_Dio_en_getPinValue(PB_SW2);
    32b2:	8e e2       	ldi	r24, 0x2E	; 46
    32b4:	0e 94 82 10 	call	0x2104	; 0x2104 <M_Dio_en_getPinValue>
    32b8:	8f 87       	std	Y+15, r24	; 0x0f
			if(Local_pin_value==PB_PRESSED_ACTL)
    32ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    32bc:	88 23       	and	r24, r24
    32be:	59 f5       	brne	.+86     	; 0x3316 <H_readPB+0x1cc>
    32c0:	04 c0       	rjmp	.+8      	; 0x32ca <H_readPB+0x180>
			{
				while(Local_pin_value==PB_PRESSED_ACTL)
				{
					Local_pin_value=M_Dio_en_getPinValue(PB_SW2);
    32c2:	8e e2       	ldi	r24, 0x2E	; 46
    32c4:	0e 94 82 10 	call	0x2104	; 0x2104 <M_Dio_en_getPinValue>
    32c8:	8f 87       	std	Y+15, r24	; 0x0f
	case PB_ID2:
#if(Mode == PB_ACTIVE_LOW)
			Local_pin_value=M_Dio_en_getPinValue(PB_SW2);
			if(Local_pin_value==PB_PRESSED_ACTL)
			{
				while(Local_pin_value==PB_PRESSED_ACTL)
    32ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    32cc:	88 23       	and	r24, r24
    32ce:	c9 f3       	breq	.-14     	; 0x32c2 <H_readPB+0x178>
				{
					Local_pin_value=M_Dio_en_getPinValue(PB_SW2);
				}
				Button_state=PB_PRESSED;
    32d0:	18 8a       	std	Y+16, r1	; 0x10
    32d2:	21 c0       	rjmp	.+66     	; 0x3316 <H_readPB+0x1cc>
#error("Wrong Activation Mode")
#endif
		break;
		case PB_ID3:
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW3);
    32d4:	8d e2       	ldi	r24, 0x2D	; 45
    32d6:	0e 94 82 10 	call	0x2104	; 0x2104 <M_Dio_en_getPinValue>
    32da:	8f 87       	std	Y+15, r24	; 0x0f
		if(Local_pin_value==PB_PRESSED_ACTL)
    32dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    32de:	88 23       	and	r24, r24
    32e0:	d1 f4       	brne	.+52     	; 0x3316 <H_readPB+0x1cc>
    32e2:	04 c0       	rjmp	.+8      	; 0x32ec <H_readPB+0x1a2>
		{
			while(Local_pin_value==PB_PRESSED_ACTL)
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW3);
    32e4:	8d e2       	ldi	r24, 0x2D	; 45
    32e6:	0e 94 82 10 	call	0x2104	; 0x2104 <M_Dio_en_getPinValue>
    32ea:	8f 87       	std	Y+15, r24	; 0x0f
		case PB_ID3:
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW3);
		if(Local_pin_value==PB_PRESSED_ACTL)
		{
			while(Local_pin_value==PB_PRESSED_ACTL)
    32ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    32ee:	88 23       	and	r24, r24
    32f0:	c9 f3       	breq	.-14     	; 0x32e4 <H_readPB+0x19a>
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW3);
			}
			Button_state=PB_PRESSED;
    32f2:	18 8a       	std	Y+16, r1	; 0x10
    32f4:	10 c0       	rjmp	.+32     	; 0x3316 <H_readPB+0x1cc>
#error("Wrong Activation Mode")
#endif
	break;
	case PB_ID4:
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW4);
    32f6:	8b e2       	ldi	r24, 0x2B	; 43
    32f8:	0e 94 82 10 	call	0x2104	; 0x2104 <M_Dio_en_getPinValue>
    32fc:	8f 87       	std	Y+15, r24	; 0x0f
		if(Local_pin_value==PB_PRESSED_ACTL)
    32fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3300:	88 23       	and	r24, r24
    3302:	49 f4       	brne	.+18     	; 0x3316 <H_readPB+0x1cc>
    3304:	04 c0       	rjmp	.+8      	; 0x330e <H_readPB+0x1c4>
		{
			while(Local_pin_value==PB_PRESSED_ACTL)
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW4);
    3306:	8b e2       	ldi	r24, 0x2B	; 43
    3308:	0e 94 82 10 	call	0x2104	; 0x2104 <M_Dio_en_getPinValue>
    330c:	8f 87       	std	Y+15, r24	; 0x0f
	case PB_ID4:
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW4);
		if(Local_pin_value==PB_PRESSED_ACTL)
		{
			while(Local_pin_value==PB_PRESSED_ACTL)
    330e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3310:	88 23       	and	r24, r24
    3312:	c9 f3       	breq	.-14     	; 0x3306 <H_readPB+0x1bc>
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW4);
			}
			Button_state=PB_PRESSED;
    3314:	18 8a       	std	Y+16, r1	; 0x10
#else
#error("Wrong Activation Mode")
#endif
	break;
	}
	return Button_state;
    3316:	88 89       	ldd	r24, Y+16	; 0x10
}
    3318:	64 96       	adiw	r28, 0x14	; 20
    331a:	0f b6       	in	r0, 0x3f	; 63
    331c:	f8 94       	cli
    331e:	de bf       	out	0x3e, r29	; 62
    3320:	0f be       	out	0x3f, r0	; 63
    3322:	cd bf       	out	0x3d, r28	; 61
    3324:	cf 91       	pop	r28
    3326:	df 91       	pop	r29
    3328:	08 95       	ret

0000332a <H_Temprature_void_Init>:
#include"LM35_Init.h"

extern const ADC_ConfigType ArrayofADC_Config_1[1];

void H_Temprature_void_Init(void)
{
    332a:	df 93       	push	r29
    332c:	cf 93       	push	r28
    332e:	cd b7       	in	r28, 0x3d	; 61
    3330:	de b7       	in	r29, 0x3e	; 62
	ADC_Init(ArrayofADC_Config_1);
    3332:	80 e7       	ldi	r24, 0x70	; 112
    3334:	92 e0       	ldi	r25, 0x02	; 2
    3336:	0e 94 26 13 	call	0x264c	; 0x264c <ADC_Init>
}
    333a:	cf 91       	pop	r28
    333c:	df 91       	pop	r29
    333e:	08 95       	ret

00003340 <H_Temprature_u16_Read>:

u16 H_Temprature_u16_Read(void)
{
    3340:	df 93       	push	r29
    3342:	cf 93       	push	r28
    3344:	00 d0       	rcall	.+0      	; 0x3346 <H_Temprature_u16_Read+0x6>
    3346:	00 d0       	rcall	.+0      	; 0x3348 <H_Temprature_u16_Read+0x8>
    3348:	cd b7       	in	r28, 0x3d	; 61
    334a:	de b7       	in	r29, 0x3e	; 62
	u16 Temp_value;
	u16 return_value;
	return_value= ADC_getDigitalValueSynchNonBlocking(ArrayofADC_Config_1);
    334c:	80 e7       	ldi	r24, 0x70	; 112
    334e:	92 e0       	ldi	r25, 0x02	; 2
    3350:	0e 94 ab 13 	call	0x2756	; 0x2756 <ADC_getDigitalValueSynchNonBlocking>
    3354:	9a 83       	std	Y+2, r25	; 0x02
    3356:	89 83       	std	Y+1, r24	; 0x01
	Temp_value=((return_value*5)/10);
    3358:	29 81       	ldd	r18, Y+1	; 0x01
    335a:	3a 81       	ldd	r19, Y+2	; 0x02
    335c:	c9 01       	movw	r24, r18
    335e:	88 0f       	add	r24, r24
    3360:	99 1f       	adc	r25, r25
    3362:	88 0f       	add	r24, r24
    3364:	99 1f       	adc	r25, r25
    3366:	82 0f       	add	r24, r18
    3368:	93 1f       	adc	r25, r19
    336a:	2a e0       	ldi	r18, 0x0A	; 10
    336c:	30 e0       	ldi	r19, 0x00	; 0
    336e:	b9 01       	movw	r22, r18
    3370:	0e 94 42 23 	call	0x4684	; 0x4684 <__udivmodhi4>
    3374:	cb 01       	movw	r24, r22
    3376:	9c 83       	std	Y+4, r25	; 0x04
    3378:	8b 83       	std	Y+3, r24	; 0x03

	return Temp_value;
    337a:	8b 81       	ldd	r24, Y+3	; 0x03
    337c:	9c 81       	ldd	r25, Y+4	; 0x04
}
    337e:	0f 90       	pop	r0
    3380:	0f 90       	pop	r0
    3382:	0f 90       	pop	r0
    3384:	0f 90       	pop	r0
    3386:	cf 91       	pop	r28
    3388:	df 91       	pop	r29
    338a:	08 95       	ret

0000338c <H_LED_void_Turn_on>:
#include"LED_CFG.h"
#include"LED_Init.h"


void H_LED_void_Turn_on(u8 ledID)
{
    338c:	df 93       	push	r29
    338e:	cf 93       	push	r28
    3390:	00 d0       	rcall	.+0      	; 0x3392 <H_LED_void_Turn_on+0x6>
    3392:	0f 92       	push	r0
    3394:	cd b7       	in	r28, 0x3d	; 61
    3396:	de b7       	in	r29, 0x3e	; 62
    3398:	89 83       	std	Y+1, r24	; 0x01
	switch(ledID)
    339a:	89 81       	ldd	r24, Y+1	; 0x01
    339c:	28 2f       	mov	r18, r24
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	3b 83       	std	Y+3, r19	; 0x03
    33a2:	2a 83       	std	Y+2, r18	; 0x02
    33a4:	8a 81       	ldd	r24, Y+2	; 0x02
    33a6:	9b 81       	ldd	r25, Y+3	; 0x03
    33a8:	81 30       	cpi	r24, 0x01	; 1
    33aa:	91 05       	cpc	r25, r1
    33ac:	f9 f0       	breq	.+62     	; 0x33ec <H_LED_void_Turn_on+0x60>
    33ae:	2a 81       	ldd	r18, Y+2	; 0x02
    33b0:	3b 81       	ldd	r19, Y+3	; 0x03
    33b2:	22 30       	cpi	r18, 0x02	; 2
    33b4:	31 05       	cpc	r19, r1
    33b6:	2c f4       	brge	.+10     	; 0x33c2 <H_LED_void_Turn_on+0x36>
    33b8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ba:	9b 81       	ldd	r25, Y+3	; 0x03
    33bc:	00 97       	sbiw	r24, 0x00	; 0
    33be:	61 f0       	breq	.+24     	; 0x33d8 <H_LED_void_Turn_on+0x4c>
    33c0:	1e c0       	rjmp	.+60     	; 0x33fe <H_LED_void_Turn_on+0x72>
    33c2:	2a 81       	ldd	r18, Y+2	; 0x02
    33c4:	3b 81       	ldd	r19, Y+3	; 0x03
    33c6:	22 30       	cpi	r18, 0x02	; 2
    33c8:	31 05       	cpc	r19, r1
    33ca:	59 f0       	breq	.+22     	; 0x33e2 <H_LED_void_Turn_on+0x56>
    33cc:	8a 81       	ldd	r24, Y+2	; 0x02
    33ce:	9b 81       	ldd	r25, Y+3	; 0x03
    33d0:	83 30       	cpi	r24, 0x03	; 3
    33d2:	91 05       	cpc	r25, r1
    33d4:	81 f0       	breq	.+32     	; 0x33f6 <H_LED_void_Turn_on+0x6a>
    33d6:	13 c0       	rjmp	.+38     	; 0x33fe <H_LED_void_Turn_on+0x72>
	{
	case LED_RED:
#if(LED_RED_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_RED_PIN,DIO_HIGH);
    33d8:	8b e1       	ldi	r24, 0x1B	; 27
    33da:	61 e0       	ldi	r22, 0x01	; 1
    33dc:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
    33e0:	0e c0       	rjmp	.+28     	; 0x33fe <H_LED_void_Turn_on+0x72>
#error("Wrong Led direction")
#endif
		break;
	case LED_GREEN:
#if(LED_GREEN_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_GREEN_PIN,DIO_HIGH);
    33e2:	8e e0       	ldi	r24, 0x0E	; 14
    33e4:	61 e0       	ldi	r22, 0x01	; 1
    33e6:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
    33ea:	09 c0       	rjmp	.+18     	; 0x33fe <H_LED_void_Turn_on+0x72>
#error("Wrong Led direction")
#endif
		break;
	case LED_BLUE:
#if(LED_BLUE_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_BLUE_PIN,DIO_HIGH);
    33ec:	8f e0       	ldi	r24, 0x0F	; 15
    33ee:	61 e0       	ldi	r22, 0x01	; 1
    33f0:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
    33f4:	04 c0       	rjmp	.+8      	; 0x33fe <H_LED_void_Turn_on+0x72>
#error("Wrong Led direction")
#endif
		break;
	case LED_YELLOW:
#if(LED_YELLOW_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_YELLOW_PIN,DIO_HIGH);
    33f6:	80 e1       	ldi	r24, 0x10	; 16
    33f8:	61 e0       	ldi	r22, 0x01	; 1
    33fa:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
#error("Wrong Led direction")
#endif
		break;

	}
}
    33fe:	0f 90       	pop	r0
    3400:	0f 90       	pop	r0
    3402:	0f 90       	pop	r0
    3404:	cf 91       	pop	r28
    3406:	df 91       	pop	r29
    3408:	08 95       	ret

0000340a <H_LED_void_Turn_off>:
void H_LED_void_Turn_off(u8 ledID)
{
    340a:	df 93       	push	r29
    340c:	cf 93       	push	r28
    340e:	00 d0       	rcall	.+0      	; 0x3410 <H_LED_void_Turn_off+0x6>
    3410:	0f 92       	push	r0
    3412:	cd b7       	in	r28, 0x3d	; 61
    3414:	de b7       	in	r29, 0x3e	; 62
    3416:	89 83       	std	Y+1, r24	; 0x01
	switch(ledID)
    3418:	89 81       	ldd	r24, Y+1	; 0x01
    341a:	28 2f       	mov	r18, r24
    341c:	30 e0       	ldi	r19, 0x00	; 0
    341e:	3b 83       	std	Y+3, r19	; 0x03
    3420:	2a 83       	std	Y+2, r18	; 0x02
    3422:	8a 81       	ldd	r24, Y+2	; 0x02
    3424:	9b 81       	ldd	r25, Y+3	; 0x03
    3426:	81 30       	cpi	r24, 0x01	; 1
    3428:	91 05       	cpc	r25, r1
    342a:	f9 f0       	breq	.+62     	; 0x346a <H_LED_void_Turn_off+0x60>
    342c:	2a 81       	ldd	r18, Y+2	; 0x02
    342e:	3b 81       	ldd	r19, Y+3	; 0x03
    3430:	22 30       	cpi	r18, 0x02	; 2
    3432:	31 05       	cpc	r19, r1
    3434:	2c f4       	brge	.+10     	; 0x3440 <H_LED_void_Turn_off+0x36>
    3436:	8a 81       	ldd	r24, Y+2	; 0x02
    3438:	9b 81       	ldd	r25, Y+3	; 0x03
    343a:	00 97       	sbiw	r24, 0x00	; 0
    343c:	61 f0       	breq	.+24     	; 0x3456 <H_LED_void_Turn_off+0x4c>
    343e:	1e c0       	rjmp	.+60     	; 0x347c <H_LED_void_Turn_off+0x72>
    3440:	2a 81       	ldd	r18, Y+2	; 0x02
    3442:	3b 81       	ldd	r19, Y+3	; 0x03
    3444:	22 30       	cpi	r18, 0x02	; 2
    3446:	31 05       	cpc	r19, r1
    3448:	59 f0       	breq	.+22     	; 0x3460 <H_LED_void_Turn_off+0x56>
    344a:	8a 81       	ldd	r24, Y+2	; 0x02
    344c:	9b 81       	ldd	r25, Y+3	; 0x03
    344e:	83 30       	cpi	r24, 0x03	; 3
    3450:	91 05       	cpc	r25, r1
    3452:	81 f0       	breq	.+32     	; 0x3474 <H_LED_void_Turn_off+0x6a>
    3454:	13 c0       	rjmp	.+38     	; 0x347c <H_LED_void_Turn_off+0x72>
		{
		case LED_RED:
#if(LED_RED_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_RED_PIN,DIO_LOW);
    3456:	8b e1       	ldi	r24, 0x1B	; 27
    3458:	60 e0       	ldi	r22, 0x00	; 0
    345a:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
    345e:	0e c0       	rjmp	.+28     	; 0x347c <H_LED_void_Turn_off+0x72>
#error("Wrong Led direction")
#endif
		break;
		case LED_GREEN:
#if(LED_GREEN_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_GREEN_PIN,DIO_LOW);
    3460:	8e e0       	ldi	r24, 0x0E	; 14
    3462:	60 e0       	ldi	r22, 0x00	; 0
    3464:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
    3468:	09 c0       	rjmp	.+18     	; 0x347c <H_LED_void_Turn_off+0x72>
#error("Wrong Led direction")
#endif
		break;
		case LED_BLUE:
#if(LED_BLUE_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_BLUE_PIN,DIO_LOW);
    346a:	8f e0       	ldi	r24, 0x0F	; 15
    346c:	60 e0       	ldi	r22, 0x00	; 0
    346e:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
    3472:	04 c0       	rjmp	.+8      	; 0x347c <H_LED_void_Turn_off+0x72>
#error("Wrong Led direction")
#endif
		break;
		case LED_YELLOW:
#if(LED_YELLOW_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_YELLOW_PIN,DIO_LOW);
    3474:	80 e1       	ldi	r24, 0x10	; 16
    3476:	60 e0       	ldi	r22, 0x00	; 0
    3478:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
#error("Wrong Led direction")
#endif
		break;

		}
}
    347c:	0f 90       	pop	r0
    347e:	0f 90       	pop	r0
    3480:	0f 90       	pop	r0
    3482:	cf 91       	pop	r28
    3484:	df 91       	pop	r29
    3486:	08 95       	ret

00003488 <H_LED_void_Toggle>:

void H_LED_void_Toggle(u8 ledID)
{
    3488:	df 93       	push	r29
    348a:	cf 93       	push	r28
    348c:	00 d0       	rcall	.+0      	; 0x348e <H_LED_void_Toggle+0x6>
    348e:	0f 92       	push	r0
    3490:	cd b7       	in	r28, 0x3d	; 61
    3492:	de b7       	in	r29, 0x3e	; 62
    3494:	89 83       	std	Y+1, r24	; 0x01
	switch(ledID)
    3496:	89 81       	ldd	r24, Y+1	; 0x01
    3498:	28 2f       	mov	r18, r24
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	3b 83       	std	Y+3, r19	; 0x03
    349e:	2a 83       	std	Y+2, r18	; 0x02
    34a0:	8a 81       	ldd	r24, Y+2	; 0x02
    34a2:	9b 81       	ldd	r25, Y+3	; 0x03
    34a4:	81 30       	cpi	r24, 0x01	; 1
    34a6:	91 05       	cpc	r25, r1
    34a8:	e9 f0       	breq	.+58     	; 0x34e4 <H_LED_void_Toggle+0x5c>
    34aa:	2a 81       	ldd	r18, Y+2	; 0x02
    34ac:	3b 81       	ldd	r19, Y+3	; 0x03
    34ae:	22 30       	cpi	r18, 0x02	; 2
    34b0:	31 05       	cpc	r19, r1
    34b2:	2c f4       	brge	.+10     	; 0x34be <H_LED_void_Toggle+0x36>
    34b4:	8a 81       	ldd	r24, Y+2	; 0x02
    34b6:	9b 81       	ldd	r25, Y+3	; 0x03
    34b8:	00 97       	sbiw	r24, 0x00	; 0
    34ba:	61 f0       	breq	.+24     	; 0x34d4 <H_LED_void_Toggle+0x4c>
    34bc:	1a c0       	rjmp	.+52     	; 0x34f2 <H_LED_void_Toggle+0x6a>
    34be:	2a 81       	ldd	r18, Y+2	; 0x02
    34c0:	3b 81       	ldd	r19, Y+3	; 0x03
    34c2:	22 30       	cpi	r18, 0x02	; 2
    34c4:	31 05       	cpc	r19, r1
    34c6:	51 f0       	breq	.+20     	; 0x34dc <H_LED_void_Toggle+0x54>
    34c8:	8a 81       	ldd	r24, Y+2	; 0x02
    34ca:	9b 81       	ldd	r25, Y+3	; 0x03
    34cc:	83 30       	cpi	r24, 0x03	; 3
    34ce:	91 05       	cpc	r25, r1
    34d0:	69 f0       	breq	.+26     	; 0x34ec <H_LED_void_Toggle+0x64>
    34d2:	0f c0       	rjmp	.+30     	; 0x34f2 <H_LED_void_Toggle+0x6a>
	{
		case LED_RED:
			M_Dio_void_togglePinValue(LED_RED_PIN);
    34d4:	8b e1       	ldi	r24, 0x1B	; 27
    34d6:	0e 94 9a 12 	call	0x2534	; 0x2534 <M_Dio_void_togglePinValue>
    34da:	0b c0       	rjmp	.+22     	; 0x34f2 <H_LED_void_Toggle+0x6a>
		break;
		case LED_GREEN:
			M_Dio_void_togglePinValue(LED_GREEN_PIN);
    34dc:	8e e0       	ldi	r24, 0x0E	; 14
    34de:	0e 94 9a 12 	call	0x2534	; 0x2534 <M_Dio_void_togglePinValue>
    34e2:	07 c0       	rjmp	.+14     	; 0x34f2 <H_LED_void_Toggle+0x6a>
		break;
		case LED_BLUE:
			M_Dio_void_togglePinValue(LED_BLUE_PIN);
    34e4:	8f e0       	ldi	r24, 0x0F	; 15
    34e6:	0e 94 9a 12 	call	0x2534	; 0x2534 <M_Dio_void_togglePinValue>
    34ea:	03 c0       	rjmp	.+6      	; 0x34f2 <H_LED_void_Toggle+0x6a>
		break;
		case LED_YELLOW:
			M_Dio_void_togglePinValue(LED_YELLOW_PIN);
    34ec:	80 e1       	ldi	r24, 0x10	; 16
    34ee:	0e 94 9a 12 	call	0x2534	; 0x2534 <M_Dio_void_togglePinValue>
		break;

	}
}
    34f2:	0f 90       	pop	r0
    34f4:	0f 90       	pop	r0
    34f6:	0f 90       	pop	r0
    34f8:	cf 91       	pop	r28
    34fa:	df 91       	pop	r29
    34fc:	08 95       	ret

000034fe <H_KEYPAD_u8_getPressedKey>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
u8 H_KEYPAD_u8_getPressedKey(void)
{
    34fe:	df 93       	push	r29
    3500:	cf 93       	push	r28
    3502:	cd b7       	in	r28, 0x3d	; 61
    3504:	de b7       	in	r29, 0x3e	; 62
    3506:	62 97       	sbiw	r28, 0x12	; 18
    3508:	0f b6       	in	r0, 0x3f	; 63
    350a:	f8 94       	cli
    350c:	de bf       	out	0x3e, r29	; 62
    350e:	0f be       	out	0x3f, r0	; 63
    3510:	cd bf       	out	0x3d, r28	; 61
	u8 Local_Pressed_key=NO_PRESSED_KEY;
    3512:	19 8a       	std	Y+17, r1	; 0x11
	u8 ROW_Index;
	u8 COL_Index;
	for(ROW_Index=0;ROW_Index<4;ROW_Index++)
    3514:	18 8a       	std	Y+16, r1	; 0x10
    3516:	c8 c0       	rjmp	.+400    	; 0x36a8 <H_KEYPAD_u8_getPressedKey+0x1aa>
	{
		M_Dio_void_setPinValue(ROWS_ARR[0], DIO_HIGH);
    3518:	80 91 26 02 	lds	r24, 0x0226
    351c:	61 e0       	ldi	r22, 0x01	; 1
    351e:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(ROWS_ARR[1], DIO_HIGH);
    3522:	80 91 27 02 	lds	r24, 0x0227
    3526:	61 e0       	ldi	r22, 0x01	; 1
    3528:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(ROWS_ARR[2], DIO_HIGH);
    352c:	80 91 28 02 	lds	r24, 0x0228
    3530:	61 e0       	ldi	r22, 0x01	; 1
    3532:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(ROWS_ARR[3], DIO_HIGH);
    3536:	80 91 29 02 	lds	r24, 0x0229
    353a:	61 e0       	ldi	r22, 0x01	; 1
    353c:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>

		M_Dio_void_setPinValue(ROWS_ARR[ROW_Index],DIO_LOW);
    3540:	88 89       	ldd	r24, Y+16	; 0x10
    3542:	88 2f       	mov	r24, r24
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	fc 01       	movw	r30, r24
    3548:	ea 5d       	subi	r30, 0xDA	; 218
    354a:	fd 4f       	sbci	r31, 0xFD	; 253
    354c:	80 81       	ld	r24, Z
    354e:	60 e0       	ldi	r22, 0x00	; 0
    3550:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
		for(COL_Index=0;COL_Index<4;COL_Index++)
    3554:	1f 86       	std	Y+15, r1	; 0x0f
    3556:	a1 c0       	rjmp	.+322    	; 0x369a <H_KEYPAD_u8_getPressedKey+0x19c>
		{
			if((M_Dio_en_getPinValue(COLS_ARR[COL_Index]))==DIO_LOW)
    3558:	8f 85       	ldd	r24, Y+15	; 0x0f
    355a:	88 2f       	mov	r24, r24
    355c:	90 e0       	ldi	r25, 0x00	; 0
    355e:	fc 01       	movw	r30, r24
    3560:	e6 5d       	subi	r30, 0xD6	; 214
    3562:	fd 4f       	sbci	r31, 0xFD	; 253
    3564:	80 81       	ld	r24, Z
    3566:	0e 94 82 10 	call	0x2104	; 0x2104 <M_Dio_en_getPinValue>
    356a:	88 23       	and	r24, r24
    356c:	09 f0       	breq	.+2      	; 0x3570 <H_KEYPAD_u8_getPressedKey+0x72>
    356e:	92 c0       	rjmp	.+292    	; 0x3694 <H_KEYPAD_u8_getPressedKey+0x196>
    3570:	80 e0       	ldi	r24, 0x00	; 0
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	a8 e4       	ldi	r26, 0x48	; 72
    3576:	b2 e4       	ldi	r27, 0x42	; 66
    3578:	8b 87       	std	Y+11, r24	; 0x0b
    357a:	9c 87       	std	Y+12, r25	; 0x0c
    357c:	ad 87       	std	Y+13, r26	; 0x0d
    357e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3580:	6b 85       	ldd	r22, Y+11	; 0x0b
    3582:	7c 85       	ldd	r23, Y+12	; 0x0c
    3584:	8d 85       	ldd	r24, Y+13	; 0x0d
    3586:	9e 85       	ldd	r25, Y+14	; 0x0e
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	30 e0       	ldi	r19, 0x00	; 0
    358c:	4a e7       	ldi	r20, 0x7A	; 122
    358e:	55 e4       	ldi	r21, 0x45	; 69
    3590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3594:	dc 01       	movw	r26, r24
    3596:	cb 01       	movw	r24, r22
    3598:	8f 83       	std	Y+7, r24	; 0x07
    359a:	98 87       	std	Y+8, r25	; 0x08
    359c:	a9 87       	std	Y+9, r26	; 0x09
    359e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35a0:	6f 81       	ldd	r22, Y+7	; 0x07
    35a2:	78 85       	ldd	r23, Y+8	; 0x08
    35a4:	89 85       	ldd	r24, Y+9	; 0x09
    35a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a8:	20 e0       	ldi	r18, 0x00	; 0
    35aa:	30 e0       	ldi	r19, 0x00	; 0
    35ac:	40 e8       	ldi	r20, 0x80	; 128
    35ae:	5f e3       	ldi	r21, 0x3F	; 63
    35b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35b4:	88 23       	and	r24, r24
    35b6:	2c f4       	brge	.+10     	; 0x35c2 <H_KEYPAD_u8_getPressedKey+0xc4>
		__ticks = 1;
    35b8:	81 e0       	ldi	r24, 0x01	; 1
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	9e 83       	std	Y+6, r25	; 0x06
    35be:	8d 83       	std	Y+5, r24	; 0x05
    35c0:	3f c0       	rjmp	.+126    	; 0x3640 <H_KEYPAD_u8_getPressedKey+0x142>
	else if (__tmp > 65535)
    35c2:	6f 81       	ldd	r22, Y+7	; 0x07
    35c4:	78 85       	ldd	r23, Y+8	; 0x08
    35c6:	89 85       	ldd	r24, Y+9	; 0x09
    35c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ca:	20 e0       	ldi	r18, 0x00	; 0
    35cc:	3f ef       	ldi	r19, 0xFF	; 255
    35ce:	4f e7       	ldi	r20, 0x7F	; 127
    35d0:	57 e4       	ldi	r21, 0x47	; 71
    35d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35d6:	18 16       	cp	r1, r24
    35d8:	4c f5       	brge	.+82     	; 0x362c <H_KEYPAD_u8_getPressedKey+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35da:	6b 85       	ldd	r22, Y+11	; 0x0b
    35dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    35de:	8d 85       	ldd	r24, Y+13	; 0x0d
    35e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    35e2:	20 e0       	ldi	r18, 0x00	; 0
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	40 e2       	ldi	r20, 0x20	; 32
    35e8:	51 e4       	ldi	r21, 0x41	; 65
    35ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ee:	dc 01       	movw	r26, r24
    35f0:	cb 01       	movw	r24, r22
    35f2:	bc 01       	movw	r22, r24
    35f4:	cd 01       	movw	r24, r26
    35f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35fa:	dc 01       	movw	r26, r24
    35fc:	cb 01       	movw	r24, r22
    35fe:	9e 83       	std	Y+6, r25	; 0x06
    3600:	8d 83       	std	Y+5, r24	; 0x05
    3602:	0f c0       	rjmp	.+30     	; 0x3622 <H_KEYPAD_u8_getPressedKey+0x124>
    3604:	80 e9       	ldi	r24, 0x90	; 144
    3606:	91 e0       	ldi	r25, 0x01	; 1
    3608:	9c 83       	std	Y+4, r25	; 0x04
    360a:	8b 83       	std	Y+3, r24	; 0x03
    360c:	8b 81       	ldd	r24, Y+3	; 0x03
    360e:	9c 81       	ldd	r25, Y+4	; 0x04
    3610:	01 97       	sbiw	r24, 0x01	; 1
    3612:	f1 f7       	brne	.-4      	; 0x3610 <H_KEYPAD_u8_getPressedKey+0x112>
    3614:	9c 83       	std	Y+4, r25	; 0x04
    3616:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3618:	8d 81       	ldd	r24, Y+5	; 0x05
    361a:	9e 81       	ldd	r25, Y+6	; 0x06
    361c:	01 97       	sbiw	r24, 0x01	; 1
    361e:	9e 83       	std	Y+6, r25	; 0x06
    3620:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3622:	8d 81       	ldd	r24, Y+5	; 0x05
    3624:	9e 81       	ldd	r25, Y+6	; 0x06
    3626:	00 97       	sbiw	r24, 0x00	; 0
    3628:	69 f7       	brne	.-38     	; 0x3604 <H_KEYPAD_u8_getPressedKey+0x106>
    362a:	14 c0       	rjmp	.+40     	; 0x3654 <H_KEYPAD_u8_getPressedKey+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    362c:	6f 81       	ldd	r22, Y+7	; 0x07
    362e:	78 85       	ldd	r23, Y+8	; 0x08
    3630:	89 85       	ldd	r24, Y+9	; 0x09
    3632:	9a 85       	ldd	r25, Y+10	; 0x0a
    3634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3638:	dc 01       	movw	r26, r24
    363a:	cb 01       	movw	r24, r22
    363c:	9e 83       	std	Y+6, r25	; 0x06
    363e:	8d 83       	std	Y+5, r24	; 0x05
    3640:	8d 81       	ldd	r24, Y+5	; 0x05
    3642:	9e 81       	ldd	r25, Y+6	; 0x06
    3644:	9a 83       	std	Y+2, r25	; 0x02
    3646:	89 83       	std	Y+1, r24	; 0x01
    3648:	89 81       	ldd	r24, Y+1	; 0x01
    364a:	9a 81       	ldd	r25, Y+2	; 0x02
    364c:	01 97       	sbiw	r24, 0x01	; 1
    364e:	f1 f7       	brne	.-4      	; 0x364c <H_KEYPAD_u8_getPressedKey+0x14e>
    3650:	9a 83       	std	Y+2, r25	; 0x02
    3652:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(50);
				while(M_Dio_en_getPinValue(COLS_ARR[COL_Index])==DIO_LOW);
    3654:	8f 85       	ldd	r24, Y+15	; 0x0f
    3656:	88 2f       	mov	r24, r24
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	fc 01       	movw	r30, r24
    365c:	e6 5d       	subi	r30, 0xD6	; 214
    365e:	fd 4f       	sbci	r31, 0xFD	; 253
    3660:	80 81       	ld	r24, Z
    3662:	0e 94 82 10 	call	0x2104	; 0x2104 <M_Dio_en_getPinValue>
    3666:	88 23       	and	r24, r24
    3668:	a9 f3       	breq	.-22     	; 0x3654 <H_KEYPAD_u8_getPressedKey+0x156>
				Local_Pressed_key= KPD_KEYS_CALC[ROW_Index][COL_Index];
    366a:	88 89       	ldd	r24, Y+16	; 0x10
    366c:	48 2f       	mov	r20, r24
    366e:	50 e0       	ldi	r21, 0x00	; 0
    3670:	8f 85       	ldd	r24, Y+15	; 0x0f
    3672:	28 2f       	mov	r18, r24
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	ca 01       	movw	r24, r20
    3678:	88 0f       	add	r24, r24
    367a:	99 1f       	adc	r25, r25
    367c:	88 0f       	add	r24, r24
    367e:	99 1f       	adc	r25, r25
    3680:	82 0f       	add	r24, r18
    3682:	93 1f       	adc	r25, r19
    3684:	fc 01       	movw	r30, r24
    3686:	ea 5e       	subi	r30, 0xEA	; 234
    3688:	fd 4f       	sbci	r31, 0xFD	; 253
    368a:	80 81       	ld	r24, Z
    368c:	89 8b       	std	Y+17, r24	; 0x11
				//M_Dio_void_setPinValue(DIO_PB7,DIO_HIGH);
				//_delay_ms(50);
				//M_Dio_void_setPinValue(DIO_PB7,DIO_LOW);
				return Local_Pressed_key;
    368e:	89 89       	ldd	r24, Y+17	; 0x11
    3690:	8a 8b       	std	Y+18, r24	; 0x12
    3692:	10 c0       	rjmp	.+32     	; 0x36b4 <H_KEYPAD_u8_getPressedKey+0x1b6>
		M_Dio_void_setPinValue(ROWS_ARR[1], DIO_HIGH);
		M_Dio_void_setPinValue(ROWS_ARR[2], DIO_HIGH);
		M_Dio_void_setPinValue(ROWS_ARR[3], DIO_HIGH);

		M_Dio_void_setPinValue(ROWS_ARR[ROW_Index],DIO_LOW);
		for(COL_Index=0;COL_Index<4;COL_Index++)
    3694:	8f 85       	ldd	r24, Y+15	; 0x0f
    3696:	8f 5f       	subi	r24, 0xFF	; 255
    3698:	8f 87       	std	Y+15, r24	; 0x0f
    369a:	8f 85       	ldd	r24, Y+15	; 0x0f
    369c:	84 30       	cpi	r24, 0x04	; 4
    369e:	08 f4       	brcc	.+2      	; 0x36a2 <H_KEYPAD_u8_getPressedKey+0x1a4>
    36a0:	5b cf       	rjmp	.-330    	; 0x3558 <H_KEYPAD_u8_getPressedKey+0x5a>
u8 H_KEYPAD_u8_getPressedKey(void)
{
	u8 Local_Pressed_key=NO_PRESSED_KEY;
	u8 ROW_Index;
	u8 COL_Index;
	for(ROW_Index=0;ROW_Index<4;ROW_Index++)
    36a2:	88 89       	ldd	r24, Y+16	; 0x10
    36a4:	8f 5f       	subi	r24, 0xFF	; 255
    36a6:	88 8b       	std	Y+16, r24	; 0x10
    36a8:	88 89       	ldd	r24, Y+16	; 0x10
    36aa:	84 30       	cpi	r24, 0x04	; 4
    36ac:	08 f4       	brcc	.+2      	; 0x36b0 <H_KEYPAD_u8_getPressedKey+0x1b2>
    36ae:	34 cf       	rjmp	.-408    	; 0x3518 <H_KEYPAD_u8_getPressedKey+0x1a>
				//M_Dio_void_setPinValue(DIO_PB7,DIO_LOW);
				return Local_Pressed_key;
			}
		}
	}
	return Local_Pressed_key;
    36b0:	89 89       	ldd	r24, Y+17	; 0x11
    36b2:	8a 8b       	std	Y+18, r24	; 0x12
    36b4:	8a 89       	ldd	r24, Y+18	; 0x12
}
    36b6:	62 96       	adiw	r28, 0x12	; 18
    36b8:	0f b6       	in	r0, 0x3f	; 63
    36ba:	f8 94       	cli
    36bc:	de bf       	out	0x3e, r29	; 62
    36be:	0f be       	out	0x3f, r0	; 63
    36c0:	cd bf       	out	0x3d, r28	; 61
    36c2:	cf 91       	pop	r28
    36c4:	df 91       	pop	r29
    36c6:	08 95       	ret

000036c8 <H_LCD_void_latchByte>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
    36c8:	df 93       	push	r29
    36ca:	cf 93       	push	r28
    36cc:	cd b7       	in	r28, 0x3d	; 61
    36ce:	de b7       	in	r29, 0x3e	; 62
    36d0:	ab 97       	sbiw	r28, 0x2b	; 43
    36d2:	0f b6       	in	r0, 0x3f	; 63
    36d4:	f8 94       	cli
    36d6:	de bf       	out	0x3e, r29	; 62
    36d8:	0f be       	out	0x3f, r0	; 63
    36da:	cd bf       	out	0x3d, r28	; 61
    36dc:	8b a7       	std	Y+43, r24	; 0x2b
#if(LCD_MODE == _4_BIT_MODE)
	//enable = zero
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
    36de:	8c e0       	ldi	r24, 0x0C	; 12
    36e0:	60 e0       	ldi	r22, 0x00	; 0
    36e2:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_D4,GET_BIT(copy_u8Byte,4));
    36e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    36e8:	82 95       	swap	r24
    36ea:	8f 70       	andi	r24, 0x0F	; 15
    36ec:	98 2f       	mov	r25, r24
    36ee:	91 70       	andi	r25, 0x01	; 1
    36f0:	84 e1       	ldi	r24, 0x14	; 20
    36f2:	69 2f       	mov	r22, r25
    36f4:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D5,GET_BIT(copy_u8Byte,5));
    36f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    36fa:	82 95       	swap	r24
    36fc:	86 95       	lsr	r24
    36fe:	87 70       	andi	r24, 0x07	; 7
    3700:	98 2f       	mov	r25, r24
    3702:	91 70       	andi	r25, 0x01	; 1
    3704:	85 e1       	ldi	r24, 0x15	; 21
    3706:	69 2f       	mov	r22, r25
    3708:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D6,GET_BIT(copy_u8Byte,6));
    370c:	8b a5       	ldd	r24, Y+43	; 0x2b
    370e:	82 95       	swap	r24
    3710:	86 95       	lsr	r24
    3712:	86 95       	lsr	r24
    3714:	83 70       	andi	r24, 0x03	; 3
    3716:	98 2f       	mov	r25, r24
    3718:	91 70       	andi	r25, 0x01	; 1
    371a:	86 e1       	ldi	r24, 0x16	; 22
    371c:	69 2f       	mov	r22, r25
    371e:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D7,GET_BIT(copy_u8Byte,7));
    3722:	8b a5       	ldd	r24, Y+43	; 0x2b
    3724:	98 2f       	mov	r25, r24
    3726:	99 1f       	adc	r25, r25
    3728:	99 27       	eor	r25, r25
    372a:	99 1f       	adc	r25, r25
    372c:	88 e1       	ldi	r24, 0x18	; 24
    372e:	69 2f       	mov	r22, r25
    3730:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_HIGH);
    3734:	8c e0       	ldi	r24, 0x0C	; 12
    3736:	61 e0       	ldi	r22, 0x01	; 1
    3738:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
    373c:	80 e0       	ldi	r24, 0x00	; 0
    373e:	90 e0       	ldi	r25, 0x00	; 0
    3740:	a0 e8       	ldi	r26, 0x80	; 128
    3742:	bf e3       	ldi	r27, 0x3F	; 63
    3744:	8f a3       	std	Y+39, r24	; 0x27
    3746:	98 a7       	std	Y+40, r25	; 0x28
    3748:	a9 a7       	std	Y+41, r26	; 0x29
    374a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    374c:	6f a1       	ldd	r22, Y+39	; 0x27
    374e:	78 a5       	ldd	r23, Y+40	; 0x28
    3750:	89 a5       	ldd	r24, Y+41	; 0x29
    3752:	9a a5       	ldd	r25, Y+42	; 0x2a
    3754:	20 e0       	ldi	r18, 0x00	; 0
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	4a e7       	ldi	r20, 0x7A	; 122
    375a:	55 e4       	ldi	r21, 0x45	; 69
    375c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3760:	dc 01       	movw	r26, r24
    3762:	cb 01       	movw	r24, r22
    3764:	8b a3       	std	Y+35, r24	; 0x23
    3766:	9c a3       	std	Y+36, r25	; 0x24
    3768:	ad a3       	std	Y+37, r26	; 0x25
    376a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    376c:	6b a1       	ldd	r22, Y+35	; 0x23
    376e:	7c a1       	ldd	r23, Y+36	; 0x24
    3770:	8d a1       	ldd	r24, Y+37	; 0x25
    3772:	9e a1       	ldd	r25, Y+38	; 0x26
    3774:	20 e0       	ldi	r18, 0x00	; 0
    3776:	30 e0       	ldi	r19, 0x00	; 0
    3778:	40 e8       	ldi	r20, 0x80	; 128
    377a:	5f e3       	ldi	r21, 0x3F	; 63
    377c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3780:	88 23       	and	r24, r24
    3782:	2c f4       	brge	.+10     	; 0x378e <H_LCD_void_latchByte+0xc6>
		__ticks = 1;
    3784:	81 e0       	ldi	r24, 0x01	; 1
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	9a a3       	std	Y+34, r25	; 0x22
    378a:	89 a3       	std	Y+33, r24	; 0x21
    378c:	3f c0       	rjmp	.+126    	; 0x380c <H_LCD_void_latchByte+0x144>
	else if (__tmp > 65535)
    378e:	6b a1       	ldd	r22, Y+35	; 0x23
    3790:	7c a1       	ldd	r23, Y+36	; 0x24
    3792:	8d a1       	ldd	r24, Y+37	; 0x25
    3794:	9e a1       	ldd	r25, Y+38	; 0x26
    3796:	20 e0       	ldi	r18, 0x00	; 0
    3798:	3f ef       	ldi	r19, 0xFF	; 255
    379a:	4f e7       	ldi	r20, 0x7F	; 127
    379c:	57 e4       	ldi	r21, 0x47	; 71
    379e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37a2:	18 16       	cp	r1, r24
    37a4:	4c f5       	brge	.+82     	; 0x37f8 <H_LCD_void_latchByte+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37a6:	6f a1       	ldd	r22, Y+39	; 0x27
    37a8:	78 a5       	ldd	r23, Y+40	; 0x28
    37aa:	89 a5       	ldd	r24, Y+41	; 0x29
    37ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    37ae:	20 e0       	ldi	r18, 0x00	; 0
    37b0:	30 e0       	ldi	r19, 0x00	; 0
    37b2:	40 e2       	ldi	r20, 0x20	; 32
    37b4:	51 e4       	ldi	r21, 0x41	; 65
    37b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ba:	dc 01       	movw	r26, r24
    37bc:	cb 01       	movw	r24, r22
    37be:	bc 01       	movw	r22, r24
    37c0:	cd 01       	movw	r24, r26
    37c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37c6:	dc 01       	movw	r26, r24
    37c8:	cb 01       	movw	r24, r22
    37ca:	9a a3       	std	Y+34, r25	; 0x22
    37cc:	89 a3       	std	Y+33, r24	; 0x21
    37ce:	0f c0       	rjmp	.+30     	; 0x37ee <H_LCD_void_latchByte+0x126>
    37d0:	80 e9       	ldi	r24, 0x90	; 144
    37d2:	91 e0       	ldi	r25, 0x01	; 1
    37d4:	98 a3       	std	Y+32, r25	; 0x20
    37d6:	8f 8f       	std	Y+31, r24	; 0x1f
    37d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    37da:	98 a1       	ldd	r25, Y+32	; 0x20
    37dc:	01 97       	sbiw	r24, 0x01	; 1
    37de:	f1 f7       	brne	.-4      	; 0x37dc <H_LCD_void_latchByte+0x114>
    37e0:	98 a3       	std	Y+32, r25	; 0x20
    37e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37e4:	89 a1       	ldd	r24, Y+33	; 0x21
    37e6:	9a a1       	ldd	r25, Y+34	; 0x22
    37e8:	01 97       	sbiw	r24, 0x01	; 1
    37ea:	9a a3       	std	Y+34, r25	; 0x22
    37ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37ee:	89 a1       	ldd	r24, Y+33	; 0x21
    37f0:	9a a1       	ldd	r25, Y+34	; 0x22
    37f2:	00 97       	sbiw	r24, 0x00	; 0
    37f4:	69 f7       	brne	.-38     	; 0x37d0 <H_LCD_void_latchByte+0x108>
    37f6:	14 c0       	rjmp	.+40     	; 0x3820 <H_LCD_void_latchByte+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37f8:	6b a1       	ldd	r22, Y+35	; 0x23
    37fa:	7c a1       	ldd	r23, Y+36	; 0x24
    37fc:	8d a1       	ldd	r24, Y+37	; 0x25
    37fe:	9e a1       	ldd	r25, Y+38	; 0x26
    3800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3804:	dc 01       	movw	r26, r24
    3806:	cb 01       	movw	r24, r22
    3808:	9a a3       	std	Y+34, r25	; 0x22
    380a:	89 a3       	std	Y+33, r24	; 0x21
    380c:	89 a1       	ldd	r24, Y+33	; 0x21
    380e:	9a a1       	ldd	r25, Y+34	; 0x22
    3810:	9e 8f       	std	Y+30, r25	; 0x1e
    3812:	8d 8f       	std	Y+29, r24	; 0x1d
    3814:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3816:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3818:	01 97       	sbiw	r24, 0x01	; 1
    381a:	f1 f7       	brne	.-4      	; 0x3818 <H_LCD_void_latchByte+0x150>
    381c:	9e 8f       	std	Y+30, r25	; 0x1e
    381e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
    3820:	8c e0       	ldi	r24, 0x0C	; 12
    3822:	60 e0       	ldi	r22, 0x00	; 0
    3824:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_D4,GET_BIT(copy_u8Byte,0));
    3828:	8b a5       	ldd	r24, Y+43	; 0x2b
    382a:	98 2f       	mov	r25, r24
    382c:	91 70       	andi	r25, 0x01	; 1
    382e:	84 e1       	ldi	r24, 0x14	; 20
    3830:	69 2f       	mov	r22, r25
    3832:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D5,GET_BIT(copy_u8Byte,1));
    3836:	8b a5       	ldd	r24, Y+43	; 0x2b
    3838:	86 95       	lsr	r24
    383a:	98 2f       	mov	r25, r24
    383c:	91 70       	andi	r25, 0x01	; 1
    383e:	85 e1       	ldi	r24, 0x15	; 21
    3840:	69 2f       	mov	r22, r25
    3842:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D6,GET_BIT(copy_u8Byte,2));
    3846:	8b a5       	ldd	r24, Y+43	; 0x2b
    3848:	86 95       	lsr	r24
    384a:	86 95       	lsr	r24
    384c:	98 2f       	mov	r25, r24
    384e:	91 70       	andi	r25, 0x01	; 1
    3850:	86 e1       	ldi	r24, 0x16	; 22
    3852:	69 2f       	mov	r22, r25
    3854:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D7,GET_BIT(copy_u8Byte,3));
    3858:	8b a5       	ldd	r24, Y+43	; 0x2b
    385a:	86 95       	lsr	r24
    385c:	86 95       	lsr	r24
    385e:	86 95       	lsr	r24
    3860:	98 2f       	mov	r25, r24
    3862:	91 70       	andi	r25, 0x01	; 1
    3864:	88 e1       	ldi	r24, 0x18	; 24
    3866:	69 2f       	mov	r22, r25
    3868:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_HIGH);
    386c:	8c e0       	ldi	r24, 0x0C	; 12
    386e:	61 e0       	ldi	r22, 0x01	; 1
    3870:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
    3874:	80 e0       	ldi	r24, 0x00	; 0
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	a0 e8       	ldi	r26, 0x80	; 128
    387a:	bf e3       	ldi	r27, 0x3F	; 63
    387c:	89 8f       	std	Y+25, r24	; 0x19
    387e:	9a 8f       	std	Y+26, r25	; 0x1a
    3880:	ab 8f       	std	Y+27, r26	; 0x1b
    3882:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3884:	69 8d       	ldd	r22, Y+25	; 0x19
    3886:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3888:	8b 8d       	ldd	r24, Y+27	; 0x1b
    388a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    388c:	20 e0       	ldi	r18, 0x00	; 0
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	4a e7       	ldi	r20, 0x7A	; 122
    3892:	55 e4       	ldi	r21, 0x45	; 69
    3894:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3898:	dc 01       	movw	r26, r24
    389a:	cb 01       	movw	r24, r22
    389c:	8d 8b       	std	Y+21, r24	; 0x15
    389e:	9e 8b       	std	Y+22, r25	; 0x16
    38a0:	af 8b       	std	Y+23, r26	; 0x17
    38a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    38a4:	6d 89       	ldd	r22, Y+21	; 0x15
    38a6:	7e 89       	ldd	r23, Y+22	; 0x16
    38a8:	8f 89       	ldd	r24, Y+23	; 0x17
    38aa:	98 8d       	ldd	r25, Y+24	; 0x18
    38ac:	20 e0       	ldi	r18, 0x00	; 0
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	40 e8       	ldi	r20, 0x80	; 128
    38b2:	5f e3       	ldi	r21, 0x3F	; 63
    38b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38b8:	88 23       	and	r24, r24
    38ba:	2c f4       	brge	.+10     	; 0x38c6 <H_LCD_void_latchByte+0x1fe>
		__ticks = 1;
    38bc:	81 e0       	ldi	r24, 0x01	; 1
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	9c 8b       	std	Y+20, r25	; 0x14
    38c2:	8b 8b       	std	Y+19, r24	; 0x13
    38c4:	3f c0       	rjmp	.+126    	; 0x3944 <H_LCD_void_latchByte+0x27c>
	else if (__tmp > 65535)
    38c6:	6d 89       	ldd	r22, Y+21	; 0x15
    38c8:	7e 89       	ldd	r23, Y+22	; 0x16
    38ca:	8f 89       	ldd	r24, Y+23	; 0x17
    38cc:	98 8d       	ldd	r25, Y+24	; 0x18
    38ce:	20 e0       	ldi	r18, 0x00	; 0
    38d0:	3f ef       	ldi	r19, 0xFF	; 255
    38d2:	4f e7       	ldi	r20, 0x7F	; 127
    38d4:	57 e4       	ldi	r21, 0x47	; 71
    38d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38da:	18 16       	cp	r1, r24
    38dc:	4c f5       	brge	.+82     	; 0x3930 <H_LCD_void_latchByte+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38de:	69 8d       	ldd	r22, Y+25	; 0x19
    38e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38e6:	20 e0       	ldi	r18, 0x00	; 0
    38e8:	30 e0       	ldi	r19, 0x00	; 0
    38ea:	40 e2       	ldi	r20, 0x20	; 32
    38ec:	51 e4       	ldi	r21, 0x41	; 65
    38ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38f2:	dc 01       	movw	r26, r24
    38f4:	cb 01       	movw	r24, r22
    38f6:	bc 01       	movw	r22, r24
    38f8:	cd 01       	movw	r24, r26
    38fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38fe:	dc 01       	movw	r26, r24
    3900:	cb 01       	movw	r24, r22
    3902:	9c 8b       	std	Y+20, r25	; 0x14
    3904:	8b 8b       	std	Y+19, r24	; 0x13
    3906:	0f c0       	rjmp	.+30     	; 0x3926 <H_LCD_void_latchByte+0x25e>
    3908:	80 e9       	ldi	r24, 0x90	; 144
    390a:	91 e0       	ldi	r25, 0x01	; 1
    390c:	9a 8b       	std	Y+18, r25	; 0x12
    390e:	89 8b       	std	Y+17, r24	; 0x11
    3910:	89 89       	ldd	r24, Y+17	; 0x11
    3912:	9a 89       	ldd	r25, Y+18	; 0x12
    3914:	01 97       	sbiw	r24, 0x01	; 1
    3916:	f1 f7       	brne	.-4      	; 0x3914 <H_LCD_void_latchByte+0x24c>
    3918:	9a 8b       	std	Y+18, r25	; 0x12
    391a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    391c:	8b 89       	ldd	r24, Y+19	; 0x13
    391e:	9c 89       	ldd	r25, Y+20	; 0x14
    3920:	01 97       	sbiw	r24, 0x01	; 1
    3922:	9c 8b       	std	Y+20, r25	; 0x14
    3924:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3926:	8b 89       	ldd	r24, Y+19	; 0x13
    3928:	9c 89       	ldd	r25, Y+20	; 0x14
    392a:	00 97       	sbiw	r24, 0x00	; 0
    392c:	69 f7       	brne	.-38     	; 0x3908 <H_LCD_void_latchByte+0x240>
    392e:	14 c0       	rjmp	.+40     	; 0x3958 <H_LCD_void_latchByte+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3930:	6d 89       	ldd	r22, Y+21	; 0x15
    3932:	7e 89       	ldd	r23, Y+22	; 0x16
    3934:	8f 89       	ldd	r24, Y+23	; 0x17
    3936:	98 8d       	ldd	r25, Y+24	; 0x18
    3938:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    393c:	dc 01       	movw	r26, r24
    393e:	cb 01       	movw	r24, r22
    3940:	9c 8b       	std	Y+20, r25	; 0x14
    3942:	8b 8b       	std	Y+19, r24	; 0x13
    3944:	8b 89       	ldd	r24, Y+19	; 0x13
    3946:	9c 89       	ldd	r25, Y+20	; 0x14
    3948:	98 8b       	std	Y+16, r25	; 0x10
    394a:	8f 87       	std	Y+15, r24	; 0x0f
    394c:	8f 85       	ldd	r24, Y+15	; 0x0f
    394e:	98 89       	ldd	r25, Y+16	; 0x10
    3950:	01 97       	sbiw	r24, 0x01	; 1
    3952:	f1 f7       	brne	.-4      	; 0x3950 <H_LCD_void_latchByte+0x288>
    3954:	98 8b       	std	Y+16, r25	; 0x10
    3956:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
    3958:	8c e0       	ldi	r24, 0x0C	; 12
    395a:	60 e0       	ldi	r22, 0x00	; 0
    395c:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
    3960:	80 e0       	ldi	r24, 0x00	; 0
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	a0 ef       	ldi	r26, 0xF0	; 240
    3966:	b1 e4       	ldi	r27, 0x41	; 65
    3968:	8b 87       	std	Y+11, r24	; 0x0b
    396a:	9c 87       	std	Y+12, r25	; 0x0c
    396c:	ad 87       	std	Y+13, r26	; 0x0d
    396e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3970:	6b 85       	ldd	r22, Y+11	; 0x0b
    3972:	7c 85       	ldd	r23, Y+12	; 0x0c
    3974:	8d 85       	ldd	r24, Y+13	; 0x0d
    3976:	9e 85       	ldd	r25, Y+14	; 0x0e
    3978:	20 e0       	ldi	r18, 0x00	; 0
    397a:	30 e0       	ldi	r19, 0x00	; 0
    397c:	4a e7       	ldi	r20, 0x7A	; 122
    397e:	55 e4       	ldi	r21, 0x45	; 69
    3980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3984:	dc 01       	movw	r26, r24
    3986:	cb 01       	movw	r24, r22
    3988:	8f 83       	std	Y+7, r24	; 0x07
    398a:	98 87       	std	Y+8, r25	; 0x08
    398c:	a9 87       	std	Y+9, r26	; 0x09
    398e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3990:	6f 81       	ldd	r22, Y+7	; 0x07
    3992:	78 85       	ldd	r23, Y+8	; 0x08
    3994:	89 85       	ldd	r24, Y+9	; 0x09
    3996:	9a 85       	ldd	r25, Y+10	; 0x0a
    3998:	20 e0       	ldi	r18, 0x00	; 0
    399a:	30 e0       	ldi	r19, 0x00	; 0
    399c:	40 e8       	ldi	r20, 0x80	; 128
    399e:	5f e3       	ldi	r21, 0x3F	; 63
    39a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39a4:	88 23       	and	r24, r24
    39a6:	2c f4       	brge	.+10     	; 0x39b2 <H_LCD_void_latchByte+0x2ea>
		__ticks = 1;
    39a8:	81 e0       	ldi	r24, 0x01	; 1
    39aa:	90 e0       	ldi	r25, 0x00	; 0
    39ac:	9e 83       	std	Y+6, r25	; 0x06
    39ae:	8d 83       	std	Y+5, r24	; 0x05
    39b0:	3f c0       	rjmp	.+126    	; 0x3a30 <H_LCD_void_latchByte+0x368>
	else if (__tmp > 65535)
    39b2:	6f 81       	ldd	r22, Y+7	; 0x07
    39b4:	78 85       	ldd	r23, Y+8	; 0x08
    39b6:	89 85       	ldd	r24, Y+9	; 0x09
    39b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ba:	20 e0       	ldi	r18, 0x00	; 0
    39bc:	3f ef       	ldi	r19, 0xFF	; 255
    39be:	4f e7       	ldi	r20, 0x7F	; 127
    39c0:	57 e4       	ldi	r21, 0x47	; 71
    39c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39c6:	18 16       	cp	r1, r24
    39c8:	4c f5       	brge	.+82     	; 0x3a1c <H_LCD_void_latchByte+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    39cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    39ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    39d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    39d2:	20 e0       	ldi	r18, 0x00	; 0
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	40 e2       	ldi	r20, 0x20	; 32
    39d8:	51 e4       	ldi	r21, 0x41	; 65
    39da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39de:	dc 01       	movw	r26, r24
    39e0:	cb 01       	movw	r24, r22
    39e2:	bc 01       	movw	r22, r24
    39e4:	cd 01       	movw	r24, r26
    39e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ea:	dc 01       	movw	r26, r24
    39ec:	cb 01       	movw	r24, r22
    39ee:	9e 83       	std	Y+6, r25	; 0x06
    39f0:	8d 83       	std	Y+5, r24	; 0x05
    39f2:	0f c0       	rjmp	.+30     	; 0x3a12 <H_LCD_void_latchByte+0x34a>
    39f4:	80 e9       	ldi	r24, 0x90	; 144
    39f6:	91 e0       	ldi	r25, 0x01	; 1
    39f8:	9c 83       	std	Y+4, r25	; 0x04
    39fa:	8b 83       	std	Y+3, r24	; 0x03
    39fc:	8b 81       	ldd	r24, Y+3	; 0x03
    39fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3a00:	01 97       	sbiw	r24, 0x01	; 1
    3a02:	f1 f7       	brne	.-4      	; 0x3a00 <H_LCD_void_latchByte+0x338>
    3a04:	9c 83       	std	Y+4, r25	; 0x04
    3a06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a08:	8d 81       	ldd	r24, Y+5	; 0x05
    3a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a0c:	01 97       	sbiw	r24, 0x01	; 1
    3a0e:	9e 83       	std	Y+6, r25	; 0x06
    3a10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a12:	8d 81       	ldd	r24, Y+5	; 0x05
    3a14:	9e 81       	ldd	r25, Y+6	; 0x06
    3a16:	00 97       	sbiw	r24, 0x00	; 0
    3a18:	69 f7       	brne	.-38     	; 0x39f4 <H_LCD_void_latchByte+0x32c>
    3a1a:	14 c0       	rjmp	.+40     	; 0x3a44 <H_LCD_void_latchByte+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a1c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a1e:	78 85       	ldd	r23, Y+8	; 0x08
    3a20:	89 85       	ldd	r24, Y+9	; 0x09
    3a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a28:	dc 01       	movw	r26, r24
    3a2a:	cb 01       	movw	r24, r22
    3a2c:	9e 83       	std	Y+6, r25	; 0x06
    3a2e:	8d 83       	std	Y+5, r24	; 0x05
    3a30:	8d 81       	ldd	r24, Y+5	; 0x05
    3a32:	9e 81       	ldd	r25, Y+6	; 0x06
    3a34:	9a 83       	std	Y+2, r25	; 0x02
    3a36:	89 83       	std	Y+1, r24	; 0x01
    3a38:	89 81       	ldd	r24, Y+1	; 0x01
    3a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a3c:	01 97       	sbiw	r24, 0x01	; 1
    3a3e:	f1 f7       	brne	.-4      	; 0x3a3c <H_LCD_void_latchByte+0x374>
    3a40:	9a 83       	std	Y+2, r25	; 0x02
    3a42:	89 83       	std	Y+1, r24	; 0x01
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
	_delay_ms(30);

#endif

}
    3a44:	ab 96       	adiw	r28, 0x2b	; 43
    3a46:	0f b6       	in	r0, 0x3f	; 63
    3a48:	f8 94       	cli
    3a4a:	de bf       	out	0x3e, r29	; 62
    3a4c:	0f be       	out	0x3f, r0	; 63
    3a4e:	cd bf       	out	0x3d, r28	; 61
    3a50:	cf 91       	pop	r28
    3a52:	df 91       	pop	r29
    3a54:	08 95       	ret

00003a56 <H_LCD_void_Init>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_Init(void)
{
    3a56:	0f 93       	push	r16
    3a58:	1f 93       	push	r17
    3a5a:	df 93       	push	r29
    3a5c:	cf 93       	push	r28
    3a5e:	cd b7       	in	r28, 0x3d	; 61
    3a60:	de b7       	in	r29, 0x3e	; 62
    3a62:	c6 54       	subi	r28, 0x46	; 70
    3a64:	d0 40       	sbci	r29, 0x00	; 0
    3a66:	0f b6       	in	r0, 0x3f	; 63
    3a68:	f8 94       	cli
    3a6a:	de bf       	out	0x3e, r29	; 62
    3a6c:	0f be       	out	0x3f, r0	; 63
    3a6e:	cd bf       	out	0x3d, r28	; 61
    3a70:	fe 01       	movw	r30, r28
    3a72:	ed 5b       	subi	r30, 0xBD	; 189
    3a74:	ff 4f       	sbci	r31, 0xFF	; 255
    3a76:	80 e0       	ldi	r24, 0x00	; 0
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	a6 e1       	ldi	r26, 0x16	; 22
    3a7c:	b3 e4       	ldi	r27, 0x43	; 67
    3a7e:	80 83       	st	Z, r24
    3a80:	91 83       	std	Z+1, r25	; 0x01
    3a82:	a2 83       	std	Z+2, r26	; 0x02
    3a84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a86:	8e 01       	movw	r16, r28
    3a88:	01 5c       	subi	r16, 0xC1	; 193
    3a8a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a8c:	fe 01       	movw	r30, r28
    3a8e:	ed 5b       	subi	r30, 0xBD	; 189
    3a90:	ff 4f       	sbci	r31, 0xFF	; 255
    3a92:	60 81       	ld	r22, Z
    3a94:	71 81       	ldd	r23, Z+1	; 0x01
    3a96:	82 81       	ldd	r24, Z+2	; 0x02
    3a98:	93 81       	ldd	r25, Z+3	; 0x03
    3a9a:	20 e0       	ldi	r18, 0x00	; 0
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	4a e7       	ldi	r20, 0x7A	; 122
    3aa0:	55 e4       	ldi	r21, 0x45	; 69
    3aa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aa6:	dc 01       	movw	r26, r24
    3aa8:	cb 01       	movw	r24, r22
    3aaa:	f8 01       	movw	r30, r16
    3aac:	80 83       	st	Z, r24
    3aae:	91 83       	std	Z+1, r25	; 0x01
    3ab0:	a2 83       	std	Z+2, r26	; 0x02
    3ab2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ab4:	fe 01       	movw	r30, r28
    3ab6:	ff 96       	adiw	r30, 0x3f	; 63
    3ab8:	60 81       	ld	r22, Z
    3aba:	71 81       	ldd	r23, Z+1	; 0x01
    3abc:	82 81       	ldd	r24, Z+2	; 0x02
    3abe:	93 81       	ldd	r25, Z+3	; 0x03
    3ac0:	20 e0       	ldi	r18, 0x00	; 0
    3ac2:	30 e0       	ldi	r19, 0x00	; 0
    3ac4:	40 e8       	ldi	r20, 0x80	; 128
    3ac6:	5f e3       	ldi	r21, 0x3F	; 63
    3ac8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3acc:	88 23       	and	r24, r24
    3ace:	2c f4       	brge	.+10     	; 0x3ada <H_LCD_void_Init+0x84>
		__ticks = 1;
    3ad0:	81 e0       	ldi	r24, 0x01	; 1
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	9e af       	std	Y+62, r25	; 0x3e
    3ad6:	8d af       	std	Y+61, r24	; 0x3d
    3ad8:	46 c0       	rjmp	.+140    	; 0x3b66 <H_LCD_void_Init+0x110>
	else if (__tmp > 65535)
    3ada:	fe 01       	movw	r30, r28
    3adc:	ff 96       	adiw	r30, 0x3f	; 63
    3ade:	60 81       	ld	r22, Z
    3ae0:	71 81       	ldd	r23, Z+1	; 0x01
    3ae2:	82 81       	ldd	r24, Z+2	; 0x02
    3ae4:	93 81       	ldd	r25, Z+3	; 0x03
    3ae6:	20 e0       	ldi	r18, 0x00	; 0
    3ae8:	3f ef       	ldi	r19, 0xFF	; 255
    3aea:	4f e7       	ldi	r20, 0x7F	; 127
    3aec:	57 e4       	ldi	r21, 0x47	; 71
    3aee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3af2:	18 16       	cp	r1, r24
    3af4:	64 f5       	brge	.+88     	; 0x3b4e <H_LCD_void_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3af6:	fe 01       	movw	r30, r28
    3af8:	ed 5b       	subi	r30, 0xBD	; 189
    3afa:	ff 4f       	sbci	r31, 0xFF	; 255
    3afc:	60 81       	ld	r22, Z
    3afe:	71 81       	ldd	r23, Z+1	; 0x01
    3b00:	82 81       	ldd	r24, Z+2	; 0x02
    3b02:	93 81       	ldd	r25, Z+3	; 0x03
    3b04:	20 e0       	ldi	r18, 0x00	; 0
    3b06:	30 e0       	ldi	r19, 0x00	; 0
    3b08:	40 e2       	ldi	r20, 0x20	; 32
    3b0a:	51 e4       	ldi	r21, 0x41	; 65
    3b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b10:	dc 01       	movw	r26, r24
    3b12:	cb 01       	movw	r24, r22
    3b14:	bc 01       	movw	r22, r24
    3b16:	cd 01       	movw	r24, r26
    3b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b1c:	dc 01       	movw	r26, r24
    3b1e:	cb 01       	movw	r24, r22
    3b20:	9e af       	std	Y+62, r25	; 0x3e
    3b22:	8d af       	std	Y+61, r24	; 0x3d
    3b24:	0f c0       	rjmp	.+30     	; 0x3b44 <H_LCD_void_Init+0xee>
    3b26:	80 e9       	ldi	r24, 0x90	; 144
    3b28:	91 e0       	ldi	r25, 0x01	; 1
    3b2a:	9c af       	std	Y+60, r25	; 0x3c
    3b2c:	8b af       	std	Y+59, r24	; 0x3b
    3b2e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3b30:	9c ad       	ldd	r25, Y+60	; 0x3c
    3b32:	01 97       	sbiw	r24, 0x01	; 1
    3b34:	f1 f7       	brne	.-4      	; 0x3b32 <H_LCD_void_Init+0xdc>
    3b36:	9c af       	std	Y+60, r25	; 0x3c
    3b38:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b3a:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b3c:	9e ad       	ldd	r25, Y+62	; 0x3e
    3b3e:	01 97       	sbiw	r24, 0x01	; 1
    3b40:	9e af       	std	Y+62, r25	; 0x3e
    3b42:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b44:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b46:	9e ad       	ldd	r25, Y+62	; 0x3e
    3b48:	00 97       	sbiw	r24, 0x00	; 0
    3b4a:	69 f7       	brne	.-38     	; 0x3b26 <H_LCD_void_Init+0xd0>
    3b4c:	16 c0       	rjmp	.+44     	; 0x3b7a <H_LCD_void_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b4e:	fe 01       	movw	r30, r28
    3b50:	ff 96       	adiw	r30, 0x3f	; 63
    3b52:	60 81       	ld	r22, Z
    3b54:	71 81       	ldd	r23, Z+1	; 0x01
    3b56:	82 81       	ldd	r24, Z+2	; 0x02
    3b58:	93 81       	ldd	r25, Z+3	; 0x03
    3b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b5e:	dc 01       	movw	r26, r24
    3b60:	cb 01       	movw	r24, r22
    3b62:	9e af       	std	Y+62, r25	; 0x3e
    3b64:	8d af       	std	Y+61, r24	; 0x3d
    3b66:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b68:	9e ad       	ldd	r25, Y+62	; 0x3e
    3b6a:	9a af       	std	Y+58, r25	; 0x3a
    3b6c:	89 af       	std	Y+57, r24	; 0x39
    3b6e:	89 ad       	ldd	r24, Y+57	; 0x39
    3b70:	9a ad       	ldd	r25, Y+58	; 0x3a
    3b72:	01 97       	sbiw	r24, 0x01	; 1
    3b74:	f1 f7       	brne	.-4      	; 0x3b72 <H_LCD_void_Init+0x11c>
    3b76:	9a af       	std	Y+58, r25	; 0x3a
    3b78:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(150);
	M_Dio_void_setPinValue(CLCD_RS_PIN,DIO_LOW);
    3b7a:	8d e0       	ldi	r24, 0x0D	; 13
    3b7c:	60 e0       	ldi	r22, 0x00	; 0
    3b7e:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
	/*Function set*/
#if(LCD_MODE == _4_BIT_MODE)
	H_LCD_void_sendCommand(CLCD_FUNCTION_SET_1);
    3b82:	82 e0       	ldi	r24, 0x02	; 2
    3b84:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <H_LCD_void_sendCommand>
    3b88:	80 e0       	ldi	r24, 0x00	; 0
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	a0 ea       	ldi	r26, 0xA0	; 160
    3b8e:	b0 e4       	ldi	r27, 0x40	; 64
    3b90:	8d ab       	std	Y+53, r24	; 0x35
    3b92:	9e ab       	std	Y+54, r25	; 0x36
    3b94:	af ab       	std	Y+55, r26	; 0x37
    3b96:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b98:	6d a9       	ldd	r22, Y+53	; 0x35
    3b9a:	7e a9       	ldd	r23, Y+54	; 0x36
    3b9c:	8f a9       	ldd	r24, Y+55	; 0x37
    3b9e:	98 ad       	ldd	r25, Y+56	; 0x38
    3ba0:	20 e0       	ldi	r18, 0x00	; 0
    3ba2:	30 e0       	ldi	r19, 0x00	; 0
    3ba4:	4a e7       	ldi	r20, 0x7A	; 122
    3ba6:	55 e4       	ldi	r21, 0x45	; 69
    3ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bac:	dc 01       	movw	r26, r24
    3bae:	cb 01       	movw	r24, r22
    3bb0:	89 ab       	std	Y+49, r24	; 0x31
    3bb2:	9a ab       	std	Y+50, r25	; 0x32
    3bb4:	ab ab       	std	Y+51, r26	; 0x33
    3bb6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3bb8:	69 a9       	ldd	r22, Y+49	; 0x31
    3bba:	7a a9       	ldd	r23, Y+50	; 0x32
    3bbc:	8b a9       	ldd	r24, Y+51	; 0x33
    3bbe:	9c a9       	ldd	r25, Y+52	; 0x34
    3bc0:	20 e0       	ldi	r18, 0x00	; 0
    3bc2:	30 e0       	ldi	r19, 0x00	; 0
    3bc4:	40 e8       	ldi	r20, 0x80	; 128
    3bc6:	5f e3       	ldi	r21, 0x3F	; 63
    3bc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bcc:	88 23       	and	r24, r24
    3bce:	2c f4       	brge	.+10     	; 0x3bda <H_LCD_void_Init+0x184>
		__ticks = 1;
    3bd0:	81 e0       	ldi	r24, 0x01	; 1
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	98 ab       	std	Y+48, r25	; 0x30
    3bd6:	8f a7       	std	Y+47, r24	; 0x2f
    3bd8:	3f c0       	rjmp	.+126    	; 0x3c58 <H_LCD_void_Init+0x202>
	else if (__tmp > 65535)
    3bda:	69 a9       	ldd	r22, Y+49	; 0x31
    3bdc:	7a a9       	ldd	r23, Y+50	; 0x32
    3bde:	8b a9       	ldd	r24, Y+51	; 0x33
    3be0:	9c a9       	ldd	r25, Y+52	; 0x34
    3be2:	20 e0       	ldi	r18, 0x00	; 0
    3be4:	3f ef       	ldi	r19, 0xFF	; 255
    3be6:	4f e7       	ldi	r20, 0x7F	; 127
    3be8:	57 e4       	ldi	r21, 0x47	; 71
    3bea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bee:	18 16       	cp	r1, r24
    3bf0:	4c f5       	brge	.+82     	; 0x3c44 <H_LCD_void_Init+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bf2:	6d a9       	ldd	r22, Y+53	; 0x35
    3bf4:	7e a9       	ldd	r23, Y+54	; 0x36
    3bf6:	8f a9       	ldd	r24, Y+55	; 0x37
    3bf8:	98 ad       	ldd	r25, Y+56	; 0x38
    3bfa:	20 e0       	ldi	r18, 0x00	; 0
    3bfc:	30 e0       	ldi	r19, 0x00	; 0
    3bfe:	40 e2       	ldi	r20, 0x20	; 32
    3c00:	51 e4       	ldi	r21, 0x41	; 65
    3c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c06:	dc 01       	movw	r26, r24
    3c08:	cb 01       	movw	r24, r22
    3c0a:	bc 01       	movw	r22, r24
    3c0c:	cd 01       	movw	r24, r26
    3c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c12:	dc 01       	movw	r26, r24
    3c14:	cb 01       	movw	r24, r22
    3c16:	98 ab       	std	Y+48, r25	; 0x30
    3c18:	8f a7       	std	Y+47, r24	; 0x2f
    3c1a:	0f c0       	rjmp	.+30     	; 0x3c3a <H_LCD_void_Init+0x1e4>
    3c1c:	80 e9       	ldi	r24, 0x90	; 144
    3c1e:	91 e0       	ldi	r25, 0x01	; 1
    3c20:	9e a7       	std	Y+46, r25	; 0x2e
    3c22:	8d a7       	std	Y+45, r24	; 0x2d
    3c24:	8d a5       	ldd	r24, Y+45	; 0x2d
    3c26:	9e a5       	ldd	r25, Y+46	; 0x2e
    3c28:	01 97       	sbiw	r24, 0x01	; 1
    3c2a:	f1 f7       	brne	.-4      	; 0x3c28 <H_LCD_void_Init+0x1d2>
    3c2c:	9e a7       	std	Y+46, r25	; 0x2e
    3c2e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c30:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c32:	98 a9       	ldd	r25, Y+48	; 0x30
    3c34:	01 97       	sbiw	r24, 0x01	; 1
    3c36:	98 ab       	std	Y+48, r25	; 0x30
    3c38:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c3c:	98 a9       	ldd	r25, Y+48	; 0x30
    3c3e:	00 97       	sbiw	r24, 0x00	; 0
    3c40:	69 f7       	brne	.-38     	; 0x3c1c <H_LCD_void_Init+0x1c6>
    3c42:	14 c0       	rjmp	.+40     	; 0x3c6c <H_LCD_void_Init+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c44:	69 a9       	ldd	r22, Y+49	; 0x31
    3c46:	7a a9       	ldd	r23, Y+50	; 0x32
    3c48:	8b a9       	ldd	r24, Y+51	; 0x33
    3c4a:	9c a9       	ldd	r25, Y+52	; 0x34
    3c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c50:	dc 01       	movw	r26, r24
    3c52:	cb 01       	movw	r24, r22
    3c54:	98 ab       	std	Y+48, r25	; 0x30
    3c56:	8f a7       	std	Y+47, r24	; 0x2f
    3c58:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c5a:	98 a9       	ldd	r25, Y+48	; 0x30
    3c5c:	9c a7       	std	Y+44, r25	; 0x2c
    3c5e:	8b a7       	std	Y+43, r24	; 0x2b
    3c60:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c62:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c64:	01 97       	sbiw	r24, 0x01	; 1
    3c66:	f1 f7       	brne	.-4      	; 0x3c64 <H_LCD_void_Init+0x20e>
    3c68:	9c a7       	std	Y+44, r25	; 0x2c
    3c6a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	H_LCD_void_sendCommand(CLCD_FUNCTION_SET_2);
    3c6c:	88 e2       	ldi	r24, 0x28	; 40
    3c6e:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <H_LCD_void_sendCommand>
    3c72:	80 e0       	ldi	r24, 0x00	; 0
    3c74:	90 e0       	ldi	r25, 0x00	; 0
    3c76:	a0 ea       	ldi	r26, 0xA0	; 160
    3c78:	b0 e4       	ldi	r27, 0x40	; 64
    3c7a:	8f a3       	std	Y+39, r24	; 0x27
    3c7c:	98 a7       	std	Y+40, r25	; 0x28
    3c7e:	a9 a7       	std	Y+41, r26	; 0x29
    3c80:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c82:	6f a1       	ldd	r22, Y+39	; 0x27
    3c84:	78 a5       	ldd	r23, Y+40	; 0x28
    3c86:	89 a5       	ldd	r24, Y+41	; 0x29
    3c88:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c8a:	20 e0       	ldi	r18, 0x00	; 0
    3c8c:	30 e0       	ldi	r19, 0x00	; 0
    3c8e:	4a e7       	ldi	r20, 0x7A	; 122
    3c90:	55 e4       	ldi	r21, 0x45	; 69
    3c92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c96:	dc 01       	movw	r26, r24
    3c98:	cb 01       	movw	r24, r22
    3c9a:	8b a3       	std	Y+35, r24	; 0x23
    3c9c:	9c a3       	std	Y+36, r25	; 0x24
    3c9e:	ad a3       	std	Y+37, r26	; 0x25
    3ca0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3ca2:	6b a1       	ldd	r22, Y+35	; 0x23
    3ca4:	7c a1       	ldd	r23, Y+36	; 0x24
    3ca6:	8d a1       	ldd	r24, Y+37	; 0x25
    3ca8:	9e a1       	ldd	r25, Y+38	; 0x26
    3caa:	20 e0       	ldi	r18, 0x00	; 0
    3cac:	30 e0       	ldi	r19, 0x00	; 0
    3cae:	40 e8       	ldi	r20, 0x80	; 128
    3cb0:	5f e3       	ldi	r21, 0x3F	; 63
    3cb2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cb6:	88 23       	and	r24, r24
    3cb8:	2c f4       	brge	.+10     	; 0x3cc4 <H_LCD_void_Init+0x26e>
		__ticks = 1;
    3cba:	81 e0       	ldi	r24, 0x01	; 1
    3cbc:	90 e0       	ldi	r25, 0x00	; 0
    3cbe:	9a a3       	std	Y+34, r25	; 0x22
    3cc0:	89 a3       	std	Y+33, r24	; 0x21
    3cc2:	3f c0       	rjmp	.+126    	; 0x3d42 <H_LCD_void_Init+0x2ec>
	else if (__tmp > 65535)
    3cc4:	6b a1       	ldd	r22, Y+35	; 0x23
    3cc6:	7c a1       	ldd	r23, Y+36	; 0x24
    3cc8:	8d a1       	ldd	r24, Y+37	; 0x25
    3cca:	9e a1       	ldd	r25, Y+38	; 0x26
    3ccc:	20 e0       	ldi	r18, 0x00	; 0
    3cce:	3f ef       	ldi	r19, 0xFF	; 255
    3cd0:	4f e7       	ldi	r20, 0x7F	; 127
    3cd2:	57 e4       	ldi	r21, 0x47	; 71
    3cd4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cd8:	18 16       	cp	r1, r24
    3cda:	4c f5       	brge	.+82     	; 0x3d2e <H_LCD_void_Init+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cdc:	6f a1       	ldd	r22, Y+39	; 0x27
    3cde:	78 a5       	ldd	r23, Y+40	; 0x28
    3ce0:	89 a5       	ldd	r24, Y+41	; 0x29
    3ce2:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ce4:	20 e0       	ldi	r18, 0x00	; 0
    3ce6:	30 e0       	ldi	r19, 0x00	; 0
    3ce8:	40 e2       	ldi	r20, 0x20	; 32
    3cea:	51 e4       	ldi	r21, 0x41	; 65
    3cec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf0:	dc 01       	movw	r26, r24
    3cf2:	cb 01       	movw	r24, r22
    3cf4:	bc 01       	movw	r22, r24
    3cf6:	cd 01       	movw	r24, r26
    3cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cfc:	dc 01       	movw	r26, r24
    3cfe:	cb 01       	movw	r24, r22
    3d00:	9a a3       	std	Y+34, r25	; 0x22
    3d02:	89 a3       	std	Y+33, r24	; 0x21
    3d04:	0f c0       	rjmp	.+30     	; 0x3d24 <H_LCD_void_Init+0x2ce>
    3d06:	80 e9       	ldi	r24, 0x90	; 144
    3d08:	91 e0       	ldi	r25, 0x01	; 1
    3d0a:	98 a3       	std	Y+32, r25	; 0x20
    3d0c:	8f 8f       	std	Y+31, r24	; 0x1f
    3d0e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3d10:	98 a1       	ldd	r25, Y+32	; 0x20
    3d12:	01 97       	sbiw	r24, 0x01	; 1
    3d14:	f1 f7       	brne	.-4      	; 0x3d12 <H_LCD_void_Init+0x2bc>
    3d16:	98 a3       	std	Y+32, r25	; 0x20
    3d18:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d1a:	89 a1       	ldd	r24, Y+33	; 0x21
    3d1c:	9a a1       	ldd	r25, Y+34	; 0x22
    3d1e:	01 97       	sbiw	r24, 0x01	; 1
    3d20:	9a a3       	std	Y+34, r25	; 0x22
    3d22:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d24:	89 a1       	ldd	r24, Y+33	; 0x21
    3d26:	9a a1       	ldd	r25, Y+34	; 0x22
    3d28:	00 97       	sbiw	r24, 0x00	; 0
    3d2a:	69 f7       	brne	.-38     	; 0x3d06 <H_LCD_void_Init+0x2b0>
    3d2c:	14 c0       	rjmp	.+40     	; 0x3d56 <H_LCD_void_Init+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d2e:	6b a1       	ldd	r22, Y+35	; 0x23
    3d30:	7c a1       	ldd	r23, Y+36	; 0x24
    3d32:	8d a1       	ldd	r24, Y+37	; 0x25
    3d34:	9e a1       	ldd	r25, Y+38	; 0x26
    3d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d3a:	dc 01       	movw	r26, r24
    3d3c:	cb 01       	movw	r24, r22
    3d3e:	9a a3       	std	Y+34, r25	; 0x22
    3d40:	89 a3       	std	Y+33, r24	; 0x21
    3d42:	89 a1       	ldd	r24, Y+33	; 0x21
    3d44:	9a a1       	ldd	r25, Y+34	; 0x22
    3d46:	9e 8f       	std	Y+30, r25	; 0x1e
    3d48:	8d 8f       	std	Y+29, r24	; 0x1d
    3d4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d4c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3d4e:	01 97       	sbiw	r24, 0x01	; 1
    3d50:	f1 f7       	brne	.-4      	; 0x3d4e <H_LCD_void_Init+0x2f8>
    3d52:	9e 8f       	std	Y+30, r25	; 0x1e
    3d54:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	/*Display ON/OFF*/
	H_LCD_void_sendCommand(CLCD_DISPLAY);
    3d56:	8c e0       	ldi	r24, 0x0C	; 12
    3d58:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <H_LCD_void_sendCommand>
    3d5c:	80 e0       	ldi	r24, 0x00	; 0
    3d5e:	90 e0       	ldi	r25, 0x00	; 0
    3d60:	a0 ea       	ldi	r26, 0xA0	; 160
    3d62:	b0 e4       	ldi	r27, 0x40	; 64
    3d64:	89 8f       	std	Y+25, r24	; 0x19
    3d66:	9a 8f       	std	Y+26, r25	; 0x1a
    3d68:	ab 8f       	std	Y+27, r26	; 0x1b
    3d6a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d6c:	69 8d       	ldd	r22, Y+25	; 0x19
    3d6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d74:	20 e0       	ldi	r18, 0x00	; 0
    3d76:	30 e0       	ldi	r19, 0x00	; 0
    3d78:	4a e7       	ldi	r20, 0x7A	; 122
    3d7a:	55 e4       	ldi	r21, 0x45	; 69
    3d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d80:	dc 01       	movw	r26, r24
    3d82:	cb 01       	movw	r24, r22
    3d84:	8d 8b       	std	Y+21, r24	; 0x15
    3d86:	9e 8b       	std	Y+22, r25	; 0x16
    3d88:	af 8b       	std	Y+23, r26	; 0x17
    3d8a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d8c:	6d 89       	ldd	r22, Y+21	; 0x15
    3d8e:	7e 89       	ldd	r23, Y+22	; 0x16
    3d90:	8f 89       	ldd	r24, Y+23	; 0x17
    3d92:	98 8d       	ldd	r25, Y+24	; 0x18
    3d94:	20 e0       	ldi	r18, 0x00	; 0
    3d96:	30 e0       	ldi	r19, 0x00	; 0
    3d98:	40 e8       	ldi	r20, 0x80	; 128
    3d9a:	5f e3       	ldi	r21, 0x3F	; 63
    3d9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3da0:	88 23       	and	r24, r24
    3da2:	2c f4       	brge	.+10     	; 0x3dae <H_LCD_void_Init+0x358>
		__ticks = 1;
    3da4:	81 e0       	ldi	r24, 0x01	; 1
    3da6:	90 e0       	ldi	r25, 0x00	; 0
    3da8:	9c 8b       	std	Y+20, r25	; 0x14
    3daa:	8b 8b       	std	Y+19, r24	; 0x13
    3dac:	3f c0       	rjmp	.+126    	; 0x3e2c <H_LCD_void_Init+0x3d6>
	else if (__tmp > 65535)
    3dae:	6d 89       	ldd	r22, Y+21	; 0x15
    3db0:	7e 89       	ldd	r23, Y+22	; 0x16
    3db2:	8f 89       	ldd	r24, Y+23	; 0x17
    3db4:	98 8d       	ldd	r25, Y+24	; 0x18
    3db6:	20 e0       	ldi	r18, 0x00	; 0
    3db8:	3f ef       	ldi	r19, 0xFF	; 255
    3dba:	4f e7       	ldi	r20, 0x7F	; 127
    3dbc:	57 e4       	ldi	r21, 0x47	; 71
    3dbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3dc2:	18 16       	cp	r1, r24
    3dc4:	4c f5       	brge	.+82     	; 0x3e18 <H_LCD_void_Init+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dc6:	69 8d       	ldd	r22, Y+25	; 0x19
    3dc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3dca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3dcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3dce:	20 e0       	ldi	r18, 0x00	; 0
    3dd0:	30 e0       	ldi	r19, 0x00	; 0
    3dd2:	40 e2       	ldi	r20, 0x20	; 32
    3dd4:	51 e4       	ldi	r21, 0x41	; 65
    3dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dda:	dc 01       	movw	r26, r24
    3ddc:	cb 01       	movw	r24, r22
    3dde:	bc 01       	movw	r22, r24
    3de0:	cd 01       	movw	r24, r26
    3de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3de6:	dc 01       	movw	r26, r24
    3de8:	cb 01       	movw	r24, r22
    3dea:	9c 8b       	std	Y+20, r25	; 0x14
    3dec:	8b 8b       	std	Y+19, r24	; 0x13
    3dee:	0f c0       	rjmp	.+30     	; 0x3e0e <H_LCD_void_Init+0x3b8>
    3df0:	80 e9       	ldi	r24, 0x90	; 144
    3df2:	91 e0       	ldi	r25, 0x01	; 1
    3df4:	9a 8b       	std	Y+18, r25	; 0x12
    3df6:	89 8b       	std	Y+17, r24	; 0x11
    3df8:	89 89       	ldd	r24, Y+17	; 0x11
    3dfa:	9a 89       	ldd	r25, Y+18	; 0x12
    3dfc:	01 97       	sbiw	r24, 0x01	; 1
    3dfe:	f1 f7       	brne	.-4      	; 0x3dfc <H_LCD_void_Init+0x3a6>
    3e00:	9a 8b       	std	Y+18, r25	; 0x12
    3e02:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e04:	8b 89       	ldd	r24, Y+19	; 0x13
    3e06:	9c 89       	ldd	r25, Y+20	; 0x14
    3e08:	01 97       	sbiw	r24, 0x01	; 1
    3e0a:	9c 8b       	std	Y+20, r25	; 0x14
    3e0c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e0e:	8b 89       	ldd	r24, Y+19	; 0x13
    3e10:	9c 89       	ldd	r25, Y+20	; 0x14
    3e12:	00 97       	sbiw	r24, 0x00	; 0
    3e14:	69 f7       	brne	.-38     	; 0x3df0 <H_LCD_void_Init+0x39a>
    3e16:	14 c0       	rjmp	.+40     	; 0x3e40 <H_LCD_void_Init+0x3ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e18:	6d 89       	ldd	r22, Y+21	; 0x15
    3e1a:	7e 89       	ldd	r23, Y+22	; 0x16
    3e1c:	8f 89       	ldd	r24, Y+23	; 0x17
    3e1e:	98 8d       	ldd	r25, Y+24	; 0x18
    3e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e24:	dc 01       	movw	r26, r24
    3e26:	cb 01       	movw	r24, r22
    3e28:	9c 8b       	std	Y+20, r25	; 0x14
    3e2a:	8b 8b       	std	Y+19, r24	; 0x13
    3e2c:	8b 89       	ldd	r24, Y+19	; 0x13
    3e2e:	9c 89       	ldd	r25, Y+20	; 0x14
    3e30:	98 8b       	std	Y+16, r25	; 0x10
    3e32:	8f 87       	std	Y+15, r24	; 0x0f
    3e34:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e36:	98 89       	ldd	r25, Y+16	; 0x10
    3e38:	01 97       	sbiw	r24, 0x01	; 1
    3e3a:	f1 f7       	brne	.-4      	; 0x3e38 <H_LCD_void_Init+0x3e2>
    3e3c:	98 8b       	std	Y+16, r25	; 0x10
    3e3e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	/*Display clear*/
	H_LCD_void_sendCommand(CLCD_CLEAR);
    3e40:	81 e0       	ldi	r24, 0x01	; 1
    3e42:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <H_LCD_void_sendCommand>
    3e46:	80 e0       	ldi	r24, 0x00	; 0
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	a0 ea       	ldi	r26, 0xA0	; 160
    3e4c:	b0 e4       	ldi	r27, 0x40	; 64
    3e4e:	8b 87       	std	Y+11, r24	; 0x0b
    3e50:	9c 87       	std	Y+12, r25	; 0x0c
    3e52:	ad 87       	std	Y+13, r26	; 0x0d
    3e54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e56:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e58:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e5e:	20 e0       	ldi	r18, 0x00	; 0
    3e60:	30 e0       	ldi	r19, 0x00	; 0
    3e62:	4a e7       	ldi	r20, 0x7A	; 122
    3e64:	55 e4       	ldi	r21, 0x45	; 69
    3e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e6a:	dc 01       	movw	r26, r24
    3e6c:	cb 01       	movw	r24, r22
    3e6e:	8f 83       	std	Y+7, r24	; 0x07
    3e70:	98 87       	std	Y+8, r25	; 0x08
    3e72:	a9 87       	std	Y+9, r26	; 0x09
    3e74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e76:	6f 81       	ldd	r22, Y+7	; 0x07
    3e78:	78 85       	ldd	r23, Y+8	; 0x08
    3e7a:	89 85       	ldd	r24, Y+9	; 0x09
    3e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e7e:	20 e0       	ldi	r18, 0x00	; 0
    3e80:	30 e0       	ldi	r19, 0x00	; 0
    3e82:	40 e8       	ldi	r20, 0x80	; 128
    3e84:	5f e3       	ldi	r21, 0x3F	; 63
    3e86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e8a:	88 23       	and	r24, r24
    3e8c:	2c f4       	brge	.+10     	; 0x3e98 <H_LCD_void_Init+0x442>
		__ticks = 1;
    3e8e:	81 e0       	ldi	r24, 0x01	; 1
    3e90:	90 e0       	ldi	r25, 0x00	; 0
    3e92:	9e 83       	std	Y+6, r25	; 0x06
    3e94:	8d 83       	std	Y+5, r24	; 0x05
    3e96:	3f c0       	rjmp	.+126    	; 0x3f16 <H_LCD_void_Init+0x4c0>
	else if (__tmp > 65535)
    3e98:	6f 81       	ldd	r22, Y+7	; 0x07
    3e9a:	78 85       	ldd	r23, Y+8	; 0x08
    3e9c:	89 85       	ldd	r24, Y+9	; 0x09
    3e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ea0:	20 e0       	ldi	r18, 0x00	; 0
    3ea2:	3f ef       	ldi	r19, 0xFF	; 255
    3ea4:	4f e7       	ldi	r20, 0x7F	; 127
    3ea6:	57 e4       	ldi	r21, 0x47	; 71
    3ea8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3eac:	18 16       	cp	r1, r24
    3eae:	4c f5       	brge	.+82     	; 0x3f02 <H_LCD_void_Init+0x4ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3eb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3eb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3eb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3eb8:	20 e0       	ldi	r18, 0x00	; 0
    3eba:	30 e0       	ldi	r19, 0x00	; 0
    3ebc:	40 e2       	ldi	r20, 0x20	; 32
    3ebe:	51 e4       	ldi	r21, 0x41	; 65
    3ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ec4:	dc 01       	movw	r26, r24
    3ec6:	cb 01       	movw	r24, r22
    3ec8:	bc 01       	movw	r22, r24
    3eca:	cd 01       	movw	r24, r26
    3ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ed0:	dc 01       	movw	r26, r24
    3ed2:	cb 01       	movw	r24, r22
    3ed4:	9e 83       	std	Y+6, r25	; 0x06
    3ed6:	8d 83       	std	Y+5, r24	; 0x05
    3ed8:	0f c0       	rjmp	.+30     	; 0x3ef8 <H_LCD_void_Init+0x4a2>
    3eda:	80 e9       	ldi	r24, 0x90	; 144
    3edc:	91 e0       	ldi	r25, 0x01	; 1
    3ede:	9c 83       	std	Y+4, r25	; 0x04
    3ee0:	8b 83       	std	Y+3, r24	; 0x03
    3ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ee4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ee6:	01 97       	sbiw	r24, 0x01	; 1
    3ee8:	f1 f7       	brne	.-4      	; 0x3ee6 <H_LCD_void_Init+0x490>
    3eea:	9c 83       	std	Y+4, r25	; 0x04
    3eec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eee:	8d 81       	ldd	r24, Y+5	; 0x05
    3ef0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ef2:	01 97       	sbiw	r24, 0x01	; 1
    3ef4:	9e 83       	std	Y+6, r25	; 0x06
    3ef6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    3efa:	9e 81       	ldd	r25, Y+6	; 0x06
    3efc:	00 97       	sbiw	r24, 0x00	; 0
    3efe:	69 f7       	brne	.-38     	; 0x3eda <H_LCD_void_Init+0x484>
    3f00:	14 c0       	rjmp	.+40     	; 0x3f2a <H_LCD_void_Init+0x4d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f02:	6f 81       	ldd	r22, Y+7	; 0x07
    3f04:	78 85       	ldd	r23, Y+8	; 0x08
    3f06:	89 85       	ldd	r24, Y+9	; 0x09
    3f08:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f0e:	dc 01       	movw	r26, r24
    3f10:	cb 01       	movw	r24, r22
    3f12:	9e 83       	std	Y+6, r25	; 0x06
    3f14:	8d 83       	std	Y+5, r24	; 0x05
    3f16:	8d 81       	ldd	r24, Y+5	; 0x05
    3f18:	9e 81       	ldd	r25, Y+6	; 0x06
    3f1a:	9a 83       	std	Y+2, r25	; 0x02
    3f1c:	89 83       	std	Y+1, r24	; 0x01
    3f1e:	89 81       	ldd	r24, Y+1	; 0x01
    3f20:	9a 81       	ldd	r25, Y+2	; 0x02
    3f22:	01 97       	sbiw	r24, 0x01	; 1
    3f24:	f1 f7       	brne	.-4      	; 0x3f22 <H_LCD_void_Init+0x4cc>
    3f26:	9a 83       	std	Y+2, r25	; 0x02
    3f28:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	H_LCD_void_sendCommand(CLCD_ENTRY_MODE_SET);
    3f2a:	86 e0       	ldi	r24, 0x06	; 6
    3f2c:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <H_LCD_void_sendCommand>
	/*clear display*/
	H_LCD_void_sendCommand(0b00000001);

#endif

}
    3f30:	ca 5b       	subi	r28, 0xBA	; 186
    3f32:	df 4f       	sbci	r29, 0xFF	; 255
    3f34:	0f b6       	in	r0, 0x3f	; 63
    3f36:	f8 94       	cli
    3f38:	de bf       	out	0x3e, r29	; 62
    3f3a:	0f be       	out	0x3f, r0	; 63
    3f3c:	cd bf       	out	0x3d, r28	; 61
    3f3e:	cf 91       	pop	r28
    3f40:	df 91       	pop	r29
    3f42:	1f 91       	pop	r17
    3f44:	0f 91       	pop	r16
    3f46:	08 95       	ret

00003f48 <H_LCD_void_sendData>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_sendData(u8 copy_u8data )
{
    3f48:	df 93       	push	r29
    3f4a:	cf 93       	push	r28
    3f4c:	0f 92       	push	r0
    3f4e:	cd b7       	in	r28, 0x3d	; 61
    3f50:	de b7       	in	r29, 0x3e	; 62
    3f52:	89 83       	std	Y+1, r24	; 0x01
	/*SET RS TO ZERO*/
	M_Dio_void_setPinValue(CLCD_RS_PIN,DIO_HIGH);
    3f54:	8d e0       	ldi	r24, 0x0D	; 13
    3f56:	61 e0       	ldi	r22, 0x01	; 1
    3f58:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
	/*Write command*/
	H_LCD_void_latchByte(copy_u8data);
    3f5c:	89 81       	ldd	r24, Y+1	; 0x01
    3f5e:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <H_LCD_void_latchByte>

}
    3f62:	0f 90       	pop	r0
    3f64:	cf 91       	pop	r28
    3f66:	df 91       	pop	r29
    3f68:	08 95       	ret

00003f6a <H_LCD_void_sendCommand>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_sendCommand(u8 copy_u8command)
{
    3f6a:	df 93       	push	r29
    3f6c:	cf 93       	push	r28
    3f6e:	0f 92       	push	r0
    3f70:	cd b7       	in	r28, 0x3d	; 61
    3f72:	de b7       	in	r29, 0x3e	; 62
    3f74:	89 83       	std	Y+1, r24	; 0x01
	/*SET RS TO ZERO*/
	M_Dio_void_setPinValue(CLCD_RS_PIN,DIO_LOW);
    3f76:	8d e0       	ldi	r24, 0x0D	; 13
    3f78:	60 e0       	ldi	r22, 0x00	; 0
    3f7a:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
	/*Write command*/
	H_LCD_void_latchByte(copy_u8command);
    3f7e:	89 81       	ldd	r24, Y+1	; 0x01
    3f80:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <H_LCD_void_latchByte>

}
    3f84:	0f 90       	pop	r0
    3f86:	cf 91       	pop	r28
    3f88:	df 91       	pop	r29
    3f8a:	08 95       	ret

00003f8c <H_LCD_void_sendString>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_sendString(const char * pstr)
{
    3f8c:	df 93       	push	r29
    3f8e:	cf 93       	push	r28
    3f90:	00 d0       	rcall	.+0      	; 0x3f92 <H_LCD_void_sendString+0x6>
    3f92:	0f 92       	push	r0
    3f94:	cd b7       	in	r28, 0x3d	; 61
    3f96:	de b7       	in	r29, 0x3e	; 62
    3f98:	9b 83       	std	Y+3, r25	; 0x03
    3f9a:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter;
	for(counter=0;pstr[counter]!=0;counter++)
    3f9c:	19 82       	std	Y+1, r1	; 0x01
    3f9e:	0e c0       	rjmp	.+28     	; 0x3fbc <H_LCD_void_sendString+0x30>
	{
		H_LCD_void_sendData(pstr[counter]);
    3fa0:	89 81       	ldd	r24, Y+1	; 0x01
    3fa2:	28 2f       	mov	r18, r24
    3fa4:	30 e0       	ldi	r19, 0x00	; 0
    3fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa8:	9b 81       	ldd	r25, Y+3	; 0x03
    3faa:	fc 01       	movw	r30, r24
    3fac:	e2 0f       	add	r30, r18
    3fae:	f3 1f       	adc	r31, r19
    3fb0:	80 81       	ld	r24, Z
    3fb2:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <H_LCD_void_sendData>
  Return Value     : void
******************************************/
void H_LCD_void_sendString(const char * pstr)
{
	u8 counter;
	for(counter=0;pstr[counter]!=0;counter++)
    3fb6:	89 81       	ldd	r24, Y+1	; 0x01
    3fb8:	8f 5f       	subi	r24, 0xFF	; 255
    3fba:	89 83       	std	Y+1, r24	; 0x01
    3fbc:	89 81       	ldd	r24, Y+1	; 0x01
    3fbe:	28 2f       	mov	r18, r24
    3fc0:	30 e0       	ldi	r19, 0x00	; 0
    3fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc4:	9b 81       	ldd	r25, Y+3	; 0x03
    3fc6:	fc 01       	movw	r30, r24
    3fc8:	e2 0f       	add	r30, r18
    3fca:	f3 1f       	adc	r31, r19
    3fcc:	80 81       	ld	r24, Z
    3fce:	88 23       	and	r24, r24
    3fd0:	39 f7       	brne	.-50     	; 0x3fa0 <H_LCD_void_sendString+0x14>
	{
		H_LCD_void_sendData(pstr[counter]);
	}
}
    3fd2:	0f 90       	pop	r0
    3fd4:	0f 90       	pop	r0
    3fd6:	0f 90       	pop	r0
    3fd8:	cf 91       	pop	r28
    3fda:	df 91       	pop	r29
    3fdc:	08 95       	ret

00003fde <H_LCD_void_sendIntNum>:
	//H_LCD_void_sendData(copy_s32Num+'0');

}
*/
void H_LCD_void_sendIntNum(s32 copy_s32Num)
{
    3fde:	0f 93       	push	r16
    3fe0:	1f 93       	push	r17
    3fe2:	df 93       	push	r29
    3fe4:	cf 93       	push	r28
    3fe6:	cd b7       	in	r28, 0x3d	; 61
    3fe8:	de b7       	in	r29, 0x3e	; 62
    3fea:	a5 97       	sbiw	r28, 0x25	; 37
    3fec:	0f b6       	in	r0, 0x3f	; 63
    3fee:	f8 94       	cli
    3ff0:	de bf       	out	0x3e, r29	; 62
    3ff2:	0f be       	out	0x3f, r0	; 63
    3ff4:	cd bf       	out	0x3d, r28	; 61
    3ff6:	6a a3       	std	Y+34, r22	; 0x22
    3ff8:	7b a3       	std	Y+35, r23	; 0x23
    3ffa:	8c a3       	std	Y+36, r24	; 0x24
    3ffc:	9d a3       	std	Y+37, r25	; 0x25
	/* Local Variable to save the numbers digits*/
	s32 Local_Variable[8] = {0} ;
    3ffe:	80 e2       	ldi	r24, 0x20	; 32
    4000:	fe 01       	movw	r30, r28
    4002:	32 96       	adiw	r30, 0x02	; 2
    4004:	df 01       	movw	r26, r30
    4006:	98 2f       	mov	r25, r24
    4008:	1d 92       	st	X+, r1
    400a:	9a 95       	dec	r25
    400c:	e9 f7       	brne	.-6      	; 0x4008 <H_LCD_void_sendIntNum+0x2a>
	u8 Local_Counter = 0 ;
    400e:	19 82       	std	Y+1, r1	; 0x01

	/* Check if the number is negative */
	if (copy_s32Num < 0)
    4010:	8a a1       	ldd	r24, Y+34	; 0x22
    4012:	9b a1       	ldd	r25, Y+35	; 0x23
    4014:	ac a1       	ldd	r26, Y+36	; 0x24
    4016:	bd a1       	ldd	r27, Y+37	; 0x25
    4018:	bb 23       	and	r27, r27
    401a:	0c f0       	brlt	.+2      	; 0x401e <H_LCD_void_sendIntNum+0x40>
    401c:	4a c0       	rjmp	.+148    	; 0x40b2 <H_LCD_void_sendIntNum+0xd4>
	{
	/*Remove Negative Sign from number*/
	copy_s32Num = copy_s32Num * -1 ;
    401e:	8a a1       	ldd	r24, Y+34	; 0x22
    4020:	9b a1       	ldd	r25, Y+35	; 0x23
    4022:	ac a1       	ldd	r26, Y+36	; 0x24
    4024:	bd a1       	ldd	r27, Y+37	; 0x25
    4026:	b0 95       	com	r27
    4028:	a0 95       	com	r26
    402a:	90 95       	com	r25
    402c:	81 95       	neg	r24
    402e:	9f 4f       	sbci	r25, 0xFF	; 255
    4030:	af 4f       	sbci	r26, 0xFF	; 255
    4032:	bf 4f       	sbci	r27, 0xFF	; 255
    4034:	8a a3       	std	Y+34, r24	; 0x22
    4036:	9b a3       	std	Y+35, r25	; 0x23
    4038:	ac a3       	std	Y+36, r26	; 0x24
    403a:	bd a3       	std	Y+37, r27	; 0x25
	/*Send Negative Sign */
	H_LCD_void_sendData('-');
    403c:	8d e2       	ldi	r24, 0x2D	; 45
    403e:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <H_LCD_void_sendData>
    4042:	37 c0       	rjmp	.+110    	; 0x40b2 <H_LCD_void_sendIntNum+0xd4>
	}
	/* While loop to split the Numbers and save it in Local_Variable*/
	while (copy_s32Num != 0)
	{
	Local_Variable[Local_Counter] = copy_s32Num % 10 ;
    4044:	89 81       	ldd	r24, Y+1	; 0x01
    4046:	08 2f       	mov	r16, r24
    4048:	10 e0       	ldi	r17, 0x00	; 0
    404a:	8a a1       	ldd	r24, Y+34	; 0x22
    404c:	9b a1       	ldd	r25, Y+35	; 0x23
    404e:	ac a1       	ldd	r26, Y+36	; 0x24
    4050:	bd a1       	ldd	r27, Y+37	; 0x25
    4052:	2a e0       	ldi	r18, 0x0A	; 10
    4054:	30 e0       	ldi	r19, 0x00	; 0
    4056:	40 e0       	ldi	r20, 0x00	; 0
    4058:	50 e0       	ldi	r21, 0x00	; 0
    405a:	bc 01       	movw	r22, r24
    405c:	cd 01       	movw	r24, r26
    405e:	0e 94 78 23 	call	0x46f0	; 0x46f0 <__divmodsi4>
    4062:	dc 01       	movw	r26, r24
    4064:	cb 01       	movw	r24, r22
    4066:	ac 01       	movw	r20, r24
    4068:	bd 01       	movw	r22, r26
    406a:	98 01       	movw	r18, r16
    406c:	22 0f       	add	r18, r18
    406e:	33 1f       	adc	r19, r19
    4070:	22 0f       	add	r18, r18
    4072:	33 1f       	adc	r19, r19
    4074:	ce 01       	movw	r24, r28
    4076:	01 96       	adiw	r24, 0x01	; 1
    4078:	82 0f       	add	r24, r18
    407a:	93 1f       	adc	r25, r19
    407c:	fc 01       	movw	r30, r24
    407e:	31 96       	adiw	r30, 0x01	; 1
    4080:	40 83       	st	Z, r20
    4082:	51 83       	std	Z+1, r21	; 0x01
    4084:	62 83       	std	Z+2, r22	; 0x02
    4086:	73 83       	std	Z+3, r23	; 0x03
	copy_s32Num = copy_s32Num / 10 ;
    4088:	8a a1       	ldd	r24, Y+34	; 0x22
    408a:	9b a1       	ldd	r25, Y+35	; 0x23
    408c:	ac a1       	ldd	r26, Y+36	; 0x24
    408e:	bd a1       	ldd	r27, Y+37	; 0x25
    4090:	2a e0       	ldi	r18, 0x0A	; 10
    4092:	30 e0       	ldi	r19, 0x00	; 0
    4094:	40 e0       	ldi	r20, 0x00	; 0
    4096:	50 e0       	ldi	r21, 0x00	; 0
    4098:	bc 01       	movw	r22, r24
    409a:	cd 01       	movw	r24, r26
    409c:	0e 94 78 23 	call	0x46f0	; 0x46f0 <__divmodsi4>
    40a0:	da 01       	movw	r26, r20
    40a2:	c9 01       	movw	r24, r18
    40a4:	8a a3       	std	Y+34, r24	; 0x22
    40a6:	9b a3       	std	Y+35, r25	; 0x23
    40a8:	ac a3       	std	Y+36, r26	; 0x24
    40aa:	bd a3       	std	Y+37, r27	; 0x25
	Local_Counter ++ ;
    40ac:	89 81       	ldd	r24, Y+1	; 0x01
    40ae:	8f 5f       	subi	r24, 0xFF	; 255
    40b0:	89 83       	std	Y+1, r24	; 0x01
	copy_s32Num = copy_s32Num * -1 ;
	/*Send Negative Sign */
	H_LCD_void_sendData('-');
	}
	/* While loop to split the Numbers and save it in Local_Variable*/
	while (copy_s32Num != 0)
    40b2:	8a a1       	ldd	r24, Y+34	; 0x22
    40b4:	9b a1       	ldd	r25, Y+35	; 0x23
    40b6:	ac a1       	ldd	r26, Y+36	; 0x24
    40b8:	bd a1       	ldd	r27, Y+37	; 0x25
    40ba:	00 97       	sbiw	r24, 0x00	; 0
    40bc:	a1 05       	cpc	r26, r1
    40be:	b1 05       	cpc	r27, r1
    40c0:	09 f6       	brne	.-126    	; 0x4044 <H_LCD_void_sendIntNum+0x66>
	copy_s32Num = copy_s32Num / 10 ;
	Local_Counter ++ ;

	}
	/* For loop to send the numbers using SendData*/
	for (Local_Counter --; Local_Counter < '0' ; Local_Counter--)
    40c2:	89 81       	ldd	r24, Y+1	; 0x01
    40c4:	81 50       	subi	r24, 0x01	; 1
    40c6:	89 83       	std	Y+1, r24	; 0x01
    40c8:	18 c0       	rjmp	.+48     	; 0x40fa <H_LCD_void_sendIntNum+0x11c>
	{
		 H_LCD_void_sendData('0' + Local_Variable[Local_Counter]);
    40ca:	89 81       	ldd	r24, Y+1	; 0x01
    40cc:	88 2f       	mov	r24, r24
    40ce:	90 e0       	ldi	r25, 0x00	; 0
    40d0:	9c 01       	movw	r18, r24
    40d2:	22 0f       	add	r18, r18
    40d4:	33 1f       	adc	r19, r19
    40d6:	22 0f       	add	r18, r18
    40d8:	33 1f       	adc	r19, r19
    40da:	ce 01       	movw	r24, r28
    40dc:	01 96       	adiw	r24, 0x01	; 1
    40de:	82 0f       	add	r24, r18
    40e0:	93 1f       	adc	r25, r19
    40e2:	fc 01       	movw	r30, r24
    40e4:	31 96       	adiw	r30, 0x01	; 1
    40e6:	80 81       	ld	r24, Z
    40e8:	91 81       	ldd	r25, Z+1	; 0x01
    40ea:	a2 81       	ldd	r26, Z+2	; 0x02
    40ec:	b3 81       	ldd	r27, Z+3	; 0x03
    40ee:	80 5d       	subi	r24, 0xD0	; 208
    40f0:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <H_LCD_void_sendData>
	copy_s32Num = copy_s32Num / 10 ;
	Local_Counter ++ ;

	}
	/* For loop to send the numbers using SendData*/
	for (Local_Counter --; Local_Counter < '0' ; Local_Counter--)
    40f4:	89 81       	ldd	r24, Y+1	; 0x01
    40f6:	81 50       	subi	r24, 0x01	; 1
    40f8:	89 83       	std	Y+1, r24	; 0x01
    40fa:	89 81       	ldd	r24, Y+1	; 0x01
    40fc:	80 33       	cpi	r24, 0x30	; 48
    40fe:	28 f3       	brcs	.-54     	; 0x40ca <H_LCD_void_sendIntNum+0xec>
	{
		 H_LCD_void_sendData('0' + Local_Variable[Local_Counter]);
	}
}
    4100:	a5 96       	adiw	r28, 0x25	; 37
    4102:	0f b6       	in	r0, 0x3f	; 63
    4104:	f8 94       	cli
    4106:	de bf       	out	0x3e, r29	; 62
    4108:	0f be       	out	0x3f, r0	; 63
    410a:	cd bf       	out	0x3d, r28	; 61
    410c:	cf 91       	pop	r28
    410e:	df 91       	pop	r29
    4110:	1f 91       	pop	r17
    4112:	0f 91       	pop	r16
    4114:	08 95       	ret

00004116 <H_LCD_void_gotoXY>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col)
{
    4116:	df 93       	push	r29
    4118:	cf 93       	push	r28
    411a:	00 d0       	rcall	.+0      	; 0x411c <H_LCD_void_gotoXY+0x6>
    411c:	0f 92       	push	r0
    411e:	cd b7       	in	r28, 0x3d	; 61
    4120:	de b7       	in	r29, 0x3e	; 62
    4122:	8a 83       	std	Y+2, r24	; 0x02
    4124:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(copy_u8Row == 1)
    4126:	8a 81       	ldd	r24, Y+2	; 0x02
    4128:	81 30       	cpi	r24, 0x01	; 1
    412a:	19 f4       	brne	.+6      	; 0x4132 <H_LCD_void_gotoXY+0x1c>
	{
		Local_u8Address = copy_u8Col;
    412c:	8b 81       	ldd	r24, Y+3	; 0x03
    412e:	89 83       	std	Y+1, r24	; 0x01
    4130:	14 c0       	rjmp	.+40     	; 0x415a <H_LCD_void_gotoXY+0x44>
	}
	else if(copy_u8Row == 2)
    4132:	8a 81       	ldd	r24, Y+2	; 0x02
    4134:	82 30       	cpi	r24, 0x02	; 2
    4136:	21 f4       	brne	.+8      	; 0x4140 <H_LCD_void_gotoXY+0x2a>
	{
		Local_u8Address = copy_u8Col + 0x40;
    4138:	8b 81       	ldd	r24, Y+3	; 0x03
    413a:	80 5c       	subi	r24, 0xC0	; 192
    413c:	89 83       	std	Y+1, r24	; 0x01
    413e:	0d c0       	rjmp	.+26     	; 0x415a <H_LCD_void_gotoXY+0x44>
	}
	else if(copy_u8Row == 3)
    4140:	8a 81       	ldd	r24, Y+2	; 0x02
    4142:	83 30       	cpi	r24, 0x03	; 3
    4144:	21 f4       	brne	.+8      	; 0x414e <H_LCD_void_gotoXY+0x38>
	{
		Local_u8Address = copy_u8Col + 0x14;
    4146:	8b 81       	ldd	r24, Y+3	; 0x03
    4148:	8c 5e       	subi	r24, 0xEC	; 236
    414a:	89 83       	std	Y+1, r24	; 0x01
    414c:	06 c0       	rjmp	.+12     	; 0x415a <H_LCD_void_gotoXY+0x44>
	}
	else if(copy_u8Row == 4)
    414e:	8a 81       	ldd	r24, Y+2	; 0x02
    4150:	84 30       	cpi	r24, 0x04	; 4
    4152:	19 f4       	brne	.+6      	; 0x415a <H_LCD_void_gotoXY+0x44>
	{
		Local_u8Address = copy_u8Col + 0x54;
    4154:	8b 81       	ldd	r24, Y+3	; 0x03
    4156:	8c 5a       	subi	r24, 0xAC	; 172
    4158:	89 83       	std	Y+1, r24	; 0x01
	else
	{

	}
	//128 Is added to the address to set the most significant bit by 1 according to DDRAM address instruction
	H_LCD_void_sendCommand(Local_u8Address+128);
    415a:	89 81       	ldd	r24, Y+1	; 0x01
    415c:	80 58       	subi	r24, 0x80	; 128
    415e:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <H_LCD_void_sendCommand>
}
    4162:	0f 90       	pop	r0
    4164:	0f 90       	pop	r0
    4166:	0f 90       	pop	r0
    4168:	cf 91       	pop	r28
    416a:	df 91       	pop	r29
    416c:	08 95       	ret

0000416e <H_LCD_void_creatCustomChar>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_creatCustomChar (const u8 * ArrPattern,u8 copy_u8charCode)
{
    416e:	df 93       	push	r29
    4170:	cf 93       	push	r28
    4172:	00 d0       	rcall	.+0      	; 0x4174 <H_LCD_void_creatCustomChar+0x6>
    4174:	00 d0       	rcall	.+0      	; 0x4176 <H_LCD_void_creatCustomChar+0x8>
    4176:	0f 92       	push	r0
    4178:	cd b7       	in	r28, 0x3d	; 61
    417a:	de b7       	in	r29, 0x3e	; 62
    417c:	9c 83       	std	Y+4, r25	; 0x04
    417e:	8b 83       	std	Y+3, r24	; 0x03
    4180:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_counter=0;
    4182:	1a 82       	std	Y+2, r1	; 0x02
	/*first calculate CGRAM address since each block of address is 8bytes*/
	u8 Local_u8CGramaddress=0;
    4184:	19 82       	std	Y+1, r1	; 0x01
	Local_u8CGramaddress = copy_u8charCode*8;
    4186:	8d 81       	ldd	r24, Y+5	; 0x05
    4188:	88 2f       	mov	r24, r24
    418a:	90 e0       	ldi	r25, 0x00	; 0
    418c:	88 0f       	add	r24, r24
    418e:	99 1f       	adc	r25, r25
    4190:	88 0f       	add	r24, r24
    4192:	99 1f       	adc	r25, r25
    4194:	88 0f       	add	r24, r24
    4196:	99 1f       	adc	r25, r25
    4198:	89 83       	std	Y+1, r24	; 0x01
	/*Access CGRAM block using function Send command by setting bit 6 and clearing bit7*/
	H_LCD_void_sendCommand(Local_u8CGramaddress+64);
    419a:	89 81       	ldd	r24, Y+1	; 0x01
    419c:	80 5c       	subi	r24, 0xC0	; 192
    419e:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <H_LCD_void_sendCommand>
	/*write the pattern to the CG ram */
	for(Local_counter=0;Local_counter<8;Local_counter++) /*<8 since there are 8 memory locations only for cgram (64bytes)*/
    41a2:	1a 82       	std	Y+2, r1	; 0x02
    41a4:	0e c0       	rjmp	.+28     	; 0x41c2 <H_LCD_void_creatCustomChar+0x54>
	{
		H_LCD_void_sendData(ArrPattern[Local_counter]);
    41a6:	8a 81       	ldd	r24, Y+2	; 0x02
    41a8:	28 2f       	mov	r18, r24
    41aa:	30 e0       	ldi	r19, 0x00	; 0
    41ac:	8b 81       	ldd	r24, Y+3	; 0x03
    41ae:	9c 81       	ldd	r25, Y+4	; 0x04
    41b0:	fc 01       	movw	r30, r24
    41b2:	e2 0f       	add	r30, r18
    41b4:	f3 1f       	adc	r31, r19
    41b6:	80 81       	ld	r24, Z
    41b8:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <H_LCD_void_sendData>
	u8 Local_u8CGramaddress=0;
	Local_u8CGramaddress = copy_u8charCode*8;
	/*Access CGRAM block using function Send command by setting bit 6 and clearing bit7*/
	H_LCD_void_sendCommand(Local_u8CGramaddress+64);
	/*write the pattern to the CG ram */
	for(Local_counter=0;Local_counter<8;Local_counter++) /*<8 since there are 8 memory locations only for cgram (64bytes)*/
    41bc:	8a 81       	ldd	r24, Y+2	; 0x02
    41be:	8f 5f       	subi	r24, 0xFF	; 255
    41c0:	8a 83       	std	Y+2, r24	; 0x02
    41c2:	8a 81       	ldd	r24, Y+2	; 0x02
    41c4:	88 30       	cpi	r24, 0x08	; 8
    41c6:	78 f3       	brcs	.-34     	; 0x41a6 <H_LCD_void_creatCustomChar+0x38>
	{
		H_LCD_void_sendData(ArrPattern[Local_counter]);
	}
	H_LCD_void_gotoXY(1,0);
    41c8:	81 e0       	ldi	r24, 0x01	; 1
    41ca:	60 e0       	ldi	r22, 0x00	; 0
    41cc:	0e 94 8b 20 	call	0x4116	; 0x4116 <H_LCD_void_gotoXY>
	H_LCD_void_sendData(copy_u8charCode);
    41d0:	8d 81       	ldd	r24, Y+5	; 0x05
    41d2:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <H_LCD_void_sendData>

}
    41d6:	0f 90       	pop	r0
    41d8:	0f 90       	pop	r0
    41da:	0f 90       	pop	r0
    41dc:	0f 90       	pop	r0
    41de:	0f 90       	pop	r0
    41e0:	cf 91       	pop	r28
    41e2:	df 91       	pop	r29
    41e4:	08 95       	ret

000041e6 <H_LCD_void_displayCustomChar>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_displayCustomChar (u8 copy_u8charCode)
{
    41e6:	df 93       	push	r29
    41e8:	cf 93       	push	r28
    41ea:	0f 92       	push	r0
    41ec:	cd b7       	in	r28, 0x3d	; 61
    41ee:	de b7       	in	r29, 0x3e	; 62
    41f0:	89 83       	std	Y+1, r24	; 0x01
	/*give the custom char number to send data*/
	H_LCD_void_sendData(copy_u8charCode);
    41f2:	89 81       	ldd	r24, Y+1	; 0x01
    41f4:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <H_LCD_void_sendData>
}
    41f8:	0f 90       	pop	r0
    41fa:	cf 91       	pop	r28
    41fc:	df 91       	pop	r29
    41fe:	08 95       	ret

00004200 <H_LCD_void_ClearDisplay>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_ClearDisplay(void)
{
    4200:	df 93       	push	r29
    4202:	cf 93       	push	r28
    4204:	cd b7       	in	r28, 0x3d	; 61
    4206:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_sendCommand(CLCD_CLEAR);
    4208:	81 e0       	ldi	r24, 0x01	; 1
    420a:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <H_LCD_void_sendCommand>
}
    420e:	cf 91       	pop	r28
    4210:	df 91       	pop	r29
    4212:	08 95       	ret

00004214 <APPLICATION_Init>:
u8 Password_validate(void);

u8 Start_Process(void);
/*function initialize the required peripherals and H/W devices*/
void APPLICATION_Init(void)
{
    4214:	df 93       	push	r29
    4216:	cf 93       	push	r28
    4218:	cd b7       	in	r28, 0x3d	; 61
    421a:	de b7       	in	r29, 0x3e	; 62
	Port_Init(PORT_Config_Arr);
    421c:	88 e7       	ldi	r24, 0x78	; 120
    421e:	92 e0       	ldi	r25, 0x02	; 2
    4220:	0e 94 cb 0b 	call	0x1796	; 0x1796 <Port_Init>
	H_LCD_void_Init();
    4224:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <H_LCD_void_Init>
	Ultrasonic_init();
    4228:	0e 94 2b 14 	call	0x2856	; 0x2856 <Ultrasonic_init>
	M_void_setCallBack(Normal_Mode,Delay);
    422c:	22 e0       	ldi	r18, 0x02	; 2
    422e:	33 e2       	ldi	r19, 0x23	; 35
    4230:	80 e0       	ldi	r24, 0x00	; 0
    4232:	b9 01       	movw	r22, r18
    4234:	0e 94 1c 0b 	call	0x1638	; 0x1638 <M_void_setCallBack>
	M_void_Timer_Init(Normal_Mode,Normal_Port);
    4238:	80 e0       	ldi	r24, 0x00	; 0
    423a:	60 e0       	ldi	r22, 0x00	; 0
    423c:	0e 94 0e 08 	call	0x101c	; 0x101c <M_void_Timer_Init>
	M_void_EnableTIMERInt(Normal_Mode);
    4240:	80 e0       	ldi	r24, 0x00	; 0
    4242:	0e 94 ac 0a 	call	0x1558	; 0x1558 <M_void_EnableTIMERInt>
	GIE_voidEnable();
    4246:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <GIE_voidEnable>
}
    424a:	cf 91       	pop	r28
    424c:	df 91       	pop	r29
    424e:	08 95       	ret

00004250 <APPLICATION_Start>:

void APPLICATION_Start(void)
{
    4250:	df 93       	push	r29
    4252:	cf 93       	push	r28
    4254:	00 d0       	rcall	.+0      	; 0x4256 <APPLICATION_Start+0x6>
    4256:	cd b7       	in	r28, 0x3d	; 61
    4258:	de b7       	in	r29, 0x3e	; 62

	u16 Detected_range=0;
    425a:	1a 82       	std	Y+2, r1	; 0x02
    425c:	19 82       	std	Y+1, r1	; 0x01
    425e:	4b c0       	rjmp	.+150    	; 0x42f6 <APPLICATION_Start+0xa6>

	while(Detected_range<=15)
	{
		Detected_range = Ultrasonic_readDistance();
    4260:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <Ultrasonic_readDistance>
    4264:	9a 83       	std	Y+2, r25	; 0x02
    4266:	89 83       	std	Y+1, r24	; 0x01
		if(Detected_range>0 && Detected_range <=15)
    4268:	89 81       	ldd	r24, Y+1	; 0x01
    426a:	9a 81       	ldd	r25, Y+2	; 0x02
    426c:	00 97       	sbiw	r24, 0x00	; 0
    426e:	09 f4       	brne	.+2      	; 0x4272 <APPLICATION_Start+0x22>
    4270:	42 c0       	rjmp	.+132    	; 0x42f6 <APPLICATION_Start+0xa6>
    4272:	89 81       	ldd	r24, Y+1	; 0x01
    4274:	9a 81       	ldd	r25, Y+2	; 0x02
    4276:	80 31       	cpi	r24, 0x10	; 16
    4278:	91 05       	cpc	r25, r1
    427a:	e8 f5       	brcc	.+122    	; 0x42f6 <APPLICATION_Start+0xa6>
		{
			H_LCD_void_sendString("The Range is:");
    427c:	80 e6       	ldi	r24, 0x60	; 96
    427e:	90 e0       	ldi	r25, 0x00	; 0
    4280:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <H_LCD_void_sendString>
			//H_LCD_void_gotoXY(2,0);
			H_LCD_void_sendIntNum(Detected_range);
    4284:	89 81       	ldd	r24, Y+1	; 0x01
    4286:	9a 81       	ldd	r25, Y+2	; 0x02
    4288:	cc 01       	movw	r24, r24
    428a:	a0 e0       	ldi	r26, 0x00	; 0
    428c:	b0 e0       	ldi	r27, 0x00	; 0
    428e:	bc 01       	movw	r22, r24
    4290:	cd 01       	movw	r24, r26
    4292:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <H_LCD_void_sendIntNum>
			M_TIMER0_setDelayTimeMilliSec(3,Normal_Mode,CLK_1024);
    4296:	63 e0       	ldi	r22, 0x03	; 3
    4298:	70 e0       	ldi	r23, 0x00	; 0
    429a:	80 e0       	ldi	r24, 0x00	; 0
    429c:	90 e0       	ldi	r25, 0x00	; 0
    429e:	40 e0       	ldi	r20, 0x00	; 0
    42a0:	25 e0       	ldi	r18, 0x05	; 5
    42a2:	0e 94 a0 09 	call	0x1340	; 0x1340 <M_TIMER0_setDelayTimeMilliSec>
			while(Timer_flag==0);
    42a6:	80 91 14 03 	lds	r24, 0x0314
    42aa:	88 23       	and	r24, r24
    42ac:	e1 f3       	breq	.-8      	; 0x42a6 <APPLICATION_Start+0x56>
			Timer_flag=0;
    42ae:	10 92 14 03 	sts	0x0314, r1
			H_LCD_void_ClearDisplay();
    42b2:	0e 94 00 21 	call	0x4200	; 0x4200 <H_LCD_void_ClearDisplay>

			/*Display Authentication message*/
			H_LCD_void_sendString("Welcome to");
    42b6:	8e e6       	ldi	r24, 0x6E	; 110
    42b8:	90 e0       	ldi	r25, 0x00	; 0
    42ba:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <H_LCD_void_sendString>
			H_LCD_void_gotoXY(2,0);
    42be:	82 e0       	ldi	r24, 0x02	; 2
    42c0:	60 e0       	ldi	r22, 0x00	; 0
    42c2:	0e 94 8b 20 	call	0x4116	; 0x4116 <H_LCD_void_gotoXY>
			H_LCD_void_sendString("Login System");
    42c6:	89 e7       	ldi	r24, 0x79	; 121
    42c8:	90 e0       	ldi	r25, 0x00	; 0
    42ca:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <H_LCD_void_sendString>
			M_TIMER0_setDelayTimeMilliSec(3,Normal_Mode,CLK_1024);
    42ce:	63 e0       	ldi	r22, 0x03	; 3
    42d0:	70 e0       	ldi	r23, 0x00	; 0
    42d2:	80 e0       	ldi	r24, 0x00	; 0
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	40 e0       	ldi	r20, 0x00	; 0
    42d8:	25 e0       	ldi	r18, 0x05	; 5
    42da:	0e 94 a0 09 	call	0x1340	; 0x1340 <M_TIMER0_setDelayTimeMilliSec>
			while(Timer_flag==0);
    42de:	80 91 14 03 	lds	r24, 0x0314
    42e2:	88 23       	and	r24, r24
    42e4:	e1 f3       	breq	.-8      	; 0x42de <APPLICATION_Start+0x8e>
			Timer_flag=0;
    42e6:	10 92 14 03 	sts	0x0314, r1
			H_LCD_void_ClearDisplay();
    42ea:	0e 94 00 21 	call	0x4200	; 0x4200 <H_LCD_void_ClearDisplay>
			Password_validate();
    42ee:	0e 94 10 22 	call	0x4420	; 0x4420 <Password_validate>
			Start_Process();
    42f2:	0e 94 86 21 	call	0x430c	; 0x430c <Start_Process>
void APPLICATION_Start(void)
{

	u16 Detected_range=0;

	while(Detected_range<=15)
    42f6:	89 81       	ldd	r24, Y+1	; 0x01
    42f8:	9a 81       	ldd	r25, Y+2	; 0x02
    42fa:	80 31       	cpi	r24, 0x10	; 16
    42fc:	91 05       	cpc	r25, r1
    42fe:	08 f4       	brcc	.+2      	; 0x4302 <APPLICATION_Start+0xb2>
    4300:	af cf       	rjmp	.-162    	; 0x4260 <APPLICATION_Start+0x10>
			Password_validate();
			Start_Process();
		}
	}

}
    4302:	0f 90       	pop	r0
    4304:	0f 90       	pop	r0
    4306:	cf 91       	pop	r28
    4308:	df 91       	pop	r29
    430a:	08 95       	ret

0000430c <Start_Process>:
u8 Start_Process(void)
{
    430c:	df 93       	push	r29
    430e:	cf 93       	push	r28
    4310:	00 d0       	rcall	.+0      	; 0x4312 <Start_Process+0x6>
    4312:	0f 92       	push	r0
    4314:	cd b7       	in	r28, 0x3d	; 61
    4316:	de b7       	in	r29, 0x3e	; 62
	u8 Local_return_value=0;
    4318:	1b 82       	std	Y+3, r1	; 0x03
	u8 Led_command_flag=0;
    431a:	1a 82       	std	Y+2, r1	; 0x02
	u8 Led_command=0;
    431c:	19 82       	std	Y+1, r1	; 0x01
	H_LCD_void_ClearDisplay();
    431e:	0e 94 00 21 	call	0x4200	; 0x4200 <H_LCD_void_ClearDisplay>
	H_LCD_void_sendString("Welcome");
    4322:	86 e8       	ldi	r24, 0x86	; 134
    4324:	90 e0       	ldi	r25, 0x00	; 0
    4326:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <H_LCD_void_sendString>
	H_LCD_void_gotoXY(2,0);
    432a:	82 e0       	ldi	r24, 0x02	; 2
    432c:	60 e0       	ldi	r22, 0x00	; 0
    432e:	0e 94 8b 20 	call	0x4116	; 0x4116 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("Nour");
    4332:	8e e8       	ldi	r24, 0x8E	; 142
    4334:	90 e0       	ldi	r25, 0x00	; 0
    4336:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <H_LCD_void_sendString>
	M_TIMER0_setDelayTimeMilliSec(2,Normal_Mode,CLK_1024);
    433a:	62 e0       	ldi	r22, 0x02	; 2
    433c:	70 e0       	ldi	r23, 0x00	; 0
    433e:	80 e0       	ldi	r24, 0x00	; 0
    4340:	90 e0       	ldi	r25, 0x00	; 0
    4342:	40 e0       	ldi	r20, 0x00	; 0
    4344:	25 e0       	ldi	r18, 0x05	; 5
    4346:	0e 94 a0 09 	call	0x1340	; 0x1340 <M_TIMER0_setDelayTimeMilliSec>
	while(Timer_flag==0);
    434a:	80 91 14 03 	lds	r24, 0x0314
    434e:	88 23       	and	r24, r24
    4350:	e1 f3       	breq	.-8      	; 0x434a <Start_Process+0x3e>
	Timer_flag=0;
    4352:	10 92 14 03 	sts	0x0314, r1
    4356:	59 c0       	rjmp	.+178    	; 0x440a <Start_Process+0xfe>

	while(Led_command_flag==0)
	{
		H_LCD_void_ClearDisplay();
    4358:	0e 94 00 21 	call	0x4200	; 0x4200 <H_LCD_void_ClearDisplay>

		M_Dio_void_setPinValue(DIO_PA0,DIO_HIGH);
    435c:	8a e0       	ldi	r24, 0x0A	; 10
    435e:	61 e0       	ldi	r22, 0x01	; 1
    4360:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
		H_LCD_void_ClearDisplay();
    4364:	0e 94 00 21 	call	0x4200	; 0x4200 <H_LCD_void_ClearDisplay>
		H_LCD_void_sendString("1-Led On");
    4368:	83 e9       	ldi	r24, 0x93	; 147
    436a:	90 e0       	ldi	r25, 0x00	; 0
    436c:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <H_LCD_void_sendString>
		H_LCD_void_gotoXY(2,0);
    4370:	82 e0       	ldi	r24, 0x02	; 2
    4372:	60 e0       	ldi	r22, 0x00	; 0
    4374:	0e 94 8b 20 	call	0x4116	; 0x4116 <H_LCD_void_gotoXY>
		H_LCD_void_sendString("2-Led Off");
    4378:	8c e9       	ldi	r24, 0x9C	; 156
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <H_LCD_void_sendString>
		M_TIMER0_setDelayTimeMilliSec(1,Normal_Mode,CLK_1024);
    4380:	61 e0       	ldi	r22, 0x01	; 1
    4382:	70 e0       	ldi	r23, 0x00	; 0
    4384:	80 e0       	ldi	r24, 0x00	; 0
    4386:	90 e0       	ldi	r25, 0x00	; 0
    4388:	40 e0       	ldi	r20, 0x00	; 0
    438a:	25 e0       	ldi	r18, 0x05	; 5
    438c:	0e 94 a0 09 	call	0x1340	; 0x1340 <M_TIMER0_setDelayTimeMilliSec>
		while(Timer_flag==0);
    4390:	80 91 14 03 	lds	r24, 0x0314
    4394:	88 23       	and	r24, r24
    4396:	e1 f3       	breq	.-8      	; 0x4390 <Start_Process+0x84>
		Timer_flag=0;
    4398:	10 92 14 03 	sts	0x0314, r1
		do{
			Led_command=H_KEYPAD_u8_getPressedKey();
    439c:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <H_KEYPAD_u8_getPressedKey>
    43a0:	89 83       	std	Y+1, r24	; 0x01
		   }while(Led_command=='\0');
    43a2:	89 81       	ldd	r24, Y+1	; 0x01
    43a4:	88 23       	and	r24, r24
    43a6:	d1 f3       	breq	.-12     	; 0x439c <Start_Process+0x90>
		if(Led_command=='1')
    43a8:	89 81       	ldd	r24, Y+1	; 0x01
    43aa:	81 33       	cpi	r24, 0x31	; 49
    43ac:	51 f4       	brne	.+20     	; 0x43c2 <Start_Process+0xb6>
		{
			H_LED_void_Turn_on(LED_RED);
    43ae:	80 e0       	ldi	r24, 0x00	; 0
    43b0:	0e 94 c6 19 	call	0x338c	; 0x338c <H_LED_void_Turn_on>
			H_LED_void_Turn_on(LED_GREEN);
    43b4:	82 e0       	ldi	r24, 0x02	; 2
    43b6:	0e 94 c6 19 	call	0x338c	; 0x338c <H_LED_void_Turn_on>
			H_LED_void_Turn_on(LED_BLUE);
    43ba:	81 e0       	ldi	r24, 0x01	; 1
    43bc:	0e 94 c6 19 	call	0x338c	; 0x338c <H_LED_void_Turn_on>
    43c0:	16 c0       	rjmp	.+44     	; 0x43ee <Start_Process+0xe2>
		}
		else if(Led_command=='2')
    43c2:	89 81       	ldd	r24, Y+1	; 0x01
    43c4:	82 33       	cpi	r24, 0x32	; 50
    43c6:	51 f4       	brne	.+20     	; 0x43dc <Start_Process+0xd0>
		{
			H_LED_void_Turn_off(LED_RED);
    43c8:	80 e0       	ldi	r24, 0x00	; 0
    43ca:	0e 94 05 1a 	call	0x340a	; 0x340a <H_LED_void_Turn_off>
			H_LED_void_Turn_off(LED_GREEN);
    43ce:	82 e0       	ldi	r24, 0x02	; 2
    43d0:	0e 94 05 1a 	call	0x340a	; 0x340a <H_LED_void_Turn_off>
			H_LED_void_Turn_off(LED_BLUE);
    43d4:	81 e0       	ldi	r24, 0x01	; 1
    43d6:	0e 94 05 1a 	call	0x340a	; 0x340a <H_LED_void_Turn_off>
    43da:	09 c0       	rjmp	.+18     	; 0x43ee <Start_Process+0xe2>
		}
		else
		{
			M_Dio_void_setPinValue(DIO_PA0,DIO_LOW);
    43dc:	8a e0       	ldi	r24, 0x0A	; 10
    43de:	60 e0       	ldi	r22, 0x00	; 0
    43e0:	0e 94 08 11 	call	0x2210	; 0x2210 <M_Dio_void_setPinValue>
			H_LCD_void_ClearDisplay();
    43e4:	0e 94 00 21 	call	0x4200	; 0x4200 <H_LCD_void_ClearDisplay>
			Led_command_flag=1;
    43e8:	81 e0       	ldi	r24, 0x01	; 1
    43ea:	8a 83       	std	Y+2, r24	; 0x02
    43ec:	12 c0       	rjmp	.+36     	; 0x4412 <Start_Process+0x106>
			break;
		}
		H_LCD_void_ClearDisplay();
    43ee:	0e 94 00 21 	call	0x4200	; 0x4200 <H_LCD_void_ClearDisplay>
		H_LCD_void_sendString("To exit");
    43f2:	86 ea       	ldi	r24, 0xA6	; 166
    43f4:	90 e0       	ldi	r25, 0x00	; 0
    43f6:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <H_LCD_void_sendString>
		H_LCD_void_gotoXY(2,0);
    43fa:	82 e0       	ldi	r24, 0x02	; 2
    43fc:	60 e0       	ldi	r22, 0x00	; 0
    43fe:	0e 94 8b 20 	call	0x4116	; 0x4116 <H_LCD_void_gotoXY>
		H_LCD_void_sendString("Press any button");
    4402:	8e ea       	ldi	r24, 0xAE	; 174
    4404:	90 e0       	ldi	r25, 0x00	; 0
    4406:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <H_LCD_void_sendString>
	H_LCD_void_sendString("Nour");
	M_TIMER0_setDelayTimeMilliSec(2,Normal_Mode,CLK_1024);
	while(Timer_flag==0);
	Timer_flag=0;

	while(Led_command_flag==0)
    440a:	8a 81       	ldd	r24, Y+2	; 0x02
    440c:	88 23       	and	r24, r24
    440e:	09 f4       	brne	.+2      	; 0x4412 <Start_Process+0x106>
    4410:	a3 cf       	rjmp	.-186    	; 0x4358 <Start_Process+0x4c>
		H_LCD_void_ClearDisplay();
		H_LCD_void_sendString("To exit");
		H_LCD_void_gotoXY(2,0);
		H_LCD_void_sendString("Press any button");
	}
	return Local_return_value;
    4412:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4414:	0f 90       	pop	r0
    4416:	0f 90       	pop	r0
    4418:	0f 90       	pop	r0
    441a:	cf 91       	pop	r28
    441c:	df 91       	pop	r29
    441e:	08 95       	ret

00004420 <Password_validate>:
u8 Password_validate(void)
{
    4420:	0f 93       	push	r16
    4422:	1f 93       	push	r17
    4424:	df 93       	push	r29
    4426:	cf 93       	push	r28
    4428:	cd b7       	in	r28, 0x3d	; 61
    442a:	de b7       	in	r29, 0x3e	; 62
    442c:	29 97       	sbiw	r28, 0x09	; 9
    442e:	0f b6       	in	r0, 0x3f	; 63
    4430:	f8 94       	cli
    4432:	de bf       	out	0x3e, r29	; 62
    4434:	0f be       	out	0x3f, r0	; 63
    4436:	cd bf       	out	0x3d, r28	; 61
	u8 Number_of_trials=3;
    4438:	83 e0       	ldi	r24, 0x03	; 3
    443a:	8d 83       	std	Y+5, r24	; 0x05
	u8 Password_flag=0;
    443c:	1c 82       	std	Y+4, r1	; 0x04
	u8 KPD_flag=0;
    443e:	1b 82       	std	Y+3, r1	; 0x03
	u8 Pass[4]={0};
    4440:	1e 82       	std	Y+6, r1	; 0x06
    4442:	1f 82       	std	Y+7, r1	; 0x07
    4444:	18 86       	std	Y+8, r1	; 0x08
    4446:	19 86       	std	Y+9, r1	; 0x09
	u8 i=0;
    4448:	1a 82       	std	Y+2, r1	; 0x02
	u8 Compare_flag=0;
    444a:	19 82       	std	Y+1, r1	; 0x01
    444c:	ca c0       	rjmp	.+404    	; 0x45e2 <Password_validate+0x1c2>
	while(Password_flag<Number_of_trials)
	{
		/*ASK user to enter password*/
		H_LCD_void_ClearDisplay();
    444e:	0e 94 00 21 	call	0x4200	; 0x4200 <H_LCD_void_ClearDisplay>
		H_LCD_void_sendString("Enter Password");
    4452:	8f eb       	ldi	r24, 0xBF	; 191
    4454:	90 e0       	ldi	r25, 0x00	; 0
    4456:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <H_LCD_void_sendString>
		H_LCD_void_gotoXY(2,0);
    445a:	82 e0       	ldi	r24, 0x02	; 2
    445c:	60 e0       	ldi	r22, 0x00	; 0
    445e:	0e 94 8b 20 	call	0x4116	; 0x4116 <H_LCD_void_gotoXY>
		H_LCD_void_sendData(':');
    4462:	8a e3       	ldi	r24, 0x3A	; 58
    4464:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <H_LCD_void_sendData>
    4468:	28 c0       	rjmp	.+80     	; 0x44ba <Password_validate+0x9a>
		while(KPD_flag<4)
		{
		 do{
			Pass[i]=H_KEYPAD_u8_getPressedKey();
    446a:	8a 81       	ldd	r24, Y+2	; 0x02
    446c:	08 2f       	mov	r16, r24
    446e:	10 e0       	ldi	r17, 0x00	; 0
    4470:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <H_KEYPAD_u8_getPressedKey>
    4474:	28 2f       	mov	r18, r24
    4476:	ce 01       	movw	r24, r28
    4478:	06 96       	adiw	r24, 0x06	; 6
    447a:	fc 01       	movw	r30, r24
    447c:	e0 0f       	add	r30, r16
    447e:	f1 1f       	adc	r31, r17
    4480:	20 83       	st	Z, r18
			}while(Pass[i]=='\0');
    4482:	8a 81       	ldd	r24, Y+2	; 0x02
    4484:	28 2f       	mov	r18, r24
    4486:	30 e0       	ldi	r19, 0x00	; 0
    4488:	ce 01       	movw	r24, r28
    448a:	06 96       	adiw	r24, 0x06	; 6
    448c:	fc 01       	movw	r30, r24
    448e:	e2 0f       	add	r30, r18
    4490:	f3 1f       	adc	r31, r19
    4492:	80 81       	ld	r24, Z
    4494:	88 23       	and	r24, r24
    4496:	49 f3       	breq	.-46     	; 0x446a <Password_validate+0x4a>
		 H_LCD_void_sendData(Pass[i]);
    4498:	8a 81       	ldd	r24, Y+2	; 0x02
    449a:	28 2f       	mov	r18, r24
    449c:	30 e0       	ldi	r19, 0x00	; 0
    449e:	ce 01       	movw	r24, r28
    44a0:	06 96       	adiw	r24, 0x06	; 6
    44a2:	fc 01       	movw	r30, r24
    44a4:	e2 0f       	add	r30, r18
    44a6:	f3 1f       	adc	r31, r19
    44a8:	80 81       	ld	r24, Z
    44aa:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <H_LCD_void_sendData>
			i++;
    44ae:	8a 81       	ldd	r24, Y+2	; 0x02
    44b0:	8f 5f       	subi	r24, 0xFF	; 255
    44b2:	8a 83       	std	Y+2, r24	; 0x02
			KPD_flag++;
    44b4:	8b 81       	ldd	r24, Y+3	; 0x03
    44b6:	8f 5f       	subi	r24, 0xFF	; 255
    44b8:	8b 83       	std	Y+3, r24	; 0x03
		/*ASK user to enter password*/
		H_LCD_void_ClearDisplay();
		H_LCD_void_sendString("Enter Password");
		H_LCD_void_gotoXY(2,0);
		H_LCD_void_sendData(':');
		while(KPD_flag<4)
    44ba:	8b 81       	ldd	r24, Y+3	; 0x03
    44bc:	84 30       	cpi	r24, 0x04	; 4
    44be:	a8 f2       	brcs	.-86     	; 0x446a <Password_validate+0x4a>
			}while(Pass[i]=='\0');
		 H_LCD_void_sendData(Pass[i]);
			i++;
			KPD_flag++;
		}
		M_TIMER0_setDelayTimeMilliSec(1,Normal_Mode,CLK_1024);
    44c0:	61 e0       	ldi	r22, 0x01	; 1
    44c2:	70 e0       	ldi	r23, 0x00	; 0
    44c4:	80 e0       	ldi	r24, 0x00	; 0
    44c6:	90 e0       	ldi	r25, 0x00	; 0
    44c8:	40 e0       	ldi	r20, 0x00	; 0
    44ca:	25 e0       	ldi	r18, 0x05	; 5
    44cc:	0e 94 a0 09 	call	0x1340	; 0x1340 <M_TIMER0_setDelayTimeMilliSec>
		while(Timer_flag==0);
    44d0:	80 91 14 03 	lds	r24, 0x0314
    44d4:	88 23       	and	r24, r24
    44d6:	e1 f3       	breq	.-8      	; 0x44d0 <Password_validate+0xb0>
		Timer_flag=0;
    44d8:	10 92 14 03 	sts	0x0314, r1
		H_LCD_void_ClearDisplay();
    44dc:	0e 94 00 21 	call	0x4200	; 0x4200 <H_LCD_void_ClearDisplay>
		H_LCD_void_sendString("Checking");
    44e0:	8e ec       	ldi	r24, 0xCE	; 206
    44e2:	90 e0       	ldi	r25, 0x00	; 0
    44e4:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <H_LCD_void_sendString>
		H_LCD_void_gotoXY(2,0);
    44e8:	82 e0       	ldi	r24, 0x02	; 2
    44ea:	60 e0       	ldi	r22, 0x00	; 0
    44ec:	0e 94 8b 20 	call	0x4116	; 0x4116 <H_LCD_void_gotoXY>
		H_LCD_void_sendString("Password...");
    44f0:	87 ed       	ldi	r24, 0xD7	; 215
    44f2:	90 e0       	ldi	r25, 0x00	; 0
    44f4:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <H_LCD_void_sendString>
		M_TIMER0_setDelayTimeMilliSec(3,Normal_Mode,CLK_1024);
    44f8:	63 e0       	ldi	r22, 0x03	; 3
    44fa:	70 e0       	ldi	r23, 0x00	; 0
    44fc:	80 e0       	ldi	r24, 0x00	; 0
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	40 e0       	ldi	r20, 0x00	; 0
    4502:	25 e0       	ldi	r18, 0x05	; 5
    4504:	0e 94 a0 09 	call	0x1340	; 0x1340 <M_TIMER0_setDelayTimeMilliSec>
		while(Timer_flag==0);
    4508:	80 91 14 03 	lds	r24, 0x0314
    450c:	88 23       	and	r24, r24
    450e:	e1 f3       	breq	.-8      	; 0x4508 <Password_validate+0xe8>
		Timer_flag=0;
    4510:	10 92 14 03 	sts	0x0314, r1
		for(i=0;i<4;i++)
    4514:	1a 82       	std	Y+2, r1	; 0x02
    4516:	1c c0       	rjmp	.+56     	; 0x4550 <Password_validate+0x130>
		{
			if(Pass[i]==Original_Pass[i])
    4518:	8a 81       	ldd	r24, Y+2	; 0x02
    451a:	28 2f       	mov	r18, r24
    451c:	30 e0       	ldi	r19, 0x00	; 0
    451e:	ce 01       	movw	r24, r28
    4520:	06 96       	adiw	r24, 0x06	; 6
    4522:	fc 01       	movw	r30, r24
    4524:	e2 0f       	add	r30, r18
    4526:	f3 1f       	adc	r31, r19
    4528:	20 81       	ld	r18, Z
    452a:	8a 81       	ldd	r24, Y+2	; 0x02
    452c:	88 2f       	mov	r24, r24
    452e:	90 e0       	ldi	r25, 0x00	; 0
    4530:	fc 01       	movw	r30, r24
    4532:	e8 50       	subi	r30, 0x08	; 8
    4534:	fd 4f       	sbci	r31, 0xFD	; 253
    4536:	80 81       	ld	r24, Z
    4538:	28 17       	cp	r18, r24
    453a:	21 f4       	brne	.+8      	; 0x4544 <Password_validate+0x124>
			{
				i++;
    453c:	8a 81       	ldd	r24, Y+2	; 0x02
    453e:	8f 5f       	subi	r24, 0xFF	; 255
    4540:	8a 83       	std	Y+2, r24	; 0x02
    4542:	03 c0       	rjmp	.+6      	; 0x454a <Password_validate+0x12a>
			}
			else
			{
				Compare_flag++;
    4544:	89 81       	ldd	r24, Y+1	; 0x01
    4546:	8f 5f       	subi	r24, 0xFF	; 255
    4548:	89 83       	std	Y+1, r24	; 0x01
		H_LCD_void_gotoXY(2,0);
		H_LCD_void_sendString("Password...");
		M_TIMER0_setDelayTimeMilliSec(3,Normal_Mode,CLK_1024);
		while(Timer_flag==0);
		Timer_flag=0;
		for(i=0;i<4;i++)
    454a:	8a 81       	ldd	r24, Y+2	; 0x02
    454c:	8f 5f       	subi	r24, 0xFF	; 255
    454e:	8a 83       	std	Y+2, r24	; 0x02
    4550:	8a 81       	ldd	r24, Y+2	; 0x02
    4552:	84 30       	cpi	r24, 0x04	; 4
    4554:	08 f3       	brcs	.-62     	; 0x4518 <Password_validate+0xf8>
			else
			{
				Compare_flag++;
			}
		}
		if(Compare_flag==0)
    4556:	89 81       	ldd	r24, Y+1	; 0x01
    4558:	88 23       	and	r24, r24
    455a:	09 f4       	brne	.+2      	; 0x455e <Password_validate+0x13e>
    455c:	47 c0       	rjmp	.+142    	; 0x45ec <Password_validate+0x1cc>
		{
			break;
			//return Password_flag;
		}
		else if(Compare_flag !=0)
    455e:	89 81       	ldd	r24, Y+1	; 0x01
    4560:	88 23       	and	r24, r24
    4562:	09 f4       	brne	.+2      	; 0x4566 <Password_validate+0x146>
    4564:	3e c0       	rjmp	.+124    	; 0x45e2 <Password_validate+0x1c2>
		{
			Password_flag++;
    4566:	8c 81       	ldd	r24, Y+4	; 0x04
    4568:	8f 5f       	subi	r24, 0xFF	; 255
    456a:	8c 83       	std	Y+4, r24	; 0x04
			if(Password_flag==3)
    456c:	8c 81       	ldd	r24, Y+4	; 0x04
    456e:	83 30       	cpi	r24, 0x03	; 3
    4570:	c9 f4       	brne	.+50     	; 0x45a4 <Password_validate+0x184>
			{
				H_LCD_void_ClearDisplay();
    4572:	0e 94 00 21 	call	0x4200	; 0x4200 <H_LCD_void_ClearDisplay>
				H_LCD_void_sendString("System Locked");
    4576:	83 ee       	ldi	r24, 0xE3	; 227
    4578:	90 e0       	ldi	r25, 0x00	; 0
    457a:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <H_LCD_void_sendString>
				M_TIMER0_setDelayTimeMilliSec(120,Normal_Mode,CLK_1024);
    457e:	68 e7       	ldi	r22, 0x78	; 120
    4580:	70 e0       	ldi	r23, 0x00	; 0
    4582:	80 e0       	ldi	r24, 0x00	; 0
    4584:	90 e0       	ldi	r25, 0x00	; 0
    4586:	40 e0       	ldi	r20, 0x00	; 0
    4588:	25 e0       	ldi	r18, 0x05	; 5
    458a:	0e 94 a0 09 	call	0x1340	; 0x1340 <M_TIMER0_setDelayTimeMilliSec>
				while(Timer_flag==0);
    458e:	80 91 14 03 	lds	r24, 0x0314
    4592:	88 23       	and	r24, r24
    4594:	e1 f3       	breq	.-8      	; 0x458e <Password_validate+0x16e>
				Timer_flag=0;
    4596:	10 92 14 03 	sts	0x0314, r1
				Password_flag=0;
    459a:	1c 82       	std	Y+4, r1	; 0x04
				Compare_flag=0;
    459c:	19 82       	std	Y+1, r1	; 0x01
				KPD_flag=0;
    459e:	1b 82       	std	Y+3, r1	; 0x03
				i=0;
    45a0:	1a 82       	std	Y+2, r1	; 0x02
    45a2:	1f c0       	rjmp	.+62     	; 0x45e2 <Password_validate+0x1c2>
			}
			else
			{
				H_LCD_void_ClearDisplay();
    45a4:	0e 94 00 21 	call	0x4200	; 0x4200 <H_LCD_void_ClearDisplay>
				H_LCD_void_sendString("Wrong Password");
    45a8:	81 ef       	ldi	r24, 0xF1	; 241
    45aa:	90 e0       	ldi	r25, 0x00	; 0
    45ac:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <H_LCD_void_sendString>
				H_LCD_void_gotoXY(2,0);
    45b0:	82 e0       	ldi	r24, 0x02	; 2
    45b2:	60 e0       	ldi	r22, 0x00	; 0
    45b4:	0e 94 8b 20 	call	0x4116	; 0x4116 <H_LCD_void_gotoXY>
				H_LCD_void_sendString("Pls.Try Again");
    45b8:	80 e0       	ldi	r24, 0x00	; 0
    45ba:	91 e0       	ldi	r25, 0x01	; 1
    45bc:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <H_LCD_void_sendString>
				M_TIMER0_setDelayTimeMilliSec(2,Normal_Mode,CLK_1024);
    45c0:	62 e0       	ldi	r22, 0x02	; 2
    45c2:	70 e0       	ldi	r23, 0x00	; 0
    45c4:	80 e0       	ldi	r24, 0x00	; 0
    45c6:	90 e0       	ldi	r25, 0x00	; 0
    45c8:	40 e0       	ldi	r20, 0x00	; 0
    45ca:	25 e0       	ldi	r18, 0x05	; 5
    45cc:	0e 94 a0 09 	call	0x1340	; 0x1340 <M_TIMER0_setDelayTimeMilliSec>
				while(Timer_flag==0);
    45d0:	80 91 14 03 	lds	r24, 0x0314
    45d4:	88 23       	and	r24, r24
    45d6:	e1 f3       	breq	.-8      	; 0x45d0 <Password_validate+0x1b0>
				Timer_flag=0;
    45d8:	10 92 14 03 	sts	0x0314, r1
				Compare_flag=0;
    45dc:	19 82       	std	Y+1, r1	; 0x01
				KPD_flag=0;
    45de:	1b 82       	std	Y+3, r1	; 0x03
				i=0;
    45e0:	1a 82       	std	Y+2, r1	; 0x02
	u8 Password_flag=0;
	u8 KPD_flag=0;
	u8 Pass[4]={0};
	u8 i=0;
	u8 Compare_flag=0;
	while(Password_flag<Number_of_trials)
    45e2:	9c 81       	ldd	r25, Y+4	; 0x04
    45e4:	8d 81       	ldd	r24, Y+5	; 0x05
    45e6:	98 17       	cp	r25, r24
    45e8:	08 f4       	brcc	.+2      	; 0x45ec <Password_validate+0x1cc>
    45ea:	31 cf       	rjmp	.-414    	; 0x444e <Password_validate+0x2e>
				i=0;
			}

		}
	}
	return Password_flag;
    45ec:	8c 81       	ldd	r24, Y+4	; 0x04
}
    45ee:	29 96       	adiw	r28, 0x09	; 9
    45f0:	0f b6       	in	r0, 0x3f	; 63
    45f2:	f8 94       	cli
    45f4:	de bf       	out	0x3e, r29	; 62
    45f6:	0f be       	out	0x3f, r0	; 63
    45f8:	cd bf       	out	0x3d, r28	; 61
    45fa:	cf 91       	pop	r28
    45fc:	df 91       	pop	r29
    45fe:	1f 91       	pop	r17
    4600:	0f 91       	pop	r16
    4602:	08 95       	ret

00004604 <Delay>:
void Delay(void)
{
    4604:	df 93       	push	r29
    4606:	cf 93       	push	r28
    4608:	cd b7       	in	r28, 0x3d	; 61
    460a:	de b7       	in	r29, 0x3e	; 62
	M_void_Timer_stop();
    460c:	0e 94 74 09 	call	0x12e8	; 0x12e8 <M_void_Timer_stop>
	Timer_flag=1;
    4610:	81 e0       	ldi	r24, 0x01	; 1
    4612:	80 93 14 03 	sts	0x0314, r24
}
    4616:	cf 91       	pop	r28
    4618:	df 91       	pop	r29
    461a:	08 95       	ret

0000461c <main>:
#include"APP.h"



int main(void)
{
    461c:	df 93       	push	r29
    461e:	cf 93       	push	r28
    4620:	cd b7       	in	r28, 0x3d	; 61
    4622:	de b7       	in	r29, 0x3e	; 62

	APPLICATION_Init();
    4624:	0e 94 0a 21 	call	0x4214	; 0x4214 <APPLICATION_Init>
	while(1)
	{
		APPLICATION_Start();
    4628:	0e 94 28 21 	call	0x4250	; 0x4250 <APPLICATION_Start>
    462c:	fd cf       	rjmp	.-6      	; 0x4628 <main+0xc>

0000462e <__mulsi3>:
    462e:	62 9f       	mul	r22, r18
    4630:	d0 01       	movw	r26, r0
    4632:	73 9f       	mul	r23, r19
    4634:	f0 01       	movw	r30, r0
    4636:	82 9f       	mul	r24, r18
    4638:	e0 0d       	add	r30, r0
    463a:	f1 1d       	adc	r31, r1
    463c:	64 9f       	mul	r22, r20
    463e:	e0 0d       	add	r30, r0
    4640:	f1 1d       	adc	r31, r1
    4642:	92 9f       	mul	r25, r18
    4644:	f0 0d       	add	r31, r0
    4646:	83 9f       	mul	r24, r19
    4648:	f0 0d       	add	r31, r0
    464a:	74 9f       	mul	r23, r20
    464c:	f0 0d       	add	r31, r0
    464e:	65 9f       	mul	r22, r21
    4650:	f0 0d       	add	r31, r0
    4652:	99 27       	eor	r25, r25
    4654:	72 9f       	mul	r23, r18
    4656:	b0 0d       	add	r27, r0
    4658:	e1 1d       	adc	r30, r1
    465a:	f9 1f       	adc	r31, r25
    465c:	63 9f       	mul	r22, r19
    465e:	b0 0d       	add	r27, r0
    4660:	e1 1d       	adc	r30, r1
    4662:	f9 1f       	adc	r31, r25
    4664:	bd 01       	movw	r22, r26
    4666:	cf 01       	movw	r24, r30
    4668:	11 24       	eor	r1, r1
    466a:	08 95       	ret

0000466c <__udivmodqi4>:
    466c:	99 1b       	sub	r25, r25
    466e:	79 e0       	ldi	r23, 0x09	; 9
    4670:	04 c0       	rjmp	.+8      	; 0x467a <__udivmodqi4_ep>

00004672 <__udivmodqi4_loop>:
    4672:	99 1f       	adc	r25, r25
    4674:	96 17       	cp	r25, r22
    4676:	08 f0       	brcs	.+2      	; 0x467a <__udivmodqi4_ep>
    4678:	96 1b       	sub	r25, r22

0000467a <__udivmodqi4_ep>:
    467a:	88 1f       	adc	r24, r24
    467c:	7a 95       	dec	r23
    467e:	c9 f7       	brne	.-14     	; 0x4672 <__udivmodqi4_loop>
    4680:	80 95       	com	r24
    4682:	08 95       	ret

00004684 <__udivmodhi4>:
    4684:	aa 1b       	sub	r26, r26
    4686:	bb 1b       	sub	r27, r27
    4688:	51 e1       	ldi	r21, 0x11	; 17
    468a:	07 c0       	rjmp	.+14     	; 0x469a <__udivmodhi4_ep>

0000468c <__udivmodhi4_loop>:
    468c:	aa 1f       	adc	r26, r26
    468e:	bb 1f       	adc	r27, r27
    4690:	a6 17       	cp	r26, r22
    4692:	b7 07       	cpc	r27, r23
    4694:	10 f0       	brcs	.+4      	; 0x469a <__udivmodhi4_ep>
    4696:	a6 1b       	sub	r26, r22
    4698:	b7 0b       	sbc	r27, r23

0000469a <__udivmodhi4_ep>:
    469a:	88 1f       	adc	r24, r24
    469c:	99 1f       	adc	r25, r25
    469e:	5a 95       	dec	r21
    46a0:	a9 f7       	brne	.-22     	; 0x468c <__udivmodhi4_loop>
    46a2:	80 95       	com	r24
    46a4:	90 95       	com	r25
    46a6:	bc 01       	movw	r22, r24
    46a8:	cd 01       	movw	r24, r26
    46aa:	08 95       	ret

000046ac <__udivmodsi4>:
    46ac:	a1 e2       	ldi	r26, 0x21	; 33
    46ae:	1a 2e       	mov	r1, r26
    46b0:	aa 1b       	sub	r26, r26
    46b2:	bb 1b       	sub	r27, r27
    46b4:	fd 01       	movw	r30, r26
    46b6:	0d c0       	rjmp	.+26     	; 0x46d2 <__udivmodsi4_ep>

000046b8 <__udivmodsi4_loop>:
    46b8:	aa 1f       	adc	r26, r26
    46ba:	bb 1f       	adc	r27, r27
    46bc:	ee 1f       	adc	r30, r30
    46be:	ff 1f       	adc	r31, r31
    46c0:	a2 17       	cp	r26, r18
    46c2:	b3 07       	cpc	r27, r19
    46c4:	e4 07       	cpc	r30, r20
    46c6:	f5 07       	cpc	r31, r21
    46c8:	20 f0       	brcs	.+8      	; 0x46d2 <__udivmodsi4_ep>
    46ca:	a2 1b       	sub	r26, r18
    46cc:	b3 0b       	sbc	r27, r19
    46ce:	e4 0b       	sbc	r30, r20
    46d0:	f5 0b       	sbc	r31, r21

000046d2 <__udivmodsi4_ep>:
    46d2:	66 1f       	adc	r22, r22
    46d4:	77 1f       	adc	r23, r23
    46d6:	88 1f       	adc	r24, r24
    46d8:	99 1f       	adc	r25, r25
    46da:	1a 94       	dec	r1
    46dc:	69 f7       	brne	.-38     	; 0x46b8 <__udivmodsi4_loop>
    46de:	60 95       	com	r22
    46e0:	70 95       	com	r23
    46e2:	80 95       	com	r24
    46e4:	90 95       	com	r25
    46e6:	9b 01       	movw	r18, r22
    46e8:	ac 01       	movw	r20, r24
    46ea:	bd 01       	movw	r22, r26
    46ec:	cf 01       	movw	r24, r30
    46ee:	08 95       	ret

000046f0 <__divmodsi4>:
    46f0:	97 fb       	bst	r25, 7
    46f2:	09 2e       	mov	r0, r25
    46f4:	05 26       	eor	r0, r21
    46f6:	0e d0       	rcall	.+28     	; 0x4714 <__divmodsi4_neg1>
    46f8:	57 fd       	sbrc	r21, 7
    46fa:	04 d0       	rcall	.+8      	; 0x4704 <__divmodsi4_neg2>
    46fc:	d7 df       	rcall	.-82     	; 0x46ac <__udivmodsi4>
    46fe:	0a d0       	rcall	.+20     	; 0x4714 <__divmodsi4_neg1>
    4700:	00 1c       	adc	r0, r0
    4702:	38 f4       	brcc	.+14     	; 0x4712 <__divmodsi4_exit>

00004704 <__divmodsi4_neg2>:
    4704:	50 95       	com	r21
    4706:	40 95       	com	r20
    4708:	30 95       	com	r19
    470a:	21 95       	neg	r18
    470c:	3f 4f       	sbci	r19, 0xFF	; 255
    470e:	4f 4f       	sbci	r20, 0xFF	; 255
    4710:	5f 4f       	sbci	r21, 0xFF	; 255

00004712 <__divmodsi4_exit>:
    4712:	08 95       	ret

00004714 <__divmodsi4_neg1>:
    4714:	f6 f7       	brtc	.-4      	; 0x4712 <__divmodsi4_exit>
    4716:	90 95       	com	r25
    4718:	80 95       	com	r24
    471a:	70 95       	com	r23
    471c:	61 95       	neg	r22
    471e:	7f 4f       	sbci	r23, 0xFF	; 255
    4720:	8f 4f       	sbci	r24, 0xFF	; 255
    4722:	9f 4f       	sbci	r25, 0xFF	; 255
    4724:	08 95       	ret

00004726 <__prologue_saves__>:
    4726:	2f 92       	push	r2
    4728:	3f 92       	push	r3
    472a:	4f 92       	push	r4
    472c:	5f 92       	push	r5
    472e:	6f 92       	push	r6
    4730:	7f 92       	push	r7
    4732:	8f 92       	push	r8
    4734:	9f 92       	push	r9
    4736:	af 92       	push	r10
    4738:	bf 92       	push	r11
    473a:	cf 92       	push	r12
    473c:	df 92       	push	r13
    473e:	ef 92       	push	r14
    4740:	ff 92       	push	r15
    4742:	0f 93       	push	r16
    4744:	1f 93       	push	r17
    4746:	cf 93       	push	r28
    4748:	df 93       	push	r29
    474a:	cd b7       	in	r28, 0x3d	; 61
    474c:	de b7       	in	r29, 0x3e	; 62
    474e:	ca 1b       	sub	r28, r26
    4750:	db 0b       	sbc	r29, r27
    4752:	0f b6       	in	r0, 0x3f	; 63
    4754:	f8 94       	cli
    4756:	de bf       	out	0x3e, r29	; 62
    4758:	0f be       	out	0x3f, r0	; 63
    475a:	cd bf       	out	0x3d, r28	; 61
    475c:	09 94       	ijmp

0000475e <__epilogue_restores__>:
    475e:	2a 88       	ldd	r2, Y+18	; 0x12
    4760:	39 88       	ldd	r3, Y+17	; 0x11
    4762:	48 88       	ldd	r4, Y+16	; 0x10
    4764:	5f 84       	ldd	r5, Y+15	; 0x0f
    4766:	6e 84       	ldd	r6, Y+14	; 0x0e
    4768:	7d 84       	ldd	r7, Y+13	; 0x0d
    476a:	8c 84       	ldd	r8, Y+12	; 0x0c
    476c:	9b 84       	ldd	r9, Y+11	; 0x0b
    476e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4770:	b9 84       	ldd	r11, Y+9	; 0x09
    4772:	c8 84       	ldd	r12, Y+8	; 0x08
    4774:	df 80       	ldd	r13, Y+7	; 0x07
    4776:	ee 80       	ldd	r14, Y+6	; 0x06
    4778:	fd 80       	ldd	r15, Y+5	; 0x05
    477a:	0c 81       	ldd	r16, Y+4	; 0x04
    477c:	1b 81       	ldd	r17, Y+3	; 0x03
    477e:	aa 81       	ldd	r26, Y+2	; 0x02
    4780:	b9 81       	ldd	r27, Y+1	; 0x01
    4782:	ce 0f       	add	r28, r30
    4784:	d1 1d       	adc	r29, r1
    4786:	0f b6       	in	r0, 0x3f	; 63
    4788:	f8 94       	cli
    478a:	de bf       	out	0x3e, r29	; 62
    478c:	0f be       	out	0x3f, r0	; 63
    478e:	cd bf       	out	0x3d, r28	; 61
    4790:	ed 01       	movw	r28, r26
    4792:	08 95       	ret

00004794 <_exit>:
    4794:	f8 94       	cli

00004796 <__stop_program>:
    4796:	ff cf       	rjmp	.-2      	; 0x4796 <__stop_program>
