
Finger_Print_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000020a  00800060  000036a2  00003736  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  0080026a  0080026a  00003940  2**0
                  ALLOC
  3 .stab         00003ef4  00000000  00000000  00003940  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002b4d  00000000  00000000  00007834  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a381  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a4c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a631  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000c27a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d165  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000df14  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e074  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e301  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000eacf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 31 07 	jmp	0xe62	; 0xe62 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c4 1a 	call	0x3588	; 0x3588 <main>
      8a:	0c 94 4f 1b 	jmp	0x369e	; 0x369e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 18 1b 	jmp	0x3630	; 0x3630 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e2       	ldi	r26, 0x26	; 38
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 34 1b 	jmp	0x3668	; 0x3668 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 24 1b 	jmp	0x3648	; 0x3648 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 40 1b 	jmp	0x3680	; 0x3680 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 24 1b 	jmp	0x3648	; 0x3648 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 40 1b 	jmp	0x3680	; 0x3680 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 18 1b 	jmp	0x3630	; 0x3630 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e2       	ldi	r24, 0x26	; 38
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 34 1b 	jmp	0x3668	; 0x3668 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 24 1b 	jmp	0x3648	; 0x3648 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 40 1b 	jmp	0x3680	; 0x3680 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 24 1b 	jmp	0x3648	; 0x3648 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 40 1b 	jmp	0x3680	; 0x3680 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 24 1b 	jmp	0x3648	; 0x3648 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 40 1b 	jmp	0x3680	; 0x3680 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 28 1b 	jmp	0x3650	; 0x3650 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 44 1b 	jmp	0x3688	; 0x3688 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_Init>:
#include<util/delay.h>

static void (*USART_PTR_FUNC)(void) =NULL;

void UART_Init(UART_CONFIG *Ptr_Copy_UART)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2b 97       	sbiw	r28, 0x0b	; 11
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9b 83       	std	Y+3, r25	; 0x03
     b5c:	8a 83       	std	Y+2, r24	; 0x02
	/*u8 variable to carry the values of UCSRC Register*/
	u8 Local_UCSRC=0;
     b5e:	19 82       	std	Y+1, r1	; 0x01

	/*Select Asynchronous mode*/
	Local_UCSRC &= UCSRC_UMSEL_ASYNCH_MASK_Clear;
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	8f 7b       	andi	r24, 0xBF	; 191
     b64:	89 83       	std	Y+1, r24	; 0x01
	/*Clear UCPOL bit in UCSRC*/
	Local_UCSRC &= UCSRC_UCPOL_CLEAR_MASK;
     b66:	89 81       	ldd	r24, Y+1	; 0x01
     b68:	8e 7f       	andi	r24, 0xFE	; 254
     b6a:	89 83       	std	Y+1, r24	; 0x01
	switch(Ptr_Copy_UART->Baud_NO)
     b6c:	ea 81       	ldd	r30, Y+2	; 0x02
     b6e:	fb 81       	ldd	r31, Y+3	; 0x03
     b70:	20 81       	ld	r18, Z
     b72:	31 81       	ldd	r19, Z+1	; 0x01
     b74:	3b 87       	std	Y+11, r19	; 0x0b
     b76:	2a 87       	std	Y+10, r18	; 0x0a
     b78:	8a 85       	ldd	r24, Y+10	; 0x0a
     b7a:	9b 85       	ldd	r25, Y+11	; 0x0b
     b7c:	87 36       	cpi	r24, 0x67	; 103
     b7e:	91 05       	cpc	r25, r1
     b80:	a9 f0       	breq	.+42     	; 0xbac <UART_Init+0x66>
     b82:	2a 85       	ldd	r18, Y+10	; 0x0a
     b84:	3b 85       	ldd	r19, Y+11	; 0x0b
     b86:	28 36       	cpi	r18, 0x68	; 104
     b88:	31 05       	cpc	r19, r1
     b8a:	30 f4       	brcc	.+12     	; 0xb98 <UART_Init+0x52>
     b8c:	8a 85       	ldd	r24, Y+10	; 0x0a
     b8e:	9b 85       	ldd	r25, Y+11	; 0x0b
     b90:	80 31       	cpi	r24, 0x10	; 16
     b92:	91 05       	cpc	r25, r1
     b94:	81 f0       	breq	.+32     	; 0xbb6 <UART_Init+0x70>
     b96:	13 c0       	rjmp	.+38     	; 0xbbe <UART_Init+0x78>
     b98:	2a 85       	ldd	r18, Y+10	; 0x0a
     b9a:	3b 85       	ldd	r19, Y+11	; 0x0b
     b9c:	2f 3c       	cpi	r18, 0xCF	; 207
     b9e:	31 05       	cpc	r19, r1
     ba0:	71 f4       	brne	.+28     	; 0xbbe <UART_Init+0x78>
	{
	case Baud_16MHz_2400:
		//UBBRL=Baud_16MHz_2400;
		break;
	case Baud_16MHz_4800:
		UBBRL= Baud_16MHz_4800;
     ba2:	e9 e2       	ldi	r30, 0x29	; 41
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	8f ec       	ldi	r24, 0xCF	; 207
     ba8:	80 83       	st	Z, r24
     baa:	09 c0       	rjmp	.+18     	; 0xbbe <UART_Init+0x78>
		break;
	case Baud_16MHz_9600:
		//UBBRL=Baud_16MHz_9600;
		UBBRL =8;
     bac:	e9 e2       	ldi	r30, 0x29	; 41
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	88 e0       	ldi	r24, 0x08	; 8
     bb2:	80 83       	st	Z, r24
     bb4:	04 c0       	rjmp	.+8      	; 0xbbe <UART_Init+0x78>
		break;
	case Baud_16MHz_57600:
		UBBRL= 16;
     bb6:	e9 e2       	ldi	r30, 0x29	; 41
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 e1       	ldi	r24, 0x10	; 16
     bbc:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
	switch(Ptr_Copy_UART->Word_size)
     bbe:	ea 81       	ldd	r30, Y+2	; 0x02
     bc0:	fb 81       	ldd	r31, Y+3	; 0x03
     bc2:	82 81       	ldd	r24, Z+2	; 0x02
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	39 87       	std	Y+9, r19	; 0x09
     bca:	28 87       	std	Y+8, r18	; 0x08
     bcc:	88 85       	ldd	r24, Y+8	; 0x08
     bce:	99 85       	ldd	r25, Y+9	; 0x09
     bd0:	82 30       	cpi	r24, 0x02	; 2
     bd2:	91 05       	cpc	r25, r1
     bd4:	b1 f1       	breq	.+108    	; 0xc42 <UART_Init+0xfc>
     bd6:	28 85       	ldd	r18, Y+8	; 0x08
     bd8:	39 85       	ldd	r19, Y+9	; 0x09
     bda:	23 30       	cpi	r18, 0x03	; 3
     bdc:	31 05       	cpc	r19, r1
     bde:	54 f4       	brge	.+20     	; 0xbf4 <UART_Init+0xae>
     be0:	88 85       	ldd	r24, Y+8	; 0x08
     be2:	99 85       	ldd	r25, Y+9	; 0x09
     be4:	00 97       	sbiw	r24, 0x00	; 0
     be6:	89 f0       	breq	.+34     	; 0xc0a <UART_Init+0xc4>
     be8:	28 85       	ldd	r18, Y+8	; 0x08
     bea:	39 85       	ldd	r19, Y+9	; 0x09
     bec:	21 30       	cpi	r18, 0x01	; 1
     bee:	31 05       	cpc	r19, r1
     bf0:	d1 f0       	breq	.+52     	; 0xc26 <UART_Init+0xe0>
     bf2:	50 c0       	rjmp	.+160    	; 0xc94 <UART_Init+0x14e>
     bf4:	88 85       	ldd	r24, Y+8	; 0x08
     bf6:	99 85       	ldd	r25, Y+9	; 0x09
     bf8:	83 30       	cpi	r24, 0x03	; 3
     bfa:	91 05       	cpc	r25, r1
     bfc:	81 f1       	breq	.+96     	; 0xc5e <UART_Init+0x118>
     bfe:	28 85       	ldd	r18, Y+8	; 0x08
     c00:	39 85       	ldd	r19, Y+9	; 0x09
     c02:	24 30       	cpi	r18, 0x04	; 4
     c04:	31 05       	cpc	r19, r1
     c06:	c9 f1       	breq	.+114    	; 0xc7a <UART_Init+0x134>
     c08:	45 c0       	rjmp	.+138    	; 0xc94 <UART_Init+0x14e>
	{
	case Word_Size_5:
		CLR_BIT(Local_UCSRC,UCSRC_UCSZ0);
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	8d 7f       	andi	r24, 0xFD	; 253
     c0e:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(Local_UCSRC,UCSRC_UCSZ1);
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	8b 7f       	andi	r24, 0xFB	; 251
     c14:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(UCSRB,UCSRB_UCSZ2);
     c16:	aa e2       	ldi	r26, 0x2A	; 42
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	ea e2       	ldi	r30, 0x2A	; 42
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	8b 7f       	andi	r24, 0xFB	; 251
     c22:	8c 93       	st	X, r24
     c24:	37 c0       	rjmp	.+110    	; 0xc94 <UART_Init+0x14e>
		break;
	case Word_Size_6:
		SET_BIT(Local_UCSRC,UCSRC_UCSZ0);
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	82 60       	ori	r24, 0x02	; 2
     c2a:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(Local_UCSRC,UCSRC_UCSZ1);
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	8b 7f       	andi	r24, 0xFB	; 251
     c30:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(UCSRB,UCSRB_UCSZ2);
     c32:	aa e2       	ldi	r26, 0x2A	; 42
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	ea e2       	ldi	r30, 0x2A	; 42
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	8b 7f       	andi	r24, 0xFB	; 251
     c3e:	8c 93       	st	X, r24
     c40:	29 c0       	rjmp	.+82     	; 0xc94 <UART_Init+0x14e>
		break;
	case Word_Size_7:
		CLR_BIT(Local_UCSRC,UCSRC_UCSZ0);
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	8d 7f       	andi	r24, 0xFD	; 253
     c46:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Local_UCSRC,UCSRC_UCSZ1);
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	84 60       	ori	r24, 0x04	; 4
     c4c:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(UCSRB,UCSRB_UCSZ2);
     c4e:	aa e2       	ldi	r26, 0x2A	; 42
     c50:	b0 e0       	ldi	r27, 0x00	; 0
     c52:	ea e2       	ldi	r30, 0x2A	; 42
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	8b 7f       	andi	r24, 0xFB	; 251
     c5a:	8c 93       	st	X, r24
     c5c:	1b c0       	rjmp	.+54     	; 0xc94 <UART_Init+0x14e>
		break;
	case Word_Size_8:
		SET_BIT(Local_UCSRC,UCSRC_UCSZ0);
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	82 60       	ori	r24, 0x02	; 2
     c62:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Local_UCSRC,UCSRC_UCSZ1);
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	84 60       	ori	r24, 0x04	; 4
     c68:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(UCSRB,UCSRB_UCSZ2);
     c6a:	aa e2       	ldi	r26, 0x2A	; 42
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	ea e2       	ldi	r30, 0x2A	; 42
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	8b 7f       	andi	r24, 0xFB	; 251
     c76:	8c 93       	st	X, r24
     c78:	0d c0       	rjmp	.+26     	; 0xc94 <UART_Init+0x14e>
		break;
	case Word_Size_9:
		SET_BIT(Local_UCSRC,UCSRC_UCSZ0);
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	82 60       	ori	r24, 0x02	; 2
     c7e:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Local_UCSRC,UCSRC_UCSZ1);
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	84 60       	ori	r24, 0x04	; 4
     c84:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(UCSRB,UCSRB_UCSZ2);
     c86:	aa e2       	ldi	r26, 0x2A	; 42
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	ea e2       	ldi	r30, 0x2A	; 42
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	84 60       	ori	r24, 0x04	; 4
     c92:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
	switch(Ptr_Copy_UART->Parity_type)
     c94:	ea 81       	ldd	r30, Y+2	; 0x02
     c96:	fb 81       	ldd	r31, Y+3	; 0x03
     c98:	83 81       	ldd	r24, Z+3	; 0x03
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	3f 83       	std	Y+7, r19	; 0x07
     ca0:	2e 83       	std	Y+6, r18	; 0x06
     ca2:	8e 81       	ldd	r24, Y+6	; 0x06
     ca4:	9f 81       	ldd	r25, Y+7	; 0x07
     ca6:	81 30       	cpi	r24, 0x01	; 1
     ca8:	91 05       	cpc	r25, r1
     caa:	69 f0       	breq	.+26     	; 0xcc6 <UART_Init+0x180>
     cac:	2e 81       	ldd	r18, Y+6	; 0x06
     cae:	3f 81       	ldd	r19, Y+7	; 0x07
     cb0:	22 30       	cpi	r18, 0x02	; 2
     cb2:	31 05       	cpc	r19, r1
     cb4:	79 f0       	breq	.+30     	; 0xcd4 <UART_Init+0x18e>
     cb6:	8e 81       	ldd	r24, Y+6	; 0x06
     cb8:	9f 81       	ldd	r25, Y+7	; 0x07
     cba:	00 97       	sbiw	r24, 0x00	; 0
     cbc:	89 f4       	brne	.+34     	; 0xce0 <UART_Init+0x19a>
	{
	case Disabled:
		Local_UCSRC &= PARITYBITS_MASK_CLEAR;
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	8f 7c       	andi	r24, 0xCF	; 207
     cc2:	89 83       	std	Y+1, r24	; 0x01
     cc4:	0d c0       	rjmp	.+26     	; 0xce0 <UART_Init+0x19a>
		break;
	case Enabled_Even_Parity:
		Local_UCSRC &= PARITYBITS_MASK_CLEAR;
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	8f 7c       	andi	r24, 0xCF	; 207
     cca:	89 83       	std	Y+1, r24	; 0x01
		Local_UCSRC |= PARITYBITS_EVEN_MASK_SET;
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	80 62       	ori	r24, 0x20	; 32
     cd0:	89 83       	std	Y+1, r24	; 0x01
     cd2:	06 c0       	rjmp	.+12     	; 0xce0 <UART_Init+0x19a>
		break;
	case Enabled_Odd_Parity:
		Local_UCSRC &= PARITYBITS_MASK_CLEAR;
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	8f 7c       	andi	r24, 0xCF	; 207
     cd8:	89 83       	std	Y+1, r24	; 0x01
		Local_UCSRC |= PARITYBITS_ODD_MASK_SET;
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	80 63       	ori	r24, 0x30	; 48
     cde:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	switch(Ptr_Copy_UART->Stop_bits_no)
     ce0:	ea 81       	ldd	r30, Y+2	; 0x02
     ce2:	fb 81       	ldd	r31, Y+3	; 0x03
     ce4:	84 81       	ldd	r24, Z+4	; 0x04
     ce6:	28 2f       	mov	r18, r24
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	3d 83       	std	Y+5, r19	; 0x05
     cec:	2c 83       	std	Y+4, r18	; 0x04
     cee:	8c 81       	ldd	r24, Y+4	; 0x04
     cf0:	9d 81       	ldd	r25, Y+5	; 0x05
     cf2:	00 97       	sbiw	r24, 0x00	; 0
     cf4:	31 f0       	breq	.+12     	; 0xd02 <UART_Init+0x1bc>
     cf6:	2c 81       	ldd	r18, Y+4	; 0x04
     cf8:	3d 81       	ldd	r19, Y+5	; 0x05
     cfa:	21 30       	cpi	r18, 0x01	; 1
     cfc:	31 05       	cpc	r19, r1
     cfe:	29 f0       	breq	.+10     	; 0xd0a <UART_Init+0x1c4>
     d00:	0a c0       	rjmp	.+20     	; 0xd16 <UART_Init+0x1d0>
	{
	case One_Stop_bit:
		Local_UCSRC &= STOP_BIT_CLEAR_1bit_MASK;
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	87 7f       	andi	r24, 0xF7	; 247
     d06:	89 83       	std	Y+1, r24	; 0x01
     d08:	06 c0       	rjmp	.+12     	; 0xd16 <UART_Init+0x1d0>
		break;
	case Two_Stop_Bit:
		Local_UCSRC &= STOP_BIT_CLEAR_1bit_MASK;
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
     d0c:	87 7f       	andi	r24, 0xF7	; 247
     d0e:	89 83       	std	Y+1, r24	; 0x01
		Local_UCSRC |= STOP_BIT_2bit_SET_MASK;
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	88 60       	ori	r24, 0x08	; 8
     d14:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	/*Set the selection bit to select UCSRC Register*/
	Local_UCSRC &= UCSRC_URSEL_REGSELECT_CLEAR;
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	8f 77       	andi	r24, 0x7F	; 127
     d1a:	89 83       	std	Y+1, r24	; 0x01
	Local_UCSRC |= UCSRC_URSEL_REGSELECT_SET;
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	80 68       	ori	r24, 0x80	; 128
     d20:	89 83       	std	Y+1, r24	; 0x01
	/*Set the UCSRC Register with the Local register*/
	UCSRC = Local_UCSRC;
     d22:	e0 e4       	ldi	r30, 0x40	; 64
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	89 81       	ldd	r24, Y+1	; 0x01
     d28:	80 83       	st	Z, r24
	//UBBRL = 51;
	//	UBBRH = Ptr_Copy_UART->Baud_NO >>8;


	/*Enable Transmitter*/
	SET_BIT(UCSRB,UCSRB_TXEN);
     d2a:	aa e2       	ldi	r26, 0x2A	; 42
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	ea e2       	ldi	r30, 0x2A	; 42
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	88 60       	ori	r24, 0x08	; 8
     d36:	8c 93       	st	X, r24
	/*Enable Receive interrupt*/
	SET_BIT(UCSRB,UCSRB_RXCIE);
     d38:	aa e2       	ldi	r26, 0x2A	; 42
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	ea e2       	ldi	r30, 0x2A	; 42
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	80 68       	ori	r24, 0x80	; 128
     d44:	8c 93       	st	X, r24
	/*Enable receiver*/
	SET_BIT(UCSRB,UCSRB_RXEN);
     d46:	aa e2       	ldi	r26, 0x2A	; 42
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	ea e2       	ldi	r30, 0x2A	; 42
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	80 61       	ori	r24, 0x10	; 16
     d52:	8c 93       	st	X, r24
}
     d54:	2b 96       	adiw	r28, 0x0b	; 11
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	de bf       	out	0x3e, r29	; 62
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	cd bf       	out	0x3d, r28	; 61
     d60:	cf 91       	pop	r28
     d62:	df 91       	pop	r29
     d64:	08 95       	ret

00000d66 <UART_SendByte>:


void UART_SendByte(u8 Copy_UART)
{
     d66:	df 93       	push	r29
     d68:	cf 93       	push	r28
     d6a:	0f 92       	push	r0
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	89 83       	std	Y+1, r24	; 0x01

	//u8 counter=0;
	/*WAIT until transmit buffer is empty*/
	while((GET_BIT(UCSRA,UCSRA_UDRE))==0);
     d72:	eb e2       	ldi	r30, 0x2B	; 43
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	82 95       	swap	r24
     d7a:	86 95       	lsr	r24
     d7c:	87 70       	andi	r24, 0x07	; 7
     d7e:	88 2f       	mov	r24, r24
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	81 70       	andi	r24, 0x01	; 1
     d84:	90 70       	andi	r25, 0x00	; 0
     d86:	00 97       	sbiw	r24, 0x00	; 0
     d88:	a1 f3       	breq	.-24     	; 0xd72 <UART_SendByte+0xc>
	UDR= Copy_UART;
     d8a:	ec e2       	ldi	r30, 0x2C	; 44
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	80 83       	st	Z, r24

}
     d92:	0f 90       	pop	r0
     d94:	cf 91       	pop	r28
     d96:	df 91       	pop	r29
     d98:	08 95       	ret

00000d9a <UART_SendString>:


void UART_SendString(u8 *Ptr_To_String)
{
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <UART_SendString+0x6>
     da0:	0f 92       	push	r0
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	9b 83       	std	Y+3, r25	; 0x03
     da8:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
     daa:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;Ptr_To_String[i] != '\0';i++)
     dac:	19 82       	std	Y+1, r1	; 0x01
     dae:	0e c0       	rjmp	.+28     	; 0xdcc <UART_SendString+0x32>
	{
		//_delay_ms(500);
		UART_SendByte(Ptr_To_String[i]);
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	9b 81       	ldd	r25, Y+3	; 0x03
     dba:	fc 01       	movw	r30, r24
     dbc:	e2 0f       	add	r30, r18
     dbe:	f3 1f       	adc	r31, r19
     dc0:	80 81       	ld	r24, Z
     dc2:	0e 94 b3 06 	call	0xd66	; 0xd66 <UART_SendByte>


void UART_SendString(u8 *Ptr_To_String)
{
	u8 i=0;
	for(i=0;Ptr_To_String[i] != '\0';i++)
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	8f 5f       	subi	r24, 0xFF	; 255
     dca:	89 83       	std	Y+1, r24	; 0x01
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	9b 81       	ldd	r25, Y+3	; 0x03
     dd6:	fc 01       	movw	r30, r24
     dd8:	e2 0f       	add	r30, r18
     dda:	f3 1f       	adc	r31, r19
     ddc:	80 81       	ld	r24, Z
     dde:	88 23       	and	r24, r24
     de0:	39 f7       	brne	.-50     	; 0xdb0 <UART_SendString+0x16>
	{
		//_delay_ms(500);
		UART_SendByte(Ptr_To_String[i]);
	}

}
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <UART_RecieveByteSynchNonBlocking>:
u8 UART_RecieveByteSynchNonBlocking(void)
{
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	0f 92       	push	r0
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62

	u8 counter=0;
     df8:	19 82       	std	Y+1, r1	; 0x01
	/*wait until receive is complete*/
	while((GET_BIT(UCSRA,UCSRA_RXC))==0 && counter <MAX_DELAY)
     dfa:	eb e2       	ldi	r30, 0x2B	; 43
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	88 23       	and	r24, r24
     e02:	24 f0       	brlt	.+8      	; 0xe0c <UART_RecieveByteSynchNonBlocking+0x1e>
	{
		counter++;
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	8f 5f       	subi	r24, 0xFF	; 255
     e08:	89 83       	std	Y+1, r24	; 0x01
     e0a:	f7 cf       	rjmp	.-18     	; 0xdfa <UART_RecieveByteSynchNonBlocking+0xc>
	}
	return UDR;
     e0c:	ec e2       	ldi	r30, 0x2C	; 44
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
}
     e12:	0f 90       	pop	r0
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	08 95       	ret

00000e1a <UART_RecieveByteASynchCallback>:
u8 UART_RecieveByteASynchCallback(void)
{
     e1a:	df 93       	push	r29
     e1c:	cf 93       	push	r28
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
	return UDR;
     e22:	ec e2       	ldi	r30, 0x2C	; 44
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z

}
     e28:	cf 91       	pop	r28
     e2a:	df 91       	pop	r29
     e2c:	08 95       	ret

00000e2e <UART_SetCallBack>:

u8 UART_SetCallBack(void (*Copy_pvINTFunc)(void))
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <UART_SetCallBack+0x6>
     e34:	0f 92       	push	r0
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9b 83       	std	Y+3, r25	; 0x03
     e3c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
     e3e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvINTFunc != NULL)
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	9b 81       	ldd	r25, Y+3	; 0x03
     e44:	00 97       	sbiw	r24, 0x00	; 0
     e46:	31 f0       	breq	.+12     	; 0xe54 <UART_SetCallBack+0x26>
	{
		USART_PTR_FUNC=Copy_pvINTFunc;
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	9b 81       	ldd	r25, Y+3	; 0x03
     e4c:	90 93 6b 02 	sts	0x026B, r25
     e50:	80 93 6a 02 	sts	0x026A, r24
	}

	return Local_u8ErrorStatus;
     e54:	89 81       	ldd	r24, Y+1	; 0x01
}
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <__vector_13>:
void __vector_13 (void)  __attribute__((signal));
void __vector_13 (void)
{
     e62:	1f 92       	push	r1
     e64:	0f 92       	push	r0
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	0f 92       	push	r0
     e6a:	11 24       	eor	r1, r1
     e6c:	2f 93       	push	r18
     e6e:	3f 93       	push	r19
     e70:	4f 93       	push	r20
     e72:	5f 93       	push	r21
     e74:	6f 93       	push	r22
     e76:	7f 93       	push	r23
     e78:	8f 93       	push	r24
     e7a:	9f 93       	push	r25
     e7c:	af 93       	push	r26
     e7e:	bf 93       	push	r27
     e80:	ef 93       	push	r30
     e82:	ff 93       	push	r31
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62

	if(USART_PTR_FUNC != NULL)
     e8c:	80 91 6a 02 	lds	r24, 0x026A
     e90:	90 91 6b 02 	lds	r25, 0x026B
     e94:	00 97       	sbiw	r24, 0x00	; 0
     e96:	29 f0       	breq	.+10     	; 0xea2 <__vector_13+0x40>
	{
		USART_PTR_FUNC();
     e98:	e0 91 6a 02 	lds	r30, 0x026A
     e9c:	f0 91 6b 02 	lds	r31, 0x026B
     ea0:	09 95       	icall
	}
	else
	{
		/*Stop*/
	}
}
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	ff 91       	pop	r31
     ea8:	ef 91       	pop	r30
     eaa:	bf 91       	pop	r27
     eac:	af 91       	pop	r26
     eae:	9f 91       	pop	r25
     eb0:	8f 91       	pop	r24
     eb2:	7f 91       	pop	r23
     eb4:	6f 91       	pop	r22
     eb6:	5f 91       	pop	r21
     eb8:	4f 91       	pop	r20
     eba:	3f 91       	pop	r19
     ebc:	2f 91       	pop	r18
     ebe:	0f 90       	pop	r0
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	0f 90       	pop	r0
     ec4:	1f 90       	pop	r1
     ec6:	18 95       	reti

00000ec8 <Port_Init>:
  parameters (in)  :
  parameters (out) : none
  Return Value     : void
******************************************/
void Port_Init(const Port_ConfigType * ConfigPtr)
{
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	2b 97       	sbiw	r28, 0x0b	; 11
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	f8 94       	cli
     ed6:	de bf       	out	0x3e, r29	; 62
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	cd bf       	out	0x3d, r28	; 61
     edc:	9d 83       	std	Y+5, r25	; 0x05
     ede:	8c 83       	std	Y+4, r24	; 0x04

	if(ConfigPtr == NULL)
     ee0:	8c 81       	ldd	r24, Y+4	; 0x04
     ee2:	9d 81       	ldd	r25, Y+5	; 0x05
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	09 f4       	brne	.+2      	; 0xeea <Port_Init+0x22>
     ee8:	51 c2       	rjmp	.+1186   	; 0x138c <Port_Init+0x4c4>
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<PORT_PINS_CONFIG_ARR_SIZE;i++)
     eea:	1b 82       	std	Y+3, r1	; 0x03
     eec:	4b c2       	rjmp	.+1174   	; 0x1384 <Port_Init+0x4bc>
			{
				Local_pin =(ConfigPtr[i].Port_PinNumber)%10 ;
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	88 2f       	mov	r24, r24
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	9c 01       	movw	r18, r24
     ef6:	22 0f       	add	r18, r18
     ef8:	33 1f       	adc	r19, r19
     efa:	22 0f       	add	r18, r18
     efc:	33 1f       	adc	r19, r19
     efe:	8c 81       	ldd	r24, Y+4	; 0x04
     f00:	9d 81       	ldd	r25, Y+5	; 0x05
     f02:	fc 01       	movw	r30, r24
     f04:	e2 0f       	add	r30, r18
     f06:	f3 1f       	adc	r31, r19
     f08:	80 81       	ld	r24, Z
     f0a:	9a e0       	ldi	r25, 0x0A	; 10
     f0c:	69 2f       	mov	r22, r25
     f0e:	0e 94 cf 1a 	call	0x359e	; 0x359e <__udivmodqi4>
     f12:	89 2f       	mov	r24, r25
     f14:	8a 83       	std	Y+2, r24	; 0x02
				Local_port =(ConfigPtr[i].Port_PinNumber)/10 ;
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	88 2f       	mov	r24, r24
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	9c 01       	movw	r18, r24
     f1e:	22 0f       	add	r18, r18
     f20:	33 1f       	adc	r19, r19
     f22:	22 0f       	add	r18, r18
     f24:	33 1f       	adc	r19, r19
     f26:	8c 81       	ldd	r24, Y+4	; 0x04
     f28:	9d 81       	ldd	r25, Y+5	; 0x05
     f2a:	fc 01       	movw	r30, r24
     f2c:	e2 0f       	add	r30, r18
     f2e:	f3 1f       	adc	r31, r19
     f30:	80 81       	ld	r24, Z
     f32:	9a e0       	ldi	r25, 0x0A	; 10
     f34:	69 2f       	mov	r22, r25
     f36:	0e 94 cf 1a 	call	0x359e	; 0x359e <__udivmodqi4>
     f3a:	89 83       	std	Y+1, r24	; 0x01
				// step1 : set direction
				if(ConfigPtr[i].Port_PinDirection == PORT_PINDIR_INPUT || ConfigPtr[i].Port_PinDirection ==PORT_PINDIR_OUTPUT)
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	88 2f       	mov	r24, r24
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	9c 01       	movw	r18, r24
     f44:	22 0f       	add	r18, r18
     f46:	33 1f       	adc	r19, r19
     f48:	22 0f       	add	r18, r18
     f4a:	33 1f       	adc	r19, r19
     f4c:	8c 81       	ldd	r24, Y+4	; 0x04
     f4e:	9d 81       	ldd	r25, Y+5	; 0x05
     f50:	fc 01       	movw	r30, r24
     f52:	e2 0f       	add	r30, r18
     f54:	f3 1f       	adc	r31, r19
     f56:	82 81       	ldd	r24, Z+2	; 0x02
     f58:	88 23       	and	r24, r24
     f5a:	89 f0       	breq	.+34     	; 0xf7e <Port_Init+0xb6>
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	88 2f       	mov	r24, r24
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	9c 01       	movw	r18, r24
     f64:	22 0f       	add	r18, r18
     f66:	33 1f       	adc	r19, r19
     f68:	22 0f       	add	r18, r18
     f6a:	33 1f       	adc	r19, r19
     f6c:	8c 81       	ldd	r24, Y+4	; 0x04
     f6e:	9d 81       	ldd	r25, Y+5	; 0x05
     f70:	fc 01       	movw	r30, r24
     f72:	e2 0f       	add	r30, r18
     f74:	f3 1f       	adc	r31, r19
     f76:	82 81       	ldd	r24, Z+2	; 0x02
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	09 f0       	breq	.+2      	; 0xf7e <Port_Init+0xb6>
     f7c:	00 c2       	rjmp	.+1024   	; 0x137e <Port_Init+0x4b6>
				{
					switch(Local_port)
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	3b 87       	std	Y+11, r19	; 0x0b
     f86:	2a 87       	std	Y+10, r18	; 0x0a
     f88:	6a 85       	ldd	r22, Y+10	; 0x0a
     f8a:	7b 85       	ldd	r23, Y+11	; 0x0b
     f8c:	62 30       	cpi	r22, 0x02	; 2
     f8e:	71 05       	cpc	r23, r1
     f90:	d1 f1       	breq	.+116    	; 0x1006 <Port_Init+0x13e>
     f92:	8a 85       	ldd	r24, Y+10	; 0x0a
     f94:	9b 85       	ldd	r25, Y+11	; 0x0b
     f96:	83 30       	cpi	r24, 0x03	; 3
     f98:	91 05       	cpc	r25, r1
     f9a:	34 f4       	brge	.+12     	; 0xfa8 <Port_Init+0xe0>
     f9c:	2a 85       	ldd	r18, Y+10	; 0x0a
     f9e:	3b 85       	ldd	r19, Y+11	; 0x0b
     fa0:	21 30       	cpi	r18, 0x01	; 1
     fa2:	31 05       	cpc	r19, r1
     fa4:	71 f0       	breq	.+28     	; 0xfc2 <Port_Init+0xfa>
     fa6:	94 c0       	rjmp	.+296    	; 0x10d0 <Port_Init+0x208>
     fa8:	6a 85       	ldd	r22, Y+10	; 0x0a
     faa:	7b 85       	ldd	r23, Y+11	; 0x0b
     fac:	63 30       	cpi	r22, 0x03	; 3
     fae:	71 05       	cpc	r23, r1
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <Port_Init+0xec>
     fb2:	4b c0       	rjmp	.+150    	; 0x104a <Port_Init+0x182>
     fb4:	8a 85       	ldd	r24, Y+10	; 0x0a
     fb6:	9b 85       	ldd	r25, Y+11	; 0x0b
     fb8:	84 30       	cpi	r24, 0x04	; 4
     fba:	91 05       	cpc	r25, r1
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <Port_Init+0xf8>
     fbe:	67 c0       	rjmp	.+206    	; 0x108e <Port_Init+0x1c6>
     fc0:	87 c0       	rjmp	.+270    	; 0x10d0 <Port_Init+0x208>
					{
					case PORT_PORTA:DDRA_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
     fc2:	aa e3       	ldi	r26, 0x3A	; 58
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	ea e3       	ldi	r30, 0x3A	; 58
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	40 81       	ld	r20, Z
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	88 2f       	mov	r24, r24
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	9c 01       	movw	r18, r24
     fd4:	22 0f       	add	r18, r18
     fd6:	33 1f       	adc	r19, r19
     fd8:	22 0f       	add	r18, r18
     fda:	33 1f       	adc	r19, r19
     fdc:	8c 81       	ldd	r24, Y+4	; 0x04
     fde:	9d 81       	ldd	r25, Y+5	; 0x05
     fe0:	fc 01       	movw	r30, r24
     fe2:	e2 0f       	add	r30, r18
     fe4:	f3 1f       	adc	r31, r19
     fe6:	82 81       	ldd	r24, Z+2	; 0x02
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	88 2f       	mov	r24, r24
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	b9 01       	movw	r22, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <Port_Init+0x132>
     ff6:	66 0f       	add	r22, r22
     ff8:	77 1f       	adc	r23, r23
     ffa:	8a 95       	dec	r24
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <Port_Init+0x12e>
     ffe:	cb 01       	movw	r24, r22
    1000:	84 2b       	or	r24, r20
    1002:	8c 93       	st	X, r24
    1004:	65 c0       	rjmp	.+202    	; 0x10d0 <Port_Init+0x208>
					case PORT_PORTB:DDRB_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1006:	a7 e3       	ldi	r26, 0x37	; 55
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e7 e3       	ldi	r30, 0x37	; 55
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	40 81       	ld	r20, Z
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	9c 01       	movw	r18, r24
    1018:	22 0f       	add	r18, r18
    101a:	33 1f       	adc	r19, r19
    101c:	22 0f       	add	r18, r18
    101e:	33 1f       	adc	r19, r19
    1020:	8c 81       	ldd	r24, Y+4	; 0x04
    1022:	9d 81       	ldd	r25, Y+5	; 0x05
    1024:	fc 01       	movw	r30, r24
    1026:	e2 0f       	add	r30, r18
    1028:	f3 1f       	adc	r31, r19
    102a:	82 81       	ldd	r24, Z+2	; 0x02
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	88 2f       	mov	r24, r24
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	b9 01       	movw	r22, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <Port_Init+0x176>
    103a:	66 0f       	add	r22, r22
    103c:	77 1f       	adc	r23, r23
    103e:	8a 95       	dec	r24
    1040:	e2 f7       	brpl	.-8      	; 0x103a <Port_Init+0x172>
    1042:	cb 01       	movw	r24, r22
    1044:	84 2b       	or	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	43 c0       	rjmp	.+134    	; 0x10d0 <Port_Init+0x208>
					case PORT_PORTC:DDRC_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    104a:	a4 e3       	ldi	r26, 0x34	; 52
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e4 e3       	ldi	r30, 0x34	; 52
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	40 81       	ld	r20, Z
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	88 2f       	mov	r24, r24
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	9c 01       	movw	r18, r24
    105c:	22 0f       	add	r18, r18
    105e:	33 1f       	adc	r19, r19
    1060:	22 0f       	add	r18, r18
    1062:	33 1f       	adc	r19, r19
    1064:	8c 81       	ldd	r24, Y+4	; 0x04
    1066:	9d 81       	ldd	r25, Y+5	; 0x05
    1068:	fc 01       	movw	r30, r24
    106a:	e2 0f       	add	r30, r18
    106c:	f3 1f       	adc	r31, r19
    106e:	82 81       	ldd	r24, Z+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	88 2f       	mov	r24, r24
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	b9 01       	movw	r22, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <Port_Init+0x1ba>
    107e:	66 0f       	add	r22, r22
    1080:	77 1f       	adc	r23, r23
    1082:	8a 95       	dec	r24
    1084:	e2 f7       	brpl	.-8      	; 0x107e <Port_Init+0x1b6>
    1086:	cb 01       	movw	r24, r22
    1088:	84 2b       	or	r24, r20
    108a:	8c 93       	st	X, r24
    108c:	21 c0       	rjmp	.+66     	; 0x10d0 <Port_Init+0x208>
					case PORT_PORTD:DDRD_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    108e:	a1 e3       	ldi	r26, 0x31	; 49
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e1 e3       	ldi	r30, 0x31	; 49
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	40 81       	ld	r20, Z
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	88 2f       	mov	r24, r24
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	9c 01       	movw	r18, r24
    10a0:	22 0f       	add	r18, r18
    10a2:	33 1f       	adc	r19, r19
    10a4:	22 0f       	add	r18, r18
    10a6:	33 1f       	adc	r19, r19
    10a8:	8c 81       	ldd	r24, Y+4	; 0x04
    10aa:	9d 81       	ldd	r25, Y+5	; 0x05
    10ac:	fc 01       	movw	r30, r24
    10ae:	e2 0f       	add	r30, r18
    10b0:	f3 1f       	adc	r31, r19
    10b2:	82 81       	ldd	r24, Z+2	; 0x02
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	88 2f       	mov	r24, r24
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	b9 01       	movw	r22, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <Port_Init+0x1fe>
    10c2:	66 0f       	add	r22, r22
    10c4:	77 1f       	adc	r23, r23
    10c6:	8a 95       	dec	r24
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <Port_Init+0x1fa>
    10ca:	cb 01       	movw	r24, r22
    10cc:	84 2b       	or	r24, r20
    10ce:	8c 93       	st	X, r24

					}
					// step 2 : config initial pin value
					if(ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_LOW || ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_HIGH)
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	88 2f       	mov	r24, r24
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	9c 01       	movw	r18, r24
    10d8:	22 0f       	add	r18, r18
    10da:	33 1f       	adc	r19, r19
    10dc:	22 0f       	add	r18, r18
    10de:	33 1f       	adc	r19, r19
    10e0:	8c 81       	ldd	r24, Y+4	; 0x04
    10e2:	9d 81       	ldd	r25, Y+5	; 0x05
    10e4:	fc 01       	movw	r30, r24
    10e6:	e2 0f       	add	r30, r18
    10e8:	f3 1f       	adc	r31, r19
    10ea:	81 81       	ldd	r24, Z+1	; 0x01
    10ec:	88 23       	and	r24, r24
    10ee:	89 f0       	breq	.+34     	; 0x1112 <Port_Init+0x24a>
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	88 2f       	mov	r24, r24
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	9c 01       	movw	r18, r24
    10f8:	22 0f       	add	r18, r18
    10fa:	33 1f       	adc	r19, r19
    10fc:	22 0f       	add	r18, r18
    10fe:	33 1f       	adc	r19, r19
    1100:	8c 81       	ldd	r24, Y+4	; 0x04
    1102:	9d 81       	ldd	r25, Y+5	; 0x05
    1104:	fc 01       	movw	r30, r24
    1106:	e2 0f       	add	r30, r18
    1108:	f3 1f       	adc	r31, r19
    110a:	81 81       	ldd	r24, Z+1	; 0x01
    110c:	81 30       	cpi	r24, 0x01	; 1
    110e:	09 f0       	breq	.+2      	; 0x1112 <Port_Init+0x24a>
    1110:	36 c1       	rjmp	.+620    	; 0x137e <Port_Init+0x4b6>
					{
						switch(Local_port)
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	39 87       	std	Y+9, r19	; 0x09
    111a:	28 87       	std	Y+8, r18	; 0x08
    111c:	68 85       	ldd	r22, Y+8	; 0x08
    111e:	79 85       	ldd	r23, Y+9	; 0x09
    1120:	62 30       	cpi	r22, 0x02	; 2
    1122:	71 05       	cpc	r23, r1
    1124:	d1 f1       	breq	.+116    	; 0x119a <Port_Init+0x2d2>
    1126:	88 85       	ldd	r24, Y+8	; 0x08
    1128:	99 85       	ldd	r25, Y+9	; 0x09
    112a:	83 30       	cpi	r24, 0x03	; 3
    112c:	91 05       	cpc	r25, r1
    112e:	34 f4       	brge	.+12     	; 0x113c <Port_Init+0x274>
    1130:	28 85       	ldd	r18, Y+8	; 0x08
    1132:	39 85       	ldd	r19, Y+9	; 0x09
    1134:	21 30       	cpi	r18, 0x01	; 1
    1136:	31 05       	cpc	r19, r1
    1138:	71 f0       	breq	.+28     	; 0x1156 <Port_Init+0x28e>
    113a:	94 c0       	rjmp	.+296    	; 0x1264 <Port_Init+0x39c>
    113c:	68 85       	ldd	r22, Y+8	; 0x08
    113e:	79 85       	ldd	r23, Y+9	; 0x09
    1140:	63 30       	cpi	r22, 0x03	; 3
    1142:	71 05       	cpc	r23, r1
    1144:	09 f4       	brne	.+2      	; 0x1148 <Port_Init+0x280>
    1146:	4b c0       	rjmp	.+150    	; 0x11de <Port_Init+0x316>
    1148:	88 85       	ldd	r24, Y+8	; 0x08
    114a:	99 85       	ldd	r25, Y+9	; 0x09
    114c:	84 30       	cpi	r24, 0x04	; 4
    114e:	91 05       	cpc	r25, r1
    1150:	09 f4       	brne	.+2      	; 0x1154 <Port_Init+0x28c>
    1152:	67 c0       	rjmp	.+206    	; 0x1222 <Port_Init+0x35a>
    1154:	87 c0       	rjmp	.+270    	; 0x1264 <Port_Init+0x39c>
						{
						case PORT_PORTA:  PORTA_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    1156:	ab e3       	ldi	r26, 0x3B	; 59
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	eb e3       	ldi	r30, 0x3B	; 59
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	40 81       	ld	r20, Z
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	88 2f       	mov	r24, r24
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	9c 01       	movw	r18, r24
    1168:	22 0f       	add	r18, r18
    116a:	33 1f       	adc	r19, r19
    116c:	22 0f       	add	r18, r18
    116e:	33 1f       	adc	r19, r19
    1170:	8c 81       	ldd	r24, Y+4	; 0x04
    1172:	9d 81       	ldd	r25, Y+5	; 0x05
    1174:	fc 01       	movw	r30, r24
    1176:	e2 0f       	add	r30, r18
    1178:	f3 1f       	adc	r31, r19
    117a:	81 81       	ldd	r24, Z+1	; 0x01
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	88 2f       	mov	r24, r24
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	b9 01       	movw	r22, r18
    1188:	02 c0       	rjmp	.+4      	; 0x118e <Port_Init+0x2c6>
    118a:	66 0f       	add	r22, r22
    118c:	77 1f       	adc	r23, r23
    118e:	8a 95       	dec	r24
    1190:	e2 f7       	brpl	.-8      	; 0x118a <Port_Init+0x2c2>
    1192:	cb 01       	movw	r24, r22
    1194:	84 2b       	or	r24, r20
    1196:	8c 93       	st	X, r24
    1198:	65 c0       	rjmp	.+202    	; 0x1264 <Port_Init+0x39c>
						case PORT_PORTB:  PORTB_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    119a:	a8 e3       	ldi	r26, 0x38	; 56
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e8 e3       	ldi	r30, 0x38	; 56
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	40 81       	ld	r20, Z
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	88 2f       	mov	r24, r24
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	9c 01       	movw	r18, r24
    11ac:	22 0f       	add	r18, r18
    11ae:	33 1f       	adc	r19, r19
    11b0:	22 0f       	add	r18, r18
    11b2:	33 1f       	adc	r19, r19
    11b4:	8c 81       	ldd	r24, Y+4	; 0x04
    11b6:	9d 81       	ldd	r25, Y+5	; 0x05
    11b8:	fc 01       	movw	r30, r24
    11ba:	e2 0f       	add	r30, r18
    11bc:	f3 1f       	adc	r31, r19
    11be:	81 81       	ldd	r24, Z+1	; 0x01
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	88 2f       	mov	r24, r24
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	b9 01       	movw	r22, r18
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <Port_Init+0x30a>
    11ce:	66 0f       	add	r22, r22
    11d0:	77 1f       	adc	r23, r23
    11d2:	8a 95       	dec	r24
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <Port_Init+0x306>
    11d6:	cb 01       	movw	r24, r22
    11d8:	84 2b       	or	r24, r20
    11da:	8c 93       	st	X, r24
    11dc:	43 c0       	rjmp	.+134    	; 0x1264 <Port_Init+0x39c>
						case PORT_PORTC:  PORTC_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    11de:	a5 e3       	ldi	r26, 0x35	; 53
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e5 e3       	ldi	r30, 0x35	; 53
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	40 81       	ld	r20, Z
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	88 2f       	mov	r24, r24
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	9c 01       	movw	r18, r24
    11f0:	22 0f       	add	r18, r18
    11f2:	33 1f       	adc	r19, r19
    11f4:	22 0f       	add	r18, r18
    11f6:	33 1f       	adc	r19, r19
    11f8:	8c 81       	ldd	r24, Y+4	; 0x04
    11fa:	9d 81       	ldd	r25, Y+5	; 0x05
    11fc:	fc 01       	movw	r30, r24
    11fe:	e2 0f       	add	r30, r18
    1200:	f3 1f       	adc	r31, r19
    1202:	81 81       	ldd	r24, Z+1	; 0x01
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	88 2f       	mov	r24, r24
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	b9 01       	movw	r22, r18
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <Port_Init+0x34e>
    1212:	66 0f       	add	r22, r22
    1214:	77 1f       	adc	r23, r23
    1216:	8a 95       	dec	r24
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <Port_Init+0x34a>
    121a:	cb 01       	movw	r24, r22
    121c:	84 2b       	or	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	21 c0       	rjmp	.+66     	; 0x1264 <Port_Init+0x39c>
						case PORT_PORTD:  PORTD_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    1222:	a2 e3       	ldi	r26, 0x32	; 50
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e2 e3       	ldi	r30, 0x32	; 50
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	40 81       	ld	r20, Z
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	88 2f       	mov	r24, r24
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	9c 01       	movw	r18, r24
    1234:	22 0f       	add	r18, r18
    1236:	33 1f       	adc	r19, r19
    1238:	22 0f       	add	r18, r18
    123a:	33 1f       	adc	r19, r19
    123c:	8c 81       	ldd	r24, Y+4	; 0x04
    123e:	9d 81       	ldd	r25, Y+5	; 0x05
    1240:	fc 01       	movw	r30, r24
    1242:	e2 0f       	add	r30, r18
    1244:	f3 1f       	adc	r31, r19
    1246:	81 81       	ldd	r24, Z+1	; 0x01
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	88 2f       	mov	r24, r24
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	b9 01       	movw	r22, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <Port_Init+0x392>
    1256:	66 0f       	add	r22, r22
    1258:	77 1f       	adc	r23, r23
    125a:	8a 95       	dec	r24
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <Port_Init+0x38e>
    125e:	cb 01       	movw	r24, r22
    1260:	84 2b       	or	r24, r20
    1262:	8c 93       	st	X, r24

						}
						// step 3 : config Pin Internal Attach
						if(ConfigPtr[i].Port_PinDirection==PORT_PINDIR_OUTPUT && ConfigPtr[i].Port_PinInternalAttach == PORT_PIN_IN_ATTATCH_PULLUP)
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	88 2f       	mov	r24, r24
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	9c 01       	movw	r18, r24
    126c:	22 0f       	add	r18, r18
    126e:	33 1f       	adc	r19, r19
    1270:	22 0f       	add	r18, r18
    1272:	33 1f       	adc	r19, r19
    1274:	8c 81       	ldd	r24, Y+4	; 0x04
    1276:	9d 81       	ldd	r25, Y+5	; 0x05
    1278:	fc 01       	movw	r30, r24
    127a:	e2 0f       	add	r30, r18
    127c:	f3 1f       	adc	r31, r19
    127e:	82 81       	ldd	r24, Z+2	; 0x02
    1280:	81 30       	cpi	r24, 0x01	; 1
    1282:	09 f0       	breq	.+2      	; 0x1286 <Port_Init+0x3be>
    1284:	7c c0       	rjmp	.+248    	; 0x137e <Port_Init+0x4b6>
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	88 2f       	mov	r24, r24
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	9c 01       	movw	r18, r24
    128e:	22 0f       	add	r18, r18
    1290:	33 1f       	adc	r19, r19
    1292:	22 0f       	add	r18, r18
    1294:	33 1f       	adc	r19, r19
    1296:	8c 81       	ldd	r24, Y+4	; 0x04
    1298:	9d 81       	ldd	r25, Y+5	; 0x05
    129a:	fc 01       	movw	r30, r24
    129c:	e2 0f       	add	r30, r18
    129e:	f3 1f       	adc	r31, r19
    12a0:	83 81       	ldd	r24, Z+3	; 0x03
    12a2:	88 23       	and	r24, r24
    12a4:	09 f0       	breq	.+2      	; 0x12a8 <Port_Init+0x3e0>
    12a6:	6b c0       	rjmp	.+214    	; 0x137e <Port_Init+0x4b6>
						{
							switch(Local_port)
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	3f 83       	std	Y+7, r19	; 0x07
    12b0:	2e 83       	std	Y+6, r18	; 0x06
    12b2:	6e 81       	ldd	r22, Y+6	; 0x06
    12b4:	7f 81       	ldd	r23, Y+7	; 0x07
    12b6:	62 30       	cpi	r22, 0x02	; 2
    12b8:	71 05       	cpc	r23, r1
    12ba:	49 f1       	breq	.+82     	; 0x130e <Port_Init+0x446>
    12bc:	8e 81       	ldd	r24, Y+6	; 0x06
    12be:	9f 81       	ldd	r25, Y+7	; 0x07
    12c0:	83 30       	cpi	r24, 0x03	; 3
    12c2:	91 05       	cpc	r25, r1
    12c4:	34 f4       	brge	.+12     	; 0x12d2 <Port_Init+0x40a>
    12c6:	2e 81       	ldd	r18, Y+6	; 0x06
    12c8:	3f 81       	ldd	r19, Y+7	; 0x07
    12ca:	21 30       	cpi	r18, 0x01	; 1
    12cc:	31 05       	cpc	r19, r1
    12ce:	61 f0       	breq	.+24     	; 0x12e8 <Port_Init+0x420>
    12d0:	56 c0       	rjmp	.+172    	; 0x137e <Port_Init+0x4b6>
    12d2:	6e 81       	ldd	r22, Y+6	; 0x06
    12d4:	7f 81       	ldd	r23, Y+7	; 0x07
    12d6:	63 30       	cpi	r22, 0x03	; 3
    12d8:	71 05       	cpc	r23, r1
    12da:	61 f1       	breq	.+88     	; 0x1334 <Port_Init+0x46c>
    12dc:	8e 81       	ldd	r24, Y+6	; 0x06
    12de:	9f 81       	ldd	r25, Y+7	; 0x07
    12e0:	84 30       	cpi	r24, 0x04	; 4
    12e2:	91 05       	cpc	r25, r1
    12e4:	d1 f1       	breq	.+116    	; 0x135a <Port_Init+0x492>
    12e6:	4b c0       	rjmp	.+150    	; 0x137e <Port_Init+0x4b6>
							{
							case PORT_PORTA:PORTA_REG |= (u8)(1<< Local_pin);break;
    12e8:	ab e3       	ldi	r26, 0x3B	; 59
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	eb e3       	ldi	r30, 0x3B	; 59
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	40 81       	ld	r20, Z
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	02 2e       	mov	r0, r18
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <Port_Init+0x43c>
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	0a 94       	dec	r0
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <Port_Init+0x438>
    1308:	84 2b       	or	r24, r20
    130a:	8c 93       	st	X, r24
    130c:	38 c0       	rjmp	.+112    	; 0x137e <Port_Init+0x4b6>
							case PORT_PORTB:PORTB_REG |= (u8)(1<< Local_pin);break;
    130e:	a8 e3       	ldi	r26, 0x38	; 56
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e8 e3       	ldi	r30, 0x38	; 56
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	40 81       	ld	r20, Z
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	02 2e       	mov	r0, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <Port_Init+0x462>
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	0a 94       	dec	r0
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <Port_Init+0x45e>
    132e:	84 2b       	or	r24, r20
    1330:	8c 93       	st	X, r24
    1332:	25 c0       	rjmp	.+74     	; 0x137e <Port_Init+0x4b6>
							case PORT_PORTC:PORTC_REG |= (u8)(1<< Local_pin);break;
    1334:	a5 e3       	ldi	r26, 0x35	; 53
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e5 e3       	ldi	r30, 0x35	; 53
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	40 81       	ld	r20, Z
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	02 2e       	mov	r0, r18
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <Port_Init+0x488>
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	0a 94       	dec	r0
    1352:	e2 f7       	brpl	.-8      	; 0x134c <Port_Init+0x484>
    1354:	84 2b       	or	r24, r20
    1356:	8c 93       	st	X, r24
    1358:	12 c0       	rjmp	.+36     	; 0x137e <Port_Init+0x4b6>
							case PORT_PORTD:PORTD_REG |= (u8)(1<< Local_pin);break;
    135a:	a2 e3       	ldi	r26, 0x32	; 50
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	e2 e3       	ldi	r30, 0x32	; 50
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	40 81       	ld	r20, Z
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	02 2e       	mov	r0, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <Port_Init+0x4ae>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	0a 94       	dec	r0
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <Port_Init+0x4aa>
    137a:	84 2b       	or	r24, r20
    137c:	8c 93       	st	X, r24
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<PORT_PINS_CONFIG_ARR_SIZE;i++)
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	8f 5f       	subi	r24, 0xFF	; 255
    1382:	8b 83       	std	Y+3, r24	; 0x03
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	80 32       	cpi	r24, 0x20	; 32
    1388:	08 f4       	brcc	.+2      	; 0x138c <Port_Init+0x4c4>
    138a:	b1 cd       	rjmp	.-1182   	; 0xeee <Port_Init+0x26>
					//report error
				}

		    }//for
		}//else
}
    138c:	2b 96       	adiw	r28, 0x0b	; 11
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	f8 94       	cli
    1392:	de bf       	out	0x3e, r29	; 62
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	cd bf       	out	0x3d, r28	; 61
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	08 95       	ret

0000139e <GIE_voidEnable>:
#include"STD_TYPES.h"
#include"BIT_MATH.h"
#include"../Mcu_HW.h"

void GIE_voidEnable(void)
{
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
	//Enable GIE for External interrupt
	SET_BIT(SREG,SREG_I);
    13a6:	af e5       	ldi	r26, 0x5F	; 95
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	ef e5       	ldi	r30, 0x5F	; 95
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	80 68       	ori	r24, 0x80	; 128
    13b2:	8c 93       	st	X, r24
}
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
	//Disable GIE for external Interrupt
	CLR_BIT(SREG,SREG_I);
    13c2:	af e5       	ldi	r26, 0x5F	; 95
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	ef e5       	ldi	r30, 0x5F	; 95
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	8f 77       	andi	r24, 0x7F	; 127
    13ce:	8c 93       	st	X, r24
}
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <M_Dio_en_getPinValue>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : Dio_HIGH or DIO_LOW
******************************************/
Dio_LevelType  M_Dio_en_getPinValue(Dio_ChannelType ChannelId)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	00 d0       	rcall	.+0      	; 0x13dc <M_Dio_en_getPinValue+0x6>
    13dc:	00 d0       	rcall	.+0      	; 0x13de <M_Dio_en_getPinValue+0x8>
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <M_Dio_en_getPinValue+0xa>
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	8c 83       	std	Y+4, r24	; 0x04
	u8 pin = ChannelId % 10;
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	9a e0       	ldi	r25, 0x0A	; 10
    13ea:	69 2f       	mov	r22, r25
    13ec:	0e 94 cf 1a 	call	0x359e	; 0x359e <__udivmodqi4>
    13f0:	89 2f       	mov	r24, r25
    13f2:	8b 83       	std	Y+3, r24	; 0x03
	u8 port = ChannelId / 10;
    13f4:	8c 81       	ldd	r24, Y+4	; 0x04
    13f6:	9a e0       	ldi	r25, 0x0A	; 10
    13f8:	69 2f       	mov	r22, r25
    13fa:	0e 94 cf 1a 	call	0x359e	; 0x359e <__udivmodqi4>
    13fe:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType Local_levelType;
	switch(port)
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	3e 83       	std	Y+6, r19	; 0x06
    1408:	2d 83       	std	Y+5, r18	; 0x05
    140a:	4d 81       	ldd	r20, Y+5	; 0x05
    140c:	5e 81       	ldd	r21, Y+6	; 0x06
    140e:	42 30       	cpi	r20, 0x02	; 2
    1410:	51 05       	cpc	r21, r1
    1412:	41 f1       	breq	.+80     	; 0x1464 <M_Dio_en_getPinValue+0x8e>
    1414:	8d 81       	ldd	r24, Y+5	; 0x05
    1416:	9e 81       	ldd	r25, Y+6	; 0x06
    1418:	83 30       	cpi	r24, 0x03	; 3
    141a:	91 05       	cpc	r25, r1
    141c:	34 f4       	brge	.+12     	; 0x142a <M_Dio_en_getPinValue+0x54>
    141e:	2d 81       	ldd	r18, Y+5	; 0x05
    1420:	3e 81       	ldd	r19, Y+6	; 0x06
    1422:	21 30       	cpi	r18, 0x01	; 1
    1424:	31 05       	cpc	r19, r1
    1426:	61 f0       	breq	.+24     	; 0x1440 <M_Dio_en_getPinValue+0x6a>
    1428:	52 c0       	rjmp	.+164    	; 0x14ce <M_Dio_en_getPinValue+0xf8>
    142a:	4d 81       	ldd	r20, Y+5	; 0x05
    142c:	5e 81       	ldd	r21, Y+6	; 0x06
    142e:	43 30       	cpi	r20, 0x03	; 3
    1430:	51 05       	cpc	r21, r1
    1432:	51 f1       	breq	.+84     	; 0x1488 <M_Dio_en_getPinValue+0xb2>
    1434:	8d 81       	ldd	r24, Y+5	; 0x05
    1436:	9e 81       	ldd	r25, Y+6	; 0x06
    1438:	84 30       	cpi	r24, 0x04	; 4
    143a:	91 05       	cpc	r25, r1
    143c:	b9 f1       	breq	.+110    	; 0x14ac <M_Dio_en_getPinValue+0xd6>
    143e:	47 c0       	rjmp	.+142    	; 0x14ce <M_Dio_en_getPinValue+0xf8>
	{
	case DIO_PORTA :Local_levelType = GET_BIT( PINA_REG,pin);break;
    1440:	e9 e3       	ldi	r30, 0x39	; 57
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	88 2f       	mov	r24, r24
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	a9 01       	movw	r20, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <M_Dio_en_getPinValue+0x82>
    1454:	55 95       	asr	r21
    1456:	47 95       	ror	r20
    1458:	8a 95       	dec	r24
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <M_Dio_en_getPinValue+0x7e>
    145c:	ca 01       	movw	r24, r20
    145e:	81 70       	andi	r24, 0x01	; 1
    1460:	89 83       	std	Y+1, r24	; 0x01
    1462:	35 c0       	rjmp	.+106    	; 0x14ce <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTB :Local_levelType = GET_BIT( PINB_REG,pin);break;
    1464:	e6 e3       	ldi	r30, 0x36	; 54
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	88 2f       	mov	r24, r24
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	a9 01       	movw	r20, r18
    1476:	02 c0       	rjmp	.+4      	; 0x147c <M_Dio_en_getPinValue+0xa6>
    1478:	55 95       	asr	r21
    147a:	47 95       	ror	r20
    147c:	8a 95       	dec	r24
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <M_Dio_en_getPinValue+0xa2>
    1480:	ca 01       	movw	r24, r20
    1482:	81 70       	andi	r24, 0x01	; 1
    1484:	89 83       	std	Y+1, r24	; 0x01
    1486:	23 c0       	rjmp	.+70     	; 0x14ce <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTC :Local_levelType = GET_BIT( PINC_REG,pin);break;
    1488:	e3 e3       	ldi	r30, 0x33	; 51
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	88 2f       	mov	r24, r24
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	a9 01       	movw	r20, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <M_Dio_en_getPinValue+0xca>
    149c:	55 95       	asr	r21
    149e:	47 95       	ror	r20
    14a0:	8a 95       	dec	r24
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <M_Dio_en_getPinValue+0xc6>
    14a4:	ca 01       	movw	r24, r20
    14a6:	81 70       	andi	r24, 0x01	; 1
    14a8:	89 83       	std	Y+1, r24	; 0x01
    14aa:	11 c0       	rjmp	.+34     	; 0x14ce <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTD :Local_levelType = GET_BIT( PIND_REG,pin);break;
    14ac:	e0 e3       	ldi	r30, 0x30	; 48
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	88 2f       	mov	r24, r24
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	a9 01       	movw	r20, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <M_Dio_en_getPinValue+0xee>
    14c0:	55 95       	asr	r21
    14c2:	47 95       	ror	r20
    14c4:	8a 95       	dec	r24
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <M_Dio_en_getPinValue+0xea>
    14c8:	ca 01       	movw	r24, r20
    14ca:	81 70       	andi	r24, 0x01	; 1
    14cc:	89 83       	std	Y+1, r24	; 0x01
	}
    return Local_levelType ;
    14ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d0:	26 96       	adiw	r28, 0x06	; 6
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	f8 94       	cli
    14d6:	de bf       	out	0x3e, r29	; 62
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	cd bf       	out	0x3d, r28	; 61
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <M_Dio_void_setPinValue>:
  parameters (in)  :  channelId (pin) ,Level (Dio_HIGH or Dio_LOW)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPinValue(Dio_ChannelType ChannelId,Dio_LevelType Level)
{
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
    14ea:	28 97       	sbiw	r28, 0x08	; 8
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	de bf       	out	0x3e, r29	; 62
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	cd bf       	out	0x3d, r28	; 61
    14f6:	8b 83       	std	Y+3, r24	; 0x03
    14f8:	6c 83       	std	Y+4, r22	; 0x04
	u8 pin = ChannelId % 10;
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	9a e0       	ldi	r25, 0x0A	; 10
    14fe:	69 2f       	mov	r22, r25
    1500:	0e 94 cf 1a 	call	0x359e	; 0x359e <__udivmodqi4>
    1504:	89 2f       	mov	r24, r25
    1506:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = ChannelId / 10;
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	9a e0       	ldi	r25, 0x0A	; 10
    150c:	69 2f       	mov	r22, r25
    150e:	0e 94 cf 1a 	call	0x359e	; 0x359e <__udivmodqi4>
    1512:	89 83       	std	Y+1, r24	; 0x01

	if(Level == DIO_HIGH)
    1514:	8c 81       	ldd	r24, Y+4	; 0x04
    1516:	81 30       	cpi	r24, 0x01	; 1
    1518:	09 f0       	breq	.+2      	; 0x151c <M_Dio_void_setPinValue+0x3a>
    151a:	70 c0       	rjmp	.+224    	; 0x15fc <M_Dio_void_setPinValue+0x11a>
	{
		switch(port)
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	38 87       	std	Y+8, r19	; 0x08
    1524:	2f 83       	std	Y+7, r18	; 0x07
    1526:	8f 81       	ldd	r24, Y+7	; 0x07
    1528:	98 85       	ldd	r25, Y+8	; 0x08
    152a:	82 30       	cpi	r24, 0x02	; 2
    152c:	91 05       	cpc	r25, r1
    152e:	51 f1       	breq	.+84     	; 0x1584 <M_Dio_void_setPinValue+0xa2>
    1530:	2f 81       	ldd	r18, Y+7	; 0x07
    1532:	38 85       	ldd	r19, Y+8	; 0x08
    1534:	23 30       	cpi	r18, 0x03	; 3
    1536:	31 05       	cpc	r19, r1
    1538:	34 f4       	brge	.+12     	; 0x1546 <M_Dio_void_setPinValue+0x64>
    153a:	8f 81       	ldd	r24, Y+7	; 0x07
    153c:	98 85       	ldd	r25, Y+8	; 0x08
    153e:	81 30       	cpi	r24, 0x01	; 1
    1540:	91 05       	cpc	r25, r1
    1542:	61 f0       	breq	.+24     	; 0x155c <M_Dio_void_setPinValue+0x7a>
    1544:	d3 c0       	rjmp	.+422    	; 0x16ec <M_Dio_void_setPinValue+0x20a>
    1546:	2f 81       	ldd	r18, Y+7	; 0x07
    1548:	38 85       	ldd	r19, Y+8	; 0x08
    154a:	23 30       	cpi	r18, 0x03	; 3
    154c:	31 05       	cpc	r19, r1
    154e:	71 f1       	breq	.+92     	; 0x15ac <M_Dio_void_setPinValue+0xca>
    1550:	8f 81       	ldd	r24, Y+7	; 0x07
    1552:	98 85       	ldd	r25, Y+8	; 0x08
    1554:	84 30       	cpi	r24, 0x04	; 4
    1556:	91 05       	cpc	r25, r1
    1558:	e9 f1       	breq	.+122    	; 0x15d4 <M_Dio_void_setPinValue+0xf2>
    155a:	c8 c0       	rjmp	.+400    	; 0x16ec <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : SET_BIT( PORTA_REG,pin);break;
    155c:	ab e3       	ldi	r26, 0x3B	; 59
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	eb e3       	ldi	r30, 0x3B	; 59
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	48 2f       	mov	r20, r24
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	02 2e       	mov	r0, r18
    1574:	02 c0       	rjmp	.+4      	; 0x157a <M_Dio_void_setPinValue+0x98>
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	0a 94       	dec	r0
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <M_Dio_void_setPinValue+0x94>
    157e:	84 2b       	or	r24, r20
    1580:	8c 93       	st	X, r24
    1582:	b4 c0       	rjmp	.+360    	; 0x16ec <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : SET_BIT( PORTB_REG,pin);break;
    1584:	a8 e3       	ldi	r26, 0x38	; 56
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e8 e3       	ldi	r30, 0x38	; 56
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	48 2f       	mov	r20, r24
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	02 2e       	mov	r0, r18
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <M_Dio_void_setPinValue+0xc0>
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	0a 94       	dec	r0
    15a4:	e2 f7       	brpl	.-8      	; 0x159e <M_Dio_void_setPinValue+0xbc>
    15a6:	84 2b       	or	r24, r20
    15a8:	8c 93       	st	X, r24
    15aa:	a0 c0       	rjmp	.+320    	; 0x16ec <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : SET_BIT( PORTC_REG,pin);break;
    15ac:	a5 e3       	ldi	r26, 0x35	; 53
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e5 e3       	ldi	r30, 0x35	; 53
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	48 2f       	mov	r20, r24
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	02 2e       	mov	r0, r18
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <M_Dio_void_setPinValue+0xe8>
    15c6:	88 0f       	add	r24, r24
    15c8:	99 1f       	adc	r25, r25
    15ca:	0a 94       	dec	r0
    15cc:	e2 f7       	brpl	.-8      	; 0x15c6 <M_Dio_void_setPinValue+0xe4>
    15ce:	84 2b       	or	r24, r20
    15d0:	8c 93       	st	X, r24
    15d2:	8c c0       	rjmp	.+280    	; 0x16ec <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : SET_BIT( PORTD_REG,pin);break;
    15d4:	a2 e3       	ldi	r26, 0x32	; 50
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e2 e3       	ldi	r30, 0x32	; 50
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	48 2f       	mov	r20, r24
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	02 2e       	mov	r0, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <M_Dio_void_setPinValue+0x110>
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	0a 94       	dec	r0
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <M_Dio_void_setPinValue+0x10c>
    15f6:	84 2b       	or	r24, r20
    15f8:	8c 93       	st	X, r24
    15fa:	78 c0       	rjmp	.+240    	; 0x16ec <M_Dio_void_setPinValue+0x20a>
		}

	}
	else if (Level == DIO_LOW)
    15fc:	8c 81       	ldd	r24, Y+4	; 0x04
    15fe:	88 23       	and	r24, r24
    1600:	09 f0       	breq	.+2      	; 0x1604 <M_Dio_void_setPinValue+0x122>
    1602:	74 c0       	rjmp	.+232    	; 0x16ec <M_Dio_void_setPinValue+0x20a>
	{
		switch(port)
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	3e 83       	std	Y+6, r19	; 0x06
    160c:	2d 83       	std	Y+5, r18	; 0x05
    160e:	8d 81       	ldd	r24, Y+5	; 0x05
    1610:	9e 81       	ldd	r25, Y+6	; 0x06
    1612:	82 30       	cpi	r24, 0x02	; 2
    1614:	91 05       	cpc	r25, r1
    1616:	61 f1       	breq	.+88     	; 0x1670 <M_Dio_void_setPinValue+0x18e>
    1618:	2d 81       	ldd	r18, Y+5	; 0x05
    161a:	3e 81       	ldd	r19, Y+6	; 0x06
    161c:	23 30       	cpi	r18, 0x03	; 3
    161e:	31 05       	cpc	r19, r1
    1620:	34 f4       	brge	.+12     	; 0x162e <M_Dio_void_setPinValue+0x14c>
    1622:	8d 81       	ldd	r24, Y+5	; 0x05
    1624:	9e 81       	ldd	r25, Y+6	; 0x06
    1626:	81 30       	cpi	r24, 0x01	; 1
    1628:	91 05       	cpc	r25, r1
    162a:	69 f0       	breq	.+26     	; 0x1646 <M_Dio_void_setPinValue+0x164>
    162c:	5f c0       	rjmp	.+190    	; 0x16ec <M_Dio_void_setPinValue+0x20a>
    162e:	2d 81       	ldd	r18, Y+5	; 0x05
    1630:	3e 81       	ldd	r19, Y+6	; 0x06
    1632:	23 30       	cpi	r18, 0x03	; 3
    1634:	31 05       	cpc	r19, r1
    1636:	89 f1       	breq	.+98     	; 0x169a <M_Dio_void_setPinValue+0x1b8>
    1638:	8d 81       	ldd	r24, Y+5	; 0x05
    163a:	9e 81       	ldd	r25, Y+6	; 0x06
    163c:	84 30       	cpi	r24, 0x04	; 4
    163e:	91 05       	cpc	r25, r1
    1640:	09 f4       	brne	.+2      	; 0x1644 <M_Dio_void_setPinValue+0x162>
    1642:	40 c0       	rjmp	.+128    	; 0x16c4 <M_Dio_void_setPinValue+0x1e2>
    1644:	53 c0       	rjmp	.+166    	; 0x16ec <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : CLR_BIT( PORTA_REG,pin);break;
    1646:	ab e3       	ldi	r26, 0x3B	; 59
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	eb e3       	ldi	r30, 0x3B	; 59
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	48 2f       	mov	r20, r24
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	02 2e       	mov	r0, r18
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <M_Dio_void_setPinValue+0x182>
    1660:	88 0f       	add	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	0a 94       	dec	r0
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <M_Dio_void_setPinValue+0x17e>
    1668:	80 95       	com	r24
    166a:	84 23       	and	r24, r20
    166c:	8c 93       	st	X, r24
    166e:	3e c0       	rjmp	.+124    	; 0x16ec <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : CLR_BIT( PORTB_REG,pin);break;
    1670:	a8 e3       	ldi	r26, 0x38	; 56
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	e8 e3       	ldi	r30, 0x38	; 56
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	48 2f       	mov	r20, r24
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	02 2e       	mov	r0, r18
    1688:	02 c0       	rjmp	.+4      	; 0x168e <M_Dio_void_setPinValue+0x1ac>
    168a:	88 0f       	add	r24, r24
    168c:	99 1f       	adc	r25, r25
    168e:	0a 94       	dec	r0
    1690:	e2 f7       	brpl	.-8      	; 0x168a <M_Dio_void_setPinValue+0x1a8>
    1692:	80 95       	com	r24
    1694:	84 23       	and	r24, r20
    1696:	8c 93       	st	X, r24
    1698:	29 c0       	rjmp	.+82     	; 0x16ec <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : CLR_BIT( PORTC_REG,pin);break;
    169a:	a5 e3       	ldi	r26, 0x35	; 53
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e5 e3       	ldi	r30, 0x35	; 53
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	48 2f       	mov	r20, r24
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	02 2e       	mov	r0, r18
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <M_Dio_void_setPinValue+0x1d6>
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	0a 94       	dec	r0
    16ba:	e2 f7       	brpl	.-8      	; 0x16b4 <M_Dio_void_setPinValue+0x1d2>
    16bc:	80 95       	com	r24
    16be:	84 23       	and	r24, r20
    16c0:	8c 93       	st	X, r24
    16c2:	14 c0       	rjmp	.+40     	; 0x16ec <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : CLR_BIT( PORTD_REG,pin);break;
    16c4:	a2 e3       	ldi	r26, 0x32	; 50
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e2 e3       	ldi	r30, 0x32	; 50
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	48 2f       	mov	r20, r24
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	02 2e       	mov	r0, r18
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <M_Dio_void_setPinValue+0x200>
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	0a 94       	dec	r0
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <M_Dio_void_setPinValue+0x1fc>
    16e6:	80 95       	com	r24
    16e8:	84 23       	and	r24, r20
    16ea:	8c 93       	st	X, r24
		}

	}

}
    16ec:	28 96       	adiw	r28, 0x08	; 8
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	de bf       	out	0x3e, r29	; 62
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	cd bf       	out	0x3d, r28	; 61
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <M_Dio_en_getPortValue>:
  parameters (in)  :  PortId
  parameters (out) :  Non
  Return Value     : Dio_PortLevelType
******************************************/
Dio_PortLevelType M_Dio_en_getPortValue(Dio_PortType PortId)
{
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	00 d0       	rcall	.+0      	; 0x1704 <M_Dio_en_getPortValue+0x6>
    1704:	00 d0       	rcall	.+0      	; 0x1706 <M_Dio_en_getPortValue+0x8>
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
    170a:	8a 83       	std	Y+2, r24	; 0x02
	Dio_PortLevelType Local_Reading;

	switch( PortId)
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	3c 83       	std	Y+4, r19	; 0x04
    1714:	2b 83       	std	Y+3, r18	; 0x03
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	9c 81       	ldd	r25, Y+4	; 0x04
    171a:	82 30       	cpi	r24, 0x02	; 2
    171c:	91 05       	cpc	r25, r1
    171e:	d9 f0       	breq	.+54     	; 0x1756 <M_Dio_en_getPortValue+0x58>
    1720:	2b 81       	ldd	r18, Y+3	; 0x03
    1722:	3c 81       	ldd	r19, Y+4	; 0x04
    1724:	23 30       	cpi	r18, 0x03	; 3
    1726:	31 05       	cpc	r19, r1
    1728:	34 f4       	brge	.+12     	; 0x1736 <M_Dio_en_getPortValue+0x38>
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	9c 81       	ldd	r25, Y+4	; 0x04
    172e:	81 30       	cpi	r24, 0x01	; 1
    1730:	91 05       	cpc	r25, r1
    1732:	61 f0       	breq	.+24     	; 0x174c <M_Dio_en_getPortValue+0x4e>
    1734:	1e c0       	rjmp	.+60     	; 0x1772 <M_Dio_en_getPortValue+0x74>
    1736:	2b 81       	ldd	r18, Y+3	; 0x03
    1738:	3c 81       	ldd	r19, Y+4	; 0x04
    173a:	23 30       	cpi	r18, 0x03	; 3
    173c:	31 05       	cpc	r19, r1
    173e:	81 f0       	breq	.+32     	; 0x1760 <M_Dio_en_getPortValue+0x62>
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	9c 81       	ldd	r25, Y+4	; 0x04
    1744:	84 30       	cpi	r24, 0x04	; 4
    1746:	91 05       	cpc	r25, r1
    1748:	81 f0       	breq	.+32     	; 0x176a <M_Dio_en_getPortValue+0x6c>
    174a:	13 c0       	rjmp	.+38     	; 0x1772 <M_Dio_en_getPortValue+0x74>
	{
	case DIO_PORTA :Local_Reading =  PORTA_REG;break;
    174c:	eb e3       	ldi	r30, 0x3B	; 59
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	89 83       	std	Y+1, r24	; 0x01
    1754:	0e c0       	rjmp	.+28     	; 0x1772 <M_Dio_en_getPortValue+0x74>
	case DIO_PORTB :Local_Reading =  PORTB_REG;break;
    1756:	e8 e3       	ldi	r30, 0x38	; 56
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	89 83       	std	Y+1, r24	; 0x01
    175e:	09 c0       	rjmp	.+18     	; 0x1772 <M_Dio_en_getPortValue+0x74>
	case DIO_PORTC :Local_Reading =  PORTC_REG;break;
    1760:	e5 e3       	ldi	r30, 0x35	; 53
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	89 83       	std	Y+1, r24	; 0x01
    1768:	04 c0       	rjmp	.+8      	; 0x1772 <M_Dio_en_getPortValue+0x74>
	case DIO_PORTD :Local_Reading =  PORTD_REG;break;
    176a:	e2 e3       	ldi	r30, 0x32	; 50
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_Reading;
    1772:	89 81       	ldd	r24, Y+1	; 0x01
}
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <M_Dio_void_setPortValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPortValue(Dio_PortType PortId,Dio_PortLevelType Level)
{
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	00 d0       	rcall	.+0      	; 0x1788 <M_Dio_void_setPortValue+0x6>
    1788:	00 d0       	rcall	.+0      	; 0x178a <M_Dio_void_setPortValue+0x8>
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
    178e:	89 83       	std	Y+1, r24	; 0x01
    1790:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortId)
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	28 2f       	mov	r18, r24
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	3c 83       	std	Y+4, r19	; 0x04
    179a:	2b 83       	std	Y+3, r18	; 0x03
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	9c 81       	ldd	r25, Y+4	; 0x04
    17a0:	82 30       	cpi	r24, 0x02	; 2
    17a2:	91 05       	cpc	r25, r1
    17a4:	d9 f0       	breq	.+54     	; 0x17dc <M_Dio_void_setPortValue+0x5a>
    17a6:	2b 81       	ldd	r18, Y+3	; 0x03
    17a8:	3c 81       	ldd	r19, Y+4	; 0x04
    17aa:	23 30       	cpi	r18, 0x03	; 3
    17ac:	31 05       	cpc	r19, r1
    17ae:	34 f4       	brge	.+12     	; 0x17bc <M_Dio_void_setPortValue+0x3a>
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	9c 81       	ldd	r25, Y+4	; 0x04
    17b4:	81 30       	cpi	r24, 0x01	; 1
    17b6:	91 05       	cpc	r25, r1
    17b8:	61 f0       	breq	.+24     	; 0x17d2 <M_Dio_void_setPortValue+0x50>
    17ba:	1e c0       	rjmp	.+60     	; 0x17f8 <M_Dio_void_setPortValue+0x76>
    17bc:	2b 81       	ldd	r18, Y+3	; 0x03
    17be:	3c 81       	ldd	r19, Y+4	; 0x04
    17c0:	23 30       	cpi	r18, 0x03	; 3
    17c2:	31 05       	cpc	r19, r1
    17c4:	81 f0       	breq	.+32     	; 0x17e6 <M_Dio_void_setPortValue+0x64>
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ca:	84 30       	cpi	r24, 0x04	; 4
    17cc:	91 05       	cpc	r25, r1
    17ce:	81 f0       	breq	.+32     	; 0x17f0 <M_Dio_void_setPortValue+0x6e>
    17d0:	13 c0       	rjmp	.+38     	; 0x17f8 <M_Dio_void_setPortValue+0x76>
	{
    	case DIO_PORTA : PORTA_REG = Level;break;
    17d2:	eb e3       	ldi	r30, 0x3B	; 59
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	80 83       	st	Z, r24
    17da:	0e c0       	rjmp	.+28     	; 0x17f8 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTB : PORTB_REG = Level;break;
    17dc:	e8 e3       	ldi	r30, 0x38	; 56
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	80 83       	st	Z, r24
    17e4:	09 c0       	rjmp	.+18     	; 0x17f8 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTC : PORTC_REG = Level;break;
    17e6:	e5 e3       	ldi	r30, 0x35	; 53
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	80 83       	st	Z, r24
    17ee:	04 c0       	rjmp	.+8      	; 0x17f8 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTD : PORTD_REG = Level;break;
    17f0:	e2 e3       	ldi	r30, 0x32	; 50
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	80 83       	st	Z, r24
	}
}
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	08 95       	ret

00001806 <M_Dio_void_togglePinValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_togglePinValue(Dio_ChannelType channelId)
{
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	00 d0       	rcall	.+0      	; 0x180c <M_Dio_void_togglePinValue+0x6>
    180c:	00 d0       	rcall	.+0      	; 0x180e <M_Dio_void_togglePinValue+0x8>
    180e:	0f 92       	push	r0
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	8b 83       	std	Y+3, r24	; 0x03
	u8 pin = channelId % 10;
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	9a e0       	ldi	r25, 0x0A	; 10
    181a:	69 2f       	mov	r22, r25
    181c:	0e 94 cf 1a 	call	0x359e	; 0x359e <__udivmodqi4>
    1820:	89 2f       	mov	r24, r25
    1822:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = channelId/ 10;
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	9a e0       	ldi	r25, 0x0A	; 10
    1828:	69 2f       	mov	r22, r25
    182a:	0e 94 cf 1a 	call	0x359e	; 0x359e <__udivmodqi4>
    182e:	89 83       	std	Y+1, r24	; 0x01

	switch(port)
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	3d 83       	std	Y+5, r19	; 0x05
    1838:	2c 83       	std	Y+4, r18	; 0x04
    183a:	8c 81       	ldd	r24, Y+4	; 0x04
    183c:	9d 81       	ldd	r25, Y+5	; 0x05
    183e:	82 30       	cpi	r24, 0x02	; 2
    1840:	91 05       	cpc	r25, r1
    1842:	51 f1       	breq	.+84     	; 0x1898 <M_Dio_void_togglePinValue+0x92>
    1844:	2c 81       	ldd	r18, Y+4	; 0x04
    1846:	3d 81       	ldd	r19, Y+5	; 0x05
    1848:	23 30       	cpi	r18, 0x03	; 3
    184a:	31 05       	cpc	r19, r1
    184c:	34 f4       	brge	.+12     	; 0x185a <M_Dio_void_togglePinValue+0x54>
    184e:	8c 81       	ldd	r24, Y+4	; 0x04
    1850:	9d 81       	ldd	r25, Y+5	; 0x05
    1852:	81 30       	cpi	r24, 0x01	; 1
    1854:	91 05       	cpc	r25, r1
    1856:	61 f0       	breq	.+24     	; 0x1870 <M_Dio_void_togglePinValue+0x6a>
    1858:	5a c0       	rjmp	.+180    	; 0x190e <M_Dio_void_togglePinValue+0x108>
    185a:	2c 81       	ldd	r18, Y+4	; 0x04
    185c:	3d 81       	ldd	r19, Y+5	; 0x05
    185e:	23 30       	cpi	r18, 0x03	; 3
    1860:	31 05       	cpc	r19, r1
    1862:	71 f1       	breq	.+92     	; 0x18c0 <M_Dio_void_togglePinValue+0xba>
    1864:	8c 81       	ldd	r24, Y+4	; 0x04
    1866:	9d 81       	ldd	r25, Y+5	; 0x05
    1868:	84 30       	cpi	r24, 0x04	; 4
    186a:	91 05       	cpc	r25, r1
    186c:	e9 f1       	breq	.+122    	; 0x18e8 <M_Dio_void_togglePinValue+0xe2>
    186e:	4f c0       	rjmp	.+158    	; 0x190e <M_Dio_void_togglePinValue+0x108>
	{
	case DIO_PORTA :TOG_BIT( PORTA_REG,pin);break;
    1870:	ab e3       	ldi	r26, 0x3B	; 59
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	eb e3       	ldi	r30, 0x3B	; 59
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	48 2f       	mov	r20, r24
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	02 2e       	mov	r0, r18
    1888:	02 c0       	rjmp	.+4      	; 0x188e <M_Dio_void_togglePinValue+0x88>
    188a:	88 0f       	add	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	0a 94       	dec	r0
    1890:	e2 f7       	brpl	.-8      	; 0x188a <M_Dio_void_togglePinValue+0x84>
    1892:	84 27       	eor	r24, r20
    1894:	8c 93       	st	X, r24
    1896:	3b c0       	rjmp	.+118    	; 0x190e <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTB :TOG_BIT( PORTB_REG,pin);break;
    1898:	a8 e3       	ldi	r26, 0x38	; 56
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e8 e3       	ldi	r30, 0x38	; 56
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	48 2f       	mov	r20, r24
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	02 2e       	mov	r0, r18
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <M_Dio_void_togglePinValue+0xb0>
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	0a 94       	dec	r0
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <M_Dio_void_togglePinValue+0xac>
    18ba:	84 27       	eor	r24, r20
    18bc:	8c 93       	st	X, r24
    18be:	27 c0       	rjmp	.+78     	; 0x190e <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTC :TOG_BIT( PORTC_REG,pin);break;
    18c0:	a5 e3       	ldi	r26, 0x35	; 53
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	e5 e3       	ldi	r30, 0x35	; 53
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	48 2f       	mov	r20, r24
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	02 2e       	mov	r0, r18
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <M_Dio_void_togglePinValue+0xd8>
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	0a 94       	dec	r0
    18e0:	e2 f7       	brpl	.-8      	; 0x18da <M_Dio_void_togglePinValue+0xd4>
    18e2:	84 27       	eor	r24, r20
    18e4:	8c 93       	st	X, r24
    18e6:	13 c0       	rjmp	.+38     	; 0x190e <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTD :TOG_BIT( PORTD_REG,pin);break;
    18e8:	a2 e3       	ldi	r26, 0x32	; 50
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	e2 e3       	ldi	r30, 0x32	; 50
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	48 2f       	mov	r20, r24
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	28 2f       	mov	r18, r24
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	02 2e       	mov	r0, r18
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <M_Dio_void_togglePinValue+0x100>
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	0a 94       	dec	r0
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <M_Dio_void_togglePinValue+0xfc>
    190a:	84 27       	eor	r24, r20
    190c:	8c 93       	st	X, r24
	}

}
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <Finger_Print_Init>:
static u8 Search_Flag=1;

static u8 Empty_Flag=0;
//static u8 Delete_Flag=0;
void Finger_Print_Init(void)
{
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
	Port_Init(PORT_Config_Arr);
    1926:	8a ee       	ldi	r24, 0xEA	; 234
    1928:	91 e0       	ldi	r25, 0x01	; 1
    192a:	0e 94 64 07 	call	0xec8	; 0xec8 <Port_Init>
	H_LCD_void_Init();
    192e:	0e 94 e5 16 	call	0x2dca	; 0x2dca <H_LCD_void_Init>
	UART_Init(&ARR_UART_CFG_3);
    1932:	89 ea       	ldi	r24, 0xA9	; 169
    1934:	91 e0       	ldi	r25, 0x01	; 1
    1936:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_Init>
	UART_SetCallBack(Display_data);
    193a:	84 e0       	ldi	r24, 0x04	; 4
    193c:	95 e1       	ldi	r25, 0x15	; 21
    193e:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_SetCallBack>
	GIE_voidEnable();
    1942:	0e 94 cf 09 	call	0x139e	; 0x139e <GIE_voidEnable>
}
    1946:	cf 91       	pop	r28
    1948:	df 91       	pop	r29
    194a:	08 95       	ret

0000194c <Finger_Print_Send_Command>:

void Finger_Print_Send_Command(u8 *Ptr_Package,u8 Package_Length )
{
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	a0 97       	sbiw	r28, 0x20	; 32
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	f8 94       	cli
    195a:	de bf       	out	0x3e, r29	; 62
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	cd bf       	out	0x3d, r28	; 61
    1960:	9f 8f       	std	Y+31, r25	; 0x1f
    1962:	8e 8f       	std	Y+30, r24	; 0x1e
    1964:	68 a3       	std	Y+32, r22	; 0x20
	u8 counter=0;
    1966:	1d 8e       	std	Y+29, r1	; 0x1d
	do
	{
		UART_SendByte(Ptr_Package[counter]);
    1968:	8d 8d       	ldd	r24, Y+29	; 0x1d
    196a:	28 2f       	mov	r18, r24
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1970:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1972:	fc 01       	movw	r30, r24
    1974:	e2 0f       	add	r30, r18
    1976:	f3 1f       	adc	r31, r19
    1978:	80 81       	ld	r24, Z
    197a:	0e 94 b3 06 	call	0xd66	; 0xd66 <UART_SendByte>
		counter++;
    197e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1980:	8f 5f       	subi	r24, 0xFF	; 255
    1982:	8d 8f       	std	Y+29, r24	; 0x1d
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	aa ef       	ldi	r26, 0xFA	; 250
    198a:	b3 e4       	ldi	r27, 0x43	; 67
    198c:	89 8f       	std	Y+25, r24	; 0x19
    198e:	9a 8f       	std	Y+26, r25	; 0x1a
    1990:	ab 8f       	std	Y+27, r26	; 0x1b
    1992:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1994:	69 8d       	ldd	r22, Y+25	; 0x19
    1996:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1998:	8b 8d       	ldd	r24, Y+27	; 0x1b
    199a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	4a e7       	ldi	r20, 0x7A	; 122
    19a2:	55 e4       	ldi	r21, 0x45	; 69
    19a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	8d 8b       	std	Y+21, r24	; 0x15
    19ae:	9e 8b       	std	Y+22, r25	; 0x16
    19b0:	af 8b       	std	Y+23, r26	; 0x17
    19b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19b4:	6d 89       	ldd	r22, Y+21	; 0x15
    19b6:	7e 89       	ldd	r23, Y+22	; 0x16
    19b8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ba:	98 8d       	ldd	r25, Y+24	; 0x18
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	40 e8       	ldi	r20, 0x80	; 128
    19c2:	5f e3       	ldi	r21, 0x3F	; 63
    19c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19c8:	88 23       	and	r24, r24
    19ca:	2c f4       	brge	.+10     	; 0x19d6 <Finger_Print_Send_Command+0x8a>
		__ticks = 1;
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	9c 8b       	std	Y+20, r25	; 0x14
    19d2:	8b 8b       	std	Y+19, r24	; 0x13
    19d4:	3f c0       	rjmp	.+126    	; 0x1a54 <Finger_Print_Send_Command+0x108>
	else if (__tmp > 65535)
    19d6:	6d 89       	ldd	r22, Y+21	; 0x15
    19d8:	7e 89       	ldd	r23, Y+22	; 0x16
    19da:	8f 89       	ldd	r24, Y+23	; 0x17
    19dc:	98 8d       	ldd	r25, Y+24	; 0x18
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	3f ef       	ldi	r19, 0xFF	; 255
    19e2:	4f e7       	ldi	r20, 0x7F	; 127
    19e4:	57 e4       	ldi	r21, 0x47	; 71
    19e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19ea:	18 16       	cp	r1, r24
    19ec:	4c f5       	brge	.+82     	; 0x1a40 <Finger_Print_Send_Command+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ee:	69 8d       	ldd	r22, Y+25	; 0x19
    19f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	40 e2       	ldi	r20, 0x20	; 32
    19fc:	51 e4       	ldi	r21, 0x41	; 65
    19fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	bc 01       	movw	r22, r24
    1a08:	cd 01       	movw	r24, r26
    1a0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	9c 8b       	std	Y+20, r25	; 0x14
    1a14:	8b 8b       	std	Y+19, r24	; 0x13
    1a16:	0f c0       	rjmp	.+30     	; 0x1a36 <Finger_Print_Send_Command+0xea>
    1a18:	80 e9       	ldi	r24, 0x90	; 144
    1a1a:	91 e0       	ldi	r25, 0x01	; 1
    1a1c:	9a 8b       	std	Y+18, r25	; 0x12
    1a1e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a20:	89 89       	ldd	r24, Y+17	; 0x11
    1a22:	9a 89       	ldd	r25, Y+18	; 0x12
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	f1 f7       	brne	.-4      	; 0x1a24 <Finger_Print_Send_Command+0xd8>
    1a28:	9a 8b       	std	Y+18, r25	; 0x12
    1a2a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	9c 8b       	std	Y+20, r25	; 0x14
    1a34:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a36:	8b 89       	ldd	r24, Y+19	; 0x13
    1a38:	9c 89       	ldd	r25, Y+20	; 0x14
    1a3a:	00 97       	sbiw	r24, 0x00	; 0
    1a3c:	69 f7       	brne	.-38     	; 0x1a18 <Finger_Print_Send_Command+0xcc>
    1a3e:	14 c0       	rjmp	.+40     	; 0x1a68 <Finger_Print_Send_Command+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a40:	6d 89       	ldd	r22, Y+21	; 0x15
    1a42:	7e 89       	ldd	r23, Y+22	; 0x16
    1a44:	8f 89       	ldd	r24, Y+23	; 0x17
    1a46:	98 8d       	ldd	r25, Y+24	; 0x18
    1a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	9c 8b       	std	Y+20, r25	; 0x14
    1a52:	8b 8b       	std	Y+19, r24	; 0x13
    1a54:	8b 89       	ldd	r24, Y+19	; 0x13
    1a56:	9c 89       	ldd	r25, Y+20	; 0x14
    1a58:	98 8b       	std	Y+16, r25	; 0x10
    1a5a:	8f 87       	std	Y+15, r24	; 0x0f
    1a5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a5e:	98 89       	ldd	r25, Y+16	; 0x10
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	f1 f7       	brne	.-4      	; 0x1a60 <Finger_Print_Send_Command+0x114>
    1a64:	98 8b       	std	Y+16, r25	; 0x10
    1a66:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
	}while(counter<Package_Length);
    1a68:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a6a:	88 a1       	ldd	r24, Y+32	; 0x20
    1a6c:	98 17       	cp	r25, r24
    1a6e:	08 f4       	brcc	.+2      	; 0x1a72 <Finger_Print_Send_Command+0x126>
    1a70:	7b cf       	rjmp	.-266    	; 0x1968 <Finger_Print_Send_Command+0x1c>
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	aa e7       	ldi	r26, 0x7A	; 122
    1a78:	b4 e4       	ldi	r27, 0x44	; 68
    1a7a:	8b 87       	std	Y+11, r24	; 0x0b
    1a7c:	9c 87       	std	Y+12, r25	; 0x0c
    1a7e:	ad 87       	std	Y+13, r26	; 0x0d
    1a80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	4a e7       	ldi	r20, 0x7A	; 122
    1a90:	55 e4       	ldi	r21, 0x45	; 69
    1a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	8f 83       	std	Y+7, r24	; 0x07
    1a9c:	98 87       	std	Y+8, r25	; 0x08
    1a9e:	a9 87       	std	Y+9, r26	; 0x09
    1aa0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aa2:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa4:	78 85       	ldd	r23, Y+8	; 0x08
    1aa6:	89 85       	ldd	r24, Y+9	; 0x09
    1aa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	40 e8       	ldi	r20, 0x80	; 128
    1ab0:	5f e3       	ldi	r21, 0x3F	; 63
    1ab2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ab6:	88 23       	and	r24, r24
    1ab8:	2c f4       	brge	.+10     	; 0x1ac4 <Finger_Print_Send_Command+0x178>
		__ticks = 1;
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	9e 83       	std	Y+6, r25	; 0x06
    1ac0:	8d 83       	std	Y+5, r24	; 0x05
    1ac2:	3f c0       	rjmp	.+126    	; 0x1b42 <Finger_Print_Send_Command+0x1f6>
	else if (__tmp > 65535)
    1ac4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac6:	78 85       	ldd	r23, Y+8	; 0x08
    1ac8:	89 85       	ldd	r24, Y+9	; 0x09
    1aca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	3f ef       	ldi	r19, 0xFF	; 255
    1ad0:	4f e7       	ldi	r20, 0x7F	; 127
    1ad2:	57 e4       	ldi	r21, 0x47	; 71
    1ad4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ad8:	18 16       	cp	r1, r24
    1ada:	4c f5       	brge	.+82     	; 0x1b2e <Finger_Print_Send_Command+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1adc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ade:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ae0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	40 e2       	ldi	r20, 0x20	; 32
    1aea:	51 e4       	ldi	r21, 0x41	; 65
    1aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	bc 01       	movw	r22, r24
    1af6:	cd 01       	movw	r24, r26
    1af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	9e 83       	std	Y+6, r25	; 0x06
    1b02:	8d 83       	std	Y+5, r24	; 0x05
    1b04:	0f c0       	rjmp	.+30     	; 0x1b24 <Finger_Print_Send_Command+0x1d8>
    1b06:	80 e9       	ldi	r24, 0x90	; 144
    1b08:	91 e0       	ldi	r25, 0x01	; 1
    1b0a:	9c 83       	std	Y+4, r25	; 0x04
    1b0c:	8b 83       	std	Y+3, r24	; 0x03
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	9c 81       	ldd	r25, Y+4	; 0x04
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	f1 f7       	brne	.-4      	; 0x1b12 <Finger_Print_Send_Command+0x1c6>
    1b16:	9c 83       	std	Y+4, r25	; 0x04
    1b18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	9e 83       	std	Y+6, r25	; 0x06
    1b22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b24:	8d 81       	ldd	r24, Y+5	; 0x05
    1b26:	9e 81       	ldd	r25, Y+6	; 0x06
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	69 f7       	brne	.-38     	; 0x1b06 <Finger_Print_Send_Command+0x1ba>
    1b2c:	14 c0       	rjmp	.+40     	; 0x1b56 <Finger_Print_Send_Command+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b30:	78 85       	ldd	r23, Y+8	; 0x08
    1b32:	89 85       	ldd	r24, Y+9	; 0x09
    1b34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	9e 83       	std	Y+6, r25	; 0x06
    1b40:	8d 83       	std	Y+5, r24	; 0x05
    1b42:	8d 81       	ldd	r24, Y+5	; 0x05
    1b44:	9e 81       	ldd	r25, Y+6	; 0x06
    1b46:	9a 83       	std	Y+2, r25	; 0x02
    1b48:	89 83       	std	Y+1, r24	; 0x01
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <Finger_Print_Send_Command+0x202>
    1b52:	9a 83       	std	Y+2, r25	; 0x02
    1b54:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    1b56:	a0 96       	adiw	r28, 0x20	; 32
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	cd bf       	out	0x3d, r28	; 61
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	08 95       	ret

00001b68 <Finger_Print_Enroll>:

Error_States_FB Finger_Print_Enroll(u8 FB_ID)
{
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	00 d0       	rcall	.+0      	; 0x1b6e <Finger_Print_Enroll+0x6>
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <Finger_Print_Enroll+0x8>
    1b70:	00 d0       	rcall	.+0      	; 0x1b72 <Finger_Print_Enroll+0xa>
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
    1b76:	8e 83       	std	Y+6, r24	; 0x06
	Error_States_FB Status;
	GEN_Image Return_Status_Gen;
	Image2Tz Return_Status_Char;
	REG_MODEL Return_Status_RegModel;
	STORE_TEMP Return_Status_Store;
	Return_Status_Gen=Generate_Image();
    1b78:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <Generate_Image>
    1b7c:	8c 83       	std	Y+4, r24	; 0x04
	if(Return_Status_Gen==Finger_Collection_Success)
    1b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b80:	88 23       	and	r24, r24
    1b82:	29 f5       	brne	.+74     	; 0x1bce <Finger_Print_Enroll+0x66>
	{
		Return_Status_Char=Char_File_Generate(CharBuffer1);
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <Char_File_Generate>
    1b8a:	8b 83       	std	Y+3, r24	; 0x03
		if(Return_Status_Char==Generate_character_file_complete)
    1b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8e:	88 23       	and	r24, r24
    1b90:	f1 f4       	brne	.+60     	; 0x1bce <Finger_Print_Enroll+0x66>
		{
			Return_Status_Gen=Generate_Image();
    1b92:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <Generate_Image>
    1b96:	8c 83       	std	Y+4, r24	; 0x04
			if(Return_Status_Gen==Finger_Collection_Success)
    1b98:	8c 81       	ldd	r24, Y+4	; 0x04
    1b9a:	88 23       	and	r24, r24
    1b9c:	c1 f4       	brne	.+48     	; 0x1bce <Finger_Print_Enroll+0x66>
			{
				Return_Status_Char=Char_File_Generate(CharBuffer2);
    1b9e:	82 e0       	ldi	r24, 0x02	; 2
    1ba0:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <Char_File_Generate>
    1ba4:	8b 83       	std	Y+3, r24	; 0x03
				if(Return_Status_Char==Generate_character_file_complete)
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	88 23       	and	r24, r24
    1baa:	89 f4       	brne	.+34     	; 0x1bce <Finger_Print_Enroll+0x66>
				{
					Return_Status_RegModel=Generate_Template();
    1bac:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <Generate_Template>
    1bb0:	8a 83       	std	Y+2, r24	; 0x02
					if(Return_Status_RegModel==Operation_Sucess)
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	88 23       	and	r24, r24
    1bb6:	59 f4       	brne	.+22     	; 0x1bce <Finger_Print_Enroll+0x66>
					{
						Return_Status_Store=Store_Template(FB_ID);
    1bb8:	8e 81       	ldd	r24, Y+6	; 0x06
    1bba:	0e 94 a5 10 	call	0x214a	; 0x214a <Store_Template>
    1bbe:	89 83       	std	Y+1, r24	; 0x01
						if(Return_Status_Store==Storage_Success)
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	88 23       	and	r24, r24
    1bc4:	21 f4       	brne	.+8      	; 0x1bce <Finger_Print_Enroll+0x66>
						{
							H_LCD_void_sendData('N');
    1bc6:	8e e4       	ldi	r24, 0x4E	; 78
    1bc8:	0e 94 5e 19 	call	0x32bc	; 0x32bc <H_LCD_void_sendData>

							Status = No_Error;
    1bcc:	1d 82       	std	Y+5, r1	; 0x05
				}
			}
		}
	}

	return Status;
    1bce:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1bd0:	26 96       	adiw	r28, 0x06	; 6
    1bd2:	0f b6       	in	r0, 0x3f	; 63
    1bd4:	f8 94       	cli
    1bd6:	de bf       	out	0x3e, r29	; 62
    1bd8:	0f be       	out	0x3f, r0	; 63
    1bda:	cd bf       	out	0x3d, r28	; 61
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	08 95       	ret

00001be2 <Finger_Print_Match>:
u8 Finger_Print_Match(void)
{
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	00 d0       	rcall	.+0      	; 0x1be8 <Finger_Print_Match+0x6>
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <Finger_Print_Match+0x8>
    1bea:	0f 92       	push	r0
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
	u8 User_ID;
	GEN_Image Return_Status_Gen;
	Image2Tz Return_Status_Char;
	SEARCH_TEMP Return_Status_Search;
	Return_Status_Gen=Generate_Image();
    1bf0:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <Generate_Image>
    1bf4:	8b 83       	std	Y+3, r24	; 0x03
	if(Return_Status_Gen==Finger_Collection_Success)
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	88 23       	and	r24, r24
    1bfa:	91 f4       	brne	.+36     	; 0x1c20 <Finger_Print_Match+0x3e>
	{
		Return_Status_Char=Char_File_Generate(CharBuffer1);
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <Char_File_Generate>
    1c02:	8a 83       	std	Y+2, r24	; 0x02
		if(Return_Status_Char==Generate_character_file_complete)
    1c04:	8a 81       	ldd	r24, Y+2	; 0x02
    1c06:	88 23       	and	r24, r24
    1c08:	59 f4       	brne	.+22     	; 0x1c20 <Finger_Print_Match+0x3e>
		{
			Return_Status_Search=Search_For_Template(&User_ID);
    1c0a:	ce 01       	movw	r24, r28
    1c0c:	04 96       	adiw	r24, 0x04	; 4
    1c0e:	0e 94 5e 11 	call	0x22bc	; 0x22bc <Search_For_Template>
    1c12:	89 83       	std	Y+1, r24	; 0x01
			if(Return_Status_Search==Found_matching_finger)
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	88 23       	and	r24, r24
    1c18:	19 f4       	brne	.+6      	; 0x1c20 <Finger_Print_Match+0x3e>
			{
				return User_ID;
    1c1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1c:	8d 83       	std	Y+5, r24	; 0x05
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <Finger_Print_Match+0x42>
			}
		}
	}
	return User_ID;
    1c20:	8c 81       	ldd	r24, Y+4	; 0x04
    1c22:	8d 83       	std	Y+5, r24	; 0x05
    1c24:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1c26:	0f 90       	pop	r0
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	cf 91       	pop	r28
    1c32:	df 91       	pop	r29
    1c34:	08 95       	ret

00001c36 <Generate_Image>:
GEN_Image Generate_Image(void)
{
    1c36:	df 93       	push	r29
    1c38:	cf 93       	push	r28
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	60 97       	sbiw	r28, 0x10	; 16
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	de bf       	out	0x3e, r29	; 62
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	cd bf       	out	0x3d, r28	; 61
    1c4a:	a3 c0       	rjmp	.+326    	; 0x1d92 <Generate_Image+0x15c>
	GEN_Image Status;
	while(Gen_Img_Flag)
	{
		H_LCD_void_ClearDisplay();
    1c4c:	0e 94 ba 1a 	call	0x3574	; 0x3574 <H_LCD_void_ClearDisplay>
		H_LCD_void_sendString("Check Finger!");
    1c50:	80 e6       	ldi	r24, 0x60	; 96
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	0e 94 80 19 	call	0x3300	; 0x3300 <H_LCD_void_sendString>
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	aa ef       	ldi	r26, 0xFA	; 250
    1c5e:	b4 e4       	ldi	r27, 0x44	; 68
    1c60:	8b 87       	std	Y+11, r24	; 0x0b
    1c62:	9c 87       	std	Y+12, r25	; 0x0c
    1c64:	ad 87       	std	Y+13, r26	; 0x0d
    1c66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	4a e7       	ldi	r20, 0x7A	; 122
    1c76:	55 e4       	ldi	r21, 0x45	; 69
    1c78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	8f 83       	std	Y+7, r24	; 0x07
    1c82:	98 87       	std	Y+8, r25	; 0x08
    1c84:	a9 87       	std	Y+9, r26	; 0x09
    1c86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c88:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8a:	78 85       	ldd	r23, Y+8	; 0x08
    1c8c:	89 85       	ldd	r24, Y+9	; 0x09
    1c8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	40 e8       	ldi	r20, 0x80	; 128
    1c96:	5f e3       	ldi	r21, 0x3F	; 63
    1c98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c9c:	88 23       	and	r24, r24
    1c9e:	2c f4       	brge	.+10     	; 0x1caa <Generate_Image+0x74>
		__ticks = 1;
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	9e 83       	std	Y+6, r25	; 0x06
    1ca6:	8d 83       	std	Y+5, r24	; 0x05
    1ca8:	3f c0       	rjmp	.+126    	; 0x1d28 <Generate_Image+0xf2>
	else if (__tmp > 65535)
    1caa:	6f 81       	ldd	r22, Y+7	; 0x07
    1cac:	78 85       	ldd	r23, Y+8	; 0x08
    1cae:	89 85       	ldd	r24, Y+9	; 0x09
    1cb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	3f ef       	ldi	r19, 0xFF	; 255
    1cb6:	4f e7       	ldi	r20, 0x7F	; 127
    1cb8:	57 e4       	ldi	r21, 0x47	; 71
    1cba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cbe:	18 16       	cp	r1, r24
    1cc0:	4c f5       	brge	.+82     	; 0x1d14 <Generate_Image+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	40 e2       	ldi	r20, 0x20	; 32
    1cd0:	51 e4       	ldi	r21, 0x41	; 65
    1cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	bc 01       	movw	r22, r24
    1cdc:	cd 01       	movw	r24, r26
    1cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	9e 83       	std	Y+6, r25	; 0x06
    1ce8:	8d 83       	std	Y+5, r24	; 0x05
    1cea:	0f c0       	rjmp	.+30     	; 0x1d0a <Generate_Image+0xd4>
    1cec:	80 e9       	ldi	r24, 0x90	; 144
    1cee:	91 e0       	ldi	r25, 0x01	; 1
    1cf0:	9c 83       	std	Y+4, r25	; 0x04
    1cf2:	8b 83       	std	Y+3, r24	; 0x03
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	f1 f7       	brne	.-4      	; 0x1cf8 <Generate_Image+0xc2>
    1cfc:	9c 83       	std	Y+4, r25	; 0x04
    1cfe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d00:	8d 81       	ldd	r24, Y+5	; 0x05
    1d02:	9e 81       	ldd	r25, Y+6	; 0x06
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	9e 83       	std	Y+6, r25	; 0x06
    1d08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	69 f7       	brne	.-38     	; 0x1cec <Generate_Image+0xb6>
    1d12:	14 c0       	rjmp	.+40     	; 0x1d3c <Generate_Image+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d14:	6f 81       	ldd	r22, Y+7	; 0x07
    1d16:	78 85       	ldd	r23, Y+8	; 0x08
    1d18:	89 85       	ldd	r24, Y+9	; 0x09
    1d1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	9e 83       	std	Y+6, r25	; 0x06
    1d26:	8d 83       	std	Y+5, r24	; 0x05
    1d28:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2c:	9a 83       	std	Y+2, r25	; 0x02
    1d2e:	89 83       	std	Y+1, r24	; 0x01
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	9a 81       	ldd	r25, Y+2	; 0x02
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	f1 f7       	brne	.-4      	; 0x1d34 <Generate_Image+0xfe>
    1d38:	9a 83       	std	Y+2, r25	; 0x02
    1d3a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		Finger_Print_Send_Command(GetImage,GEN_IMAGE_LENGTH);
    1d3c:	8a e4       	ldi	r24, 0x4A	; 74
    1d3e:	91 e0       	ldi	r25, 0x01	; 1
    1d40:	6c e0       	ldi	r22, 0x0C	; 12
    1d42:	0e 94 a6 0c 	call	0x194c	; 0x194c <Finger_Print_Send_Command>
		if(Buffer[Confirmation_Code]==Finger_Collection_Success)
    1d46:	80 91 77 02 	lds	r24, 0x0277
    1d4a:	88 23       	and	r24, r24
    1d4c:	61 f4       	brne	.+24     	; 0x1d66 <Generate_Image+0x130>
		{
				Status=Finger_Collection_Success;
    1d4e:	1f 86       	std	Y+15, r1	; 0x0f
				H_LCD_void_ClearDisplay();
    1d50:	0e 94 ba 1a 	call	0x3574	; 0x3574 <H_LCD_void_ClearDisplay>
				H_LCD_void_sendString("Check  done");
    1d54:	8e e6       	ldi	r24, 0x6E	; 110
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	0e 94 80 19 	call	0x3300	; 0x3300 <H_LCD_void_sendString>
				Flush_Buffer();
    1d5c:	0e 94 c1 14 	call	0x2982	; 0x2982 <Flush_Buffer>
				return Status;
    1d60:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d62:	88 8b       	std	Y+16, r24	; 0x10
    1d64:	1d c0       	rjmp	.+58     	; 0x1da0 <Generate_Image+0x16a>
				break;
		}
		else if(Buffer[Confirmation_Code]==Error_When_Receiving_Package_Gen)
    1d66:	80 91 77 02 	lds	r24, 0x0277
    1d6a:	81 30       	cpi	r24, 0x01	; 1
    1d6c:	19 f4       	brne	.+6      	; 0x1d74 <Generate_Image+0x13e>
		{
			Flush_Buffer();
    1d6e:	0e 94 c1 14 	call	0x2982	; 0x2982 <Flush_Buffer>
    1d72:	0f c0       	rjmp	.+30     	; 0x1d92 <Generate_Image+0x15c>
		}
		else if(Buffer[Confirmation_Code]==Can_not_detect_finger)
    1d74:	80 91 77 02 	lds	r24, 0x0277
    1d78:	82 30       	cpi	r24, 0x02	; 2
    1d7a:	49 f4       	brne	.+18     	; 0x1d8e <Generate_Image+0x158>
		{
			H_LCD_void_ClearDisplay();
    1d7c:	0e 94 ba 1a 	call	0x3574	; 0x3574 <H_LCD_void_ClearDisplay>
			H_LCD_void_sendString("Check Finger again");
    1d80:	8a e7       	ldi	r24, 0x7A	; 122
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	0e 94 80 19 	call	0x3300	; 0x3300 <H_LCD_void_sendString>
			Flush_Buffer();
    1d88:	0e 94 c1 14 	call	0x2982	; 0x2982 <Flush_Buffer>
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <Generate_Image+0x15c>
		}
		else
		{
			Flush_Buffer();
    1d8e:	0e 94 c1 14 	call	0x2982	; 0x2982 <Flush_Buffer>
	return User_ID;
}
GEN_Image Generate_Image(void)
{
	GEN_Image Status;
	while(Gen_Img_Flag)
    1d92:	80 91 bd 01 	lds	r24, 0x01BD
    1d96:	88 23       	and	r24, r24
    1d98:	09 f0       	breq	.+2      	; 0x1d9c <Generate_Image+0x166>
    1d9a:	58 cf       	rjmp	.-336    	; 0x1c4c <Generate_Image+0x16>
		else
		{
			Flush_Buffer();
		}
	}
	return Status;
    1d9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d9e:	88 8b       	std	Y+16, r24	; 0x10
    1da0:	88 89       	ldd	r24, Y+16	; 0x10
}
    1da2:	60 96       	adiw	r28, 0x10	; 16
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	f8 94       	cli
    1da8:	de bf       	out	0x3e, r29	; 62
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	cd bf       	out	0x3d, r28	; 61
    1dae:	cf 91       	pop	r28
    1db0:	df 91       	pop	r29
    1db2:	08 95       	ret

00001db4 <Char_File_Generate>:
Image2Tz  Char_File_Generate(u8 Buffer_ID)
{
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	6f 97       	sbiw	r28, 0x1f	; 31
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	f8 94       	cli
    1dc2:	de bf       	out	0x3e, r29	; 62
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	cd bf       	out	0x3d, r28	; 61
    1dc8:	8e 8f       	std	Y+30, r24	; 0x1e
    1dca:	08 c1       	rjmp	.+528    	; 0x1fdc <Char_File_Generate+0x228>
	Image2Tz Status;
	while(Img_2_TZ_Flag)
	{
		if(Buffer_ID==CharBuffer1)
    1dcc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dce:	81 30       	cpi	r24, 0x01	; 1
    1dd0:	31 f4       	brne	.+12     	; 0x1dde <Char_File_Generate+0x2a>
		{
			Finger_Print_Send_Command(Img2TZ_1,IMAGE_2TZ_1_LENGTH);
    1dd2:	86 e5       	ldi	r24, 0x56	; 86
    1dd4:	91 e0       	ldi	r25, 0x01	; 1
    1dd6:	6d e0       	ldi	r22, 0x0D	; 13
    1dd8:	0e 94 a6 0c 	call	0x194c	; 0x194c <Finger_Print_Send_Command>
    1ddc:	08 c0       	rjmp	.+16     	; 0x1dee <Char_File_Generate+0x3a>
		}
		else if(Buffer_ID==CharBuffer2)
    1dde:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1de0:	82 30       	cpi	r24, 0x02	; 2
    1de2:	29 f4       	brne	.+10     	; 0x1dee <Char_File_Generate+0x3a>
		{
			Finger_Print_Send_Command(Img2TZ_2,IMAGE_2TZ_2_LENGTH);
    1de4:	83 e6       	ldi	r24, 0x63	; 99
    1de6:	91 e0       	ldi	r25, 0x01	; 1
    1de8:	6d e0       	ldi	r22, 0x0D	; 13
    1dea:	0e 94 a6 0c 	call	0x194c	; 0x194c <Finger_Print_Send_Command>
		}
		if(Buffer[Confirmation_Code]==Generate_character_file_complete)
    1dee:	80 91 77 02 	lds	r24, 0x0277
    1df2:	88 23       	and	r24, r24
    1df4:	09 f0       	breq	.+2      	; 0x1df8 <Char_File_Generate+0x44>
    1df6:	7e c0       	rjmp	.+252    	; 0x1ef4 <Char_File_Generate+0x140>
		{
			Status = Generate_character_file_complete;
    1df8:	1d 8e       	std	Y+29, r1	; 0x1d
			H_LCD_void_ClearDisplay();
    1dfa:	0e 94 ba 1a 	call	0x3574	; 0x3574 <H_LCD_void_ClearDisplay>
			H_LCD_void_sendString("Buffer done");
    1dfe:	8d e8       	ldi	r24, 0x8D	; 141
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	0e 94 80 19 	call	0x3300	; 0x3300 <H_LCD_void_sendString>
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	aa e7       	ldi	r26, 0x7A	; 122
    1e0c:	b4 e4       	ldi	r27, 0x44	; 68
    1e0e:	89 8f       	std	Y+25, r24	; 0x19
    1e10:	9a 8f       	std	Y+26, r25	; 0x1a
    1e12:	ab 8f       	std	Y+27, r26	; 0x1b
    1e14:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e16:	69 8d       	ldd	r22, Y+25	; 0x19
    1e18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	4a e7       	ldi	r20, 0x7A	; 122
    1e24:	55 e4       	ldi	r21, 0x45	; 69
    1e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	8d 8b       	std	Y+21, r24	; 0x15
    1e30:	9e 8b       	std	Y+22, r25	; 0x16
    1e32:	af 8b       	std	Y+23, r26	; 0x17
    1e34:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e36:	6d 89       	ldd	r22, Y+21	; 0x15
    1e38:	7e 89       	ldd	r23, Y+22	; 0x16
    1e3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	40 e8       	ldi	r20, 0x80	; 128
    1e44:	5f e3       	ldi	r21, 0x3F	; 63
    1e46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e4a:	88 23       	and	r24, r24
    1e4c:	2c f4       	brge	.+10     	; 0x1e58 <Char_File_Generate+0xa4>
		__ticks = 1;
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	9c 8b       	std	Y+20, r25	; 0x14
    1e54:	8b 8b       	std	Y+19, r24	; 0x13
    1e56:	3f c0       	rjmp	.+126    	; 0x1ed6 <Char_File_Generate+0x122>
	else if (__tmp > 65535)
    1e58:	6d 89       	ldd	r22, Y+21	; 0x15
    1e5a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e5e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	3f ef       	ldi	r19, 0xFF	; 255
    1e64:	4f e7       	ldi	r20, 0x7F	; 127
    1e66:	57 e4       	ldi	r21, 0x47	; 71
    1e68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e6c:	18 16       	cp	r1, r24
    1e6e:	4c f5       	brge	.+82     	; 0x1ec2 <Char_File_Generate+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e70:	69 8d       	ldd	r22, Y+25	; 0x19
    1e72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	40 e2       	ldi	r20, 0x20	; 32
    1e7e:	51 e4       	ldi	r21, 0x41	; 65
    1e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	bc 01       	movw	r22, r24
    1e8a:	cd 01       	movw	r24, r26
    1e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	9c 8b       	std	Y+20, r25	; 0x14
    1e96:	8b 8b       	std	Y+19, r24	; 0x13
    1e98:	0f c0       	rjmp	.+30     	; 0x1eb8 <Char_File_Generate+0x104>
    1e9a:	80 e9       	ldi	r24, 0x90	; 144
    1e9c:	91 e0       	ldi	r25, 0x01	; 1
    1e9e:	9a 8b       	std	Y+18, r25	; 0x12
    1ea0:	89 8b       	std	Y+17, r24	; 0x11
    1ea2:	89 89       	ldd	r24, Y+17	; 0x11
    1ea4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ea6:	01 97       	sbiw	r24, 0x01	; 1
    1ea8:	f1 f7       	brne	.-4      	; 0x1ea6 <Char_File_Generate+0xf2>
    1eaa:	9a 8b       	std	Y+18, r25	; 0x12
    1eac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eae:	8b 89       	ldd	r24, Y+19	; 0x13
    1eb0:	9c 89       	ldd	r25, Y+20	; 0x14
    1eb2:	01 97       	sbiw	r24, 0x01	; 1
    1eb4:	9c 8b       	std	Y+20, r25	; 0x14
    1eb6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb8:	8b 89       	ldd	r24, Y+19	; 0x13
    1eba:	9c 89       	ldd	r25, Y+20	; 0x14
    1ebc:	00 97       	sbiw	r24, 0x00	; 0
    1ebe:	69 f7       	brne	.-38     	; 0x1e9a <Char_File_Generate+0xe6>
    1ec0:	14 c0       	rjmp	.+40     	; 0x1eea <Char_File_Generate+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ec4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ec6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ec8:	98 8d       	ldd	r25, Y+24	; 0x18
    1eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	9c 8b       	std	Y+20, r25	; 0x14
    1ed4:	8b 8b       	std	Y+19, r24	; 0x13
    1ed6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eda:	98 8b       	std	Y+16, r25	; 0x10
    1edc:	8f 87       	std	Y+15, r24	; 0x0f
    1ede:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ee0:	98 89       	ldd	r25, Y+16	; 0x10
    1ee2:	01 97       	sbiw	r24, 0x01	; 1
    1ee4:	f1 f7       	brne	.-4      	; 0x1ee2 <Char_File_Generate+0x12e>
    1ee6:	98 8b       	std	Y+16, r25	; 0x10
    1ee8:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			Flush_Buffer();
    1eea:	0e 94 c1 14 	call	0x2982	; 0x2982 <Flush_Buffer>
			return Status;
    1eee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ef0:	8f 8f       	std	Y+31, r24	; 0x1f
    1ef2:	7b c0       	rjmp	.+246    	; 0x1fea <Char_File_Generate+0x236>
		}
		else
		{
			Flush_Buffer();
    1ef4:	0e 94 c1 14 	call	0x2982	; 0x2982 <Flush_Buffer>
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	aa e7       	ldi	r26, 0x7A	; 122
    1efe:	b3 e4       	ldi	r27, 0x43	; 67
    1f00:	8b 87       	std	Y+11, r24	; 0x0b
    1f02:	9c 87       	std	Y+12, r25	; 0x0c
    1f04:	ad 87       	std	Y+13, r26	; 0x0d
    1f06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	4a e7       	ldi	r20, 0x7A	; 122
    1f16:	55 e4       	ldi	r21, 0x45	; 69
    1f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	8f 83       	std	Y+7, r24	; 0x07
    1f22:	98 87       	std	Y+8, r25	; 0x08
    1f24:	a9 87       	std	Y+9, r26	; 0x09
    1f26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f28:	6f 81       	ldd	r22, Y+7	; 0x07
    1f2a:	78 85       	ldd	r23, Y+8	; 0x08
    1f2c:	89 85       	ldd	r24, Y+9	; 0x09
    1f2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 e8       	ldi	r20, 0x80	; 128
    1f36:	5f e3       	ldi	r21, 0x3F	; 63
    1f38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f3c:	88 23       	and	r24, r24
    1f3e:	2c f4       	brge	.+10     	; 0x1f4a <Char_File_Generate+0x196>
		__ticks = 1;
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	9e 83       	std	Y+6, r25	; 0x06
    1f46:	8d 83       	std	Y+5, r24	; 0x05
    1f48:	3f c0       	rjmp	.+126    	; 0x1fc8 <Char_File_Generate+0x214>
	else if (__tmp > 65535)
    1f4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4c:	78 85       	ldd	r23, Y+8	; 0x08
    1f4e:	89 85       	ldd	r24, Y+9	; 0x09
    1f50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	3f ef       	ldi	r19, 0xFF	; 255
    1f56:	4f e7       	ldi	r20, 0x7F	; 127
    1f58:	57 e4       	ldi	r21, 0x47	; 71
    1f5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f5e:	18 16       	cp	r1, r24
    1f60:	4c f5       	brge	.+82     	; 0x1fb4 <Char_File_Generate+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	40 e2       	ldi	r20, 0x20	; 32
    1f70:	51 e4       	ldi	r21, 0x41	; 65
    1f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	bc 01       	movw	r22, r24
    1f7c:	cd 01       	movw	r24, r26
    1f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	9e 83       	std	Y+6, r25	; 0x06
    1f88:	8d 83       	std	Y+5, r24	; 0x05
    1f8a:	0f c0       	rjmp	.+30     	; 0x1faa <Char_File_Generate+0x1f6>
    1f8c:	80 e9       	ldi	r24, 0x90	; 144
    1f8e:	91 e0       	ldi	r25, 0x01	; 1
    1f90:	9c 83       	std	Y+4, r25	; 0x04
    1f92:	8b 83       	std	Y+3, r24	; 0x03
    1f94:	8b 81       	ldd	r24, Y+3	; 0x03
    1f96:	9c 81       	ldd	r25, Y+4	; 0x04
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	f1 f7       	brne	.-4      	; 0x1f98 <Char_File_Generate+0x1e4>
    1f9c:	9c 83       	std	Y+4, r25	; 0x04
    1f9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	9e 83       	std	Y+6, r25	; 0x06
    1fa8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1faa:	8d 81       	ldd	r24, Y+5	; 0x05
    1fac:	9e 81       	ldd	r25, Y+6	; 0x06
    1fae:	00 97       	sbiw	r24, 0x00	; 0
    1fb0:	69 f7       	brne	.-38     	; 0x1f8c <Char_File_Generate+0x1d8>
    1fb2:	14 c0       	rjmp	.+40     	; 0x1fdc <Char_File_Generate+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb6:	78 85       	ldd	r23, Y+8	; 0x08
    1fb8:	89 85       	ldd	r24, Y+9	; 0x09
    1fba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	9e 83       	std	Y+6, r25	; 0x06
    1fc6:	8d 83       	std	Y+5, r24	; 0x05
    1fc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fca:	9e 81       	ldd	r25, Y+6	; 0x06
    1fcc:	9a 83       	std	Y+2, r25	; 0x02
    1fce:	89 83       	std	Y+1, r24	; 0x01
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	f1 f7       	brne	.-4      	; 0x1fd4 <Char_File_Generate+0x220>
    1fd8:	9a 83       	std	Y+2, r25	; 0x02
    1fda:	89 83       	std	Y+1, r24	; 0x01
	return Status;
}
Image2Tz  Char_File_Generate(u8 Buffer_ID)
{
	Image2Tz Status;
	while(Img_2_TZ_Flag)
    1fdc:	80 91 be 01 	lds	r24, 0x01BE
    1fe0:	88 23       	and	r24, r24
    1fe2:	09 f0       	breq	.+2      	; 0x1fe6 <Char_File_Generate+0x232>
    1fe4:	f3 ce       	rjmp	.-538    	; 0x1dcc <Char_File_Generate+0x18>
		{
			Flush_Buffer();
			_delay_ms(250);
		}
	}
	return Status;
    1fe6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fe8:	8f 8f       	std	Y+31, r24	; 0x1f
    1fea:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
    1fec:	6f 96       	adiw	r28, 0x1f	; 31
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	f8 94       	cli
    1ff2:	de bf       	out	0x3e, r29	; 62
    1ff4:	0f be       	out	0x3f, r0	; 63
    1ff6:	cd bf       	out	0x3d, r28	; 61
    1ff8:	cf 91       	pop	r28
    1ffa:	df 91       	pop	r29
    1ffc:	08 95       	ret

00001ffe <Generate_Template>:

REG_MODEL Generate_Template(void)
{
    1ffe:	df 93       	push	r29
    2000:	cf 93       	push	r28
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
    2006:	60 97       	sbiw	r28, 0x10	; 16
    2008:	0f b6       	in	r0, 0x3f	; 63
    200a:	f8 94       	cli
    200c:	de bf       	out	0x3e, r29	; 62
    200e:	0f be       	out	0x3f, r0	; 63
    2010:	cd bf       	out	0x3d, r28	; 61
    2012:	8a c0       	rjmp	.+276    	; 0x2128 <Generate_Template+0x12a>
	REG_MODEL Status;
	while(Reg_Model_Flag)
	{
		Finger_Print_Send_Command(Reg_Model,REG_MODEL_LENGTH);
    2014:	80 e7       	ldi	r24, 0x70	; 112
    2016:	91 e0       	ldi	r25, 0x01	; 1
    2018:	6c e0       	ldi	r22, 0x0C	; 12
    201a:	0e 94 a6 0c 	call	0x194c	; 0x194c <Finger_Print_Send_Command>
		if(Buffer[Confirmation_Code]==Operation_Sucess)
    201e:	80 91 77 02 	lds	r24, 0x0277
    2022:	88 23       	and	r24, r24
    2024:	09 f0       	breq	.+2      	; 0x2028 <Generate_Template+0x2a>
    2026:	7e c0       	rjmp	.+252    	; 0x2124 <Generate_Template+0x126>
		{
			Status=Operation_Sucess;
    2028:	1f 86       	std	Y+15, r1	; 0x0f
			H_LCD_void_ClearDisplay();
    202a:	0e 94 ba 1a 	call	0x3574	; 0x3574 <H_LCD_void_ClearDisplay>
			H_LCD_void_sendString("Register Model done");
    202e:	89 e9       	ldi	r24, 0x99	; 153
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	0e 94 80 19 	call	0x3300	; 0x3300 <H_LCD_void_sendString>
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	aa e7       	ldi	r26, 0x7A	; 122
    203c:	b4 e4       	ldi	r27, 0x44	; 68
    203e:	8b 87       	std	Y+11, r24	; 0x0b
    2040:	9c 87       	std	Y+12, r25	; 0x0c
    2042:	ad 87       	std	Y+13, r26	; 0x0d
    2044:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2046:	6b 85       	ldd	r22, Y+11	; 0x0b
    2048:	7c 85       	ldd	r23, Y+12	; 0x0c
    204a:	8d 85       	ldd	r24, Y+13	; 0x0d
    204c:	9e 85       	ldd	r25, Y+14	; 0x0e
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	4a e7       	ldi	r20, 0x7A	; 122
    2054:	55 e4       	ldi	r21, 0x45	; 69
    2056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	8f 83       	std	Y+7, r24	; 0x07
    2060:	98 87       	std	Y+8, r25	; 0x08
    2062:	a9 87       	std	Y+9, r26	; 0x09
    2064:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2066:	6f 81       	ldd	r22, Y+7	; 0x07
    2068:	78 85       	ldd	r23, Y+8	; 0x08
    206a:	89 85       	ldd	r24, Y+9	; 0x09
    206c:	9a 85       	ldd	r25, Y+10	; 0x0a
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	40 e8       	ldi	r20, 0x80	; 128
    2074:	5f e3       	ldi	r21, 0x3F	; 63
    2076:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    207a:	88 23       	and	r24, r24
    207c:	2c f4       	brge	.+10     	; 0x2088 <Generate_Template+0x8a>
		__ticks = 1;
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	9e 83       	std	Y+6, r25	; 0x06
    2084:	8d 83       	std	Y+5, r24	; 0x05
    2086:	3f c0       	rjmp	.+126    	; 0x2106 <Generate_Template+0x108>
	else if (__tmp > 65535)
    2088:	6f 81       	ldd	r22, Y+7	; 0x07
    208a:	78 85       	ldd	r23, Y+8	; 0x08
    208c:	89 85       	ldd	r24, Y+9	; 0x09
    208e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	3f ef       	ldi	r19, 0xFF	; 255
    2094:	4f e7       	ldi	r20, 0x7F	; 127
    2096:	57 e4       	ldi	r21, 0x47	; 71
    2098:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    209c:	18 16       	cp	r1, r24
    209e:	4c f5       	brge	.+82     	; 0x20f2 <Generate_Template+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	40 e2       	ldi	r20, 0x20	; 32
    20ae:	51 e4       	ldi	r21, 0x41	; 65
    20b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	bc 01       	movw	r22, r24
    20ba:	cd 01       	movw	r24, r26
    20bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	9e 83       	std	Y+6, r25	; 0x06
    20c6:	8d 83       	std	Y+5, r24	; 0x05
    20c8:	0f c0       	rjmp	.+30     	; 0x20e8 <Generate_Template+0xea>
    20ca:	80 e9       	ldi	r24, 0x90	; 144
    20cc:	91 e0       	ldi	r25, 0x01	; 1
    20ce:	9c 83       	std	Y+4, r25	; 0x04
    20d0:	8b 83       	std	Y+3, r24	; 0x03
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	9c 81       	ldd	r25, Y+4	; 0x04
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	f1 f7       	brne	.-4      	; 0x20d6 <Generate_Template+0xd8>
    20da:	9c 83       	std	Y+4, r25	; 0x04
    20dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20de:	8d 81       	ldd	r24, Y+5	; 0x05
    20e0:	9e 81       	ldd	r25, Y+6	; 0x06
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	9e 83       	std	Y+6, r25	; 0x06
    20e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ea:	9e 81       	ldd	r25, Y+6	; 0x06
    20ec:	00 97       	sbiw	r24, 0x00	; 0
    20ee:	69 f7       	brne	.-38     	; 0x20ca <Generate_Template+0xcc>
    20f0:	14 c0       	rjmp	.+40     	; 0x211a <Generate_Template+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f2:	6f 81       	ldd	r22, Y+7	; 0x07
    20f4:	78 85       	ldd	r23, Y+8	; 0x08
    20f6:	89 85       	ldd	r24, Y+9	; 0x09
    20f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	9e 83       	std	Y+6, r25	; 0x06
    2104:	8d 83       	std	Y+5, r24	; 0x05
    2106:	8d 81       	ldd	r24, Y+5	; 0x05
    2108:	9e 81       	ldd	r25, Y+6	; 0x06
    210a:	9a 83       	std	Y+2, r25	; 0x02
    210c:	89 83       	std	Y+1, r24	; 0x01
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	9a 81       	ldd	r25, Y+2	; 0x02
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	f1 f7       	brne	.-4      	; 0x2112 <Generate_Template+0x114>
    2116:	9a 83       	std	Y+2, r25	; 0x02
    2118:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			Flush_Buffer();
    211a:	0e 94 c1 14 	call	0x2982	; 0x2982 <Flush_Buffer>
			return Status;
    211e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2120:	88 8b       	std	Y+16, r24	; 0x10
    2122:	09 c0       	rjmp	.+18     	; 0x2136 <Generate_Template+0x138>
			break;
		}
		else
		{
			Flush_Buffer();
    2124:	0e 94 c1 14 	call	0x2982	; 0x2982 <Flush_Buffer>
}

REG_MODEL Generate_Template(void)
{
	REG_MODEL Status;
	while(Reg_Model_Flag)
    2128:	80 91 bf 01 	lds	r24, 0x01BF
    212c:	88 23       	and	r24, r24
    212e:	09 f0       	breq	.+2      	; 0x2132 <Generate_Template+0x134>
    2130:	71 cf       	rjmp	.-286    	; 0x2014 <Generate_Template+0x16>
		{
			Flush_Buffer();
		}
	}

	return Status;
    2132:	8f 85       	ldd	r24, Y+15	; 0x0f
    2134:	88 8b       	std	Y+16, r24	; 0x10
    2136:	88 89       	ldd	r24, Y+16	; 0x10
}
    2138:	60 96       	adiw	r28, 0x10	; 16
    213a:	0f b6       	in	r0, 0x3f	; 63
    213c:	f8 94       	cli
    213e:	de bf       	out	0x3e, r29	; 62
    2140:	0f be       	out	0x3f, r0	; 63
    2142:	cd bf       	out	0x3d, r28	; 61
    2144:	cf 91       	pop	r28
    2146:	df 91       	pop	r29
    2148:	08 95       	ret

0000214a <Store_Template>:
STORE_TEMP Store_Template(u8 Page_ID)
{
    214a:	df 93       	push	r29
    214c:	cf 93       	push	r28
    214e:	cd b7       	in	r28, 0x3d	; 61
    2150:	de b7       	in	r29, 0x3e	; 62
    2152:	61 97       	sbiw	r28, 0x11	; 17
    2154:	0f b6       	in	r0, 0x3f	; 63
    2156:	f8 94       	cli
    2158:	de bf       	out	0x3e, r29	; 62
    215a:	0f be       	out	0x3f, r0	; 63
    215c:	cd bf       	out	0x3d, r28	; 61
    215e:	88 8b       	std	Y+16, r24	; 0x10
    2160:	9c c0       	rjmp	.+312    	; 0x229a <Store_Template+0x150>
	STORE_TEMP Status;
	while(Store_Flag)
	{

		Check_Sum(Page_ID);
    2162:	88 89       	ldd	r24, Y+16	; 0x10
    2164:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <Check_Sum>
		Finger_Print_Send_Command(Store,STORE_LENGTH);
    2168:	8e ea       	ldi	r24, 0xAE	; 174
    216a:	91 e0       	ldi	r25, 0x01	; 1
    216c:	6f e0       	ldi	r22, 0x0F	; 15
    216e:	0e 94 a6 0c 	call	0x194c	; 0x194c <Finger_Print_Send_Command>
		H_LCD_void_ClearDisplay();
    2172:	0e 94 ba 1a 	call	0x3574	; 0x3574 <H_LCD_void_ClearDisplay>
		H_LCD_void_sendData('A');
    2176:	81 e4       	ldi	r24, 0x41	; 65
    2178:	0e 94 5e 19 	call	0x32bc	; 0x32bc <H_LCD_void_sendData>
		H_LCD_void_sendIntNum(Buffer[Confirmation_Code]);
    217c:	80 91 77 02 	lds	r24, 0x0277
    2180:	88 2f       	mov	r24, r24
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	a0 e0       	ldi	r26, 0x00	; 0
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	bc 01       	movw	r22, r24
    218a:	cd 01       	movw	r24, r26
    218c:	0e 94 a9 19 	call	0x3352	; 0x3352 <H_LCD_void_sendIntNum>
		if(Buffer[Confirmation_Code]==Storage_Success)
    2190:	80 91 77 02 	lds	r24, 0x0277
    2194:	88 23       	and	r24, r24
    2196:	09 f0       	breq	.+2      	; 0x219a <Store_Template+0x50>
    2198:	7e c0       	rjmp	.+252    	; 0x2296 <Store_Template+0x14c>
		{

			Status=Storage_Success;
    219a:	1f 86       	std	Y+15, r1	; 0x0f
			H_LCD_void_ClearDisplay();
    219c:	0e 94 ba 1a 	call	0x3574	; 0x3574 <H_LCD_void_ClearDisplay>
			H_LCD_void_sendString("Storing done");
    21a0:	8d ea       	ldi	r24, 0xAD	; 173
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	0e 94 80 19 	call	0x3300	; 0x3300 <H_LCD_void_sendString>
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	aa e7       	ldi	r26, 0x7A	; 122
    21ae:	b4 e4       	ldi	r27, 0x44	; 68
    21b0:	8b 87       	std	Y+11, r24	; 0x0b
    21b2:	9c 87       	std	Y+12, r25	; 0x0c
    21b4:	ad 87       	std	Y+13, r26	; 0x0d
    21b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    21bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    21be:	9e 85       	ldd	r25, Y+14	; 0x0e
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	4a e7       	ldi	r20, 0x7A	; 122
    21c6:	55 e4       	ldi	r21, 0x45	; 69
    21c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	8f 83       	std	Y+7, r24	; 0x07
    21d2:	98 87       	std	Y+8, r25	; 0x08
    21d4:	a9 87       	std	Y+9, r26	; 0x09
    21d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21d8:	6f 81       	ldd	r22, Y+7	; 0x07
    21da:	78 85       	ldd	r23, Y+8	; 0x08
    21dc:	89 85       	ldd	r24, Y+9	; 0x09
    21de:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	40 e8       	ldi	r20, 0x80	; 128
    21e6:	5f e3       	ldi	r21, 0x3F	; 63
    21e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21ec:	88 23       	and	r24, r24
    21ee:	2c f4       	brge	.+10     	; 0x21fa <Store_Template+0xb0>
		__ticks = 1;
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	9e 83       	std	Y+6, r25	; 0x06
    21f6:	8d 83       	std	Y+5, r24	; 0x05
    21f8:	3f c0       	rjmp	.+126    	; 0x2278 <Store_Template+0x12e>
	else if (__tmp > 65535)
    21fa:	6f 81       	ldd	r22, Y+7	; 0x07
    21fc:	78 85       	ldd	r23, Y+8	; 0x08
    21fe:	89 85       	ldd	r24, Y+9	; 0x09
    2200:	9a 85       	ldd	r25, Y+10	; 0x0a
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	3f ef       	ldi	r19, 0xFF	; 255
    2206:	4f e7       	ldi	r20, 0x7F	; 127
    2208:	57 e4       	ldi	r21, 0x47	; 71
    220a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    220e:	18 16       	cp	r1, r24
    2210:	4c f5       	brge	.+82     	; 0x2264 <Store_Template+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2212:	6b 85       	ldd	r22, Y+11	; 0x0b
    2214:	7c 85       	ldd	r23, Y+12	; 0x0c
    2216:	8d 85       	ldd	r24, Y+13	; 0x0d
    2218:	9e 85       	ldd	r25, Y+14	; 0x0e
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	40 e2       	ldi	r20, 0x20	; 32
    2220:	51 e4       	ldi	r21, 0x41	; 65
    2222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	bc 01       	movw	r22, r24
    222c:	cd 01       	movw	r24, r26
    222e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	9e 83       	std	Y+6, r25	; 0x06
    2238:	8d 83       	std	Y+5, r24	; 0x05
    223a:	0f c0       	rjmp	.+30     	; 0x225a <Store_Template+0x110>
    223c:	80 e9       	ldi	r24, 0x90	; 144
    223e:	91 e0       	ldi	r25, 0x01	; 1
    2240:	9c 83       	std	Y+4, r25	; 0x04
    2242:	8b 83       	std	Y+3, r24	; 0x03
    2244:	8b 81       	ldd	r24, Y+3	; 0x03
    2246:	9c 81       	ldd	r25, Y+4	; 0x04
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	f1 f7       	brne	.-4      	; 0x2248 <Store_Template+0xfe>
    224c:	9c 83       	std	Y+4, r25	; 0x04
    224e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2250:	8d 81       	ldd	r24, Y+5	; 0x05
    2252:	9e 81       	ldd	r25, Y+6	; 0x06
    2254:	01 97       	sbiw	r24, 0x01	; 1
    2256:	9e 83       	std	Y+6, r25	; 0x06
    2258:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    225a:	8d 81       	ldd	r24, Y+5	; 0x05
    225c:	9e 81       	ldd	r25, Y+6	; 0x06
    225e:	00 97       	sbiw	r24, 0x00	; 0
    2260:	69 f7       	brne	.-38     	; 0x223c <Store_Template+0xf2>
    2262:	14 c0       	rjmp	.+40     	; 0x228c <Store_Template+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2264:	6f 81       	ldd	r22, Y+7	; 0x07
    2266:	78 85       	ldd	r23, Y+8	; 0x08
    2268:	89 85       	ldd	r24, Y+9	; 0x09
    226a:	9a 85       	ldd	r25, Y+10	; 0x0a
    226c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	9e 83       	std	Y+6, r25	; 0x06
    2276:	8d 83       	std	Y+5, r24	; 0x05
    2278:	8d 81       	ldd	r24, Y+5	; 0x05
    227a:	9e 81       	ldd	r25, Y+6	; 0x06
    227c:	9a 83       	std	Y+2, r25	; 0x02
    227e:	89 83       	std	Y+1, r24	; 0x01
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	9a 81       	ldd	r25, Y+2	; 0x02
    2284:	01 97       	sbiw	r24, 0x01	; 1
    2286:	f1 f7       	brne	.-4      	; 0x2284 <Store_Template+0x13a>
    2288:	9a 83       	std	Y+2, r25	; 0x02
    228a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			Flush_Buffer();
    228c:	0e 94 c1 14 	call	0x2982	; 0x2982 <Flush_Buffer>
			return Status;
    2290:	8f 85       	ldd	r24, Y+15	; 0x0f
    2292:	89 8b       	std	Y+17, r24	; 0x11
    2294:	09 c0       	rjmp	.+18     	; 0x22a8 <Store_Template+0x15e>
			break;
		}
		else
		{
			Flush_Buffer();
    2296:	0e 94 c1 14 	call	0x2982	; 0x2982 <Flush_Buffer>
	return Status;
}
STORE_TEMP Store_Template(u8 Page_ID)
{
	STORE_TEMP Status;
	while(Store_Flag)
    229a:	80 91 c0 01 	lds	r24, 0x01C0
    229e:	88 23       	and	r24, r24
    22a0:	09 f0       	breq	.+2      	; 0x22a4 <Store_Template+0x15a>
    22a2:	5f cf       	rjmp	.-322    	; 0x2162 <Store_Template+0x18>
		{
			Flush_Buffer();
		}
	}

	return Status;
    22a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    22a6:	89 8b       	std	Y+17, r24	; 0x11
    22a8:	89 89       	ldd	r24, Y+17	; 0x11

}
    22aa:	61 96       	adiw	r28, 0x11	; 17
    22ac:	0f b6       	in	r0, 0x3f	; 63
    22ae:	f8 94       	cli
    22b0:	de bf       	out	0x3e, r29	; 62
    22b2:	0f be       	out	0x3f, r0	; 63
    22b4:	cd bf       	out	0x3d, r28	; 61
    22b6:	cf 91       	pop	r28
    22b8:	df 91       	pop	r29
    22ba:	08 95       	ret

000022bc <Search_For_Template>:
SEARCH_TEMP Search_For_Template(u8 *Page_ID)
{
    22bc:	df 93       	push	r29
    22be:	cf 93       	push	r28
    22c0:	cd b7       	in	r28, 0x3d	; 61
    22c2:	de b7       	in	r29, 0x3e	; 62
    22c4:	ec 97       	sbiw	r28, 0x3c	; 60
    22c6:	0f b6       	in	r0, 0x3f	; 63
    22c8:	f8 94       	cli
    22ca:	de bf       	out	0x3e, r29	; 62
    22cc:	0f be       	out	0x3f, r0	; 63
    22ce:	cd bf       	out	0x3d, r28	; 61
    22d0:	9b af       	std	Y+59, r25	; 0x3b
    22d2:	8a af       	std	Y+58, r24	; 0x3a
    22d4:	2e c2       	rjmp	.+1116   	; 0x2732 <Search_For_Template+0x476>
	SEARCH_TEMP Status;
	while(Search_Flag)
	{
		Finger_Print_Send_Command(Search,SEARCH_LENGTH);
    22d6:	8c e7       	ldi	r24, 0x7C	; 124
    22d8:	91 e0       	ldi	r25, 0x01	; 1
    22da:	61 e1       	ldi	r22, 0x11	; 17
    22dc:	0e 94 a6 0c 	call	0x194c	; 0x194c <Finger_Print_Send_Command>
		if(Buffer[Confirmation_Code]==Found_matching_finger)
    22e0:	80 91 77 02 	lds	r24, 0x0277
    22e4:	88 23       	and	r24, r24
    22e6:	09 f0       	breq	.+2      	; 0x22ea <Search_For_Template+0x2e>
    22e8:	a0 c1       	rjmp	.+832    	; 0x262a <Search_For_Template+0x36e>
		{
			Status=Found_matching_finger;
    22ea:	19 ae       	std	Y+57, r1	; 0x39
			H_LCD_void_ClearDisplay();
    22ec:	0e 94 ba 1a 	call	0x3574	; 0x3574 <H_LCD_void_ClearDisplay>
			H_LCD_void_sendString("FingerPrint Found");
    22f0:	8a eb       	ldi	r24, 0xBA	; 186
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	0e 94 80 19 	call	0x3300	; 0x3300 <H_LCD_void_sendString>
    22f8:	80 e0       	ldi	r24, 0x00	; 0
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	aa ef       	ldi	r26, 0xFA	; 250
    22fe:	b4 e4       	ldi	r27, 0x44	; 68
    2300:	8d ab       	std	Y+53, r24	; 0x35
    2302:	9e ab       	std	Y+54, r25	; 0x36
    2304:	af ab       	std	Y+55, r26	; 0x37
    2306:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2308:	6d a9       	ldd	r22, Y+53	; 0x35
    230a:	7e a9       	ldd	r23, Y+54	; 0x36
    230c:	8f a9       	ldd	r24, Y+55	; 0x37
    230e:	98 ad       	ldd	r25, Y+56	; 0x38
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	4a e7       	ldi	r20, 0x7A	; 122
    2316:	55 e4       	ldi	r21, 0x45	; 69
    2318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	89 ab       	std	Y+49, r24	; 0x31
    2322:	9a ab       	std	Y+50, r25	; 0x32
    2324:	ab ab       	std	Y+51, r26	; 0x33
    2326:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2328:	69 a9       	ldd	r22, Y+49	; 0x31
    232a:	7a a9       	ldd	r23, Y+50	; 0x32
    232c:	8b a9       	ldd	r24, Y+51	; 0x33
    232e:	9c a9       	ldd	r25, Y+52	; 0x34
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	40 e8       	ldi	r20, 0x80	; 128
    2336:	5f e3       	ldi	r21, 0x3F	; 63
    2338:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    233c:	88 23       	and	r24, r24
    233e:	2c f4       	brge	.+10     	; 0x234a <Search_For_Template+0x8e>
		__ticks = 1;
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	98 ab       	std	Y+48, r25	; 0x30
    2346:	8f a7       	std	Y+47, r24	; 0x2f
    2348:	3f c0       	rjmp	.+126    	; 0x23c8 <Search_For_Template+0x10c>
	else if (__tmp > 65535)
    234a:	69 a9       	ldd	r22, Y+49	; 0x31
    234c:	7a a9       	ldd	r23, Y+50	; 0x32
    234e:	8b a9       	ldd	r24, Y+51	; 0x33
    2350:	9c a9       	ldd	r25, Y+52	; 0x34
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	3f ef       	ldi	r19, 0xFF	; 255
    2356:	4f e7       	ldi	r20, 0x7F	; 127
    2358:	57 e4       	ldi	r21, 0x47	; 71
    235a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    235e:	18 16       	cp	r1, r24
    2360:	4c f5       	brge	.+82     	; 0x23b4 <Search_For_Template+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2362:	6d a9       	ldd	r22, Y+53	; 0x35
    2364:	7e a9       	ldd	r23, Y+54	; 0x36
    2366:	8f a9       	ldd	r24, Y+55	; 0x37
    2368:	98 ad       	ldd	r25, Y+56	; 0x38
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	40 e2       	ldi	r20, 0x20	; 32
    2370:	51 e4       	ldi	r21, 0x41	; 65
    2372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	bc 01       	movw	r22, r24
    237c:	cd 01       	movw	r24, r26
    237e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	98 ab       	std	Y+48, r25	; 0x30
    2388:	8f a7       	std	Y+47, r24	; 0x2f
    238a:	0f c0       	rjmp	.+30     	; 0x23aa <Search_For_Template+0xee>
    238c:	80 e9       	ldi	r24, 0x90	; 144
    238e:	91 e0       	ldi	r25, 0x01	; 1
    2390:	9e a7       	std	Y+46, r25	; 0x2e
    2392:	8d a7       	std	Y+45, r24	; 0x2d
    2394:	8d a5       	ldd	r24, Y+45	; 0x2d
    2396:	9e a5       	ldd	r25, Y+46	; 0x2e
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	f1 f7       	brne	.-4      	; 0x2398 <Search_For_Template+0xdc>
    239c:	9e a7       	std	Y+46, r25	; 0x2e
    239e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    23a2:	98 a9       	ldd	r25, Y+48	; 0x30
    23a4:	01 97       	sbiw	r24, 0x01	; 1
    23a6:	98 ab       	std	Y+48, r25	; 0x30
    23a8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    23ac:	98 a9       	ldd	r25, Y+48	; 0x30
    23ae:	00 97       	sbiw	r24, 0x00	; 0
    23b0:	69 f7       	brne	.-38     	; 0x238c <Search_For_Template+0xd0>
    23b2:	14 c0       	rjmp	.+40     	; 0x23dc <Search_For_Template+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b4:	69 a9       	ldd	r22, Y+49	; 0x31
    23b6:	7a a9       	ldd	r23, Y+50	; 0x32
    23b8:	8b a9       	ldd	r24, Y+51	; 0x33
    23ba:	9c a9       	ldd	r25, Y+52	; 0x34
    23bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	98 ab       	std	Y+48, r25	; 0x30
    23c6:	8f a7       	std	Y+47, r24	; 0x2f
    23c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    23ca:	98 a9       	ldd	r25, Y+48	; 0x30
    23cc:	9c a7       	std	Y+44, r25	; 0x2c
    23ce:	8b a7       	std	Y+43, r24	; 0x2b
    23d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    23d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    23d4:	01 97       	sbiw	r24, 0x01	; 1
    23d6:	f1 f7       	brne	.-4      	; 0x23d4 <Search_For_Template+0x118>
    23d8:	9c a7       	std	Y+44, r25	; 0x2c
    23da:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(2000);
			if(Buffer[PAGE_ID]==Nour_Template)
    23dc:	80 91 79 02 	lds	r24, 0x0279
    23e0:	81 30       	cpi	r24, 0x01	; 1
    23e2:	09 f0       	breq	.+2      	; 0x23e6 <Search_For_Template+0x12a>
    23e4:	7f c0       	rjmp	.+254    	; 0x24e4 <Search_For_Template+0x228>
			{
				*Page_ID=Nour_Template;
    23e6:	ea ad       	ldd	r30, Y+58	; 0x3a
    23e8:	fb ad       	ldd	r31, Y+59	; 0x3b
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	80 83       	st	Z, r24
				H_LCD_void_ClearDisplay();
    23ee:	0e 94 ba 1a 	call	0x3574	; 0x3574 <H_LCD_void_ClearDisplay>
				H_LCD_void_sendString("Welcome Nour");
    23f2:	8c ec       	ldi	r24, 0xCC	; 204
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	0e 94 80 19 	call	0x3300	; 0x3300 <H_LCD_void_sendString>
				Flush_Buffer();
    23fa:	0e 94 c1 14 	call	0x2982	; 0x2982 <Flush_Buffer>
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	aa ef       	ldi	r26, 0xFA	; 250
    2404:	b4 e4       	ldi	r27, 0x44	; 68
    2406:	8f a3       	std	Y+39, r24	; 0x27
    2408:	98 a7       	std	Y+40, r25	; 0x28
    240a:	a9 a7       	std	Y+41, r26	; 0x29
    240c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    240e:	6f a1       	ldd	r22, Y+39	; 0x27
    2410:	78 a5       	ldd	r23, Y+40	; 0x28
    2412:	89 a5       	ldd	r24, Y+41	; 0x29
    2414:	9a a5       	ldd	r25, Y+42	; 0x2a
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	4a e7       	ldi	r20, 0x7A	; 122
    241c:	55 e4       	ldi	r21, 0x45	; 69
    241e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	8b a3       	std	Y+35, r24	; 0x23
    2428:	9c a3       	std	Y+36, r25	; 0x24
    242a:	ad a3       	std	Y+37, r26	; 0x25
    242c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    242e:	6b a1       	ldd	r22, Y+35	; 0x23
    2430:	7c a1       	ldd	r23, Y+36	; 0x24
    2432:	8d a1       	ldd	r24, Y+37	; 0x25
    2434:	9e a1       	ldd	r25, Y+38	; 0x26
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	40 e8       	ldi	r20, 0x80	; 128
    243c:	5f e3       	ldi	r21, 0x3F	; 63
    243e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2442:	88 23       	and	r24, r24
    2444:	2c f4       	brge	.+10     	; 0x2450 <Search_For_Template+0x194>
		__ticks = 1;
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	9a a3       	std	Y+34, r25	; 0x22
    244c:	89 a3       	std	Y+33, r24	; 0x21
    244e:	3f c0       	rjmp	.+126    	; 0x24ce <Search_For_Template+0x212>
	else if (__tmp > 65535)
    2450:	6b a1       	ldd	r22, Y+35	; 0x23
    2452:	7c a1       	ldd	r23, Y+36	; 0x24
    2454:	8d a1       	ldd	r24, Y+37	; 0x25
    2456:	9e a1       	ldd	r25, Y+38	; 0x26
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	3f ef       	ldi	r19, 0xFF	; 255
    245c:	4f e7       	ldi	r20, 0x7F	; 127
    245e:	57 e4       	ldi	r21, 0x47	; 71
    2460:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2464:	18 16       	cp	r1, r24
    2466:	4c f5       	brge	.+82     	; 0x24ba <Search_For_Template+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2468:	6f a1       	ldd	r22, Y+39	; 0x27
    246a:	78 a5       	ldd	r23, Y+40	; 0x28
    246c:	89 a5       	ldd	r24, Y+41	; 0x29
    246e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 e2       	ldi	r20, 0x20	; 32
    2476:	51 e4       	ldi	r21, 0x41	; 65
    2478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	bc 01       	movw	r22, r24
    2482:	cd 01       	movw	r24, r26
    2484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	9a a3       	std	Y+34, r25	; 0x22
    248e:	89 a3       	std	Y+33, r24	; 0x21
    2490:	0f c0       	rjmp	.+30     	; 0x24b0 <Search_For_Template+0x1f4>
    2492:	80 e9       	ldi	r24, 0x90	; 144
    2494:	91 e0       	ldi	r25, 0x01	; 1
    2496:	98 a3       	std	Y+32, r25	; 0x20
    2498:	8f 8f       	std	Y+31, r24	; 0x1f
    249a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    249c:	98 a1       	ldd	r25, Y+32	; 0x20
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	f1 f7       	brne	.-4      	; 0x249e <Search_For_Template+0x1e2>
    24a2:	98 a3       	std	Y+32, r25	; 0x20
    24a4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a6:	89 a1       	ldd	r24, Y+33	; 0x21
    24a8:	9a a1       	ldd	r25, Y+34	; 0x22
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	9a a3       	std	Y+34, r25	; 0x22
    24ae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b0:	89 a1       	ldd	r24, Y+33	; 0x21
    24b2:	9a a1       	ldd	r25, Y+34	; 0x22
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	69 f7       	brne	.-38     	; 0x2492 <Search_For_Template+0x1d6>
    24b8:	43 c0       	rjmp	.+134    	; 0x2540 <Search_For_Template+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ba:	6b a1       	ldd	r22, Y+35	; 0x23
    24bc:	7c a1       	ldd	r23, Y+36	; 0x24
    24be:	8d a1       	ldd	r24, Y+37	; 0x25
    24c0:	9e a1       	ldd	r25, Y+38	; 0x26
    24c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	9a a3       	std	Y+34, r25	; 0x22
    24cc:	89 a3       	std	Y+33, r24	; 0x21
    24ce:	89 a1       	ldd	r24, Y+33	; 0x21
    24d0:	9a a1       	ldd	r25, Y+34	; 0x22
    24d2:	9e 8f       	std	Y+30, r25	; 0x1e
    24d4:	8d 8f       	std	Y+29, r24	; 0x1d
    24d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	f1 f7       	brne	.-4      	; 0x24da <Search_For_Template+0x21e>
    24de:	9e 8f       	std	Y+30, r25	; 0x1e
    24e0:	8d 8f       	std	Y+29, r24	; 0x1d
    24e2:	2e c0       	rjmp	.+92     	; 0x2540 <Search_For_Template+0x284>
				_delay_ms(2000);
			}
			else if(Buffer[PAGE_ID]==Zedan_Template)
    24e4:	80 91 79 02 	lds	r24, 0x0279
    24e8:	82 30       	cpi	r24, 0x02	; 2
    24ea:	69 f4       	brne	.+26     	; 0x2506 <Search_For_Template+0x24a>
			{
				*Page_ID=Zedan_Template;
    24ec:	ea ad       	ldd	r30, Y+58	; 0x3a
    24ee:	fb ad       	ldd	r31, Y+59	; 0x3b
    24f0:	82 e0       	ldi	r24, 0x02	; 2
    24f2:	80 83       	st	Z, r24
				H_LCD_void_ClearDisplay();
    24f4:	0e 94 ba 1a 	call	0x3574	; 0x3574 <H_LCD_void_ClearDisplay>
				H_LCD_void_sendString("Welcome Zedan");
    24f8:	89 ed       	ldi	r24, 0xD9	; 217
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	0e 94 80 19 	call	0x3300	; 0x3300 <H_LCD_void_sendString>
				Flush_Buffer();
    2500:	0e 94 c1 14 	call	0x2982	; 0x2982 <Flush_Buffer>
    2504:	1d c0       	rjmp	.+58     	; 0x2540 <Search_For_Template+0x284>
			}
			else if(Buffer[PAGE_ID]==Nomrosi_Template)
    2506:	80 91 79 02 	lds	r24, 0x0279
    250a:	83 30       	cpi	r24, 0x03	; 3
    250c:	69 f4       	brne	.+26     	; 0x2528 <Search_For_Template+0x26c>
			{
				*Page_ID=Nomrosi_Template;
    250e:	ea ad       	ldd	r30, Y+58	; 0x3a
    2510:	fb ad       	ldd	r31, Y+59	; 0x3b
    2512:	83 e0       	ldi	r24, 0x03	; 3
    2514:	80 83       	st	Z, r24
				H_LCD_void_ClearDisplay();
    2516:	0e 94 ba 1a 	call	0x3574	; 0x3574 <H_LCD_void_ClearDisplay>
				H_LCD_void_sendString("Welcome Nomrosi");
    251a:	87 ee       	ldi	r24, 0xE7	; 231
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	0e 94 80 19 	call	0x3300	; 0x3300 <H_LCD_void_sendString>
				Flush_Buffer();
    2522:	0e 94 c1 14 	call	0x2982	; 0x2982 <Flush_Buffer>
    2526:	0c c0       	rjmp	.+24     	; 0x2540 <Search_For_Template+0x284>
			}
			else
			{
				*Page_ID=NEW_USER_ID;
    2528:	ea ad       	ldd	r30, Y+58	; 0x3a
    252a:	fb ad       	ldd	r31, Y+59	; 0x3b
    252c:	84 e6       	ldi	r24, 0x64	; 100
    252e:	80 83       	st	Z, r24
				H_LCD_void_ClearDisplay();
    2530:	0e 94 ba 1a 	call	0x3574	; 0x3574 <H_LCD_void_ClearDisplay>
				H_LCD_void_sendString("New User");
    2534:	87 ef       	ldi	r24, 0xF7	; 247
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	0e 94 80 19 	call	0x3300	; 0x3300 <H_LCD_void_sendString>
				Flush_Buffer();
    253c:	0e 94 c1 14 	call	0x2982	; 0x2982 <Flush_Buffer>
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	aa e7       	ldi	r26, 0x7A	; 122
    2546:	b4 e4       	ldi	r27, 0x44	; 68
    2548:	89 8f       	std	Y+25, r24	; 0x19
    254a:	9a 8f       	std	Y+26, r25	; 0x1a
    254c:	ab 8f       	std	Y+27, r26	; 0x1b
    254e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2550:	69 8d       	ldd	r22, Y+25	; 0x19
    2552:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2554:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2556:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	4a e7       	ldi	r20, 0x7A	; 122
    255e:	55 e4       	ldi	r21, 0x45	; 69
    2560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	8d 8b       	std	Y+21, r24	; 0x15
    256a:	9e 8b       	std	Y+22, r25	; 0x16
    256c:	af 8b       	std	Y+23, r26	; 0x17
    256e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2570:	6d 89       	ldd	r22, Y+21	; 0x15
    2572:	7e 89       	ldd	r23, Y+22	; 0x16
    2574:	8f 89       	ldd	r24, Y+23	; 0x17
    2576:	98 8d       	ldd	r25, Y+24	; 0x18
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	40 e8       	ldi	r20, 0x80	; 128
    257e:	5f e3       	ldi	r21, 0x3F	; 63
    2580:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2584:	88 23       	and	r24, r24
    2586:	2c f4       	brge	.+10     	; 0x2592 <Search_For_Template+0x2d6>
		__ticks = 1;
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	9c 8b       	std	Y+20, r25	; 0x14
    258e:	8b 8b       	std	Y+19, r24	; 0x13
    2590:	3f c0       	rjmp	.+126    	; 0x2610 <Search_For_Template+0x354>
	else if (__tmp > 65535)
    2592:	6d 89       	ldd	r22, Y+21	; 0x15
    2594:	7e 89       	ldd	r23, Y+22	; 0x16
    2596:	8f 89       	ldd	r24, Y+23	; 0x17
    2598:	98 8d       	ldd	r25, Y+24	; 0x18
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	3f ef       	ldi	r19, 0xFF	; 255
    259e:	4f e7       	ldi	r20, 0x7F	; 127
    25a0:	57 e4       	ldi	r21, 0x47	; 71
    25a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25a6:	18 16       	cp	r1, r24
    25a8:	4c f5       	brge	.+82     	; 0x25fc <Search_For_Template+0x340>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25aa:	69 8d       	ldd	r22, Y+25	; 0x19
    25ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	40 e2       	ldi	r20, 0x20	; 32
    25b8:	51 e4       	ldi	r21, 0x41	; 65
    25ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	bc 01       	movw	r22, r24
    25c4:	cd 01       	movw	r24, r26
    25c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	9c 8b       	std	Y+20, r25	; 0x14
    25d0:	8b 8b       	std	Y+19, r24	; 0x13
    25d2:	0f c0       	rjmp	.+30     	; 0x25f2 <Search_For_Template+0x336>
    25d4:	80 e9       	ldi	r24, 0x90	; 144
    25d6:	91 e0       	ldi	r25, 0x01	; 1
    25d8:	9a 8b       	std	Y+18, r25	; 0x12
    25da:	89 8b       	std	Y+17, r24	; 0x11
    25dc:	89 89       	ldd	r24, Y+17	; 0x11
    25de:	9a 89       	ldd	r25, Y+18	; 0x12
    25e0:	01 97       	sbiw	r24, 0x01	; 1
    25e2:	f1 f7       	brne	.-4      	; 0x25e0 <Search_For_Template+0x324>
    25e4:	9a 8b       	std	Y+18, r25	; 0x12
    25e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e8:	8b 89       	ldd	r24, Y+19	; 0x13
    25ea:	9c 89       	ldd	r25, Y+20	; 0x14
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	9c 8b       	std	Y+20, r25	; 0x14
    25f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f2:	8b 89       	ldd	r24, Y+19	; 0x13
    25f4:	9c 89       	ldd	r25, Y+20	; 0x14
    25f6:	00 97       	sbiw	r24, 0x00	; 0
    25f8:	69 f7       	brne	.-38     	; 0x25d4 <Search_For_Template+0x318>
    25fa:	14 c0       	rjmp	.+40     	; 0x2624 <Search_For_Template+0x368>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25fc:	6d 89       	ldd	r22, Y+21	; 0x15
    25fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2600:	8f 89       	ldd	r24, Y+23	; 0x17
    2602:	98 8d       	ldd	r25, Y+24	; 0x18
    2604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	9c 8b       	std	Y+20, r25	; 0x14
    260e:	8b 8b       	std	Y+19, r24	; 0x13
    2610:	8b 89       	ldd	r24, Y+19	; 0x13
    2612:	9c 89       	ldd	r25, Y+20	; 0x14
    2614:	98 8b       	std	Y+16, r25	; 0x10
    2616:	8f 87       	std	Y+15, r24	; 0x0f
    2618:	8f 85       	ldd	r24, Y+15	; 0x0f
    261a:	98 89       	ldd	r25, Y+16	; 0x10
    261c:	01 97       	sbiw	r24, 0x01	; 1
    261e:	f1 f7       	brne	.-4      	; 0x261c <Search_For_Template+0x360>
    2620:	98 8b       	std	Y+16, r25	; 0x10
    2622:	8f 87       	std	Y+15, r24	; 0x0f
			}
			_delay_ms(1000);
			return Status;
    2624:	89 ad       	ldd	r24, Y+57	; 0x39
    2626:	8c af       	std	Y+60, r24	; 0x3c
    2628:	8b c0       	rjmp	.+278    	; 0x2740 <Search_For_Template+0x484>
			break;
		}
		else if(Buffer[Confirmation_Code]==No_matching_in_lib)
    262a:	80 91 77 02 	lds	r24, 0x0277
    262e:	89 30       	cpi	r24, 0x09	; 9
    2630:	09 f0       	breq	.+2      	; 0x2634 <Search_For_Template+0x378>
    2632:	7f c0       	rjmp	.+254    	; 0x2732 <Search_For_Template+0x476>
		{
			Status=No_matching_in_lib;
    2634:	89 e0       	ldi	r24, 0x09	; 9
    2636:	89 af       	std	Y+57, r24	; 0x39
			H_LCD_void_ClearDisplay();
    2638:	0e 94 ba 1a 	call	0x3574	; 0x3574 <H_LCD_void_ClearDisplay>
			H_LCD_void_sendString("No matching Found");
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	91 e0       	ldi	r25, 0x01	; 1
    2640:	0e 94 80 19 	call	0x3300	; 0x3300 <H_LCD_void_sendString>
			Flush_Buffer();
    2644:	0e 94 c1 14 	call	0x2982	; 0x2982 <Flush_Buffer>
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	aa e7       	ldi	r26, 0x7A	; 122
    264e:	b4 e4       	ldi	r27, 0x44	; 68
    2650:	8b 87       	std	Y+11, r24	; 0x0b
    2652:	9c 87       	std	Y+12, r25	; 0x0c
    2654:	ad 87       	std	Y+13, r26	; 0x0d
    2656:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2658:	6b 85       	ldd	r22, Y+11	; 0x0b
    265a:	7c 85       	ldd	r23, Y+12	; 0x0c
    265c:	8d 85       	ldd	r24, Y+13	; 0x0d
    265e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	4a e7       	ldi	r20, 0x7A	; 122
    2666:	55 e4       	ldi	r21, 0x45	; 69
    2668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	8f 83       	std	Y+7, r24	; 0x07
    2672:	98 87       	std	Y+8, r25	; 0x08
    2674:	a9 87       	std	Y+9, r26	; 0x09
    2676:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2678:	6f 81       	ldd	r22, Y+7	; 0x07
    267a:	78 85       	ldd	r23, Y+8	; 0x08
    267c:	89 85       	ldd	r24, Y+9	; 0x09
    267e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	40 e8       	ldi	r20, 0x80	; 128
    2686:	5f e3       	ldi	r21, 0x3F	; 63
    2688:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    268c:	88 23       	and	r24, r24
    268e:	2c f4       	brge	.+10     	; 0x269a <Search_For_Template+0x3de>
		__ticks = 1;
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	9e 83       	std	Y+6, r25	; 0x06
    2696:	8d 83       	std	Y+5, r24	; 0x05
    2698:	3f c0       	rjmp	.+126    	; 0x2718 <Search_For_Template+0x45c>
	else if (__tmp > 65535)
    269a:	6f 81       	ldd	r22, Y+7	; 0x07
    269c:	78 85       	ldd	r23, Y+8	; 0x08
    269e:	89 85       	ldd	r24, Y+9	; 0x09
    26a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	3f ef       	ldi	r19, 0xFF	; 255
    26a6:	4f e7       	ldi	r20, 0x7F	; 127
    26a8:	57 e4       	ldi	r21, 0x47	; 71
    26aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26ae:	18 16       	cp	r1, r24
    26b0:	4c f5       	brge	.+82     	; 0x2704 <Search_For_Template+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    26b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    26b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	40 e2       	ldi	r20, 0x20	; 32
    26c0:	51 e4       	ldi	r21, 0x41	; 65
    26c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	bc 01       	movw	r22, r24
    26cc:	cd 01       	movw	r24, r26
    26ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	9e 83       	std	Y+6, r25	; 0x06
    26d8:	8d 83       	std	Y+5, r24	; 0x05
    26da:	0f c0       	rjmp	.+30     	; 0x26fa <Search_For_Template+0x43e>
    26dc:	80 e9       	ldi	r24, 0x90	; 144
    26de:	91 e0       	ldi	r25, 0x01	; 1
    26e0:	9c 83       	std	Y+4, r25	; 0x04
    26e2:	8b 83       	std	Y+3, r24	; 0x03
    26e4:	8b 81       	ldd	r24, Y+3	; 0x03
    26e6:	9c 81       	ldd	r25, Y+4	; 0x04
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	f1 f7       	brne	.-4      	; 0x26e8 <Search_For_Template+0x42c>
    26ec:	9c 83       	std	Y+4, r25	; 0x04
    26ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f0:	8d 81       	ldd	r24, Y+5	; 0x05
    26f2:	9e 81       	ldd	r25, Y+6	; 0x06
    26f4:	01 97       	sbiw	r24, 0x01	; 1
    26f6:	9e 83       	std	Y+6, r25	; 0x06
    26f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26fa:	8d 81       	ldd	r24, Y+5	; 0x05
    26fc:	9e 81       	ldd	r25, Y+6	; 0x06
    26fe:	00 97       	sbiw	r24, 0x00	; 0
    2700:	69 f7       	brne	.-38     	; 0x26dc <Search_For_Template+0x420>
    2702:	14 c0       	rjmp	.+40     	; 0x272c <Search_For_Template+0x470>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2704:	6f 81       	ldd	r22, Y+7	; 0x07
    2706:	78 85       	ldd	r23, Y+8	; 0x08
    2708:	89 85       	ldd	r24, Y+9	; 0x09
    270a:	9a 85       	ldd	r25, Y+10	; 0x0a
    270c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	9e 83       	std	Y+6, r25	; 0x06
    2716:	8d 83       	std	Y+5, r24	; 0x05
    2718:	8d 81       	ldd	r24, Y+5	; 0x05
    271a:	9e 81       	ldd	r25, Y+6	; 0x06
    271c:	9a 83       	std	Y+2, r25	; 0x02
    271e:	89 83       	std	Y+1, r24	; 0x01
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	9a 81       	ldd	r25, Y+2	; 0x02
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	f1 f7       	brne	.-4      	; 0x2724 <Search_For_Template+0x468>
    2728:	9a 83       	std	Y+2, r25	; 0x02
    272a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			return Status;
    272c:	89 ad       	ldd	r24, Y+57	; 0x39
    272e:	8c af       	std	Y+60, r24	; 0x3c
    2730:	07 c0       	rjmp	.+14     	; 0x2740 <Search_For_Template+0x484>

}
SEARCH_TEMP Search_For_Template(u8 *Page_ID)
{
	SEARCH_TEMP Status;
	while(Search_Flag)
    2732:	80 91 c1 01 	lds	r24, 0x01C1
    2736:	88 23       	and	r24, r24
    2738:	09 f0       	breq	.+2      	; 0x273c <Search_For_Template+0x480>
    273a:	cd cd       	rjmp	.-1126   	; 0x22d6 <Search_For_Template+0x1a>
			return Status;
			break;
		}
	}

	return Status;
    273c:	89 ad       	ldd	r24, Y+57	; 0x39
    273e:	8c af       	std	Y+60, r24	; 0x3c
    2740:	8c ad       	ldd	r24, Y+60	; 0x3c
}
    2742:	ec 96       	adiw	r28, 0x3c	; 60
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	cd bf       	out	0x3d, r28	; 61
    274e:	cf 91       	pop	r28
    2750:	df 91       	pop	r29
    2752:	08 95       	ret

00002754 <Finger_Print_Empty_Templates>:
		}
	}
}
*/
void Finger_Print_Empty_Templates(void)
{
    2754:	df 93       	push	r29
    2756:	cf 93       	push	r28
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62
    275c:	6c 97       	sbiw	r28, 0x1c	; 28
    275e:	0f b6       	in	r0, 0x3f	; 63
    2760:	f8 94       	cli
    2762:	de bf       	out	0x3e, r29	; 62
    2764:	0f be       	out	0x3f, r0	; 63
    2766:	cd bf       	out	0x3d, r28	; 61
	Empty_Flag=1;
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	80 93 6d 02 	sts	0x026D, r24
    276e:	fb c0       	rjmp	.+502    	; 0x2966 <Finger_Print_Empty_Templates+0x212>
	while(Empty_Flag)
	{
		Finger_Print_Send_Command(Empty_Library,EMPTY_LIBRARY_LENGTH);
    2770:	8d e8       	ldi	r24, 0x8D	; 141
    2772:	91 e0       	ldi	r25, 0x01	; 1
    2774:	6c e0       	ldi	r22, 0x0C	; 12
    2776:	0e 94 a6 0c 	call	0x194c	; 0x194c <Finger_Print_Send_Command>
		if(Buffer[Confirmation_Code]==Empty_success)
    277a:	80 91 77 02 	lds	r24, 0x0277
    277e:	88 23       	and	r24, r24
    2780:	09 f0       	breq	.+2      	; 0x2784 <Finger_Print_Empty_Templates+0x30>
    2782:	7d c0       	rjmp	.+250    	; 0x287e <Finger_Print_Empty_Templates+0x12a>
		{
			H_LCD_void_ClearDisplay();
    2784:	0e 94 ba 1a 	call	0x3574	; 0x3574 <H_LCD_void_ClearDisplay>
			H_LCD_void_sendString("Template list empty");
    2788:	82 e1       	ldi	r24, 0x12	; 18
    278a:	91 e0       	ldi	r25, 0x01	; 1
    278c:	0e 94 80 19 	call	0x3300	; 0x3300 <H_LCD_void_sendString>
			Flush_Buffer();
    2790:	0e 94 c1 14 	call	0x2982	; 0x2982 <Flush_Buffer>
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	aa e7       	ldi	r26, 0x7A	; 122
    279a:	b4 e4       	ldi	r27, 0x44	; 68
    279c:	89 8f       	std	Y+25, r24	; 0x19
    279e:	9a 8f       	std	Y+26, r25	; 0x1a
    27a0:	ab 8f       	std	Y+27, r26	; 0x1b
    27a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27a4:	69 8d       	ldd	r22, Y+25	; 0x19
    27a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	4a e7       	ldi	r20, 0x7A	; 122
    27b2:	55 e4       	ldi	r21, 0x45	; 69
    27b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	8d 8b       	std	Y+21, r24	; 0x15
    27be:	9e 8b       	std	Y+22, r25	; 0x16
    27c0:	af 8b       	std	Y+23, r26	; 0x17
    27c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27c4:	6d 89       	ldd	r22, Y+21	; 0x15
    27c6:	7e 89       	ldd	r23, Y+22	; 0x16
    27c8:	8f 89       	ldd	r24, Y+23	; 0x17
    27ca:	98 8d       	ldd	r25, Y+24	; 0x18
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	40 e8       	ldi	r20, 0x80	; 128
    27d2:	5f e3       	ldi	r21, 0x3F	; 63
    27d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27d8:	88 23       	and	r24, r24
    27da:	2c f4       	brge	.+10     	; 0x27e6 <Finger_Print_Empty_Templates+0x92>
		__ticks = 1;
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	9c 8b       	std	Y+20, r25	; 0x14
    27e2:	8b 8b       	std	Y+19, r24	; 0x13
    27e4:	3f c0       	rjmp	.+126    	; 0x2864 <Finger_Print_Empty_Templates+0x110>
	else if (__tmp > 65535)
    27e6:	6d 89       	ldd	r22, Y+21	; 0x15
    27e8:	7e 89       	ldd	r23, Y+22	; 0x16
    27ea:	8f 89       	ldd	r24, Y+23	; 0x17
    27ec:	98 8d       	ldd	r25, Y+24	; 0x18
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	3f ef       	ldi	r19, 0xFF	; 255
    27f2:	4f e7       	ldi	r20, 0x7F	; 127
    27f4:	57 e4       	ldi	r21, 0x47	; 71
    27f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27fa:	18 16       	cp	r1, r24
    27fc:	4c f5       	brge	.+82     	; 0x2850 <Finger_Print_Empty_Templates+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2800:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2802:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2804:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	40 e2       	ldi	r20, 0x20	; 32
    280c:	51 e4       	ldi	r21, 0x41	; 65
    280e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	bc 01       	movw	r22, r24
    2818:	cd 01       	movw	r24, r26
    281a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	9c 8b       	std	Y+20, r25	; 0x14
    2824:	8b 8b       	std	Y+19, r24	; 0x13
    2826:	0f c0       	rjmp	.+30     	; 0x2846 <Finger_Print_Empty_Templates+0xf2>
    2828:	80 e9       	ldi	r24, 0x90	; 144
    282a:	91 e0       	ldi	r25, 0x01	; 1
    282c:	9a 8b       	std	Y+18, r25	; 0x12
    282e:	89 8b       	std	Y+17, r24	; 0x11
    2830:	89 89       	ldd	r24, Y+17	; 0x11
    2832:	9a 89       	ldd	r25, Y+18	; 0x12
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	f1 f7       	brne	.-4      	; 0x2834 <Finger_Print_Empty_Templates+0xe0>
    2838:	9a 8b       	std	Y+18, r25	; 0x12
    283a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    283c:	8b 89       	ldd	r24, Y+19	; 0x13
    283e:	9c 89       	ldd	r25, Y+20	; 0x14
    2840:	01 97       	sbiw	r24, 0x01	; 1
    2842:	9c 8b       	std	Y+20, r25	; 0x14
    2844:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2846:	8b 89       	ldd	r24, Y+19	; 0x13
    2848:	9c 89       	ldd	r25, Y+20	; 0x14
    284a:	00 97       	sbiw	r24, 0x00	; 0
    284c:	69 f7       	brne	.-38     	; 0x2828 <Finger_Print_Empty_Templates+0xd4>
    284e:	14 c0       	rjmp	.+40     	; 0x2878 <Finger_Print_Empty_Templates+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2850:	6d 89       	ldd	r22, Y+21	; 0x15
    2852:	7e 89       	ldd	r23, Y+22	; 0x16
    2854:	8f 89       	ldd	r24, Y+23	; 0x17
    2856:	98 8d       	ldd	r25, Y+24	; 0x18
    2858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	9c 8b       	std	Y+20, r25	; 0x14
    2862:	8b 8b       	std	Y+19, r24	; 0x13
    2864:	8b 89       	ldd	r24, Y+19	; 0x13
    2866:	9c 89       	ldd	r25, Y+20	; 0x14
    2868:	98 8b       	std	Y+16, r25	; 0x10
    286a:	8f 87       	std	Y+15, r24	; 0x0f
    286c:	8f 85       	ldd	r24, Y+15	; 0x0f
    286e:	98 89       	ldd	r25, Y+16	; 0x10
    2870:	01 97       	sbiw	r24, 0x01	; 1
    2872:	f1 f7       	brne	.-4      	; 0x2870 <Finger_Print_Empty_Templates+0x11c>
    2874:	98 8b       	std	Y+16, r25	; 0x10
    2876:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			Empty_Flag=0;
    2878:	10 92 6d 02 	sts	0x026D, r1
    287c:	74 c0       	rjmp	.+232    	; 0x2966 <Finger_Print_Empty_Templates+0x212>
		}
		else
		{
			Flush_Buffer();
    287e:	0e 94 c1 14 	call	0x2982	; 0x2982 <Flush_Buffer>
    2882:	80 e0       	ldi	r24, 0x00	; 0
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	aa ef       	ldi	r26, 0xFA	; 250
    2888:	b3 e4       	ldi	r27, 0x43	; 67
    288a:	8b 87       	std	Y+11, r24	; 0x0b
    288c:	9c 87       	std	Y+12, r25	; 0x0c
    288e:	ad 87       	std	Y+13, r26	; 0x0d
    2890:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2892:	6b 85       	ldd	r22, Y+11	; 0x0b
    2894:	7c 85       	ldd	r23, Y+12	; 0x0c
    2896:	8d 85       	ldd	r24, Y+13	; 0x0d
    2898:	9e 85       	ldd	r25, Y+14	; 0x0e
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	4a e7       	ldi	r20, 0x7A	; 122
    28a0:	55 e4       	ldi	r21, 0x45	; 69
    28a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	8f 83       	std	Y+7, r24	; 0x07
    28ac:	98 87       	std	Y+8, r25	; 0x08
    28ae:	a9 87       	std	Y+9, r26	; 0x09
    28b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28b2:	6f 81       	ldd	r22, Y+7	; 0x07
    28b4:	78 85       	ldd	r23, Y+8	; 0x08
    28b6:	89 85       	ldd	r24, Y+9	; 0x09
    28b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	40 e8       	ldi	r20, 0x80	; 128
    28c0:	5f e3       	ldi	r21, 0x3F	; 63
    28c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28c6:	88 23       	and	r24, r24
    28c8:	2c f4       	brge	.+10     	; 0x28d4 <Finger_Print_Empty_Templates+0x180>
		__ticks = 1;
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	9e 83       	std	Y+6, r25	; 0x06
    28d0:	8d 83       	std	Y+5, r24	; 0x05
    28d2:	3f c0       	rjmp	.+126    	; 0x2952 <Finger_Print_Empty_Templates+0x1fe>
	else if (__tmp > 65535)
    28d4:	6f 81       	ldd	r22, Y+7	; 0x07
    28d6:	78 85       	ldd	r23, Y+8	; 0x08
    28d8:	89 85       	ldd	r24, Y+9	; 0x09
    28da:	9a 85       	ldd	r25, Y+10	; 0x0a
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	3f ef       	ldi	r19, 0xFF	; 255
    28e0:	4f e7       	ldi	r20, 0x7F	; 127
    28e2:	57 e4       	ldi	r21, 0x47	; 71
    28e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28e8:	18 16       	cp	r1, r24
    28ea:	4c f5       	brge	.+82     	; 0x293e <Finger_Print_Empty_Templates+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    28f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	40 e2       	ldi	r20, 0x20	; 32
    28fa:	51 e4       	ldi	r21, 0x41	; 65
    28fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	bc 01       	movw	r22, r24
    2906:	cd 01       	movw	r24, r26
    2908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	9e 83       	std	Y+6, r25	; 0x06
    2912:	8d 83       	std	Y+5, r24	; 0x05
    2914:	0f c0       	rjmp	.+30     	; 0x2934 <Finger_Print_Empty_Templates+0x1e0>
    2916:	80 e9       	ldi	r24, 0x90	; 144
    2918:	91 e0       	ldi	r25, 0x01	; 1
    291a:	9c 83       	std	Y+4, r25	; 0x04
    291c:	8b 83       	std	Y+3, r24	; 0x03
    291e:	8b 81       	ldd	r24, Y+3	; 0x03
    2920:	9c 81       	ldd	r25, Y+4	; 0x04
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	f1 f7       	brne	.-4      	; 0x2922 <Finger_Print_Empty_Templates+0x1ce>
    2926:	9c 83       	std	Y+4, r25	; 0x04
    2928:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    292a:	8d 81       	ldd	r24, Y+5	; 0x05
    292c:	9e 81       	ldd	r25, Y+6	; 0x06
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	9e 83       	std	Y+6, r25	; 0x06
    2932:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2934:	8d 81       	ldd	r24, Y+5	; 0x05
    2936:	9e 81       	ldd	r25, Y+6	; 0x06
    2938:	00 97       	sbiw	r24, 0x00	; 0
    293a:	69 f7       	brne	.-38     	; 0x2916 <Finger_Print_Empty_Templates+0x1c2>
    293c:	14 c0       	rjmp	.+40     	; 0x2966 <Finger_Print_Empty_Templates+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    293e:	6f 81       	ldd	r22, Y+7	; 0x07
    2940:	78 85       	ldd	r23, Y+8	; 0x08
    2942:	89 85       	ldd	r24, Y+9	; 0x09
    2944:	9a 85       	ldd	r25, Y+10	; 0x0a
    2946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294a:	dc 01       	movw	r26, r24
    294c:	cb 01       	movw	r24, r22
    294e:	9e 83       	std	Y+6, r25	; 0x06
    2950:	8d 83       	std	Y+5, r24	; 0x05
    2952:	8d 81       	ldd	r24, Y+5	; 0x05
    2954:	9e 81       	ldd	r25, Y+6	; 0x06
    2956:	9a 83       	std	Y+2, r25	; 0x02
    2958:	89 83       	std	Y+1, r24	; 0x01
    295a:	89 81       	ldd	r24, Y+1	; 0x01
    295c:	9a 81       	ldd	r25, Y+2	; 0x02
    295e:	01 97       	sbiw	r24, 0x01	; 1
    2960:	f1 f7       	brne	.-4      	; 0x295e <Finger_Print_Empty_Templates+0x20a>
    2962:	9a 83       	std	Y+2, r25	; 0x02
    2964:	89 83       	std	Y+1, r24	; 0x01
}
*/
void Finger_Print_Empty_Templates(void)
{
	Empty_Flag=1;
	while(Empty_Flag)
    2966:	80 91 6d 02 	lds	r24, 0x026D
    296a:	88 23       	and	r24, r24
    296c:	09 f0       	breq	.+2      	; 0x2970 <Finger_Print_Empty_Templates+0x21c>
    296e:	00 cf       	rjmp	.-512    	; 0x2770 <Finger_Print_Empty_Templates+0x1c>
			Flush_Buffer();
			_delay_ms(500);
		}
	}

}
    2970:	6c 96       	adiw	r28, 0x1c	; 28
    2972:	0f b6       	in	r0, 0x3f	; 63
    2974:	f8 94       	cli
    2976:	de bf       	out	0x3e, r29	; 62
    2978:	0f be       	out	0x3f, r0	; 63
    297a:	cd bf       	out	0x3d, r28	; 61
    297c:	cf 91       	pop	r28
    297e:	df 91       	pop	r29
    2980:	08 95       	ret

00002982 <Flush_Buffer>:
void Flush_Buffer(void)
{
    2982:	df 93       	push	r29
    2984:	cf 93       	push	r28
    2986:	0f 92       	push	r0
    2988:	cd b7       	in	r28, 0x3d	; 61
    298a:	de b7       	in	r29, 0x3e	; 62
	Local_counter=0;
    298c:	10 92 6c 02 	sts	0x026C, r1
	for(u8 i=0;i<30;i++)
    2990:	19 82       	std	Y+1, r1	; 0x01
    2992:	0b c0       	rjmp	.+22     	; 0x29aa <Flush_Buffer+0x28>
	{
		Buffer[i]=0xAA;
    2994:	89 81       	ldd	r24, Y+1	; 0x01
    2996:	88 2f       	mov	r24, r24
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	fc 01       	movw	r30, r24
    299c:	e2 59       	subi	r30, 0x92	; 146
    299e:	fd 4f       	sbci	r31, 0xFD	; 253
    29a0:	8a ea       	ldi	r24, 0xAA	; 170
    29a2:	80 83       	st	Z, r24

}
void Flush_Buffer(void)
{
	Local_counter=0;
	for(u8 i=0;i<30;i++)
    29a4:	89 81       	ldd	r24, Y+1	; 0x01
    29a6:	8f 5f       	subi	r24, 0xFF	; 255
    29a8:	89 83       	std	Y+1, r24	; 0x01
    29aa:	89 81       	ldd	r24, Y+1	; 0x01
    29ac:	8e 31       	cpi	r24, 0x1E	; 30
    29ae:	90 f3       	brcs	.-28     	; 0x2994 <Flush_Buffer+0x12>
	{
		Buffer[i]=0xAA;
	}
}
    29b0:	0f 90       	pop	r0
    29b2:	cf 91       	pop	r28
    29b4:	df 91       	pop	r29
    29b6:	08 95       	ret

000029b8 <Check_Sum>:
void Check_Sum(u8 FB_ID)
{
    29b8:	df 93       	push	r29
    29ba:	cf 93       	push	r28
    29bc:	00 d0       	rcall	.+0      	; 0x29be <Check_Sum+0x6>
    29be:	0f 92       	push	r0
    29c0:	cd b7       	in	r28, 0x3d	; 61
    29c2:	de b7       	in	r29, 0x3e	; 62
    29c4:	8b 83       	std	Y+3, r24	; 0x03
	u8 Check_Sum_Value=0;
    29c6:	1a 82       	std	Y+2, r1	; 0x02
	u8 Counter=0;
    29c8:	19 82       	std	Y+1, r1	; 0x01
	Store[PAGE_ID_STORE]=FB_ID;
    29ca:	8b 81       	ldd	r24, Y+3	; 0x03
    29cc:	80 93 ba 01 	sts	0x01BA, r24
	for(Counter=Package_Identifier;Counter<STORE_LENGTH-2;Counter++)
    29d0:	86 e0       	ldi	r24, 0x06	; 6
    29d2:	89 83       	std	Y+1, r24	; 0x01
    29d4:	0d c0       	rjmp	.+26     	; 0x29f0 <Check_Sum+0x38>
	{
		Check_Sum_Value+=Store[Counter];
    29d6:	89 81       	ldd	r24, Y+1	; 0x01
    29d8:	88 2f       	mov	r24, r24
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	fc 01       	movw	r30, r24
    29de:	e2 55       	subi	r30, 0x52	; 82
    29e0:	fe 4f       	sbci	r31, 0xFE	; 254
    29e2:	90 81       	ld	r25, Z
    29e4:	8a 81       	ldd	r24, Y+2	; 0x02
    29e6:	89 0f       	add	r24, r25
    29e8:	8a 83       	std	Y+2, r24	; 0x02
void Check_Sum(u8 FB_ID)
{
	u8 Check_Sum_Value=0;
	u8 Counter=0;
	Store[PAGE_ID_STORE]=FB_ID;
	for(Counter=Package_Identifier;Counter<STORE_LENGTH-2;Counter++)
    29ea:	89 81       	ldd	r24, Y+1	; 0x01
    29ec:	8f 5f       	subi	r24, 0xFF	; 255
    29ee:	89 83       	std	Y+1, r24	; 0x01
    29f0:	89 81       	ldd	r24, Y+1	; 0x01
    29f2:	8d 30       	cpi	r24, 0x0D	; 13
    29f4:	80 f3       	brcs	.-32     	; 0x29d6 <Check_Sum+0x1e>
	{
		Check_Sum_Value+=Store[Counter];
	}
	Store[Check_Sum_byte]=Check_Sum_Value;
    29f6:	8a 81       	ldd	r24, Y+2	; 0x02
    29f8:	80 93 bc 01 	sts	0x01BC, r24
}
    29fc:	0f 90       	pop	r0
    29fe:	0f 90       	pop	r0
    2a00:	0f 90       	pop	r0
    2a02:	cf 91       	pop	r28
    2a04:	df 91       	pop	r29
    2a06:	08 95       	ret

00002a08 <Display_data>:

void Display_data(void)
{
    2a08:	0f 93       	push	r16
    2a0a:	1f 93       	push	r17
    2a0c:	df 93       	push	r29
    2a0e:	cf 93       	push	r28
    2a10:	cd b7       	in	r28, 0x3d	; 61
    2a12:	de b7       	in	r29, 0x3e	; 62
	Buffer[Local_counter]=UART_RecieveByteASynchCallback();
    2a14:	80 91 6c 02 	lds	r24, 0x026C
    2a18:	08 2f       	mov	r16, r24
    2a1a:	10 e0       	ldi	r17, 0x00	; 0
    2a1c:	0e 94 0d 07 	call	0xe1a	; 0xe1a <UART_RecieveByteASynchCallback>
    2a20:	f8 01       	movw	r30, r16
    2a22:	e2 59       	subi	r30, 0x92	; 146
    2a24:	fd 4f       	sbci	r31, 0xFD	; 253
    2a26:	80 83       	st	Z, r24
	//H_LCD_void_sendIntNum(Buffer[Local_counter]);
	Local_counter++;
    2a28:	80 91 6c 02 	lds	r24, 0x026C
    2a2c:	8f 5f       	subi	r24, 0xFF	; 255
    2a2e:	80 93 6c 02 	sts	0x026C, r24
}
    2a32:	cf 91       	pop	r28
    2a34:	df 91       	pop	r29
    2a36:	1f 91       	pop	r17
    2a38:	0f 91       	pop	r16
    2a3a:	08 95       	ret

00002a3c <H_LCD_void_latchByte>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
    2a3c:	df 93       	push	r29
    2a3e:	cf 93       	push	r28
    2a40:	cd b7       	in	r28, 0x3d	; 61
    2a42:	de b7       	in	r29, 0x3e	; 62
    2a44:	ab 97       	sbiw	r28, 0x2b	; 43
    2a46:	0f b6       	in	r0, 0x3f	; 63
    2a48:	f8 94       	cli
    2a4a:	de bf       	out	0x3e, r29	; 62
    2a4c:	0f be       	out	0x3f, r0	; 63
    2a4e:	cd bf       	out	0x3d, r28	; 61
    2a50:	8b a7       	std	Y+43, r24	; 0x2b
#if(LCD_MODE == _4_BIT_MODE)
	//enable = zero
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
    2a52:	8c e0       	ldi	r24, 0x0C	; 12
    2a54:	60 e0       	ldi	r22, 0x00	; 0
    2a56:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_D4,GET_BIT(copy_u8Byte,4));
    2a5a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a5c:	82 95       	swap	r24
    2a5e:	8f 70       	andi	r24, 0x0F	; 15
    2a60:	98 2f       	mov	r25, r24
    2a62:	91 70       	andi	r25, 0x01	; 1
    2a64:	84 e1       	ldi	r24, 0x14	; 20
    2a66:	69 2f       	mov	r22, r25
    2a68:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D5,GET_BIT(copy_u8Byte,5));
    2a6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a6e:	82 95       	swap	r24
    2a70:	86 95       	lsr	r24
    2a72:	87 70       	andi	r24, 0x07	; 7
    2a74:	98 2f       	mov	r25, r24
    2a76:	91 70       	andi	r25, 0x01	; 1
    2a78:	85 e1       	ldi	r24, 0x15	; 21
    2a7a:	69 2f       	mov	r22, r25
    2a7c:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D6,GET_BIT(copy_u8Byte,6));
    2a80:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a82:	82 95       	swap	r24
    2a84:	86 95       	lsr	r24
    2a86:	86 95       	lsr	r24
    2a88:	83 70       	andi	r24, 0x03	; 3
    2a8a:	98 2f       	mov	r25, r24
    2a8c:	91 70       	andi	r25, 0x01	; 1
    2a8e:	86 e1       	ldi	r24, 0x16	; 22
    2a90:	69 2f       	mov	r22, r25
    2a92:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D7,GET_BIT(copy_u8Byte,7));
    2a96:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a98:	98 2f       	mov	r25, r24
    2a9a:	99 1f       	adc	r25, r25
    2a9c:	99 27       	eor	r25, r25
    2a9e:	99 1f       	adc	r25, r25
    2aa0:	88 e1       	ldi	r24, 0x18	; 24
    2aa2:	69 2f       	mov	r22, r25
    2aa4:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_HIGH);
    2aa8:	8c e0       	ldi	r24, 0x0C	; 12
    2aaa:	61 e0       	ldi	r22, 0x01	; 1
    2aac:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <M_Dio_void_setPinValue>
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	a0 e8       	ldi	r26, 0x80	; 128
    2ab6:	bf e3       	ldi	r27, 0x3F	; 63
    2ab8:	8f a3       	std	Y+39, r24	; 0x27
    2aba:	98 a7       	std	Y+40, r25	; 0x28
    2abc:	a9 a7       	std	Y+41, r26	; 0x29
    2abe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ac0:	6f a1       	ldd	r22, Y+39	; 0x27
    2ac2:	78 a5       	ldd	r23, Y+40	; 0x28
    2ac4:	89 a5       	ldd	r24, Y+41	; 0x29
    2ac6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	4a e7       	ldi	r20, 0x7A	; 122
    2ace:	55 e4       	ldi	r21, 0x45	; 69
    2ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	8b a3       	std	Y+35, r24	; 0x23
    2ada:	9c a3       	std	Y+36, r25	; 0x24
    2adc:	ad a3       	std	Y+37, r26	; 0x25
    2ade:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ae0:	6b a1       	ldd	r22, Y+35	; 0x23
    2ae2:	7c a1       	ldd	r23, Y+36	; 0x24
    2ae4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ae6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ae8:	20 e0       	ldi	r18, 0x00	; 0
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	40 e8       	ldi	r20, 0x80	; 128
    2aee:	5f e3       	ldi	r21, 0x3F	; 63
    2af0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2af4:	88 23       	and	r24, r24
    2af6:	2c f4       	brge	.+10     	; 0x2b02 <H_LCD_void_latchByte+0xc6>
		__ticks = 1;
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	9a a3       	std	Y+34, r25	; 0x22
    2afe:	89 a3       	std	Y+33, r24	; 0x21
    2b00:	3f c0       	rjmp	.+126    	; 0x2b80 <H_LCD_void_latchByte+0x144>
	else if (__tmp > 65535)
    2b02:	6b a1       	ldd	r22, Y+35	; 0x23
    2b04:	7c a1       	ldd	r23, Y+36	; 0x24
    2b06:	8d a1       	ldd	r24, Y+37	; 0x25
    2b08:	9e a1       	ldd	r25, Y+38	; 0x26
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	3f ef       	ldi	r19, 0xFF	; 255
    2b0e:	4f e7       	ldi	r20, 0x7F	; 127
    2b10:	57 e4       	ldi	r21, 0x47	; 71
    2b12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b16:	18 16       	cp	r1, r24
    2b18:	4c f5       	brge	.+82     	; 0x2b6c <H_LCD_void_latchByte+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b1a:	6f a1       	ldd	r22, Y+39	; 0x27
    2b1c:	78 a5       	ldd	r23, Y+40	; 0x28
    2b1e:	89 a5       	ldd	r24, Y+41	; 0x29
    2b20:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b22:	20 e0       	ldi	r18, 0x00	; 0
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	40 e2       	ldi	r20, 0x20	; 32
    2b28:	51 e4       	ldi	r21, 0x41	; 65
    2b2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2e:	dc 01       	movw	r26, r24
    2b30:	cb 01       	movw	r24, r22
    2b32:	bc 01       	movw	r22, r24
    2b34:	cd 01       	movw	r24, r26
    2b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	9a a3       	std	Y+34, r25	; 0x22
    2b40:	89 a3       	std	Y+33, r24	; 0x21
    2b42:	0f c0       	rjmp	.+30     	; 0x2b62 <H_LCD_void_latchByte+0x126>
    2b44:	80 e9       	ldi	r24, 0x90	; 144
    2b46:	91 e0       	ldi	r25, 0x01	; 1
    2b48:	98 a3       	std	Y+32, r25	; 0x20
    2b4a:	8f 8f       	std	Y+31, r24	; 0x1f
    2b4c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b4e:	98 a1       	ldd	r25, Y+32	; 0x20
    2b50:	01 97       	sbiw	r24, 0x01	; 1
    2b52:	f1 f7       	brne	.-4      	; 0x2b50 <H_LCD_void_latchByte+0x114>
    2b54:	98 a3       	std	Y+32, r25	; 0x20
    2b56:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b58:	89 a1       	ldd	r24, Y+33	; 0x21
    2b5a:	9a a1       	ldd	r25, Y+34	; 0x22
    2b5c:	01 97       	sbiw	r24, 0x01	; 1
    2b5e:	9a a3       	std	Y+34, r25	; 0x22
    2b60:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b62:	89 a1       	ldd	r24, Y+33	; 0x21
    2b64:	9a a1       	ldd	r25, Y+34	; 0x22
    2b66:	00 97       	sbiw	r24, 0x00	; 0
    2b68:	69 f7       	brne	.-38     	; 0x2b44 <H_LCD_void_latchByte+0x108>
    2b6a:	14 c0       	rjmp	.+40     	; 0x2b94 <H_LCD_void_latchByte+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b6c:	6b a1       	ldd	r22, Y+35	; 0x23
    2b6e:	7c a1       	ldd	r23, Y+36	; 0x24
    2b70:	8d a1       	ldd	r24, Y+37	; 0x25
    2b72:	9e a1       	ldd	r25, Y+38	; 0x26
    2b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	9a a3       	std	Y+34, r25	; 0x22
    2b7e:	89 a3       	std	Y+33, r24	; 0x21
    2b80:	89 a1       	ldd	r24, Y+33	; 0x21
    2b82:	9a a1       	ldd	r25, Y+34	; 0x22
    2b84:	9e 8f       	std	Y+30, r25	; 0x1e
    2b86:	8d 8f       	std	Y+29, r24	; 0x1d
    2b88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b8a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b8c:	01 97       	sbiw	r24, 0x01	; 1
    2b8e:	f1 f7       	brne	.-4      	; 0x2b8c <H_LCD_void_latchByte+0x150>
    2b90:	9e 8f       	std	Y+30, r25	; 0x1e
    2b92:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
    2b94:	8c e0       	ldi	r24, 0x0C	; 12
    2b96:	60 e0       	ldi	r22, 0x00	; 0
    2b98:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_D4,GET_BIT(copy_u8Byte,0));
    2b9c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b9e:	98 2f       	mov	r25, r24
    2ba0:	91 70       	andi	r25, 0x01	; 1
    2ba2:	84 e1       	ldi	r24, 0x14	; 20
    2ba4:	69 2f       	mov	r22, r25
    2ba6:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D5,GET_BIT(copy_u8Byte,1));
    2baa:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bac:	86 95       	lsr	r24
    2bae:	98 2f       	mov	r25, r24
    2bb0:	91 70       	andi	r25, 0x01	; 1
    2bb2:	85 e1       	ldi	r24, 0x15	; 21
    2bb4:	69 2f       	mov	r22, r25
    2bb6:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D6,GET_BIT(copy_u8Byte,2));
    2bba:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bbc:	86 95       	lsr	r24
    2bbe:	86 95       	lsr	r24
    2bc0:	98 2f       	mov	r25, r24
    2bc2:	91 70       	andi	r25, 0x01	; 1
    2bc4:	86 e1       	ldi	r24, 0x16	; 22
    2bc6:	69 2f       	mov	r22, r25
    2bc8:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D7,GET_BIT(copy_u8Byte,3));
    2bcc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bce:	86 95       	lsr	r24
    2bd0:	86 95       	lsr	r24
    2bd2:	86 95       	lsr	r24
    2bd4:	98 2f       	mov	r25, r24
    2bd6:	91 70       	andi	r25, 0x01	; 1
    2bd8:	88 e1       	ldi	r24, 0x18	; 24
    2bda:	69 2f       	mov	r22, r25
    2bdc:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_HIGH);
    2be0:	8c e0       	ldi	r24, 0x0C	; 12
    2be2:	61 e0       	ldi	r22, 0x01	; 1
    2be4:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <M_Dio_void_setPinValue>
    2be8:	80 e0       	ldi	r24, 0x00	; 0
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	a0 e8       	ldi	r26, 0x80	; 128
    2bee:	bf e3       	ldi	r27, 0x3F	; 63
    2bf0:	89 8f       	std	Y+25, r24	; 0x19
    2bf2:	9a 8f       	std	Y+26, r25	; 0x1a
    2bf4:	ab 8f       	std	Y+27, r26	; 0x1b
    2bf6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bf8:	69 8d       	ldd	r22, Y+25	; 0x19
    2bfa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c00:	20 e0       	ldi	r18, 0x00	; 0
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	4a e7       	ldi	r20, 0x7A	; 122
    2c06:	55 e4       	ldi	r21, 0x45	; 69
    2c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	8d 8b       	std	Y+21, r24	; 0x15
    2c12:	9e 8b       	std	Y+22, r25	; 0x16
    2c14:	af 8b       	std	Y+23, r26	; 0x17
    2c16:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c18:	6d 89       	ldd	r22, Y+21	; 0x15
    2c1a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c1c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c1e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	40 e8       	ldi	r20, 0x80	; 128
    2c26:	5f e3       	ldi	r21, 0x3F	; 63
    2c28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c2c:	88 23       	and	r24, r24
    2c2e:	2c f4       	brge	.+10     	; 0x2c3a <H_LCD_void_latchByte+0x1fe>
		__ticks = 1;
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	9c 8b       	std	Y+20, r25	; 0x14
    2c36:	8b 8b       	std	Y+19, r24	; 0x13
    2c38:	3f c0       	rjmp	.+126    	; 0x2cb8 <H_LCD_void_latchByte+0x27c>
	else if (__tmp > 65535)
    2c3a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c3c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c3e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c40:	98 8d       	ldd	r25, Y+24	; 0x18
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	3f ef       	ldi	r19, 0xFF	; 255
    2c46:	4f e7       	ldi	r20, 0x7F	; 127
    2c48:	57 e4       	ldi	r21, 0x47	; 71
    2c4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c4e:	18 16       	cp	r1, r24
    2c50:	4c f5       	brge	.+82     	; 0x2ca4 <H_LCD_void_latchByte+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c52:	69 8d       	ldd	r22, Y+25	; 0x19
    2c54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	40 e2       	ldi	r20, 0x20	; 32
    2c60:	51 e4       	ldi	r21, 0x41	; 65
    2c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c66:	dc 01       	movw	r26, r24
    2c68:	cb 01       	movw	r24, r22
    2c6a:	bc 01       	movw	r22, r24
    2c6c:	cd 01       	movw	r24, r26
    2c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c72:	dc 01       	movw	r26, r24
    2c74:	cb 01       	movw	r24, r22
    2c76:	9c 8b       	std	Y+20, r25	; 0x14
    2c78:	8b 8b       	std	Y+19, r24	; 0x13
    2c7a:	0f c0       	rjmp	.+30     	; 0x2c9a <H_LCD_void_latchByte+0x25e>
    2c7c:	80 e9       	ldi	r24, 0x90	; 144
    2c7e:	91 e0       	ldi	r25, 0x01	; 1
    2c80:	9a 8b       	std	Y+18, r25	; 0x12
    2c82:	89 8b       	std	Y+17, r24	; 0x11
    2c84:	89 89       	ldd	r24, Y+17	; 0x11
    2c86:	9a 89       	ldd	r25, Y+18	; 0x12
    2c88:	01 97       	sbiw	r24, 0x01	; 1
    2c8a:	f1 f7       	brne	.-4      	; 0x2c88 <H_LCD_void_latchByte+0x24c>
    2c8c:	9a 8b       	std	Y+18, r25	; 0x12
    2c8e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c90:	8b 89       	ldd	r24, Y+19	; 0x13
    2c92:	9c 89       	ldd	r25, Y+20	; 0x14
    2c94:	01 97       	sbiw	r24, 0x01	; 1
    2c96:	9c 8b       	std	Y+20, r25	; 0x14
    2c98:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c9a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c9c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c9e:	00 97       	sbiw	r24, 0x00	; 0
    2ca0:	69 f7       	brne	.-38     	; 0x2c7c <H_LCD_void_latchByte+0x240>
    2ca2:	14 c0       	rjmp	.+40     	; 0x2ccc <H_LCD_void_latchByte+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ca6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ca8:	8f 89       	ldd	r24, Y+23	; 0x17
    2caa:	98 8d       	ldd	r25, Y+24	; 0x18
    2cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	9c 8b       	std	Y+20, r25	; 0x14
    2cb6:	8b 8b       	std	Y+19, r24	; 0x13
    2cb8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cba:	9c 89       	ldd	r25, Y+20	; 0x14
    2cbc:	98 8b       	std	Y+16, r25	; 0x10
    2cbe:	8f 87       	std	Y+15, r24	; 0x0f
    2cc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cc2:	98 89       	ldd	r25, Y+16	; 0x10
    2cc4:	01 97       	sbiw	r24, 0x01	; 1
    2cc6:	f1 f7       	brne	.-4      	; 0x2cc4 <H_LCD_void_latchByte+0x288>
    2cc8:	98 8b       	std	Y+16, r25	; 0x10
    2cca:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
    2ccc:	8c e0       	ldi	r24, 0x0C	; 12
    2cce:	60 e0       	ldi	r22, 0x00	; 0
    2cd0:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <M_Dio_void_setPinValue>
    2cd4:	80 e0       	ldi	r24, 0x00	; 0
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	a0 ef       	ldi	r26, 0xF0	; 240
    2cda:	b1 e4       	ldi	r27, 0x41	; 65
    2cdc:	8b 87       	std	Y+11, r24	; 0x0b
    2cde:	9c 87       	std	Y+12, r25	; 0x0c
    2ce0:	ad 87       	std	Y+13, r26	; 0x0d
    2ce2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ce6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ce8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	4a e7       	ldi	r20, 0x7A	; 122
    2cf2:	55 e4       	ldi	r21, 0x45	; 69
    2cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	8f 83       	std	Y+7, r24	; 0x07
    2cfe:	98 87       	std	Y+8, r25	; 0x08
    2d00:	a9 87       	std	Y+9, r26	; 0x09
    2d02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d04:	6f 81       	ldd	r22, Y+7	; 0x07
    2d06:	78 85       	ldd	r23, Y+8	; 0x08
    2d08:	89 85       	ldd	r24, Y+9	; 0x09
    2d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	40 e8       	ldi	r20, 0x80	; 128
    2d12:	5f e3       	ldi	r21, 0x3F	; 63
    2d14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d18:	88 23       	and	r24, r24
    2d1a:	2c f4       	brge	.+10     	; 0x2d26 <H_LCD_void_latchByte+0x2ea>
		__ticks = 1;
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	9e 83       	std	Y+6, r25	; 0x06
    2d22:	8d 83       	std	Y+5, r24	; 0x05
    2d24:	3f c0       	rjmp	.+126    	; 0x2da4 <H_LCD_void_latchByte+0x368>
	else if (__tmp > 65535)
    2d26:	6f 81       	ldd	r22, Y+7	; 0x07
    2d28:	78 85       	ldd	r23, Y+8	; 0x08
    2d2a:	89 85       	ldd	r24, Y+9	; 0x09
    2d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	3f ef       	ldi	r19, 0xFF	; 255
    2d32:	4f e7       	ldi	r20, 0x7F	; 127
    2d34:	57 e4       	ldi	r21, 0x47	; 71
    2d36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d3a:	18 16       	cp	r1, r24
    2d3c:	4c f5       	brge	.+82     	; 0x2d90 <H_LCD_void_latchByte+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d40:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d44:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	40 e2       	ldi	r20, 0x20	; 32
    2d4c:	51 e4       	ldi	r21, 0x41	; 65
    2d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	bc 01       	movw	r22, r24
    2d58:	cd 01       	movw	r24, r26
    2d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	9e 83       	std	Y+6, r25	; 0x06
    2d64:	8d 83       	std	Y+5, r24	; 0x05
    2d66:	0f c0       	rjmp	.+30     	; 0x2d86 <H_LCD_void_latchByte+0x34a>
    2d68:	80 e9       	ldi	r24, 0x90	; 144
    2d6a:	91 e0       	ldi	r25, 0x01	; 1
    2d6c:	9c 83       	std	Y+4, r25	; 0x04
    2d6e:	8b 83       	std	Y+3, r24	; 0x03
    2d70:	8b 81       	ldd	r24, Y+3	; 0x03
    2d72:	9c 81       	ldd	r25, Y+4	; 0x04
    2d74:	01 97       	sbiw	r24, 0x01	; 1
    2d76:	f1 f7       	brne	.-4      	; 0x2d74 <H_LCD_void_latchByte+0x338>
    2d78:	9c 83       	std	Y+4, r25	; 0x04
    2d7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d80:	01 97       	sbiw	r24, 0x01	; 1
    2d82:	9e 83       	std	Y+6, r25	; 0x06
    2d84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d86:	8d 81       	ldd	r24, Y+5	; 0x05
    2d88:	9e 81       	ldd	r25, Y+6	; 0x06
    2d8a:	00 97       	sbiw	r24, 0x00	; 0
    2d8c:	69 f7       	brne	.-38     	; 0x2d68 <H_LCD_void_latchByte+0x32c>
    2d8e:	14 c0       	rjmp	.+40     	; 0x2db8 <H_LCD_void_latchByte+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d90:	6f 81       	ldd	r22, Y+7	; 0x07
    2d92:	78 85       	ldd	r23, Y+8	; 0x08
    2d94:	89 85       	ldd	r24, Y+9	; 0x09
    2d96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	9e 83       	std	Y+6, r25	; 0x06
    2da2:	8d 83       	std	Y+5, r24	; 0x05
    2da4:	8d 81       	ldd	r24, Y+5	; 0x05
    2da6:	9e 81       	ldd	r25, Y+6	; 0x06
    2da8:	9a 83       	std	Y+2, r25	; 0x02
    2daa:	89 83       	std	Y+1, r24	; 0x01
    2dac:	89 81       	ldd	r24, Y+1	; 0x01
    2dae:	9a 81       	ldd	r25, Y+2	; 0x02
    2db0:	01 97       	sbiw	r24, 0x01	; 1
    2db2:	f1 f7       	brne	.-4      	; 0x2db0 <H_LCD_void_latchByte+0x374>
    2db4:	9a 83       	std	Y+2, r25	; 0x02
    2db6:	89 83       	std	Y+1, r24	; 0x01
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
	_delay_ms(30);

#endif

}
    2db8:	ab 96       	adiw	r28, 0x2b	; 43
    2dba:	0f b6       	in	r0, 0x3f	; 63
    2dbc:	f8 94       	cli
    2dbe:	de bf       	out	0x3e, r29	; 62
    2dc0:	0f be       	out	0x3f, r0	; 63
    2dc2:	cd bf       	out	0x3d, r28	; 61
    2dc4:	cf 91       	pop	r28
    2dc6:	df 91       	pop	r29
    2dc8:	08 95       	ret

00002dca <H_LCD_void_Init>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_Init(void)
{
    2dca:	0f 93       	push	r16
    2dcc:	1f 93       	push	r17
    2dce:	df 93       	push	r29
    2dd0:	cf 93       	push	r28
    2dd2:	cd b7       	in	r28, 0x3d	; 61
    2dd4:	de b7       	in	r29, 0x3e	; 62
    2dd6:	c6 54       	subi	r28, 0x46	; 70
    2dd8:	d0 40       	sbci	r29, 0x00	; 0
    2dda:	0f b6       	in	r0, 0x3f	; 63
    2ddc:	f8 94       	cli
    2dde:	de bf       	out	0x3e, r29	; 62
    2de0:	0f be       	out	0x3f, r0	; 63
    2de2:	cd bf       	out	0x3d, r28	; 61
    2de4:	fe 01       	movw	r30, r28
    2de6:	ed 5b       	subi	r30, 0xBD	; 189
    2de8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dea:	80 e0       	ldi	r24, 0x00	; 0
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	a6 e1       	ldi	r26, 0x16	; 22
    2df0:	b3 e4       	ldi	r27, 0x43	; 67
    2df2:	80 83       	st	Z, r24
    2df4:	91 83       	std	Z+1, r25	; 0x01
    2df6:	a2 83       	std	Z+2, r26	; 0x02
    2df8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dfa:	8e 01       	movw	r16, r28
    2dfc:	01 5c       	subi	r16, 0xC1	; 193
    2dfe:	1f 4f       	sbci	r17, 0xFF	; 255
    2e00:	fe 01       	movw	r30, r28
    2e02:	ed 5b       	subi	r30, 0xBD	; 189
    2e04:	ff 4f       	sbci	r31, 0xFF	; 255
    2e06:	60 81       	ld	r22, Z
    2e08:	71 81       	ldd	r23, Z+1	; 0x01
    2e0a:	82 81       	ldd	r24, Z+2	; 0x02
    2e0c:	93 81       	ldd	r25, Z+3	; 0x03
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	4a e7       	ldi	r20, 0x7A	; 122
    2e14:	55 e4       	ldi	r21, 0x45	; 69
    2e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	f8 01       	movw	r30, r16
    2e20:	80 83       	st	Z, r24
    2e22:	91 83       	std	Z+1, r25	; 0x01
    2e24:	a2 83       	std	Z+2, r26	; 0x02
    2e26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e28:	fe 01       	movw	r30, r28
    2e2a:	ff 96       	adiw	r30, 0x3f	; 63
    2e2c:	60 81       	ld	r22, Z
    2e2e:	71 81       	ldd	r23, Z+1	; 0x01
    2e30:	82 81       	ldd	r24, Z+2	; 0x02
    2e32:	93 81       	ldd	r25, Z+3	; 0x03
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	40 e8       	ldi	r20, 0x80	; 128
    2e3a:	5f e3       	ldi	r21, 0x3F	; 63
    2e3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e40:	88 23       	and	r24, r24
    2e42:	2c f4       	brge	.+10     	; 0x2e4e <H_LCD_void_Init+0x84>
		__ticks = 1;
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	9e af       	std	Y+62, r25	; 0x3e
    2e4a:	8d af       	std	Y+61, r24	; 0x3d
    2e4c:	46 c0       	rjmp	.+140    	; 0x2eda <H_LCD_void_Init+0x110>
	else if (__tmp > 65535)
    2e4e:	fe 01       	movw	r30, r28
    2e50:	ff 96       	adiw	r30, 0x3f	; 63
    2e52:	60 81       	ld	r22, Z
    2e54:	71 81       	ldd	r23, Z+1	; 0x01
    2e56:	82 81       	ldd	r24, Z+2	; 0x02
    2e58:	93 81       	ldd	r25, Z+3	; 0x03
    2e5a:	20 e0       	ldi	r18, 0x00	; 0
    2e5c:	3f ef       	ldi	r19, 0xFF	; 255
    2e5e:	4f e7       	ldi	r20, 0x7F	; 127
    2e60:	57 e4       	ldi	r21, 0x47	; 71
    2e62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e66:	18 16       	cp	r1, r24
    2e68:	64 f5       	brge	.+88     	; 0x2ec2 <H_LCD_void_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e6a:	fe 01       	movw	r30, r28
    2e6c:	ed 5b       	subi	r30, 0xBD	; 189
    2e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e70:	60 81       	ld	r22, Z
    2e72:	71 81       	ldd	r23, Z+1	; 0x01
    2e74:	82 81       	ldd	r24, Z+2	; 0x02
    2e76:	93 81       	ldd	r25, Z+3	; 0x03
    2e78:	20 e0       	ldi	r18, 0x00	; 0
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	40 e2       	ldi	r20, 0x20	; 32
    2e7e:	51 e4       	ldi	r21, 0x41	; 65
    2e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e84:	dc 01       	movw	r26, r24
    2e86:	cb 01       	movw	r24, r22
    2e88:	bc 01       	movw	r22, r24
    2e8a:	cd 01       	movw	r24, r26
    2e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	9e af       	std	Y+62, r25	; 0x3e
    2e96:	8d af       	std	Y+61, r24	; 0x3d
    2e98:	0f c0       	rjmp	.+30     	; 0x2eb8 <H_LCD_void_Init+0xee>
    2e9a:	80 e9       	ldi	r24, 0x90	; 144
    2e9c:	91 e0       	ldi	r25, 0x01	; 1
    2e9e:	9c af       	std	Y+60, r25	; 0x3c
    2ea0:	8b af       	std	Y+59, r24	; 0x3b
    2ea2:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ea4:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ea6:	01 97       	sbiw	r24, 0x01	; 1
    2ea8:	f1 f7       	brne	.-4      	; 0x2ea6 <H_LCD_void_Init+0xdc>
    2eaa:	9c af       	std	Y+60, r25	; 0x3c
    2eac:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eae:	8d ad       	ldd	r24, Y+61	; 0x3d
    2eb0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2eb2:	01 97       	sbiw	r24, 0x01	; 1
    2eb4:	9e af       	std	Y+62, r25	; 0x3e
    2eb6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2eba:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ebc:	00 97       	sbiw	r24, 0x00	; 0
    2ebe:	69 f7       	brne	.-38     	; 0x2e9a <H_LCD_void_Init+0xd0>
    2ec0:	16 c0       	rjmp	.+44     	; 0x2eee <H_LCD_void_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	ff 96       	adiw	r30, 0x3f	; 63
    2ec6:	60 81       	ld	r22, Z
    2ec8:	71 81       	ldd	r23, Z+1	; 0x01
    2eca:	82 81       	ldd	r24, Z+2	; 0x02
    2ecc:	93 81       	ldd	r25, Z+3	; 0x03
    2ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed2:	dc 01       	movw	r26, r24
    2ed4:	cb 01       	movw	r24, r22
    2ed6:	9e af       	std	Y+62, r25	; 0x3e
    2ed8:	8d af       	std	Y+61, r24	; 0x3d
    2eda:	8d ad       	ldd	r24, Y+61	; 0x3d
    2edc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ede:	9a af       	std	Y+58, r25	; 0x3a
    2ee0:	89 af       	std	Y+57, r24	; 0x39
    2ee2:	89 ad       	ldd	r24, Y+57	; 0x39
    2ee4:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ee6:	01 97       	sbiw	r24, 0x01	; 1
    2ee8:	f1 f7       	brne	.-4      	; 0x2ee6 <H_LCD_void_Init+0x11c>
    2eea:	9a af       	std	Y+58, r25	; 0x3a
    2eec:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(150);
	M_Dio_void_setPinValue(CLCD_RS_PIN,DIO_LOW);
    2eee:	8d e0       	ldi	r24, 0x0D	; 13
    2ef0:	60 e0       	ldi	r22, 0x00	; 0
    2ef2:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <M_Dio_void_setPinValue>
	/*Function set*/
#if(LCD_MODE == _4_BIT_MODE)
	H_LCD_void_sendCommand(CLCD_FUNCTION_SET_1);
    2ef6:	82 e0       	ldi	r24, 0x02	; 2
    2ef8:	0e 94 6f 19 	call	0x32de	; 0x32de <H_LCD_void_sendCommand>
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	a0 ea       	ldi	r26, 0xA0	; 160
    2f02:	b0 e4       	ldi	r27, 0x40	; 64
    2f04:	8d ab       	std	Y+53, r24	; 0x35
    2f06:	9e ab       	std	Y+54, r25	; 0x36
    2f08:	af ab       	std	Y+55, r26	; 0x37
    2f0a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f0c:	6d a9       	ldd	r22, Y+53	; 0x35
    2f0e:	7e a9       	ldd	r23, Y+54	; 0x36
    2f10:	8f a9       	ldd	r24, Y+55	; 0x37
    2f12:	98 ad       	ldd	r25, Y+56	; 0x38
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	4a e7       	ldi	r20, 0x7A	; 122
    2f1a:	55 e4       	ldi	r21, 0x45	; 69
    2f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f20:	dc 01       	movw	r26, r24
    2f22:	cb 01       	movw	r24, r22
    2f24:	89 ab       	std	Y+49, r24	; 0x31
    2f26:	9a ab       	std	Y+50, r25	; 0x32
    2f28:	ab ab       	std	Y+51, r26	; 0x33
    2f2a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f2c:	69 a9       	ldd	r22, Y+49	; 0x31
    2f2e:	7a a9       	ldd	r23, Y+50	; 0x32
    2f30:	8b a9       	ldd	r24, Y+51	; 0x33
    2f32:	9c a9       	ldd	r25, Y+52	; 0x34
    2f34:	20 e0       	ldi	r18, 0x00	; 0
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	40 e8       	ldi	r20, 0x80	; 128
    2f3a:	5f e3       	ldi	r21, 0x3F	; 63
    2f3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f40:	88 23       	and	r24, r24
    2f42:	2c f4       	brge	.+10     	; 0x2f4e <H_LCD_void_Init+0x184>
		__ticks = 1;
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	98 ab       	std	Y+48, r25	; 0x30
    2f4a:	8f a7       	std	Y+47, r24	; 0x2f
    2f4c:	3f c0       	rjmp	.+126    	; 0x2fcc <H_LCD_void_Init+0x202>
	else if (__tmp > 65535)
    2f4e:	69 a9       	ldd	r22, Y+49	; 0x31
    2f50:	7a a9       	ldd	r23, Y+50	; 0x32
    2f52:	8b a9       	ldd	r24, Y+51	; 0x33
    2f54:	9c a9       	ldd	r25, Y+52	; 0x34
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	3f ef       	ldi	r19, 0xFF	; 255
    2f5a:	4f e7       	ldi	r20, 0x7F	; 127
    2f5c:	57 e4       	ldi	r21, 0x47	; 71
    2f5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f62:	18 16       	cp	r1, r24
    2f64:	4c f5       	brge	.+82     	; 0x2fb8 <H_LCD_void_Init+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f66:	6d a9       	ldd	r22, Y+53	; 0x35
    2f68:	7e a9       	ldd	r23, Y+54	; 0x36
    2f6a:	8f a9       	ldd	r24, Y+55	; 0x37
    2f6c:	98 ad       	ldd	r25, Y+56	; 0x38
    2f6e:	20 e0       	ldi	r18, 0x00	; 0
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	40 e2       	ldi	r20, 0x20	; 32
    2f74:	51 e4       	ldi	r21, 0x41	; 65
    2f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	bc 01       	movw	r22, r24
    2f80:	cd 01       	movw	r24, r26
    2f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	98 ab       	std	Y+48, r25	; 0x30
    2f8c:	8f a7       	std	Y+47, r24	; 0x2f
    2f8e:	0f c0       	rjmp	.+30     	; 0x2fae <H_LCD_void_Init+0x1e4>
    2f90:	80 e9       	ldi	r24, 0x90	; 144
    2f92:	91 e0       	ldi	r25, 0x01	; 1
    2f94:	9e a7       	std	Y+46, r25	; 0x2e
    2f96:	8d a7       	std	Y+45, r24	; 0x2d
    2f98:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f9a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f9c:	01 97       	sbiw	r24, 0x01	; 1
    2f9e:	f1 f7       	brne	.-4      	; 0x2f9c <H_LCD_void_Init+0x1d2>
    2fa0:	9e a7       	std	Y+46, r25	; 0x2e
    2fa2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fa4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fa6:	98 a9       	ldd	r25, Y+48	; 0x30
    2fa8:	01 97       	sbiw	r24, 0x01	; 1
    2faa:	98 ab       	std	Y+48, r25	; 0x30
    2fac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fae:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fb0:	98 a9       	ldd	r25, Y+48	; 0x30
    2fb2:	00 97       	sbiw	r24, 0x00	; 0
    2fb4:	69 f7       	brne	.-38     	; 0x2f90 <H_LCD_void_Init+0x1c6>
    2fb6:	14 c0       	rjmp	.+40     	; 0x2fe0 <H_LCD_void_Init+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb8:	69 a9       	ldd	r22, Y+49	; 0x31
    2fba:	7a a9       	ldd	r23, Y+50	; 0x32
    2fbc:	8b a9       	ldd	r24, Y+51	; 0x33
    2fbe:	9c a9       	ldd	r25, Y+52	; 0x34
    2fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	cb 01       	movw	r24, r22
    2fc8:	98 ab       	std	Y+48, r25	; 0x30
    2fca:	8f a7       	std	Y+47, r24	; 0x2f
    2fcc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fce:	98 a9       	ldd	r25, Y+48	; 0x30
    2fd0:	9c a7       	std	Y+44, r25	; 0x2c
    2fd2:	8b a7       	std	Y+43, r24	; 0x2b
    2fd4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fd6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fd8:	01 97       	sbiw	r24, 0x01	; 1
    2fda:	f1 f7       	brne	.-4      	; 0x2fd8 <H_LCD_void_Init+0x20e>
    2fdc:	9c a7       	std	Y+44, r25	; 0x2c
    2fde:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	H_LCD_void_sendCommand(CLCD_FUNCTION_SET_2);
    2fe0:	88 e2       	ldi	r24, 0x28	; 40
    2fe2:	0e 94 6f 19 	call	0x32de	; 0x32de <H_LCD_void_sendCommand>
    2fe6:	80 e0       	ldi	r24, 0x00	; 0
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	a0 ea       	ldi	r26, 0xA0	; 160
    2fec:	b0 e4       	ldi	r27, 0x40	; 64
    2fee:	8f a3       	std	Y+39, r24	; 0x27
    2ff0:	98 a7       	std	Y+40, r25	; 0x28
    2ff2:	a9 a7       	std	Y+41, r26	; 0x29
    2ff4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff6:	6f a1       	ldd	r22, Y+39	; 0x27
    2ff8:	78 a5       	ldd	r23, Y+40	; 0x28
    2ffa:	89 a5       	ldd	r24, Y+41	; 0x29
    2ffc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	4a e7       	ldi	r20, 0x7A	; 122
    3004:	55 e4       	ldi	r21, 0x45	; 69
    3006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300a:	dc 01       	movw	r26, r24
    300c:	cb 01       	movw	r24, r22
    300e:	8b a3       	std	Y+35, r24	; 0x23
    3010:	9c a3       	std	Y+36, r25	; 0x24
    3012:	ad a3       	std	Y+37, r26	; 0x25
    3014:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3016:	6b a1       	ldd	r22, Y+35	; 0x23
    3018:	7c a1       	ldd	r23, Y+36	; 0x24
    301a:	8d a1       	ldd	r24, Y+37	; 0x25
    301c:	9e a1       	ldd	r25, Y+38	; 0x26
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	40 e8       	ldi	r20, 0x80	; 128
    3024:	5f e3       	ldi	r21, 0x3F	; 63
    3026:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    302a:	88 23       	and	r24, r24
    302c:	2c f4       	brge	.+10     	; 0x3038 <H_LCD_void_Init+0x26e>
		__ticks = 1;
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	9a a3       	std	Y+34, r25	; 0x22
    3034:	89 a3       	std	Y+33, r24	; 0x21
    3036:	3f c0       	rjmp	.+126    	; 0x30b6 <H_LCD_void_Init+0x2ec>
	else if (__tmp > 65535)
    3038:	6b a1       	ldd	r22, Y+35	; 0x23
    303a:	7c a1       	ldd	r23, Y+36	; 0x24
    303c:	8d a1       	ldd	r24, Y+37	; 0x25
    303e:	9e a1       	ldd	r25, Y+38	; 0x26
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	3f ef       	ldi	r19, 0xFF	; 255
    3044:	4f e7       	ldi	r20, 0x7F	; 127
    3046:	57 e4       	ldi	r21, 0x47	; 71
    3048:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    304c:	18 16       	cp	r1, r24
    304e:	4c f5       	brge	.+82     	; 0x30a2 <H_LCD_void_Init+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3050:	6f a1       	ldd	r22, Y+39	; 0x27
    3052:	78 a5       	ldd	r23, Y+40	; 0x28
    3054:	89 a5       	ldd	r24, Y+41	; 0x29
    3056:	9a a5       	ldd	r25, Y+42	; 0x2a
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	40 e2       	ldi	r20, 0x20	; 32
    305e:	51 e4       	ldi	r21, 0x41	; 65
    3060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	bc 01       	movw	r22, r24
    306a:	cd 01       	movw	r24, r26
    306c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3070:	dc 01       	movw	r26, r24
    3072:	cb 01       	movw	r24, r22
    3074:	9a a3       	std	Y+34, r25	; 0x22
    3076:	89 a3       	std	Y+33, r24	; 0x21
    3078:	0f c0       	rjmp	.+30     	; 0x3098 <H_LCD_void_Init+0x2ce>
    307a:	80 e9       	ldi	r24, 0x90	; 144
    307c:	91 e0       	ldi	r25, 0x01	; 1
    307e:	98 a3       	std	Y+32, r25	; 0x20
    3080:	8f 8f       	std	Y+31, r24	; 0x1f
    3082:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3084:	98 a1       	ldd	r25, Y+32	; 0x20
    3086:	01 97       	sbiw	r24, 0x01	; 1
    3088:	f1 f7       	brne	.-4      	; 0x3086 <H_LCD_void_Init+0x2bc>
    308a:	98 a3       	std	Y+32, r25	; 0x20
    308c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    308e:	89 a1       	ldd	r24, Y+33	; 0x21
    3090:	9a a1       	ldd	r25, Y+34	; 0x22
    3092:	01 97       	sbiw	r24, 0x01	; 1
    3094:	9a a3       	std	Y+34, r25	; 0x22
    3096:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3098:	89 a1       	ldd	r24, Y+33	; 0x21
    309a:	9a a1       	ldd	r25, Y+34	; 0x22
    309c:	00 97       	sbiw	r24, 0x00	; 0
    309e:	69 f7       	brne	.-38     	; 0x307a <H_LCD_void_Init+0x2b0>
    30a0:	14 c0       	rjmp	.+40     	; 0x30ca <H_LCD_void_Init+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a2:	6b a1       	ldd	r22, Y+35	; 0x23
    30a4:	7c a1       	ldd	r23, Y+36	; 0x24
    30a6:	8d a1       	ldd	r24, Y+37	; 0x25
    30a8:	9e a1       	ldd	r25, Y+38	; 0x26
    30aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ae:	dc 01       	movw	r26, r24
    30b0:	cb 01       	movw	r24, r22
    30b2:	9a a3       	std	Y+34, r25	; 0x22
    30b4:	89 a3       	std	Y+33, r24	; 0x21
    30b6:	89 a1       	ldd	r24, Y+33	; 0x21
    30b8:	9a a1       	ldd	r25, Y+34	; 0x22
    30ba:	9e 8f       	std	Y+30, r25	; 0x1e
    30bc:	8d 8f       	std	Y+29, r24	; 0x1d
    30be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30c2:	01 97       	sbiw	r24, 0x01	; 1
    30c4:	f1 f7       	brne	.-4      	; 0x30c2 <H_LCD_void_Init+0x2f8>
    30c6:	9e 8f       	std	Y+30, r25	; 0x1e
    30c8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	/*Display ON/OFF*/
	H_LCD_void_sendCommand(CLCD_DISPLAY);
    30ca:	8c e0       	ldi	r24, 0x0C	; 12
    30cc:	0e 94 6f 19 	call	0x32de	; 0x32de <H_LCD_void_sendCommand>
    30d0:	80 e0       	ldi	r24, 0x00	; 0
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	a0 ea       	ldi	r26, 0xA0	; 160
    30d6:	b0 e4       	ldi	r27, 0x40	; 64
    30d8:	89 8f       	std	Y+25, r24	; 0x19
    30da:	9a 8f       	std	Y+26, r25	; 0x1a
    30dc:	ab 8f       	std	Y+27, r26	; 0x1b
    30de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30e0:	69 8d       	ldd	r22, Y+25	; 0x19
    30e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30e8:	20 e0       	ldi	r18, 0x00	; 0
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	4a e7       	ldi	r20, 0x7A	; 122
    30ee:	55 e4       	ldi	r21, 0x45	; 69
    30f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	8d 8b       	std	Y+21, r24	; 0x15
    30fa:	9e 8b       	std	Y+22, r25	; 0x16
    30fc:	af 8b       	std	Y+23, r26	; 0x17
    30fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3100:	6d 89       	ldd	r22, Y+21	; 0x15
    3102:	7e 89       	ldd	r23, Y+22	; 0x16
    3104:	8f 89       	ldd	r24, Y+23	; 0x17
    3106:	98 8d       	ldd	r25, Y+24	; 0x18
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	40 e8       	ldi	r20, 0x80	; 128
    310e:	5f e3       	ldi	r21, 0x3F	; 63
    3110:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3114:	88 23       	and	r24, r24
    3116:	2c f4       	brge	.+10     	; 0x3122 <H_LCD_void_Init+0x358>
		__ticks = 1;
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	9c 8b       	std	Y+20, r25	; 0x14
    311e:	8b 8b       	std	Y+19, r24	; 0x13
    3120:	3f c0       	rjmp	.+126    	; 0x31a0 <H_LCD_void_Init+0x3d6>
	else if (__tmp > 65535)
    3122:	6d 89       	ldd	r22, Y+21	; 0x15
    3124:	7e 89       	ldd	r23, Y+22	; 0x16
    3126:	8f 89       	ldd	r24, Y+23	; 0x17
    3128:	98 8d       	ldd	r25, Y+24	; 0x18
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	3f ef       	ldi	r19, 0xFF	; 255
    312e:	4f e7       	ldi	r20, 0x7F	; 127
    3130:	57 e4       	ldi	r21, 0x47	; 71
    3132:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3136:	18 16       	cp	r1, r24
    3138:	4c f5       	brge	.+82     	; 0x318c <H_LCD_void_Init+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    313a:	69 8d       	ldd	r22, Y+25	; 0x19
    313c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    313e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3140:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	40 e2       	ldi	r20, 0x20	; 32
    3148:	51 e4       	ldi	r21, 0x41	; 65
    314a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314e:	dc 01       	movw	r26, r24
    3150:	cb 01       	movw	r24, r22
    3152:	bc 01       	movw	r22, r24
    3154:	cd 01       	movw	r24, r26
    3156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	9c 8b       	std	Y+20, r25	; 0x14
    3160:	8b 8b       	std	Y+19, r24	; 0x13
    3162:	0f c0       	rjmp	.+30     	; 0x3182 <H_LCD_void_Init+0x3b8>
    3164:	80 e9       	ldi	r24, 0x90	; 144
    3166:	91 e0       	ldi	r25, 0x01	; 1
    3168:	9a 8b       	std	Y+18, r25	; 0x12
    316a:	89 8b       	std	Y+17, r24	; 0x11
    316c:	89 89       	ldd	r24, Y+17	; 0x11
    316e:	9a 89       	ldd	r25, Y+18	; 0x12
    3170:	01 97       	sbiw	r24, 0x01	; 1
    3172:	f1 f7       	brne	.-4      	; 0x3170 <H_LCD_void_Init+0x3a6>
    3174:	9a 8b       	std	Y+18, r25	; 0x12
    3176:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3178:	8b 89       	ldd	r24, Y+19	; 0x13
    317a:	9c 89       	ldd	r25, Y+20	; 0x14
    317c:	01 97       	sbiw	r24, 0x01	; 1
    317e:	9c 8b       	std	Y+20, r25	; 0x14
    3180:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3182:	8b 89       	ldd	r24, Y+19	; 0x13
    3184:	9c 89       	ldd	r25, Y+20	; 0x14
    3186:	00 97       	sbiw	r24, 0x00	; 0
    3188:	69 f7       	brne	.-38     	; 0x3164 <H_LCD_void_Init+0x39a>
    318a:	14 c0       	rjmp	.+40     	; 0x31b4 <H_LCD_void_Init+0x3ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    318c:	6d 89       	ldd	r22, Y+21	; 0x15
    318e:	7e 89       	ldd	r23, Y+22	; 0x16
    3190:	8f 89       	ldd	r24, Y+23	; 0x17
    3192:	98 8d       	ldd	r25, Y+24	; 0x18
    3194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3198:	dc 01       	movw	r26, r24
    319a:	cb 01       	movw	r24, r22
    319c:	9c 8b       	std	Y+20, r25	; 0x14
    319e:	8b 8b       	std	Y+19, r24	; 0x13
    31a0:	8b 89       	ldd	r24, Y+19	; 0x13
    31a2:	9c 89       	ldd	r25, Y+20	; 0x14
    31a4:	98 8b       	std	Y+16, r25	; 0x10
    31a6:	8f 87       	std	Y+15, r24	; 0x0f
    31a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    31aa:	98 89       	ldd	r25, Y+16	; 0x10
    31ac:	01 97       	sbiw	r24, 0x01	; 1
    31ae:	f1 f7       	brne	.-4      	; 0x31ac <H_LCD_void_Init+0x3e2>
    31b0:	98 8b       	std	Y+16, r25	; 0x10
    31b2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	/*Display clear*/
	H_LCD_void_sendCommand(CLCD_CLEAR);
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	0e 94 6f 19 	call	0x32de	; 0x32de <H_LCD_void_sendCommand>
    31ba:	80 e0       	ldi	r24, 0x00	; 0
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	a0 ea       	ldi	r26, 0xA0	; 160
    31c0:	b0 e4       	ldi	r27, 0x40	; 64
    31c2:	8b 87       	std	Y+11, r24	; 0x0b
    31c4:	9c 87       	std	Y+12, r25	; 0x0c
    31c6:	ad 87       	std	Y+13, r26	; 0x0d
    31c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    31cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    31ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    31d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    31d2:	20 e0       	ldi	r18, 0x00	; 0
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	4a e7       	ldi	r20, 0x7A	; 122
    31d8:	55 e4       	ldi	r21, 0x45	; 69
    31da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31de:	dc 01       	movw	r26, r24
    31e0:	cb 01       	movw	r24, r22
    31e2:	8f 83       	std	Y+7, r24	; 0x07
    31e4:	98 87       	std	Y+8, r25	; 0x08
    31e6:	a9 87       	std	Y+9, r26	; 0x09
    31e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31ea:	6f 81       	ldd	r22, Y+7	; 0x07
    31ec:	78 85       	ldd	r23, Y+8	; 0x08
    31ee:	89 85       	ldd	r24, Y+9	; 0x09
    31f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f2:	20 e0       	ldi	r18, 0x00	; 0
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	40 e8       	ldi	r20, 0x80	; 128
    31f8:	5f e3       	ldi	r21, 0x3F	; 63
    31fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31fe:	88 23       	and	r24, r24
    3200:	2c f4       	brge	.+10     	; 0x320c <H_LCD_void_Init+0x442>
		__ticks = 1;
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	9e 83       	std	Y+6, r25	; 0x06
    3208:	8d 83       	std	Y+5, r24	; 0x05
    320a:	3f c0       	rjmp	.+126    	; 0x328a <H_LCD_void_Init+0x4c0>
	else if (__tmp > 65535)
    320c:	6f 81       	ldd	r22, Y+7	; 0x07
    320e:	78 85       	ldd	r23, Y+8	; 0x08
    3210:	89 85       	ldd	r24, Y+9	; 0x09
    3212:	9a 85       	ldd	r25, Y+10	; 0x0a
    3214:	20 e0       	ldi	r18, 0x00	; 0
    3216:	3f ef       	ldi	r19, 0xFF	; 255
    3218:	4f e7       	ldi	r20, 0x7F	; 127
    321a:	57 e4       	ldi	r21, 0x47	; 71
    321c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3220:	18 16       	cp	r1, r24
    3222:	4c f5       	brge	.+82     	; 0x3276 <H_LCD_void_Init+0x4ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3224:	6b 85       	ldd	r22, Y+11	; 0x0b
    3226:	7c 85       	ldd	r23, Y+12	; 0x0c
    3228:	8d 85       	ldd	r24, Y+13	; 0x0d
    322a:	9e 85       	ldd	r25, Y+14	; 0x0e
    322c:	20 e0       	ldi	r18, 0x00	; 0
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	40 e2       	ldi	r20, 0x20	; 32
    3232:	51 e4       	ldi	r21, 0x41	; 65
    3234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3238:	dc 01       	movw	r26, r24
    323a:	cb 01       	movw	r24, r22
    323c:	bc 01       	movw	r22, r24
    323e:	cd 01       	movw	r24, r26
    3240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3244:	dc 01       	movw	r26, r24
    3246:	cb 01       	movw	r24, r22
    3248:	9e 83       	std	Y+6, r25	; 0x06
    324a:	8d 83       	std	Y+5, r24	; 0x05
    324c:	0f c0       	rjmp	.+30     	; 0x326c <H_LCD_void_Init+0x4a2>
    324e:	80 e9       	ldi	r24, 0x90	; 144
    3250:	91 e0       	ldi	r25, 0x01	; 1
    3252:	9c 83       	std	Y+4, r25	; 0x04
    3254:	8b 83       	std	Y+3, r24	; 0x03
    3256:	8b 81       	ldd	r24, Y+3	; 0x03
    3258:	9c 81       	ldd	r25, Y+4	; 0x04
    325a:	01 97       	sbiw	r24, 0x01	; 1
    325c:	f1 f7       	brne	.-4      	; 0x325a <H_LCD_void_Init+0x490>
    325e:	9c 83       	std	Y+4, r25	; 0x04
    3260:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3262:	8d 81       	ldd	r24, Y+5	; 0x05
    3264:	9e 81       	ldd	r25, Y+6	; 0x06
    3266:	01 97       	sbiw	r24, 0x01	; 1
    3268:	9e 83       	std	Y+6, r25	; 0x06
    326a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    326c:	8d 81       	ldd	r24, Y+5	; 0x05
    326e:	9e 81       	ldd	r25, Y+6	; 0x06
    3270:	00 97       	sbiw	r24, 0x00	; 0
    3272:	69 f7       	brne	.-38     	; 0x324e <H_LCD_void_Init+0x484>
    3274:	14 c0       	rjmp	.+40     	; 0x329e <H_LCD_void_Init+0x4d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3276:	6f 81       	ldd	r22, Y+7	; 0x07
    3278:	78 85       	ldd	r23, Y+8	; 0x08
    327a:	89 85       	ldd	r24, Y+9	; 0x09
    327c:	9a 85       	ldd	r25, Y+10	; 0x0a
    327e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3282:	dc 01       	movw	r26, r24
    3284:	cb 01       	movw	r24, r22
    3286:	9e 83       	std	Y+6, r25	; 0x06
    3288:	8d 83       	std	Y+5, r24	; 0x05
    328a:	8d 81       	ldd	r24, Y+5	; 0x05
    328c:	9e 81       	ldd	r25, Y+6	; 0x06
    328e:	9a 83       	std	Y+2, r25	; 0x02
    3290:	89 83       	std	Y+1, r24	; 0x01
    3292:	89 81       	ldd	r24, Y+1	; 0x01
    3294:	9a 81       	ldd	r25, Y+2	; 0x02
    3296:	01 97       	sbiw	r24, 0x01	; 1
    3298:	f1 f7       	brne	.-4      	; 0x3296 <H_LCD_void_Init+0x4cc>
    329a:	9a 83       	std	Y+2, r25	; 0x02
    329c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	H_LCD_void_sendCommand(CLCD_ENTRY_MODE_SET);
    329e:	86 e0       	ldi	r24, 0x06	; 6
    32a0:	0e 94 6f 19 	call	0x32de	; 0x32de <H_LCD_void_sendCommand>
	/*clear display*/
	H_LCD_void_sendCommand(0b00000001);

#endif

}
    32a4:	ca 5b       	subi	r28, 0xBA	; 186
    32a6:	df 4f       	sbci	r29, 0xFF	; 255
    32a8:	0f b6       	in	r0, 0x3f	; 63
    32aa:	f8 94       	cli
    32ac:	de bf       	out	0x3e, r29	; 62
    32ae:	0f be       	out	0x3f, r0	; 63
    32b0:	cd bf       	out	0x3d, r28	; 61
    32b2:	cf 91       	pop	r28
    32b4:	df 91       	pop	r29
    32b6:	1f 91       	pop	r17
    32b8:	0f 91       	pop	r16
    32ba:	08 95       	ret

000032bc <H_LCD_void_sendData>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_sendData(u8 copy_u8data )
{
    32bc:	df 93       	push	r29
    32be:	cf 93       	push	r28
    32c0:	0f 92       	push	r0
    32c2:	cd b7       	in	r28, 0x3d	; 61
    32c4:	de b7       	in	r29, 0x3e	; 62
    32c6:	89 83       	std	Y+1, r24	; 0x01
	/*SET RS TO ZERO*/
	M_Dio_void_setPinValue(CLCD_RS_PIN,DIO_HIGH);
    32c8:	8d e0       	ldi	r24, 0x0D	; 13
    32ca:	61 e0       	ldi	r22, 0x01	; 1
    32cc:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <M_Dio_void_setPinValue>
	/*Write command*/
	H_LCD_void_latchByte(copy_u8data);
    32d0:	89 81       	ldd	r24, Y+1	; 0x01
    32d2:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <H_LCD_void_latchByte>

}
    32d6:	0f 90       	pop	r0
    32d8:	cf 91       	pop	r28
    32da:	df 91       	pop	r29
    32dc:	08 95       	ret

000032de <H_LCD_void_sendCommand>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_sendCommand(u8 copy_u8command)
{
    32de:	df 93       	push	r29
    32e0:	cf 93       	push	r28
    32e2:	0f 92       	push	r0
    32e4:	cd b7       	in	r28, 0x3d	; 61
    32e6:	de b7       	in	r29, 0x3e	; 62
    32e8:	89 83       	std	Y+1, r24	; 0x01
	/*SET RS TO ZERO*/
	M_Dio_void_setPinValue(CLCD_RS_PIN,DIO_LOW);
    32ea:	8d e0       	ldi	r24, 0x0D	; 13
    32ec:	60 e0       	ldi	r22, 0x00	; 0
    32ee:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <M_Dio_void_setPinValue>
	/*Write command*/
	H_LCD_void_latchByte(copy_u8command);
    32f2:	89 81       	ldd	r24, Y+1	; 0x01
    32f4:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <H_LCD_void_latchByte>

}
    32f8:	0f 90       	pop	r0
    32fa:	cf 91       	pop	r28
    32fc:	df 91       	pop	r29
    32fe:	08 95       	ret

00003300 <H_LCD_void_sendString>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_sendString(const s8 * pstr)
{
    3300:	df 93       	push	r29
    3302:	cf 93       	push	r28
    3304:	00 d0       	rcall	.+0      	; 0x3306 <H_LCD_void_sendString+0x6>
    3306:	0f 92       	push	r0
    3308:	cd b7       	in	r28, 0x3d	; 61
    330a:	de b7       	in	r29, 0x3e	; 62
    330c:	9b 83       	std	Y+3, r25	; 0x03
    330e:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter;
	for(counter=0;pstr[counter]!=0;counter++)
    3310:	19 82       	std	Y+1, r1	; 0x01
    3312:	0e c0       	rjmp	.+28     	; 0x3330 <H_LCD_void_sendString+0x30>
	{
		H_LCD_void_sendData(pstr[counter]);
    3314:	89 81       	ldd	r24, Y+1	; 0x01
    3316:	28 2f       	mov	r18, r24
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	8a 81       	ldd	r24, Y+2	; 0x02
    331c:	9b 81       	ldd	r25, Y+3	; 0x03
    331e:	fc 01       	movw	r30, r24
    3320:	e2 0f       	add	r30, r18
    3322:	f3 1f       	adc	r31, r19
    3324:	80 81       	ld	r24, Z
    3326:	0e 94 5e 19 	call	0x32bc	; 0x32bc <H_LCD_void_sendData>
  Return Value     : void
******************************************/
void H_LCD_void_sendString(const s8 * pstr)
{
	u8 counter;
	for(counter=0;pstr[counter]!=0;counter++)
    332a:	89 81       	ldd	r24, Y+1	; 0x01
    332c:	8f 5f       	subi	r24, 0xFF	; 255
    332e:	89 83       	std	Y+1, r24	; 0x01
    3330:	89 81       	ldd	r24, Y+1	; 0x01
    3332:	28 2f       	mov	r18, r24
    3334:	30 e0       	ldi	r19, 0x00	; 0
    3336:	8a 81       	ldd	r24, Y+2	; 0x02
    3338:	9b 81       	ldd	r25, Y+3	; 0x03
    333a:	fc 01       	movw	r30, r24
    333c:	e2 0f       	add	r30, r18
    333e:	f3 1f       	adc	r31, r19
    3340:	80 81       	ld	r24, Z
    3342:	88 23       	and	r24, r24
    3344:	39 f7       	brne	.-50     	; 0x3314 <H_LCD_void_sendString+0x14>
	{
		H_LCD_void_sendData(pstr[counter]);
	}
}
    3346:	0f 90       	pop	r0
    3348:	0f 90       	pop	r0
    334a:	0f 90       	pop	r0
    334c:	cf 91       	pop	r28
    334e:	df 91       	pop	r29
    3350:	08 95       	ret

00003352 <H_LCD_void_sendIntNum>:
	//H_LCD_void_sendData(copy_s32Num+'0');

}
*/
void H_LCD_void_sendIntNum(s32 copy_s32Num)
{
    3352:	0f 93       	push	r16
    3354:	1f 93       	push	r17
    3356:	df 93       	push	r29
    3358:	cf 93       	push	r28
    335a:	cd b7       	in	r28, 0x3d	; 61
    335c:	de b7       	in	r29, 0x3e	; 62
    335e:	a5 97       	sbiw	r28, 0x25	; 37
    3360:	0f b6       	in	r0, 0x3f	; 63
    3362:	f8 94       	cli
    3364:	de bf       	out	0x3e, r29	; 62
    3366:	0f be       	out	0x3f, r0	; 63
    3368:	cd bf       	out	0x3d, r28	; 61
    336a:	6a a3       	std	Y+34, r22	; 0x22
    336c:	7b a3       	std	Y+35, r23	; 0x23
    336e:	8c a3       	std	Y+36, r24	; 0x24
    3370:	9d a3       	std	Y+37, r25	; 0x25
	/* Local Variable to save the numbers digits*/
	s32 Local_Variable[8] = {0} ;
    3372:	80 e2       	ldi	r24, 0x20	; 32
    3374:	fe 01       	movw	r30, r28
    3376:	32 96       	adiw	r30, 0x02	; 2
    3378:	df 01       	movw	r26, r30
    337a:	98 2f       	mov	r25, r24
    337c:	1d 92       	st	X+, r1
    337e:	9a 95       	dec	r25
    3380:	e9 f7       	brne	.-6      	; 0x337c <H_LCD_void_sendIntNum+0x2a>
	u8 Local_Counter = 0 ;
    3382:	19 82       	std	Y+1, r1	; 0x01

	/* Check if the number is negative */
	if (copy_s32Num < 0)
    3384:	8a a1       	ldd	r24, Y+34	; 0x22
    3386:	9b a1       	ldd	r25, Y+35	; 0x23
    3388:	ac a1       	ldd	r26, Y+36	; 0x24
    338a:	bd a1       	ldd	r27, Y+37	; 0x25
    338c:	bb 23       	and	r27, r27
    338e:	0c f0       	brlt	.+2      	; 0x3392 <H_LCD_void_sendIntNum+0x40>
    3390:	4a c0       	rjmp	.+148    	; 0x3426 <H_LCD_void_sendIntNum+0xd4>
	{
	/*Remove Negative Sign from number*/
	copy_s32Num = copy_s32Num * -1 ;
    3392:	8a a1       	ldd	r24, Y+34	; 0x22
    3394:	9b a1       	ldd	r25, Y+35	; 0x23
    3396:	ac a1       	ldd	r26, Y+36	; 0x24
    3398:	bd a1       	ldd	r27, Y+37	; 0x25
    339a:	b0 95       	com	r27
    339c:	a0 95       	com	r26
    339e:	90 95       	com	r25
    33a0:	81 95       	neg	r24
    33a2:	9f 4f       	sbci	r25, 0xFF	; 255
    33a4:	af 4f       	sbci	r26, 0xFF	; 255
    33a6:	bf 4f       	sbci	r27, 0xFF	; 255
    33a8:	8a a3       	std	Y+34, r24	; 0x22
    33aa:	9b a3       	std	Y+35, r25	; 0x23
    33ac:	ac a3       	std	Y+36, r26	; 0x24
    33ae:	bd a3       	std	Y+37, r27	; 0x25
	/*Send Negative Sign */
	H_LCD_void_sendData('-');
    33b0:	8d e2       	ldi	r24, 0x2D	; 45
    33b2:	0e 94 5e 19 	call	0x32bc	; 0x32bc <H_LCD_void_sendData>
    33b6:	37 c0       	rjmp	.+110    	; 0x3426 <H_LCD_void_sendIntNum+0xd4>
	}
	/* While loop to split the Numbers and save it in Local_Variable*/
	while (copy_s32Num != 0)
	{
	Local_Variable[Local_Counter] = copy_s32Num % 10 ;
    33b8:	89 81       	ldd	r24, Y+1	; 0x01
    33ba:	08 2f       	mov	r16, r24
    33bc:	10 e0       	ldi	r17, 0x00	; 0
    33be:	8a a1       	ldd	r24, Y+34	; 0x22
    33c0:	9b a1       	ldd	r25, Y+35	; 0x23
    33c2:	ac a1       	ldd	r26, Y+36	; 0x24
    33c4:	bd a1       	ldd	r27, Y+37	; 0x25
    33c6:	2a e0       	ldi	r18, 0x0A	; 10
    33c8:	30 e0       	ldi	r19, 0x00	; 0
    33ca:	40 e0       	ldi	r20, 0x00	; 0
    33cc:	50 e0       	ldi	r21, 0x00	; 0
    33ce:	bc 01       	movw	r22, r24
    33d0:	cd 01       	movw	r24, r26
    33d2:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <__divmodsi4>
    33d6:	dc 01       	movw	r26, r24
    33d8:	cb 01       	movw	r24, r22
    33da:	ac 01       	movw	r20, r24
    33dc:	bd 01       	movw	r22, r26
    33de:	98 01       	movw	r18, r16
    33e0:	22 0f       	add	r18, r18
    33e2:	33 1f       	adc	r19, r19
    33e4:	22 0f       	add	r18, r18
    33e6:	33 1f       	adc	r19, r19
    33e8:	ce 01       	movw	r24, r28
    33ea:	01 96       	adiw	r24, 0x01	; 1
    33ec:	82 0f       	add	r24, r18
    33ee:	93 1f       	adc	r25, r19
    33f0:	fc 01       	movw	r30, r24
    33f2:	31 96       	adiw	r30, 0x01	; 1
    33f4:	40 83       	st	Z, r20
    33f6:	51 83       	std	Z+1, r21	; 0x01
    33f8:	62 83       	std	Z+2, r22	; 0x02
    33fa:	73 83       	std	Z+3, r23	; 0x03
	copy_s32Num = copy_s32Num / 10 ;
    33fc:	8a a1       	ldd	r24, Y+34	; 0x22
    33fe:	9b a1       	ldd	r25, Y+35	; 0x23
    3400:	ac a1       	ldd	r26, Y+36	; 0x24
    3402:	bd a1       	ldd	r27, Y+37	; 0x25
    3404:	2a e0       	ldi	r18, 0x0A	; 10
    3406:	30 e0       	ldi	r19, 0x00	; 0
    3408:	40 e0       	ldi	r20, 0x00	; 0
    340a:	50 e0       	ldi	r21, 0x00	; 0
    340c:	bc 01       	movw	r22, r24
    340e:	cd 01       	movw	r24, r26
    3410:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <__divmodsi4>
    3414:	da 01       	movw	r26, r20
    3416:	c9 01       	movw	r24, r18
    3418:	8a a3       	std	Y+34, r24	; 0x22
    341a:	9b a3       	std	Y+35, r25	; 0x23
    341c:	ac a3       	std	Y+36, r26	; 0x24
    341e:	bd a3       	std	Y+37, r27	; 0x25
	Local_Counter ++ ;
    3420:	89 81       	ldd	r24, Y+1	; 0x01
    3422:	8f 5f       	subi	r24, 0xFF	; 255
    3424:	89 83       	std	Y+1, r24	; 0x01
	copy_s32Num = copy_s32Num * -1 ;
	/*Send Negative Sign */
	H_LCD_void_sendData('-');
	}
	/* While loop to split the Numbers and save it in Local_Variable*/
	while (copy_s32Num != 0)
    3426:	8a a1       	ldd	r24, Y+34	; 0x22
    3428:	9b a1       	ldd	r25, Y+35	; 0x23
    342a:	ac a1       	ldd	r26, Y+36	; 0x24
    342c:	bd a1       	ldd	r27, Y+37	; 0x25
    342e:	00 97       	sbiw	r24, 0x00	; 0
    3430:	a1 05       	cpc	r26, r1
    3432:	b1 05       	cpc	r27, r1
    3434:	09 f6       	brne	.-126    	; 0x33b8 <H_LCD_void_sendIntNum+0x66>
	copy_s32Num = copy_s32Num / 10 ;
	Local_Counter ++ ;

	}
	/* For loop to send the numbers using SendData*/
	for (Local_Counter --; Local_Counter < '0' ; Local_Counter--)
    3436:	89 81       	ldd	r24, Y+1	; 0x01
    3438:	81 50       	subi	r24, 0x01	; 1
    343a:	89 83       	std	Y+1, r24	; 0x01
    343c:	18 c0       	rjmp	.+48     	; 0x346e <H_LCD_void_sendIntNum+0x11c>
	{
		 H_LCD_void_sendData('0' + Local_Variable[Local_Counter]);
    343e:	89 81       	ldd	r24, Y+1	; 0x01
    3440:	88 2f       	mov	r24, r24
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	9c 01       	movw	r18, r24
    3446:	22 0f       	add	r18, r18
    3448:	33 1f       	adc	r19, r19
    344a:	22 0f       	add	r18, r18
    344c:	33 1f       	adc	r19, r19
    344e:	ce 01       	movw	r24, r28
    3450:	01 96       	adiw	r24, 0x01	; 1
    3452:	82 0f       	add	r24, r18
    3454:	93 1f       	adc	r25, r19
    3456:	fc 01       	movw	r30, r24
    3458:	31 96       	adiw	r30, 0x01	; 1
    345a:	80 81       	ld	r24, Z
    345c:	91 81       	ldd	r25, Z+1	; 0x01
    345e:	a2 81       	ldd	r26, Z+2	; 0x02
    3460:	b3 81       	ldd	r27, Z+3	; 0x03
    3462:	80 5d       	subi	r24, 0xD0	; 208
    3464:	0e 94 5e 19 	call	0x32bc	; 0x32bc <H_LCD_void_sendData>
	copy_s32Num = copy_s32Num / 10 ;
	Local_Counter ++ ;

	}
	/* For loop to send the numbers using SendData*/
	for (Local_Counter --; Local_Counter < '0' ; Local_Counter--)
    3468:	89 81       	ldd	r24, Y+1	; 0x01
    346a:	81 50       	subi	r24, 0x01	; 1
    346c:	89 83       	std	Y+1, r24	; 0x01
    346e:	89 81       	ldd	r24, Y+1	; 0x01
    3470:	80 33       	cpi	r24, 0x30	; 48
    3472:	28 f3       	brcs	.-54     	; 0x343e <H_LCD_void_sendIntNum+0xec>
	{
		 H_LCD_void_sendData('0' + Local_Variable[Local_Counter]);
	}
}
    3474:	a5 96       	adiw	r28, 0x25	; 37
    3476:	0f b6       	in	r0, 0x3f	; 63
    3478:	f8 94       	cli
    347a:	de bf       	out	0x3e, r29	; 62
    347c:	0f be       	out	0x3f, r0	; 63
    347e:	cd bf       	out	0x3d, r28	; 61
    3480:	cf 91       	pop	r28
    3482:	df 91       	pop	r29
    3484:	1f 91       	pop	r17
    3486:	0f 91       	pop	r16
    3488:	08 95       	ret

0000348a <H_LCD_void_gotoXY>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col)
{
    348a:	df 93       	push	r29
    348c:	cf 93       	push	r28
    348e:	00 d0       	rcall	.+0      	; 0x3490 <H_LCD_void_gotoXY+0x6>
    3490:	0f 92       	push	r0
    3492:	cd b7       	in	r28, 0x3d	; 61
    3494:	de b7       	in	r29, 0x3e	; 62
    3496:	8a 83       	std	Y+2, r24	; 0x02
    3498:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(copy_u8Row == 1)
    349a:	8a 81       	ldd	r24, Y+2	; 0x02
    349c:	81 30       	cpi	r24, 0x01	; 1
    349e:	19 f4       	brne	.+6      	; 0x34a6 <H_LCD_void_gotoXY+0x1c>
	{
		Local_u8Address = copy_u8Col;
    34a0:	8b 81       	ldd	r24, Y+3	; 0x03
    34a2:	89 83       	std	Y+1, r24	; 0x01
    34a4:	14 c0       	rjmp	.+40     	; 0x34ce <H_LCD_void_gotoXY+0x44>
	}
	else if(copy_u8Row == 2)
    34a6:	8a 81       	ldd	r24, Y+2	; 0x02
    34a8:	82 30       	cpi	r24, 0x02	; 2
    34aa:	21 f4       	brne	.+8      	; 0x34b4 <H_LCD_void_gotoXY+0x2a>
	{
		Local_u8Address = copy_u8Col + 0x40;
    34ac:	8b 81       	ldd	r24, Y+3	; 0x03
    34ae:	80 5c       	subi	r24, 0xC0	; 192
    34b0:	89 83       	std	Y+1, r24	; 0x01
    34b2:	0d c0       	rjmp	.+26     	; 0x34ce <H_LCD_void_gotoXY+0x44>
	}
	else if(copy_u8Row == 3)
    34b4:	8a 81       	ldd	r24, Y+2	; 0x02
    34b6:	83 30       	cpi	r24, 0x03	; 3
    34b8:	21 f4       	brne	.+8      	; 0x34c2 <H_LCD_void_gotoXY+0x38>
	{
		Local_u8Address = copy_u8Col + 0x14;
    34ba:	8b 81       	ldd	r24, Y+3	; 0x03
    34bc:	8c 5e       	subi	r24, 0xEC	; 236
    34be:	89 83       	std	Y+1, r24	; 0x01
    34c0:	06 c0       	rjmp	.+12     	; 0x34ce <H_LCD_void_gotoXY+0x44>
	}
	else if(copy_u8Row == 4)
    34c2:	8a 81       	ldd	r24, Y+2	; 0x02
    34c4:	84 30       	cpi	r24, 0x04	; 4
    34c6:	19 f4       	brne	.+6      	; 0x34ce <H_LCD_void_gotoXY+0x44>
	{
		Local_u8Address = copy_u8Col + 0x54;
    34c8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ca:	8c 5a       	subi	r24, 0xAC	; 172
    34cc:	89 83       	std	Y+1, r24	; 0x01
	else
	{

	}
	//128 Is added to the address to set the most significant bit by 1 according to DDRAM address instruction
	H_LCD_void_sendCommand(Local_u8Address+128);
    34ce:	89 81       	ldd	r24, Y+1	; 0x01
    34d0:	80 58       	subi	r24, 0x80	; 128
    34d2:	0e 94 6f 19 	call	0x32de	; 0x32de <H_LCD_void_sendCommand>
}
    34d6:	0f 90       	pop	r0
    34d8:	0f 90       	pop	r0
    34da:	0f 90       	pop	r0
    34dc:	cf 91       	pop	r28
    34de:	df 91       	pop	r29
    34e0:	08 95       	ret

000034e2 <H_LCD_void_creatCustomChar>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_creatCustomChar (const u8 * ArrPattern,u8 copy_u8charCode)
{
    34e2:	df 93       	push	r29
    34e4:	cf 93       	push	r28
    34e6:	00 d0       	rcall	.+0      	; 0x34e8 <H_LCD_void_creatCustomChar+0x6>
    34e8:	00 d0       	rcall	.+0      	; 0x34ea <H_LCD_void_creatCustomChar+0x8>
    34ea:	0f 92       	push	r0
    34ec:	cd b7       	in	r28, 0x3d	; 61
    34ee:	de b7       	in	r29, 0x3e	; 62
    34f0:	9c 83       	std	Y+4, r25	; 0x04
    34f2:	8b 83       	std	Y+3, r24	; 0x03
    34f4:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_counter=0;
    34f6:	1a 82       	std	Y+2, r1	; 0x02
	/*first calculate CGRAM address since each block of address is 8bytes*/
	u8 Local_u8CGramaddress=0;
    34f8:	19 82       	std	Y+1, r1	; 0x01
	Local_u8CGramaddress = copy_u8charCode*8;
    34fa:	8d 81       	ldd	r24, Y+5	; 0x05
    34fc:	88 2f       	mov	r24, r24
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	88 0f       	add	r24, r24
    3502:	99 1f       	adc	r25, r25
    3504:	88 0f       	add	r24, r24
    3506:	99 1f       	adc	r25, r25
    3508:	88 0f       	add	r24, r24
    350a:	99 1f       	adc	r25, r25
    350c:	89 83       	std	Y+1, r24	; 0x01
	/*Access CGRAM block using function Send command by setting bit 6 and clearing bit7*/
	H_LCD_void_sendCommand(Local_u8CGramaddress+64);
    350e:	89 81       	ldd	r24, Y+1	; 0x01
    3510:	80 5c       	subi	r24, 0xC0	; 192
    3512:	0e 94 6f 19 	call	0x32de	; 0x32de <H_LCD_void_sendCommand>
	/*write the pattern to the CG ram */
	for(Local_counter=0;Local_counter<8;Local_counter++) /*<8 since there are 8 memory locations only for cgram (64bytes)*/
    3516:	1a 82       	std	Y+2, r1	; 0x02
    3518:	0e c0       	rjmp	.+28     	; 0x3536 <H_LCD_void_creatCustomChar+0x54>
	{
		H_LCD_void_sendData(ArrPattern[Local_counter]);
    351a:	8a 81       	ldd	r24, Y+2	; 0x02
    351c:	28 2f       	mov	r18, r24
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	8b 81       	ldd	r24, Y+3	; 0x03
    3522:	9c 81       	ldd	r25, Y+4	; 0x04
    3524:	fc 01       	movw	r30, r24
    3526:	e2 0f       	add	r30, r18
    3528:	f3 1f       	adc	r31, r19
    352a:	80 81       	ld	r24, Z
    352c:	0e 94 5e 19 	call	0x32bc	; 0x32bc <H_LCD_void_sendData>
	u8 Local_u8CGramaddress=0;
	Local_u8CGramaddress = copy_u8charCode*8;
	/*Access CGRAM block using function Send command by setting bit 6 and clearing bit7*/
	H_LCD_void_sendCommand(Local_u8CGramaddress+64);
	/*write the pattern to the CG ram */
	for(Local_counter=0;Local_counter<8;Local_counter++) /*<8 since there are 8 memory locations only for cgram (64bytes)*/
    3530:	8a 81       	ldd	r24, Y+2	; 0x02
    3532:	8f 5f       	subi	r24, 0xFF	; 255
    3534:	8a 83       	std	Y+2, r24	; 0x02
    3536:	8a 81       	ldd	r24, Y+2	; 0x02
    3538:	88 30       	cpi	r24, 0x08	; 8
    353a:	78 f3       	brcs	.-34     	; 0x351a <H_LCD_void_creatCustomChar+0x38>
	{
		H_LCD_void_sendData(ArrPattern[Local_counter]);
	}
	H_LCD_void_gotoXY(1,0);
    353c:	81 e0       	ldi	r24, 0x01	; 1
    353e:	60 e0       	ldi	r22, 0x00	; 0
    3540:	0e 94 45 1a 	call	0x348a	; 0x348a <H_LCD_void_gotoXY>
	H_LCD_void_sendData(copy_u8charCode);
    3544:	8d 81       	ldd	r24, Y+5	; 0x05
    3546:	0e 94 5e 19 	call	0x32bc	; 0x32bc <H_LCD_void_sendData>

}
    354a:	0f 90       	pop	r0
    354c:	0f 90       	pop	r0
    354e:	0f 90       	pop	r0
    3550:	0f 90       	pop	r0
    3552:	0f 90       	pop	r0
    3554:	cf 91       	pop	r28
    3556:	df 91       	pop	r29
    3558:	08 95       	ret

0000355a <H_LCD_void_displayCustomChar>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_displayCustomChar (u8 copy_u8charCode)
{
    355a:	df 93       	push	r29
    355c:	cf 93       	push	r28
    355e:	0f 92       	push	r0
    3560:	cd b7       	in	r28, 0x3d	; 61
    3562:	de b7       	in	r29, 0x3e	; 62
    3564:	89 83       	std	Y+1, r24	; 0x01
	/*give the custom char number to send data*/
	H_LCD_void_sendData(copy_u8charCode);
    3566:	89 81       	ldd	r24, Y+1	; 0x01
    3568:	0e 94 5e 19 	call	0x32bc	; 0x32bc <H_LCD_void_sendData>
}
    356c:	0f 90       	pop	r0
    356e:	cf 91       	pop	r28
    3570:	df 91       	pop	r29
    3572:	08 95       	ret

00003574 <H_LCD_void_ClearDisplay>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_ClearDisplay(void)
{
    3574:	df 93       	push	r29
    3576:	cf 93       	push	r28
    3578:	cd b7       	in	r28, 0x3d	; 61
    357a:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_sendCommand(CLCD_CLEAR);
    357c:	81 e0       	ldi	r24, 0x01	; 1
    357e:	0e 94 6f 19 	call	0x32de	; 0x32de <H_LCD_void_sendCommand>
}
    3582:	cf 91       	pop	r28
    3584:	df 91       	pop	r29
    3586:	08 95       	ret

00003588 <main>:
#include"FINGER_PRINT_CONFIG.h"
#include"FINGER_PRINT/FINGER_PRINT_Init.h"
#include<util/delay.h>

int main(void)
{
    3588:	df 93       	push	r29
    358a:	cf 93       	push	r28
    358c:	cd b7       	in	r28, 0x3d	; 61
    358e:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_Init();
    3590:	0e 94 e5 16 	call	0x2dca	; 0x2dca <H_LCD_void_Init>
	Finger_Print_Init();
    3594:	0e 94 8f 0c 	call	0x191e	; 0x191e <Finger_Print_Init>
	//Finger_Print_Enroll(0x01);
	Finger_Print_Empty_Templates();
    3598:	0e 94 aa 13 	call	0x2754	; 0x2754 <Finger_Print_Empty_Templates>
    359c:	ff cf       	rjmp	.-2      	; 0x359c <main+0x14>

0000359e <__udivmodqi4>:
    359e:	99 1b       	sub	r25, r25
    35a0:	79 e0       	ldi	r23, 0x09	; 9
    35a2:	04 c0       	rjmp	.+8      	; 0x35ac <__udivmodqi4_ep>

000035a4 <__udivmodqi4_loop>:
    35a4:	99 1f       	adc	r25, r25
    35a6:	96 17       	cp	r25, r22
    35a8:	08 f0       	brcs	.+2      	; 0x35ac <__udivmodqi4_ep>
    35aa:	96 1b       	sub	r25, r22

000035ac <__udivmodqi4_ep>:
    35ac:	88 1f       	adc	r24, r24
    35ae:	7a 95       	dec	r23
    35b0:	c9 f7       	brne	.-14     	; 0x35a4 <__udivmodqi4_loop>
    35b2:	80 95       	com	r24
    35b4:	08 95       	ret

000035b6 <__divmodsi4>:
    35b6:	97 fb       	bst	r25, 7
    35b8:	09 2e       	mov	r0, r25
    35ba:	05 26       	eor	r0, r21
    35bc:	0e d0       	rcall	.+28     	; 0x35da <__divmodsi4_neg1>
    35be:	57 fd       	sbrc	r21, 7
    35c0:	04 d0       	rcall	.+8      	; 0x35ca <__divmodsi4_neg2>
    35c2:	14 d0       	rcall	.+40     	; 0x35ec <__udivmodsi4>
    35c4:	0a d0       	rcall	.+20     	; 0x35da <__divmodsi4_neg1>
    35c6:	00 1c       	adc	r0, r0
    35c8:	38 f4       	brcc	.+14     	; 0x35d8 <__divmodsi4_exit>

000035ca <__divmodsi4_neg2>:
    35ca:	50 95       	com	r21
    35cc:	40 95       	com	r20
    35ce:	30 95       	com	r19
    35d0:	21 95       	neg	r18
    35d2:	3f 4f       	sbci	r19, 0xFF	; 255
    35d4:	4f 4f       	sbci	r20, 0xFF	; 255
    35d6:	5f 4f       	sbci	r21, 0xFF	; 255

000035d8 <__divmodsi4_exit>:
    35d8:	08 95       	ret

000035da <__divmodsi4_neg1>:
    35da:	f6 f7       	brtc	.-4      	; 0x35d8 <__divmodsi4_exit>
    35dc:	90 95       	com	r25
    35de:	80 95       	com	r24
    35e0:	70 95       	com	r23
    35e2:	61 95       	neg	r22
    35e4:	7f 4f       	sbci	r23, 0xFF	; 255
    35e6:	8f 4f       	sbci	r24, 0xFF	; 255
    35e8:	9f 4f       	sbci	r25, 0xFF	; 255
    35ea:	08 95       	ret

000035ec <__udivmodsi4>:
    35ec:	a1 e2       	ldi	r26, 0x21	; 33
    35ee:	1a 2e       	mov	r1, r26
    35f0:	aa 1b       	sub	r26, r26
    35f2:	bb 1b       	sub	r27, r27
    35f4:	fd 01       	movw	r30, r26
    35f6:	0d c0       	rjmp	.+26     	; 0x3612 <__udivmodsi4_ep>

000035f8 <__udivmodsi4_loop>:
    35f8:	aa 1f       	adc	r26, r26
    35fa:	bb 1f       	adc	r27, r27
    35fc:	ee 1f       	adc	r30, r30
    35fe:	ff 1f       	adc	r31, r31
    3600:	a2 17       	cp	r26, r18
    3602:	b3 07       	cpc	r27, r19
    3604:	e4 07       	cpc	r30, r20
    3606:	f5 07       	cpc	r31, r21
    3608:	20 f0       	brcs	.+8      	; 0x3612 <__udivmodsi4_ep>
    360a:	a2 1b       	sub	r26, r18
    360c:	b3 0b       	sbc	r27, r19
    360e:	e4 0b       	sbc	r30, r20
    3610:	f5 0b       	sbc	r31, r21

00003612 <__udivmodsi4_ep>:
    3612:	66 1f       	adc	r22, r22
    3614:	77 1f       	adc	r23, r23
    3616:	88 1f       	adc	r24, r24
    3618:	99 1f       	adc	r25, r25
    361a:	1a 94       	dec	r1
    361c:	69 f7       	brne	.-38     	; 0x35f8 <__udivmodsi4_loop>
    361e:	60 95       	com	r22
    3620:	70 95       	com	r23
    3622:	80 95       	com	r24
    3624:	90 95       	com	r25
    3626:	9b 01       	movw	r18, r22
    3628:	ac 01       	movw	r20, r24
    362a:	bd 01       	movw	r22, r26
    362c:	cf 01       	movw	r24, r30
    362e:	08 95       	ret

00003630 <__prologue_saves__>:
    3630:	2f 92       	push	r2
    3632:	3f 92       	push	r3
    3634:	4f 92       	push	r4
    3636:	5f 92       	push	r5
    3638:	6f 92       	push	r6
    363a:	7f 92       	push	r7
    363c:	8f 92       	push	r8
    363e:	9f 92       	push	r9
    3640:	af 92       	push	r10
    3642:	bf 92       	push	r11
    3644:	cf 92       	push	r12
    3646:	df 92       	push	r13
    3648:	ef 92       	push	r14
    364a:	ff 92       	push	r15
    364c:	0f 93       	push	r16
    364e:	1f 93       	push	r17
    3650:	cf 93       	push	r28
    3652:	df 93       	push	r29
    3654:	cd b7       	in	r28, 0x3d	; 61
    3656:	de b7       	in	r29, 0x3e	; 62
    3658:	ca 1b       	sub	r28, r26
    365a:	db 0b       	sbc	r29, r27
    365c:	0f b6       	in	r0, 0x3f	; 63
    365e:	f8 94       	cli
    3660:	de bf       	out	0x3e, r29	; 62
    3662:	0f be       	out	0x3f, r0	; 63
    3664:	cd bf       	out	0x3d, r28	; 61
    3666:	09 94       	ijmp

00003668 <__epilogue_restores__>:
    3668:	2a 88       	ldd	r2, Y+18	; 0x12
    366a:	39 88       	ldd	r3, Y+17	; 0x11
    366c:	48 88       	ldd	r4, Y+16	; 0x10
    366e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3670:	6e 84       	ldd	r6, Y+14	; 0x0e
    3672:	7d 84       	ldd	r7, Y+13	; 0x0d
    3674:	8c 84       	ldd	r8, Y+12	; 0x0c
    3676:	9b 84       	ldd	r9, Y+11	; 0x0b
    3678:	aa 84       	ldd	r10, Y+10	; 0x0a
    367a:	b9 84       	ldd	r11, Y+9	; 0x09
    367c:	c8 84       	ldd	r12, Y+8	; 0x08
    367e:	df 80       	ldd	r13, Y+7	; 0x07
    3680:	ee 80       	ldd	r14, Y+6	; 0x06
    3682:	fd 80       	ldd	r15, Y+5	; 0x05
    3684:	0c 81       	ldd	r16, Y+4	; 0x04
    3686:	1b 81       	ldd	r17, Y+3	; 0x03
    3688:	aa 81       	ldd	r26, Y+2	; 0x02
    368a:	b9 81       	ldd	r27, Y+1	; 0x01
    368c:	ce 0f       	add	r28, r30
    368e:	d1 1d       	adc	r29, r1
    3690:	0f b6       	in	r0, 0x3f	; 63
    3692:	f8 94       	cli
    3694:	de bf       	out	0x3e, r29	; 62
    3696:	0f be       	out	0x3f, r0	; 63
    3698:	cd bf       	out	0x3d, r28	; 61
    369a:	ed 01       	movw	r28, r26
    369c:	08 95       	ret

0000369e <_exit>:
    369e:	f8 94       	cli

000036a0 <__stop_program>:
    36a0:	ff cf       	rjmp	.-2      	; 0x36a0 <__stop_program>
