
Small_OS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b2  00800060  00002a88  00002b1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  00800212  00800212  00002cce  2**0
                  ALLOC
  3 .stab         00002fdc  00000000  00000000  00002cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002792  00000000  00000000  00005cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000843e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000085de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000087d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000abdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000bf61  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d138  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000d2f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000d5ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000df5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ec 0f 	jmp	0x1fd8	; 0x1fd8 <__vector_1>
       8:	0c 94 1f 10 	jmp	0x203e	; 0x203e <__vector_2>
       c:	0c 94 2f 10 	jmp	0x205e	; 0x205e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <__vector_10>
      2c:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e8       	ldi	r30, 0x88	; 136
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 31       	cpi	r26, 0x12	; 18
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 e1       	ldi	r26, 0x12	; 18
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 33       	cpi	r26, 0x36	; 54
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8c 14 	call	0x2918	; 0x2918 <main>
      8a:	0c 94 42 15 	jmp	0x2a84	; 0x2a84 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 1b 15 	jmp	0x2a36	; 0x2a36 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 37 15 	jmp	0x2a6e	; 0x2a6e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <OS_Init>:
#include"LED/LED_Init.h"
static Task_Config Task_Arr[3]={{0,0,0}};
extern const Port_ConfigType PORT_Config_Arr[PORT_PINS_CONFIG_ARR_SIZE];
//static u32 Timer_Counter=0;
void OS_Init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	Port_Init(PORT_Config_Arr);
     e36:	81 e9       	ldi	r24, 0x91	; 145
     e38:	91 e0       	ldi	r25, 0x01	; 1
     e3a:	0e 94 88 0b 	call	0x1710	; 0x1710 <Port_Init>
	M_void_Timer_Init(Normal_Mode,Normal_Port);
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	60 e0       	ldi	r22, 0x00	; 0
     e42:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <M_void_Timer_Init>
	M_void_EnableTIMERInt(Normal_Mode);
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <M_void_EnableTIMERInt>
	M_void_setCallBack(Normal_Mode,Schedular_Start);
     e4c:	2a e6       	ldi	r18, 0x6A	; 106
     e4e:	37 e0       	ldi	r19, 0x07	; 7
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	b9 01       	movw	r22, r18
     e54:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <M_void_setCallBack>
	GIE_voidEnable();
     e58:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <GIE_voidEnable>
}
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <OS_Create_Task>:

void OS_Create_Task(Task_Config *Ptr_to_task)
{
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	00 d0       	rcall	.+0      	; 0xe68 <OS_Create_Task+0x6>
     e68:	0f 92       	push	r0
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	9b 83       	std	Y+3, r25	; 0x03
     e70:	8a 83       	std	Y+2, r24	; 0x02
	u8 index=0;
     e72:	19 82       	std	Y+1, r1	; 0x01
	index=Ptr_to_task->Task_Priority;
     e74:	ea 81       	ldd	r30, Y+2	; 0x02
     e76:	fb 81       	ldd	r31, Y+3	; 0x03
     e78:	82 81       	ldd	r24, Z+2	; 0x02
     e7a:	89 83       	std	Y+1, r24	; 0x01
	Task_Arr[index].Task_Periodicty= Ptr_to_task->Task_Periodicty;
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	ea 81       	ldd	r30, Y+2	; 0x02
     e84:	fb 81       	ldd	r31, Y+3	; 0x03
     e86:	40 81       	ld	r20, Z
     e88:	51 81       	ldd	r21, Z+1	; 0x01
     e8a:	c9 01       	movw	r24, r18
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	82 0f       	add	r24, r18
     e96:	93 1f       	adc	r25, r19
     e98:	fc 01       	movw	r30, r24
     e9a:	ee 5e       	subi	r30, 0xEE	; 238
     e9c:	fd 4f       	sbci	r31, 0xFD	; 253
     e9e:	51 83       	std	Z+1, r21	; 0x01
     ea0:	40 83       	st	Z, r20
	Task_Arr[index].ptrToFunc=Ptr_to_task->ptrToFunc;
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	ea 81       	ldd	r30, Y+2	; 0x02
     eaa:	fb 81       	ldd	r31, Y+3	; 0x03
     eac:	43 81       	ldd	r20, Z+3	; 0x03
     eae:	54 81       	ldd	r21, Z+4	; 0x04
     eb0:	c9 01       	movw	r24, r18
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	82 0f       	add	r24, r18
     ebc:	93 1f       	adc	r25, r19
     ebe:	fc 01       	movw	r30, r24
     ec0:	eb 5e       	subi	r30, 0xEB	; 235
     ec2:	fd 4f       	sbci	r31, 0xFD	; 253
     ec4:	51 83       	std	Z+1, r21	; 0x01
     ec6:	40 83       	st	Z, r20
}
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <Schedular_Start>:
void Schedular_Start(void)
{
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	00 d0       	rcall	.+0      	; 0xeda <Schedular_Start+0x6>
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
	//H_LED_void_Toggle(LED_RED);

	static u16 Timer_counter=0;
	u8 flag_counter=0;
     ede:	1a 82       	std	Y+2, r1	; 0x02
	Timer_counter+=TICKS;
     ee0:	80 91 21 02 	lds	r24, 0x0221
     ee4:	90 91 22 02 	lds	r25, 0x0222
     ee8:	8c 50       	subi	r24, 0x0C	; 12
     eea:	9e 4f       	sbci	r25, 0xFE	; 254
     eec:	90 93 22 02 	sts	0x0222, r25
     ef0:	80 93 21 02 	sts	0x0221, r24
	for(u8 i=0;i<3;i++)
     ef4:	19 82       	std	Y+1, r1	; 0x01
     ef6:	41 c0       	rjmp	.+130    	; 0xf7a <Schedular_Start+0xa6>
	{
		if(Timer_counter % (Task_Arr[i].Task_Periodicty)==0)
     ef8:	40 91 21 02 	lds	r20, 0x0221
     efc:	50 91 22 02 	lds	r21, 0x0222
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	c9 01       	movw	r24, r18
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	82 0f       	add	r24, r18
     f12:	93 1f       	adc	r25, r19
     f14:	fc 01       	movw	r30, r24
     f16:	ee 5e       	subi	r30, 0xEE	; 238
     f18:	fd 4f       	sbci	r31, 0xFD	; 253
     f1a:	20 81       	ld	r18, Z
     f1c:	31 81       	ldd	r19, Z+1	; 0x01
     f1e:	ca 01       	movw	r24, r20
     f20:	b9 01       	movw	r22, r18
     f22:	0e 94 d5 14 	call	0x29aa	; 0x29aa <__udivmodhi4>
     f26:	00 97       	sbiw	r24, 0x00	; 0
     f28:	29 f5       	brne	.+74     	; 0xf74 <Schedular_Start+0xa0>
		{
			if(Task_Arr[i].ptrToFunc != NULL)
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	c9 01       	movw	r24, r18
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	82 0f       	add	r24, r18
     f3c:	93 1f       	adc	r25, r19
     f3e:	fc 01       	movw	r30, r24
     f40:	eb 5e       	subi	r30, 0xEB	; 235
     f42:	fd 4f       	sbci	r31, 0xFD	; 253
     f44:	80 81       	ld	r24, Z
     f46:	91 81       	ldd	r25, Z+1	; 0x01
     f48:	00 97       	sbiw	r24, 0x00	; 0
     f4a:	a1 f0       	breq	.+40     	; 0xf74 <Schedular_Start+0xa0>
			{
				Task_Arr[i].ptrToFunc();
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	c9 01       	movw	r24, r18
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	82 0f       	add	r24, r18
     f5e:	93 1f       	adc	r25, r19
     f60:	fc 01       	movw	r30, r24
     f62:	eb 5e       	subi	r30, 0xEB	; 235
     f64:	fd 4f       	sbci	r31, 0xFD	; 253
     f66:	01 90       	ld	r0, Z+
     f68:	f0 81       	ld	r31, Z
     f6a:	e0 2d       	mov	r30, r0
     f6c:	09 95       	icall
				flag_counter++;
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	8f 5f       	subi	r24, 0xFF	; 255
     f72:	8a 83       	std	Y+2, r24	; 0x02
	//H_LED_void_Toggle(LED_RED);

	static u16 Timer_counter=0;
	u8 flag_counter=0;
	Timer_counter+=TICKS;
	for(u8 i=0;i<3;i++)
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	8f 5f       	subi	r24, 0xFF	; 255
     f78:	89 83       	std	Y+1, r24	; 0x01
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	83 30       	cpi	r24, 0x03	; 3
     f7e:	08 f4       	brcc	.+2      	; 0xf82 <Schedular_Start+0xae>
     f80:	bb cf       	rjmp	.-138    	; 0xef8 <Schedular_Start+0x24>
				Task_Arr[i].ptrToFunc();
				flag_counter++;
			}
		}
	}
	if(flag_counter==3)
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	83 30       	cpi	r24, 0x03	; 3
     f86:	21 f4       	brne	.+8      	; 0xf90 <Schedular_Start+0xbc>
	{
		Timer_counter=0;
     f88:	10 92 22 02 	sts	0x0222, r1
     f8c:	10 92 21 02 	sts	0x0221, r1
	}

}
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <OS_Start>:

void OS_Start(void)
{
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
	M_TIMER0_setDelayTimeMilliSec(500,Normal_Mode,CLK_8);
     fa2:	64 ef       	ldi	r22, 0xF4	; 244
     fa4:	71 e0       	ldi	r23, 0x01	; 1
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	22 e0       	ldi	r18, 0x02	; 2
     fae:	0e 94 6e 09 	call	0x12dc	; 0x12dc <M_TIMER0_setDelayTimeMilliSec>

}
     fb2:	cf 91       	pop	r28
     fb4:	df 91       	pop	r29
     fb6:	08 95       	ret

00000fb8 <M_void_Timer_Init>:
static u32 No_of_over_flows=0;
static u8 No_of_Remaning=0;
static u32 Global_No_of_overflows=0;

void M_void_Timer_Init(Timer_Mode T_MODE, Wave_Form_Generation WG_M)
{
     fb8:	df 93       	push	r29
     fba:	cf 93       	push	r28
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	2c 97       	sbiw	r28, 0x0c	; 12
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	89 83       	std	Y+1, r24	; 0x01
     fce:	6a 83       	std	Y+2, r22	; 0x02
	switch(T_MODE)
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	3c 87       	std	Y+12, r19	; 0x0c
     fd8:	2b 87       	std	Y+11, r18	; 0x0b
     fda:	8b 85       	ldd	r24, Y+11	; 0x0b
     fdc:	9c 85       	ldd	r25, Y+12	; 0x0c
     fde:	81 30       	cpi	r24, 0x01	; 1
     fe0:	91 05       	cpc	r25, r1
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <M_void_Timer_Init+0x2e>
     fe4:	66 c0       	rjmp	.+204    	; 0x10b2 <M_void_Timer_Init+0xfa>
     fe6:	2b 85       	ldd	r18, Y+11	; 0x0b
     fe8:	3c 85       	ldd	r19, Y+12	; 0x0c
     fea:	22 30       	cpi	r18, 0x02	; 2
     fec:	31 05       	cpc	r19, r1
     fee:	2c f4       	brge	.+10     	; 0xffa <M_void_Timer_Init+0x42>
     ff0:	8b 85       	ldd	r24, Y+11	; 0x0b
     ff2:	9c 85       	ldd	r25, Y+12	; 0x0c
     ff4:	00 97       	sbiw	r24, 0x00	; 0
     ff6:	71 f0       	breq	.+28     	; 0x1014 <M_void_Timer_Init+0x5c>
     ff8:	23 c1       	rjmp	.+582    	; 0x1240 <M_void_Timer_Init+0x288>
     ffa:	2b 85       	ldd	r18, Y+11	; 0x0b
     ffc:	3c 85       	ldd	r19, Y+12	; 0x0c
     ffe:	22 30       	cpi	r18, 0x02	; 2
    1000:	31 05       	cpc	r19, r1
    1002:	09 f4       	brne	.+2      	; 0x1006 <M_void_Timer_Init+0x4e>
    1004:	a6 c0       	rjmp	.+332    	; 0x1152 <M_void_Timer_Init+0x19a>
    1006:	8b 85       	ldd	r24, Y+11	; 0x0b
    1008:	9c 85       	ldd	r25, Y+12	; 0x0c
    100a:	83 30       	cpi	r24, 0x03	; 3
    100c:	91 05       	cpc	r25, r1
    100e:	09 f4       	brne	.+2      	; 0x1012 <M_void_Timer_Init+0x5a>
    1010:	dc c0       	rjmp	.+440    	; 0x11ca <M_void_Timer_Init+0x212>
    1012:	16 c1       	rjmp	.+556    	; 0x1240 <M_void_Timer_Init+0x288>
	{
	case Normal_Mode:
		TCCR0 &= CLEAR_TIMER_MODE_REG;
    1014:	a3 e5       	ldi	r26, 0x53	; 83
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e3 e5       	ldi	r30, 0x53	; 83
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	87 7d       	andi	r24, 0xD7	; 215
    1020:	8c 93       	st	X, r24
		TCCR0 |=SET_NORMAL_MODE_MASK;
    1022:	a3 e5       	ldi	r26, 0x53	; 83
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e3 e5       	ldi	r30, 0x53	; 83
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	8c 93       	st	X, r24
		switch(WG_M)
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	3a 87       	std	Y+10, r19	; 0x0a
    1036:	29 87       	std	Y+9, r18	; 0x09
    1038:	89 85       	ldd	r24, Y+9	; 0x09
    103a:	9a 85       	ldd	r25, Y+10	; 0x0a
    103c:	82 30       	cpi	r24, 0x02	; 2
    103e:	91 05       	cpc	r25, r1
    1040:	d1 f0       	breq	.+52     	; 0x1076 <M_void_Timer_Init+0xbe>
    1042:	29 85       	ldd	r18, Y+9	; 0x09
    1044:	3a 85       	ldd	r19, Y+10	; 0x0a
    1046:	23 30       	cpi	r18, 0x03	; 3
    1048:	31 05       	cpc	r19, r1
    104a:	21 f1       	breq	.+72     	; 0x1094 <M_void_Timer_Init+0xdc>
    104c:	89 85       	ldd	r24, Y+9	; 0x09
    104e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	91 05       	cpc	r25, r1
    1054:	09 f0       	breq	.+2      	; 0x1058 <M_void_Timer_Init+0xa0>
    1056:	f4 c0       	rjmp	.+488    	; 0x1240 <M_void_Timer_Init+0x288>
		{
		case Toggle_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    1058:	a3 e5       	ldi	r26, 0x53	; 83
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e3 e5       	ldi	r30, 0x53	; 83
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	8f 7c       	andi	r24, 0xCF	; 207
    1064:	8c 93       	st	X, r24
			TCCR0 |= TOGGLE_PORT_MASK;
    1066:	a3 e5       	ldi	r26, 0x53	; 83
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e3 e5       	ldi	r30, 0x53	; 83
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	80 61       	ori	r24, 0x10	; 16
    1072:	8c 93       	st	X, r24
    1074:	e5 c0       	rjmp	.+458    	; 0x1240 <M_void_Timer_Init+0x288>
			break;
		case Clear_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    1076:	a3 e5       	ldi	r26, 0x53	; 83
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e3 e5       	ldi	r30, 0x53	; 83
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	8f 7c       	andi	r24, 0xCF	; 207
    1082:	8c 93       	st	X, r24
			TCCR0 |= CLEAR_PORT_MASK;
    1084:	a3 e5       	ldi	r26, 0x53	; 83
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e3 e5       	ldi	r30, 0x53	; 83
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	80 62       	ori	r24, 0x20	; 32
    1090:	8c 93       	st	X, r24
    1092:	d6 c0       	rjmp	.+428    	; 0x1240 <M_void_Timer_Init+0x288>
			break;
		case Set_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    1094:	a3 e5       	ldi	r26, 0x53	; 83
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e3 e5       	ldi	r30, 0x53	; 83
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	8f 7c       	andi	r24, 0xCF	; 207
    10a0:	8c 93       	st	X, r24
			TCCR0 |= SET_PORT_MASK;
    10a2:	a3 e5       	ldi	r26, 0x53	; 83
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e3 e5       	ldi	r30, 0x53	; 83
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	80 63       	ori	r24, 0x30	; 48
    10ae:	8c 93       	st	X, r24
    10b0:	c7 c0       	rjmp	.+398    	; 0x1240 <M_void_Timer_Init+0x288>
		default:
			break;
		}
		break;
	case CTC_Mode:
		TCCR0 &= CLEAR_TIMER_MODE_REG;
    10b2:	a3 e5       	ldi	r26, 0x53	; 83
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e3 e5       	ldi	r30, 0x53	; 83
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	87 7d       	andi	r24, 0xD7	; 215
    10be:	8c 93       	st	X, r24
		TCCR0 |=SET_CTC_MODE_MASK;
    10c0:	a3 e5       	ldi	r26, 0x53	; 83
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e3 e5       	ldi	r30, 0x53	; 83
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	88 60       	ori	r24, 0x08	; 8
    10cc:	8c 93       	st	X, r24
		switch(WG_M)
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	38 87       	std	Y+8, r19	; 0x08
    10d6:	2f 83       	std	Y+7, r18	; 0x07
    10d8:	8f 81       	ldd	r24, Y+7	; 0x07
    10da:	98 85       	ldd	r25, Y+8	; 0x08
    10dc:	82 30       	cpi	r24, 0x02	; 2
    10de:	91 05       	cpc	r25, r1
    10e0:	d1 f0       	breq	.+52     	; 0x1116 <M_void_Timer_Init+0x15e>
    10e2:	2f 81       	ldd	r18, Y+7	; 0x07
    10e4:	38 85       	ldd	r19, Y+8	; 0x08
    10e6:	23 30       	cpi	r18, 0x03	; 3
    10e8:	31 05       	cpc	r19, r1
    10ea:	21 f1       	breq	.+72     	; 0x1134 <M_void_Timer_Init+0x17c>
    10ec:	8f 81       	ldd	r24, Y+7	; 0x07
    10ee:	98 85       	ldd	r25, Y+8	; 0x08
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	91 05       	cpc	r25, r1
    10f4:	09 f0       	breq	.+2      	; 0x10f8 <M_void_Timer_Init+0x140>
    10f6:	a4 c0       	rjmp	.+328    	; 0x1240 <M_void_Timer_Init+0x288>
		{
		case Toggle_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    10f8:	a3 e5       	ldi	r26, 0x53	; 83
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e3 e5       	ldi	r30, 0x53	; 83
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	8f 7c       	andi	r24, 0xCF	; 207
    1104:	8c 93       	st	X, r24
			TCCR0 |= TOGGLE_PORT_MASK;
    1106:	a3 e5       	ldi	r26, 0x53	; 83
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e3 e5       	ldi	r30, 0x53	; 83
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	80 61       	ori	r24, 0x10	; 16
    1112:	8c 93       	st	X, r24
    1114:	95 c0       	rjmp	.+298    	; 0x1240 <M_void_Timer_Init+0x288>
			break;
		case Clear_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    1116:	a3 e5       	ldi	r26, 0x53	; 83
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e3 e5       	ldi	r30, 0x53	; 83
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	8f 7c       	andi	r24, 0xCF	; 207
    1122:	8c 93       	st	X, r24
			TCCR0 |= CLEAR_PORT_MASK;
    1124:	a3 e5       	ldi	r26, 0x53	; 83
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e3 e5       	ldi	r30, 0x53	; 83
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	80 62       	ori	r24, 0x20	; 32
    1130:	8c 93       	st	X, r24
    1132:	86 c0       	rjmp	.+268    	; 0x1240 <M_void_Timer_Init+0x288>
			break;
		case Set_OC0:
			TCCR0 &= CLEAR_WAVEG_MASK;
    1134:	a3 e5       	ldi	r26, 0x53	; 83
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e3 e5       	ldi	r30, 0x53	; 83
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	8f 7c       	andi	r24, 0xCF	; 207
    1140:	8c 93       	st	X, r24
			TCCR0 |= SET_PORT_MASK;
    1142:	a3 e5       	ldi	r26, 0x53	; 83
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e3 e5       	ldi	r30, 0x53	; 83
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	80 63       	ori	r24, 0x30	; 48
    114e:	8c 93       	st	X, r24
    1150:	77 c0       	rjmp	.+238    	; 0x1240 <M_void_Timer_Init+0x288>
		default:
			break;
		}
		break;
	case Fast_PWM:
		TCCR0 &= CLEAR_TIMER_MODE_REG;
    1152:	a3 e5       	ldi	r26, 0x53	; 83
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e3 e5       	ldi	r30, 0x53	; 83
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	87 7d       	andi	r24, 0xD7	; 215
    115e:	8c 93       	st	X, r24
		TCCR0 |=SET_FAST_MODE_MASK;
    1160:	a3 e5       	ldi	r26, 0x53	; 83
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e3 e5       	ldi	r30, 0x53	; 83
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	88 64       	ori	r24, 0x48	; 72
    116c:	8c 93       	st	X, r24
		switch(WG_M)
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	3e 83       	std	Y+6, r19	; 0x06
    1176:	2d 83       	std	Y+5, r18	; 0x05
    1178:	8d 81       	ldd	r24, Y+5	; 0x05
    117a:	9e 81       	ldd	r25, Y+6	; 0x06
    117c:	84 30       	cpi	r24, 0x04	; 4
    117e:	91 05       	cpc	r25, r1
    1180:	31 f0       	breq	.+12     	; 0x118e <M_void_Timer_Init+0x1d6>
    1182:	2d 81       	ldd	r18, Y+5	; 0x05
    1184:	3e 81       	ldd	r19, Y+6	; 0x06
    1186:	25 30       	cpi	r18, 0x05	; 5
    1188:	31 05       	cpc	r19, r1
    118a:	81 f0       	breq	.+32     	; 0x11ac <M_void_Timer_Init+0x1f4>
    118c:	59 c0       	rjmp	.+178    	; 0x1240 <M_void_Timer_Init+0x288>
		{
		case Inverting_Mode:
			TCCR0 &= CLEAR_WAVEG_MASK;
    118e:	a3 e5       	ldi	r26, 0x53	; 83
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e3 e5       	ldi	r30, 0x53	; 83
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	8f 7c       	andi	r24, 0xCF	; 207
    119a:	8c 93       	st	X, r24
			TCCR0 |= INVERTING_FAST_MASK;
    119c:	a3 e5       	ldi	r26, 0x53	; 83
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e3 e5       	ldi	r30, 0x53	; 83
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	80 63       	ori	r24, 0x30	; 48
    11a8:	8c 93       	st	X, r24
    11aa:	4a c0       	rjmp	.+148    	; 0x1240 <M_void_Timer_Init+0x288>
			break;
		case Non_Invering_Mode:
			TCCR0 &= CLEAR_WAVEG_MASK;
    11ac:	a3 e5       	ldi	r26, 0x53	; 83
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e3 e5       	ldi	r30, 0x53	; 83
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	8f 7c       	andi	r24, 0xCF	; 207
    11b8:	8c 93       	st	X, r24
			TCCR0 |= NON_INVERTING_FAST_MASK;
    11ba:	a3 e5       	ldi	r26, 0x53	; 83
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e3 e5       	ldi	r30, 0x53	; 83
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	80 62       	ori	r24, 0x20	; 32
    11c6:	8c 93       	st	X, r24
    11c8:	3b c0       	rjmp	.+118    	; 0x1240 <M_void_Timer_Init+0x288>
		default:
			break;
		}
		break;
	case Phase_Correct_PWM:
		TCCR0 &= CLEAR_TIMER_MODE_REG;
    11ca:	a3 e5       	ldi	r26, 0x53	; 83
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e3 e5       	ldi	r30, 0x53	; 83
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	87 7d       	andi	r24, 0xD7	; 215
    11d6:	8c 93       	st	X, r24
		TCCR0 |=SET_PWM_PHASE_MODE_MASK;
    11d8:	a3 e5       	ldi	r26, 0x53	; 83
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e3 e5       	ldi	r30, 0x53	; 83
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	80 64       	ori	r24, 0x40	; 64
    11e4:	8c 93       	st	X, r24
		switch(WG_M)
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	3c 83       	std	Y+4, r19	; 0x04
    11ee:	2b 83       	std	Y+3, r18	; 0x03
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	9c 81       	ldd	r25, Y+4	; 0x04
    11f4:	84 30       	cpi	r24, 0x04	; 4
    11f6:	91 05       	cpc	r25, r1
    11f8:	31 f0       	breq	.+12     	; 0x1206 <M_void_Timer_Init+0x24e>
    11fa:	2b 81       	ldd	r18, Y+3	; 0x03
    11fc:	3c 81       	ldd	r19, Y+4	; 0x04
    11fe:	25 30       	cpi	r18, 0x05	; 5
    1200:	31 05       	cpc	r19, r1
    1202:	81 f0       	breq	.+32     	; 0x1224 <M_void_Timer_Init+0x26c>
    1204:	1d c0       	rjmp	.+58     	; 0x1240 <M_void_Timer_Init+0x288>
		{
		case Inverting_Mode:
			TCCR0 &= CLEAR_WAVEG_MASK;
    1206:	a3 e5       	ldi	r26, 0x53	; 83
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e3 e5       	ldi	r30, 0x53	; 83
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	8f 7c       	andi	r24, 0xCF	; 207
    1212:	8c 93       	st	X, r24
			TCCR0 |= INVERTING_PHASE_MASK;
    1214:	a3 e5       	ldi	r26, 0x53	; 83
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e3 e5       	ldi	r30, 0x53	; 83
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	80 63       	ori	r24, 0x30	; 48
    1220:	8c 93       	st	X, r24
    1222:	0e c0       	rjmp	.+28     	; 0x1240 <M_void_Timer_Init+0x288>
			break;
		case Non_Invering_Mode:
			TCCR0 &= CLEAR_WAVEG_MASK;
    1224:	a3 e5       	ldi	r26, 0x53	; 83
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e3 e5       	ldi	r30, 0x53	; 83
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	8f 7c       	andi	r24, 0xCF	; 207
    1230:	8c 93       	st	X, r24
			TCCR0 |= NON_INVERTING_PHASE_MASK;
    1232:	a3 e5       	ldi	r26, 0x53	; 83
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e3 e5       	ldi	r30, 0x53	; 83
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	80 62       	ori	r24, 0x20	; 32
    123e:	8c 93       	st	X, r24
		default:
			break;
		}
		break;
	}
}
    1240:	2c 96       	adiw	r28, 0x0c	; 12
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	cd bf       	out	0x3d, r28	; 61
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <M_void_Timer_start>:
void M_void_Timer_start(PRE_SCALLER Pre_scaller_select)
{
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	0f 92       	push	r0
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= CLEAR_PRESCALLER_MASK;
    125e:	a3 e5       	ldi	r26, 0x53	; 83
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e3 e5       	ldi	r30, 0x53	; 83
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	88 7f       	andi	r24, 0xF8	; 248
    126a:	8c 93       	st	X, r24
	TCCR0 |= Pre_scaller_select;
    126c:	a3 e5       	ldi	r26, 0x53	; 83
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e3 e5       	ldi	r30, 0x53	; 83
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	90 81       	ld	r25, Z
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	89 2b       	or	r24, r25
    127a:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
	*/
}
    127c:	0f 90       	pop	r0
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <M_void_Timer_stop>:
void M_void_Timer_stop(void)
{
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= CLEAR_PRESCALLER_MASK;
    128c:	a3 e5       	ldi	r26, 0x53	; 83
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	e3 e5       	ldi	r30, 0x53	; 83
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	88 7f       	andi	r24, 0xF8	; 248
    1298:	8c 93       	st	X, r24
	TCCR0 |= NO_CLK_SOURCE;
    129a:	a3 e5       	ldi	r26, 0x53	; 83
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	e3 e5       	ldi	r30, 0x53	; 83
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	8c 93       	st	X, r24
}
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <Timer_u8__GetCounts>:

u8 Timer_u8__GetCounts(void)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    12b4:	e2 e5       	ldi	r30, 0x52	; 82
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
}
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <M_void_Timer_Set_Preload>:
void M_void_Timer_Set_Preload(u8 Pre_load)
{
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	0f 92       	push	r0
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	89 83       	std	Y+1, r24	; 0x01
	TCNT0= Pre_load;
    12cc:	e2 e5       	ldi	r30, 0x52	; 82
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	80 83       	st	Z, r24
}
    12d4:	0f 90       	pop	r0
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	08 95       	ret

000012dc <M_TIMER0_setDelayTimeMilliSec>:

void M_TIMER0_setDelayTimeMilliSec(u32 Local_DelayTime, Timer_Mode Local_Mode, PRE_SCALLER Local_Prescaller)
{
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
    12e4:	ac 97       	sbiw	r28, 0x2c	; 44
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	f8 94       	cli
    12ea:	de bf       	out	0x3e, r29	; 62
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	cd bf       	out	0x3d, r28	; 61
    12f0:	6a a3       	std	Y+34, r22	; 0x22
    12f2:	7b a3       	std	Y+35, r23	; 0x23
    12f4:	8c a3       	std	Y+36, r24	; 0x24
    12f6:	9d a3       	std	Y+37, r25	; 0x25
    12f8:	4e a3       	std	Y+38, r20	; 0x26
    12fa:	2f a3       	std	Y+39, r18	; 0x27
	/*		*/
	u32 Pre_scallers[5]={1,8,64,256,1024};
    12fc:	ce 01       	movw	r24, r28
    12fe:	0e 96       	adiw	r24, 0x0e	; 14
    1300:	99 a7       	std	Y+41, r25	; 0x29
    1302:	88 a7       	std	Y+40, r24	; 0x28
    1304:	ed e7       	ldi	r30, 0x7D	; 125
    1306:	f1 e0       	ldi	r31, 0x01	; 1
    1308:	fb a7       	std	Y+43, r31	; 0x2b
    130a:	ea a7       	std	Y+42, r30	; 0x2a
    130c:	f4 e1       	ldi	r31, 0x14	; 20
    130e:	fc a7       	std	Y+44, r31	; 0x2c
    1310:	ea a5       	ldd	r30, Y+42	; 0x2a
    1312:	fb a5       	ldd	r31, Y+43	; 0x2b
    1314:	00 80       	ld	r0, Z
    1316:	8a a5       	ldd	r24, Y+42	; 0x2a
    1318:	9b a5       	ldd	r25, Y+43	; 0x2b
    131a:	01 96       	adiw	r24, 0x01	; 1
    131c:	9b a7       	std	Y+43, r25	; 0x2b
    131e:	8a a7       	std	Y+42, r24	; 0x2a
    1320:	e8 a5       	ldd	r30, Y+40	; 0x28
    1322:	f9 a5       	ldd	r31, Y+41	; 0x29
    1324:	00 82       	st	Z, r0
    1326:	88 a5       	ldd	r24, Y+40	; 0x28
    1328:	99 a5       	ldd	r25, Y+41	; 0x29
    132a:	01 96       	adiw	r24, 0x01	; 1
    132c:	99 a7       	std	Y+41, r25	; 0x29
    132e:	88 a7       	std	Y+40, r24	; 0x28
    1330:	9c a5       	ldd	r25, Y+44	; 0x2c
    1332:	91 50       	subi	r25, 0x01	; 1
    1334:	9c a7       	std	Y+44, r25	; 0x2c
    1336:	ec a5       	ldd	r30, Y+44	; 0x2c
    1338:	ee 23       	and	r30, r30
    133a:	51 f7       	brne	.-44     	; 0x1310 <M_TIMER0_setDelayTimeMilliSec+0x34>
	f32 TickTime = (f32)Pre_scallers[1]/16;
    133c:	8a 89       	ldd	r24, Y+18	; 0x12
    133e:	9b 89       	ldd	r25, Y+19	; 0x13
    1340:	ac 89       	ldd	r26, Y+20	; 0x14
    1342:	bd 89       	ldd	r27, Y+21	; 0x15
    1344:	bc 01       	movw	r22, r24
    1346:	cd 01       	movw	r24, r26
    1348:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	bc 01       	movw	r22, r24
    1352:	cd 01       	movw	r24, r26
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	40 e8       	ldi	r20, 0x80	; 128
    135a:	51 e4       	ldi	r21, 0x41	; 65
    135c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	8a 87       	std	Y+10, r24	; 0x0a
    1366:	9b 87       	std	Y+11, r25	; 0x0b
    1368:	ac 87       	std	Y+12, r26	; 0x0c
    136a:	bd 87       	std	Y+13, r27	; 0x0d

	u32 DesiredTickS = 0;
    136c:	1e 82       	std	Y+6, r1	; 0x06
    136e:	1f 82       	std	Y+7, r1	; 0x07
    1370:	18 86       	std	Y+8, r1	; 0x08
    1372:	19 86       	std	Y+9, r1	; 0x09
	u32 CTC_Value = 0 ;
    1374:	1a 82       	std	Y+2, r1	; 0x02
    1376:	1b 82       	std	Y+3, r1	; 0x03
    1378:	1c 82       	std	Y+4, r1	; 0x04
    137a:	1d 82       	std	Y+5, r1	; 0x05
	/* Calculate the desired Tick*/
	 DesiredTickS = (f32)Local_DelayTime*1000/ (TickTime) ;
    137c:	6a a1       	ldd	r22, Y+34	; 0x22
    137e:	7b a1       	ldd	r23, Y+35	; 0x23
    1380:	8c a1       	ldd	r24, Y+36	; 0x24
    1382:	9d a1       	ldd	r25, Y+37	; 0x25
    1384:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	bc 01       	movw	r22, r24
    138e:	cd 01       	movw	r24, r26
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	4a e7       	ldi	r20, 0x7A	; 122
    1396:	54 e4       	ldi	r21, 0x44	; 68
    1398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	bc 01       	movw	r22, r24
    13a2:	cd 01       	movw	r24, r26
    13a4:	2a 85       	ldd	r18, Y+10	; 0x0a
    13a6:	3b 85       	ldd	r19, Y+11	; 0x0b
    13a8:	4c 85       	ldd	r20, Y+12	; 0x0c
    13aa:	5d 85       	ldd	r21, Y+13	; 0x0d
    13ac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	bc 01       	movw	r22, r24
    13b6:	cd 01       	movw	r24, r26
    13b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	8e 83       	std	Y+6, r24	; 0x06
    13c2:	9f 83       	std	Y+7, r25	; 0x07
    13c4:	a8 87       	std	Y+8, r26	; 0x08
    13c6:	b9 87       	std	Y+9, r27	; 0x09
	// }
	// DesiredTickS = (Local_DelayTime)/TickTime ;

	 //H_LCD_void_sendIntNum(DesiredTickS);

	if(Local_Mode == Normal_Mode)
    13c8:	8e a1       	ldd	r24, Y+38	; 0x26
    13ca:	88 23       	and	r24, r24
    13cc:	c9 f5       	brne	.+114    	; 0x1440 <M_TIMER0_setDelayTimeMilliSec+0x164>
	{
		 /*Store the numbers of over flow */
		 No_of_over_flows = DesiredTickS/ 256 ;
    13ce:	8e 81       	ldd	r24, Y+6	; 0x06
    13d0:	9f 81       	ldd	r25, Y+7	; 0x07
    13d2:	a8 85       	ldd	r26, Y+8	; 0x08
    13d4:	b9 85       	ldd	r27, Y+9	; 0x09
    13d6:	89 2f       	mov	r24, r25
    13d8:	9a 2f       	mov	r25, r26
    13da:	ab 2f       	mov	r26, r27
    13dc:	bb 27       	eor	r27, r27
    13de:	80 93 27 02 	sts	0x0227, r24
    13e2:	90 93 28 02 	sts	0x0228, r25
    13e6:	a0 93 29 02 	sts	0x0229, r26
    13ea:	b0 93 2a 02 	sts	0x022A, r27
		 /* Store the Number of remaining if found */
		 No_of_Remaning = DesiredTickS % 256;
    13ee:	8e 81       	ldd	r24, Y+6	; 0x06
    13f0:	80 93 2b 02 	sts	0x022B, r24
		 /*if there is remaining then start from it */
		 if(DesiredTickS % 256 != 0)
    13f4:	8e 81       	ldd	r24, Y+6	; 0x06
    13f6:	9f 81       	ldd	r25, Y+7	; 0x07
    13f8:	a8 85       	ldd	r26, Y+8	; 0x08
    13fa:	b9 85       	ldd	r27, Y+9	; 0x09
    13fc:	90 70       	andi	r25, 0x00	; 0
    13fe:	a0 70       	andi	r26, 0x00	; 0
    1400:	b0 70       	andi	r27, 0x00	; 0
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	a1 05       	cpc	r26, r1
    1406:	b1 05       	cpc	r27, r1
    1408:	09 f4       	brne	.+2      	; 0x140c <M_TIMER0_setDelayTimeMilliSec+0x130>
    140a:	57 c0       	rjmp	.+174    	; 0x14ba <M_TIMER0_setDelayTimeMilliSec+0x1de>
		 {
			 TCNT0 = 256 - No_of_Remaning ;
    140c:	e2 e5       	ldi	r30, 0x52	; 82
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 91 2b 02 	lds	r24, 0x022B
    1414:	81 95       	neg	r24
    1416:	80 83       	st	Z, r24
			 No_of_over_flows ++ ;
    1418:	80 91 27 02 	lds	r24, 0x0227
    141c:	90 91 28 02 	lds	r25, 0x0228
    1420:	a0 91 29 02 	lds	r26, 0x0229
    1424:	b0 91 2a 02 	lds	r27, 0x022A
    1428:	01 96       	adiw	r24, 0x01	; 1
    142a:	a1 1d       	adc	r26, r1
    142c:	b1 1d       	adc	r27, r1
    142e:	80 93 27 02 	sts	0x0227, r24
    1432:	90 93 28 02 	sts	0x0228, r25
    1436:	a0 93 29 02 	sts	0x0229, r26
    143a:	b0 93 2a 02 	sts	0x022A, r27
    143e:	3d c0       	rjmp	.+122    	; 0x14ba <M_TIMER0_setDelayTimeMilliSec+0x1de>
		 }

		 //H_LCD_void_gotoXY(2,10);
		// H_LCD_void_sendIntNum(No_of_Remaning);
	}
	else if(Local_Mode == CTC_Mode)
    1440:	8e a1       	ldd	r24, Y+38	; 0x26
    1442:	81 30       	cpi	r24, 0x01	; 1
    1444:	d1 f5       	brne	.+116    	; 0x14ba <M_TIMER0_setDelayTimeMilliSec+0x1de>
	{
		CTC_Value = 255 ;
    1446:	8f ef       	ldi	r24, 0xFF	; 255
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	a0 e0       	ldi	r26, 0x00	; 0
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	8a 83       	std	Y+2, r24	; 0x02
    1450:	9b 83       	std	Y+3, r25	; 0x03
    1452:	ac 83       	std	Y+4, r26	; 0x04
    1454:	bd 83       	std	Y+5, r27	; 0x05
		u8 NoOfCompMatch = 0;
    1456:	19 82       	std	Y+1, r1	; 0x01
    1458:	0b c0       	rjmp	.+22     	; 0x1470 <M_TIMER0_setDelayTimeMilliSec+0x194>

		while(DesiredTickS % CTC_Value)
		{
			CTC_Value -- ;
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	9b 81       	ldd	r25, Y+3	; 0x03
    145e:	ac 81       	ldd	r26, Y+4	; 0x04
    1460:	bd 81       	ldd	r27, Y+5	; 0x05
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	a1 09       	sbc	r26, r1
    1466:	b1 09       	sbc	r27, r1
    1468:	8a 83       	std	Y+2, r24	; 0x02
    146a:	9b 83       	std	Y+3, r25	; 0x03
    146c:	ac 83       	std	Y+4, r26	; 0x04
    146e:	bd 83       	std	Y+5, r27	; 0x05
	else if(Local_Mode == CTC_Mode)
	{
		CTC_Value = 255 ;
		u8 NoOfCompMatch = 0;

		while(DesiredTickS % CTC_Value)
    1470:	8e 81       	ldd	r24, Y+6	; 0x06
    1472:	9f 81       	ldd	r25, Y+7	; 0x07
    1474:	a8 85       	ldd	r26, Y+8	; 0x08
    1476:	b9 85       	ldd	r27, Y+9	; 0x09
    1478:	2a 81       	ldd	r18, Y+2	; 0x02
    147a:	3b 81       	ldd	r19, Y+3	; 0x03
    147c:	4c 81       	ldd	r20, Y+4	; 0x04
    147e:	5d 81       	ldd	r21, Y+5	; 0x05
    1480:	bc 01       	movw	r22, r24
    1482:	cd 01       	movw	r24, r26
    1484:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__udivmodsi4>
    1488:	dc 01       	movw	r26, r24
    148a:	cb 01       	movw	r24, r22
    148c:	00 97       	sbiw	r24, 0x00	; 0
    148e:	a1 05       	cpc	r26, r1
    1490:	b1 05       	cpc	r27, r1
    1492:	19 f7       	brne	.-58     	; 0x145a <M_TIMER0_setDelayTimeMilliSec+0x17e>
		{
			CTC_Value -- ;
		}
		NoOfCompMatch = DesiredTickS % CTC_Value ;
    1494:	8e 81       	ldd	r24, Y+6	; 0x06
    1496:	9f 81       	ldd	r25, Y+7	; 0x07
    1498:	a8 85       	ldd	r26, Y+8	; 0x08
    149a:	b9 85       	ldd	r27, Y+9	; 0x09
    149c:	2a 81       	ldd	r18, Y+2	; 0x02
    149e:	3b 81       	ldd	r19, Y+3	; 0x03
    14a0:	4c 81       	ldd	r20, Y+4	; 0x04
    14a2:	5d 81       	ldd	r21, Y+5	; 0x05
    14a4:	bc 01       	movw	r22, r24
    14a6:	cd 01       	movw	r24, r26
    14a8:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__udivmodsi4>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	89 83       	std	Y+1, r24	; 0x01
		OCR0 = NoOfCompMatch;
    14b2:	ec e5       	ldi	r30, 0x5C	; 92
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	80 83       	st	Z, r24
	}
	else if(Local_Mode == Fast_PWM)
	{

	}
	M_void_Timer_start(Local_Prescaller);
    14ba:	8f a1       	ldd	r24, Y+39	; 0x27
    14bc:	0e 94 29 09 	call	0x1252	; 0x1252 <M_void_Timer_start>
}
    14c0:	ac 96       	adiw	r28, 0x2c	; 44
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	f8 94       	cli
    14c6:	de bf       	out	0x3e, r29	; 62
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	cd bf       	out	0x3d, r28	; 61
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	08 95       	ret

000014d2 <M_void_EnableTIMERInt>:

void M_void_EnableTIMERInt(Timer_Mode T_MODE)
{
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <M_void_EnableTIMERInt+0x6>
    14d8:	0f 92       	push	r0
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    14de:	89 83       	std	Y+1, r24	; 0x01
	switch(T_MODE)
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	3b 83       	std	Y+3, r19	; 0x03
    14e8:	2a 83       	std	Y+2, r18	; 0x02
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	9b 81       	ldd	r25, Y+3	; 0x03
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	31 f0       	breq	.+12     	; 0x14fe <M_void_EnableTIMERInt+0x2c>
    14f2:	2a 81       	ldd	r18, Y+2	; 0x02
    14f4:	3b 81       	ldd	r19, Y+3	; 0x03
    14f6:	21 30       	cpi	r18, 0x01	; 1
    14f8:	31 05       	cpc	r19, r1
    14fa:	81 f0       	breq	.+32     	; 0x151c <M_void_EnableTIMERInt+0x4a>
    14fc:	1d c0       	rjmp	.+58     	; 0x1538 <M_void_EnableTIMERInt+0x66>
	{
	case Normal_Mode:
		TIMSK &= NORMAL_MODE_INTERRUPT_CLEAR;
    14fe:	a9 e5       	ldi	r26, 0x59	; 89
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e9 e5       	ldi	r30, 0x59	; 89
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	8e 7f       	andi	r24, 0xFE	; 254
    150a:	8c 93       	st	X, r24
		TIMSK |= NORMAL_MODE_INTERRUPT_SET;
    150c:	a9 e5       	ldi	r26, 0x59	; 89
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e9 e5       	ldi	r30, 0x59	; 89
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	81 60       	ori	r24, 0x01	; 1
    1518:	8c 93       	st	X, r24
    151a:	0e c0       	rjmp	.+28     	; 0x1538 <M_void_EnableTIMERInt+0x66>
		break;
	case CTC_Mode:
		TIMSK &= CTC_MODE_INTERRUPT_CLEAR;
    151c:	a9 e5       	ldi	r26, 0x59	; 89
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e9 e5       	ldi	r30, 0x59	; 89
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	8d 7f       	andi	r24, 0xFD	; 253
    1528:	8c 93       	st	X, r24
		TIMSK |= CTC_MODE_INTERRUPT_SET;
    152a:	a9 e5       	ldi	r26, 0x59	; 89
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e9 e5       	ldi	r30, 0x59	; 89
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	82 60       	ori	r24, 0x02	; 2
    1536:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	cf 91       	pop	r28
    1540:	df 91       	pop	r29
    1542:	08 95       	ret

00001544 <M_void_DisableTIMERInt>:
void M_void_DisableTIMERInt(Timer_Mode T_MODE)
{
    1544:	df 93       	push	r29
    1546:	cf 93       	push	r28
    1548:	00 d0       	rcall	.+0      	; 0x154a <M_void_DisableTIMERInt+0x6>
    154a:	0f 92       	push	r0
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	89 83       	std	Y+1, r24	; 0x01
	switch(T_MODE)
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	3b 83       	std	Y+3, r19	; 0x03
    155a:	2a 83       	std	Y+2, r18	; 0x02
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	9b 81       	ldd	r25, Y+3	; 0x03
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	31 f0       	breq	.+12     	; 0x1570 <M_void_DisableTIMERInt+0x2c>
    1564:	2a 81       	ldd	r18, Y+2	; 0x02
    1566:	3b 81       	ldd	r19, Y+3	; 0x03
    1568:	21 30       	cpi	r18, 0x01	; 1
    156a:	31 05       	cpc	r19, r1
    156c:	79 f0       	breq	.+30     	; 0x158c <M_void_DisableTIMERInt+0x48>
    156e:	1b c0       	rjmp	.+54     	; 0x15a6 <M_void_DisableTIMERInt+0x62>
	{
	case Normal_Mode:
		TIMSK &= NORMAL_MODE_INTERRUPT_CLEAR;
    1570:	a9 e5       	ldi	r26, 0x59	; 89
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e9 e5       	ldi	r30, 0x59	; 89
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	8e 7f       	andi	r24, 0xFE	; 254
    157c:	8c 93       	st	X, r24
		TIMSK |= NORMAL_MODE_INTERRUPT_RESET;
    157e:	a9 e5       	ldi	r26, 0x59	; 89
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e9 e5       	ldi	r30, 0x59	; 89
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	8c 93       	st	X, r24
    158a:	0d c0       	rjmp	.+26     	; 0x15a6 <M_void_DisableTIMERInt+0x62>
		break;
	case CTC_Mode:
		TIMSK &= CTC_MODE_INTERRUPT_CLEAR;
    158c:	a9 e5       	ldi	r26, 0x59	; 89
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e9 e5       	ldi	r30, 0x59	; 89
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	8d 7f       	andi	r24, 0xFD	; 253
    1598:	8c 93       	st	X, r24
		TIMSK |= CTC_MODE_INTERRUPT_RESET;
    159a:	a9 e5       	ldi	r26, 0x59	; 89
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e9 e5       	ldi	r30, 0x59	; 89
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	08 95       	ret

000015b2 <M_void_setCallBack>:

void M_void_setCallBack(Timer_Mode T_MODE,void (*Copy_pvINTFunc)(void))
{
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	00 d0       	rcall	.+0      	; 0x15b8 <M_void_setCallBack+0x6>
    15b8:	00 d0       	rcall	.+0      	; 0x15ba <M_void_setCallBack+0x8>
    15ba:	0f 92       	push	r0
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	89 83       	std	Y+1, r24	; 0x01
    15c2:	7b 83       	std	Y+3, r23	; 0x03
    15c4:	6a 83       	std	Y+2, r22	; 0x02
	//u8 Local_u8ErrorStatus=NO_ERROR;
//	u8 Local_u8counter;
	switch(T_MODE)
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	3d 83       	std	Y+5, r19	; 0x05
    15ce:	2c 83       	std	Y+4, r18	; 0x04
    15d0:	8c 81       	ldd	r24, Y+4	; 0x04
    15d2:	9d 81       	ldd	r25, Y+5	; 0x05
    15d4:	00 97       	sbiw	r24, 0x00	; 0
    15d6:	31 f0       	breq	.+12     	; 0x15e4 <M_void_setCallBack+0x32>
    15d8:	2c 81       	ldd	r18, Y+4	; 0x04
    15da:	3d 81       	ldd	r19, Y+5	; 0x05
    15dc:	21 30       	cpi	r18, 0x01	; 1
    15de:	31 05       	cpc	r19, r1
    15e0:	61 f0       	breq	.+24     	; 0x15fa <M_void_setCallBack+0x48>
    15e2:	15 c0       	rjmp	.+42     	; 0x160e <M_void_setCallBack+0x5c>
	{
	case Normal_Mode:
		if(Copy_pvINTFunc!= NULL)
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	9b 81       	ldd	r25, Y+3	; 0x03
    15e8:	00 97       	sbiw	r24, 0x00	; 0
    15ea:	89 f0       	breq	.+34     	; 0x160e <M_void_setCallBack+0x5c>
		{
			EXTI_ARRCALLBACK2FUNC[0]=Copy_pvINTFunc;
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	9b 81       	ldd	r25, Y+3	; 0x03
    15f0:	90 93 24 02 	sts	0x0224, r25
    15f4:	80 93 23 02 	sts	0x0223, r24
    15f8:	0a c0       	rjmp	.+20     	; 0x160e <M_void_setCallBack+0x5c>
		}
		break;
	case CTC_Mode:
		if(Copy_pvINTFunc!= NULL)
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	9b 81       	ldd	r25, Y+3	; 0x03
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	31 f0       	breq	.+12     	; 0x160e <M_void_setCallBack+0x5c>
		{
			EXTI_ARRCALLBACK2FUNC[1]=Copy_pvINTFunc;
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	9b 81       	ldd	r25, Y+3	; 0x03
    1606:	90 93 26 02 	sts	0x0226, r25
    160a:	80 93 25 02 	sts	0x0225, r24
		}
		break;
	}
}
    160e:	0f 90       	pop	r0
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	08 95       	ret

0000161e <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    161e:	1f 92       	push	r1
    1620:	0f 92       	push	r0
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	0f 92       	push	r0
    1626:	11 24       	eor	r1, r1
    1628:	2f 93       	push	r18
    162a:	3f 93       	push	r19
    162c:	4f 93       	push	r20
    162e:	5f 93       	push	r21
    1630:	6f 93       	push	r22
    1632:	7f 93       	push	r23
    1634:	8f 93       	push	r24
    1636:	9f 93       	push	r25
    1638:	af 93       	push	r26
    163a:	bf 93       	push	r27
    163c:	ef 93       	push	r30
    163e:	ff 93       	push	r31
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
	Global_No_of_overflows++;
    1648:	80 91 2c 02 	lds	r24, 0x022C
    164c:	90 91 2d 02 	lds	r25, 0x022D
    1650:	a0 91 2e 02 	lds	r26, 0x022E
    1654:	b0 91 2f 02 	lds	r27, 0x022F
    1658:	01 96       	adiw	r24, 0x01	; 1
    165a:	a1 1d       	adc	r26, r1
    165c:	b1 1d       	adc	r27, r1
    165e:	80 93 2c 02 	sts	0x022C, r24
    1662:	90 93 2d 02 	sts	0x022D, r25
    1666:	a0 93 2e 02 	sts	0x022E, r26
    166a:	b0 93 2f 02 	sts	0x022F, r27
	if(EXTI_ARRCALLBACK2FUNC[0]!=NULL)
    166e:	80 91 23 02 	lds	r24, 0x0223
    1672:	90 91 24 02 	lds	r25, 0x0224
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	41 f1       	breq	.+80     	; 0x16ca <__vector_11+0xac>
	{
		if(Global_No_of_overflows==No_of_over_flows)
    167a:	20 91 2c 02 	lds	r18, 0x022C
    167e:	30 91 2d 02 	lds	r19, 0x022D
    1682:	40 91 2e 02 	lds	r20, 0x022E
    1686:	50 91 2f 02 	lds	r21, 0x022F
    168a:	80 91 27 02 	lds	r24, 0x0227
    168e:	90 91 28 02 	lds	r25, 0x0228
    1692:	a0 91 29 02 	lds	r26, 0x0229
    1696:	b0 91 2a 02 	lds	r27, 0x022A
    169a:	28 17       	cp	r18, r24
    169c:	39 07       	cpc	r19, r25
    169e:	4a 07       	cpc	r20, r26
    16a0:	5b 07       	cpc	r21, r27
    16a2:	99 f4       	brne	.+38     	; 0x16ca <__vector_11+0xac>
		{
			EXTI_ARRCALLBACK2FUNC[0]();
    16a4:	e0 91 23 02 	lds	r30, 0x0223
    16a8:	f0 91 24 02 	lds	r31, 0x0224
    16ac:	09 95       	icall
			Global_No_of_overflows=0;
    16ae:	10 92 2c 02 	sts	0x022C, r1
    16b2:	10 92 2d 02 	sts	0x022D, r1
    16b6:	10 92 2e 02 	sts	0x022E, r1
    16ba:	10 92 2f 02 	sts	0x022F, r1
			TCNT0 = 256 - No_of_Remaning;
    16be:	e2 e5       	ldi	r30, 0x52	; 82
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 91 2b 02 	lds	r24, 0x022B
    16c6:	81 95       	neg	r24
    16c8:	80 83       	st	Z, r24
		}
	}

}
    16ca:	cf 91       	pop	r28
    16cc:	df 91       	pop	r29
    16ce:	ff 91       	pop	r31
    16d0:	ef 91       	pop	r30
    16d2:	bf 91       	pop	r27
    16d4:	af 91       	pop	r26
    16d6:	9f 91       	pop	r25
    16d8:	8f 91       	pop	r24
    16da:	7f 91       	pop	r23
    16dc:	6f 91       	pop	r22
    16de:	5f 91       	pop	r21
    16e0:	4f 91       	pop	r20
    16e2:	3f 91       	pop	r19
    16e4:	2f 91       	pop	r18
    16e6:	0f 90       	pop	r0
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	0f 90       	pop	r0
    16ec:	1f 90       	pop	r1
    16ee:	18 95       	reti

000016f0 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
    16f0:	1f 92       	push	r1
    16f2:	0f 92       	push	r0
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	0f 92       	push	r0
    16f8:	11 24       	eor	r1, r1
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62

}
    1702:	cf 91       	pop	r28
    1704:	df 91       	pop	r29
    1706:	0f 90       	pop	r0
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	0f 90       	pop	r0
    170c:	1f 90       	pop	r1
    170e:	18 95       	reti

00001710 <Port_Init>:
  parameters (in)  :
  parameters (out) : none
  Return Value     : void
******************************************/
void Port_Init(const Port_ConfigType * ConfigPtr)
{
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	2b 97       	sbiw	r28, 0x0b	; 11
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	9d 83       	std	Y+5, r25	; 0x05
    1726:	8c 83       	std	Y+4, r24	; 0x04

	if(ConfigPtr == NULL)
    1728:	8c 81       	ldd	r24, Y+4	; 0x04
    172a:	9d 81       	ldd	r25, Y+5	; 0x05
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	09 f4       	brne	.+2      	; 0x1732 <Port_Init+0x22>
    1730:	51 c2       	rjmp	.+1186   	; 0x1bd4 <Port_Init+0x4c4>
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<PORT_PINS_CONFIG_ARR_SIZE;i++)
    1732:	1b 82       	std	Y+3, r1	; 0x03
    1734:	4b c2       	rjmp	.+1174   	; 0x1bcc <Port_Init+0x4bc>
			{
				Local_pin =(ConfigPtr[i].Port_PinNumber)%10 ;
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	88 2f       	mov	r24, r24
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	9c 01       	movw	r18, r24
    173e:	22 0f       	add	r18, r18
    1740:	33 1f       	adc	r19, r19
    1742:	22 0f       	add	r18, r18
    1744:	33 1f       	adc	r19, r19
    1746:	8c 81       	ldd	r24, Y+4	; 0x04
    1748:	9d 81       	ldd	r25, Y+5	; 0x05
    174a:	fc 01       	movw	r30, r24
    174c:	e2 0f       	add	r30, r18
    174e:	f3 1f       	adc	r31, r19
    1750:	80 81       	ld	r24, Z
    1752:	9a e0       	ldi	r25, 0x0A	; 10
    1754:	69 2f       	mov	r22, r25
    1756:	0e 94 c9 14 	call	0x2992	; 0x2992 <__udivmodqi4>
    175a:	89 2f       	mov	r24, r25
    175c:	8a 83       	std	Y+2, r24	; 0x02
				Local_port =(ConfigPtr[i].Port_PinNumber)/10 ;
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	88 2f       	mov	r24, r24
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	9c 01       	movw	r18, r24
    1766:	22 0f       	add	r18, r18
    1768:	33 1f       	adc	r19, r19
    176a:	22 0f       	add	r18, r18
    176c:	33 1f       	adc	r19, r19
    176e:	8c 81       	ldd	r24, Y+4	; 0x04
    1770:	9d 81       	ldd	r25, Y+5	; 0x05
    1772:	fc 01       	movw	r30, r24
    1774:	e2 0f       	add	r30, r18
    1776:	f3 1f       	adc	r31, r19
    1778:	80 81       	ld	r24, Z
    177a:	9a e0       	ldi	r25, 0x0A	; 10
    177c:	69 2f       	mov	r22, r25
    177e:	0e 94 c9 14 	call	0x2992	; 0x2992 <__udivmodqi4>
    1782:	89 83       	std	Y+1, r24	; 0x01
				// step1 : set direction
				if(ConfigPtr[i].Port_PinDirection == PORT_PINDIR_INPUT || ConfigPtr[i].Port_PinDirection ==PORT_PINDIR_OUTPUT)
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	88 2f       	mov	r24, r24
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	9c 01       	movw	r18, r24
    178c:	22 0f       	add	r18, r18
    178e:	33 1f       	adc	r19, r19
    1790:	22 0f       	add	r18, r18
    1792:	33 1f       	adc	r19, r19
    1794:	8c 81       	ldd	r24, Y+4	; 0x04
    1796:	9d 81       	ldd	r25, Y+5	; 0x05
    1798:	fc 01       	movw	r30, r24
    179a:	e2 0f       	add	r30, r18
    179c:	f3 1f       	adc	r31, r19
    179e:	82 81       	ldd	r24, Z+2	; 0x02
    17a0:	88 23       	and	r24, r24
    17a2:	89 f0       	breq	.+34     	; 0x17c6 <Port_Init+0xb6>
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	88 2f       	mov	r24, r24
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	9c 01       	movw	r18, r24
    17ac:	22 0f       	add	r18, r18
    17ae:	33 1f       	adc	r19, r19
    17b0:	22 0f       	add	r18, r18
    17b2:	33 1f       	adc	r19, r19
    17b4:	8c 81       	ldd	r24, Y+4	; 0x04
    17b6:	9d 81       	ldd	r25, Y+5	; 0x05
    17b8:	fc 01       	movw	r30, r24
    17ba:	e2 0f       	add	r30, r18
    17bc:	f3 1f       	adc	r31, r19
    17be:	82 81       	ldd	r24, Z+2	; 0x02
    17c0:	81 30       	cpi	r24, 0x01	; 1
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <Port_Init+0xb6>
    17c4:	00 c2       	rjmp	.+1024   	; 0x1bc6 <Port_Init+0x4b6>
				{
					switch(Local_port)
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	3b 87       	std	Y+11, r19	; 0x0b
    17ce:	2a 87       	std	Y+10, r18	; 0x0a
    17d0:	6a 85       	ldd	r22, Y+10	; 0x0a
    17d2:	7b 85       	ldd	r23, Y+11	; 0x0b
    17d4:	62 30       	cpi	r22, 0x02	; 2
    17d6:	71 05       	cpc	r23, r1
    17d8:	d1 f1       	breq	.+116    	; 0x184e <Port_Init+0x13e>
    17da:	8a 85       	ldd	r24, Y+10	; 0x0a
    17dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    17de:	83 30       	cpi	r24, 0x03	; 3
    17e0:	91 05       	cpc	r25, r1
    17e2:	34 f4       	brge	.+12     	; 0x17f0 <Port_Init+0xe0>
    17e4:	2a 85       	ldd	r18, Y+10	; 0x0a
    17e6:	3b 85       	ldd	r19, Y+11	; 0x0b
    17e8:	21 30       	cpi	r18, 0x01	; 1
    17ea:	31 05       	cpc	r19, r1
    17ec:	71 f0       	breq	.+28     	; 0x180a <Port_Init+0xfa>
    17ee:	94 c0       	rjmp	.+296    	; 0x1918 <Port_Init+0x208>
    17f0:	6a 85       	ldd	r22, Y+10	; 0x0a
    17f2:	7b 85       	ldd	r23, Y+11	; 0x0b
    17f4:	63 30       	cpi	r22, 0x03	; 3
    17f6:	71 05       	cpc	r23, r1
    17f8:	09 f4       	brne	.+2      	; 0x17fc <Port_Init+0xec>
    17fa:	4b c0       	rjmp	.+150    	; 0x1892 <Port_Init+0x182>
    17fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    17fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1800:	84 30       	cpi	r24, 0x04	; 4
    1802:	91 05       	cpc	r25, r1
    1804:	09 f4       	brne	.+2      	; 0x1808 <Port_Init+0xf8>
    1806:	67 c0       	rjmp	.+206    	; 0x18d6 <Port_Init+0x1c6>
    1808:	87 c0       	rjmp	.+270    	; 0x1918 <Port_Init+0x208>
					{
					case PORT_PORTA:DDRA_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    180a:	aa e3       	ldi	r26, 0x3A	; 58
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	ea e3       	ldi	r30, 0x3A	; 58
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	40 81       	ld	r20, Z
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	88 2f       	mov	r24, r24
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	9c 01       	movw	r18, r24
    181c:	22 0f       	add	r18, r18
    181e:	33 1f       	adc	r19, r19
    1820:	22 0f       	add	r18, r18
    1822:	33 1f       	adc	r19, r19
    1824:	8c 81       	ldd	r24, Y+4	; 0x04
    1826:	9d 81       	ldd	r25, Y+5	; 0x05
    1828:	fc 01       	movw	r30, r24
    182a:	e2 0f       	add	r30, r18
    182c:	f3 1f       	adc	r31, r19
    182e:	82 81       	ldd	r24, Z+2	; 0x02
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	88 2f       	mov	r24, r24
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	b9 01       	movw	r22, r18
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <Port_Init+0x132>
    183e:	66 0f       	add	r22, r22
    1840:	77 1f       	adc	r23, r23
    1842:	8a 95       	dec	r24
    1844:	e2 f7       	brpl	.-8      	; 0x183e <Port_Init+0x12e>
    1846:	cb 01       	movw	r24, r22
    1848:	84 2b       	or	r24, r20
    184a:	8c 93       	st	X, r24
    184c:	65 c0       	rjmp	.+202    	; 0x1918 <Port_Init+0x208>
					case PORT_PORTB:DDRB_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    184e:	a7 e3       	ldi	r26, 0x37	; 55
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e7 e3       	ldi	r30, 0x37	; 55
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	40 81       	ld	r20, Z
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	88 2f       	mov	r24, r24
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	9c 01       	movw	r18, r24
    1860:	22 0f       	add	r18, r18
    1862:	33 1f       	adc	r19, r19
    1864:	22 0f       	add	r18, r18
    1866:	33 1f       	adc	r19, r19
    1868:	8c 81       	ldd	r24, Y+4	; 0x04
    186a:	9d 81       	ldd	r25, Y+5	; 0x05
    186c:	fc 01       	movw	r30, r24
    186e:	e2 0f       	add	r30, r18
    1870:	f3 1f       	adc	r31, r19
    1872:	82 81       	ldd	r24, Z+2	; 0x02
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	88 2f       	mov	r24, r24
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	b9 01       	movw	r22, r18
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <Port_Init+0x176>
    1882:	66 0f       	add	r22, r22
    1884:	77 1f       	adc	r23, r23
    1886:	8a 95       	dec	r24
    1888:	e2 f7       	brpl	.-8      	; 0x1882 <Port_Init+0x172>
    188a:	cb 01       	movw	r24, r22
    188c:	84 2b       	or	r24, r20
    188e:	8c 93       	st	X, r24
    1890:	43 c0       	rjmp	.+134    	; 0x1918 <Port_Init+0x208>
					case PORT_PORTC:DDRC_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1892:	a4 e3       	ldi	r26, 0x34	; 52
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e4 e3       	ldi	r30, 0x34	; 52
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	40 81       	ld	r20, Z
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	88 2f       	mov	r24, r24
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	9c 01       	movw	r18, r24
    18a4:	22 0f       	add	r18, r18
    18a6:	33 1f       	adc	r19, r19
    18a8:	22 0f       	add	r18, r18
    18aa:	33 1f       	adc	r19, r19
    18ac:	8c 81       	ldd	r24, Y+4	; 0x04
    18ae:	9d 81       	ldd	r25, Y+5	; 0x05
    18b0:	fc 01       	movw	r30, r24
    18b2:	e2 0f       	add	r30, r18
    18b4:	f3 1f       	adc	r31, r19
    18b6:	82 81       	ldd	r24, Z+2	; 0x02
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	8a 81       	ldd	r24, Y+2	; 0x02
    18be:	88 2f       	mov	r24, r24
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	b9 01       	movw	r22, r18
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <Port_Init+0x1ba>
    18c6:	66 0f       	add	r22, r22
    18c8:	77 1f       	adc	r23, r23
    18ca:	8a 95       	dec	r24
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <Port_Init+0x1b6>
    18ce:	cb 01       	movw	r24, r22
    18d0:	84 2b       	or	r24, r20
    18d2:	8c 93       	st	X, r24
    18d4:	21 c0       	rjmp	.+66     	; 0x1918 <Port_Init+0x208>
					case PORT_PORTD:DDRD_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    18d6:	a1 e3       	ldi	r26, 0x31	; 49
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e1 e3       	ldi	r30, 0x31	; 49
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	40 81       	ld	r20, Z
    18e0:	8b 81       	ldd	r24, Y+3	; 0x03
    18e2:	88 2f       	mov	r24, r24
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	9c 01       	movw	r18, r24
    18e8:	22 0f       	add	r18, r18
    18ea:	33 1f       	adc	r19, r19
    18ec:	22 0f       	add	r18, r18
    18ee:	33 1f       	adc	r19, r19
    18f0:	8c 81       	ldd	r24, Y+4	; 0x04
    18f2:	9d 81       	ldd	r25, Y+5	; 0x05
    18f4:	fc 01       	movw	r30, r24
    18f6:	e2 0f       	add	r30, r18
    18f8:	f3 1f       	adc	r31, r19
    18fa:	82 81       	ldd	r24, Z+2	; 0x02
    18fc:	28 2f       	mov	r18, r24
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	88 2f       	mov	r24, r24
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	b9 01       	movw	r22, r18
    1908:	02 c0       	rjmp	.+4      	; 0x190e <Port_Init+0x1fe>
    190a:	66 0f       	add	r22, r22
    190c:	77 1f       	adc	r23, r23
    190e:	8a 95       	dec	r24
    1910:	e2 f7       	brpl	.-8      	; 0x190a <Port_Init+0x1fa>
    1912:	cb 01       	movw	r24, r22
    1914:	84 2b       	or	r24, r20
    1916:	8c 93       	st	X, r24

					}
					// step 2 : config initial pin value
					if(ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_LOW || ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_HIGH)
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	88 2f       	mov	r24, r24
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	9c 01       	movw	r18, r24
    1920:	22 0f       	add	r18, r18
    1922:	33 1f       	adc	r19, r19
    1924:	22 0f       	add	r18, r18
    1926:	33 1f       	adc	r19, r19
    1928:	8c 81       	ldd	r24, Y+4	; 0x04
    192a:	9d 81       	ldd	r25, Y+5	; 0x05
    192c:	fc 01       	movw	r30, r24
    192e:	e2 0f       	add	r30, r18
    1930:	f3 1f       	adc	r31, r19
    1932:	81 81       	ldd	r24, Z+1	; 0x01
    1934:	88 23       	and	r24, r24
    1936:	89 f0       	breq	.+34     	; 0x195a <Port_Init+0x24a>
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	88 2f       	mov	r24, r24
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	9c 01       	movw	r18, r24
    1940:	22 0f       	add	r18, r18
    1942:	33 1f       	adc	r19, r19
    1944:	22 0f       	add	r18, r18
    1946:	33 1f       	adc	r19, r19
    1948:	8c 81       	ldd	r24, Y+4	; 0x04
    194a:	9d 81       	ldd	r25, Y+5	; 0x05
    194c:	fc 01       	movw	r30, r24
    194e:	e2 0f       	add	r30, r18
    1950:	f3 1f       	adc	r31, r19
    1952:	81 81       	ldd	r24, Z+1	; 0x01
    1954:	81 30       	cpi	r24, 0x01	; 1
    1956:	09 f0       	breq	.+2      	; 0x195a <Port_Init+0x24a>
    1958:	36 c1       	rjmp	.+620    	; 0x1bc6 <Port_Init+0x4b6>
					{
						switch(Local_port)
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	39 87       	std	Y+9, r19	; 0x09
    1962:	28 87       	std	Y+8, r18	; 0x08
    1964:	68 85       	ldd	r22, Y+8	; 0x08
    1966:	79 85       	ldd	r23, Y+9	; 0x09
    1968:	62 30       	cpi	r22, 0x02	; 2
    196a:	71 05       	cpc	r23, r1
    196c:	d1 f1       	breq	.+116    	; 0x19e2 <Port_Init+0x2d2>
    196e:	88 85       	ldd	r24, Y+8	; 0x08
    1970:	99 85       	ldd	r25, Y+9	; 0x09
    1972:	83 30       	cpi	r24, 0x03	; 3
    1974:	91 05       	cpc	r25, r1
    1976:	34 f4       	brge	.+12     	; 0x1984 <Port_Init+0x274>
    1978:	28 85       	ldd	r18, Y+8	; 0x08
    197a:	39 85       	ldd	r19, Y+9	; 0x09
    197c:	21 30       	cpi	r18, 0x01	; 1
    197e:	31 05       	cpc	r19, r1
    1980:	71 f0       	breq	.+28     	; 0x199e <Port_Init+0x28e>
    1982:	94 c0       	rjmp	.+296    	; 0x1aac <Port_Init+0x39c>
    1984:	68 85       	ldd	r22, Y+8	; 0x08
    1986:	79 85       	ldd	r23, Y+9	; 0x09
    1988:	63 30       	cpi	r22, 0x03	; 3
    198a:	71 05       	cpc	r23, r1
    198c:	09 f4       	brne	.+2      	; 0x1990 <Port_Init+0x280>
    198e:	4b c0       	rjmp	.+150    	; 0x1a26 <Port_Init+0x316>
    1990:	88 85       	ldd	r24, Y+8	; 0x08
    1992:	99 85       	ldd	r25, Y+9	; 0x09
    1994:	84 30       	cpi	r24, 0x04	; 4
    1996:	91 05       	cpc	r25, r1
    1998:	09 f4       	brne	.+2      	; 0x199c <Port_Init+0x28c>
    199a:	67 c0       	rjmp	.+206    	; 0x1a6a <Port_Init+0x35a>
    199c:	87 c0       	rjmp	.+270    	; 0x1aac <Port_Init+0x39c>
						{
						case PORT_PORTA:  PORTA_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    199e:	ab e3       	ldi	r26, 0x3B	; 59
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	eb e3       	ldi	r30, 0x3B	; 59
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	40 81       	ld	r20, Z
    19a8:	8b 81       	ldd	r24, Y+3	; 0x03
    19aa:	88 2f       	mov	r24, r24
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	9c 01       	movw	r18, r24
    19b0:	22 0f       	add	r18, r18
    19b2:	33 1f       	adc	r19, r19
    19b4:	22 0f       	add	r18, r18
    19b6:	33 1f       	adc	r19, r19
    19b8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ba:	9d 81       	ldd	r25, Y+5	; 0x05
    19bc:	fc 01       	movw	r30, r24
    19be:	e2 0f       	add	r30, r18
    19c0:	f3 1f       	adc	r31, r19
    19c2:	81 81       	ldd	r24, Z+1	; 0x01
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ca:	88 2f       	mov	r24, r24
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	b9 01       	movw	r22, r18
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <Port_Init+0x2c6>
    19d2:	66 0f       	add	r22, r22
    19d4:	77 1f       	adc	r23, r23
    19d6:	8a 95       	dec	r24
    19d8:	e2 f7       	brpl	.-8      	; 0x19d2 <Port_Init+0x2c2>
    19da:	cb 01       	movw	r24, r22
    19dc:	84 2b       	or	r24, r20
    19de:	8c 93       	st	X, r24
    19e0:	65 c0       	rjmp	.+202    	; 0x1aac <Port_Init+0x39c>
						case PORT_PORTB:  PORTB_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    19e2:	a8 e3       	ldi	r26, 0x38	; 56
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	e8 e3       	ldi	r30, 0x38	; 56
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	40 81       	ld	r20, Z
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	88 2f       	mov	r24, r24
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	9c 01       	movw	r18, r24
    19f4:	22 0f       	add	r18, r18
    19f6:	33 1f       	adc	r19, r19
    19f8:	22 0f       	add	r18, r18
    19fa:	33 1f       	adc	r19, r19
    19fc:	8c 81       	ldd	r24, Y+4	; 0x04
    19fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1a00:	fc 01       	movw	r30, r24
    1a02:	e2 0f       	add	r30, r18
    1a04:	f3 1f       	adc	r31, r19
    1a06:	81 81       	ldd	r24, Z+1	; 0x01
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	88 2f       	mov	r24, r24
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	b9 01       	movw	r22, r18
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <Port_Init+0x30a>
    1a16:	66 0f       	add	r22, r22
    1a18:	77 1f       	adc	r23, r23
    1a1a:	8a 95       	dec	r24
    1a1c:	e2 f7       	brpl	.-8      	; 0x1a16 <Port_Init+0x306>
    1a1e:	cb 01       	movw	r24, r22
    1a20:	84 2b       	or	r24, r20
    1a22:	8c 93       	st	X, r24
    1a24:	43 c0       	rjmp	.+134    	; 0x1aac <Port_Init+0x39c>
						case PORT_PORTC:  PORTC_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    1a26:	a5 e3       	ldi	r26, 0x35	; 53
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e5 e3       	ldi	r30, 0x35	; 53
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	40 81       	ld	r20, Z
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	88 2f       	mov	r24, r24
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	9c 01       	movw	r18, r24
    1a38:	22 0f       	add	r18, r18
    1a3a:	33 1f       	adc	r19, r19
    1a3c:	22 0f       	add	r18, r18
    1a3e:	33 1f       	adc	r19, r19
    1a40:	8c 81       	ldd	r24, Y+4	; 0x04
    1a42:	9d 81       	ldd	r25, Y+5	; 0x05
    1a44:	fc 01       	movw	r30, r24
    1a46:	e2 0f       	add	r30, r18
    1a48:	f3 1f       	adc	r31, r19
    1a4a:	81 81       	ldd	r24, Z+1	; 0x01
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	88 2f       	mov	r24, r24
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	b9 01       	movw	r22, r18
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <Port_Init+0x34e>
    1a5a:	66 0f       	add	r22, r22
    1a5c:	77 1f       	adc	r23, r23
    1a5e:	8a 95       	dec	r24
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <Port_Init+0x34a>
    1a62:	cb 01       	movw	r24, r22
    1a64:	84 2b       	or	r24, r20
    1a66:	8c 93       	st	X, r24
    1a68:	21 c0       	rjmp	.+66     	; 0x1aac <Port_Init+0x39c>
						case PORT_PORTD:  PORTD_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    1a6a:	a2 e3       	ldi	r26, 0x32	; 50
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e2 e3       	ldi	r30, 0x32	; 50
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	40 81       	ld	r20, Z
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	88 2f       	mov	r24, r24
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	9c 01       	movw	r18, r24
    1a7c:	22 0f       	add	r18, r18
    1a7e:	33 1f       	adc	r19, r19
    1a80:	22 0f       	add	r18, r18
    1a82:	33 1f       	adc	r19, r19
    1a84:	8c 81       	ldd	r24, Y+4	; 0x04
    1a86:	9d 81       	ldd	r25, Y+5	; 0x05
    1a88:	fc 01       	movw	r30, r24
    1a8a:	e2 0f       	add	r30, r18
    1a8c:	f3 1f       	adc	r31, r19
    1a8e:	81 81       	ldd	r24, Z+1	; 0x01
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	88 2f       	mov	r24, r24
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	b9 01       	movw	r22, r18
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <Port_Init+0x392>
    1a9e:	66 0f       	add	r22, r22
    1aa0:	77 1f       	adc	r23, r23
    1aa2:	8a 95       	dec	r24
    1aa4:	e2 f7       	brpl	.-8      	; 0x1a9e <Port_Init+0x38e>
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	84 2b       	or	r24, r20
    1aaa:	8c 93       	st	X, r24

						}
						// step 3 : config Pin Internal Attach
						if(ConfigPtr[i].Port_PinDirection==PORT_PINDIR_OUTPUT && ConfigPtr[i].Port_PinInternalAttach == PORT_PIN_IN_ATTATCH_PULLUP)
    1aac:	8b 81       	ldd	r24, Y+3	; 0x03
    1aae:	88 2f       	mov	r24, r24
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	9c 01       	movw	r18, r24
    1ab4:	22 0f       	add	r18, r18
    1ab6:	33 1f       	adc	r19, r19
    1ab8:	22 0f       	add	r18, r18
    1aba:	33 1f       	adc	r19, r19
    1abc:	8c 81       	ldd	r24, Y+4	; 0x04
    1abe:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	e2 0f       	add	r30, r18
    1ac4:	f3 1f       	adc	r31, r19
    1ac6:	82 81       	ldd	r24, Z+2	; 0x02
    1ac8:	81 30       	cpi	r24, 0x01	; 1
    1aca:	09 f0       	breq	.+2      	; 0x1ace <Port_Init+0x3be>
    1acc:	7c c0       	rjmp	.+248    	; 0x1bc6 <Port_Init+0x4b6>
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	88 2f       	mov	r24, r24
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	9c 01       	movw	r18, r24
    1ad6:	22 0f       	add	r18, r18
    1ad8:	33 1f       	adc	r19, r19
    1ada:	22 0f       	add	r18, r18
    1adc:	33 1f       	adc	r19, r19
    1ade:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae2:	fc 01       	movw	r30, r24
    1ae4:	e2 0f       	add	r30, r18
    1ae6:	f3 1f       	adc	r31, r19
    1ae8:	83 81       	ldd	r24, Z+3	; 0x03
    1aea:	88 23       	and	r24, r24
    1aec:	09 f0       	breq	.+2      	; 0x1af0 <Port_Init+0x3e0>
    1aee:	6b c0       	rjmp	.+214    	; 0x1bc6 <Port_Init+0x4b6>
						{
							switch(Local_port)
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	28 2f       	mov	r18, r24
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	3f 83       	std	Y+7, r19	; 0x07
    1af8:	2e 83       	std	Y+6, r18	; 0x06
    1afa:	6e 81       	ldd	r22, Y+6	; 0x06
    1afc:	7f 81       	ldd	r23, Y+7	; 0x07
    1afe:	62 30       	cpi	r22, 0x02	; 2
    1b00:	71 05       	cpc	r23, r1
    1b02:	49 f1       	breq	.+82     	; 0x1b56 <Port_Init+0x446>
    1b04:	8e 81       	ldd	r24, Y+6	; 0x06
    1b06:	9f 81       	ldd	r25, Y+7	; 0x07
    1b08:	83 30       	cpi	r24, 0x03	; 3
    1b0a:	91 05       	cpc	r25, r1
    1b0c:	34 f4       	brge	.+12     	; 0x1b1a <Port_Init+0x40a>
    1b0e:	2e 81       	ldd	r18, Y+6	; 0x06
    1b10:	3f 81       	ldd	r19, Y+7	; 0x07
    1b12:	21 30       	cpi	r18, 0x01	; 1
    1b14:	31 05       	cpc	r19, r1
    1b16:	61 f0       	breq	.+24     	; 0x1b30 <Port_Init+0x420>
    1b18:	56 c0       	rjmp	.+172    	; 0x1bc6 <Port_Init+0x4b6>
    1b1a:	6e 81       	ldd	r22, Y+6	; 0x06
    1b1c:	7f 81       	ldd	r23, Y+7	; 0x07
    1b1e:	63 30       	cpi	r22, 0x03	; 3
    1b20:	71 05       	cpc	r23, r1
    1b22:	61 f1       	breq	.+88     	; 0x1b7c <Port_Init+0x46c>
    1b24:	8e 81       	ldd	r24, Y+6	; 0x06
    1b26:	9f 81       	ldd	r25, Y+7	; 0x07
    1b28:	84 30       	cpi	r24, 0x04	; 4
    1b2a:	91 05       	cpc	r25, r1
    1b2c:	d1 f1       	breq	.+116    	; 0x1ba2 <Port_Init+0x492>
    1b2e:	4b c0       	rjmp	.+150    	; 0x1bc6 <Port_Init+0x4b6>
							{
							case PORT_PORTA:PORTA_REG |= (u8)(1<< Local_pin);break;
    1b30:	ab e3       	ldi	r26, 0x3B	; 59
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	eb e3       	ldi	r30, 0x3B	; 59
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	40 81       	ld	r20, Z
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	28 2f       	mov	r18, r24
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	02 2e       	mov	r0, r18
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <Port_Init+0x43c>
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	0a 94       	dec	r0
    1b4e:	e2 f7       	brpl	.-8      	; 0x1b48 <Port_Init+0x438>
    1b50:	84 2b       	or	r24, r20
    1b52:	8c 93       	st	X, r24
    1b54:	38 c0       	rjmp	.+112    	; 0x1bc6 <Port_Init+0x4b6>
							case PORT_PORTB:PORTB_REG |= (u8)(1<< Local_pin);break;
    1b56:	a8 e3       	ldi	r26, 0x38	; 56
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	e8 e3       	ldi	r30, 0x38	; 56
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	40 81       	ld	r20, Z
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	02 2e       	mov	r0, r18
    1b6c:	02 c0       	rjmp	.+4      	; 0x1b72 <Port_Init+0x462>
    1b6e:	88 0f       	add	r24, r24
    1b70:	99 1f       	adc	r25, r25
    1b72:	0a 94       	dec	r0
    1b74:	e2 f7       	brpl	.-8      	; 0x1b6e <Port_Init+0x45e>
    1b76:	84 2b       	or	r24, r20
    1b78:	8c 93       	st	X, r24
    1b7a:	25 c0       	rjmp	.+74     	; 0x1bc6 <Port_Init+0x4b6>
							case PORT_PORTC:PORTC_REG |= (u8)(1<< Local_pin);break;
    1b7c:	a5 e3       	ldi	r26, 0x35	; 53
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e5 e3       	ldi	r30, 0x35	; 53
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	40 81       	ld	r20, Z
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	02 2e       	mov	r0, r18
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <Port_Init+0x488>
    1b94:	88 0f       	add	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	0a 94       	dec	r0
    1b9a:	e2 f7       	brpl	.-8      	; 0x1b94 <Port_Init+0x484>
    1b9c:	84 2b       	or	r24, r20
    1b9e:	8c 93       	st	X, r24
    1ba0:	12 c0       	rjmp	.+36     	; 0x1bc6 <Port_Init+0x4b6>
							case PORT_PORTD:PORTD_REG |= (u8)(1<< Local_pin);break;
    1ba2:	a2 e3       	ldi	r26, 0x32	; 50
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	e2 e3       	ldi	r30, 0x32	; 50
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	40 81       	ld	r20, Z
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	28 2f       	mov	r18, r24
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	02 2e       	mov	r0, r18
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <Port_Init+0x4ae>
    1bba:	88 0f       	add	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	0a 94       	dec	r0
    1bc0:	e2 f7       	brpl	.-8      	; 0x1bba <Port_Init+0x4aa>
    1bc2:	84 2b       	or	r24, r20
    1bc4:	8c 93       	st	X, r24
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<PORT_PINS_CONFIG_ARR_SIZE;i++)
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	8f 5f       	subi	r24, 0xFF	; 255
    1bca:	8b 83       	std	Y+3, r24	; 0x03
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	80 32       	cpi	r24, 0x20	; 32
    1bd0:	08 f4       	brcc	.+2      	; 0x1bd4 <Port_Init+0x4c4>
    1bd2:	b1 cd       	rjmp	.-1182   	; 0x1736 <Port_Init+0x26>
					//report error
				}

		    }//for
		}//else
}
    1bd4:	2b 96       	adiw	r28, 0x0b	; 11
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	de bf       	out	0x3e, r29	; 62
    1bdc:	0f be       	out	0x3f, r0	; 63
    1bde:	cd bf       	out	0x3d, r28	; 61
    1be0:	cf 91       	pop	r28
    1be2:	df 91       	pop	r29
    1be4:	08 95       	ret

00001be6 <GIE_voidEnable>:
#include"STD_TYPES.h"
#include"BIT_MATH.h"
#include"../Mcu_HW.h"

void GIE_voidEnable(void)
{
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
	//Enable GIE for External interrupt
	SET_BIT(SREG,SREG_I);
    1bee:	af e5       	ldi	r26, 0x5F	; 95
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	ef e5       	ldi	r30, 0x5F	; 95
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	80 68       	ori	r24, 0x80	; 128
    1bfa:	8c 93       	st	X, r24
}
    1bfc:	cf 91       	pop	r28
    1bfe:	df 91       	pop	r29
    1c00:	08 95       	ret

00001c02 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    1c02:	df 93       	push	r29
    1c04:	cf 93       	push	r28
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
	//Disable GIE for external Interrupt
	CLR_BIT(SREG,SREG_I);
    1c0a:	af e5       	ldi	r26, 0x5F	; 95
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	ef e5       	ldi	r30, 0x5F	; 95
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	8f 77       	andi	r24, 0x7F	; 127
    1c16:	8c 93       	st	X, r24
}
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	08 95       	ret

00001c1e <Enable_Int>:
 */
static void (*EXTI_ARRCALLBACK2FUNC[3])(void) ={NULL_POINTER,NULL_POINTER,NULL_POINTER};


void Enable_Int(const EXT_I * ConfigArr)
{
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
    1c26:	2b 97       	sbiw	r28, 0x0b	; 11
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	f8 94       	cli
    1c2c:	de bf       	out	0x3e, r29	; 62
    1c2e:	0f be       	out	0x3f, r0	; 63
    1c30:	cd bf       	out	0x3d, r28	; 61
    1c32:	9b 83       	std	Y+3, r25	; 0x03
    1c34:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter;
	for(Local_u8Counter=0;Local_u8Counter<3;Local_u8Counter++)
    1c36:	19 82       	std	Y+1, r1	; 0x01
    1c38:	0e c1       	rjmp	.+540    	; 0x1e56 <Enable_Int+0x238>
	{
		switch(ConfigArr[Local_u8Counter].Interrupt_ID)
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	88 2f       	mov	r24, r24
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	9c 01       	movw	r18, r24
    1c42:	22 0f       	add	r18, r18
    1c44:	33 1f       	adc	r19, r19
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	9b 81       	ldd	r25, Y+3	; 0x03
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	e2 0f       	add	r30, r18
    1c4e:	f3 1f       	adc	r31, r19
    1c50:	80 81       	ld	r24, Z
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	3b 87       	std	Y+11, r19	; 0x0b
    1c58:	2a 87       	std	Y+10, r18	; 0x0a
    1c5a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c5c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c5e:	81 30       	cpi	r24, 0x01	; 1
    1c60:	91 05       	cpc	r25, r1
    1c62:	09 f4       	brne	.+2      	; 0x1c66 <Enable_Int+0x48>
    1c64:	4a c0       	rjmp	.+148    	; 0x1cfa <Enable_Int+0xdc>
    1c66:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c68:	3b 85       	ldd	r19, Y+11	; 0x0b
    1c6a:	22 30       	cpi	r18, 0x02	; 2
    1c6c:	31 05       	cpc	r19, r1
    1c6e:	09 f4       	brne	.+2      	; 0x1c72 <Enable_Int+0x54>
    1c70:	b1 c0       	rjmp	.+354    	; 0x1dd4 <Enable_Int+0x1b6>
    1c72:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c74:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c76:	00 97       	sbiw	r24, 0x00	; 0
    1c78:	09 f0       	breq	.+2      	; 0x1c7c <Enable_Int+0x5e>
    1c7a:	ea c0       	rjmp	.+468    	; 0x1e50 <Enable_Int+0x232>
		{
		case EXTI0:
			switch(ConfigArr[Local_u8Counter].Trigger_value)
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	88 2f       	mov	r24, r24
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	9c 01       	movw	r18, r24
    1c84:	22 0f       	add	r18, r18
    1c86:	33 1f       	adc	r19, r19
    1c88:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	e2 0f       	add	r30, r18
    1c90:	f3 1f       	adc	r31, r19
    1c92:	81 81       	ldd	r24, Z+1	; 0x01
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	39 87       	std	Y+9, r19	; 0x09
    1c9a:	28 87       	std	Y+8, r18	; 0x08
    1c9c:	88 85       	ldd	r24, Y+8	; 0x08
    1c9e:	99 85       	ldd	r25, Y+9	; 0x09
    1ca0:	00 97       	sbiw	r24, 0x00	; 0
    1ca2:	31 f0       	breq	.+12     	; 0x1cb0 <Enable_Int+0x92>
    1ca4:	28 85       	ldd	r18, Y+8	; 0x08
    1ca6:	39 85       	ldd	r19, Y+9	; 0x09
    1ca8:	21 30       	cpi	r18, 0x01	; 1
    1caa:	31 05       	cpc	r19, r1
    1cac:	81 f0       	breq	.+32     	; 0x1cce <Enable_Int+0xb0>
    1cae:	1d c0       	rjmp	.+58     	; 0x1cea <Enable_Int+0xcc>
			{
			case Low_level:
				/*set sense control for INT0 To Low level*/
				CLR_BIT(MCUCR,MCUCR_ISC01);
    1cb0:	a5 e5       	ldi	r26, 0x55	; 85
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	e5 e5       	ldi	r30, 0x55	; 85
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	8d 7f       	andi	r24, 0xFD	; 253
    1cbc:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC00);
    1cbe:	a5 e5       	ldi	r26, 0x55	; 85
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	e5 e5       	ldi	r30, 0x55	; 85
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	8e 7f       	andi	r24, 0xFE	; 254
    1cca:	8c 93       	st	X, r24
    1ccc:	0e c0       	rjmp	.+28     	; 0x1cea <Enable_Int+0xcc>
				break;
			case On_change:
				/*set sense control for INT0 To On change*/
				CLR_BIT(MCUCR,MCUCR_ISC01);
    1cce:	a5 e5       	ldi	r26, 0x55	; 85
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e5 e5       	ldi	r30, 0x55	; 85
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	8d 7f       	andi	r24, 0xFD	; 253
    1cda:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC00);
    1cdc:	a5 e5       	ldi	r26, 0x55	; 85
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	e5 e5       	ldi	r30, 0x55	; 85
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	81 60       	ori	r24, 0x01	; 1
    1ce8:	8c 93       	st	X, r24
				break;
			default:
				break;
			}
			/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER ENABLE BIT6*/
			SET_BIT(GICR,GICR_INT0);
    1cea:	ab e5       	ldi	r26, 0x5B	; 91
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	eb e5       	ldi	r30, 0x5B	; 91
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	80 64       	ori	r24, 0x40	; 64
    1cf6:	8c 93       	st	X, r24
    1cf8:	ab c0       	rjmp	.+342    	; 0x1e50 <Enable_Int+0x232>
			break;
			case EXTI1:
				switch(ConfigArr[Local_u8Counter].Trigger_value)
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01
    1cfc:	88 2f       	mov	r24, r24
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	9c 01       	movw	r18, r24
    1d02:	22 0f       	add	r18, r18
    1d04:	33 1f       	adc	r19, r19
    1d06:	8a 81       	ldd	r24, Y+2	; 0x02
    1d08:	9b 81       	ldd	r25, Y+3	; 0x03
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	e2 0f       	add	r30, r18
    1d0e:	f3 1f       	adc	r31, r19
    1d10:	81 81       	ldd	r24, Z+1	; 0x01
    1d12:	28 2f       	mov	r18, r24
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	3f 83       	std	Y+7, r19	; 0x07
    1d18:	2e 83       	std	Y+6, r18	; 0x06
    1d1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d1e:	81 30       	cpi	r24, 0x01	; 1
    1d20:	91 05       	cpc	r25, r1
    1d22:	21 f1       	breq	.+72     	; 0x1d6c <Enable_Int+0x14e>
    1d24:	2e 81       	ldd	r18, Y+6	; 0x06
    1d26:	3f 81       	ldd	r19, Y+7	; 0x07
    1d28:	22 30       	cpi	r18, 0x02	; 2
    1d2a:	31 05       	cpc	r19, r1
    1d2c:	2c f4       	brge	.+10     	; 0x1d38 <Enable_Int+0x11a>
    1d2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d30:	9f 81       	ldd	r25, Y+7	; 0x07
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	61 f0       	breq	.+24     	; 0x1d4e <Enable_Int+0x130>
    1d36:	46 c0       	rjmp	.+140    	; 0x1dc4 <Enable_Int+0x1a6>
    1d38:	2e 81       	ldd	r18, Y+6	; 0x06
    1d3a:	3f 81       	ldd	r19, Y+7	; 0x07
    1d3c:	22 30       	cpi	r18, 0x02	; 2
    1d3e:	31 05       	cpc	r19, r1
    1d40:	21 f1       	breq	.+72     	; 0x1d8a <Enable_Int+0x16c>
    1d42:	8e 81       	ldd	r24, Y+6	; 0x06
    1d44:	9f 81       	ldd	r25, Y+7	; 0x07
    1d46:	83 30       	cpi	r24, 0x03	; 3
    1d48:	91 05       	cpc	r25, r1
    1d4a:	71 f1       	breq	.+92     	; 0x1da8 <Enable_Int+0x18a>
    1d4c:	3b c0       	rjmp	.+118    	; 0x1dc4 <Enable_Int+0x1a6>
				{
				case Low_level:
					/*set sense control for INT0 To falling edge*/
					SET_BIT(MCUCR,MCUCR_ISC01);
    1d4e:	a5 e5       	ldi	r26, 0x55	; 85
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e5 e5       	ldi	r30, 0x55	; 85
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	82 60       	ori	r24, 0x02	; 2
    1d5a:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,MCUCR_ISC00);
    1d5c:	a5 e5       	ldi	r26, 0x55	; 85
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e5 e5       	ldi	r30, 0x55	; 85
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	8e 7f       	andi	r24, 0xFE	; 254
    1d68:	8c 93       	st	X, r24
    1d6a:	2c c0       	rjmp	.+88     	; 0x1dc4 <Enable_Int+0x1a6>
					break;
				case On_change:
					/*set sense control for INT0 To On change*/
					CLR_BIT(MCUCR,MCUCR_ISC01);
    1d6c:	a5 e5       	ldi	r26, 0x55	; 85
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	e5 e5       	ldi	r30, 0x55	; 85
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	8d 7f       	andi	r24, 0xFD	; 253
    1d78:	8c 93       	st	X, r24
					SET_BIT(MCUCR,MCUCR_ISC00);
    1d7a:	a5 e5       	ldi	r26, 0x55	; 85
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	e5 e5       	ldi	r30, 0x55	; 85
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	81 60       	ori	r24, 0x01	; 1
    1d86:	8c 93       	st	X, r24
    1d88:	1d c0       	rjmp	.+58     	; 0x1dc4 <Enable_Int+0x1a6>
					break;
				case Falling_edge:
					/*set sense control for INT0 To falling edge*/
					SET_BIT(MCUCR,MCUCR_ISC01);
    1d8a:	a5 e5       	ldi	r26, 0x55	; 85
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	e5 e5       	ldi	r30, 0x55	; 85
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	82 60       	ori	r24, 0x02	; 2
    1d96:	8c 93       	st	X, r24
					CLR_BIT(MCUCR,MCUCR_ISC00);
    1d98:	a5 e5       	ldi	r26, 0x55	; 85
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	e5 e5       	ldi	r30, 0x55	; 85
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	8e 7f       	andi	r24, 0xFE	; 254
    1da4:	8c 93       	st	X, r24
    1da6:	0e c0       	rjmp	.+28     	; 0x1dc4 <Enable_Int+0x1a6>
					break;
				case Rising_edge:
					/*set sense control for INT0 To Rising edge*/
					SET_BIT(MCUCR,MCUCR_ISC01);
    1da8:	a5 e5       	ldi	r26, 0x55	; 85
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e5 e5       	ldi	r30, 0x55	; 85
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	82 60       	ori	r24, 0x02	; 2
    1db4:	8c 93       	st	X, r24
					SET_BIT(MCUCR,MCUCR_ISC00);
    1db6:	a5 e5       	ldi	r26, 0x55	; 85
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	e5 e5       	ldi	r30, 0x55	; 85
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	81 60       	ori	r24, 0x01	; 1
    1dc2:	8c 93       	st	X, r24
					break;
				default:
					break;
				}
				/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER ENABLE BIT7*/
				SET_BIT(GICR,GICR_INT1);
    1dc4:	ab e5       	ldi	r26, 0x5B	; 91
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	eb e5       	ldi	r30, 0x5B	; 91
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	80 68       	ori	r24, 0x80	; 128
    1dd0:	8c 93       	st	X, r24
    1dd2:	3e c0       	rjmp	.+124    	; 0x1e50 <Enable_Int+0x232>
				break;
				case EXTI2:
					switch(ConfigArr[Local_u8Counter].Trigger_value)
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	88 2f       	mov	r24, r24
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	9c 01       	movw	r18, r24
    1ddc:	22 0f       	add	r18, r18
    1dde:	33 1f       	adc	r19, r19
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	9b 81       	ldd	r25, Y+3	; 0x03
    1de4:	fc 01       	movw	r30, r24
    1de6:	e2 0f       	add	r30, r18
    1de8:	f3 1f       	adc	r31, r19
    1dea:	81 81       	ldd	r24, Z+1	; 0x01
    1dec:	28 2f       	mov	r18, r24
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	3d 83       	std	Y+5, r19	; 0x05
    1df2:	2c 83       	std	Y+4, r18	; 0x04
    1df4:	8c 81       	ldd	r24, Y+4	; 0x04
    1df6:	9d 81       	ldd	r25, Y+5	; 0x05
    1df8:	00 97       	sbiw	r24, 0x00	; 0
    1dfa:	31 f0       	breq	.+12     	; 0x1e08 <Enable_Int+0x1ea>
    1dfc:	2c 81       	ldd	r18, Y+4	; 0x04
    1dfe:	3d 81       	ldd	r19, Y+5	; 0x05
    1e00:	21 30       	cpi	r18, 0x01	; 1
    1e02:	31 05       	cpc	r19, r1
    1e04:	81 f0       	breq	.+32     	; 0x1e26 <Enable_Int+0x208>
    1e06:	1d c0       	rjmp	.+58     	; 0x1e42 <Enable_Int+0x224>
					{
					case Low_level:
						/*set sense control for INT0 To falling edge*/
						SET_BIT(MCUCR,MCUCR_ISC01);
    1e08:	a5 e5       	ldi	r26, 0x55	; 85
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	e5 e5       	ldi	r30, 0x55	; 85
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	82 60       	ori	r24, 0x02	; 2
    1e14:	8c 93       	st	X, r24
						CLR_BIT(MCUCR,MCUCR_ISC00);
    1e16:	a5 e5       	ldi	r26, 0x55	; 85
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	e5 e5       	ldi	r30, 0x55	; 85
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	8e 7f       	andi	r24, 0xFE	; 254
    1e22:	8c 93       	st	X, r24
    1e24:	0e c0       	rjmp	.+28     	; 0x1e42 <Enable_Int+0x224>
						break;
					case On_change:
						/*set sense control for INT0 To On change*/
						CLR_BIT(MCUCR,MCUCR_ISC01);
    1e26:	a5 e5       	ldi	r26, 0x55	; 85
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e5 e5       	ldi	r30, 0x55	; 85
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	8d 7f       	andi	r24, 0xFD	; 253
    1e32:	8c 93       	st	X, r24
						SET_BIT(MCUCR,MCUCR_ISC00);
    1e34:	a5 e5       	ldi	r26, 0x55	; 85
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e5 e5       	ldi	r30, 0x55	; 85
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	81 60       	ori	r24, 0x01	; 1
    1e40:	8c 93       	st	X, r24
						break;
					default:
						break;
					}
					/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER ENABLE BIT5*/
					SET_BIT(GICR,GICR_INT2);
    1e42:	ab e5       	ldi	r26, 0x5B	; 91
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	eb e5       	ldi	r30, 0x5B	; 91
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	80 62       	ori	r24, 0x20	; 32
    1e4e:	8c 93       	st	X, r24


void Enable_Int(const EXT_I * ConfigArr)
{
	u8 Local_u8Counter;
	for(Local_u8Counter=0;Local_u8Counter<3;Local_u8Counter++)
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	8f 5f       	subi	r24, 0xFF	; 255
    1e54:	89 83       	std	Y+1, r24	; 0x01
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	83 30       	cpi	r24, 0x03	; 3
    1e5a:	08 f4       	brcc	.+2      	; 0x1e5e <Enable_Int+0x240>
    1e5c:	ee ce       	rjmp	.-548    	; 0x1c3a <Enable_Int+0x1c>
					SET_BIT(GICR,GICR_INT2);
					break;
		}
	}

}
    1e5e:	2b 96       	adiw	r28, 0x0b	; 11
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	f8 94       	cli
    1e64:	de bf       	out	0x3e, r29	; 62
    1e66:	0f be       	out	0x3f, r0	; 63
    1e68:	cd bf       	out	0x3d, r28	; 61
    1e6a:	cf 91       	pop	r28
    1e6c:	df 91       	pop	r29
    1e6e:	08 95       	ret

00001e70 <Disable_Int>:

void Disable_Int(const EXT_I * ConfigArr)
{
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	00 d0       	rcall	.+0      	; 0x1e76 <Disable_Int+0x6>
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <Disable_Int+0x8>
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
    1e7c:	9a 83       	std	Y+2, r25	; 0x02
    1e7e:	89 83       	std	Y+1, r24	; 0x01
	switch(ConfigArr->Interrupt_ID)
    1e80:	e9 81       	ldd	r30, Y+1	; 0x01
    1e82:	fa 81       	ldd	r31, Y+2	; 0x02
    1e84:	80 81       	ld	r24, Z
    1e86:	28 2f       	mov	r18, r24
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	3c 83       	std	Y+4, r19	; 0x04
    1e8c:	2b 83       	std	Y+3, r18	; 0x03
    1e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e90:	9c 81       	ldd	r25, Y+4	; 0x04
    1e92:	81 30       	cpi	r24, 0x01	; 1
    1e94:	91 05       	cpc	r25, r1
    1e96:	89 f0       	breq	.+34     	; 0x1eba <Disable_Int+0x4a>
    1e98:	2b 81       	ldd	r18, Y+3	; 0x03
    1e9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e9c:	22 30       	cpi	r18, 0x02	; 2
    1e9e:	31 05       	cpc	r19, r1
    1ea0:	a1 f0       	breq	.+40     	; 0x1eca <Disable_Int+0x5a>
    1ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea6:	00 97       	sbiw	r24, 0x00	; 0
    1ea8:	b9 f4       	brne	.+46     	; 0x1ed8 <Disable_Int+0x68>
	{
	case EXTI0:
		/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER DISABLE BIT6*/
		CLR_BIT(GICR,GICR_INT0);
    1eaa:	ab e5       	ldi	r26, 0x5B	; 91
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	eb e5       	ldi	r30, 0x5B	; 91
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	8f 7b       	andi	r24, 0xBF	; 191
    1eb6:	8c 93       	st	X, r24
    1eb8:	0f c0       	rjmp	.+30     	; 0x1ed8 <Disable_Int+0x68>
		break;
	case EXTI1:
		/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER DISABLE BIT7*/
		CLR_BIT(GICR,GICR_INT1);
    1eba:	ab e5       	ldi	r26, 0x5B	; 91
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	eb e5       	ldi	r30, 0x5B	; 91
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	8f 77       	andi	r24, 0x7F	; 127
    1ec6:	8c 93       	st	X, r24
    1ec8:	07 c0       	rjmp	.+14     	; 0x1ed8 <Disable_Int+0x68>
		break;
	case EXTI2:
		/*PeripheraL Interrupt enable for INT0  FROM GICR REGISTER DISABLE BIT5*/
		CLR_BIT(GICR,GICR_INT2);
    1eca:	ab e5       	ldi	r26, 0x5B	; 91
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	eb e5       	ldi	r30, 0x5B	; 91
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	8f 7d       	andi	r24, 0xDF	; 223
    1ed6:	8c 93       	st	X, r24
		break;
	}
}
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	cf 91       	pop	r28
    1ee2:	df 91       	pop	r29
    1ee4:	08 95       	ret

00001ee6 <EXTI_u8INTSetCallBack>:
u8 EXTI_u8INTSetCallBack(const EXT_I * ConfigArr,void (*Copy_pvINTFunc)(void))
{
    1ee6:	df 93       	push	r29
    1ee8:	cf 93       	push	r28
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	28 97       	sbiw	r28, 0x08	; 8
    1ef0:	0f b6       	in	r0, 0x3f	; 63
    1ef2:	f8 94       	cli
    1ef4:	de bf       	out	0x3e, r29	; 62
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	cd bf       	out	0x3d, r28	; 61
    1efa:	9c 83       	std	Y+4, r25	; 0x04
    1efc:	8b 83       	std	Y+3, r24	; 0x03
    1efe:	7e 83       	std	Y+6, r23	; 0x06
    1f00:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8ErrorStatus=NO_ERROR;
    1f02:	82 e0       	ldi	r24, 0x02	; 2
    1f04:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8counter;
	for(Local_u8counter=0;Local_u8counter<3;Local_u8counter++)
    1f06:	19 82       	std	Y+1, r1	; 0x01
    1f08:	59 c0       	rjmp	.+178    	; 0x1fbc <EXTI_u8INTSetCallBack+0xd6>
	{
		switch(ConfigArr[Local_u8counter].Interrupt_ID)
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	88 2f       	mov	r24, r24
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	9c 01       	movw	r18, r24
    1f12:	22 0f       	add	r18, r18
    1f14:	33 1f       	adc	r19, r19
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	e2 0f       	add	r30, r18
    1f1e:	f3 1f       	adc	r31, r19
    1f20:	80 81       	ld	r24, Z
    1f22:	28 2f       	mov	r18, r24
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	38 87       	std	Y+8, r19	; 0x08
    1f28:	2f 83       	std	Y+7, r18	; 0x07
    1f2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f2c:	98 85       	ldd	r25, Y+8	; 0x08
    1f2e:	81 30       	cpi	r24, 0x01	; 1
    1f30:	91 05       	cpc	r25, r1
    1f32:	e1 f0       	breq	.+56     	; 0x1f6c <EXTI_u8INTSetCallBack+0x86>
    1f34:	2f 81       	ldd	r18, Y+7	; 0x07
    1f36:	38 85       	ldd	r19, Y+8	; 0x08
    1f38:	22 30       	cpi	r18, 0x02	; 2
    1f3a:	31 05       	cpc	r19, r1
    1f3c:	51 f1       	breq	.+84     	; 0x1f92 <EXTI_u8INTSetCallBack+0xac>
    1f3e:	8f 81       	ldd	r24, Y+7	; 0x07
    1f40:	98 85       	ldd	r25, Y+8	; 0x08
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	c1 f5       	brne	.+112    	; 0x1fb6 <EXTI_u8INTSetCallBack+0xd0>
		{
		case EXTI0:
			if(Copy_pvINTFunc != NULL)
    1f46:	8d 81       	ldd	r24, Y+5	; 0x05
    1f48:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	69 f0       	breq	.+26     	; 0x1f68 <EXTI_u8INTSetCallBack+0x82>
			{
				EXTI_ARRCALLBACK2FUNC[Local_u8counter]=Copy_pvINTFunc;
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
    1f50:	88 2f       	mov	r24, r24
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	88 0f       	add	r24, r24
    1f56:	99 1f       	adc	r25, r25
    1f58:	fc 01       	movw	r30, r24
    1f5a:	e0 5d       	subi	r30, 0xD0	; 208
    1f5c:	fd 4f       	sbci	r31, 0xFD	; 253
    1f5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f60:	9e 81       	ldd	r25, Y+6	; 0x06
    1f62:	91 83       	std	Z+1, r25	; 0x01
    1f64:	80 83       	st	Z, r24
    1f66:	27 c0       	rjmp	.+78     	; 0x1fb6 <EXTI_u8INTSetCallBack+0xd0>
			}
			else
			{
				Local_u8ErrorStatus = NULL_POINTER;
    1f68:	1a 82       	std	Y+2, r1	; 0x02
    1f6a:	25 c0       	rjmp	.+74     	; 0x1fb6 <EXTI_u8INTSetCallBack+0xd0>
			}
			break;
		case EXTI1:
			if(Copy_pvINTFunc != NULL)
    1f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	69 f0       	breq	.+26     	; 0x1f8e <EXTI_u8INTSetCallBack+0xa8>
			{
				EXTI_ARRCALLBACK2FUNC[Local_u8counter]=Copy_pvINTFunc;
    1f74:	89 81       	ldd	r24, Y+1	; 0x01
    1f76:	88 2f       	mov	r24, r24
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	88 0f       	add	r24, r24
    1f7c:	99 1f       	adc	r25, r25
    1f7e:	fc 01       	movw	r30, r24
    1f80:	e0 5d       	subi	r30, 0xD0	; 208
    1f82:	fd 4f       	sbci	r31, 0xFD	; 253
    1f84:	8d 81       	ldd	r24, Y+5	; 0x05
    1f86:	9e 81       	ldd	r25, Y+6	; 0x06
    1f88:	91 83       	std	Z+1, r25	; 0x01
    1f8a:	80 83       	st	Z, r24
    1f8c:	14 c0       	rjmp	.+40     	; 0x1fb6 <EXTI_u8INTSetCallBack+0xd0>
			}
			else
			{
				Local_u8ErrorStatus = NULL_POINTER;
    1f8e:	1a 82       	std	Y+2, r1	; 0x02
    1f90:	12 c0       	rjmp	.+36     	; 0x1fb6 <EXTI_u8INTSetCallBack+0xd0>
			}
			break;
		case EXTI2:
			if(Copy_pvINTFunc != NULL)
    1f92:	8d 81       	ldd	r24, Y+5	; 0x05
    1f94:	9e 81       	ldd	r25, Y+6	; 0x06
    1f96:	00 97       	sbiw	r24, 0x00	; 0
    1f98:	69 f0       	breq	.+26     	; 0x1fb4 <EXTI_u8INTSetCallBack+0xce>
			{
				EXTI_ARRCALLBACK2FUNC[Local_u8counter]=Copy_pvINTFunc;
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	88 2f       	mov	r24, r24
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	e0 5d       	subi	r30, 0xD0	; 208
    1fa8:	fd 4f       	sbci	r31, 0xFD	; 253
    1faa:	8d 81       	ldd	r24, Y+5	; 0x05
    1fac:	9e 81       	ldd	r25, Y+6	; 0x06
    1fae:	91 83       	std	Z+1, r25	; 0x01
    1fb0:	80 83       	st	Z, r24
    1fb2:	01 c0       	rjmp	.+2      	; 0x1fb6 <EXTI_u8INTSetCallBack+0xd0>
			}
			else
			{
				Local_u8ErrorStatus = NULL_POINTER;
    1fb4:	1a 82       	std	Y+2, r1	; 0x02
}
u8 EXTI_u8INTSetCallBack(const EXT_I * ConfigArr,void (*Copy_pvINTFunc)(void))
{
	u8 Local_u8ErrorStatus=NO_ERROR;
	u8 Local_u8counter;
	for(Local_u8counter=0;Local_u8counter<3;Local_u8counter++)
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	8f 5f       	subi	r24, 0xFF	; 255
    1fba:	89 83       	std	Y+1, r24	; 0x01
    1fbc:	89 81       	ldd	r24, Y+1	; 0x01
    1fbe:	83 30       	cpi	r24, 0x03	; 3
    1fc0:	08 f4       	brcc	.+2      	; 0x1fc4 <EXTI_u8INTSetCallBack+0xde>
    1fc2:	a3 cf       	rjmp	.-186    	; 0x1f0a <EXTI_u8INTSetCallBack+0x24>
			}
			break;
		}
	}

	return Local_u8ErrorStatus;
    1fc4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1fc6:	28 96       	adiw	r28, 0x08	; 8
    1fc8:	0f b6       	in	r0, 0x3f	; 63
    1fca:	f8 94       	cli
    1fcc:	de bf       	out	0x3e, r29	; 62
    1fce:	0f be       	out	0x3f, r0	; 63
    1fd0:	cd bf       	out	0x3d, r28	; 61
    1fd2:	cf 91       	pop	r28
    1fd4:	df 91       	pop	r29
    1fd6:	08 95       	ret

00001fd8 <__vector_1>:

ISR(INT0_vect)
{
    1fd8:	1f 92       	push	r1
    1fda:	0f 92       	push	r0
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	0f 92       	push	r0
    1fe0:	11 24       	eor	r1, r1
    1fe2:	2f 93       	push	r18
    1fe4:	3f 93       	push	r19
    1fe6:	4f 93       	push	r20
    1fe8:	5f 93       	push	r21
    1fea:	6f 93       	push	r22
    1fec:	7f 93       	push	r23
    1fee:	8f 93       	push	r24
    1ff0:	9f 93       	push	r25
    1ff2:	af 93       	push	r26
    1ff4:	bf 93       	push	r27
    1ff6:	ef 93       	push	r30
    1ff8:	ff 93       	push	r31
    1ffa:	df 93       	push	r29
    1ffc:	cf 93       	push	r28
    1ffe:	cd b7       	in	r28, 0x3d	; 61
    2000:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ARRCALLBACK2FUNC[0] != NULL)
    2002:	80 91 30 02 	lds	r24, 0x0230
    2006:	90 91 31 02 	lds	r25, 0x0231
    200a:	00 97       	sbiw	r24, 0x00	; 0
    200c:	29 f0       	breq	.+10     	; 0x2018 <__vector_1+0x40>
		{
		EXTI_ARRCALLBACK2FUNC[0]();
    200e:	e0 91 30 02 	lds	r30, 0x0230
    2012:	f0 91 31 02 	lds	r31, 0x0231
    2016:	09 95       	icall
		}
		else
		{
			/*Stop*/
		}
}
    2018:	cf 91       	pop	r28
    201a:	df 91       	pop	r29
    201c:	ff 91       	pop	r31
    201e:	ef 91       	pop	r30
    2020:	bf 91       	pop	r27
    2022:	af 91       	pop	r26
    2024:	9f 91       	pop	r25
    2026:	8f 91       	pop	r24
    2028:	7f 91       	pop	r23
    202a:	6f 91       	pop	r22
    202c:	5f 91       	pop	r21
    202e:	4f 91       	pop	r20
    2030:	3f 91       	pop	r19
    2032:	2f 91       	pop	r18
    2034:	0f 90       	pop	r0
    2036:	0f be       	out	0x3f, r0	; 63
    2038:	0f 90       	pop	r0
    203a:	1f 90       	pop	r1
    203c:	18 95       	reti

0000203e <__vector_2>:
ISR(INT1_vect)
{
    203e:	1f 92       	push	r1
    2040:	0f 92       	push	r0
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	0f 92       	push	r0
    2046:	11 24       	eor	r1, r1
    2048:	df 93       	push	r29
    204a:	cf 93       	push	r28
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62

}
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	0f 90       	pop	r0
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	0f 90       	pop	r0
    205a:	1f 90       	pop	r1
    205c:	18 95       	reti

0000205e <__vector_3>:
ISR(INT2_vect)
{
    205e:	1f 92       	push	r1
    2060:	0f 92       	push	r0
    2062:	0f b6       	in	r0, 0x3f	; 63
    2064:	0f 92       	push	r0
    2066:	11 24       	eor	r1, r1
    2068:	df 93       	push	r29
    206a:	cf 93       	push	r28
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62

}
    2070:	cf 91       	pop	r28
    2072:	df 91       	pop	r29
    2074:	0f 90       	pop	r0
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	0f 90       	pop	r0
    207a:	1f 90       	pop	r1
    207c:	18 95       	reti

0000207e <M_Dio_en_getPinValue>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : Dio_HIGH or DIO_LOW
******************************************/
Dio_LevelType  M_Dio_en_getPinValue(Dio_ChannelType ChannelId)
{
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	00 d0       	rcall	.+0      	; 0x2084 <M_Dio_en_getPinValue+0x6>
    2084:	00 d0       	rcall	.+0      	; 0x2086 <M_Dio_en_getPinValue+0x8>
    2086:	00 d0       	rcall	.+0      	; 0x2088 <M_Dio_en_getPinValue+0xa>
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	8c 83       	std	Y+4, r24	; 0x04
	u8 pin = ChannelId % 10;
    208e:	8c 81       	ldd	r24, Y+4	; 0x04
    2090:	9a e0       	ldi	r25, 0x0A	; 10
    2092:	69 2f       	mov	r22, r25
    2094:	0e 94 c9 14 	call	0x2992	; 0x2992 <__udivmodqi4>
    2098:	89 2f       	mov	r24, r25
    209a:	8b 83       	std	Y+3, r24	; 0x03
	u8 port = ChannelId / 10;
    209c:	8c 81       	ldd	r24, Y+4	; 0x04
    209e:	9a e0       	ldi	r25, 0x0A	; 10
    20a0:	69 2f       	mov	r22, r25
    20a2:	0e 94 c9 14 	call	0x2992	; 0x2992 <__udivmodqi4>
    20a6:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType Local_levelType;
	switch(port)
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	28 2f       	mov	r18, r24
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	3e 83       	std	Y+6, r19	; 0x06
    20b0:	2d 83       	std	Y+5, r18	; 0x05
    20b2:	4d 81       	ldd	r20, Y+5	; 0x05
    20b4:	5e 81       	ldd	r21, Y+6	; 0x06
    20b6:	42 30       	cpi	r20, 0x02	; 2
    20b8:	51 05       	cpc	r21, r1
    20ba:	41 f1       	breq	.+80     	; 0x210c <M_Dio_en_getPinValue+0x8e>
    20bc:	8d 81       	ldd	r24, Y+5	; 0x05
    20be:	9e 81       	ldd	r25, Y+6	; 0x06
    20c0:	83 30       	cpi	r24, 0x03	; 3
    20c2:	91 05       	cpc	r25, r1
    20c4:	34 f4       	brge	.+12     	; 0x20d2 <M_Dio_en_getPinValue+0x54>
    20c6:	2d 81       	ldd	r18, Y+5	; 0x05
    20c8:	3e 81       	ldd	r19, Y+6	; 0x06
    20ca:	21 30       	cpi	r18, 0x01	; 1
    20cc:	31 05       	cpc	r19, r1
    20ce:	61 f0       	breq	.+24     	; 0x20e8 <M_Dio_en_getPinValue+0x6a>
    20d0:	52 c0       	rjmp	.+164    	; 0x2176 <M_Dio_en_getPinValue+0xf8>
    20d2:	4d 81       	ldd	r20, Y+5	; 0x05
    20d4:	5e 81       	ldd	r21, Y+6	; 0x06
    20d6:	43 30       	cpi	r20, 0x03	; 3
    20d8:	51 05       	cpc	r21, r1
    20da:	51 f1       	breq	.+84     	; 0x2130 <M_Dio_en_getPinValue+0xb2>
    20dc:	8d 81       	ldd	r24, Y+5	; 0x05
    20de:	9e 81       	ldd	r25, Y+6	; 0x06
    20e0:	84 30       	cpi	r24, 0x04	; 4
    20e2:	91 05       	cpc	r25, r1
    20e4:	b9 f1       	breq	.+110    	; 0x2154 <M_Dio_en_getPinValue+0xd6>
    20e6:	47 c0       	rjmp	.+142    	; 0x2176 <M_Dio_en_getPinValue+0xf8>
	{
	case DIO_PORTA :Local_levelType = GET_BIT( PINA_REG,pin);break;
    20e8:	e9 e3       	ldi	r30, 0x39	; 57
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	28 2f       	mov	r18, r24
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	88 2f       	mov	r24, r24
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	a9 01       	movw	r20, r18
    20fa:	02 c0       	rjmp	.+4      	; 0x2100 <M_Dio_en_getPinValue+0x82>
    20fc:	55 95       	asr	r21
    20fe:	47 95       	ror	r20
    2100:	8a 95       	dec	r24
    2102:	e2 f7       	brpl	.-8      	; 0x20fc <M_Dio_en_getPinValue+0x7e>
    2104:	ca 01       	movw	r24, r20
    2106:	81 70       	andi	r24, 0x01	; 1
    2108:	89 83       	std	Y+1, r24	; 0x01
    210a:	35 c0       	rjmp	.+106    	; 0x2176 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTB :Local_levelType = GET_BIT( PINB_REG,pin);break;
    210c:	e6 e3       	ldi	r30, 0x36	; 54
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	28 2f       	mov	r18, r24
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	88 2f       	mov	r24, r24
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	a9 01       	movw	r20, r18
    211e:	02 c0       	rjmp	.+4      	; 0x2124 <M_Dio_en_getPinValue+0xa6>
    2120:	55 95       	asr	r21
    2122:	47 95       	ror	r20
    2124:	8a 95       	dec	r24
    2126:	e2 f7       	brpl	.-8      	; 0x2120 <M_Dio_en_getPinValue+0xa2>
    2128:	ca 01       	movw	r24, r20
    212a:	81 70       	andi	r24, 0x01	; 1
    212c:	89 83       	std	Y+1, r24	; 0x01
    212e:	23 c0       	rjmp	.+70     	; 0x2176 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTC :Local_levelType = GET_BIT( PINC_REG,pin);break;
    2130:	e3 e3       	ldi	r30, 0x33	; 51
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	28 2f       	mov	r18, r24
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	8b 81       	ldd	r24, Y+3	; 0x03
    213c:	88 2f       	mov	r24, r24
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	a9 01       	movw	r20, r18
    2142:	02 c0       	rjmp	.+4      	; 0x2148 <M_Dio_en_getPinValue+0xca>
    2144:	55 95       	asr	r21
    2146:	47 95       	ror	r20
    2148:	8a 95       	dec	r24
    214a:	e2 f7       	brpl	.-8      	; 0x2144 <M_Dio_en_getPinValue+0xc6>
    214c:	ca 01       	movw	r24, r20
    214e:	81 70       	andi	r24, 0x01	; 1
    2150:	89 83       	std	Y+1, r24	; 0x01
    2152:	11 c0       	rjmp	.+34     	; 0x2176 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTD :Local_levelType = GET_BIT( PIND_REG,pin);break;
    2154:	e0 e3       	ldi	r30, 0x30	; 48
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	28 2f       	mov	r18, r24
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	8b 81       	ldd	r24, Y+3	; 0x03
    2160:	88 2f       	mov	r24, r24
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	a9 01       	movw	r20, r18
    2166:	02 c0       	rjmp	.+4      	; 0x216c <M_Dio_en_getPinValue+0xee>
    2168:	55 95       	asr	r21
    216a:	47 95       	ror	r20
    216c:	8a 95       	dec	r24
    216e:	e2 f7       	brpl	.-8      	; 0x2168 <M_Dio_en_getPinValue+0xea>
    2170:	ca 01       	movw	r24, r20
    2172:	81 70       	andi	r24, 0x01	; 1
    2174:	89 83       	std	Y+1, r24	; 0x01
	}
    return Local_levelType ;
    2176:	89 81       	ldd	r24, Y+1	; 0x01
}
    2178:	26 96       	adiw	r28, 0x06	; 6
    217a:	0f b6       	in	r0, 0x3f	; 63
    217c:	f8 94       	cli
    217e:	de bf       	out	0x3e, r29	; 62
    2180:	0f be       	out	0x3f, r0	; 63
    2182:	cd bf       	out	0x3d, r28	; 61
    2184:	cf 91       	pop	r28
    2186:	df 91       	pop	r29
    2188:	08 95       	ret

0000218a <M_Dio_void_setPinValue>:
  parameters (in)  :  channelId (pin) ,Level (Dio_HIGH or Dio_LOW)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPinValue(Dio_ChannelType ChannelId,Dio_LevelType Level)
{
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	cd b7       	in	r28, 0x3d	; 61
    2190:	de b7       	in	r29, 0x3e	; 62
    2192:	28 97       	sbiw	r28, 0x08	; 8
    2194:	0f b6       	in	r0, 0x3f	; 63
    2196:	f8 94       	cli
    2198:	de bf       	out	0x3e, r29	; 62
    219a:	0f be       	out	0x3f, r0	; 63
    219c:	cd bf       	out	0x3d, r28	; 61
    219e:	8b 83       	std	Y+3, r24	; 0x03
    21a0:	6c 83       	std	Y+4, r22	; 0x04
	u8 pin = ChannelId % 10;
    21a2:	8b 81       	ldd	r24, Y+3	; 0x03
    21a4:	9a e0       	ldi	r25, 0x0A	; 10
    21a6:	69 2f       	mov	r22, r25
    21a8:	0e 94 c9 14 	call	0x2992	; 0x2992 <__udivmodqi4>
    21ac:	89 2f       	mov	r24, r25
    21ae:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = ChannelId / 10;
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	9a e0       	ldi	r25, 0x0A	; 10
    21b4:	69 2f       	mov	r22, r25
    21b6:	0e 94 c9 14 	call	0x2992	; 0x2992 <__udivmodqi4>
    21ba:	89 83       	std	Y+1, r24	; 0x01

	if(Level == DIO_HIGH)
    21bc:	8c 81       	ldd	r24, Y+4	; 0x04
    21be:	81 30       	cpi	r24, 0x01	; 1
    21c0:	09 f0       	breq	.+2      	; 0x21c4 <M_Dio_void_setPinValue+0x3a>
    21c2:	70 c0       	rjmp	.+224    	; 0x22a4 <M_Dio_void_setPinValue+0x11a>
	{
		switch(port)
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	28 2f       	mov	r18, r24
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	38 87       	std	Y+8, r19	; 0x08
    21cc:	2f 83       	std	Y+7, r18	; 0x07
    21ce:	8f 81       	ldd	r24, Y+7	; 0x07
    21d0:	98 85       	ldd	r25, Y+8	; 0x08
    21d2:	82 30       	cpi	r24, 0x02	; 2
    21d4:	91 05       	cpc	r25, r1
    21d6:	51 f1       	breq	.+84     	; 0x222c <M_Dio_void_setPinValue+0xa2>
    21d8:	2f 81       	ldd	r18, Y+7	; 0x07
    21da:	38 85       	ldd	r19, Y+8	; 0x08
    21dc:	23 30       	cpi	r18, 0x03	; 3
    21de:	31 05       	cpc	r19, r1
    21e0:	34 f4       	brge	.+12     	; 0x21ee <M_Dio_void_setPinValue+0x64>
    21e2:	8f 81       	ldd	r24, Y+7	; 0x07
    21e4:	98 85       	ldd	r25, Y+8	; 0x08
    21e6:	81 30       	cpi	r24, 0x01	; 1
    21e8:	91 05       	cpc	r25, r1
    21ea:	61 f0       	breq	.+24     	; 0x2204 <M_Dio_void_setPinValue+0x7a>
    21ec:	d3 c0       	rjmp	.+422    	; 0x2394 <M_Dio_void_setPinValue+0x20a>
    21ee:	2f 81       	ldd	r18, Y+7	; 0x07
    21f0:	38 85       	ldd	r19, Y+8	; 0x08
    21f2:	23 30       	cpi	r18, 0x03	; 3
    21f4:	31 05       	cpc	r19, r1
    21f6:	71 f1       	breq	.+92     	; 0x2254 <M_Dio_void_setPinValue+0xca>
    21f8:	8f 81       	ldd	r24, Y+7	; 0x07
    21fa:	98 85       	ldd	r25, Y+8	; 0x08
    21fc:	84 30       	cpi	r24, 0x04	; 4
    21fe:	91 05       	cpc	r25, r1
    2200:	e9 f1       	breq	.+122    	; 0x227c <M_Dio_void_setPinValue+0xf2>
    2202:	c8 c0       	rjmp	.+400    	; 0x2394 <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : SET_BIT( PORTA_REG,pin);break;
    2204:	ab e3       	ldi	r26, 0x3B	; 59
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	eb e3       	ldi	r30, 0x3B	; 59
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	48 2f       	mov	r20, r24
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	02 2e       	mov	r0, r18
    221c:	02 c0       	rjmp	.+4      	; 0x2222 <M_Dio_void_setPinValue+0x98>
    221e:	88 0f       	add	r24, r24
    2220:	99 1f       	adc	r25, r25
    2222:	0a 94       	dec	r0
    2224:	e2 f7       	brpl	.-8      	; 0x221e <M_Dio_void_setPinValue+0x94>
    2226:	84 2b       	or	r24, r20
    2228:	8c 93       	st	X, r24
    222a:	b4 c0       	rjmp	.+360    	; 0x2394 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : SET_BIT( PORTB_REG,pin);break;
    222c:	a8 e3       	ldi	r26, 0x38	; 56
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	e8 e3       	ldi	r30, 0x38	; 56
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	48 2f       	mov	r20, r24
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	02 2e       	mov	r0, r18
    2244:	02 c0       	rjmp	.+4      	; 0x224a <M_Dio_void_setPinValue+0xc0>
    2246:	88 0f       	add	r24, r24
    2248:	99 1f       	adc	r25, r25
    224a:	0a 94       	dec	r0
    224c:	e2 f7       	brpl	.-8      	; 0x2246 <M_Dio_void_setPinValue+0xbc>
    224e:	84 2b       	or	r24, r20
    2250:	8c 93       	st	X, r24
    2252:	a0 c0       	rjmp	.+320    	; 0x2394 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : SET_BIT( PORTC_REG,pin);break;
    2254:	a5 e3       	ldi	r26, 0x35	; 53
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	e5 e3       	ldi	r30, 0x35	; 53
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	48 2f       	mov	r20, r24
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	28 2f       	mov	r18, r24
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	02 2e       	mov	r0, r18
    226c:	02 c0       	rjmp	.+4      	; 0x2272 <M_Dio_void_setPinValue+0xe8>
    226e:	88 0f       	add	r24, r24
    2270:	99 1f       	adc	r25, r25
    2272:	0a 94       	dec	r0
    2274:	e2 f7       	brpl	.-8      	; 0x226e <M_Dio_void_setPinValue+0xe4>
    2276:	84 2b       	or	r24, r20
    2278:	8c 93       	st	X, r24
    227a:	8c c0       	rjmp	.+280    	; 0x2394 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : SET_BIT( PORTD_REG,pin);break;
    227c:	a2 e3       	ldi	r26, 0x32	; 50
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	e2 e3       	ldi	r30, 0x32	; 50
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	48 2f       	mov	r20, r24
    2288:	8a 81       	ldd	r24, Y+2	; 0x02
    228a:	28 2f       	mov	r18, r24
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	02 2e       	mov	r0, r18
    2294:	02 c0       	rjmp	.+4      	; 0x229a <M_Dio_void_setPinValue+0x110>
    2296:	88 0f       	add	r24, r24
    2298:	99 1f       	adc	r25, r25
    229a:	0a 94       	dec	r0
    229c:	e2 f7       	brpl	.-8      	; 0x2296 <M_Dio_void_setPinValue+0x10c>
    229e:	84 2b       	or	r24, r20
    22a0:	8c 93       	st	X, r24
    22a2:	78 c0       	rjmp	.+240    	; 0x2394 <M_Dio_void_setPinValue+0x20a>
		}

	}
	else if (Level == DIO_LOW)
    22a4:	8c 81       	ldd	r24, Y+4	; 0x04
    22a6:	88 23       	and	r24, r24
    22a8:	09 f0       	breq	.+2      	; 0x22ac <M_Dio_void_setPinValue+0x122>
    22aa:	74 c0       	rjmp	.+232    	; 0x2394 <M_Dio_void_setPinValue+0x20a>
	{
		switch(port)
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
    22ae:	28 2f       	mov	r18, r24
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	3e 83       	std	Y+6, r19	; 0x06
    22b4:	2d 83       	std	Y+5, r18	; 0x05
    22b6:	8d 81       	ldd	r24, Y+5	; 0x05
    22b8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ba:	82 30       	cpi	r24, 0x02	; 2
    22bc:	91 05       	cpc	r25, r1
    22be:	61 f1       	breq	.+88     	; 0x2318 <M_Dio_void_setPinValue+0x18e>
    22c0:	2d 81       	ldd	r18, Y+5	; 0x05
    22c2:	3e 81       	ldd	r19, Y+6	; 0x06
    22c4:	23 30       	cpi	r18, 0x03	; 3
    22c6:	31 05       	cpc	r19, r1
    22c8:	34 f4       	brge	.+12     	; 0x22d6 <M_Dio_void_setPinValue+0x14c>
    22ca:	8d 81       	ldd	r24, Y+5	; 0x05
    22cc:	9e 81       	ldd	r25, Y+6	; 0x06
    22ce:	81 30       	cpi	r24, 0x01	; 1
    22d0:	91 05       	cpc	r25, r1
    22d2:	69 f0       	breq	.+26     	; 0x22ee <M_Dio_void_setPinValue+0x164>
    22d4:	5f c0       	rjmp	.+190    	; 0x2394 <M_Dio_void_setPinValue+0x20a>
    22d6:	2d 81       	ldd	r18, Y+5	; 0x05
    22d8:	3e 81       	ldd	r19, Y+6	; 0x06
    22da:	23 30       	cpi	r18, 0x03	; 3
    22dc:	31 05       	cpc	r19, r1
    22de:	89 f1       	breq	.+98     	; 0x2342 <M_Dio_void_setPinValue+0x1b8>
    22e0:	8d 81       	ldd	r24, Y+5	; 0x05
    22e2:	9e 81       	ldd	r25, Y+6	; 0x06
    22e4:	84 30       	cpi	r24, 0x04	; 4
    22e6:	91 05       	cpc	r25, r1
    22e8:	09 f4       	brne	.+2      	; 0x22ec <M_Dio_void_setPinValue+0x162>
    22ea:	40 c0       	rjmp	.+128    	; 0x236c <M_Dio_void_setPinValue+0x1e2>
    22ec:	53 c0       	rjmp	.+166    	; 0x2394 <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : CLR_BIT( PORTA_REG,pin);break;
    22ee:	ab e3       	ldi	r26, 0x3B	; 59
    22f0:	b0 e0       	ldi	r27, 0x00	; 0
    22f2:	eb e3       	ldi	r30, 0x3B	; 59
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
    22f8:	48 2f       	mov	r20, r24
    22fa:	8a 81       	ldd	r24, Y+2	; 0x02
    22fc:	28 2f       	mov	r18, r24
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	02 2e       	mov	r0, r18
    2306:	02 c0       	rjmp	.+4      	; 0x230c <M_Dio_void_setPinValue+0x182>
    2308:	88 0f       	add	r24, r24
    230a:	99 1f       	adc	r25, r25
    230c:	0a 94       	dec	r0
    230e:	e2 f7       	brpl	.-8      	; 0x2308 <M_Dio_void_setPinValue+0x17e>
    2310:	80 95       	com	r24
    2312:	84 23       	and	r24, r20
    2314:	8c 93       	st	X, r24
    2316:	3e c0       	rjmp	.+124    	; 0x2394 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : CLR_BIT( PORTB_REG,pin);break;
    2318:	a8 e3       	ldi	r26, 0x38	; 56
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	e8 e3       	ldi	r30, 0x38	; 56
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	48 2f       	mov	r20, r24
    2324:	8a 81       	ldd	r24, Y+2	; 0x02
    2326:	28 2f       	mov	r18, r24
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	02 2e       	mov	r0, r18
    2330:	02 c0       	rjmp	.+4      	; 0x2336 <M_Dio_void_setPinValue+0x1ac>
    2332:	88 0f       	add	r24, r24
    2334:	99 1f       	adc	r25, r25
    2336:	0a 94       	dec	r0
    2338:	e2 f7       	brpl	.-8      	; 0x2332 <M_Dio_void_setPinValue+0x1a8>
    233a:	80 95       	com	r24
    233c:	84 23       	and	r24, r20
    233e:	8c 93       	st	X, r24
    2340:	29 c0       	rjmp	.+82     	; 0x2394 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : CLR_BIT( PORTC_REG,pin);break;
    2342:	a5 e3       	ldi	r26, 0x35	; 53
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	e5 e3       	ldi	r30, 0x35	; 53
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	48 2f       	mov	r20, r24
    234e:	8a 81       	ldd	r24, Y+2	; 0x02
    2350:	28 2f       	mov	r18, r24
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	02 2e       	mov	r0, r18
    235a:	02 c0       	rjmp	.+4      	; 0x2360 <M_Dio_void_setPinValue+0x1d6>
    235c:	88 0f       	add	r24, r24
    235e:	99 1f       	adc	r25, r25
    2360:	0a 94       	dec	r0
    2362:	e2 f7       	brpl	.-8      	; 0x235c <M_Dio_void_setPinValue+0x1d2>
    2364:	80 95       	com	r24
    2366:	84 23       	and	r24, r20
    2368:	8c 93       	st	X, r24
    236a:	14 c0       	rjmp	.+40     	; 0x2394 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : CLR_BIT( PORTD_REG,pin);break;
    236c:	a2 e3       	ldi	r26, 0x32	; 50
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	e2 e3       	ldi	r30, 0x32	; 50
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	48 2f       	mov	r20, r24
    2378:	8a 81       	ldd	r24, Y+2	; 0x02
    237a:	28 2f       	mov	r18, r24
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	02 2e       	mov	r0, r18
    2384:	02 c0       	rjmp	.+4      	; 0x238a <M_Dio_void_setPinValue+0x200>
    2386:	88 0f       	add	r24, r24
    2388:	99 1f       	adc	r25, r25
    238a:	0a 94       	dec	r0
    238c:	e2 f7       	brpl	.-8      	; 0x2386 <M_Dio_void_setPinValue+0x1fc>
    238e:	80 95       	com	r24
    2390:	84 23       	and	r24, r20
    2392:	8c 93       	st	X, r24
		}

	}

}
    2394:	28 96       	adiw	r28, 0x08	; 8
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	f8 94       	cli
    239a:	de bf       	out	0x3e, r29	; 62
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	cd bf       	out	0x3d, r28	; 61
    23a0:	cf 91       	pop	r28
    23a2:	df 91       	pop	r29
    23a4:	08 95       	ret

000023a6 <M_Dio_en_getPortValue>:
  parameters (in)  :  PortId
  parameters (out) :  Non
  Return Value     : Dio_PortLevelType
******************************************/
Dio_PortLevelType M_Dio_en_getPortValue(Dio_PortType PortId)
{
    23a6:	df 93       	push	r29
    23a8:	cf 93       	push	r28
    23aa:	00 d0       	rcall	.+0      	; 0x23ac <M_Dio_en_getPortValue+0x6>
    23ac:	00 d0       	rcall	.+0      	; 0x23ae <M_Dio_en_getPortValue+0x8>
    23ae:	cd b7       	in	r28, 0x3d	; 61
    23b0:	de b7       	in	r29, 0x3e	; 62
    23b2:	8a 83       	std	Y+2, r24	; 0x02
	Dio_PortLevelType Local_Reading;

	switch( PortId)
    23b4:	8a 81       	ldd	r24, Y+2	; 0x02
    23b6:	28 2f       	mov	r18, r24
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	3c 83       	std	Y+4, r19	; 0x04
    23bc:	2b 83       	std	Y+3, r18	; 0x03
    23be:	8b 81       	ldd	r24, Y+3	; 0x03
    23c0:	9c 81       	ldd	r25, Y+4	; 0x04
    23c2:	82 30       	cpi	r24, 0x02	; 2
    23c4:	91 05       	cpc	r25, r1
    23c6:	d9 f0       	breq	.+54     	; 0x23fe <M_Dio_en_getPortValue+0x58>
    23c8:	2b 81       	ldd	r18, Y+3	; 0x03
    23ca:	3c 81       	ldd	r19, Y+4	; 0x04
    23cc:	23 30       	cpi	r18, 0x03	; 3
    23ce:	31 05       	cpc	r19, r1
    23d0:	34 f4       	brge	.+12     	; 0x23de <M_Dio_en_getPortValue+0x38>
    23d2:	8b 81       	ldd	r24, Y+3	; 0x03
    23d4:	9c 81       	ldd	r25, Y+4	; 0x04
    23d6:	81 30       	cpi	r24, 0x01	; 1
    23d8:	91 05       	cpc	r25, r1
    23da:	61 f0       	breq	.+24     	; 0x23f4 <M_Dio_en_getPortValue+0x4e>
    23dc:	1e c0       	rjmp	.+60     	; 0x241a <M_Dio_en_getPortValue+0x74>
    23de:	2b 81       	ldd	r18, Y+3	; 0x03
    23e0:	3c 81       	ldd	r19, Y+4	; 0x04
    23e2:	23 30       	cpi	r18, 0x03	; 3
    23e4:	31 05       	cpc	r19, r1
    23e6:	81 f0       	breq	.+32     	; 0x2408 <M_Dio_en_getPortValue+0x62>
    23e8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ea:	9c 81       	ldd	r25, Y+4	; 0x04
    23ec:	84 30       	cpi	r24, 0x04	; 4
    23ee:	91 05       	cpc	r25, r1
    23f0:	81 f0       	breq	.+32     	; 0x2412 <M_Dio_en_getPortValue+0x6c>
    23f2:	13 c0       	rjmp	.+38     	; 0x241a <M_Dio_en_getPortValue+0x74>
	{
	case DIO_PORTA :Local_Reading =  PORTA_REG;break;
    23f4:	eb e3       	ldi	r30, 0x3B	; 59
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	80 81       	ld	r24, Z
    23fa:	89 83       	std	Y+1, r24	; 0x01
    23fc:	0e c0       	rjmp	.+28     	; 0x241a <M_Dio_en_getPortValue+0x74>
	case DIO_PORTB :Local_Reading =  PORTB_REG;break;
    23fe:	e8 e3       	ldi	r30, 0x38	; 56
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	89 83       	std	Y+1, r24	; 0x01
    2406:	09 c0       	rjmp	.+18     	; 0x241a <M_Dio_en_getPortValue+0x74>
	case DIO_PORTC :Local_Reading =  PORTC_REG;break;
    2408:	e5 e3       	ldi	r30, 0x35	; 53
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	89 83       	std	Y+1, r24	; 0x01
    2410:	04 c0       	rjmp	.+8      	; 0x241a <M_Dio_en_getPortValue+0x74>
	case DIO_PORTD :Local_Reading =  PORTD_REG;break;
    2412:	e2 e3       	ldi	r30, 0x32	; 50
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	80 81       	ld	r24, Z
    2418:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_Reading;
    241a:	89 81       	ldd	r24, Y+1	; 0x01
}
    241c:	0f 90       	pop	r0
    241e:	0f 90       	pop	r0
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	cf 91       	pop	r28
    2426:	df 91       	pop	r29
    2428:	08 95       	ret

0000242a <M_Dio_void_setPortValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPortValue(Dio_PortType PortId,Dio_PortLevelType Level)
{
    242a:	df 93       	push	r29
    242c:	cf 93       	push	r28
    242e:	00 d0       	rcall	.+0      	; 0x2430 <M_Dio_void_setPortValue+0x6>
    2430:	00 d0       	rcall	.+0      	; 0x2432 <M_Dio_void_setPortValue+0x8>
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
    2436:	89 83       	std	Y+1, r24	; 0x01
    2438:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortId)
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	28 2f       	mov	r18, r24
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	3c 83       	std	Y+4, r19	; 0x04
    2442:	2b 83       	std	Y+3, r18	; 0x03
    2444:	8b 81       	ldd	r24, Y+3	; 0x03
    2446:	9c 81       	ldd	r25, Y+4	; 0x04
    2448:	82 30       	cpi	r24, 0x02	; 2
    244a:	91 05       	cpc	r25, r1
    244c:	d9 f0       	breq	.+54     	; 0x2484 <M_Dio_void_setPortValue+0x5a>
    244e:	2b 81       	ldd	r18, Y+3	; 0x03
    2450:	3c 81       	ldd	r19, Y+4	; 0x04
    2452:	23 30       	cpi	r18, 0x03	; 3
    2454:	31 05       	cpc	r19, r1
    2456:	34 f4       	brge	.+12     	; 0x2464 <M_Dio_void_setPortValue+0x3a>
    2458:	8b 81       	ldd	r24, Y+3	; 0x03
    245a:	9c 81       	ldd	r25, Y+4	; 0x04
    245c:	81 30       	cpi	r24, 0x01	; 1
    245e:	91 05       	cpc	r25, r1
    2460:	61 f0       	breq	.+24     	; 0x247a <M_Dio_void_setPortValue+0x50>
    2462:	1e c0       	rjmp	.+60     	; 0x24a0 <M_Dio_void_setPortValue+0x76>
    2464:	2b 81       	ldd	r18, Y+3	; 0x03
    2466:	3c 81       	ldd	r19, Y+4	; 0x04
    2468:	23 30       	cpi	r18, 0x03	; 3
    246a:	31 05       	cpc	r19, r1
    246c:	81 f0       	breq	.+32     	; 0x248e <M_Dio_void_setPortValue+0x64>
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	9c 81       	ldd	r25, Y+4	; 0x04
    2472:	84 30       	cpi	r24, 0x04	; 4
    2474:	91 05       	cpc	r25, r1
    2476:	81 f0       	breq	.+32     	; 0x2498 <M_Dio_void_setPortValue+0x6e>
    2478:	13 c0       	rjmp	.+38     	; 0x24a0 <M_Dio_void_setPortValue+0x76>
	{
    	case DIO_PORTA : PORTA_REG = Level;break;
    247a:	eb e3       	ldi	r30, 0x3B	; 59
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	8a 81       	ldd	r24, Y+2	; 0x02
    2480:	80 83       	st	Z, r24
    2482:	0e c0       	rjmp	.+28     	; 0x24a0 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTB : PORTB_REG = Level;break;
    2484:	e8 e3       	ldi	r30, 0x38	; 56
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	8a 81       	ldd	r24, Y+2	; 0x02
    248a:	80 83       	st	Z, r24
    248c:	09 c0       	rjmp	.+18     	; 0x24a0 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTC : PORTC_REG = Level;break;
    248e:	e5 e3       	ldi	r30, 0x35	; 53
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	8a 81       	ldd	r24, Y+2	; 0x02
    2494:	80 83       	st	Z, r24
    2496:	04 c0       	rjmp	.+8      	; 0x24a0 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTD : PORTD_REG = Level;break;
    2498:	e2 e3       	ldi	r30, 0x32	; 50
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	8a 81       	ldd	r24, Y+2	; 0x02
    249e:	80 83       	st	Z, r24
	}
}
    24a0:	0f 90       	pop	r0
    24a2:	0f 90       	pop	r0
    24a4:	0f 90       	pop	r0
    24a6:	0f 90       	pop	r0
    24a8:	cf 91       	pop	r28
    24aa:	df 91       	pop	r29
    24ac:	08 95       	ret

000024ae <M_Dio_void_togglePinValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_togglePinValue(Dio_ChannelType channelId)
{
    24ae:	df 93       	push	r29
    24b0:	cf 93       	push	r28
    24b2:	00 d0       	rcall	.+0      	; 0x24b4 <M_Dio_void_togglePinValue+0x6>
    24b4:	00 d0       	rcall	.+0      	; 0x24b6 <M_Dio_void_togglePinValue+0x8>
    24b6:	0f 92       	push	r0
    24b8:	cd b7       	in	r28, 0x3d	; 61
    24ba:	de b7       	in	r29, 0x3e	; 62
    24bc:	8b 83       	std	Y+3, r24	; 0x03
	u8 pin = channelId % 10;
    24be:	8b 81       	ldd	r24, Y+3	; 0x03
    24c0:	9a e0       	ldi	r25, 0x0A	; 10
    24c2:	69 2f       	mov	r22, r25
    24c4:	0e 94 c9 14 	call	0x2992	; 0x2992 <__udivmodqi4>
    24c8:	89 2f       	mov	r24, r25
    24ca:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = channelId/ 10;
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	9a e0       	ldi	r25, 0x0A	; 10
    24d0:	69 2f       	mov	r22, r25
    24d2:	0e 94 c9 14 	call	0x2992	; 0x2992 <__udivmodqi4>
    24d6:	89 83       	std	Y+1, r24	; 0x01

	switch(port)
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	28 2f       	mov	r18, r24
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	3d 83       	std	Y+5, r19	; 0x05
    24e0:	2c 83       	std	Y+4, r18	; 0x04
    24e2:	8c 81       	ldd	r24, Y+4	; 0x04
    24e4:	9d 81       	ldd	r25, Y+5	; 0x05
    24e6:	82 30       	cpi	r24, 0x02	; 2
    24e8:	91 05       	cpc	r25, r1
    24ea:	51 f1       	breq	.+84     	; 0x2540 <M_Dio_void_togglePinValue+0x92>
    24ec:	2c 81       	ldd	r18, Y+4	; 0x04
    24ee:	3d 81       	ldd	r19, Y+5	; 0x05
    24f0:	23 30       	cpi	r18, 0x03	; 3
    24f2:	31 05       	cpc	r19, r1
    24f4:	34 f4       	brge	.+12     	; 0x2502 <M_Dio_void_togglePinValue+0x54>
    24f6:	8c 81       	ldd	r24, Y+4	; 0x04
    24f8:	9d 81       	ldd	r25, Y+5	; 0x05
    24fa:	81 30       	cpi	r24, 0x01	; 1
    24fc:	91 05       	cpc	r25, r1
    24fe:	61 f0       	breq	.+24     	; 0x2518 <M_Dio_void_togglePinValue+0x6a>
    2500:	5a c0       	rjmp	.+180    	; 0x25b6 <M_Dio_void_togglePinValue+0x108>
    2502:	2c 81       	ldd	r18, Y+4	; 0x04
    2504:	3d 81       	ldd	r19, Y+5	; 0x05
    2506:	23 30       	cpi	r18, 0x03	; 3
    2508:	31 05       	cpc	r19, r1
    250a:	71 f1       	breq	.+92     	; 0x2568 <M_Dio_void_togglePinValue+0xba>
    250c:	8c 81       	ldd	r24, Y+4	; 0x04
    250e:	9d 81       	ldd	r25, Y+5	; 0x05
    2510:	84 30       	cpi	r24, 0x04	; 4
    2512:	91 05       	cpc	r25, r1
    2514:	e9 f1       	breq	.+122    	; 0x2590 <M_Dio_void_togglePinValue+0xe2>
    2516:	4f c0       	rjmp	.+158    	; 0x25b6 <M_Dio_void_togglePinValue+0x108>
	{
	case DIO_PORTA :TOG_BIT( PORTA_REG,pin);break;
    2518:	ab e3       	ldi	r26, 0x3B	; 59
    251a:	b0 e0       	ldi	r27, 0x00	; 0
    251c:	eb e3       	ldi	r30, 0x3B	; 59
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	80 81       	ld	r24, Z
    2522:	48 2f       	mov	r20, r24
    2524:	8a 81       	ldd	r24, Y+2	; 0x02
    2526:	28 2f       	mov	r18, r24
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	02 2e       	mov	r0, r18
    2530:	02 c0       	rjmp	.+4      	; 0x2536 <M_Dio_void_togglePinValue+0x88>
    2532:	88 0f       	add	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	0a 94       	dec	r0
    2538:	e2 f7       	brpl	.-8      	; 0x2532 <M_Dio_void_togglePinValue+0x84>
    253a:	84 27       	eor	r24, r20
    253c:	8c 93       	st	X, r24
    253e:	3b c0       	rjmp	.+118    	; 0x25b6 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTB :TOG_BIT( PORTB_REG,pin);break;
    2540:	a8 e3       	ldi	r26, 0x38	; 56
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	e8 e3       	ldi	r30, 0x38	; 56
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	48 2f       	mov	r20, r24
    254c:	8a 81       	ldd	r24, Y+2	; 0x02
    254e:	28 2f       	mov	r18, r24
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	02 2e       	mov	r0, r18
    2558:	02 c0       	rjmp	.+4      	; 0x255e <M_Dio_void_togglePinValue+0xb0>
    255a:	88 0f       	add	r24, r24
    255c:	99 1f       	adc	r25, r25
    255e:	0a 94       	dec	r0
    2560:	e2 f7       	brpl	.-8      	; 0x255a <M_Dio_void_togglePinValue+0xac>
    2562:	84 27       	eor	r24, r20
    2564:	8c 93       	st	X, r24
    2566:	27 c0       	rjmp	.+78     	; 0x25b6 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTC :TOG_BIT( PORTC_REG,pin);break;
    2568:	a5 e3       	ldi	r26, 0x35	; 53
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	e5 e3       	ldi	r30, 0x35	; 53
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	48 2f       	mov	r20, r24
    2574:	8a 81       	ldd	r24, Y+2	; 0x02
    2576:	28 2f       	mov	r18, r24
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	02 2e       	mov	r0, r18
    2580:	02 c0       	rjmp	.+4      	; 0x2586 <M_Dio_void_togglePinValue+0xd8>
    2582:	88 0f       	add	r24, r24
    2584:	99 1f       	adc	r25, r25
    2586:	0a 94       	dec	r0
    2588:	e2 f7       	brpl	.-8      	; 0x2582 <M_Dio_void_togglePinValue+0xd4>
    258a:	84 27       	eor	r24, r20
    258c:	8c 93       	st	X, r24
    258e:	13 c0       	rjmp	.+38     	; 0x25b6 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTD :TOG_BIT( PORTD_REG,pin);break;
    2590:	a2 e3       	ldi	r26, 0x32	; 50
    2592:	b0 e0       	ldi	r27, 0x00	; 0
    2594:	e2 e3       	ldi	r30, 0x32	; 50
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	80 81       	ld	r24, Z
    259a:	48 2f       	mov	r20, r24
    259c:	8a 81       	ldd	r24, Y+2	; 0x02
    259e:	28 2f       	mov	r18, r24
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	02 2e       	mov	r0, r18
    25a8:	02 c0       	rjmp	.+4      	; 0x25ae <M_Dio_void_togglePinValue+0x100>
    25aa:	88 0f       	add	r24, r24
    25ac:	99 1f       	adc	r25, r25
    25ae:	0a 94       	dec	r0
    25b0:	e2 f7       	brpl	.-8      	; 0x25aa <M_Dio_void_togglePinValue+0xfc>
    25b2:	84 27       	eor	r24, r20
    25b4:	8c 93       	st	X, r24
	}

}
    25b6:	0f 90       	pop	r0
    25b8:	0f 90       	pop	r0
    25ba:	0f 90       	pop	r0
    25bc:	0f 90       	pop	r0
    25be:	0f 90       	pop	r0
    25c0:	cf 91       	pop	r28
    25c2:	df 91       	pop	r29
    25c4:	08 95       	ret

000025c6 <H_readPB>:
#include"PB_Types.h"
#include"PB_CFG.h"
#include"PB_Init.h"

PB_State H_readPB(PB_ID PushBID,PB_ActiveType Mode)
{
    25c6:	df 93       	push	r29
    25c8:	cf 93       	push	r28
    25ca:	cd b7       	in	r28, 0x3d	; 61
    25cc:	de b7       	in	r29, 0x3e	; 62
    25ce:	64 97       	sbiw	r28, 0x14	; 20
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	f8 94       	cli
    25d4:	de bf       	out	0x3e, r29	; 62
    25d6:	0f be       	out	0x3f, r0	; 63
    25d8:	cd bf       	out	0x3d, r28	; 61
    25da:	89 8b       	std	Y+17, r24	; 0x11
    25dc:	6a 8b       	std	Y+18, r22	; 0x12
	PB_State Button_state=PB_RELEASED;
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	88 8b       	std	Y+16, r24	; 0x10
	Dio_LevelType Local_pin_value;
	switch(PushBID)
    25e2:	89 89       	ldd	r24, Y+17	; 0x11
    25e4:	28 2f       	mov	r18, r24
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	3c 8b       	std	Y+20, r19	; 0x14
    25ea:	2b 8b       	std	Y+19, r18	; 0x13
    25ec:	8b 89       	ldd	r24, Y+19	; 0x13
    25ee:	9c 89       	ldd	r25, Y+20	; 0x14
    25f0:	81 30       	cpi	r24, 0x01	; 1
    25f2:	91 05       	cpc	r25, r1
    25f4:	09 f4       	brne	.+2      	; 0x25f8 <H_readPB+0x32>
    25f6:	9b c0       	rjmp	.+310    	; 0x272e <H_readPB+0x168>
    25f8:	2b 89       	ldd	r18, Y+19	; 0x13
    25fa:	3c 89       	ldd	r19, Y+20	; 0x14
    25fc:	22 30       	cpi	r18, 0x02	; 2
    25fe:	31 05       	cpc	r19, r1
    2600:	2c f4       	brge	.+10     	; 0x260c <H_readPB+0x46>
    2602:	8b 89       	ldd	r24, Y+19	; 0x13
    2604:	9c 89       	ldd	r25, Y+20	; 0x14
    2606:	00 97       	sbiw	r24, 0x00	; 0
    2608:	71 f0       	breq	.+28     	; 0x2626 <H_readPB+0x60>
    260a:	c3 c0       	rjmp	.+390    	; 0x2792 <H_readPB+0x1cc>
    260c:	2b 89       	ldd	r18, Y+19	; 0x13
    260e:	3c 89       	ldd	r19, Y+20	; 0x14
    2610:	22 30       	cpi	r18, 0x02	; 2
    2612:	31 05       	cpc	r19, r1
    2614:	09 f4       	brne	.+2      	; 0x2618 <H_readPB+0x52>
    2616:	9c c0       	rjmp	.+312    	; 0x2750 <H_readPB+0x18a>
    2618:	8b 89       	ldd	r24, Y+19	; 0x13
    261a:	9c 89       	ldd	r25, Y+20	; 0x14
    261c:	83 30       	cpi	r24, 0x03	; 3
    261e:	91 05       	cpc	r25, r1
    2620:	09 f4       	brne	.+2      	; 0x2624 <H_readPB+0x5e>
    2622:	a7 c0       	rjmp	.+334    	; 0x2772 <H_readPB+0x1ac>
    2624:	b6 c0       	rjmp	.+364    	; 0x2792 <H_readPB+0x1cc>
	{
	case PB_ID1:
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW1);
    2626:	8f e2       	ldi	r24, 0x2F	; 47
    2628:	0e 94 3f 10 	call	0x207e	; 0x207e <M_Dio_en_getPinValue>
    262c:	8f 87       	std	Y+15, r24	; 0x0f
		if(Local_pin_value==PB_PRESSED_ACTL)
    262e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2630:	88 23       	and	r24, r24
    2632:	09 f0       	breq	.+2      	; 0x2636 <H_readPB+0x70>
    2634:	ae c0       	rjmp	.+348    	; 0x2792 <H_readPB+0x1cc>
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	a8 e4       	ldi	r26, 0x48	; 72
    263c:	b2 e4       	ldi	r27, 0x42	; 66
    263e:	8b 87       	std	Y+11, r24	; 0x0b
    2640:	9c 87       	std	Y+12, r25	; 0x0c
    2642:	ad 87       	std	Y+13, r26	; 0x0d
    2644:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2646:	6b 85       	ldd	r22, Y+11	; 0x0b
    2648:	7c 85       	ldd	r23, Y+12	; 0x0c
    264a:	8d 85       	ldd	r24, Y+13	; 0x0d
    264c:	9e 85       	ldd	r25, Y+14	; 0x0e
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	4a e7       	ldi	r20, 0x7A	; 122
    2654:	55 e4       	ldi	r21, 0x45	; 69
    2656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	8f 83       	std	Y+7, r24	; 0x07
    2660:	98 87       	std	Y+8, r25	; 0x08
    2662:	a9 87       	std	Y+9, r26	; 0x09
    2664:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2666:	6f 81       	ldd	r22, Y+7	; 0x07
    2668:	78 85       	ldd	r23, Y+8	; 0x08
    266a:	89 85       	ldd	r24, Y+9	; 0x09
    266c:	9a 85       	ldd	r25, Y+10	; 0x0a
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	40 e8       	ldi	r20, 0x80	; 128
    2674:	5f e3       	ldi	r21, 0x3F	; 63
    2676:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    267a:	88 23       	and	r24, r24
    267c:	2c f4       	brge	.+10     	; 0x2688 <H_readPB+0xc2>
		__ticks = 1;
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	9e 83       	std	Y+6, r25	; 0x06
    2684:	8d 83       	std	Y+5, r24	; 0x05
    2686:	3f c0       	rjmp	.+126    	; 0x2706 <H_readPB+0x140>
	else if (__tmp > 65535)
    2688:	6f 81       	ldd	r22, Y+7	; 0x07
    268a:	78 85       	ldd	r23, Y+8	; 0x08
    268c:	89 85       	ldd	r24, Y+9	; 0x09
    268e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	3f ef       	ldi	r19, 0xFF	; 255
    2694:	4f e7       	ldi	r20, 0x7F	; 127
    2696:	57 e4       	ldi	r21, 0x47	; 71
    2698:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    269c:	18 16       	cp	r1, r24
    269e:	4c f5       	brge	.+82     	; 0x26f2 <H_readPB+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	40 e2       	ldi	r20, 0x20	; 32
    26ae:	51 e4       	ldi	r21, 0x41	; 65
    26b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	bc 01       	movw	r22, r24
    26ba:	cd 01       	movw	r24, r26
    26bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	9e 83       	std	Y+6, r25	; 0x06
    26c6:	8d 83       	std	Y+5, r24	; 0x05
    26c8:	0f c0       	rjmp	.+30     	; 0x26e8 <H_readPB+0x122>
    26ca:	80 e9       	ldi	r24, 0x90	; 144
    26cc:	91 e0       	ldi	r25, 0x01	; 1
    26ce:	9c 83       	std	Y+4, r25	; 0x04
    26d0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26d2:	8b 81       	ldd	r24, Y+3	; 0x03
    26d4:	9c 81       	ldd	r25, Y+4	; 0x04
    26d6:	01 97       	sbiw	r24, 0x01	; 1
    26d8:	f1 f7       	brne	.-4      	; 0x26d6 <H_readPB+0x110>
    26da:	9c 83       	std	Y+4, r25	; 0x04
    26dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26de:	8d 81       	ldd	r24, Y+5	; 0x05
    26e0:	9e 81       	ldd	r25, Y+6	; 0x06
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	9e 83       	std	Y+6, r25	; 0x06
    26e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ea:	9e 81       	ldd	r25, Y+6	; 0x06
    26ec:	00 97       	sbiw	r24, 0x00	; 0
    26ee:	69 f7       	brne	.-38     	; 0x26ca <H_readPB+0x104>
    26f0:	19 c0       	rjmp	.+50     	; 0x2724 <H_readPB+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f2:	6f 81       	ldd	r22, Y+7	; 0x07
    26f4:	78 85       	ldd	r23, Y+8	; 0x08
    26f6:	89 85       	ldd	r24, Y+9	; 0x09
    26f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	9e 83       	std	Y+6, r25	; 0x06
    2704:	8d 83       	std	Y+5, r24	; 0x05
    2706:	8d 81       	ldd	r24, Y+5	; 0x05
    2708:	9e 81       	ldd	r25, Y+6	; 0x06
    270a:	9a 83       	std	Y+2, r25	; 0x02
    270c:	89 83       	std	Y+1, r24	; 0x01
    270e:	89 81       	ldd	r24, Y+1	; 0x01
    2710:	9a 81       	ldd	r25, Y+2	; 0x02
    2712:	01 97       	sbiw	r24, 0x01	; 1
    2714:	f1 f7       	brne	.-4      	; 0x2712 <H_readPB+0x14c>
    2716:	9a 83       	std	Y+2, r25	; 0x02
    2718:	89 83       	std	Y+1, r24	; 0x01
    271a:	04 c0       	rjmp	.+8      	; 0x2724 <H_readPB+0x15e>
		{
			_delay_ms(50);
			while(Local_pin_value==PB_PRESSED_ACTL)
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW1);
    271c:	8f e2       	ldi	r24, 0x2F	; 47
    271e:	0e 94 3f 10 	call	0x207e	; 0x207e <M_Dio_en_getPinValue>
    2722:	8f 87       	std	Y+15, r24	; 0x0f
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW1);
		if(Local_pin_value==PB_PRESSED_ACTL)
		{
			_delay_ms(50);
			while(Local_pin_value==PB_PRESSED_ACTL)
    2724:	8f 85       	ldd	r24, Y+15	; 0x0f
    2726:	88 23       	and	r24, r24
    2728:	c9 f3       	breq	.-14     	; 0x271c <H_readPB+0x156>
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW1);
			}
			Button_state=PB_PRESSED;
    272a:	18 8a       	std	Y+16, r1	; 0x10
    272c:	32 c0       	rjmp	.+100    	; 0x2792 <H_readPB+0x1cc>
#error("Wrong Activation Mode")
#endif
	break;
	case PB_ID2:
#if(Mode == PB_ACTIVE_LOW)
			Local_pin_value=M_Dio_en_getPinValue(PB_SW2);
    272e:	8e e2       	ldi	r24, 0x2E	; 46
    2730:	0e 94 3f 10 	call	0x207e	; 0x207e <M_Dio_en_getPinValue>
    2734:	8f 87       	std	Y+15, r24	; 0x0f
			if(Local_pin_value==PB_PRESSED_ACTL)
    2736:	8f 85       	ldd	r24, Y+15	; 0x0f
    2738:	88 23       	and	r24, r24
    273a:	59 f5       	brne	.+86     	; 0x2792 <H_readPB+0x1cc>
    273c:	04 c0       	rjmp	.+8      	; 0x2746 <H_readPB+0x180>
			{
				while(Local_pin_value==PB_PRESSED_ACTL)
				{
					Local_pin_value=M_Dio_en_getPinValue(PB_SW2);
    273e:	8e e2       	ldi	r24, 0x2E	; 46
    2740:	0e 94 3f 10 	call	0x207e	; 0x207e <M_Dio_en_getPinValue>
    2744:	8f 87       	std	Y+15, r24	; 0x0f
	case PB_ID2:
#if(Mode == PB_ACTIVE_LOW)
			Local_pin_value=M_Dio_en_getPinValue(PB_SW2);
			if(Local_pin_value==PB_PRESSED_ACTL)
			{
				while(Local_pin_value==PB_PRESSED_ACTL)
    2746:	8f 85       	ldd	r24, Y+15	; 0x0f
    2748:	88 23       	and	r24, r24
    274a:	c9 f3       	breq	.-14     	; 0x273e <H_readPB+0x178>
				{
					Local_pin_value=M_Dio_en_getPinValue(PB_SW2);
				}
				Button_state=PB_PRESSED;
    274c:	18 8a       	std	Y+16, r1	; 0x10
    274e:	21 c0       	rjmp	.+66     	; 0x2792 <H_readPB+0x1cc>
#error("Wrong Activation Mode")
#endif
		break;
		case PB_ID3:
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW3);
    2750:	8d e2       	ldi	r24, 0x2D	; 45
    2752:	0e 94 3f 10 	call	0x207e	; 0x207e <M_Dio_en_getPinValue>
    2756:	8f 87       	std	Y+15, r24	; 0x0f
		if(Local_pin_value==PB_PRESSED_ACTL)
    2758:	8f 85       	ldd	r24, Y+15	; 0x0f
    275a:	88 23       	and	r24, r24
    275c:	d1 f4       	brne	.+52     	; 0x2792 <H_readPB+0x1cc>
    275e:	04 c0       	rjmp	.+8      	; 0x2768 <H_readPB+0x1a2>
		{
			while(Local_pin_value==PB_PRESSED_ACTL)
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW3);
    2760:	8d e2       	ldi	r24, 0x2D	; 45
    2762:	0e 94 3f 10 	call	0x207e	; 0x207e <M_Dio_en_getPinValue>
    2766:	8f 87       	std	Y+15, r24	; 0x0f
		case PB_ID3:
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW3);
		if(Local_pin_value==PB_PRESSED_ACTL)
		{
			while(Local_pin_value==PB_PRESSED_ACTL)
    2768:	8f 85       	ldd	r24, Y+15	; 0x0f
    276a:	88 23       	and	r24, r24
    276c:	c9 f3       	breq	.-14     	; 0x2760 <H_readPB+0x19a>
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW3);
			}
			Button_state=PB_PRESSED;
    276e:	18 8a       	std	Y+16, r1	; 0x10
    2770:	10 c0       	rjmp	.+32     	; 0x2792 <H_readPB+0x1cc>
#error("Wrong Activation Mode")
#endif
	break;
	case PB_ID4:
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW4);
    2772:	8b e2       	ldi	r24, 0x2B	; 43
    2774:	0e 94 3f 10 	call	0x207e	; 0x207e <M_Dio_en_getPinValue>
    2778:	8f 87       	std	Y+15, r24	; 0x0f
		if(Local_pin_value==PB_PRESSED_ACTL)
    277a:	8f 85       	ldd	r24, Y+15	; 0x0f
    277c:	88 23       	and	r24, r24
    277e:	49 f4       	brne	.+18     	; 0x2792 <H_readPB+0x1cc>
    2780:	04 c0       	rjmp	.+8      	; 0x278a <H_readPB+0x1c4>
		{
			while(Local_pin_value==PB_PRESSED_ACTL)
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW4);
    2782:	8b e2       	ldi	r24, 0x2B	; 43
    2784:	0e 94 3f 10 	call	0x207e	; 0x207e <M_Dio_en_getPinValue>
    2788:	8f 87       	std	Y+15, r24	; 0x0f
	case PB_ID4:
#if(Mode == PB_ACTIVE_LOW)
		Local_pin_value=M_Dio_en_getPinValue(PB_SW4);
		if(Local_pin_value==PB_PRESSED_ACTL)
		{
			while(Local_pin_value==PB_PRESSED_ACTL)
    278a:	8f 85       	ldd	r24, Y+15	; 0x0f
    278c:	88 23       	and	r24, r24
    278e:	c9 f3       	breq	.-14     	; 0x2782 <H_readPB+0x1bc>
			{
				Local_pin_value=M_Dio_en_getPinValue(PB_SW4);
			}
			Button_state=PB_PRESSED;
    2790:	18 8a       	std	Y+16, r1	; 0x10
#else
#error("Wrong Activation Mode")
#endif
	break;
	}
	return Button_state;
    2792:	88 89       	ldd	r24, Y+16	; 0x10
}
    2794:	64 96       	adiw	r28, 0x14	; 20
    2796:	0f b6       	in	r0, 0x3f	; 63
    2798:	f8 94       	cli
    279a:	de bf       	out	0x3e, r29	; 62
    279c:	0f be       	out	0x3f, r0	; 63
    279e:	cd bf       	out	0x3d, r28	; 61
    27a0:	cf 91       	pop	r28
    27a2:	df 91       	pop	r29
    27a4:	08 95       	ret

000027a6 <H_LED_void_Turn_on>:
#include"LED_CFG.h"
#include"LED_Init.h"


void H_LED_void_Turn_on(u8 ledID)
{
    27a6:	df 93       	push	r29
    27a8:	cf 93       	push	r28
    27aa:	00 d0       	rcall	.+0      	; 0x27ac <H_LED_void_Turn_on+0x6>
    27ac:	0f 92       	push	r0
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62
    27b2:	89 83       	std	Y+1, r24	; 0x01
	switch(ledID)
    27b4:	89 81       	ldd	r24, Y+1	; 0x01
    27b6:	28 2f       	mov	r18, r24
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	3b 83       	std	Y+3, r19	; 0x03
    27bc:	2a 83       	std	Y+2, r18	; 0x02
    27be:	8a 81       	ldd	r24, Y+2	; 0x02
    27c0:	9b 81       	ldd	r25, Y+3	; 0x03
    27c2:	81 30       	cpi	r24, 0x01	; 1
    27c4:	91 05       	cpc	r25, r1
    27c6:	f9 f0       	breq	.+62     	; 0x2806 <H_LED_void_Turn_on+0x60>
    27c8:	2a 81       	ldd	r18, Y+2	; 0x02
    27ca:	3b 81       	ldd	r19, Y+3	; 0x03
    27cc:	22 30       	cpi	r18, 0x02	; 2
    27ce:	31 05       	cpc	r19, r1
    27d0:	2c f4       	brge	.+10     	; 0x27dc <H_LED_void_Turn_on+0x36>
    27d2:	8a 81       	ldd	r24, Y+2	; 0x02
    27d4:	9b 81       	ldd	r25, Y+3	; 0x03
    27d6:	00 97       	sbiw	r24, 0x00	; 0
    27d8:	61 f0       	breq	.+24     	; 0x27f2 <H_LED_void_Turn_on+0x4c>
    27da:	1e c0       	rjmp	.+60     	; 0x2818 <H_LED_void_Turn_on+0x72>
    27dc:	2a 81       	ldd	r18, Y+2	; 0x02
    27de:	3b 81       	ldd	r19, Y+3	; 0x03
    27e0:	22 30       	cpi	r18, 0x02	; 2
    27e2:	31 05       	cpc	r19, r1
    27e4:	59 f0       	breq	.+22     	; 0x27fc <H_LED_void_Turn_on+0x56>
    27e6:	8a 81       	ldd	r24, Y+2	; 0x02
    27e8:	9b 81       	ldd	r25, Y+3	; 0x03
    27ea:	83 30       	cpi	r24, 0x03	; 3
    27ec:	91 05       	cpc	r25, r1
    27ee:	81 f0       	breq	.+32     	; 0x2810 <H_LED_void_Turn_on+0x6a>
    27f0:	13 c0       	rjmp	.+38     	; 0x2818 <H_LED_void_Turn_on+0x72>
	{
	case LED_RED:
#if(LED_RED_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_RED_PIN,DIO_HIGH);
    27f2:	8a e0       	ldi	r24, 0x0A	; 10
    27f4:	61 e0       	ldi	r22, 0x01	; 1
    27f6:	0e 94 c5 10 	call	0x218a	; 0x218a <M_Dio_void_setPinValue>
    27fa:	0e c0       	rjmp	.+28     	; 0x2818 <H_LED_void_Turn_on+0x72>
#error("Wrong Led direction")
#endif
		break;
	case LED_GREEN:
#if(LED_GREEN_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_GREEN_PIN,DIO_HIGH);
    27fc:	8c e0       	ldi	r24, 0x0C	; 12
    27fe:	61 e0       	ldi	r22, 0x01	; 1
    2800:	0e 94 c5 10 	call	0x218a	; 0x218a <M_Dio_void_setPinValue>
    2804:	09 c0       	rjmp	.+18     	; 0x2818 <H_LED_void_Turn_on+0x72>
#error("Wrong Led direction")
#endif
		break;
	case LED_BLUE:
#if(LED_BLUE_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_BLUE_PIN,DIO_HIGH);
    2806:	8b e0       	ldi	r24, 0x0B	; 11
    2808:	61 e0       	ldi	r22, 0x01	; 1
    280a:	0e 94 c5 10 	call	0x218a	; 0x218a <M_Dio_void_setPinValue>
    280e:	04 c0       	rjmp	.+8      	; 0x2818 <H_LED_void_Turn_on+0x72>
#error("Wrong Led direction")
#endif
		break;
	case LED_YELLOW:
#if(LED_YELLOW_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_YELLOW_PIN,DIO_HIGH);
    2810:	80 e1       	ldi	r24, 0x10	; 16
    2812:	61 e0       	ldi	r22, 0x01	; 1
    2814:	0e 94 c5 10 	call	0x218a	; 0x218a <M_Dio_void_setPinValue>
#error("Wrong Led direction")
#endif
		break;

	}
}
    2818:	0f 90       	pop	r0
    281a:	0f 90       	pop	r0
    281c:	0f 90       	pop	r0
    281e:	cf 91       	pop	r28
    2820:	df 91       	pop	r29
    2822:	08 95       	ret

00002824 <H_LED_void_Turn_off>:
void H_LED_void_Turn_off(u8 ledID)
{
    2824:	df 93       	push	r29
    2826:	cf 93       	push	r28
    2828:	00 d0       	rcall	.+0      	; 0x282a <H_LED_void_Turn_off+0x6>
    282a:	0f 92       	push	r0
    282c:	cd b7       	in	r28, 0x3d	; 61
    282e:	de b7       	in	r29, 0x3e	; 62
    2830:	89 83       	std	Y+1, r24	; 0x01
	switch(ledID)
    2832:	89 81       	ldd	r24, Y+1	; 0x01
    2834:	28 2f       	mov	r18, r24
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	3b 83       	std	Y+3, r19	; 0x03
    283a:	2a 83       	std	Y+2, r18	; 0x02
    283c:	8a 81       	ldd	r24, Y+2	; 0x02
    283e:	9b 81       	ldd	r25, Y+3	; 0x03
    2840:	81 30       	cpi	r24, 0x01	; 1
    2842:	91 05       	cpc	r25, r1
    2844:	f9 f0       	breq	.+62     	; 0x2884 <H_LED_void_Turn_off+0x60>
    2846:	2a 81       	ldd	r18, Y+2	; 0x02
    2848:	3b 81       	ldd	r19, Y+3	; 0x03
    284a:	22 30       	cpi	r18, 0x02	; 2
    284c:	31 05       	cpc	r19, r1
    284e:	2c f4       	brge	.+10     	; 0x285a <H_LED_void_Turn_off+0x36>
    2850:	8a 81       	ldd	r24, Y+2	; 0x02
    2852:	9b 81       	ldd	r25, Y+3	; 0x03
    2854:	00 97       	sbiw	r24, 0x00	; 0
    2856:	61 f0       	breq	.+24     	; 0x2870 <H_LED_void_Turn_off+0x4c>
    2858:	1e c0       	rjmp	.+60     	; 0x2896 <H_LED_void_Turn_off+0x72>
    285a:	2a 81       	ldd	r18, Y+2	; 0x02
    285c:	3b 81       	ldd	r19, Y+3	; 0x03
    285e:	22 30       	cpi	r18, 0x02	; 2
    2860:	31 05       	cpc	r19, r1
    2862:	59 f0       	breq	.+22     	; 0x287a <H_LED_void_Turn_off+0x56>
    2864:	8a 81       	ldd	r24, Y+2	; 0x02
    2866:	9b 81       	ldd	r25, Y+3	; 0x03
    2868:	83 30       	cpi	r24, 0x03	; 3
    286a:	91 05       	cpc	r25, r1
    286c:	81 f0       	breq	.+32     	; 0x288e <H_LED_void_Turn_off+0x6a>
    286e:	13 c0       	rjmp	.+38     	; 0x2896 <H_LED_void_Turn_off+0x72>
		{
		case LED_RED:
#if(LED_RED_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_RED_PIN,DIO_LOW);
    2870:	8a e0       	ldi	r24, 0x0A	; 10
    2872:	60 e0       	ldi	r22, 0x00	; 0
    2874:	0e 94 c5 10 	call	0x218a	; 0x218a <M_Dio_void_setPinValue>
    2878:	0e c0       	rjmp	.+28     	; 0x2896 <H_LED_void_Turn_off+0x72>
#error("Wrong Led direction")
#endif
		break;
		case LED_GREEN:
#if(LED_GREEN_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_GREEN_PIN,DIO_LOW);
    287a:	8c e0       	ldi	r24, 0x0C	; 12
    287c:	60 e0       	ldi	r22, 0x00	; 0
    287e:	0e 94 c5 10 	call	0x218a	; 0x218a <M_Dio_void_setPinValue>
    2882:	09 c0       	rjmp	.+18     	; 0x2896 <H_LED_void_Turn_off+0x72>
#error("Wrong Led direction")
#endif
		break;
		case LED_BLUE:
#if(LED_BLUE_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_BLUE_PIN,DIO_LOW);
    2884:	8b e0       	ldi	r24, 0x0B	; 11
    2886:	60 e0       	ldi	r22, 0x00	; 0
    2888:	0e 94 c5 10 	call	0x218a	; 0x218a <M_Dio_void_setPinValue>
    288c:	04 c0       	rjmp	.+8      	; 0x2896 <H_LED_void_Turn_off+0x72>
#error("Wrong Led direction")
#endif
		break;
		case LED_YELLOW:
#if(LED_YELLOW_DIR == LED_FORWARD_DIR)
		M_Dio_void_setPinValue(LED_YELLOW_PIN,DIO_LOW);
    288e:	80 e1       	ldi	r24, 0x10	; 16
    2890:	60 e0       	ldi	r22, 0x00	; 0
    2892:	0e 94 c5 10 	call	0x218a	; 0x218a <M_Dio_void_setPinValue>
#error("Wrong Led direction")
#endif
		break;

		}
}
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	0f 90       	pop	r0
    289c:	cf 91       	pop	r28
    289e:	df 91       	pop	r29
    28a0:	08 95       	ret

000028a2 <H_LED_void_Toggle>:

void H_LED_void_Toggle(u8 ledID)
{
    28a2:	df 93       	push	r29
    28a4:	cf 93       	push	r28
    28a6:	00 d0       	rcall	.+0      	; 0x28a8 <H_LED_void_Toggle+0x6>
    28a8:	0f 92       	push	r0
    28aa:	cd b7       	in	r28, 0x3d	; 61
    28ac:	de b7       	in	r29, 0x3e	; 62
    28ae:	89 83       	std	Y+1, r24	; 0x01
	switch(ledID)
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	28 2f       	mov	r18, r24
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	3b 83       	std	Y+3, r19	; 0x03
    28b8:	2a 83       	std	Y+2, r18	; 0x02
    28ba:	8a 81       	ldd	r24, Y+2	; 0x02
    28bc:	9b 81       	ldd	r25, Y+3	; 0x03
    28be:	81 30       	cpi	r24, 0x01	; 1
    28c0:	91 05       	cpc	r25, r1
    28c2:	e9 f0       	breq	.+58     	; 0x28fe <H_LED_void_Toggle+0x5c>
    28c4:	2a 81       	ldd	r18, Y+2	; 0x02
    28c6:	3b 81       	ldd	r19, Y+3	; 0x03
    28c8:	22 30       	cpi	r18, 0x02	; 2
    28ca:	31 05       	cpc	r19, r1
    28cc:	2c f4       	brge	.+10     	; 0x28d8 <H_LED_void_Toggle+0x36>
    28ce:	8a 81       	ldd	r24, Y+2	; 0x02
    28d0:	9b 81       	ldd	r25, Y+3	; 0x03
    28d2:	00 97       	sbiw	r24, 0x00	; 0
    28d4:	61 f0       	breq	.+24     	; 0x28ee <H_LED_void_Toggle+0x4c>
    28d6:	1a c0       	rjmp	.+52     	; 0x290c <H_LED_void_Toggle+0x6a>
    28d8:	2a 81       	ldd	r18, Y+2	; 0x02
    28da:	3b 81       	ldd	r19, Y+3	; 0x03
    28dc:	22 30       	cpi	r18, 0x02	; 2
    28de:	31 05       	cpc	r19, r1
    28e0:	51 f0       	breq	.+20     	; 0x28f6 <H_LED_void_Toggle+0x54>
    28e2:	8a 81       	ldd	r24, Y+2	; 0x02
    28e4:	9b 81       	ldd	r25, Y+3	; 0x03
    28e6:	83 30       	cpi	r24, 0x03	; 3
    28e8:	91 05       	cpc	r25, r1
    28ea:	69 f0       	breq	.+26     	; 0x2906 <H_LED_void_Toggle+0x64>
    28ec:	0f c0       	rjmp	.+30     	; 0x290c <H_LED_void_Toggle+0x6a>
	{
		case LED_RED:
			M_Dio_void_togglePinValue(LED_RED_PIN);
    28ee:	8a e0       	ldi	r24, 0x0A	; 10
    28f0:	0e 94 57 12 	call	0x24ae	; 0x24ae <M_Dio_void_togglePinValue>
    28f4:	0b c0       	rjmp	.+22     	; 0x290c <H_LED_void_Toggle+0x6a>
		break;
		case LED_GREEN:
			M_Dio_void_togglePinValue(LED_GREEN_PIN);
    28f6:	8c e0       	ldi	r24, 0x0C	; 12
    28f8:	0e 94 57 12 	call	0x24ae	; 0x24ae <M_Dio_void_togglePinValue>
    28fc:	07 c0       	rjmp	.+14     	; 0x290c <H_LED_void_Toggle+0x6a>
		break;
		case LED_BLUE:
			M_Dio_void_togglePinValue(LED_BLUE_PIN);
    28fe:	8b e0       	ldi	r24, 0x0B	; 11
    2900:	0e 94 57 12 	call	0x24ae	; 0x24ae <M_Dio_void_togglePinValue>
    2904:	03 c0       	rjmp	.+6      	; 0x290c <H_LED_void_Toggle+0x6a>
		break;
		case LED_YELLOW:
			M_Dio_void_togglePinValue(LED_YELLOW_PIN);
    2906:	80 e1       	ldi	r24, 0x10	; 16
    2908:	0e 94 57 12 	call	0x24ae	; 0x24ae <M_Dio_void_togglePinValue>
		break;

	}
}
    290c:	0f 90       	pop	r0
    290e:	0f 90       	pop	r0
    2910:	0f 90       	pop	r0
    2912:	cf 91       	pop	r28
    2914:	df 91       	pop	r29
    2916:	08 95       	ret

00002918 <main>:
Task_Config Task1={Five_hundred_ms,one,Task_1};
Task_Config Task2={one_thousand_ms,two,Task_2};
Task_Config Task3={three_thousand_ms,three,Task_3};

int main(void)
{
    2918:	df 93       	push	r29
    291a:	cf 93       	push	r28
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
	OS_Create_Task(&Task1);
    2920:	8e e6       	ldi	r24, 0x6E	; 110
    2922:	91 e0       	ldi	r25, 0x01	; 1
    2924:	0e 94 31 07 	call	0xe62	; 0xe62 <OS_Create_Task>
	OS_Create_Task(&Task2);
    2928:	83 e7       	ldi	r24, 0x73	; 115
    292a:	91 e0       	ldi	r25, 0x01	; 1
    292c:	0e 94 31 07 	call	0xe62	; 0xe62 <OS_Create_Task>
	OS_Create_Task(&Task3);
    2930:	88 e7       	ldi	r24, 0x78	; 120
    2932:	91 e0       	ldi	r25, 0x01	; 1
    2934:	0e 94 31 07 	call	0xe62	; 0xe62 <OS_Create_Task>
	OS_Init();
    2938:	0e 94 17 07 	call	0xe2e	; 0xe2e <OS_Init>
	OS_Start();
    293c:	0e 94 cd 07 	call	0xf9a	; 0xf9a <OS_Start>
    2940:	ff cf       	rjmp	.-2      	; 0x2940 <main+0x28>

00002942 <Task_1>:
		//Task_2();
		//Task_3();
	}
}
void Task_1(void)
{
    2942:	df 93       	push	r29
    2944:	cf 93       	push	r28
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
	H_LED_void_Toggle(LED_RED);
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	0e 94 51 14 	call	0x28a2	; 0x28a2 <H_LED_void_Toggle>
}
    2950:	cf 91       	pop	r28
    2952:	df 91       	pop	r29
    2954:	08 95       	ret

00002956 <Task_2>:
void Task_2(void)
{
    2956:	df 93       	push	r29
    2958:	cf 93       	push	r28
    295a:	0f 92       	push	r0
    295c:	cd b7       	in	r28, 0x3d	; 61
    295e:	de b7       	in	r29, 0x3e	; 62
	PB_State PB_status;
	PB_status=H_readPB(PB_ID1,PB_ACTIVE_LOW);
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	60 e0       	ldi	r22, 0x00	; 0
    2964:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <H_readPB>
    2968:	89 83       	std	Y+1, r24	; 0x01
	if(PB_status==PB_PRESSED)
    296a:	89 81       	ldd	r24, Y+1	; 0x01
    296c:	88 23       	and	r24, r24
    296e:	19 f4       	brne	.+6      	; 0x2976 <Task_2+0x20>
	{
		H_LED_void_Toggle(LED_BLUE);
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	0e 94 51 14 	call	0x28a2	; 0x28a2 <H_LED_void_Toggle>
	}
}
    2976:	0f 90       	pop	r0
    2978:	cf 91       	pop	r28
    297a:	df 91       	pop	r29
    297c:	08 95       	ret

0000297e <Task_3>:
void Task_3(void)
{
    297e:	df 93       	push	r29
    2980:	cf 93       	push	r28
    2982:	cd b7       	in	r28, 0x3d	; 61
    2984:	de b7       	in	r29, 0x3e	; 62
	H_LED_void_Toggle(LED_GREEN);
    2986:	82 e0       	ldi	r24, 0x02	; 2
    2988:	0e 94 51 14 	call	0x28a2	; 0x28a2 <H_LED_void_Toggle>
}
    298c:	cf 91       	pop	r28
    298e:	df 91       	pop	r29
    2990:	08 95       	ret

00002992 <__udivmodqi4>:
    2992:	99 1b       	sub	r25, r25
    2994:	79 e0       	ldi	r23, 0x09	; 9
    2996:	04 c0       	rjmp	.+8      	; 0x29a0 <__udivmodqi4_ep>

00002998 <__udivmodqi4_loop>:
    2998:	99 1f       	adc	r25, r25
    299a:	96 17       	cp	r25, r22
    299c:	08 f0       	brcs	.+2      	; 0x29a0 <__udivmodqi4_ep>
    299e:	96 1b       	sub	r25, r22

000029a0 <__udivmodqi4_ep>:
    29a0:	88 1f       	adc	r24, r24
    29a2:	7a 95       	dec	r23
    29a4:	c9 f7       	brne	.-14     	; 0x2998 <__udivmodqi4_loop>
    29a6:	80 95       	com	r24
    29a8:	08 95       	ret

000029aa <__udivmodhi4>:
    29aa:	aa 1b       	sub	r26, r26
    29ac:	bb 1b       	sub	r27, r27
    29ae:	51 e1       	ldi	r21, 0x11	; 17
    29b0:	07 c0       	rjmp	.+14     	; 0x29c0 <__udivmodhi4_ep>

000029b2 <__udivmodhi4_loop>:
    29b2:	aa 1f       	adc	r26, r26
    29b4:	bb 1f       	adc	r27, r27
    29b6:	a6 17       	cp	r26, r22
    29b8:	b7 07       	cpc	r27, r23
    29ba:	10 f0       	brcs	.+4      	; 0x29c0 <__udivmodhi4_ep>
    29bc:	a6 1b       	sub	r26, r22
    29be:	b7 0b       	sbc	r27, r23

000029c0 <__udivmodhi4_ep>:
    29c0:	88 1f       	adc	r24, r24
    29c2:	99 1f       	adc	r25, r25
    29c4:	5a 95       	dec	r21
    29c6:	a9 f7       	brne	.-22     	; 0x29b2 <__udivmodhi4_loop>
    29c8:	80 95       	com	r24
    29ca:	90 95       	com	r25
    29cc:	bc 01       	movw	r22, r24
    29ce:	cd 01       	movw	r24, r26
    29d0:	08 95       	ret

000029d2 <__udivmodsi4>:
    29d2:	a1 e2       	ldi	r26, 0x21	; 33
    29d4:	1a 2e       	mov	r1, r26
    29d6:	aa 1b       	sub	r26, r26
    29d8:	bb 1b       	sub	r27, r27
    29da:	fd 01       	movw	r30, r26
    29dc:	0d c0       	rjmp	.+26     	; 0x29f8 <__udivmodsi4_ep>

000029de <__udivmodsi4_loop>:
    29de:	aa 1f       	adc	r26, r26
    29e0:	bb 1f       	adc	r27, r27
    29e2:	ee 1f       	adc	r30, r30
    29e4:	ff 1f       	adc	r31, r31
    29e6:	a2 17       	cp	r26, r18
    29e8:	b3 07       	cpc	r27, r19
    29ea:	e4 07       	cpc	r30, r20
    29ec:	f5 07       	cpc	r31, r21
    29ee:	20 f0       	brcs	.+8      	; 0x29f8 <__udivmodsi4_ep>
    29f0:	a2 1b       	sub	r26, r18
    29f2:	b3 0b       	sbc	r27, r19
    29f4:	e4 0b       	sbc	r30, r20
    29f6:	f5 0b       	sbc	r31, r21

000029f8 <__udivmodsi4_ep>:
    29f8:	66 1f       	adc	r22, r22
    29fa:	77 1f       	adc	r23, r23
    29fc:	88 1f       	adc	r24, r24
    29fe:	99 1f       	adc	r25, r25
    2a00:	1a 94       	dec	r1
    2a02:	69 f7       	brne	.-38     	; 0x29de <__udivmodsi4_loop>
    2a04:	60 95       	com	r22
    2a06:	70 95       	com	r23
    2a08:	80 95       	com	r24
    2a0a:	90 95       	com	r25
    2a0c:	9b 01       	movw	r18, r22
    2a0e:	ac 01       	movw	r20, r24
    2a10:	bd 01       	movw	r22, r26
    2a12:	cf 01       	movw	r24, r30
    2a14:	08 95       	ret

00002a16 <__prologue_saves__>:
    2a16:	2f 92       	push	r2
    2a18:	3f 92       	push	r3
    2a1a:	4f 92       	push	r4
    2a1c:	5f 92       	push	r5
    2a1e:	6f 92       	push	r6
    2a20:	7f 92       	push	r7
    2a22:	8f 92       	push	r8
    2a24:	9f 92       	push	r9
    2a26:	af 92       	push	r10
    2a28:	bf 92       	push	r11
    2a2a:	cf 92       	push	r12
    2a2c:	df 92       	push	r13
    2a2e:	ef 92       	push	r14
    2a30:	ff 92       	push	r15
    2a32:	0f 93       	push	r16
    2a34:	1f 93       	push	r17
    2a36:	cf 93       	push	r28
    2a38:	df 93       	push	r29
    2a3a:	cd b7       	in	r28, 0x3d	; 61
    2a3c:	de b7       	in	r29, 0x3e	; 62
    2a3e:	ca 1b       	sub	r28, r26
    2a40:	db 0b       	sbc	r29, r27
    2a42:	0f b6       	in	r0, 0x3f	; 63
    2a44:	f8 94       	cli
    2a46:	de bf       	out	0x3e, r29	; 62
    2a48:	0f be       	out	0x3f, r0	; 63
    2a4a:	cd bf       	out	0x3d, r28	; 61
    2a4c:	09 94       	ijmp

00002a4e <__epilogue_restores__>:
    2a4e:	2a 88       	ldd	r2, Y+18	; 0x12
    2a50:	39 88       	ldd	r3, Y+17	; 0x11
    2a52:	48 88       	ldd	r4, Y+16	; 0x10
    2a54:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a56:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a58:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a5a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a5c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a5e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a60:	b9 84       	ldd	r11, Y+9	; 0x09
    2a62:	c8 84       	ldd	r12, Y+8	; 0x08
    2a64:	df 80       	ldd	r13, Y+7	; 0x07
    2a66:	ee 80       	ldd	r14, Y+6	; 0x06
    2a68:	fd 80       	ldd	r15, Y+5	; 0x05
    2a6a:	0c 81       	ldd	r16, Y+4	; 0x04
    2a6c:	1b 81       	ldd	r17, Y+3	; 0x03
    2a6e:	aa 81       	ldd	r26, Y+2	; 0x02
    2a70:	b9 81       	ldd	r27, Y+1	; 0x01
    2a72:	ce 0f       	add	r28, r30
    2a74:	d1 1d       	adc	r29, r1
    2a76:	0f b6       	in	r0, 0x3f	; 63
    2a78:	f8 94       	cli
    2a7a:	de bf       	out	0x3e, r29	; 62
    2a7c:	0f be       	out	0x3f, r0	; 63
    2a7e:	cd bf       	out	0x3d, r28	; 61
    2a80:	ed 01       	movw	r28, r26
    2a82:	08 95       	ret

00002a84 <_exit>:
    2a84:	f8 94       	cli

00002a86 <__stop_program>:
    2a86:	ff cf       	rjmp	.-2      	; 0x2a86 <__stop_program>
